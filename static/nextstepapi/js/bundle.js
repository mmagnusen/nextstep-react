!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=264)}([function(e,t,n){e.exports=n(256)()},function(e,t,n){"use strict";e.exports=n(263)},function(e,t,n){"use strict";e.exports=n(235)},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,u,l){if(r(t),!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,a,i,u,l],f=0;(s=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){e.exports=function(){"use strict";var e=Array.prototype.slice;function t(e,t){t&&(e.prototype=Object.create(t.prototype)),e.prototype.constructor=e}function n(e){return i(e)?e:W(e)}function r(e){return u(e)?e:V(e)}function o(e){return l(e)?e:$(e)}function a(e){return i(e)&&!s(e)?e:Y(e)}function i(e){return!(!e||!e[f])}function u(e){return!(!e||!e[p])}function l(e){return!(!e||!e[d])}function s(e){return u(e)||l(e)}function c(e){return!(!e||!e[h])}t(r,n),t(o,n),t(a,n),n.isIterable=i,n.isKeyed=u,n.isIndexed=l,n.isAssociative=s,n.isOrdered=c,n.Keyed=r,n.Indexed=o,n.Set=a;var f="@@__IMMUTABLE_ITERABLE__@@",p="@@__IMMUTABLE_KEYED__@@",d="@@__IMMUTABLE_INDEXED__@@",h="@@__IMMUTABLE_ORDERED__@@",m=5,y=1<<m,_=y-1,g={},v={value:!1},b={value:!1};function w(e){return e.value=!1,e}function E(e){e&&(e.value=!0)}function C(){}function S(e,t){t=t||0;for(var n=Math.max(0,e.length-t),r=new Array(n),o=0;o<n;o++)r[o]=e[o+t];return r}function k(e){return void 0===e.size&&(e.size=e.__iterate(O)),e.size}function x(e,t){if("number"!=typeof t){var n=t>>>0;if(""+n!==t||4294967295===n)return NaN;t=n}return t<0?k(e)+t:t}function O(){return!0}function T(e,t,n){return(0===e||void 0!==n&&e<=-n)&&(void 0===t||void 0!==n&&t>=n)}function j(e,t){return M(e,t,0)}function R(e,t){return M(e,t,t)}function M(e,t,n){return void 0===e?n:e<0?Math.max(0,t+e):void 0===t?e:Math.min(t,e)}var D=0,N=1,P=2,L="function"==typeof Symbol&&Symbol.iterator,I="@@iterator",A=L||I;function U(e){this.next=e}function F(e,t,n,r){var o=0===e?t:1===e?n:[t,n];return r?r.value=o:r={value:o,done:!1},r}function B(){return{value:void 0,done:!0}}function q(e){return!!J(e)}function K(e){return e&&"function"==typeof e.next}function H(e){var t=J(e);return t&&t.call(e)}function J(e){var t=e&&(L&&e[L]||e[I]);if("function"==typeof t)return t}function z(e){return e&&"number"==typeof e.length}function W(e){return null===e||void 0===e?ae():i(e)?e.toSeq():function(e){var t=le(e)||"object"==typeof e&&new te(e);if(!t)throw new TypeError("Expected Array or iterable object of values, or keyed object: "+e);return t}(e)}function V(e){return null===e||void 0===e?ae().toKeyedSeq():i(e)?u(e)?e.toSeq():e.fromEntrySeq():ie(e)}function $(e){return null===e||void 0===e?ae():i(e)?u(e)?e.entrySeq():e.toIndexedSeq():ue(e)}function Y(e){return(null===e||void 0===e?ae():i(e)?u(e)?e.entrySeq():e:ue(e)).toSetSeq()}U.prototype.toString=function(){return"[Iterator]"},U.KEYS=D,U.VALUES=N,U.ENTRIES=P,U.prototype.inspect=U.prototype.toSource=function(){return this.toString()},U.prototype[A]=function(){return this},t(W,n),W.of=function(){return W(arguments)},W.prototype.toSeq=function(){return this},W.prototype.toString=function(){return this.__toString("Seq {","}")},W.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},W.prototype.__iterate=function(e,t){return se(this,e,t,!0)},W.prototype.__iterator=function(e,t){return ce(this,e,t,!0)},t(V,W),V.prototype.toKeyedSeq=function(){return this},t($,W),$.of=function(){return $(arguments)},$.prototype.toIndexedSeq=function(){return this},$.prototype.toString=function(){return this.__toString("Seq [","]")},$.prototype.__iterate=function(e,t){return se(this,e,t,!1)},$.prototype.__iterator=function(e,t){return ce(this,e,t,!1)},t(Y,W),Y.of=function(){return Y(arguments)},Y.prototype.toSetSeq=function(){return this},W.isSeq=oe,W.Keyed=V,W.Set=Y,W.Indexed=$;var G,Q,X,Z="@@__IMMUTABLE_SEQ__@@";function ee(e){this._array=e,this.size=e.length}function te(e){var t=Object.keys(e);this._object=e,this._keys=t,this.size=t.length}function ne(e){this._iterable=e,this.size=e.length||e.size}function re(e){this._iterator=e,this._iteratorCache=[]}function oe(e){return!(!e||!e[Z])}function ae(){return G||(G=new ee([]))}function ie(e){var t=Array.isArray(e)?new ee(e).fromEntrySeq():K(e)?new re(e).fromEntrySeq():q(e)?new ne(e).fromEntrySeq():"object"==typeof e?new te(e):void 0;if(!t)throw new TypeError("Expected Array or iterable object of [k, v] entries, or keyed object: "+e);return t}function ue(e){var t=le(e);if(!t)throw new TypeError("Expected Array or iterable object of values: "+e);return t}function le(e){return z(e)?new ee(e):K(e)?new re(e):q(e)?new ne(e):void 0}function se(e,t,n,r){var o=e._cache;if(o){for(var a=o.length-1,i=0;i<=a;i++){var u=o[n?a-i:i];if(!1===t(u[1],r?u[0]:i,e))return i+1}return i}return e.__iterateUncached(t,n)}function ce(e,t,n,r){var o=e._cache;if(o){var a=o.length-1,i=0;return new U(function(){var e=o[n?a-i:i];return i++>a?{value:void 0,done:!0}:F(t,r?e[0]:i-1,e[1])})}return e.__iteratorUncached(t,n)}function fe(e,t){return t?function e(t,n,r,o){return Array.isArray(n)?t.call(o,r,$(n).map(function(r,o){return e(t,r,o,n)})):de(n)?t.call(o,r,V(n).map(function(r,o){return e(t,r,o,n)})):n}(t,e,"",{"":e}):pe(e)}function pe(e){return Array.isArray(e)?$(e).map(pe).toList():de(e)?V(e).map(pe).toMap():e}function de(e){return e&&(e.constructor===Object||void 0===e.constructor)}function he(e,t){if(e===t||e!=e&&t!=t)return!0;if(!e||!t)return!1;if("function"==typeof e.valueOf&&"function"==typeof t.valueOf){if(e=e.valueOf(),t=t.valueOf(),e===t||e!=e&&t!=t)return!0;if(!e||!t)return!1}return!("function"!=typeof e.equals||"function"!=typeof t.equals||!e.equals(t))}function me(e,t){if(e===t)return!0;if(!i(t)||void 0!==e.size&&void 0!==t.size&&e.size!==t.size||void 0!==e.__hash&&void 0!==t.__hash&&e.__hash!==t.__hash||u(e)!==u(t)||l(e)!==l(t)||c(e)!==c(t))return!1;if(0===e.size&&0===t.size)return!0;var n=!s(e);if(c(e)){var r=e.entries();return t.every(function(e,t){var o=r.next().value;return o&&he(o[1],e)&&(n||he(o[0],t))})&&r.next().done}var o=!1;if(void 0===e.size)if(void 0===t.size)"function"==typeof e.cacheResult&&e.cacheResult();else{o=!0;var a=e;e=t,t=a}var f=!0,p=t.__iterate(function(t,r){if(n?!e.has(t):o?!he(t,e.get(r,g)):!he(e.get(r,g),t))return f=!1,!1});return f&&e.size===p}function ye(e,t){if(!(this instanceof ye))return new ye(e,t);if(this._value=e,this.size=void 0===t?1/0:Math.max(0,t),0===this.size){if(Q)return Q;Q=this}}function _e(e,t){if(!e)throw new Error(t)}function ge(e,t,n){if(!(this instanceof ge))return new ge(e,t,n);if(_e(0!==n,"Cannot step a Range by 0"),e=e||0,void 0===t&&(t=1/0),n=void 0===n?1:Math.abs(n),t<e&&(n=-n),this._start=e,this._end=t,this._step=n,this.size=Math.max(0,Math.ceil((t-e)/n-1)+1),0===this.size){if(X)return X;X=this}}function ve(){throw TypeError("Abstract")}function be(){}function we(){}function Ee(){}W.prototype[Z]=!0,t(ee,$),ee.prototype.get=function(e,t){return this.has(e)?this._array[x(this,e)]:t},ee.prototype.__iterate=function(e,t){for(var n=this._array,r=n.length-1,o=0;o<=r;o++)if(!1===e(n[t?r-o:o],o,this))return o+1;return o},ee.prototype.__iterator=function(e,t){var n=this._array,r=n.length-1,o=0;return new U(function(){return o>r?{value:void 0,done:!0}:F(e,o,n[t?r-o++:o++])})},t(te,V),te.prototype.get=function(e,t){return void 0===t||this.has(e)?this._object[e]:t},te.prototype.has=function(e){return this._object.hasOwnProperty(e)},te.prototype.__iterate=function(e,t){for(var n=this._object,r=this._keys,o=r.length-1,a=0;a<=o;a++){var i=r[t?o-a:a];if(!1===e(n[i],i,this))return a+1}return a},te.prototype.__iterator=function(e,t){var n=this._object,r=this._keys,o=r.length-1,a=0;return new U(function(){var i=r[t?o-a:a];return a++>o?{value:void 0,done:!0}:F(e,i,n[i])})},te.prototype[h]=!0,t(ne,$),ne.prototype.__iterateUncached=function(e,t){if(t)return this.cacheResult().__iterate(e,t);var n=this._iterable,r=H(n),o=0;if(K(r))for(var a;!(a=r.next()).done&&!1!==e(a.value,o++,this););return o},ne.prototype.__iteratorUncached=function(e,t){if(t)return this.cacheResult().__iterator(e,t);var n=this._iterable,r=H(n);if(!K(r))return new U(B);var o=0;return new U(function(){var t=r.next();return t.done?t:F(e,o++,t.value)})},t(re,$),re.prototype.__iterateUncached=function(e,t){if(t)return this.cacheResult().__iterate(e,t);for(var n,r=this._iterator,o=this._iteratorCache,a=0;a<o.length;)if(!1===e(o[a],a++,this))return a;for(;!(n=r.next()).done;){var i=n.value;if(o[a]=i,!1===e(i,a++,this))break}return a},re.prototype.__iteratorUncached=function(e,t){if(t)return this.cacheResult().__iterator(e,t);var n=this._iterator,r=this._iteratorCache,o=0;return new U(function(){if(o>=r.length){var t=n.next();if(t.done)return t;r[o]=t.value}return F(e,o,r[o++])})},t(ye,$),ye.prototype.toString=function(){return 0===this.size?"Repeat []":"Repeat [ "+this._value+" "+this.size+" times ]"},ye.prototype.get=function(e,t){return this.has(e)?this._value:t},ye.prototype.includes=function(e){return he(this._value,e)},ye.prototype.slice=function(e,t){var n=this.size;return T(e,t,n)?this:new ye(this._value,R(t,n)-j(e,n))},ye.prototype.reverse=function(){return this},ye.prototype.indexOf=function(e){return he(this._value,e)?0:-1},ye.prototype.lastIndexOf=function(e){return he(this._value,e)?this.size:-1},ye.prototype.__iterate=function(e,t){for(var n=0;n<this.size;n++)if(!1===e(this._value,n,this))return n+1;return n},ye.prototype.__iterator=function(e,t){var n=this,r=0;return new U(function(){return r<n.size?F(e,r++,n._value):{value:void 0,done:!0}})},ye.prototype.equals=function(e){return e instanceof ye?he(this._value,e._value):me(e)},t(ge,$),ge.prototype.toString=function(){return 0===this.size?"Range []":"Range [ "+this._start+"..."+this._end+(this._step>1?" by "+this._step:"")+" ]"},ge.prototype.get=function(e,t){return this.has(e)?this._start+x(this,e)*this._step:t},ge.prototype.includes=function(e){var t=(e-this._start)/this._step;return t>=0&&t<this.size&&t===Math.floor(t)},ge.prototype.slice=function(e,t){return T(e,t,this.size)?this:(e=j(e,this.size),(t=R(t,this.size))<=e?new ge(0,0):new ge(this.get(e,this._end),this.get(t,this._end),this._step))},ge.prototype.indexOf=function(e){var t=e-this._start;if(t%this._step==0){var n=t/this._step;if(n>=0&&n<this.size)return n}return-1},ge.prototype.lastIndexOf=function(e){return this.indexOf(e)},ge.prototype.__iterate=function(e,t){for(var n=this.size-1,r=this._step,o=t?this._start+n*r:this._start,a=0;a<=n;a++){if(!1===e(o,a,this))return a+1;o+=t?-r:r}return a},ge.prototype.__iterator=function(e,t){var n=this.size-1,r=this._step,o=t?this._start+n*r:this._start,a=0;return new U(function(){var i=o;return o+=t?-r:r,a>n?{value:void 0,done:!0}:F(e,a++,i)})},ge.prototype.equals=function(e){return e instanceof ge?this._start===e._start&&this._end===e._end&&this._step===e._step:me(this,e)},t(ve,n),t(be,ve),t(we,ve),t(Ee,ve),ve.Keyed=be,ve.Indexed=we,ve.Set=Ee;var Ce="function"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(e,t){var n=65535&(e|=0),r=65535&(t|=0);return n*r+((e>>>16)*r+n*(t>>>16)<<16>>>0)|0};function Se(e){return e>>>1&1073741824|3221225471&e}function ke(e){if(!1===e||null===e||void 0===e)return 0;if("function"==typeof e.valueOf&&(!1===(e=e.valueOf())||null===e||void 0===e))return 0;if(!0===e)return 1;var t,n,r=typeof e;if("number"===r){var o=0|e;for(o!==e&&(o^=4294967295*e);e>4294967295;)o^=e/=4294967295;return Se(o)}if("string"===r)return e.length>Ne?(void 0===(n=Ie[t=e])&&(n=xe(t),Le===Pe&&(Le=0,Ie={}),Le++,Ie[t]=n),n):xe(e);if("function"==typeof e.hashCode)return e.hashCode();if("object"===r)return function(e){var t;if(Re&&void 0!==(t=Oe.get(e)))return t;if(void 0!==(t=e[De]))return t;if(!je){if(void 0!==(t=e.propertyIsEnumerable&&e.propertyIsEnumerable[De]))return t;if(void 0!==(t=function(e){if(e&&e.nodeType>0)switch(e.nodeType){case 1:return e.uniqueID;case 9:return e.documentElement&&e.documentElement.uniqueID}}(e)))return t}if(t=++Me,1073741824&Me&&(Me=0),Re)Oe.set(e,t);else{if(void 0!==Te&&!1===Te(e))throw new Error("Non-extensible objects are not allowed as keys.");if(je)Object.defineProperty(e,De,{enumerable:!1,configurable:!1,writable:!1,value:t});else if(void 0!==e.propertyIsEnumerable&&e.propertyIsEnumerable===e.constructor.prototype.propertyIsEnumerable)e.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},e.propertyIsEnumerable[De]=t;else{if(void 0===e.nodeType)throw new Error("Unable to set a non-enumerable property on object.");e[De]=t}}return t}(e);if("function"==typeof e.toString)return xe(e.toString());throw new Error("Value type "+r+" cannot be hashed.")}function xe(e){for(var t=0,n=0;n<e.length;n++)t=31*t+e.charCodeAt(n)|0;return Se(t)}var Oe,Te=Object.isExtensible,je=function(){try{return Object.defineProperty({},"@",{}),!0}catch(e){return!1}}(),Re="function"==typeof WeakMap;Re&&(Oe=new WeakMap);var Me=0,De="__immutablehash__";"function"==typeof Symbol&&(De=Symbol(De));var Ne=16,Pe=255,Le=0,Ie={};function Ae(e){_e(e!==1/0,"Cannot perform this action with an infinite size.")}function Ue(e){return null===e||void 0===e?Xe():Fe(e)&&!c(e)?e:Xe().withMutations(function(t){var n=r(e);Ae(n.size),n.forEach(function(e,n){return t.set(n,e)})})}function Fe(e){return!(!e||!e[qe])}t(Ue,be),Ue.prototype.toString=function(){return this.__toString("Map {","}")},Ue.prototype.get=function(e,t){return this._root?this._root.get(0,void 0,e,t):t},Ue.prototype.set=function(e,t){return Ze(this,e,t)},Ue.prototype.setIn=function(e,t){return this.updateIn(e,g,function(){return t})},Ue.prototype.remove=function(e){return Ze(this,e,g)},Ue.prototype.deleteIn=function(e){return this.updateIn(e,function(){return g})},Ue.prototype.update=function(e,t,n){return 1===arguments.length?e(this):this.updateIn([e],t,n)},Ue.prototype.updateIn=function(e,t,n){n||(n=t,t=void 0);var r=function e(t,n,r,o){var a=t===g,i=n.next();if(i.done){var u=a?r:t,l=o(u);return l===u?t:l}_e(a||t&&t.set,"invalid keyPath");var s=i.value,c=a?g:t.get(s,g),f=e(c,n,r,o);return f===c?t:f===g?t.remove(s):(a?Xe():t).set(s,f)}(this,nn(e),t,n);return r===g?void 0:r},Ue.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):Xe()},Ue.prototype.merge=function(){return rt(this,void 0,arguments)},Ue.prototype.mergeWith=function(t){var n=e.call(arguments,1);return rt(this,t,n)},Ue.prototype.mergeIn=function(t){var n=e.call(arguments,1);return this.updateIn(t,Xe(),function(e){return"function"==typeof e.merge?e.merge.apply(e,n):n[n.length-1]})},Ue.prototype.mergeDeep=function(){return rt(this,ot,arguments)},Ue.prototype.mergeDeepWith=function(t){var n=e.call(arguments,1);return rt(this,at(t),n)},Ue.prototype.mergeDeepIn=function(t){var n=e.call(arguments,1);return this.updateIn(t,Xe(),function(e){return"function"==typeof e.mergeDeep?e.mergeDeep.apply(e,n):n[n.length-1]})},Ue.prototype.sort=function(e){return jt(zt(this,e))},Ue.prototype.sortBy=function(e,t){return jt(zt(this,t,e))},Ue.prototype.withMutations=function(e){var t=this.asMutable();return e(t),t.wasAltered()?t.__ensureOwner(this.__ownerID):this},Ue.prototype.asMutable=function(){return this.__ownerID?this:this.__ensureOwner(new C)},Ue.prototype.asImmutable=function(){return this.__ensureOwner()},Ue.prototype.wasAltered=function(){return this.__altered},Ue.prototype.__iterator=function(e,t){return new $e(this,e,t)},Ue.prototype.__iterate=function(e,t){var n=this,r=0;return this._root&&this._root.iterate(function(t){return r++,e(t[1],t[0],n)},t),r},Ue.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?Qe(this.size,this._root,e,this.__hash):(this.__ownerID=e,this.__altered=!1,this)},Ue.isMap=Fe;var Be,qe="@@__IMMUTABLE_MAP__@@",Ke=Ue.prototype;function He(e,t){this.ownerID=e,this.entries=t}function Je(e,t,n){this.ownerID=e,this.bitmap=t,this.nodes=n}function ze(e,t,n){this.ownerID=e,this.count=t,this.nodes=n}function We(e,t,n){this.ownerID=e,this.keyHash=t,this.entries=n}function Ve(e,t,n){this.ownerID=e,this.keyHash=t,this.entry=n}function $e(e,t,n){this._type=t,this._reverse=n,this._stack=e._root&&Ge(e._root)}function Ye(e,t){return F(e,t[0],t[1])}function Ge(e,t){return{node:e,index:0,__prev:t}}function Qe(e,t,n,r){var o=Object.create(Ke);return o.size=e,o._root=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Xe(){return Be||(Be=Qe(0))}function Ze(e,t,n){var r,o;if(e._root){var a=w(v),i=w(b);if(r=et(e._root,e.__ownerID,0,void 0,t,n,a,i),!i.value)return e;o=e.size+(a.value?n===g?-1:1:0)}else{if(n===g)return e;o=1,r=new He(e.__ownerID,[[t,n]])}return e.__ownerID?(e.size=o,e._root=r,e.__hash=void 0,e.__altered=!0,e):r?Qe(o,r):Xe()}function et(e,t,n,r,o,a,i,u){return e?e.update(t,n,r,o,a,i,u):a===g?e:(E(u),E(i),new Ve(t,r,[o,a]))}function tt(e){return e.constructor===Ve||e.constructor===We}function nt(e,t,n,r,o){if(e.keyHash===r)return new We(t,r,[e.entry,o]);var a,i=(0===n?e.keyHash:e.keyHash>>>n)&_,u=(0===n?r:r>>>n)&_,l=i===u?[nt(e,t,n+m,r,o)]:(a=new Ve(t,r,o),i<u?[e,a]:[a,e]);return new Je(t,1<<i|1<<u,l)}function rt(e,t,n){for(var o=[],a=0;a<n.length;a++){var u=n[a],l=r(u);i(u)||(l=l.map(function(e){return fe(e)})),o.push(l)}return it(e,t,o)}function ot(e,t,n){return e&&e.mergeDeep&&i(t)?e.mergeDeep(t):he(e,t)?e:t}function at(e){return function(t,n,r){if(t&&t.mergeDeepWith&&i(n))return t.mergeDeepWith(e,n);var o=e(t,n,r);return he(t,o)?t:o}}function it(e,t,n){return 0===(n=n.filter(function(e){return 0!==e.size})).length?e:0!==e.size||e.__ownerID||1!==n.length?e.withMutations(function(e){for(var r=t?function(n,r){e.update(r,g,function(e){return e===g?n:t(e,n,r)})}:function(t,n){e.set(n,t)},o=0;o<n.length;o++)n[o].forEach(r)}):e.constructor(n[0])}function ut(e){return e=(e=(858993459&(e-=e>>1&1431655765))+(e>>2&858993459))+(e>>4)&252645135,e+=e>>8,127&(e+=e>>16)}function lt(e,t,n,r){var o=r?e:S(e);return o[t]=n,o}Ke[qe]=!0,Ke.delete=Ke.remove,Ke.removeIn=Ke.deleteIn,He.prototype.get=function(e,t,n,r){for(var o=this.entries,a=0,i=o.length;a<i;a++)if(he(n,o[a][0]))return o[a][1];return r},He.prototype.update=function(e,t,n,r,o,a,i){for(var u=o===g,l=this.entries,s=0,c=l.length;s<c&&!he(r,l[s][0]);s++);var f=s<c;if(f?l[s][1]===o:u)return this;if(E(i),(u||!f)&&E(a),!u||1!==l.length){if(!f&&!u&&l.length>=st)return function(e,t,n,r){e||(e=new C);for(var o=new Ve(e,ke(n),[n,r]),a=0;a<t.length;a++){var i=t[a];o=o.update(e,0,void 0,i[0],i[1])}return o}(e,l,r,o);var p=e&&e===this.ownerID,d=p?l:S(l);return f?u?s===c-1?d.pop():d[s]=d.pop():d[s]=[r,o]:d.push([r,o]),p?(this.entries=d,this):new He(e,d)}},Je.prototype.get=function(e,t,n,r){void 0===t&&(t=ke(n));var o=1<<((0===e?t:t>>>e)&_),a=this.bitmap;return 0==(a&o)?r:this.nodes[ut(a&o-1)].get(e+m,t,n,r)},Je.prototype.update=function(e,t,n,r,o,a,i){void 0===n&&(n=ke(r));var u=(0===t?n:n>>>t)&_,l=1<<u,s=this.bitmap,c=0!=(s&l);if(!c&&o===g)return this;var f=ut(s&l-1),p=this.nodes,d=c?p[f]:void 0,h=et(d,e,t+m,n,r,o,a,i);if(h===d)return this;if(!c&&h&&p.length>=ct)return function(e,t,n,r,o){for(var a=0,i=new Array(y),u=0;0!==n;u++,n>>>=1)i[u]=1&n?t[a++]:void 0;return i[r]=o,new ze(e,a+1,i)}(e,p,s,u,h);if(c&&!h&&2===p.length&&tt(p[1^f]))return p[1^f];if(c&&h&&1===p.length&&tt(h))return h;var v=e&&e===this.ownerID,b=c?h?s:s^l:s|l,w=c?h?lt(p,f,h,v):function(e,t,n){var r=e.length-1;if(n&&t===r)return e.pop(),e;for(var o=new Array(r),a=0,i=0;i<r;i++)i===t&&(a=1),o[i]=e[i+a];return o}(p,f,v):function(e,t,n,r){var o=e.length+1;if(r&&t+1===o)return e[t]=n,e;for(var a=new Array(o),i=0,u=0;u<o;u++)u===t?(a[u]=n,i=-1):a[u]=e[u+i];return a}(p,f,h,v);return v?(this.bitmap=b,this.nodes=w,this):new Je(e,b,w)},ze.prototype.get=function(e,t,n,r){void 0===t&&(t=ke(n));var o=(0===e?t:t>>>e)&_,a=this.nodes[o];return a?a.get(e+m,t,n,r):r},ze.prototype.update=function(e,t,n,r,o,a,i){void 0===n&&(n=ke(r));var u=(0===t?n:n>>>t)&_,l=o===g,s=this.nodes,c=s[u];if(l&&!c)return this;var f=et(c,e,t+m,n,r,o,a,i);if(f===c)return this;var p=this.count;if(c){if(!f&&--p<ft)return function(e,t,n,r){for(var o=0,a=0,i=new Array(n),u=0,l=1,s=t.length;u<s;u++,l<<=1){var c=t[u];void 0!==c&&u!==r&&(o|=l,i[a++]=c)}return new Je(e,o,i)}(e,s,p,u)}else p++;var d=e&&e===this.ownerID,h=lt(s,u,f,d);return d?(this.count=p,this.nodes=h,this):new ze(e,p,h)},We.prototype.get=function(e,t,n,r){for(var o=this.entries,a=0,i=o.length;a<i;a++)if(he(n,o[a][0]))return o[a][1];return r},We.prototype.update=function(e,t,n,r,o,a,i){void 0===n&&(n=ke(r));var u=o===g;if(n!==this.keyHash)return u?this:(E(i),E(a),nt(this,e,t,n,[r,o]));for(var l=this.entries,s=0,c=l.length;s<c&&!he(r,l[s][0]);s++);var f=s<c;if(f?l[s][1]===o:u)return this;if(E(i),(u||!f)&&E(a),u&&2===c)return new Ve(e,this.keyHash,l[1^s]);var p=e&&e===this.ownerID,d=p?l:S(l);return f?u?s===c-1?d.pop():d[s]=d.pop():d[s]=[r,o]:d.push([r,o]),p?(this.entries=d,this):new We(e,this.keyHash,d)},Ve.prototype.get=function(e,t,n,r){return he(n,this.entry[0])?this.entry[1]:r},Ve.prototype.update=function(e,t,n,r,o,a,i){var u=o===g,l=he(r,this.entry[0]);return(l?o===this.entry[1]:u)?this:(E(i),u?void E(a):l?e&&e===this.ownerID?(this.entry[1]=o,this):new Ve(e,this.keyHash,[r,o]):(E(a),nt(this,e,t,ke(r),[r,o])))},He.prototype.iterate=We.prototype.iterate=function(e,t){for(var n=this.entries,r=0,o=n.length-1;r<=o;r++)if(!1===e(n[t?o-r:r]))return!1},Je.prototype.iterate=ze.prototype.iterate=function(e,t){for(var n=this.nodes,r=0,o=n.length-1;r<=o;r++){var a=n[t?o-r:r];if(a&&!1===a.iterate(e,t))return!1}},Ve.prototype.iterate=function(e,t){return e(this.entry)},t($e,U),$e.prototype.next=function(){for(var e=this._type,t=this._stack;t;){var n,r=t.node,o=t.index++;if(r.entry){if(0===o)return Ye(e,r.entry)}else if(r.entries){if(n=r.entries.length-1,o<=n)return Ye(e,r.entries[this._reverse?n-o:o])}else if(n=r.nodes.length-1,o<=n){var a=r.nodes[this._reverse?n-o:o];if(a){if(a.entry)return Ye(e,a.entry);t=this._stack=Ge(a,t)}continue}t=this._stack=this._stack.__prev}return{value:void 0,done:!0}};var st=y/4,ct=y/2,ft=y/4;function pt(e){var t=Et();if(null===e||void 0===e)return t;if(dt(e))return e;var n=o(e),r=n.size;return 0===r?t:(Ae(r),r>0&&r<y?wt(0,r,m,null,new yt(n.toArray())):t.withMutations(function(e){e.setSize(r),n.forEach(function(t,n){return e.set(n,t)})}))}function dt(e){return!(!e||!e[ht])}t(pt,we),pt.of=function(){return this(arguments)},pt.prototype.toString=function(){return this.__toString("List [","]")},pt.prototype.get=function(e,t){if((e=x(this,e))>=0&&e<this.size){var n=kt(this,e+=this._origin);return n&&n.array[e&_]}return t},pt.prototype.set=function(e,t){return function(e,t,n){if((t=x(e,t))!=t)return e;if(t>=e.size||t<0)return e.withMutations(function(e){t<0?xt(e,t).set(0,n):xt(e,0,t+1).set(t,n)});t+=e._origin;var r=e._tail,o=e._root,a=w(b);return t>=Tt(e._capacity)?r=Ct(r,e.__ownerID,0,t,n,a):o=Ct(o,e.__ownerID,e._level,t,n,a),a.value?e.__ownerID?(e._root=o,e._tail=r,e.__hash=void 0,e.__altered=!0,e):wt(e._origin,e._capacity,e._level,o,r):e}(this,e,t)},pt.prototype.remove=function(e){return this.has(e)?0===e?this.shift():e===this.size-1?this.pop():this.splice(e,1):this},pt.prototype.insert=function(e,t){return this.splice(e,0,t)},pt.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=m,this._root=this._tail=null,this.__hash=void 0,this.__altered=!0,this):Et()},pt.prototype.push=function(){var e=arguments,t=this.size;return this.withMutations(function(n){xt(n,0,t+e.length);for(var r=0;r<e.length;r++)n.set(t+r,e[r])})},pt.prototype.pop=function(){return xt(this,0,-1)},pt.prototype.unshift=function(){var e=arguments;return this.withMutations(function(t){xt(t,-e.length);for(var n=0;n<e.length;n++)t.set(n,e[n])})},pt.prototype.shift=function(){return xt(this,1)},pt.prototype.merge=function(){return Ot(this,void 0,arguments)},pt.prototype.mergeWith=function(t){var n=e.call(arguments,1);return Ot(this,t,n)},pt.prototype.mergeDeep=function(){return Ot(this,ot,arguments)},pt.prototype.mergeDeepWith=function(t){var n=e.call(arguments,1);return Ot(this,at(t),n)},pt.prototype.setSize=function(e){return xt(this,0,e)},pt.prototype.slice=function(e,t){var n=this.size;return T(e,t,n)?this:xt(this,j(e,n),R(t,n))},pt.prototype.__iterator=function(e,t){var n=0,r=bt(this,t);return new U(function(){var t=r();return t===vt?{value:void 0,done:!0}:F(e,n++,t)})},pt.prototype.__iterate=function(e,t){for(var n,r=0,o=bt(this,t);(n=o())!==vt&&!1!==e(n,r++,this););return r},pt.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?wt(this._origin,this._capacity,this._level,this._root,this._tail,e,this.__hash):(this.__ownerID=e,this)},pt.isList=dt;var ht="@@__IMMUTABLE_LIST__@@",mt=pt.prototype;function yt(e,t){this.array=e,this.ownerID=t}mt[ht]=!0,mt.delete=mt.remove,mt.setIn=Ke.setIn,mt.deleteIn=mt.removeIn=Ke.removeIn,mt.update=Ke.update,mt.updateIn=Ke.updateIn,mt.mergeIn=Ke.mergeIn,mt.mergeDeepIn=Ke.mergeDeepIn,mt.withMutations=Ke.withMutations,mt.asMutable=Ke.asMutable,mt.asImmutable=Ke.asImmutable,mt.wasAltered=Ke.wasAltered,yt.prototype.removeBefore=function(e,t,n){if(n===t?1<<t:0===this.array.length)return this;var r=n>>>t&_;if(r>=this.array.length)return new yt([],e);var o,a=0===r;if(t>0){var i=this.array[r];if((o=i&&i.removeBefore(e,t-m,n))===i&&a)return this}if(a&&!o)return this;var u=St(this,e);if(!a)for(var l=0;l<r;l++)u.array[l]=void 0;return o&&(u.array[r]=o),u},yt.prototype.removeAfter=function(e,t,n){if(n===(t?1<<t:0)||0===this.array.length)return this;var r,o=n-1>>>t&_;if(o>=this.array.length)return this;if(t>0){var a=this.array[o];if((r=a&&a.removeAfter(e,t-m,n))===a&&o===this.array.length-1)return this}var i=St(this,e);return i.array.splice(o+1),r&&(i.array[o]=r),i};var _t,gt,vt={};function bt(e,t){var n=e._origin,r=e._capacity,o=Tt(r),a=e._tail;return i(e._root,e._level,0);function i(e,u,l){return 0===u?function(e,i){var u=i===o?a&&a.array:e&&e.array,l=i>n?0:n-i,s=r-i;return s>y&&(s=y),function(){if(l===s)return vt;var e=t?--s:l++;return u&&u[e]}}(e,l):function(e,o,a){var u,l=e&&e.array,s=a>n?0:n-a>>o,c=1+(r-a>>o);return c>y&&(c=y),function(){for(;;){if(u){var e=u();if(e!==vt)return e;u=null}if(s===c)return vt;var n=t?--c:s++;u=i(l&&l[n],o-m,a+(n<<o))}}}(e,u,l)}}function wt(e,t,n,r,o,a,i){var u=Object.create(mt);return u.size=t-e,u._origin=e,u._capacity=t,u._level=n,u._root=r,u._tail=o,u.__ownerID=a,u.__hash=i,u.__altered=!1,u}function Et(){return _t||(_t=wt(0,0,m))}function Ct(e,t,n,r,o,a){var i,u=r>>>n&_,l=e&&u<e.array.length;if(!l&&void 0===o)return e;if(n>0){var s=e&&e.array[u],c=Ct(s,t,n-m,r,o,a);return c===s?e:((i=St(e,t)).array[u]=c,i)}return l&&e.array[u]===o?e:(E(a),i=St(e,t),void 0===o&&u===i.array.length-1?i.array.pop():i.array[u]=o,i)}function St(e,t){return t&&e&&t===e.ownerID?e:new yt(e?e.array.slice():[],t)}function kt(e,t){if(t>=Tt(e._capacity))return e._tail;if(t<1<<e._level+m){for(var n=e._root,r=e._level;n&&r>0;)n=n.array[t>>>r&_],r-=m;return n}}function xt(e,t,n){void 0!==t&&(t|=0),void 0!==n&&(n|=0);var r=e.__ownerID||new C,o=e._origin,a=e._capacity,i=o+t,u=void 0===n?a:n<0?a+n:o+n;if(i===o&&u===a)return e;if(i>=u)return e.clear();for(var l=e._level,s=e._root,c=0;i+c<0;)s=new yt(s&&s.array.length?[void 0,s]:[],r),c+=1<<(l+=m);c&&(i+=c,o+=c,u+=c,a+=c);for(var f=Tt(a),p=Tt(u);p>=1<<l+m;)s=new yt(s&&s.array.length?[s]:[],r),l+=m;var d=e._tail,h=p<f?kt(e,u-1):p>f?new yt([],r):d;if(d&&p>f&&i<a&&d.array.length){for(var y=s=St(s,r),g=l;g>m;g-=m){var v=f>>>g&_;y=y.array[v]=St(y.array[v],r)}y.array[f>>>m&_]=d}if(u<a&&(h=h&&h.removeAfter(r,0,u)),i>=p)i-=p,u-=p,l=m,s=null,h=h&&h.removeBefore(r,0,i);else if(i>o||p<f){for(c=0;s;){var b=i>>>l&_;if(b!==p>>>l&_)break;b&&(c+=(1<<l)*b),l-=m,s=s.array[b]}s&&i>o&&(s=s.removeBefore(r,l,i-c)),s&&p<f&&(s=s.removeAfter(r,l,p-c)),c&&(i-=c,u-=c)}return e.__ownerID?(e.size=u-i,e._origin=i,e._capacity=u,e._level=l,e._root=s,e._tail=h,e.__hash=void 0,e.__altered=!0,e):wt(i,u,l,s,h)}function Ot(e,t,n){for(var r=[],a=0,u=0;u<n.length;u++){var l=n[u],s=o(l);s.size>a&&(a=s.size),i(l)||(s=s.map(function(e){return fe(e)})),r.push(s)}return a>e.size&&(e=e.setSize(a)),it(e,t,r)}function Tt(e){return e<y?0:e-1>>>m<<m}function jt(e){return null===e||void 0===e?Dt():Rt(e)?e:Dt().withMutations(function(t){var n=r(e);Ae(n.size),n.forEach(function(e,n){return t.set(n,e)})})}function Rt(e){return Fe(e)&&c(e)}function Mt(e,t,n,r){var o=Object.create(jt.prototype);return o.size=e?e.size:0,o._map=e,o._list=t,o.__ownerID=n,o.__hash=r,o}function Dt(){return gt||(gt=Mt(Xe(),Et()))}function Nt(e,t,n){var r,o,a=e._map,i=e._list,u=a.get(t),l=void 0!==u;if(n===g){if(!l)return e;i.size>=y&&i.size>=2*a.size?(o=i.filter(function(e,t){return void 0!==e&&u!==t}),r=o.toKeyedSeq().map(function(e){return e[0]}).flip().toMap(),e.__ownerID&&(r.__ownerID=o.__ownerID=e.__ownerID)):(r=a.remove(t),o=u===i.size-1?i.pop():i.set(u,void 0))}else if(l){if(n===i.get(u)[1])return e;r=a,o=i.set(u,[t,n])}else r=a.set(t,i.size),o=i.set(i.size,[t,n]);return e.__ownerID?(e.size=r.size,e._map=r,e._list=o,e.__hash=void 0,e):Mt(r,o)}function Pt(e,t){this._iter=e,this._useKeys=t,this.size=e.size}function Lt(e){this._iter=e,this.size=e.size}function It(e){this._iter=e,this.size=e.size}function At(e){this._iter=e,this.size=e.size}function Ut(e){var t=Zt(e);return t._iter=e,t.size=e.size,t.flip=function(){return e},t.reverse=function(){var t=e.reverse.apply(this);return t.flip=function(){return e.reverse()},t},t.has=function(t){return e.includes(t)},t.includes=function(t){return e.has(t)},t.cacheResult=en,t.__iterateUncached=function(t,n){var r=this;return e.__iterate(function(e,n){return!1!==t(n,e,r)},n)},t.__iteratorUncached=function(t,n){if(t===P){var r=e.__iterator(t,n);return new U(function(){var e=r.next();if(!e.done){var t=e.value[0];e.value[0]=e.value[1],e.value[1]=t}return e})}return e.__iterator(t===N?D:N,n)},t}function Ft(e,t,n){var r=Zt(e);return r.size=e.size,r.has=function(t){return e.has(t)},r.get=function(r,o){var a=e.get(r,g);return a===g?o:t.call(n,a,r,e)},r.__iterateUncached=function(r,o){var a=this;return e.__iterate(function(e,o,i){return!1!==r(t.call(n,e,o,i),o,a)},o)},r.__iteratorUncached=function(r,o){var a=e.__iterator(P,o);return new U(function(){var o=a.next();if(o.done)return o;var i=o.value,u=i[0];return F(r,u,t.call(n,i[1],u,e),o)})},r}function Bt(e,t){var n=Zt(e);return n._iter=e,n.size=e.size,n.reverse=function(){return e},e.flip&&(n.flip=function(){var t=Ut(e);return t.reverse=function(){return e.flip()},t}),n.get=function(n,r){return e.get(t?n:-1-n,r)},n.has=function(n){return e.has(t?n:-1-n)},n.includes=function(t){return e.includes(t)},n.cacheResult=en,n.__iterate=function(t,n){var r=this;return e.__iterate(function(e,n){return t(e,n,r)},!n)},n.__iterator=function(t,n){return e.__iterator(t,!n)},n}function qt(e,t,n,r){var o=Zt(e);return r&&(o.has=function(r){var o=e.get(r,g);return o!==g&&!!t.call(n,o,r,e)},o.get=function(r,o){var a=e.get(r,g);return a!==g&&t.call(n,a,r,e)?a:o}),o.__iterateUncached=function(o,a){var i=this,u=0;return e.__iterate(function(e,a,l){if(t.call(n,e,a,l))return u++,o(e,r?a:u-1,i)},a),u},o.__iteratorUncached=function(o,a){var i=e.__iterator(P,a),u=0;return new U(function(){for(;;){var a=i.next();if(a.done)return a;var l=a.value,s=l[0],c=l[1];if(t.call(n,c,s,e))return F(o,r?s:u++,c,a)}})},o}function Kt(e,t,n,r){var o=e.size;if(void 0!==t&&(t|=0),void 0!==n&&(n|=0),T(t,n,o))return e;var a=j(t,o),i=R(n,o);if(a!=a||i!=i)return Kt(e.toSeq().cacheResult(),t,n,r);var u,l=i-a;l==l&&(u=l<0?0:l);var s=Zt(e);return s.size=0===u?u:e.size&&u||void 0,!r&&oe(e)&&u>=0&&(s.get=function(t,n){return(t=x(this,t))>=0&&t<u?e.get(t+a,n):n}),s.__iterateUncached=function(t,n){var o=this;if(0===u)return 0;if(n)return this.cacheResult().__iterate(t,n);var i=0,l=!0,s=0;return e.__iterate(function(e,n){if(!l||!(l=i++<a))return s++,!1!==t(e,r?n:s-1,o)&&s!==u}),s},s.__iteratorUncached=function(t,n){if(0!==u&&n)return this.cacheResult().__iterator(t,n);var o=0!==u&&e.__iterator(t,n),i=0,l=0;return new U(function(){for(;i++<a;)o.next();if(++l>u)return{value:void 0,done:!0};var e=o.next();return r||t===N?e:F(t,l-1,t===D?void 0:e.value[1],e)})},s}function Ht(e,t,n,r){var o=Zt(e);return o.__iterateUncached=function(o,a){var i=this;if(a)return this.cacheResult().__iterate(o,a);var u=!0,l=0;return e.__iterate(function(e,a,s){if(!u||!(u=t.call(n,e,a,s)))return l++,o(e,r?a:l-1,i)}),l},o.__iteratorUncached=function(o,a){var i=this;if(a)return this.cacheResult().__iterator(o,a);var u=e.__iterator(P,a),l=!0,s=0;return new U(function(){var e,a,c;do{if((e=u.next()).done)return r||o===N?e:F(o,s++,o===D?void 0:e.value[1],e);var f=e.value;a=f[0],c=f[1],l&&(l=t.call(n,c,a,i))}while(l);return o===P?e:F(o,a,c,e)})},o}function Jt(e,t,n){var r=Zt(e);return r.__iterateUncached=function(r,o){var a=0,u=!1;return function e(l,s){var c=this;l.__iterate(function(o,l){return(!t||s<t)&&i(o)?e(o,s+1):!1===r(o,n?l:a++,c)&&(u=!0),!u},o)}(e,0),a},r.__iteratorUncached=function(r,o){var a=e.__iterator(r,o),u=[],l=0;return new U(function(){for(;a;){var e=a.next();if(!1===e.done){var s=e.value;if(r===P&&(s=s[1]),t&&!(u.length<t)||!i(s))return n?e:F(r,l++,s,e);u.push(a),a=s.__iterator(r,o)}else a=u.pop()}return{value:void 0,done:!0}})},r}function zt(e,t,n){t||(t=tn);var r=u(e),o=0,a=e.toSeq().map(function(t,r){return[r,t,o++,n?n(t,r,e):t]}).toArray();return a.sort(function(e,n){return t(e[3],n[3])||e[2]-n[2]}).forEach(r?function(e,t){a[t].length=2}:function(e,t){a[t]=e[1]}),r?V(a):l(e)?$(a):Y(a)}function Wt(e,t,n){if(t||(t=tn),n){var r=e.toSeq().map(function(t,r){return[t,n(t,r,e)]}).reduce(function(e,n){return Vt(t,e[1],n[1])?n:e});return r&&r[0]}return e.reduce(function(e,n){return Vt(t,e,n)?n:e})}function Vt(e,t,n){var r=e(n,t);return 0===r&&n!==t&&(void 0===n||null===n||n!=n)||r>0}function $t(e,t,r){var o=Zt(e);return o.size=new ee(r).map(function(e){return e.size}).min(),o.__iterate=function(e,t){for(var n,r=this.__iterator(N,t),o=0;!(n=r.next()).done&&!1!==e(n.value,o++,this););return o},o.__iteratorUncached=function(e,o){var a=r.map(function(e){return e=n(e),H(o?e.reverse():e)}),i=0,u=!1;return new U(function(){var n;return u||(n=a.map(function(e){return e.next()}),u=n.some(function(e){return e.done})),u?{value:void 0,done:!0}:F(e,i++,t.apply(null,n.map(function(e){return e.value})))})},o}function Yt(e,t){return oe(e)?t:e.constructor(t)}function Gt(e){if(e!==Object(e))throw new TypeError("Expected [K, V] tuple: "+e)}function Qt(e){return Ae(e.size),k(e)}function Xt(e){return u(e)?r:l(e)?o:a}function Zt(e){return Object.create((u(e)?V:l(e)?$:Y).prototype)}function en(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):W.prototype.cacheResult.call(this)}function tn(e,t){return e>t?1:e<t?-1:0}function nn(e){var t=H(e);if(!t){if(!z(e))throw new TypeError("Expected iterable or array-like: "+e);t=H(n(e))}return t}function rn(e,t){var n,r=function(a){if(a instanceof r)return a;if(!(this instanceof r))return new r(a);if(!n){n=!0;var i=Object.keys(e);!function(e,t){try{t.forEach(function(e,t){Object.defineProperty(e,t,{get:function(){return this.get(t)},set:function(e){_e(this.__ownerID,"Cannot set on an immutable record."),this.set(t,e)}})}.bind(void 0,e))}catch(e){}}(o,i),o.size=i.length,o._name=t,o._keys=i,o._defaultValues=e}this._map=Ue(a)},o=r.prototype=Object.create(on);return o.constructor=r,r}t(jt,Ue),jt.of=function(){return this(arguments)},jt.prototype.toString=function(){return this.__toString("OrderedMap {","}")},jt.prototype.get=function(e,t){var n=this._map.get(e);return void 0!==n?this._list.get(n)[1]:t},jt.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this):Dt()},jt.prototype.set=function(e,t){return Nt(this,e,t)},jt.prototype.remove=function(e){return Nt(this,e,g)},jt.prototype.wasAltered=function(){return this._map.wasAltered()||this._list.wasAltered()},jt.prototype.__iterate=function(e,t){var n=this;return this._list.__iterate(function(t){return t&&e(t[1],t[0],n)},t)},jt.prototype.__iterator=function(e,t){return this._list.fromEntrySeq().__iterator(e,t)},jt.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e),n=this._list.__ensureOwner(e);return e?Mt(t,n,e,this.__hash):(this.__ownerID=e,this._map=t,this._list=n,this)},jt.isOrderedMap=Rt,jt.prototype[h]=!0,jt.prototype.delete=jt.prototype.remove,t(Pt,V),Pt.prototype.get=function(e,t){return this._iter.get(e,t)},Pt.prototype.has=function(e){return this._iter.has(e)},Pt.prototype.valueSeq=function(){return this._iter.valueSeq()},Pt.prototype.reverse=function(){var e=this,t=Bt(this,!0);return this._useKeys||(t.valueSeq=function(){return e._iter.toSeq().reverse()}),t},Pt.prototype.map=function(e,t){var n=this,r=Ft(this,e,t);return this._useKeys||(r.valueSeq=function(){return n._iter.toSeq().map(e,t)}),r},Pt.prototype.__iterate=function(e,t){var n,r=this;return this._iter.__iterate(this._useKeys?function(t,n){return e(t,n,r)}:(n=t?Qt(this):0,function(o){return e(o,t?--n:n++,r)}),t)},Pt.prototype.__iterator=function(e,t){if(this._useKeys)return this._iter.__iterator(e,t);var n=this._iter.__iterator(N,t),r=t?Qt(this):0;return new U(function(){var o=n.next();return o.done?o:F(e,t?--r:r++,o.value,o)})},Pt.prototype[h]=!0,t(Lt,$),Lt.prototype.includes=function(e){return this._iter.includes(e)},Lt.prototype.__iterate=function(e,t){var n=this,r=0;return this._iter.__iterate(function(t){return e(t,r++,n)},t)},Lt.prototype.__iterator=function(e,t){var n=this._iter.__iterator(N,t),r=0;return new U(function(){var t=n.next();return t.done?t:F(e,r++,t.value,t)})},t(It,Y),It.prototype.has=function(e){return this._iter.includes(e)},It.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate(function(t){return e(t,t,n)},t)},It.prototype.__iterator=function(e,t){var n=this._iter.__iterator(N,t);return new U(function(){var t=n.next();return t.done?t:F(e,t.value,t.value,t)})},t(At,V),At.prototype.entrySeq=function(){return this._iter.toSeq()},At.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate(function(t){if(t){Gt(t);var r=i(t);return e(r?t.get(1):t[1],r?t.get(0):t[0],n)}},t)},At.prototype.__iterator=function(e,t){var n=this._iter.__iterator(N,t);return new U(function(){for(;;){var t=n.next();if(t.done)return t;var r=t.value;if(r){Gt(r);var o=i(r);return F(e,o?r.get(0):r[0],o?r.get(1):r[1],t)}}})},Lt.prototype.cacheResult=Pt.prototype.cacheResult=It.prototype.cacheResult=At.prototype.cacheResult=en,t(rn,be),rn.prototype.toString=function(){return this.__toString(un(this)+" {","}")},rn.prototype.has=function(e){return this._defaultValues.hasOwnProperty(e)},rn.prototype.get=function(e,t){if(!this.has(e))return t;var n=this._defaultValues[e];return this._map?this._map.get(e,n):n},rn.prototype.clear=function(){if(this.__ownerID)return this._map&&this._map.clear(),this;var e=this.constructor;return e._empty||(e._empty=an(this,Xe()))},rn.prototype.set=function(e,t){if(!this.has(e))throw new Error('Cannot set unknown key "'+e+'" on '+un(this));var n=this._map&&this._map.set(e,t);return this.__ownerID||n===this._map?this:an(this,n)},rn.prototype.remove=function(e){if(!this.has(e))return this;var t=this._map&&this._map.remove(e);return this.__ownerID||t===this._map?this:an(this,t)},rn.prototype.wasAltered=function(){return this._map.wasAltered()},rn.prototype.__iterator=function(e,t){var n=this;return r(this._defaultValues).map(function(e,t){return n.get(t)}).__iterator(e,t)},rn.prototype.__iterate=function(e,t){var n=this;return r(this._defaultValues).map(function(e,t){return n.get(t)}).__iterate(e,t)},rn.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map&&this._map.__ensureOwner(e);return e?an(this,t,e):(this.__ownerID=e,this._map=t,this)};var on=rn.prototype;function an(e,t,n){var r=Object.create(Object.getPrototypeOf(e));return r._map=t,r.__ownerID=n,r}function un(e){return e._name||e.constructor.name||"Record"}function ln(e){return null===e||void 0===e?mn():sn(e)&&!c(e)?e:mn().withMutations(function(t){var n=a(e);Ae(n.size),n.forEach(function(e){return t.add(e)})})}function sn(e){return!(!e||!e[fn])}on.delete=on.remove,on.deleteIn=on.removeIn=Ke.removeIn,on.merge=Ke.merge,on.mergeWith=Ke.mergeWith,on.mergeIn=Ke.mergeIn,on.mergeDeep=Ke.mergeDeep,on.mergeDeepWith=Ke.mergeDeepWith,on.mergeDeepIn=Ke.mergeDeepIn,on.setIn=Ke.setIn,on.update=Ke.update,on.updateIn=Ke.updateIn,on.withMutations=Ke.withMutations,on.asMutable=Ke.asMutable,on.asImmutable=Ke.asImmutable,t(ln,Ee),ln.of=function(){return this(arguments)},ln.fromKeys=function(e){return this(r(e).keySeq())},ln.prototype.toString=function(){return this.__toString("Set {","}")},ln.prototype.has=function(e){return this._map.has(e)},ln.prototype.add=function(e){return dn(this,this._map.set(e,!0))},ln.prototype.remove=function(e){return dn(this,this._map.remove(e))},ln.prototype.clear=function(){return dn(this,this._map.clear())},ln.prototype.union=function(){var t=e.call(arguments,0);return 0===(t=t.filter(function(e){return 0!==e.size})).length?this:0!==this.size||this.__ownerID||1!==t.length?this.withMutations(function(e){for(var n=0;n<t.length;n++)a(t[n]).forEach(function(t){return e.add(t)})}):this.constructor(t[0])},ln.prototype.intersect=function(){var t=e.call(arguments,0);if(0===t.length)return this;t=t.map(function(e){return a(e)});var n=this;return this.withMutations(function(e){n.forEach(function(n){t.every(function(e){return e.includes(n)})||e.remove(n)})})},ln.prototype.subtract=function(){var t=e.call(arguments,0);if(0===t.length)return this;t=t.map(function(e){return a(e)});var n=this;return this.withMutations(function(e){n.forEach(function(n){t.some(function(e){return e.includes(n)})&&e.remove(n)})})},ln.prototype.merge=function(){return this.union.apply(this,arguments)},ln.prototype.mergeWith=function(t){var n=e.call(arguments,1);return this.union.apply(this,n)},ln.prototype.sort=function(e){return yn(zt(this,e))},ln.prototype.sortBy=function(e,t){return yn(zt(this,t,e))},ln.prototype.wasAltered=function(){return this._map.wasAltered()},ln.prototype.__iterate=function(e,t){var n=this;return this._map.__iterate(function(t,r){return e(r,r,n)},t)},ln.prototype.__iterator=function(e,t){return this._map.map(function(e,t){return t}).__iterator(e,t)},ln.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e);return e?this.__make(t,e):(this.__ownerID=e,this._map=t,this)},ln.isSet=sn;var cn,fn="@@__IMMUTABLE_SET__@@",pn=ln.prototype;function dn(e,t){return e.__ownerID?(e.size=t.size,e._map=t,e):t===e._map?e:0===t.size?e.__empty():e.__make(t)}function hn(e,t){var n=Object.create(pn);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function mn(){return cn||(cn=hn(Xe()))}function yn(e){return null===e||void 0===e?wn():_n(e)?e:wn().withMutations(function(t){var n=a(e);Ae(n.size),n.forEach(function(e){return t.add(e)})})}function _n(e){return sn(e)&&c(e)}pn[fn]=!0,pn.delete=pn.remove,pn.mergeDeep=pn.merge,pn.mergeDeepWith=pn.mergeWith,pn.withMutations=Ke.withMutations,pn.asMutable=Ke.asMutable,pn.asImmutable=Ke.asImmutable,pn.__empty=mn,pn.__make=hn,t(yn,ln),yn.of=function(){return this(arguments)},yn.fromKeys=function(e){return this(r(e).keySeq())},yn.prototype.toString=function(){return this.__toString("OrderedSet {","}")},yn.isOrderedSet=_n;var gn,vn=yn.prototype;function bn(e,t){var n=Object.create(vn);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function wn(){return gn||(gn=bn(Dt()))}function En(e){return null===e||void 0===e?Tn():Cn(e)?e:Tn().unshiftAll(e)}function Cn(e){return!(!e||!e[kn])}vn[h]=!0,vn.__empty=wn,vn.__make=bn,t(En,we),En.of=function(){return this(arguments)},En.prototype.toString=function(){return this.__toString("Stack [","]")},En.prototype.get=function(e,t){var n=this._head;for(e=x(this,e);n&&e--;)n=n.next;return n?n.value:t},En.prototype.peek=function(){return this._head&&this._head.value},En.prototype.push=function(){if(0===arguments.length)return this;for(var e=this.size+arguments.length,t=this._head,n=arguments.length-1;n>=0;n--)t={value:arguments[n],next:t};return this.__ownerID?(this.size=e,this._head=t,this.__hash=void 0,this.__altered=!0,this):On(e,t)},En.prototype.pushAll=function(e){if(0===(e=o(e)).size)return this;Ae(e.size);var t=this.size,n=this._head;return e.reverse().forEach(function(e){t++,n={value:e,next:n}}),this.__ownerID?(this.size=t,this._head=n,this.__hash=void 0,this.__altered=!0,this):On(t,n)},En.prototype.pop=function(){return this.slice(1)},En.prototype.unshift=function(){return this.push.apply(this,arguments)},En.prototype.unshiftAll=function(e){return this.pushAll(e)},En.prototype.shift=function(){return this.pop.apply(this,arguments)},En.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):Tn()},En.prototype.slice=function(e,t){if(T(e,t,this.size))return this;var n=j(e,this.size),r=R(t,this.size);if(r!==this.size)return we.prototype.slice.call(this,e,t);for(var o=this.size-n,a=this._head;n--;)a=a.next;return this.__ownerID?(this.size=o,this._head=a,this.__hash=void 0,this.__altered=!0,this):On(o,a)},En.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?On(this.size,this._head,e,this.__hash):(this.__ownerID=e,this.__altered=!1,this)},En.prototype.__iterate=function(e,t){if(t)return this.reverse().__iterate(e);for(var n=0,r=this._head;r&&!1!==e(r.value,n++,this);)r=r.next;return n},En.prototype.__iterator=function(e,t){if(t)return this.reverse().__iterator(e);var n=0,r=this._head;return new U(function(){if(r){var t=r.value;return r=r.next,F(e,n++,t)}return{value:void 0,done:!0}})},En.isStack=Cn;var Sn,kn="@@__IMMUTABLE_STACK__@@",xn=En.prototype;function On(e,t,n,r){var o=Object.create(xn);return o.size=e,o._head=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Tn(){return Sn||(Sn=On(0))}function jn(e,t){var n=function(n){e.prototype[n]=t[n]};return Object.keys(t).forEach(n),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(t).forEach(n),e}xn[kn]=!0,xn.withMutations=Ke.withMutations,xn.asMutable=Ke.asMutable,xn.asImmutable=Ke.asImmutable,xn.wasAltered=Ke.wasAltered,n.Iterator=U,jn(n,{toArray:function(){Ae(this.size);var e=new Array(this.size||0);return this.valueSeq().__iterate(function(t,n){e[n]=t}),e},toIndexedSeq:function(){return new Lt(this)},toJS:function(){return this.toSeq().map(function(e){return e&&"function"==typeof e.toJS?e.toJS():e}).__toJS()},toJSON:function(){return this.toSeq().map(function(e){return e&&"function"==typeof e.toJSON?e.toJSON():e}).__toJS()},toKeyedSeq:function(){return new Pt(this,!0)},toMap:function(){return Ue(this.toKeyedSeq())},toObject:function(){Ae(this.size);var e={};return this.__iterate(function(t,n){e[n]=t}),e},toOrderedMap:function(){return jt(this.toKeyedSeq())},toOrderedSet:function(){return yn(u(this)?this.valueSeq():this)},toSet:function(){return ln(u(this)?this.valueSeq():this)},toSetSeq:function(){return new It(this)},toSeq:function(){return l(this)?this.toIndexedSeq():u(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return En(u(this)?this.valueSeq():this)},toList:function(){return pt(u(this)?this.valueSeq():this)},toString:function(){return"[Iterable]"},__toString:function(e,t){return 0===this.size?e+t:e+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+t},concat:function(){var t=e.call(arguments,0);return Yt(this,function(e,t){var n=u(e),o=[e].concat(t).map(function(e){return i(e)?n&&(e=r(e)):e=n?ie(e):ue(Array.isArray(e)?e:[e]),e}).filter(function(e){return 0!==e.size});if(0===o.length)return e;if(1===o.length){var a=o[0];if(a===e||n&&u(a)||l(e)&&l(a))return a}var s=new ee(o);return n?s=s.toKeyedSeq():l(e)||(s=s.toSetSeq()),(s=s.flatten(!0)).size=o.reduce(function(e,t){if(void 0!==e){var n=t.size;if(void 0!==n)return e+n}},0),s}(this,t))},includes:function(e){return this.some(function(t){return he(t,e)})},entries:function(){return this.__iterator(P)},every:function(e,t){Ae(this.size);var n=!0;return this.__iterate(function(r,o,a){if(!e.call(t,r,o,a))return n=!1,!1}),n},filter:function(e,t){return Yt(this,qt(this,e,t,!0))},find:function(e,t,n){var r=this.findEntry(e,t);return r?r[1]:n},findEntry:function(e,t){var n;return this.__iterate(function(r,o,a){if(e.call(t,r,o,a))return n=[o,r],!1}),n},findLastEntry:function(e,t){return this.toSeq().reverse().findEntry(e,t)},forEach:function(e,t){return Ae(this.size),this.__iterate(t?e.bind(t):e)},join:function(e){Ae(this.size),e=void 0!==e?""+e:",";var t="",n=!0;return this.__iterate(function(r){n?n=!1:t+=e,t+=null!==r&&void 0!==r?r.toString():""}),t},keys:function(){return this.__iterator(D)},map:function(e,t){return Yt(this,Ft(this,e,t))},reduce:function(e,t,n){var r,o;return Ae(this.size),arguments.length<2?o=!0:r=t,this.__iterate(function(t,a,i){o?(o=!1,r=t):r=e.call(n,r,t,a,i)}),r},reduceRight:function(e,t,n){var r=this.toKeyedSeq().reverse();return r.reduce.apply(r,arguments)},reverse:function(){return Yt(this,Bt(this,!0))},slice:function(e,t){return Yt(this,Kt(this,e,t,!0))},some:function(e,t){return!this.every(Pn(e),t)},sort:function(e){return Yt(this,zt(this,e))},values:function(){return this.__iterator(N)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some(function(){return!0})},count:function(e,t){return k(e?this.toSeq().filter(e,t):this)},countBy:function(e,t){return function(e,t,n){var r=Ue().asMutable();return e.__iterate(function(o,a){r.update(t.call(n,o,a,e),0,function(e){return e+1})}),r.asImmutable()}(this,e,t)},equals:function(e){return me(this,e)},entrySeq:function(){var e=this;if(e._cache)return new ee(e._cache);var t=e.toSeq().map(Nn).toIndexedSeq();return t.fromEntrySeq=function(){return e.toSeq()},t},filterNot:function(e,t){return this.filter(Pn(e),t)},findLast:function(e,t,n){return this.toKeyedSeq().reverse().find(e,t,n)},first:function(){return this.find(O)},flatMap:function(e,t){return Yt(this,function(e,t,n){var r=Xt(e);return e.toSeq().map(function(o,a){return r(t.call(n,o,a,e))}).flatten(!0)}(this,e,t))},flatten:function(e){return Yt(this,Jt(this,e,!0))},fromEntrySeq:function(){return new At(this)},get:function(e,t){return this.find(function(t,n){return he(n,e)},void 0,t)},getIn:function(e,t){for(var n,r=this,o=nn(e);!(n=o.next()).done;){var a=n.value;if((r=r&&r.get?r.get(a,g):g)===g)return t}return r},groupBy:function(e,t){return function(e,t,n){var r=u(e),o=(c(e)?jt():Ue()).asMutable();e.__iterate(function(a,i){o.update(t.call(n,a,i,e),function(e){return(e=e||[]).push(r?[i,a]:a),e})});var a=Xt(e);return o.map(function(t){return Yt(e,a(t))})}(this,e,t)},has:function(e){return this.get(e,g)!==g},hasIn:function(e){return this.getIn(e,g)!==g},isSubset:function(e){return e="function"==typeof e.includes?e:n(e),this.every(function(t){return e.includes(t)})},isSuperset:function(e){return(e="function"==typeof e.isSubset?e:n(e)).isSubset(this)},keySeq:function(){return this.toSeq().map(Dn).toIndexedSeq()},last:function(){return this.toSeq().reverse().first()},max:function(e){return Wt(this,e)},maxBy:function(e,t){return Wt(this,t,e)},min:function(e){return Wt(this,e?Ln(e):Un)},minBy:function(e,t){return Wt(this,t?Ln(t):Un,e)},rest:function(){return this.slice(1)},skip:function(e){return this.slice(Math.max(0,e))},skipLast:function(e){return Yt(this,this.toSeq().reverse().skip(e).reverse())},skipWhile:function(e,t){return Yt(this,Ht(this,e,t,!0))},skipUntil:function(e,t){return this.skipWhile(Pn(e),t)},sortBy:function(e,t){return Yt(this,zt(this,t,e))},take:function(e){return this.slice(0,Math.max(0,e))},takeLast:function(e){return Yt(this,this.toSeq().reverse().take(e).reverse())},takeWhile:function(e,t){return Yt(this,function(e,t,n){var r=Zt(e);return r.__iterateUncached=function(r,o){var a=this;if(o)return this.cacheResult().__iterate(r,o);var i=0;return e.__iterate(function(e,o,u){return t.call(n,e,o,u)&&++i&&r(e,o,a)}),i},r.__iteratorUncached=function(r,o){var a=this;if(o)return this.cacheResult().__iterator(r,o);var i=e.__iterator(P,o),u=!0;return new U(function(){if(!u)return{value:void 0,done:!0};var e=i.next();if(e.done)return e;var o=e.value,l=o[0],s=o[1];return t.call(n,s,l,a)?r===P?e:F(r,l,s,e):(u=!1,{value:void 0,done:!0})})},r}(this,e,t))},takeUntil:function(e,t){return this.takeWhile(Pn(e),t)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=function(e){if(e.size===1/0)return 0;var t=c(e),n=u(e),r=t?1:0;return function(e,t){return t=Ce(t,3432918353),t=Ce(t<<15|t>>>-15,461845907),t=Ce(t<<13|t>>>-13,5),t=Ce((t=(t+3864292196|0)^e)^t>>>16,2246822507),t=Se((t=Ce(t^t>>>13,3266489909))^t>>>16)}(e.__iterate(n?t?function(e,t){r=31*r+Fn(ke(e),ke(t))|0}:function(e,t){r=r+Fn(ke(e),ke(t))|0}:t?function(e){r=31*r+ke(e)|0}:function(e){r=r+ke(e)|0}),r)}(this))}});var Rn=n.prototype;Rn[f]=!0,Rn[A]=Rn.values,Rn.__toJS=Rn.toArray,Rn.__toStringMapper=In,Rn.inspect=Rn.toSource=function(){return this.toString()},Rn.chain=Rn.flatMap,Rn.contains=Rn.includes,function(){try{Object.defineProperty(Rn,"length",{get:function(){if(!n.noLengthWarning){var e;try{throw new Error}catch(t){e=t.stack}if(-1===e.indexOf("_wrapObject"))return console&&console.warn&&console.warn("iterable.length has been deprecated, use iterable.size or iterable.count(). This warning will become a silent error in a future version. "+e),this.size}}})}catch(e){}}(),jn(r,{flip:function(){return Yt(this,Ut(this))},findKey:function(e,t){var n=this.findEntry(e,t);return n&&n[0]},findLastKey:function(e,t){return this.toSeq().reverse().findKey(e,t)},keyOf:function(e){return this.findKey(function(t){return he(t,e)})},lastKeyOf:function(e){return this.findLastKey(function(t){return he(t,e)})},mapEntries:function(e,t){var n=this,r=0;return Yt(this,this.toSeq().map(function(o,a){return e.call(t,[a,o],r++,n)}).fromEntrySeq())},mapKeys:function(e,t){var n=this;return Yt(this,this.toSeq().flip().map(function(r,o){return e.call(t,r,o,n)}).flip())}});var Mn=r.prototype;function Dn(e,t){return t}function Nn(e,t){return[t,e]}function Pn(e){return function(){return!e.apply(this,arguments)}}function Ln(e){return function(){return-e.apply(this,arguments)}}function In(e){return"string"==typeof e?JSON.stringify(e):e}function An(){return S(arguments)}function Un(e,t){return e<t?1:e>t?-1:0}function Fn(e,t){return e^t+2654435769+(e<<6)+(e>>2)|0}return Mn[p]=!0,Mn[A]=Rn.entries,Mn.__toJS=Rn.toObject,Mn.__toStringMapper=function(e,t){return JSON.stringify(t)+": "+In(e)},jn(o,{toKeyedSeq:function(){return new Pt(this,!1)},filter:function(e,t){return Yt(this,qt(this,e,t,!1))},findIndex:function(e,t){var n=this.findEntry(e,t);return n?n[0]:-1},indexOf:function(e){var t=this.toKeyedSeq().keyOf(e);return void 0===t?-1:t},lastIndexOf:function(e){var t=this.toKeyedSeq().reverse().keyOf(e);return void 0===t?-1:t},reverse:function(){return Yt(this,Bt(this,!1))},slice:function(e,t){return Yt(this,Kt(this,e,t,!1))},splice:function(e,t){var n=arguments.length;if(t=Math.max(0|t,0),0===n||2===n&&!t)return this;e=j(e,e<0?this.count():this.size);var r=this.slice(0,e);return Yt(this,1===n?r:r.concat(S(arguments,2),this.slice(e+t)))},findLastIndex:function(e,t){var n=this.toKeyedSeq().findLastKey(e,t);return void 0===n?-1:n},first:function(){return this.get(0)},flatten:function(e){return Yt(this,Jt(this,e,!1))},get:function(e,t){return(e=x(this,e))<0||this.size===1/0||void 0!==this.size&&e>this.size?t:this.find(function(t,n){return n===e},void 0,t)},has:function(e){return(e=x(this,e))>=0&&(void 0!==this.size?this.size===1/0||e<this.size:-1!==this.indexOf(e))},interpose:function(e){return Yt(this,function(e,t){var n=Zt(e);return n.size=e.size&&2*e.size-1,n.__iterateUncached=function(n,r){var o=this,a=0;return e.__iterate(function(e,r){return(!a||!1!==n(t,a++,o))&&!1!==n(e,a++,o)},r),a},n.__iteratorUncached=function(n,r){var o,a=e.__iterator(N,r),i=0;return new U(function(){return(!o||i%2)&&(o=a.next()).done?o:i%2?F(n,i++,t):F(n,i++,o.value,o)})},n}(this,e))},interleave:function(){var e=[this].concat(S(arguments)),t=$t(this.toSeq(),$.of,e),n=t.flatten(!0);return t.size&&(n.size=t.size*e.length),Yt(this,n)},last:function(){return this.get(-1)},skipWhile:function(e,t){return Yt(this,Ht(this,e,t,!1))},zip:function(){return Yt(this,$t(this,An,[this].concat(S(arguments))))},zipWith:function(e){var t=S(arguments);return t[0]=this,Yt(this,$t(this,e,t))}}),o.prototype[d]=!0,o.prototype[h]=!0,jn(a,{get:function(e,t){return this.has(e)?e:t},includes:function(e){return this.has(e)},keySeq:function(){return this.valueSeq()}}),a.prototype.has=Rn.includes,jn(V,r.prototype),jn($,o.prototype),jn(Y,a.prototype),jn(be,r.prototype),jn(we,o.prototype),jn(Ee,a.prototype),{Iterable:n,Seq:W,Collection:ve,Map:Ue,OrderedMap:jt,List:pt,Stack:En,Set:ln,OrderedSet:yn,Record:rn,Range:ge,Repeat:ye,is:he,fromJS:fe}}()},function(e,t,n){"use strict";var r=n(15)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var o=n(88),a=n(52),i=n(220),u=n(5),l=n(29),s=u.OrderedSet,c=u.Record,f=u.Stack,p=c({allowUndo:!0,currentContent:null,decorator:null,directionMap:null,forceSelection:!1,inCompositionMode:!1,inlineStyleOverride:null,lastChangeType:null,nativelyRenderedContent:null,redoStack:f(),selection:null,treeMap:null,undoStack:f()}),d=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._immutable=t}return e.createEmpty=function(t){return e.createWithContent(a.createFromText(""),t)},e.createWithContent=function(t,n){var r=t.getBlockMap().first().getKey();return e.create({currentContent:t,undoStack:f(),redoStack:f(),decorator:n||null,selection:l.createEmpty(r)})},e.create=function(t){var n=t.currentContent,o=t.decorator,a=r({},t,{treeMap:m(n,o),directionMap:i.getDirectionMap(n)});return new e(new p(a))},e.set=function(t,n){return new e(t.getImmutable().withMutations(function(e){var r=e.get("decorator"),a=r;null===n.decorator?a=null:n.decorator&&(a=n.decorator);var i=n.currentContent||t.getCurrentContent();if(a!==r){var u,l=e.get("treeMap");return u=a&&r?function(e,t,n,r,a){return n.merge(t.toSeq().filter(function(t){return r.getDecorations(t,e)!==a.getDecorations(t,e)}).map(function(t){return o.generate(e,t,r)}))}(i,i.getBlockMap(),l,a,r):m(i,a),void e.merge({decorator:a,treeMap:u,nativelyRenderedContent:null})}i!==t.getCurrentContent()&&e.set("treeMap",function(e,t,n,r){var a=e.getCurrentContent().set("entityMap",n),i=a.getBlockMap();return e.getImmutable().get("treeMap").merge(t.toSeq().filter(function(e,t){return e!==i.get(t)}).map(function(e){return o.generate(a,e,r)}))}(t,i.getBlockMap(),i.getEntityMap(),a)),e.merge(n)}))},e.prototype.toJS=function(){return this.getImmutable().toJS()},e.prototype.getAllowUndo=function(){return this.getImmutable().get("allowUndo")},e.prototype.getCurrentContent=function(){return this.getImmutable().get("currentContent")},e.prototype.getUndoStack=function(){return this.getImmutable().get("undoStack")},e.prototype.getRedoStack=function(){return this.getImmutable().get("redoStack")},e.prototype.getSelection=function(){return this.getImmutable().get("selection")},e.prototype.getDecorator=function(){return this.getImmutable().get("decorator")},e.prototype.isInCompositionMode=function(){return this.getImmutable().get("inCompositionMode")},e.prototype.mustForceSelection=function(){return this.getImmutable().get("forceSelection")},e.prototype.getNativelyRenderedContent=function(){return this.getImmutable().get("nativelyRenderedContent")},e.prototype.getLastChangeType=function(){return this.getImmutable().get("lastChangeType")},e.prototype.getInlineStyleOverride=function(){return this.getImmutable().get("inlineStyleOverride")},e.setInlineStyleOverride=function(t,n){return e.set(t,{inlineStyleOverride:n})},e.prototype.getCurrentInlineStyle=function(){var e=this.getInlineStyleOverride();if(null!=e)return e;var t=this.getCurrentContent(),n=this.getSelection();return n.isCollapsed()?function(e,t){var n=t.getStartKey(),r=t.getStartOffset(),o=e.getBlockForKey(n);if(r>0)return o.getInlineStyleAt(r-1);if(o.getLength())return o.getInlineStyleAt(0);return y(e,n)}(t,n):function(e,t){var n=t.getStartKey(),r=t.getStartOffset(),o=e.getBlockForKey(n);if(r<o.getLength())return o.getInlineStyleAt(r);if(r>0)return o.getInlineStyleAt(r-1);return y(e,n)}(t,n)},e.prototype.getBlockTree=function(e){return this.getImmutable().getIn(["treeMap",e])},e.prototype.isSelectionAtStartOfContent=function(){var e=this.getCurrentContent().getBlockMap().first().getKey();return this.getSelection().hasEdgeWithin(e,0,0)},e.prototype.isSelectionAtEndOfContent=function(){var e=this.getCurrentContent().getBlockMap().last(),t=e.getLength();return this.getSelection().hasEdgeWithin(e.getKey(),t,t)},e.prototype.getDirectionMap=function(){return this.getImmutable().get("directionMap")},e.acceptSelection=function(e,t){return h(e,t,!1)},e.forceSelection=function(e,t){return t.getHasFocus()||(t=t.set("hasFocus",!0)),h(e,t,!0)},e.moveSelectionToEnd=function(t){var n=t.getCurrentContent().getLastBlock(),r=n.getKey(),o=n.getLength();return e.acceptSelection(t,new l({anchorKey:r,anchorOffset:o,focusKey:r,focusOffset:o,isBackward:!1}))},e.moveFocusToEnd=function(t){var n=e.moveSelectionToEnd(t);return e.forceSelection(n,n.getSelection())},e.push=function(t,n,r){if(t.getCurrentContent()===n)return t;var o="insert-characters"!==r,a=i.getDirectionMap(n,t.getDirectionMap());if(!t.getAllowUndo())return e.set(t,{currentContent:n,directionMap:a,lastChangeType:r,selection:n.getSelectionAfter(),forceSelection:o,inlineStyleOverride:null});var u=t.getSelection(),l=t.getCurrentContent(),s=t.getUndoStack(),c=n;u!==l.getSelectionAfter()||function(e,t){var n=e.getLastChangeType();return t!==n||"insert-characters"!==t&&"backspace-character"!==t&&"delete-character"!==t}(t,r)?(s=s.push(l),c=c.set("selectionBefore",u)):"insert-characters"!==r&&"backspace-character"!==r&&"delete-character"!==r||(c=c.set("selectionBefore",l.getSelectionBefore()));var p=t.getInlineStyleOverride();-1===["adjust-depth","change-block-type","split-block"].indexOf(r)&&(p=null);var d={currentContent:c,directionMap:a,undoStack:s,redoStack:f(),lastChangeType:r,selection:n.getSelectionAfter(),forceSelection:o,inlineStyleOverride:p};return e.set(t,d)},e.undo=function(t){if(!t.getAllowUndo())return t;var n=t.getUndoStack(),r=n.peek();if(!r)return t;var o=t.getCurrentContent(),a=i.getDirectionMap(r,t.getDirectionMap());return e.set(t,{currentContent:r,directionMap:a,undoStack:n.shift(),redoStack:t.getRedoStack().push(o),forceSelection:!0,inlineStyleOverride:null,lastChangeType:"undo",nativelyRenderedContent:null,selection:o.getSelectionBefore()})},e.redo=function(t){if(!t.getAllowUndo())return t;var n=t.getRedoStack(),r=n.peek();if(!r)return t;var o=t.getCurrentContent(),a=i.getDirectionMap(r,t.getDirectionMap());return e.set(t,{currentContent:r,directionMap:a,undoStack:t.getUndoStack().push(o),redoStack:n.shift(),forceSelection:!0,inlineStyleOverride:null,lastChangeType:"redo",nativelyRenderedContent:null,selection:r.getSelectionAfter()})},e.prototype.getImmutable=function(){return this._immutable},e}();function h(e,t,n){return d.set(e,{selection:t,forceSelection:n,nativelyRenderedContent:null,inlineStyleOverride:null})}function m(e,t){return e.getBlockMap().map(function(n){return o.generate(e,n,t)}).toOrderedMap()}function y(e,t){var n=e.getBlockMap().reverse().skipUntil(function(e,n){return n===t}).skip(1).skipUntil(function(e,t){return e.getLength()}).first();return n?n.getInlineStyleAt(n.getLength()-1):s()}e.exports=d},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(262)},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,a,i,u],c=0;(l=new Error(t.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){e.exports=n(253)},function(e,t,n){"use strict";n.r(t);var r=n(3),o=n.n(r),a=n(1),i=n.n(a),u=n(0),l=n.n(u),s=n(106),c=n.n(s),f=n(9),p=n.n(f),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var m=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=h(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props.history.location.pathname)},h(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:d({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;p()(null==n||1===i.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?i.a.Children.only(e):null},t}(i.a.Component);m.propTypes={history:l.a.object.isRequired,children:l.a.node},m.contextTypes={router:l.a.object},m.childContextTypes={router:l.a.object.isRequired};var y=m,_=y;function g(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=g(this,e.call.apply(e,[this].concat(a))),r.history=c()(r.props),g(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(_,{history:this.history,children:this.props.children})},t}(i.a.Component);v.propTypes={basename:l.a.string,forceRefresh:l.a.bool,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var b=v,w=n(105),E=n.n(w);function C(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var S=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=C(this,e.call.apply(e,[this].concat(a))),r.history=E()(r.props),C(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(_,{history:this.history,children:this.props.children})},t}(i.a.Component);S.propTypes={basename:l.a.string,getUserConfirmation:l.a.func,hashType:l.a.oneOf(["hashbang","noslash","slash"]),children:l.a.node};var k=S,x=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function O(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var T=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},j=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=O(this,e.call.apply(e,[this].concat(a))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!T(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,a=n.to;o?t.replace(a):t.push(a)}},O(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);p()(this.context.router,"You should not use <Link> outside a <Router>");var o=this.context.router.history.createHref("string"==typeof t?{pathname:t}:t);return i.a.createElement("a",x({},r,{onClick:this.handleClick,href:o,ref:n}))},t}(i.a.Component);j.propTypes={onClick:l.a.func,target:l.a.string,replace:l.a.bool,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired,innerRef:l.a.oneOfType([l.a.string,l.a.func])},j.defaultProps={replace:!1},j.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired,createHref:l.a.func.isRequired}).isRequired}).isRequired};var R=j,M=n(104),D=n.n(M);function N(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var P=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=N(this,e.call.apply(e,[this].concat(a))),r.history=D()(r.props),N(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(y,{history:this.history,children:this.props.children})},t}(i.a.Component);P.propTypes={initialEntries:l.a.array,initialIndex:l.a.number,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var L=P,I=n(103),A=n.n(I),U={},F=0,B=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof t&&(t={path:t});var n=t,r=n.path,o=void 0===r?"/":r,a=n.exact,i=void 0!==a&&a,u=n.strict,l=void 0!==u&&u,s=n.sensitive,c=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=U[n]||(U[n]={});if(r[e])return r[e];var o=[],a={re:A()(e,o,t),keys:o};return F<1e4&&(r[e]=a,F++),a}(o,{end:i,strict:l,sensitive:void 0!==s&&s}),f=c.re,p=c.keys,d=f.exec(e);if(!d)return null;var h=d[0],m=d.slice(1),y=e===h;return i&&!y?null:{path:o,url:"/"===o&&""===h?"/":h,isExact:y,params:p.reduce(function(e,t,n){return e[t.name]=m[n],e},{})}},q=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function K(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var H=function(e){return 0===i.a.Children.count(e)},J=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=K(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props,r.context.router)},K(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:q({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,a=e.strict,i=e.exact,u=e.sensitive;if(n)return n;p()(t,"You should not use <Route> or withRouter() outside a <Router>");var l=t.route,s=(r||l.location).pathname;return o?B(s,{path:o,strict:a,exact:i,sensitive:u}):l.match},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!H(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!H(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,a=this.context.router,u=a.history,l=a.route,s=a.staticContext,c={match:e,location:this.props.location||l.location,history:u,staticContext:s};return r?e?i.a.createElement(r,c):null:o?e?o(c):null:n?"function"==typeof n?n(c):H(n)?null:i.a.Children.only(n):null},t}(i.a.Component);J.propTypes={computedMatch:l.a.object,path:l.a.string,exact:l.a.bool,strict:l.a.bool,sensitive:l.a.bool,component:l.a.func,render:l.a.func,children:l.a.oneOfType([l.a.func,l.a.node]),location:l.a.object},J.contextTypes={router:l.a.shape({history:l.a.object.isRequired,route:l.a.object.isRequired,staticContext:l.a.object})},J.childContextTypes={router:l.a.object.isRequired};var z=J,W=z,V=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},$="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var Y=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,a=e.activeClassName,u=e.className,l=e.activeStyle,s=e.style,c=e.isActive,f=e.ariaCurrent,p=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","ariaCurrent"]);return i.a.createElement(W,{path:"object"===(void 0===t?"undefined":$(t))?t.pathname:t,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(c?c(r,n):r);return i.a.createElement(R,V({to:t,className:o?[u,a].filter(function(e){return e}).join(" "):u,style:o?V({},s,l):s,"aria-current":o&&f},p))}})};Y.propTypes={to:R.propTypes.to,exact:l.a.bool,strict:l.a.bool,location:l.a.object,activeClassName:l.a.string,className:l.a.string,activeStyle:l.a.object,style:l.a.object,isActive:l.a.func,ariaCurrent:l.a.oneOf(["page","step","location","true"])},Y.defaultProps={activeClassName:"active",ariaCurrent:"true"};var G=Y;var Q=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(i.a.Component);Q.propTypes={when:l.a.bool,message:l.a.oneOfType([l.a.func,l.a.string]).isRequired},Q.defaultProps={when:!0},Q.contextTypes={router:l.a.shape({history:l.a.shape({block:l.a.func.isRequired}).isRequired}).isRequired};var X=Q,Z=n(58),ee=n(57),te=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ne=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=te({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Object(Z.default)(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},re=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Object(ee.default)(e.state,t.state)};"undefined"==typeof window||!window.document||window.document.createElement,"function"==typeof Symbol&&Symbol.iterator,Object.assign,Object.assign,"function"==typeof Symbol&&Symbol.iterator,Object.assign;var oe=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=ne(e.to),n=ne(this.props.to);re(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.perform=function(){var e=this.context.router.history,t=this.props,n=t.push,r=t.to;n?e.push(r):e.replace(r)},t.prototype.render=function(){return null},t}(i.a.Component);oe.propTypes={push:l.a.bool,from:l.a.string,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired},oe.defaultProps={push:!1},oe.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired}).isRequired,staticContext:l.a.object}).isRequired};var ae=oe,ie=n(22),ue=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function le(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var se=function(e,t){return e?ue({},t,{pathname:Object(ie.addLeadingSlash)(e)+t.pathname}):t},ce=function(e){return"string"==typeof e?Object(ie.parsePath)(e):(n=(t=e).pathname,r=void 0===n?"/":n,o=t.search,a=void 0===o?"":o,i=t.hash,u=void 0===i?"":i,{pathname:r,search:"?"===a?"":a,hash:"#"===u?"":u});var t,n,r,o,a,i,u},fe=function(e){return"string"==typeof e?e:Object(ie.createPath)(e)},pe=function(e){return function(){p()(!1,"You cannot %s with <StaticRouter>",e)}},de=function(){},he=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=le(this,e.call.apply(e,[this].concat(a))),r.createHref=function(e){return Object(ie.addLeadingSlash)(r.props.basename+fe(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=se(n,ce(e)),o.url=fe(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=se(n,ce(e)),o.url=fe(o.location)},r.handleListen=function(){return de},r.handleBlock=function(){return de},le(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=Object(ie.addLeadingSlash)(e);return 0!==t.pathname.indexOf(n)?t:ue({},t,{pathname:t.pathname.substr(n.length)})}(t,ce(n)),push:this.handlePush,replace:this.handleReplace,go:pe("go"),goBack:pe("goBack"),goForward:pe("goForward"),listen:this.handleListen,block:this.handleBlock};return i.a.createElement(y,ue({},r,{history:o}))},t}(i.a.Component);he.propTypes={basename:l.a.string,context:l.a.object.isRequired,location:l.a.oneOfType([l.a.string,l.a.object])},he.defaultProps={basename:"",location:"/"},he.childContextTypes={router:l.a.object.isRequired};var me=he;var ye=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){o()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,o=void 0;return i.a.Children.forEach(t,function(t){if(i.a.isValidElement(t)){var a=t.props,u=a.path,l=a.exact,s=a.strict,c=a.sensitive,f=a.from,p=u||f;null==r&&(o=t,r=p?B(n.pathname,{path:p,exact:l,strict:s,sensitive:c}):e.match)}}),r?i.a.cloneElement(o,{location:n,computedMatch:r}):null},t}(i.a.Component);ye.contextTypes={router:l.a.shape({route:l.a.object.isRequired}).isRequired},ye.propTypes={children:l.a.node,location:l.a.object};var _e=ye,ge=B,ve=n(102),be=n.n(ve),we=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Ee=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return i.a.createElement(z,{render:function(t){return i.a.createElement(e,we({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:l.a.func},be()(t,e)};n.d(t,"BrowserRouter",function(){return b}),n.d(t,"HashRouter",function(){return k}),n.d(t,"Link",function(){return R}),n.d(t,"MemoryRouter",function(){return L}),n.d(t,"NavLink",function(){return G}),n.d(t,"Prompt",function(){return X}),n.d(t,"Redirect",function(){return ae}),n.d(t,"Route",function(){return W}),n.d(t,"Router",function(){return _}),n.d(t,"StaticRouter",function(){return me}),n.d(t,"Switch",function(){return _e}),n.d(t,"matchPath",function(){return ge}),n.d(t,"withRouter",function(){return Ee})},function(e,t,n){"use strict";var r=n(16),o=n(231),a=n(24),i=n(5),u=n(230),l=n(228),s=n(38),c=n(225),f=n(224),p=n(4),d=n(223),h=n(91),m=n(222),y=n(221),_=i.OrderedSet,g={replaceText:function(e,t,n,o,a){var i=h(e,t),u=m(i,t),l=r.create({style:o||_(),entity:a||null});return f(u,u.getSelectionAfter(),n,l)},insertText:function(e,t,n,r,o){return t.isCollapsed()||p(!1),g.replaceText(e,t,n,r,o)},moveText:function(e,t,n){var r=s(e,t),o=g.removeRange(e,t,"backward");return g.replaceWithFragment(o,n,r)},replaceWithFragment:function(e,t,n){var r=h(e,t),o=m(r,t);return c(o,o.getSelectionAfter(),n)},removeRange:function(e,t,n){var r,o,i=void 0,u=void 0;t.getIsBackward()&&(t=t.merge({anchorKey:t.getFocusKey(),anchorOffset:t.getFocusOffset(),focusKey:t.getAnchorKey(),focusOffset:t.getAnchorOffset(),isBackward:!1})),r=t.getAnchorKey(),o=t.getFocusKey(),i=e.getBlockForKey(r),u=e.getBlockForKey(o);var s=t.getStartOffset(),c=t.getEndOffset(),f=i.getEntityAt(s),p=u.getEntityAt(c-1);if(r===o&&f&&f===p){var d=l(e.getEntityMap(),i,u,t,n);return m(e,d)}var y=t;a.draft_segmented_entities_behavior&&(y=l(e.getEntityMap(),i,u,t,n));var _=h(e,y);return m(_,y)},splitBlock:function(e,t){var n=h(e,t),r=m(n,t);return y(r,r.getSelectionAfter())},applyInlineStyle:function(e,t,n){return o.add(e,t,n)},removeInlineStyle:function(e,t,n){return o.remove(e,t,n)},setBlockType:function(e,t,n){return d(e,t,function(e){return e.merge({type:n,depth:0})})},setBlockData:function(e,t,n){return d(e,t,function(e){return e.merge({data:n})})},mergeBlockData:function(e,t,n){return d(e,t,function(e){return e.merge({data:e.getData().merge(n)})})},applyEntity:function(e,t,n){var r=h(e,t);return u(r,t,n)}};e.exports=g},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r,o=a(n(1));a(n(8)),n(11);function a(e){return e&&e.__esModule?e:{default:e}}function i(e){return o.default.createElement("footer",null,o.default.createElement("h1",null,"The Next Step"),o.default.createElement("p",null,"Tech Jobs For Tech People"))}(r=n(2).enterModule)&&r(e);var u,l,s=i;t.default=s,u=n(2).default,l=n(2).leaveModule,u&&(u.register(i,"Footer","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Footer.js"),u.register(s,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Footer.js"),l(e))}).call(this,n(7)(e))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(8),_reactDom2=_interopRequireDefault(_reactDom),_reactRouterDom=__webpack_require__(11),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var Header=function(_React$Component){function Header(e){_classCallCheck(this,Header);var t=_possibleConstructorReturn(this,(Header.__proto__||Object.getPrototypeOf(Header)).call(this,e)),n=localStorage.getItem("token"),r=localStorage.getItem("tokenIsValid");return t.state={token:n,tokenIsValid:r},t}return _inherits(Header,_React$Component),_createClass(Header,[{key:"componentWillMount",value:function(){var e=this;localStorage.getItem("token");(0,_axios2.default)({method:"get",url:"/authenticate/current_user/",headers:{Authorization:"JWT "+localStorage.getItem("token"),Accept:"application/json"},responseType:"json"}).then(function(t){200===t.status?(localStorage.setItem("tokenIsValid",!0),e.setState({tokenIsValid:!0})):(localStorage.setItem("tokenIsValid",null),e.setState({tokenIsValid:null}))}).catch(function(e){console.log("this is an error yo",e)})}},{key:"render",value:function(){return _react2.default.createElement("header",null,_react2.default.createElement("div",{id:"header-inner"},_react2.default.createElement("div",{id:"header-title-container"},_react2.default.createElement(_reactRouterDom.Link,{to:"/"},_react2.default.createElement("h1",null,"The Next Step"))),_react2.default.createElement("nav",null,_react2.default.createElement(_reactRouterDom.NavLink,{to:"/",activeClassName:"is-active",exact:!0},"Home "),_react2.default.createElement(_reactRouterDom.NavLink,{to:"/contact",activeClassName:"is-active",exact:!0},"Contact "),this.state.tokenIsValid?_react2.default.createElement(_reactRouterDom.NavLink,{to:"/employer_dashboard",activeClassName:"is-active",exact:!0},"Employer Dashboard "):_react2.default.createElement(_reactRouterDom.NavLink,{to:"/my_account",activeClassName:"is-active",exact:!0},"Login/Register "))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Header}(_react2.default.Component),_default=Header,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(Header,"Header","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Header.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Header.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var s in n=Object(arguments[l]))o.call(n,s)&&(u[s]=n[s]);if(r){i=r(n);for(var c=0;c<i.length;c++)a.call(n,i[c])&&(u[i[c]]=n[i[c]])}}return u}},function(e,t,n){"use strict";var r=n(5),o=r.Map,a=r.OrderedSet,i=r.Record,u=a(),l={style:u,entity:null},s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getStyle=function(){return this.get("style")},t.prototype.getEntity=function(){return this.get("entity")},t.prototype.hasStyle=function(e){return this.getStyle().includes(e)},t.applyStyle=function(e,n){var r=e.set("style",e.getStyle().add(n));return t.create(r)},t.removeStyle=function(e,n){var r=e.set("style",e.getStyle().remove(n));return t.create(r)},t.applyEntity=function(e,n){var r=e.getEntity()===n?e:e.set("entity",n);return t.create(r)},t.create=function(e){if(!e)return c;var n=o({style:u,entity:null}).merge(e),r=f.get(n);if(r)return r;var a=new t(n);return f=f.set(n,a),a},t}(i(l)),c=new s,f=o([[o(l),c]]);s.EMPTY=c,e.exports=s},function(e,t,n){"use strict";var r=n(16),o=n(5),a=n(34),i=o.List,u=o.Map,l=o.OrderedSet,s=o.Record,c=o.Repeat,f=l(),p={parent:null,characterList:i(),data:u(),depth:0,key:"",text:"",type:"unstyled",children:i(),prevSibling:null,nextSibling:null},d=function(e,t){return e.getStyle()===t.getStyle()},h=function(e,t){return e.getEntity()===t.getEntity()},m=function(e){if(!e)return e;var t=e.characterList,n=e.text;return n&&!t&&(e.characterList=i(c(r.EMPTY,n.length))),e},y=function(e){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:p;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,m(n)))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getKey=function(){return this.get("key")},t.prototype.getType=function(){return this.get("type")},t.prototype.getText=function(){return this.get("text")},t.prototype.getCharacterList=function(){return this.get("characterList")},t.prototype.getLength=function(){return this.getText().length},t.prototype.getDepth=function(){return this.get("depth")},t.prototype.getData=function(){return this.get("data")},t.prototype.getInlineStyleAt=function(e){var t=this.getCharacterList().get(e);return t?t.getStyle():f},t.prototype.getEntityAt=function(e){var t=this.getCharacterList().get(e);return t?t.getEntity():null},t.prototype.getChildKeys=function(){return this.get("children")},t.prototype.getParentKey=function(){return this.get("parent")},t.prototype.getPrevSiblingKey=function(){return this.get("prevSibling")},t.prototype.getNextSiblingKey=function(){return this.get("nextSibling")},t.prototype.findStyleRanges=function(e,t){a(this.getCharacterList(),d,e,t)},t.prototype.findEntityRanges=function(e,t){a(this.getCharacterList(),h,e,t)},t}(s(p));e.exports=y},function(e,t,n){"use strict";var r=n(99),o=n(252),a=Object.prototype.toString;function i(e){return"[object Array]"===a.call(e)}function u(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===a.call(e)}function s(e,t){if(null!==e&&void 0!==e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:l,isStream:function(e){return u(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:s,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return t},extend:function(e,t,n){return s(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";e.exports=function(e){if(null!=e)return e;throw new Error("Got unexpected null or undefined")}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(210),o=n(207),a=n(206),i=n(205);function u(e,t,n,r){if(e===n)return!0;if(!n.startsWith(e))return!1;var a=n.slice(e.length);return!!t&&(a=r?r(a):a,o.contains(a,t))}function l(e){return"Windows"===r.platformName?e.replace(/^\s*NT/,""):e}var s={isBrowser:function(e){return u(r.browserName,r.browserFullVersion,e)},isBrowserArchitecture:function(e){return u(r.browserArchitecture,null,e)},isDevice:function(e){return u(r.deviceName,null,e)},isEngine:function(e){return u(r.engineName,r.engineVersion,e)},isPlatform:function(e){return u(r.platformName,r.platformFullVersion,e,l)},isPlatformArchitecture:function(e){return u(r.platformArchitecture,null,e)}};e.exports=a(s,i)},function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,t,n){"use strict";var r={},o=Math.pow(2,24);e.exports=function(){for(var e=void 0;void 0===e||r.hasOwnProperty(e)||!isNaN(+e);)e=Math.floor(Math.random()*o).toString(32);return r[e]=!0,e}},function(e,t,n){"use strict";var r=n(232);e.exports=r},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(8),_reactDom2=_interopRequireDefault(_reactDom),_SingleJob=__webpack_require__(93),_SingleJob2=_interopRequireDefault(_SingleJob),_reactRouterDom=__webpack_require__(11),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var JobsPage=function(_React$Component){function JobsPage(e){_classCallCheck(this,JobsPage);var t=_possibleConstructorReturn(this,(JobsPage.__proto__||Object.getPrototypeOf(JobsPage)).call(this,e));return t.state={jobs:[]},t}return _inherits(JobsPage,_React$Component),_createClass(JobsPage,[{key:"componentDidMount",value:function(){var e=this;_axios2.default.get("/job/api/jobs/").then(function(t){0===t.data.length&&console.log("there are no users that match your search"),e.setState({jobs:t.data}),console.log(t.data)}).catch(function(e){console.log(e)})}},{key:"render",value:function(){return _react2.default.createElement("div",{id:"jobs-page"},_react2.default.createElement("div",{id:"jobs-page-title"},_react2.default.createElement("h1",null,"TECH JOBS")),_react2.default.createElement("div",{id:"all-jobs"},this.state.jobs.map(function(e){return _react2.default.createElement(_reactRouterDom.Link,{to:"/job_post/"+e.id,key:e.title},_react2.default.createElement(_SingleJob2.default,{jobTitle:e.title,jobHours:e.hours,jobArea:e.area,jobSlug:e.slug,jobLocation:e.location,jobSalary:e.salary,jobCompany:e.posted_by_company,jobId:e.id,jobExperience:e.experience,jobDate:e.created_date}))})))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),JobsPage}(_react2.default.Component),_default=JobsPage,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(JobsPage,"JobsPage","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/jobs/JobsPage.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/jobs/JobsPage.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";var r=n(4),o=55296,a=56319,i=56320,u=57343,l=/[\uD800-\uDFFF]/;function s(e){return o<=e&&e<=u}function c(e){return l.test(e)}function f(e,t){return 1+s(e.charCodeAt(t))}function p(e,t,n){if(t=t||0,n=void 0===n?1/0:n||0,!c(e))return e.substr(t,n);var r=e.length;if(r<=0||t>r||n<=0)return"";var o=0;if(t>0){for(;t>0&&o<r;t--)o+=f(e,o);if(o>=r)return""}else if(t<0){for(o=r;t<0&&0<o;t++)o-=f(e,o-1);o<0&&(o=0)}var a=r;if(n<r)for(a=o;n>0&&a<r;n--)a+=f(e,a);return e.substring(o,a)}var d={getCodePoints:function(e){for(var t=[],n=0;n<e.length;n+=f(e,n))t.push(e.codePointAt(n));return t},getUTF16Length:f,hasSurrogateUnit:c,isCodeUnitInSurrogateRange:s,isSurrogatePair:function(e,t){if(0<=t&&t<e.length||r(!1),t+1===e.length)return!1;var n=e.charCodeAt(t),l=e.charCodeAt(t+1);return o<=n&&n<=a&&i<=l&&l<=u},strlen:function(e){if(!c(e))return e.length;for(var t=0,n=0;n<e.length;n+=f(e,n))t++;return t},substring:function(e,t,n){t=t||0,n=void 0===n?1/0:n||0,t<0&&(t=0),n<0&&(n=0);var r=Math.abs(n-t);return p(e,t=t<n?t:n,r)},substr:p};e.exports=d},function(e,t,n){"use strict";var r=n(16),o=n(5),a=n(34),i=o.List,u=o.Map,l=o.OrderedSet,s=o.Record,c=o.Repeat,f=l(),p=function(e){if(!e)return e;var t=e.characterList,n=e.text;return n&&!t&&(e.characterList=i(c(r.EMPTY,n.length))),e},d=function(e){function t(n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,p(n)))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getKey=function(){return this.get("key")},t.prototype.getType=function(){return this.get("type")},t.prototype.getText=function(){return this.get("text")},t.prototype.getCharacterList=function(){return this.get("characterList")},t.prototype.getLength=function(){return this.getText().length},t.prototype.getDepth=function(){return this.get("depth")},t.prototype.getData=function(){return this.get("data")},t.prototype.getInlineStyleAt=function(e){var t=this.getCharacterList().get(e);return t?t.getStyle():f},t.prototype.getEntityAt=function(e){var t=this.getCharacterList().get(e);return t?t.getEntity():null},t.prototype.findStyleRanges=function(e,t){a(this.getCharacterList(),h,e,t)},t.prototype.findEntityRanges=function(e,t){a(this.getCharacterList(),m,e,t)},t}(s({key:"",type:"unstyled",text:"",characterList:i(),depth:0,data:u()}));function h(e,t){return e.getStyle()===t.getStyle()}function m(e,t){return e.getEntity()===t.getEntity()}e.exports=d},function(e,t,n){"use strict";function r(e){return e.replace(/\//g,"-")}e.exports=function(e){return"object"==typeof e?Object.keys(e).filter(function(t){return e[t]}).map(r).join(" "):Array.prototype.map.call(arguments,r).join(" ")}},function(e,t,n){"use strict";var r=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.serialize=function(){return"Anchor: "+this.getAnchorKey()+":"+this.getAnchorOffset()+", Focus: "+this.getFocusKey()+":"+this.getFocusOffset()+", Is Backward: "+String(this.getIsBackward())+", Has Focus: "+String(this.getHasFocus())},t.prototype.getAnchorKey=function(){return this.get("anchorKey")},t.prototype.getAnchorOffset=function(){return this.get("anchorOffset")},t.prototype.getFocusKey=function(){return this.get("focusKey")},t.prototype.getFocusOffset=function(){return this.get("focusOffset")},t.prototype.getIsBackward=function(){return this.get("isBackward")},t.prototype.getHasFocus=function(){return this.get("hasFocus")},t.prototype.hasEdgeWithin=function(e,t,n){var r=this.getAnchorKey(),o=this.getFocusKey();if(r===o&&r===e){var a=this.getStartOffset();return t<=this.getEndOffset()&&a<=n}if(e!==r&&e!==o)return!1;var i=e===r?this.getAnchorOffset():this.getFocusOffset();return t<=i&&n>=i},t.prototype.isCollapsed=function(){return this.getAnchorKey()===this.getFocusKey()&&this.getAnchorOffset()===this.getFocusOffset()},t.prototype.getStartKey=function(){return this.getIsBackward()?this.getFocusKey():this.getAnchorKey()},t.prototype.getStartOffset=function(){return this.getIsBackward()?this.getFocusOffset():this.getAnchorOffset()},t.prototype.getEndKey=function(){return this.getIsBackward()?this.getAnchorKey():this.getFocusKey()},t.prototype.getEndOffset=function(){return this.getIsBackward()?this.getAnchorOffset():this.getFocusOffset()},t.createEmpty=function(e){return new t({anchorKey:e,anchorOffset:0,focusKey:e,focusOffset:0,isBackward:!1,hasFocus:!1})},t}((0,n(5).Record)({anchorKey:"",anchorOffset:0,focusKey:"",focusOffset:0,isBackward:!1,hasFocus:!1}));e.exports=r},function(e,t,n){"use strict";var r=n(233),o=n(35),a=n(16),i=n(217),u=n(27),l=n(52),s=n(49),c=n(85),f=n(216),p=n(83),d=n(37),h=n(12),m=n(87),y=n(6),_=n(43),g=n(70),v=n(29),b=n(156),w={Editor:f,EditorBlock:p,EditorState:y,CompositeDecorator:i,Entity:d,EntityInstance:m,BlockMapBuilder:o,CharacterMetadata:a,ContentBlock:u,ContentState:l,SelectionState:v,AtomicBlockUtils:r,KeyBindingUtil:_,Modifier:h,RichUtils:g,DefaultDraftBlockRenderMap:s,DefaultDraftInlineStyle:c,convertFromHTML:n(72),convertFromRaw:n(153),convertToRaw:b,genKey:n(23),getDefaultKeyBinding:n(69),getVisibleSelectionRect:n(148)};e.exports=w},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=n(12);e.exports=function(e,t,n){var o=e.getSelection(),a=e.getCurrentContent(),i=o;if(o.isCollapsed()){if("forward"===n){if(e.isSelectionAtEndOfContent())return a}else if(e.isSelectionAtStartOfContent())return a;if((i=t(e))===o)return a}return r.removeRange(a,i,n)}},function(e,t,n){"use strict";e.exports=function(e){return"handled"===e||!0===e}},function(e,t,n){"use strict";e.exports=function(e,t,n,r){if(e.size){var o=0;e.reduce(function(e,a,i){return t(e,a)||(n(e)&&r(o,i),o=i),a}),n(e.last())&&r(o,e.count())}}},function(e,t,n){"use strict";var r=n(5).OrderedMap,o={createFromArray:function(e){return r(e.map(function(e){return[e.getKey(),e]}))}};e.exports=o},function(e,t,n){"use strict";var r={encode:function(e,t,n){return e+"-"+t+"-"+n},decode:function(e){var t=e.split("-"),n=t[0],r=t[1],o=t[2];return{blockKey:n,decoratorKey:parseInt(r,10),leafKey:parseInt(o,10)}}};e.exports=r},function(e,t,n){"use strict";var r=n(15)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(87),a=n(5),i=n(4),u=(0,a.Map)(),l=0;function s(e,t){console.warn("WARNING: "+e+' will be deprecated soon!\nPlease use "'+t+'" instead.')}var c={getLastCreatedEntityKey:function(){return s("DraftEntity.getLastCreatedEntityKey","contentState.getLastCreatedEntityKey"),c.__getLastCreatedEntityKey()},create:function(e,t,n){return s("DraftEntity.create","contentState.createEntity"),c.__create(e,t,n)},add:function(e){return s("DraftEntity.add","contentState.addEntity"),c.__add(e)},get:function(e){return s("DraftEntity.get","contentState.getEntity"),c.__get(e)},mergeData:function(e,t){return s("DraftEntity.mergeData","contentState.mergeEntityData"),c.__mergeData(e,t)},replaceData:function(e,t){return s("DraftEntity.replaceData","contentState.replaceEntityData"),c.__replaceData(e,t)},__getLastCreatedEntityKey:function(){return""+l},__create:function(e,t,n){return c.__add(new o({type:e,mutability:t,data:n||{}}))},__add:function(e){var t=""+ ++l;return u=u.set(t,e),t},__get:function(e){var t=u.get(e);return t||i(!1),t},__mergeData:function(e,t){var n=c.__get(e),o=r({},n.getData(),t),a=n.set("data",o);return u=u.set(e,a),a},__replaceData:function(e,t){var n=c.__get(e).set("data",t);return u=u.set(e,n),n}};e.exports=c},function(e,t,n){"use strict";var r=n(92),o=n(91);e.exports=function(e,t){var n=t.getStartKey(),a=t.getStartOffset(),i=t.getEndKey(),u=t.getEndOffset(),l=o(e,t).getBlockMap(),s=l.keySeq(),c=s.indexOf(n),f=s.indexOf(i)+1;return r(l.slice(c,f).map(function(e,t){var r=e.getText(),o=e.getCharacterList();return n===i?e.merge({text:r.slice(a,u),characterList:o.slice(a,u)}):t===n?e.merge({text:r.slice(a),characterList:o.slice(a)}):t===i?e.merge({text:r.slice(0,u),characterList:o.slice(0,u)}):e}))}},function(e,t,n){"use strict";var r=n(259);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r=t===n,o=e.getBlockForKey(t);if(!o)return[];var a=[o];if(!r)for(var i=t;i!==n;){var u=e.getBlockAfter(i);if(!u){a=[];break}a.push(u),i=u.getKey()}return a}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(146);Object.defineProperty(t,"stateToHTML",{enumerable:!0,get:function(){return(e=r,e&&e.__esModule?e:{default:e}).default;var e}})},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.getSelection(),r=e.getCurrentContent(),o=n.getStartKey(),a=n.getStartOffset(),i=o,u=0;if(t>a){var l=r.getKeyBefore(o);null==l?i=o:(i=l,u=r.getBlockForKey(l).getText().length)}else u=a-t;return n.merge({focusKey:i,focusOffset:u,isBackward:!0})}},function(e,t,n){"use strict";var r=n(21).isPlatform("Mac OS X"),o={isCtrlKeyCommand:function(e){return!!e.ctrlKey&&!e.altKey},isOptionKeyCommand:function(e){return r&&e.altKey},hasCommandModifier:function(e){return r?!!e.metaKey&&!e.altKey:o.isCtrlKeyCommand(e)}};e.exports=o},function(e,t,n){"use strict";var r=n(80);e.exports=function(e){for(var t=e;t&&t!==document.documentElement;){var n=r(t);if(null!=n)return n;t=t.parentNode}return null}},function(e,t,n){"use strict";var r=n(197),o=n(196);e.exports=function(e){var t=r(e.ownerDocument||e.document);e.Window&&e instanceof e.Window&&(e=t);var n=o(e),a=e===t?e.ownerDocument.documentElement:e,i=e.scrollWidth-a.clientWidth,u=e.scrollHeight-a.clientHeight;return n.x=Math.max(0,Math.min(n.x,i)),n.y=Math.max(0,Math.min(n.y,u)),n}},function(e,t,n){"use strict";function r(e,t){var n=o.get(e,t);return"auto"===n||"scroll"===n}var o={get:n(202),getScrollParent:function(e){if(!e)return null;for(var t=e.ownerDocument;e&&e!==t.body;){if(r(e,"overflow")||r(e,"overflowY")||r(e,"overflowX"))return e;e=e.parentNode}return t.defaultView||t.parentWindow}};e.exports=o},function(e,t,n){"use strict";function r(e,t){return t&&"MUTABLE"===e.__get(t).getMutability()?t:null}e.exports=function(e,t){var n;if(t.isCollapsed()){var o=t.getAnchorKey(),a=t.getAnchorOffset();return a>0?(n=e.getBlockForKey(o).getEntityAt(a-1))!==e.getBlockForKey(o).getEntityAt(a)?null:r(e.getEntityMap(),n):null}var i=t.getStartKey(),u=t.getStartOffset(),l=e.getBlockForKey(i);return n=u===l.getLength()?null:l.getEntityAt(u),r(e.getEntityMap(),n)}},function(e,t,n){"use strict";e.exports={BACKSPACE:8,TAB:9,RETURN:13,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46,COMMA:188,PERIOD:190,A:65,Z:90,ZERO:48,NUMPAD_0:96,NUMPAD_9:105}},function(e,t,n){"use strict";var r=n(5).Map,o=n(1),a=n(28),i=r({"header-one":{element:"h1"},"header-two":{element:"h2"},"header-three":{element:"h3"},"header-four":{element:"h4"},"header-five":{element:"h5"},"header-six":{element:"h6"},"unordered-list-item":{element:"li",wrapper:o.createElement("ul",{className:a("public/DraftStyleDefault/ul")})},"ordered-list-item":{element:"li",wrapper:o.createElement("ol",{className:a("public/DraftStyleDefault/ol")})},blockquote:{element:"blockquote"},atomic:{element:"figure"},"code-block":{element:"pre",wrapper:o.createElement("pre",{className:a("public/DraftStyleDefault/pre")})},unstyled:{element:"div",aliasedElements:["p"]}});e.exports=i},function(e,t,n){"use strict";var r=n(4),o="LTR",a="RTL",i=null;function u(e){return e===o||e===a}function l(e){return u(e)||r(!1),e===o?"ltr":"rtl"}function s(e){i=e}var c={NEUTRAL:"NEUTRAL",LTR:o,RTL:a,isStrong:u,getHTMLDir:l,getHTMLDirIfDifferent:function(e,t){return u(e)||r(!1),u(t)||r(!1),e===t?null:l(e)},setGlobalDir:s,initGlobalDir:function(){s(o)},getGlobalDir:function(){return i||this.initGlobalDir(),i||r(!1),i}};e.exports=c},function(e,t,n){"use strict";var r=new RegExp("\r","g");e.exports=function(e){return e.replace(r,"")}},function(e,t,n){"use strict";var r=n(35),o=n(16),a=n(27),i=n(17),u=n(37),l=n(24),s=n(5),c=n(29),f=n(23),p=n(51),d=s.List,h=s.Record,m=s.Repeat,y=l.draft_tree_data_support?i:a,_=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getEntityMap=function(){return u},t.prototype.getBlockMap=function(){return this.get("blockMap")},t.prototype.getSelectionBefore=function(){return this.get("selectionBefore")},t.prototype.getSelectionAfter=function(){return this.get("selectionAfter")},t.prototype.getBlockForKey=function(e){return this.getBlockMap().get(e)},t.prototype.getKeyBefore=function(e){return this.getBlockMap().reverse().keySeq().skipUntil(function(t){return t===e}).skip(1).first()},t.prototype.getKeyAfter=function(e){return this.getBlockMap().keySeq().skipUntil(function(t){return t===e}).skip(1).first()},t.prototype.getBlockAfter=function(e){return this.getBlockMap().skipUntil(function(t,n){return n===e}).skip(1).first()},t.prototype.getBlockBefore=function(e){return this.getBlockMap().reverse().skipUntil(function(t,n){return n===e}).skip(1).first()},t.prototype.getBlocksAsArray=function(){return this.getBlockMap().toArray()},t.prototype.getFirstBlock=function(){return this.getBlockMap().first()},t.prototype.getLastBlock=function(){return this.getBlockMap().last()},t.prototype.getPlainText=function(e){return this.getBlockMap().map(function(e){return e?e.getText():""}).join(e||"\n")},t.prototype.getLastCreatedEntityKey=function(){return u.__getLastCreatedEntityKey()},t.prototype.hasText=function(){var e=this.getBlockMap();return e.size>1||e.first().getLength()>0},t.prototype.createEntity=function(e,t,n){return u.__create(e,t,n),this},t.prototype.mergeEntityData=function(e,t){return u.__mergeData(e,t),this},t.prototype.replaceEntityData=function(e,t){return u.__replaceData(e,t),this},t.prototype.addEntity=function(e){return u.__add(e),this},t.prototype.getEntity=function(e){return u.__get(e)},t.createFromBlockArray=function(e,n){var o=Array.isArray(e)?e:e.contentBlocks,a=r.createFromArray(o),i=a.isEmpty()?new c:c.createEmpty(a.first().getKey());return new t({blockMap:a,entityMap:n||u,selectionBefore:i,selectionAfter:i})},t.createFromText=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:/\r\n?|\n/g,r=e.split(n).map(function(e){return e=p(e),new y({key:f(),text:e,type:"unstyled",characterList:d(m(o.EMPTY,e.length))})});return t.createFromBlockArray(r)},t}(h({entityMap:null,blockMap:null,selectionBefore:null,selectionAfter:null}));e.exports=_},function(e,t,n){"use strict";(function(t){var r=n(18),o=n(250),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,l={adapter:("undefined"!=typeof XMLHttpRequest?u=n(97):void 0!==t&&(u=n(97)),u),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){l.headers[e]={}}),r.forEach(["post","put","patch"],function(e){l.headers[e]=r.merge(a)}),e.exports=l}).call(this,n(98))},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(3),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,a.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):((0,a.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n(58)),a=u(n(57)),i=n(22);function u(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,a){var u=void 0;"string"==typeof e?(u=(0,i.parsePath)(e)).state=t:(void 0===(u=r({},e)).pathname&&(u.pathname=""),u.search?"?"!==u.search.charAt(0)&&(u.search="?"+u.search):u.search="",u.hash?"#"!==u.hash.charAt(0)&&(u.hash="#"+u.hash):u.hash="",void 0!==t&&void 0===u.state&&(u.state=t));try{u.pathname=decodeURI(u.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+u.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(u.key=n),a?u.pathname?"/"!==u.pathname.charAt(0)&&(u.pathname=(0,o.default)(u.pathname,a.pathname)):u.pathname=a.pathname:u.pathname||(u.pathname="/"),u},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,a.default)(e.state,t.state)}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";n.r(t);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var o=void 0===t?"undefined":r(t);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var a=t.valueOf(),i=n.valueOf();if(a!==t||i!==n)return e(a,i);var u=Object.keys(t),l=Object.keys(n);return u.length===l.length&&u.every(function(r){return e(t[r],n[r])})}return!1}},function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}n.r(t),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],a=t&&t.split("/")||[],i=e&&r(e),u=t&&r(t),l=i||u;if(e&&r(e)?a=n:n.length&&(a.pop(),a=a.concat(n)),!a.length)return"/";var s=void 0;if(a.length){var c=a[a.length-1];s="."===c||".."===c||""===c}else s=!1;for(var f=0,p=a.length;p>=0;p--){var d=a[p];"."===d?o(a,p):".."===d?(o(a,p),f++):f&&(o(a,p),f--)}if(!l)for(;f--;f)a.unshift("..");!l||""===a[0]||a[0]&&r(a[0])||a.unshift("");var h=a.join("/");return s&&"/"!==h.substr(-1)&&(h+="/"),h}},function(e,t,n){"use strict";t.errorObject={e:{}}},function(e,t,n){"use strict";t.isFunction=function(e){return"function"==typeof e}},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactRouterDom=__webpack_require__(11),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var SingleDashboardJob=function(_React$Component){function SingleDashboardJob(e){_classCallCheck(this,SingleDashboardJob);var t=_possibleConstructorReturn(this,(SingleDashboardJob.__proto__||Object.getPrototypeOf(SingleDashboardJob)).call(this,e));return t.state={isOpen:!1,area:t.props.area,created_date:t.props.created_date,description:t.props.description,experience:t.props.experience,hours:t.props.hours,location:t.props.location,posted_by_company:t.props.posted_by_company,companyName:t.props.companyName,salary:t.props.salary,slug:t.props.slug,title:t.props.title,id:t.props.id,userCompanies:t.props.userCompanies},t}return _inherits(SingleDashboardJob,_React$Component),_createClass(SingleDashboardJob,[{key:"render",value:function(){return _react2.default.createElement("div",{className:"single-company-job"},_react2.default.createElement("div",{className:"single-job-titles"},_react2.default.createElement("h1",null,this.state.title)),_react2.default.createElement("div",{className:"single-job-button-containers"},_react2.default.createElement(_reactRouterDom.Link,{to:{pathname:"/view_job/"+this.state.id,state:{userCompanies:this.state.userCompanies,companyName:this.state.companyName,companyId:this.state.posted_by_company}}},_react2.default.createElement("button",null,"View Job"))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),SingleDashboardJob}(_react2.default.Component),_default=SingleDashboardJob,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(SingleDashboardJob,"SingleDashboardJob","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/jobs/SingleDashboardJob.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/jobs/SingleDashboardJob.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactRouterDom=__webpack_require__(11),_Header=__webpack_require__(14),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(13),_Footer2=_interopRequireDefault(_Footer),_JobsPage=__webpack_require__(25),_JobsPage2=_interopRequireDefault(_JobsPage),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var Login=function(_React$Component){function Login(e){_classCallCheck(this,Login);var t=_possibleConstructorReturn(this,(Login.__proto__||Object.getPrototypeOf(Login)).call(this,e));return t.submitLoginForm=t.submitLoginForm.bind(t),t.handleEmailChange=t.handleEmailChange.bind(t),t.handlePasswordChange=t.handlePasswordChange.bind(t),t.state={email:"",password:"",responseData:{},redirectToDashboard:null},t}return _inherits(Login,_React$Component),_createClass(Login,[{key:"submitLoginForm",value:function(e){var t=this;e.preventDefault(),(0,_axios2.default)({method:"post",url:"/token-auth/",data:{email:this.state.email,password:this.state.password},responseType:"json"}).then(function(e){200===e.status&&(t.setState({responseData:e.data}),localStorage.setItem("token",e.data.token),localStorage.setItem("email",e.data.user.email),console.log("response from /token-auth/ is "+t.state.responseData),t.setState({redirectToDashboard:!0}))}).catch(function(e){console.log("this is an error yo",e),t.setState({error:e})})}},{key:"handleEmailChange",value:function(e){e.preventDefault(),this.setState({email:e.target.value})}},{key:"handlePasswordChange",value:function(e){e.preventDefault(),this.setState({password:e.target.value})}},{key:"render",value:function(){return this.state.redirectToDashboard?_react2.default.createElement(_reactRouterDom.Redirect,{to:"/employer_dashboard"}):_react2.default.createElement("div",{id:"login-wrapper"},_react2.default.createElement("form",{onSubmit:this.submitLoginForm,id:"login-form"},_react2.default.createElement("div",{id:"login-header"},_react2.default.createElement("h1",null,"Login")),_react2.default.createElement("div",{id:"login-body"},this.state.error&&_react2.default.createElement("div",{id:"login-error"},_react2.default.createElement("p",null,"Email or password incorrect. Please try again or contact marilyn@thenextstep.io if you are having trouble logging in")),_react2.default.createElement("section",null,_react2.default.createElement("div",{className:"login-label-container"},_react2.default.createElement("p",null,"Email")),_react2.default.createElement("div",{className:"login-input-container"},_react2.default.createElement("input",{type:"email",id:"email_field",onChange:this.handleEmailChange,className:"login-input"}))),_react2.default.createElement("section",null,_react2.default.createElement("div",{className:"login-label-container"},_react2.default.createElement("p",null,"Password")),_react2.default.createElement("div",{className:"login-input-container"},_react2.default.createElement("input",{type:"password",id:"password_field",onChange:this.handlePasswordChange,className:"login-input"}))),_react2.default.createElement("div",null,_react2.default.createElement("input",{type:"submit",id:"login-submit"})))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Login}(_react2.default.Component),_default=Login,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(Login,"Login","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Login.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Login.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(8),_reactDom2=_interopRequireDefault(_reactDom),_reactRouterDom=__webpack_require__(11),_Header=__webpack_require__(14),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(13),_Footer2=_interopRequireDefault(_Footer),_JobsPage=__webpack_require__(25),_JobsPage2=_interopRequireDefault(_JobsPage),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var Register=function(_React$Component){function Register(e){_classCallCheck(this,Register);var t=_possibleConstructorReturn(this,(Register.__proto__||Object.getPrototypeOf(Register)).call(this,e));return t.handleRegisterForm=t.handleRegisterForm.bind(t),t.submitRegisterForm=t.submitRegisterForm.bind(t),t.handleFirstNameChange=t.handleFirstNameChange.bind(t),t.handleLastNameChange=t.handleLastNameChange.bind(t),t.handleEmailChange=t.handleEmailChange.bind(t),t.handlePasswordChange=t.handlePasswordChange.bind(t),t.handleUserTypeEmployee=t.handleUserTypeEmployee.bind(t),t.handleUserTypeEmployer=t.handleUserTypeEmployer.bind(t),t.state={first_name:"",last_name:"",email:"",password:"",user_type:"",redirectToDashboard:null,first_name_error:null,first_name_error_state:null,last_name_error:null,last_name_error_state:null,email_error:null,email_error_state:null,password_error:null,password_error_state:null,type_error:null,type_error_state:null,any_input_error:null},t}return _inherits(Register,_React$Component),_createClass(Register,[{key:"handleRegisterForm",value:function(e){e.preventDefault(),console.log("handling register form"),this.state.first_name?this.state.last_name?this.state.email?this.state.password?this.state.user_type?this.submitRegisterForm():this.setState({any_input_error:"error",type_error:"error"}):this.setState({any_input_error:"error",password_error:"error"}):this.setState({any_input_error:"error",email_error:"error"}):this.setState({any_input_error:"error",last_name_error:"error"}):this.setState({any_input_error:"error",first_name_error:"error"})}},{key:"submitRegisterForm",value:function(e){var t=this;console.log("submitting register form");_axios2.default.defaults.xsrfCookieName="csrftoken",_axios2.default.defaults.xsrfHeaderName="X-CSRFToken",(0,_axios2.default)({method:"post",url:"/authenticate/users/",data:{first_name:this.state.first_name,last_name:this.state.last_name,email:this.state.email,password:this.state.password,user_type:this.state.user_type},responseType:"json"}).then(function(e){201===e.status&&(console.log("201, user created"),t.setState({responseData:e.data}),localStorage.setItem("first_name",e.data.first_name),localStorage.setItem("last_name",e.data.last_name),localStorage.setItem("email",e.data.email),localStorage.setItem("token",e.data.token))}).then(function(){t.setState({redirectToDashboard:!0})}).catch(function(e){console.log("this is an error yo",e)})}},{key:"handleFirstNameChange",value:function(e){this.setState({first_name:e.target.value,first_name_error:null,any_input_error:null})}},{key:"handleLastNameChange",value:function(e){this.setState({last_name:e.target.value,last_name_error:null,any_input_error:null})}},{key:"handleEmailChange",value:function(e){this.setState({email:e.target.value,email_error:null,any_input_error:null})}},{key:"handlePasswordChange",value:function(e){this.setState({password:e.target.value,password_error:null,any_input_error:null})}},{key:"handleUserTypeEmployee",value:function(e){this.setState({user_type:"employee",any_input_error:null})}},{key:"handleUserTypeEmployer",value:function(e){this.setState({user_type:"emmployer",any_input_error:null})}},{key:"render",value:function(){return this.state.redirectToDashboard?_react2.default.createElement(_reactRouterDom.Redirect,{to:"/employer_dashboard"}):_react2.default.createElement("div",{id:"register-wrapper"},_react2.default.createElement("form",{onSubmit:this.handleRegisterForm,id:"register-form"},_react2.default.createElement("div",{id:"register-header"},_react2.default.createElement("h1",null,"Register")),_react2.default.createElement("div",{id:"register-body"},_react2.default.createElement("section",{className:"register-fieldset"},_react2.default.createElement("div",{className:"register-label-container"},_react2.default.createElement("p",null,"First Name")),_react2.default.createElement("div",{className:"register-input-container"},_react2.default.createElement("input",{type:"text",name:"first_name",id:"id_first_name",className:"register-input "+this.state.first_name_error_state,maxlength:"32",onChange:this.handleFirstNameChange,value:this.state.first_name}))),_react2.default.createElement("section",{className:"register-fieldset"},_react2.default.createElement("div",{className:"register-label-container"},_react2.default.createElement("p",null,"Last Name")),_react2.default.createElement("div",{className:"register-input-container"},_react2.default.createElement("input",{type:"text",name:"last_name",id:"id_last_name",className:"register-input "+this.state.last_name_error_state,onChange:this.handleLastNameChange,value:this.state.last_name,maxlength:"32"}))),_react2.default.createElement("section",{className:"register-fieldset"},_react2.default.createElement("div",{className:"register-label-container"},_react2.default.createElement("p",null,"Email:")),_react2.default.createElement("div",{className:"register-input-container"},_react2.default.createElement("input",{type:"email",id:"email_field",className:"register-input "+this.state.email_error_state,onChange:this.handleEmailChange,value:this.state.email}))),_react2.default.createElement("section",{className:"register-fieldset"},_react2.default.createElement("div",{className:"register-label-container"},_react2.default.createElement("p",null,"Password:")),_react2.default.createElement("div",{className:"register-input-container"},_react2.default.createElement("input",{type:"password",id:"password_field",className:"register-input "+this.state.password_error_state,onChange:this.handlePasswordChange,value:this.state.password}))),_react2.default.createElement("fieldset",null,_react2.default.createElement("p",null,"Are you an:"),_react2.default.createElement("div",{id:"employee-employer-container"},_react2.default.createElement("div",{className:"employee-employer-choice"},_react2.default.createElement("p",null,"Employee"),_react2.default.createElement("input",{type:"radio",name:"user_type",value:"employee",id:"typeEmployee",onChange:this.handleUserTypeEmployee})),_react2.default.createElement("div",{className:"employee-employer-choice"},_react2.default.createElement("p",null,"Employer"),_react2.default.createElement("input",{type:"radio",name:"user_type",value:"employer",id:"typeEmployer",onChange:this.handleUserTypeEmployer})))),_react2.default.createElement("fieldset",null,_react2.default.createElement("input",{type:"submit",id:"register-submit"})),this.state.any_input_error&&_react2.default.createElement("div",{id:"register-errors-container"},this.state.first_name_error&&_react2.default.createElement("p",null,"Please enter your first name"),this.state.last_name_error&&_react2.default.createElement("p",null,"Please enter your last name"),this.state.email_error&&_react2.default.createElement("p",null,"Please enter your email address"),this.state.password_error&&_react2.default.createElement("p",null,"Please enter a password"),this.state.type_error&&_react2.default.createElement("p",null,"Please select whether you're an employee or employer")))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Register}(_react2.default.Component),_default=Register,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(Register,"Register","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Register.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Register.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.canUseDOM=void 0;var r,o=n(130);var a=((r=o)&&r.__esModule?r:{default:r}).default,i=a.canUseDOM?window.HTMLElement:{};t.canUseDOM=a.canUseDOM;t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertNodeList=u,t.setElement=function(e){var t=e;if("string"==typeof t){var n=document.querySelectorAll(t);u(n,t),t="length"in n?n[0]:n}return i=t||i},t.validateElement=l,t.hide=function(e){l(e)&&(e||i).setAttribute("aria-hidden","true")},t.show=function(e){l(e)&&(e||i).removeAttribute("aria-hidden")},t.documentNotReadyOrSSRTesting=function(){i=null},t.resetForTesting=function(){i=null};var r,o=n(3),a=(r=o)&&r.__esModule?r:{default:r};var i=null;function u(e,t){if(!e||!e.length)throw new Error("react-modal: No elements were found for selector "+t+".")}function l(e){return!(!e&&!i)||((0,a.default)(!1,["react-modal: App element is not defined.","Please use `Modal.setAppElement(el)` or set `appElement={el}`.","This is needed so screen readers don't see main content","when modal is opened. It is not recommended, but you can opt-out","by setting `ariaHideApp={false}`."].join(" ")),!1)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return[].slice.call(e.querySelectorAll("*"),0).filter(i)};
/*!
 * Adapted from jQuery UI core
 *
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
var r=/input|select|textarea|button|object/;function o(e){var t=e.offsetWidth<=0&&e.offsetHeight<=0;if(t&&!e.innerHTML)return!0;var n=window.getComputedStyle(e);return t?"visible"!==n.getPropertyValue("overflow"):"none"==n.getPropertyValue("display")}function a(e,t){var n=e.nodeName.toLowerCase();return(r.test(n)&&!e.disabled||"a"===n&&e.href||t)&&function(e){for(var t=e;t&&t!==document.body;){if(o(t))return!1;t=t.parentNode}return!0}(e)}function i(e){var t=e.getAttribute("tabindex");null===t&&(t=void 0);var n=isNaN(t);return(n||t>=0)&&a(e,!n)}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(135),a=(r=o)&&r.__esModule?r:{default:r};t.default=a.default,e.exports=t.default},function(e,t,n){"use strict";var r={stringify:function(e){return"_"+String(e)},unstringify:function(e){return e.slice(1)}};e.exports=r},function(e,t,n){"use strict";var r=n(43),o=n(48),a=n(21),i=a.isPlatform("Mac OS X"),u=a.isPlatform("Windows"),l=i&&a.isBrowser("Firefox < 29"),s=r.hasCommandModifier,c=r.isCtrlKeyCommand;function f(e){return i&&e.altKey||c(e)}e.exports=function(e){switch(e.keyCode){case 66:return s(e)?"bold":null;case 68:return c(e)?"delete":null;case 72:return c(e)?"backspace":null;case 73:return s(e)?"italic":null;case 74:return s(e)?"code":null;case 75:return!u&&c(e)?"secondary-cut":null;case 77:case 79:return c(e)?"split-block":null;case 84:return i&&c(e)?"transpose-characters":null;case 85:return s(e)?"underline":null;case 87:return i&&c(e)?"backspace-word":null;case 89:return c(e)?u?"redo":"secondary-paste":null;case 90:return function(e){return s(e)?e.shiftKey?"redo":"undo":null}(e)||null;case o.RETURN:return"split-block";case o.DELETE:return function(e){return u&&e.shiftKey?null:f(e)?"delete-word":"delete"}(e);case o.BACKSPACE:return function(e){return s(e)&&i?"backspace-to-start-of-line":f(e)?"backspace-word":"backspace"}(e);case o.LEFT:return l&&s(e)?"move-selection-to-start-of-block":null;case o.RIGHT:return l&&s(e)?"move-selection-to-end-of-block":null;default:return null}}},function(e,t,n){"use strict";var r=n(12),o=n(6),a=(n(29),n(161)),i=n(19),u={currentBlockContainsLink:function(e){var t=e.getSelection(),n=e.getCurrentContent(),r=n.getEntityMap();return n.getBlockForKey(t.getAnchorKey()).getCharacterList().slice(t.getStartOffset(),t.getEndOffset()).some(function(e){var t=e.getEntity();return!!t&&"LINK"===r.__get(t).getType()})},getCurrentBlockType:function(e){var t=e.getSelection();return e.getCurrentContent().getBlockForKey(t.getStartKey()).getType()},getDataObjectForLinkURL:function(e){return{url:e.toString()}},handleKeyCommand:function(e,t){switch(t){case"bold":return u.toggleInlineStyle(e,"BOLD");case"italic":return u.toggleInlineStyle(e,"ITALIC");case"underline":return u.toggleInlineStyle(e,"UNDERLINE");case"code":return u.toggleCode(e);case"backspace":case"backspace-word":case"backspace-to-start-of-line":return u.onBackspace(e);case"delete":case"delete-word":case"delete-to-end-of-block":return u.onDelete(e);default:return null}},insertSoftNewline:function(e){var t=r.insertText(e.getCurrentContent(),e.getSelection(),"\n",e.getCurrentInlineStyle(),null),n=o.push(e,t,"insert-characters");return o.forceSelection(n,t.getSelectionAfter())},onBackspace:function(e){var t=e.getSelection();if(!t.isCollapsed()||t.getAnchorOffset()||t.getFocusOffset())return null;var n=e.getCurrentContent(),r=t.getStartKey(),a=n.getBlockBefore(r);if(a&&"atomic"===a.getType()){var i=n.getBlockMap().delete(a.getKey()),l=n.merge({blockMap:i,selectionAfter:t});if(l!==n)return o.push(e,l,"remove-range")}var s=u.tryToRemoveBlockStyle(e);return s?o.push(e,s,"change-block-type"):null},onDelete:function(e){var t=e.getSelection();if(!t.isCollapsed())return null;var n=e.getCurrentContent(),a=t.getStartKey(),i=n.getBlockForKey(a).getLength();if(t.getStartOffset()<i)return null;var u=n.getBlockAfter(a);if(!u||"atomic"!==u.getType())return null;var l=t.merge({focusKey:u.getKey(),focusOffset:u.getLength()}),s=r.removeRange(n,l,"forward");return s!==n?o.push(e,s,"remove-range"):null},onTab:function(e,t,n){var r=t.getSelection(),i=r.getAnchorKey();if(i!==r.getFocusKey())return t;var u=t.getCurrentContent(),l=u.getBlockForKey(i),s=l.getType();if("unordered-list-item"!==s&&"ordered-list-item"!==s)return t;e.preventDefault();var c=u.getBlockBefore(i);if(!c)return t;var f=c.getType();if("unordered-list-item"!==f&&"ordered-list-item"!==f)return t;var p=l.getDepth();if(!e.shiftKey&&p===n)return t;n=Math.min(c.getDepth()+1,n);var d=a(u,r,e.shiftKey?-1:1,n);return o.push(t,d,"adjust-depth")},toggleBlockType:function(e,t){var n=e.getSelection(),a=n.getStartKey(),u=n.getEndKey(),l=e.getCurrentContent(),s=n;if(a!==u&&0===n.getEndOffset()){var c=i(l.getBlockBefore(u));u=c.getKey(),s=s.merge({anchorKey:a,anchorOffset:n.getStartOffset(),focusKey:u,focusOffset:c.getLength(),isBackward:!1})}if(l.getBlockMap().skipWhile(function(e,t){return t!==a}).reverse().skipWhile(function(e,t){return t!==u}).some(function(e){return"atomic"===e.getType()}))return e;var f=l.getBlockForKey(a).getType()===t?"unstyled":t;return o.push(e,r.setBlockType(l,s,f),"change-block-type")},toggleCode:function(e){var t=e.getSelection(),n=t.getAnchorKey(),r=t.getFocusKey();return t.isCollapsed()||n!==r?u.toggleBlockType(e,"code-block"):u.toggleInlineStyle(e,"CODE")},toggleInlineStyle:function(e,t){var n=e.getSelection(),a=e.getCurrentInlineStyle();if(n.isCollapsed())return o.setInlineStyleOverride(e,a.has(t)?a.remove(t):a.add(t));var i,u=e.getCurrentContent();return i=a.has(t)?r.removeInlineStyle(u,n,t):r.applyInlineStyle(u,n,t),o.push(e,i,"change-inline-style")},toggleLink:function(e,t,n){var a=r.applyEntity(e.getCurrentContent(),t,n);return o.push(e,a,"apply-entity")},tryToRemoveBlockStyle:function(e){var t=e.getSelection(),n=t.getAnchorOffset();if(t.isCollapsed()&&0===n){var o=t.getAnchorKey(),a=e.getCurrentContent(),i=a.getBlockForKey(o),u=a.getFirstBlock();if(i.getLength()>0&&i!==u)return null;var l=i.getType(),s=a.getBlockBefore(o);if("code-block"===l&&s&&"code-block"===s.getType()&&0!==s.getLength())return null;if("unstyled"!==l)return r.setBlockType(a,t,"unstyled")}return null}};e.exports=u},function(e,t,n){"use strict";var r=n(21),o=n(4),a=r.isBrowser("IE <= 9");e.exports=function(e){var t,n=null;return!a&&document.implementation&&document.implementation.createHTMLDocument&&((t=document.implementation.createHTMLDocument("foo")).documentElement||o(!1),t.documentElement.innerHTML=e,n=t.getElementsByTagName("body")[0]),n}},function(e,t,n){"use strict";var r,o=a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(15);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=n(16),l=n(27),s=n(17),c=n(49),f=n(37),p=n(24),d=n(5),h=n(5).Set,m=n(162),y=n(28),_=n(23),g=n(71),v=n(4),b=n(51),w=p.draft_tree_data_support,E=d.List,C=d.OrderedSet,S=new RegExp("\r","g"),k=new RegExp("\n","g"),x=new RegExp("&nbsp;","g"),O=new RegExp("&#13;?","g"),T=new RegExp("&#8203;?","g"),j=["bold","bolder","500","600","700","800","900"],R=["light","lighter","100","200","300","400"],M={b:"BOLD",code:"CODE",del:"STRIKETHROUGH",em:"ITALIC",i:"ITALIC",s:"STRIKETHROUGH",strike:"STRIKETHROUGH",strong:"BOLD",u:"UNDERLINE"},D=(i(r={},y("public/DraftStyleDefault/depth0"),0),i(r,y("public/DraftStyleDefault/depth1"),1),i(r,y("public/DraftStyleDefault/depth2"),2),i(r,y("public/DraftStyleDefault/depth3"),3),i(r,y("public/DraftStyleDefault/depth4"),4),r),N=["className","href","rel","target","title"],P=["alt","className","height","src","width"],L=void 0,I={text:"",inlines:[],entities:[],blocks:[]},A={children:E(),depth:0,key:"",type:""},U=function(e,t){return"li"===e?"ol"===t?"ordered-list-item":"unordered-list-item":null},F=function(e,t,n){var r=n.filter(function(t){return t.element===e||t.wrapper===e||t.aliasedElements&&t.aliasedElements.some(function(t){return t===e})}).keySeq().toSet().toArray().sort();switch(r.length){case 0:return"unstyled";case 1:return r[0];default:return function(e,t,n){for(var r=0;r<n.length;r++){var o=n[r](e,t);if(o)return o}return null}(e,t,[U])||"unstyled"}},B=function(e,t,n){var r=e.text.slice(-1),o=t.text.slice(0,1);if("\r"!==r||"\r"!==o||n||(e.text=e.text.slice(0,-1),e.inlines.pop(),e.entities.pop(),e.blocks.pop()),"\r"===r){if(" "===t.text||"\n"===t.text)return e;" "!==o&&"\n"!==o||(t.text=t.text.slice(1),t.inlines.shift(),t.entities.shift())}return{text:e.text+t.text,inlines:e.inlines.concat(t.inlines),entities:e.entities.concat(t.entities),blocks:e.blocks.concat(t.blocks)}},q=function(e){e instanceof HTMLAnchorElement||v(!1);var t=e.protocol;return"http:"===t||"https:"===t||"mailto:"===t},K=function(){return o({},I,{text:"\n",inlines:[C()],entities:new Array(1)})},H=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return{text:"\r",inlines:[C()],entities:new Array(1),blocks:[function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return o({},A,e)}({parent:n,key:_(),type:e,depth:Math.max(0,Math.min(4,t))})]}},J=function e(t,n,r,a,i,u,l,s,c,p){var d=L,h=n.nodeName.toLowerCase(),y=t,_="unstyled",g=!1,v=i&&F(i,a,s),b=o({},I),E=void 0;if("#text"===h){var S=n.textContent,x=S.trim();if(a&&""===x&&n.parentElement){var O=n.parentElement.nodeName.toLowerCase();if("ol"===O||"ul"===O)return{chunk:o({},I),entityMap:t}}return""===x&&"pre"!==i?{chunk:function(e){var t=new Array(1);return e&&(t[0]=e),o({},I,{text:" ",inlines:[C()],entities:t})}(c),entityMap:t}:("pre"!==i&&(S=S.replace(k," ")),L=h,{chunk:{text:S,inlines:Array(S.length).fill(r),entities:Array(S.length).fill(c),blocks:[]},entityMap:t})}if(L=h,"br"===h)return"br"!==d||i&&"unstyled"!==v?{chunk:K(),entityMap:t}:{chunk:H("unstyled",l,p),entityMap:t};if("img"===h&&n instanceof HTMLImageElement&&n.attributes.getNamedItem("src")&&n.attributes.getNamedItem("src").value){var T=n,A={};P.forEach(function(e){var t=T.getAttribute(e);t&&(A[e]=t)}),n.textContent="📷",c=f.__create("IMAGE","MUTABLE",A||{})}r=function(e,t,n){var r=M[e];if(r)n=n.add(r).toOrderedSet();else if(t instanceof HTMLElement){var o=t;n=n.withMutations(function(e){var t=o.style.fontWeight,n=o.style.fontStyle,r=o.style.textDecoration;j.indexOf(t)>=0?e.add("BOLD"):R.indexOf(t)>=0&&e.remove("BOLD"),"italic"===n?e.add("ITALIC"):"normal"===n&&e.remove("ITALIC"),"underline"===r&&e.add("UNDERLINE"),"line-through"===r&&e.add("STRIKETHROUGH"),"none"===r&&(e.remove("UNDERLINE"),e.remove("STRIKETHROUGH"))}).toOrderedSet()}return n}(h,n,r),"ul"!==h&&"ol"!==h||(a&&(l+=1),a=h),!w&&"li"===h&&n instanceof HTMLElement&&(l=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Object.keys(D).some(function(n){e.classList.contains(n)&&(t=D[n])}),t}(n,l));var U=F(h,a,s),J=a&&"li"===i&&"li"===h,z=(!i||w)&&-1!==u.indexOf(h);(J||z)&&(E=(b=H(U,l,p)).blocks[0].key,i=h,g=!w),J&&(_="ul"===a?"unordered-list-item":"ordered-list-item");var W=n.firstChild;null!=W&&(h=W.nodeName.toLowerCase());for(var V=null;W;){W instanceof HTMLAnchorElement&&W.href&&q(W)?function(){var e=W,t={};N.forEach(function(n){var r=e.getAttribute(n);r&&(t[n]=r)}),t.url=new m(e.href).toString(),V=f.__create("LINK","MUTABLE",t||{})}():V=void 0;var $=e(y,W,r,a,i,u,l,s,V||c,w?E:null),Y=$.chunk;y=$.entityMap,b=B(b,Y,w);var G=W.nextSibling;!p&&G&&u.indexOf(h)>=0&&i&&(b=B(b,K())),G&&(h=G.nodeName.toLowerCase()),W=G}return g&&(b=B(b,H(_,l,p))),{chunk:b,entityMap:y}},z=function(e,t,n,r){e=e.trim().replace(S,"").replace(x," ").replace(O,"").replace(T,"");var a=function(e){var t=e.get("unstyled").element,n=h([]);return e.forEach(function(e){e.aliasedElements&&e.aliasedElements.forEach(function(e){n=n.add(e)}),n=n.add(e.element)}),n.filter(function(e){return e&&e!==t}).toArray().sort()}(n),i=t(e);if(!i)return null;L=null;var u=function(e,t){return t.some(function(t){return-1!==e.indexOf("<"+t)})}(e,a)?a:["div"],l=J(r,i,C(),"ul",null,u,-1,n),s=l.chunk,c=l.entityMap;return 0===s.text.indexOf("\r")&&(s={text:s.text.slice(1),inlines:s.inlines.slice(1),entities:s.entities.slice(1),blocks:s.blocks}),"\r"===s.text.slice(-1)&&(s.text=s.text.slice(0,-1),s.inlines=s.inlines.slice(0,-1),s.entities=s.entities.slice(0,-1),s.blocks.pop()),0===s.blocks.length&&s.blocks.push(o({},I,{type:"unstyled",depth:0})),s.text.split("\r").length===s.blocks.length+1&&s.blocks.unshift({type:"unstyled",depth:0}),{chunk:s,entityMap:c}};e.exports=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:g,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c,r=z(e,t,n,f);if(null==r)return null;var o=r.chunk,a=r.entityMap;return{contentBlocks:function(e){if(!e||!e.text||!Array.isArray(e.blocks))return null;var t=0,n=e.blocks,r=e.inlines,o=e.entities,a=w?s:l;return e.text.split("\r").reduce(function(e,i,l){i=b(i);var c=n[l],f=t+i.length,p=r.slice(t,f),d=o.slice(t,f),h=E(p.map(function(e,t){var n={style:e,entity:null};return d[t]&&(n.entity=d[t]),u.create(n)}));t=f+1;var m=c.depth,y=c.type,g=c.parent,v=c.key||_(),w=null;if(g){var C=e.cacheRef[g],S=e.contentBlocks[C];if(S.getChildKeys().isEmpty()&&S.getText()){var k=S.getCharacterList(),x=S.getText();w=_();var O=new s({key:w,text:x,characterList:k,parent:g,nextSibling:v});e.contentBlocks.push(O),S=S.withMutations(function(e){e.set("characterList",E()).set("text","").set("children",S.children.push(O.getKey()))})}e.contentBlocks[C]=S.set("children",S.children.push(v))}var T=new a({key:v,parent:g,type:y,depth:m,text:i,characterList:h,prevSibling:w||(0===l||n[l-1].parent!==g?null:n[l-1].key),nextSibling:l===n.length-1||n[l+1].parent!==g?null:n[l+1].key});return e.contentBlocks.push(T),e.cacheRef[T.key]=l,e},{cacheRef:{},contentBlocks:[]}).contentBlocks}(o),entityMap:a}}},function(e,t,n){"use strict";e.exports=function(e,t){var n,r=e.getSelection(),o=r.getStartKey(),a=r.getStartOffset(),i=e.getCurrentContent(),u=o;return t>i.getBlockForKey(o).getText().length-a?(u=i.getKeyAfter(o),n=0):n=a+t,r.merge({focusKey:u,focusOffset:n})}},function(e,t,n){"use strict";var r="\\s|(?![_])"+n(173).getPunctuation(),o=new RegExp("^(?:"+r+")*(?:['‘’]|(?!"+r+").)*(?:(?!"+r+").)"),a=new RegExp("(?:(?!"+r+").)(?:['‘’]|(?!"+r+").)*(?:"+r+")*$");function i(e,t){var n=t?a.exec(e):o.exec(e);return n?n[0]:e}var u={getBackward:function(e){return i(e,!0)},getForward:function(e){return i(e,!1)}};e.exports=u},function(e,t,n){"use strict";var r=n(44),o=n(80),a=n(78),i=n(4),u=n(19);function l(e,t,n){var a=t,l=r(a);if(null!=l||e&&(e===a||e.firstChild===a)||i(!1),e===a&&((a=a.firstChild)instanceof Element&&"true"===a.getAttribute("data-contents")||i(!1),n>0&&(n=a.childNodes.length)),0===n){var c=null;if(null!=l)c=l;else{var f=function(e){for(;e.firstChild&&(e.firstChild instanceof Element&&"true"===e.firstChild.getAttribute("data-blocks")||o(e.firstChild));)e=e.firstChild;return e}(a);c=u(o(f))}return{key:c,offset:0}}var p=a.childNodes[n-1],d=null,h=null;if(o(p)){var m=function(e){for(;e.lastChild&&(e.lastChild instanceof Element&&"true"===e.lastChild.getAttribute("data-blocks")||o(e.lastChild));)e=e.lastChild;return e}(p);d=u(o(m)),h=s(m)}else d=u(l),h=s(p);return{key:d,offset:h}}function s(e){var t=e.textContent;return"\n"===t?0:t.length}e.exports=function(e,t,n,o,i,s){var c=n.nodeType===Node.TEXT_NODE,f=i.nodeType===Node.TEXT_NODE;if(c&&f)return{selectionState:a(e,u(r(n)),o,u(r(i)),s),needsRecovery:!1};var p=null,d=null,h=!0;return c?(p={key:u(r(n)),offset:o},d=l(t,i,s)):f?(d={key:u(r(i)),offset:s},p=l(t,n,o)):(p=l(t,n,o),d=l(t,i,s),n===i&&o===s&&(h=!!n.firstChild&&"BR"!==n.firstChild.nodeName)),{selectionState:a(e,p.key,p.offset,d.key,d.offset),needsRecovery:h}}},function(e,t,n){"use strict";var r=n(21),o=n(4);var a=r.isBrowser("Chrome")?function(e){for(var t=e.cloneRange(),n=[],r=e.endContainer;null!=r;r=r.parentNode){var a=r===e.commonAncestorContainer;a?t.setStart(e.startContainer,e.startOffset):t.setStart(t.endContainer,0);var i,u=Array.from(t.getClientRects());if(n.push(u),a)return n.reverse(),(i=[]).concat.apply(i,n);t.setEndBefore(r)}o(!1)}:function(e){return Array.from(e.getClientRects())};e.exports=a},function(e,t,n){"use strict";var r=n(38);e.exports=function(e){var t=e.getSelection();return t.isCollapsed()?null:r(e.getCurrentContent(),t)}},function(e,t,n){"use strict";var r=n(36),o=n(19);e.exports=function(e,t,n,a,i){var u=o(e.getSelection()),l=r.decode(t),s=l.blockKey,c=e.getBlockTree(s).getIn([l.decoratorKey,"leaves",l.leafKey]),f=r.decode(a),p=f.blockKey,d=e.getBlockTree(p).getIn([f.decoratorKey,"leaves",f.leafKey]),h=c.get("start"),m=d.get("start"),y=c?h+n:null,_=d?m+i:null;if(u.getAnchorKey()===s&&u.getAnchorOffset()===y&&u.getFocusKey()===p&&u.getFocusOffset()===_)return u;var g=!1;if(s===p){var v=c.get("end"),b=d.get("end");g=m===h&&b===v?i<n:m<h}else g=e.getCurrentContent().getBlockMap().keySeq().skipUntil(function(e){return e===s||e===p}).first()===p;return u.merge({anchorKey:s,anchorOffset:y,focusKey:p,focusOffset:_,isBackward:g})}},function(e,t,n){"use strict";(function(t){var r=n(4),o=/\.textClipping$/,a={"text/plain":!0,"text/html":!0,"text/rtf":!0},i=5e3;e.exports=function(e,n){var u=0,l=[];e.forEach(function(s){!function(e,n){if(t.FileReader&&(!e.type||e.type in a)){if(""===e.type){var i="";return o.test(e.name)&&(i=e.name.replace(o,"")),void n(i)}var u=new FileReader;u.onload=function(){var e=u.result;"string"!=typeof e&&r(!1),n(e)},u.onerror=function(){n("")},u.readAsText(e)}else n("")}(s,function(t){u++,t&&l.push(t.slice(0,i)),u==e.length&&n(l.join("\r"))})})}}).call(this,n(20))},function(e,t,n){"use strict";e.exports=function e(t){if(t instanceof Element){var n=t.getAttribute("data-offset-key");if(n)return n;for(var r=0;r<t.childNodes.length;r++){var o=e(t.childNodes[r]);if(o)return o}}return null}},function(e,t,n){"use strict";var r=n(192),o=n(191),a=n(31),i=new RegExp("\r\n","g"),u={"text/rtf":1,"text/html":1};function l(e){if("file"==e.kind)return e.getAsFile()}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.data=t,this.types=t.types?o(t.types):[]}return e.prototype.isRichText=function(){return!(!this.getHTML()||!this.getText())||!this.isImage()&&this.types.some(function(e){return u[e]})},e.prototype.getText=function(){var e;return this.data.getData&&(this.types.length?-1!=this.types.indexOf("text/plain")&&(e=this.data.getData("text/plain")):e=this.data.getData("Text")),e?e.replace(i,"\n"):null},e.prototype.getHTML=function(){if(this.data.getData){if(!this.types.length)return this.data.getData("Text");if(-1!=this.types.indexOf("text/html"))return this.data.getData("text/html")}},e.prototype.isLink=function(){return this.types.some(function(e){return-1!=e.indexOf("Url")||-1!=e.indexOf("text/uri-list")||e.indexOf("text/x-moz-url")})},e.prototype.getLink=function(){return this.data.getData?-1!=this.types.indexOf("text/x-moz-url")?this.data.getData("text/x-moz-url").split("\n")[0]:-1!=this.types.indexOf("text/uri-list")?this.data.getData("text/uri-list"):this.data.getData("url"):null},e.prototype.isImage=function(){var e=this.types.some(function(e){return-1!=e.indexOf("application/x-moz-file")});if(e)return!0;for(var t=this.getFiles(),n=0;n<t.length;n++){var o=t[n].type;if(!r.isImage(o))return!1}return!0},e.prototype.getCount=function(){return this.data.hasOwnProperty("items")?this.data.items.length:this.data.hasOwnProperty("mozItemCount")?this.data.mozItemCount:this.data.files?this.data.files.length:null},e.prototype.getFiles=function(){return this.data.items?Array.prototype.slice.call(this.data.items).map(l).filter(a.thatReturnsArgument):this.data.files?Array.prototype.slice.call(this.data.files):[]},e.prototype.hasFiles=function(){return this.getFiles().length>0},e}();e.exports=s},function(e,t,n){"use strict";function r(e,t){return!!t&&(e===t.documentElement||e===t.body)}var o={getTop:function(e){var t=e.ownerDocument;return r(e,t)?t.body.scrollTop||t.documentElement.scrollTop:e.scrollTop},setTop:function(e,t){var n=e.ownerDocument;r(e,n)?n.body.scrollTop=n.documentElement.scrollTop=t:e.scrollTop=t},getLeft:function(e){var t=e.ownerDocument;return r(e,t)?t.body.scrollLeft||t.documentElement.scrollLeft:e.scrollLeft},setLeft:function(e,t){var n=e.ownerDocument;r(e,n)?n.body.scrollLeft=n.documentElement.scrollLeft=t:e.scrollLeft=t}};e.exports=o},function(e,t,n){"use strict";var r=n(15)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var o=n(212),a=n(36),i=n(1),u=n(8),l=n(82),s=n(46),c=n(86),f=n(50),p=n(28),d=n(199),h=n(45),m=n(195),y=n(4),_=n(19),g=function(e,t){return e.getAnchorKey()===t||e.getFocusKey()===t},v=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.shouldComponentUpdate=function(e){return this.props.block!==e.block||this.props.tree!==e.tree||this.props.direction!==e.direction||g(e.selection,e.block.getKey())&&e.forceSelection},t.prototype.componentDidMount=function(){var e=this.props.selection,t=e.getEndKey();if(e.getHasFocus()&&t===this.props.block.getKey()){var n=u.findDOMNode(this),r=s.getScrollParent(n),o=h(r),a=void 0;if(r===window){var i=d(n);(a=i.y+i.height-m().height)>0&&window.scrollTo(o.x,o.y+a+10)}else{n instanceof HTMLElement||y(!1),(a=n.offsetHeight+n.offsetTop-(r.offsetHeight+o.y))>0&&l.setTop(r,l.getTop(r)+a+10)}}},t.prototype._renderChildren=function(){var e=this,t=this.props.block,n=t.getKey(),u=t.getText(),l=this.props.tree.size-1,s=g(this.props.selection,n);return this.props.tree.map(function(p,d){var h=p.get("leaves"),m=h.size-1,y=h.map(function(r,c){var f=a.encode(n,d,c),p=r.get("start"),h=r.get("end");return i.createElement(o,{key:f,offsetKey:f,block:t,start:p,selection:s?e.props.selection:null,forceSelection:e.props.forceSelection,text:u.slice(p,h),styleSet:t.getInlineStyleAt(p),customStyleMap:e.props.customStyleMap,customStyleFn:e.props.customStyleFn,isLast:d===l&&c===m})}).toArray(),g=p.get("decoratorKey");if(null==g)return y;if(!e.props.decorator)return y;var v=_(e.props.decorator),b=v.getComponentForKey(g);if(!b)return y;var w=v.getPropsForKey(g),E=a.encode(n,d,0),C=u.slice(h.first().get("start"),h.last().get("end")),S=f.getHTMLDirIfDifferent(c.getDirection(C),e.props.direction);return i.createElement(b,r({},w,{contentState:e.props.contentState,decoratedText:C,dir:S,key:E,entityKey:t.getEntityAt(p.get("start")),offsetKey:E}),y)}).toArray()},t.prototype.render=function(){var e=this.props,t=e.direction,n=e.offsetKey,r=p({"public/DraftStyleDefault/block":!0,"public/DraftStyleDefault/ltr":"LTR"===t,"public/DraftStyleDefault/rtl":"RTL"===t});return i.createElement("div",{"data-offset-key":n,className:r},this._renderChildren())},t}(i.Component);e.exports=v},function(e,t,n){"use strict";e.exports=function(e){var t=e.getSelection(),n=t.getAnchorKey(),r=e.getBlockTree(n),o=t.getStartOffset(),a=!1;return r.some(function(e){return o===e.get("start")?(a=!0,!0):o<e.get("end")&&e.get("leaves").some(function(e){var t=e.get("start");return o===t&&(a=!0,!0)})}),a}},function(e,t,n){"use strict";e.exports={BOLD:{fontWeight:"bold"},CODE:{fontFamily:"monospace",wordWrap:"break-word"},ITALIC:{fontStyle:"italic"},STRIKETHROUGH:{textDecoration:"line-through"},UNDERLINE:{textDecoration:"underline"}}},function(e,t,n){"use strict";var r=n(50),o=n(4),a="֐־׀׃׆׈-׏א-ת׫-ׯװ-ײ׳-״׵-׿߀-߉ߊ-ߪߴ-ߵߺ߻-߿ࠀ-ࠕࠚࠤࠨ࠮-࠯࠰-࠾࠿ࡀ-ࡘ࡜-࡝࡞࡟-࢟‏יִײַ-ﬨשׁ-זּ﬷טּ-לּ﬽מּ﬿נּ-סּ﭂ףּ-פּ﭅צּ-ﭏ",i="؈؋؍؛؜؝؞-؟ؠ-ؿـف-ي٭ٮ-ٯٱ-ۓ۔ەۥ-ۦۮ-ۯۺ-ۼ۽-۾ۿ܀-܍܎܏ܐܒ-ܯ݋-݌ݍ-ޥޱ޲-޿ࢠ-ࢲࢳ-ࣣﭐ-ﮱ﮲-﯁﯂-﯒ﯓ-ﴽ﵀-﵏ﵐ-ﶏ﶐-﶑ﶒ-ﷇ﷈-﷏ﷰ-ﷻ﷼﷾-﷿ﹰ-ﹴ﹵ﹶ-ﻼ﻽-﻾",u=new RegExp("["+"A-Za-zªµºÀ-ÖØ-öø-ƺƻƼ-ƿǀ-ǃǄ-ʓʔʕ-ʯʰ-ʸʻ-ˁː-ˑˠ-ˤˮͰ-ͳͶ-ͷͺͻ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҂Ҋ-ԯԱ-Ֆՙ՚-՟ա-և։ःऄ-हऻऽा-ीॉ-ौॎ-ॏॐक़-ॡ।-॥०-९॰ॱॲ-ঀং-ঃঅ-ঌএ-ঐও-নপ-রলশ-হঽা-ীে-ৈো-ৌৎৗড়-ঢ়য়-ৡ০-৯ৰ-ৱ৴-৹৺ਃਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹਾ-ੀਖ਼-ੜਫ਼੦-੯ੲ-ੴઃઅ-ઍએ-ઑઓ-નપ-રલ-ળવ-હઽા-ીૉો-ૌૐૠ-ૡ૦-૯૰ଂ-ଃଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହଽାୀେ-ୈୋ-ୌୗଡ଼-ଢ଼ୟ-ୡ୦-୯୰ୱ୲-୷ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹா-ிு-ூெ-ைொ-ௌௐௗ௦-௯௰-௲ఁ-ఃఅ-ఌఎ-ఐఒ-నప-హఽు-ౄౘ-ౙౠ-ౡ౦-౯౿ಂ-ಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽಾಿೀ-ೄೆೇ-ೈೊ-ೋೕ-ೖೞೠ-ೡ೦-೯ೱ-ೲം-ഃഅ-ഌഎ-ഐഒ-ഺഽാ-ീെ-ൈൊ-ൌൎൗൠ-ൡ൦-൯൰-൵൹ൺ-ൿං-ඃඅ-ඖක-නඳ-රලව-ෆා-ෑෘ-ෟ෦-෯ෲ-ෳ෴ก-ะา-ำเ-ๅๆ๏๐-๙๚-๛ກ-ຂຄງ-ຈຊຍດ-ທນ-ຟມ-ຣລວສ-ຫອ-ະາ-ຳຽເ-ໄໆ໐-໙ໜ-ໟༀ༁-༃༄-༒༓༔༕-༗༚-༟༠-༩༪-༳༴༶༸༾-༿ཀ-ཇཉ-ཬཿ྅ྈ-ྌ྾-࿅࿇-࿌࿎-࿏࿐-࿔࿕-࿘࿙-࿚က-ဪါ-ာေးျ-ြဿ၀-၉၊-၏ၐ-ၕၖ-ၗၚ-ၝၡၢ-ၤၥ-ၦၧ-ၭၮ-ၰၵ-ႁႃ-ႄႇ-ႌႎႏ႐-႙ႚ-ႜ႞-႟Ⴀ-ჅჇჍა-ჺ჻ჼჽ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፠-፨፩-፼ᎀ-ᎏᎠ-Ᏼᐁ-ᙬ᙭-᙮ᙯ-ᙿᚁ-ᚚᚠ-ᛪ᛫-᛭ᛮ-ᛰᛱ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱ᜵-᜶ᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳាើ-ៅះ-ៈ។-៖ៗ៘-៚ៜ០-៩᠐-᠙ᠠ-ᡂᡃᡄ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᤣ-ᤦᤩ-ᤫᤰ-ᤱᤳ-ᤸ᥆-᥏ᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧀᧁ-ᧇᧈ-ᧉ᧐-᧙᧚ᨀ-ᨖᨙ-ᨚ᨞-᨟ᨠ-ᩔᩕᩗᩡᩣ-ᩤᩭ-ᩲ᪀-᪉᪐-᪙᪠-᪦ᪧ᪨-᪭ᬄᬅ-ᬳᬵᬻᬽ-ᭁᭃ-᭄ᭅ-ᭋ᭐-᭙᭚-᭠᭡-᭪᭴-᭼ᮂᮃ-ᮠᮡᮦ-ᮧ᮪ᮮ-ᮯ᮰-᮹ᮺ-ᯥᯧᯪ-ᯬᯮ᯲-᯳᯼-᯿ᰀ-ᰣᰤ-ᰫᰴ-ᰵ᰻-᰿᱀-᱉ᱍ-ᱏ᱐-᱙ᱚ-ᱷᱸ-ᱽ᱾-᱿᳀-᳇᳓᳡ᳩ-ᳬᳮ-ᳱᳲ-ᳳᳵ-ᳶᴀ-ᴫᴬ-ᵪᵫ-ᵷᵸᵹ-ᶚᶛ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ‎ⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℴℵ-ℸℹℼ-ℿⅅ-ⅉⅎ⅏Ⅰ-ↂↃ-ↄↅ-ↈ⌶-⍺⎕⒜-ⓩ⚬⠀-⣿Ⰰ-Ⱞⰰ-ⱞⱠ-ⱻⱼ-ⱽⱾ-ⳤⳫ-ⳮⳲ-ⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯ⵰ⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々〆〇〡-〩〮-〯〱-〵〸-〺〻〼ぁ-ゖゝ-ゞゟァ-ヺー-ヾヿㄅ-ㄭㄱ-ㆎ㆐-㆑㆒-㆕㆖-㆟ㆠ-ㆺㇰ-ㇿ㈀-㈜㈠-㈩㈪-㉇㉈-㉏㉠-㉻㉿㊀-㊉㊊-㊰㋀-㋋㋐-㋾㌀-㍶㍻-㏝㏠-㏾㐀-䶵一-鿌ꀀ-ꀔꀕꀖ-ꒌꓐ-ꓷꓸ-ꓽ꓾-꓿ꔀ-ꘋꘌꘐ-ꘟ꘠-꘩ꘪ-ꘫꙀ-ꙭꙮꚀ-ꚛꚜ-ꚝꚠ-ꛥꛦ-ꛯ꛲-꛷Ꜣ-ꝯꝰꝱ-ꞇ꞉-꞊Ꞌ-ꞎꞐ-ꞭꞰ-Ʇꟷꟸ-ꟹꟺꟻ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꠣ-ꠤꠧ꠰-꠵꠶-꠷ꡀ-ꡳꢀ-ꢁꢂ-ꢳꢴ-ꣃ꣎-꣏꣐-꣙ꣲ-ꣷ꣸-꣺ꣻ꤀-꤉ꤊ-ꤥ꤮-꤯ꤰ-ꥆꥒ-꥓꥟ꥠ-ꥼꦃꦄ-ꦲꦴ-ꦵꦺ-ꦻꦽ-꧀꧁-꧍ꧏ꧐-꧙꧞-꧟ꧠ-ꧤꧦꧧ-ꧯ꧰-꧹ꧺ-ꧾꨀ-ꨨꨯ-ꨰꨳ-ꨴꩀ-ꩂꩄ-ꩋꩍ꩐-꩙꩜-꩟ꩠ-ꩯꩰꩱ-ꩶ꩷-꩹ꩺꩻꩽꩾ-ꪯꪱꪵ-ꪶꪹ-ꪽꫀꫂꫛ-ꫜꫝ꫞-꫟ꫠ-ꫪꫫꫮ-ꫯ꫰-꫱ꫲꫳ-ꫴꫵꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚ꭛ꭜ-ꭟꭤ-ꭥꯀ-ꯢꯣ-ꯤꯦ-ꯧꯩ-ꯪ꯫꯬꯰-꯹가-힣ힰ-ퟆퟋ-ퟻ-豈-舘並-龎ﬀ-ﬆﬓ-ﬗＡ-Ｚａ-ｚｦ-ｯｰｱ-ﾝﾞ-ﾟﾠ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ"+a+i+"]"),l=new RegExp("["+a+i+"]");function s(e){var t=u.exec(e);return null==t?null:t[0]}function c(e){var t=s(e);return null==t?r.NEUTRAL:l.exec(t)?r.RTL:r.LTR}function f(e,t){if(t=t||r.NEUTRAL,!e.length)return t;var n=c(e);return n===r.NEUTRAL?t:n}function p(e,t){return t||(t=r.getGlobalDir()),r.isStrong(t)||o(!1),f(e,t)}var d={firstStrongChar:s,firstStrongCharDir:c,resolveBlockDir:f,getDirection:p,isDirectionLTR:function(e,t){return p(e,t)===r.LTR},isDirectionRTL:function(e,t){return p(e,t)===r.RTL}};e.exports=d},function(e,t,n){"use strict";var r=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getType=function(){return this.get("type")},t.prototype.getMutability=function(){return this.get("mutability")},t.prototype.getData=function(){return this.get("data")},t}((0,n(5).Record)({type:"TOKEN",mutability:"IMMUTABLE",data:Object}));e.exports=r},function(e,t,n){"use strict";var r=n(5),o=n(31),a=n(34),i=r.List,u=r.Repeat,l=r.Record,s=o.thatReturnsTrue,c=l({start:null,end:null}),f=l({start:null,end:null,decoratorKey:null,leaves:null}),p={generate:function(e,t,n){var r=t.getLength();if(!r)return i.of(new f({start:0,end:0,decoratorKey:null,leaves:i.of(new c({start:0,end:0}))}));var o=[],l=n?n.getDecorations(t,e):i(u(null,r)),p=t.getCharacterList();return a(l,d,s,function(e,t){var n,r,u,h;o.push(new f({start:e,end:t,decoratorKey:l.get(e),leaves:(n=p.slice(e,t).toList(),r=e,u=[],h=n.map(function(e){return e.getStyle()}).toList(),a(h,d,s,function(e,t){u.push(new c({start:e+r,end:t+r}))}),i(u))}))}),i(o)},getFingerprint:function(e){return e.map(function(e){var t=e.get("decoratorKey");return(null!==t?t+"."+(e.get("end")-e.get("start")):"")+"."+e.get("leaves").size}).join("-")}};function d(e,t){return e===t}e.exports=p},function(e,t,n){"use strict";var r=n(17);e.exports=function(e,t){if(!(e instanceof r))return null;var n=e.getNextSiblingKey();if(n)return n;var o=e.getParentKey();if(!o)return null;for(var a=t.get(o);a&&!a.getNextSiblingKey();){var i=a.getParentKey();a=i?t.get(i):null}return a?a.getNextSiblingKey():null}},function(e,t,n){"use strict";e.exports=function(e,t,n){if(n===e.count())t.forEach(function(t){e=e.push(t)});else if(0===n)t.reverse().forEach(function(t){e=e.unshift(t)});else{var r=e.slice(0,n),o=e.slice(n);e=r.concat(t,o).toList()}return e}},function(e,t,n){"use strict";var r=n(16),o=n(34),a=n(4);function i(e,t,n){var i=t.getCharacterList(),u=n>0?i.get(n-1):void 0,l=n<i.count()?i.get(n):void 0,s=u?u.getEntity():void 0,c=l?l.getEntity():void 0;if(c&&c===s&&"MUTABLE"!==e.__get(c).getMutability()){for(var f,p=function(e,t,n){var r;return o(e,function(e,t){return e.getEntity()===t.getEntity()},function(e){return e.getEntity()===t},function(e,t){e<=n&&t>=n&&(r={start:e,end:t})}),"object"!=typeof r&&a(!1),r}(i,c,n),d=p.start,h=p.end;d<h;)f=i.get(d),i=i.set(d,r.applyEntity(f,null)),d++;return t.set("characterList",i)}return t}e.exports=function(e,t){var n=e.getBlockMap(),r=e.getEntityMap(),o={},a=t.getStartKey(),u=t.getStartOffset(),l=n.get(a),s=i(r,l,u);s!==l&&(o[a]=s);var c=t.getEndKey(),f=t.getEndOffset(),p=n.get(c);a===c&&(p=s);var d=i(r,p,f);return d!==p&&(o[c]=d),Object.keys(o).length?e.merge({blockMap:n.merge(o),selectionAfter:t}):e.set("selectionAfter",t)}},function(e,t,n){"use strict";var r=n(17),o=n(5),a=n(23),i=o.OrderedMap;e.exports=function(e){return e.first()instanceof r?function(e){var t={},n=void 0;return i(e.withMutations(function(e){e.forEach(function(r,o){var i=r.getKey(),u=r.getNextSiblingKey(),l=r.getPrevSiblingKey(),s=r.getChildKeys(),c=r.getParentKey(),f=a();if(t[i]=f,u&&(e.get(u)?e.setIn([u,"prevSibling"],f):e.setIn([i,"nextSibling"],null)),l&&(e.get(l)?e.setIn([l,"nextSibling"],f):e.setIn([i,"prevSibling"],null)),c&&e.get(c)){var p=e.get(c).getChildKeys();e.setIn([c,"children"],p.set(p.indexOf(r.getKey()),f))}else e.setIn([i,"parent"],null),n&&(e.setIn([n.getKey(),"nextSibling"],f),e.setIn([i,"prevSibling"],t[n.getKey()])),n=e.get(i);s.forEach(function(t){e.get(t)?e.setIn([t,"parent"],f):e.setIn([i,"children"],r.getChildKeys().filter(function(e){return e!==t}))})})}).toArray().map(function(e){return[t[e.getKey()],e.set("key",t[e.getKey()])]}))}(e):function(e){return i(e.toArray().map(function(e){var t=a();return[t,e.set("key",t)]}))}(e)}},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(8),_reactDom2=_interopRequireDefault(_reactDom),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var SingleJob=function(_React$Component){function SingleJob(e){_classCallCheck(this,SingleJob);var t=_possibleConstructorReturn(this,(SingleJob.__proto__||Object.getPrototypeOf(SingleJob)).call(this,e));return t.state={jobCompanyId:t.props.jobCompany},t}return _inherits(SingleJob,_React$Component),_createClass(SingleJob,[{key:"componentWillMount",value:function(){var e=this,t="/company/api/"+this.props.jobCompany+"/";_axios2.default.defaults.headers.common.Authorization="Bearer "+localStorage.getItem("token"),_axios2.default.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded",(0,_axios2.default)({method:"get",url:t,headers:{Authorization:"JWT "+localStorage.getItem("token"),Accept:"application/json"},responseType:"json"}).then(function(t){e.setState({company:t.data})}).catch(function(e){console.log("this is an error yo",e)})}},{key:"render",value:function(){return _react2.default.createElement("div",{className:"single-job-wrapper"},_react2.default.createElement("div",{className:"single-job"},_react2.default.createElement("div",{className:"front-list-title"},_react2.default.createElement("h2",null,this.props.jobTitle),this.state.company&&_react2.default.createElement("div",null,_react2.default.createElement("p",null,this.state.company.name))),_react2.default.createElement("div",{className:"front-list-middle"},_react2.default.createElement("p",null,this.props.jobSlug),_react2.default.createElement("div",{className:"front-list-details"},_react2.default.createElement("div",{className:"front-list-description-group"},_react2.default.createElement("i",{className:"far fa-clock front-list-icon"}),_react2.default.createElement("p",null,this.props.jobHours)),_react2.default.createElement("div",{className:"front-list-description-group"},_react2.default.createElement("i",{className:"fas fa-flask front-list-icon"}),_react2.default.createElement("p",null,this.props.jobArea)),_react2.default.createElement("div",{className:"front-list-description-group"},_react2.default.createElement("i",{className:"fas fa-map-marker-alt front-list-icon"}),_react2.default.createElement("p",null,this.props.jobLocation)),_react2.default.createElement("div",{className:"front-list-description-group"},_react2.default.createElement("i",{className:"fas fa-dollar-sign front-list-icon"}),_react2.default.createElement("p",null,this.props.jobSalary)))),_react2.default.createElement("div",{className:"front-listing-company-logo"},this.state.company&&_react2.default.createElement("img",{src:this.state.company.small_logo,alt:"company logo"}))),_react2.default.createElement("div",{className:"single-job-date-container"},_react2.default.createElement("p",null,"Posted: ",this.props.jobDate)))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),SingleJob}(_react2.default.Component),_default=SingleJob,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(SingleJob,"SingleJob","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/jobs/SingleJob.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/jobs/SingleJob.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";var r=n(248);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},function(e,t,n){"use strict";var r=n(18),o=n(249),a=n(247),i=n(246),u=n(245),l=n(96),s="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(244);e.exports=function(e){return new Promise(function(t,c){var f=e.data,p=e.headers;r.isFormData(f)&&delete p["Content-Type"];var d=new XMLHttpRequest,h="onreadystatechange",m=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||u(e.url)||(d=new window.XDomainRequest,h="onload",m=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var y=e.auth.username||"",_=e.auth.password||"";p.Authorization="Basic "+s(y+":"+_)}if(d.open(e.method.toUpperCase(),a(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[h]=function(){if(d&&(4===d.readyState||m)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?i(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:e,request:d};o(t,c,r),d=null}},d.onerror=function(){c(l("Network Error",e,null,d)),d=null},d.ontimeout=function(){c(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var g=n(243),v=(e.withCredentials||u(e.url))&&e.xsrfCookieName?g.read(e.xsrfCookieName):void 0;v&&(p[e.xsrfHeaderName]=v)}if("setRequestHeader"in d&&r.forEach(p,function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete p[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),c(e),d=null)}),void 0===f&&(f=null),d.send(f)})}},function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var l,s=[],c=!1,f=-1;function p(){c&&l&&(c=!1,l.length?s=l.concat(s):f=-1,s.length&&d())}function d(){if(!c){var e=u(p);c=!0;for(var t=s.length;t;){for(l=s,s=[];++f<t;)l&&l[f].run();f=-1,t=s.length}l=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||c||u(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,a=Object.getOwnPropertyDescriptor,i=Object.getPrototypeOf,u=i&&i(Object);return function l(s,c,f){if("string"!=typeof c){if(u){var p=i(c);p&&p!==u&&l(s,p,f)}var d=r(c);o&&(d=d.concat(o(c)));for(var h=0;h<d.length;++h){var m=d[h];if(!(e[m]||t[m]||f&&f[m])){var y=a(c,m);try{n(s,m,y)}catch(e){}}}return s}return s}}()},function(e,t,n){var r=n(254);e.exports=d,e.exports.parse=a,e.exports.compile=function(e,t){return u(a(e,t))},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,u="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(u+=e.slice(i,d),i=d+f.length,p)u+=p[1];else{var h=e[i],m=n[2],y=n[3],_=n[4],g=n[5],v=n[6],b=n[7];u&&(r.push(u),u="");var w=null!=m&&null!=h&&h!==m,E="+"===v||"*"===v,C="?"===v||"*"===v,S=n[2]||c,k=_||g;r.push({name:y||a++,prefix:m||"",delimiter:S,optional:C,repeat:E,partial:w,asterisk:!!b,pattern:k?s(k):b?".*":"[^"+l(S)+"]+?"})}}return i<e.length&&(u+=e.substr(i)),u&&r.push(u),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var a="",u=n||{},l=(o||{}).pretty?i:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,p=u[c.name];if(null==p){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=l(p[d]),!t[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===d?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(p).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):l(p),!t[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');a+=c.prefix+f}}else a+=c}return a}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",u=0;u<e.length;u++){var s=e[u];if("string"==typeof s)i+=l(s);else{var p=l(s.prefix),d="(?:"+s.pattern+")";t.push(s),s.repeat&&(d+="(?:"+p+d+")*"),i+=d=s.optional?s.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=l(n.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+i,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(d(e[o],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=s(n(3)),i=n(22),u=n(55),l=s(n(54));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e,t,n){return Math.min(Math.max(e,t),n)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,s=void 0===n?["/"]:n,f=e.initialIndex,p=void 0===f?0:f,d=e.keyLength,h=void 0===d?6:d,m=(0,l.default)(),y=function(e){o(E,e),E.length=E.entries.length,m.notifyListeners(E.location,E.action)},_=function(){return Math.random().toString(36).substr(2,h)},g=c(p,0,s.length-1),v=s.map(function(e){return"string"==typeof e?(0,u.createLocation)(e,void 0,_()):(0,u.createLocation)(e,void 0,e.key||_())}),b=i.createPath,w=function(e){var n=c(E.index+e,0,E.entries.length-1),r=E.entries[n];m.confirmTransitionTo(r,"POP",t,function(e){e?y({action:"POP",location:r,index:n}):y()})},E={length:v.length,action:"POP",location:v[g],index:g,entries:v,createHref:b,push:function(e,n){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,u.createLocation)(e,n,_(),E.location);m.confirmTransitionTo(o,"PUSH",t,function(e){if(e){var t=E.index+1,n=E.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),y({action:"PUSH",location:o,index:t,entries:n})}})},replace:function(e,n){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,u.createLocation)(e,n,_(),E.location);m.confirmTransitionTo(o,"REPLACE",t,function(e){e&&(E.entries[E.index]=o,y({action:"REPLACE",location:o}))})},go:w,goBack:function(){return w(-1)},goForward:function(){return w(1)},canGo:function(e){var t=E.index+e;return t>=0&&t<E.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return m.setPrompt(e)},listen:function(e){return m.appendListener(e)}};return E}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=c(n(3)),a=c(n(9)),i=n(55),u=n(22),l=c(n(54)),s=n(100);function c(e){return e&&e.__esModule?e:{default:e}}var f={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,u.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:u.stripLeadingSlash,decodePath:u.addLeadingSlash},slash:{encodePath:u.addLeadingSlash,decodePath:u.addLeadingSlash}},p=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},d=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(s.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,s.supportsGoWithoutReloadUsingHash)(),c=e.getUserConfirmation,h=void 0===c?s.getConfirmation:c,m=e.hashType,y=void 0===m?"slash":m,_=e.basename?(0,u.stripTrailingSlash)((0,u.addLeadingSlash)(e.basename)):"",g=f[y],v=g.encodePath,b=g.decodePath,w=function(){var e=b(p());return(0,o.default)(!_||(0,u.hasBasename)(e,_),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+_+'".'),_&&(e=(0,u.stripBasename)(e,_)),(0,i.createLocation)(e)},E=(0,l.default)(),C=function(e){r(A,e),A.length=t.length,E.notifyListeners(A.location,A.action)},S=!1,k=null,x=function(){var e=p(),t=v(e);if(e!==t)d(t);else{var n=w(),r=A.location;if(!S&&(0,i.locationsAreEqual)(r,n))return;if(k===(0,u.createPath)(n))return;k=null,O(n)}},O=function(e){S?(S=!1,C()):E.confirmTransitionTo(e,"POP",h,function(t){t?C({action:"POP",location:e}):T(e)})},T=function(e){var t=A.location,n=D.lastIndexOf((0,u.createPath)(t));-1===n&&(n=0);var r=D.lastIndexOf((0,u.createPath)(e));-1===r&&(r=0);var o=n-r;o&&(S=!0,N(o))},j=p(),R=v(j);j!==R&&d(R);var M=w(),D=[(0,u.createPath)(M)],N=function(e){(0,o.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},P=0,L=function(e){1===(P+=e)?(0,s.addEventListener)(window,"hashchange",x):0===P&&(0,s.removeEventListener)(window,"hashchange",x)},I=!1,A={length:t.length,action:"POP",location:M,createHref:function(e){return"#"+v(_+(0,u.createPath)(e))},push:function(e,t){(0,o.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,i.createLocation)(e,void 0,void 0,A.location);E.confirmTransitionTo(n,"PUSH",h,function(e){if(e){var t=(0,u.createPath)(n),r=v(_+t);if(p()!==r){k=t,function(e){window.location.hash=e}(r);var a=D.lastIndexOf((0,u.createPath)(A.location)),i=D.slice(0,-1===a?0:a+1);i.push(t),D=i,C({action:"PUSH",location:n})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),C()}})},replace:function(e,t){(0,o.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,i.createLocation)(e,void 0,void 0,A.location);E.confirmTransitionTo(n,"REPLACE",h,function(e){if(e){var t=(0,u.createPath)(n),r=v(_+t);p()!==r&&(k=t,d(r));var o=D.indexOf((0,u.createPath)(A.location));-1!==o&&(D[o]=t),C({action:"REPLACE",location:n})}})},go:N,goBack:function(){return N(-1)},goForward:function(){return N(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=E.setPrompt(e);return I||(L(1),I=!0),function(){return I&&(I=!1,L(-1)),t()}},listen:function(e){var t=E.appendListener(e);return L(1),function(){L(-1),t()}}};return A}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=f(n(3)),i=f(n(9)),u=n(55),l=n(22),s=f(n(54)),c=n(100);function f(e){return e&&e.__esModule?e:{default:e}}var p=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(c.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,c.supportsHistory)(),f=!(0,c.supportsPopStateOnHashChange)(),d=e.forceRefresh,h=void 0!==d&&d,m=e.getUserConfirmation,y=void 0===m?c.getConfirmation:m,_=e.keyLength,g=void 0===_?6:_,v=e.basename?(0,l.stripTrailingSlash)((0,l.addLeadingSlash)(e.basename)):"",b=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return(0,a.default)(!v||(0,l.hasBasename)(i,v),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+i+'" to begin with "'+v+'".'),v&&(i=(0,l.stripBasename)(i,v)),(0,u.createLocation)(i,r,n)},w=function(){return Math.random().toString(36).substr(2,g)},E=(0,s.default)(),C=function(e){o(I,e),I.length=t.length,E.notifyListeners(I.location,I.action)},S=function(e){(0,c.isExtraneousPopstateEvent)(e)||O(b(e.state))},k=function(){O(b(p()))},x=!1,O=function(e){x?(x=!1,C()):E.confirmTransitionTo(e,"POP",y,function(t){t?C({action:"POP",location:e}):T(e)})},T=function(e){var t=I.location,n=R.indexOf(t.key);-1===n&&(n=0);var r=R.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(x=!0,D(o))},j=b(p()),R=[j.key],M=function(e){return v+(0,l.createPath)(e)},D=function(e){t.go(e)},N=0,P=function(e){1===(N+=e)?((0,c.addEventListener)(window,"popstate",S),f&&(0,c.addEventListener)(window,"hashchange",k)):0===N&&((0,c.removeEventListener)(window,"popstate",S),f&&(0,c.removeEventListener)(window,"hashchange",k))},L=!1,I={length:t.length,action:"POP",location:j,createHref:M,push:function(e,o){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var i=(0,u.createLocation)(e,o,w(),I.location);E.confirmTransitionTo(i,"PUSH",y,function(e){if(e){var r=M(i),o=i.key,u=i.state;if(n)if(t.pushState({key:o,state:u},null,r),h)window.location.href=r;else{var l=R.indexOf(I.location.key),s=R.slice(0,-1===l?0:l+1);s.push(i.key),R=s,C({action:"PUSH",location:i})}else(0,a.default)(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,o){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var i=(0,u.createLocation)(e,o,w(),I.location);E.confirmTransitionTo(i,"REPLACE",y,function(e){if(e){var r=M(i),o=i.key,u=i.state;if(n)if(t.replaceState({key:o,state:u},null,r),h)window.location.replace(r);else{var l=R.indexOf(I.location.key);-1!==l&&(R[l]=i.key),C({action:"REPLACE",location:i})}else(0,a.default)(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:D,goBack:function(){return D(-1)},goForward:function(){return D(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=E.setPrompt(e);return L||(P(1),L=!0),function(){return L&&(L=!1,P(-1)),t()}},listen:function(e){var t=E.appendListener(e);return P(1),function(){P(-1),t()}}};return I}},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),_SingleDashboardJob=__webpack_require__(61),_SingleDashboardJob2=_interopRequireDefault(_SingleDashboardJob),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var CompaniesSection=function(_React$Component){function CompaniesSection(e){_classCallCheck(this,CompaniesSection);var t=_possibleConstructorReturn(this,(CompaniesSection.__proto__||Object.getPrototypeOf(CompaniesSection)).call(this,e));return t.state={allUserJobs:[]},t}return _inherits(CompaniesSection,_React$Component),_createClass(CompaniesSection,[{key:"componentWillMount",value:function(){var e=this;(0,_axios2.default)({method:"get",url:"/job/job/",headers:{Authorization:"Bearer "+localStorage.getItem("token")},responseType:"json"}).then(function(t){200===t.status&&e.setState({allUserJobs:t.data})}).catch(function(e){console.log("this is an error yo",e)})}},{key:"render",value:function(){return _react2.default.createElement("div",null,_react2.default.createElement("h1",null,"All User's Jobs"),this.state.allUserJobs?this.state.allUserJobs.map(function(e){return _react2.default.createElement(_SingleDashboardJob2.default,{id:e.id,area:e.area,created_date:e.created_date,description:e.description,experience:e.experience,hours:e.hours,location:e.location,posted_by_company:e.posted_by_company,salary:e.salary,slug:e.slug,title:e.title})}):_react2.default.createElement("p",null,"no"))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),CompaniesSection}(_react2.default.Component),_default=CompaniesSection,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(CompaniesSection,"CompaniesSection","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/jobs/JobsSection.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/jobs/JobsSection.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";(function(e){var n="undefined"!=typeof window&&window,r="undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,o=n||void 0!==e&&e||r;t.root=o,function(){if(!o)throw new Error("RxJS could not find any global context (window, self, global)")}()}).call(this,n(20))},function(e,t,n){"use strict";var r=n(108).root.Symbol;t.rxSubscriber="function"==typeof r&&"function"==typeof r.for?r.for("rxSubscriber"):"@@rxSubscriber",t.$$rxSubscriber=t.rxSubscriber},function(e,t,n){"use strict";t.empty={closed:!0,next:function(e){},error:function(e){throw e},complete:function(){}}},function(e,t,n){"use strict";var r=this&&this.__extends||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);function r(){this.constructor=e}e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},o=function(e){function t(t){e.call(this),this.errors=t;var n=Error.call(this,t?t.length+" errors occurred during unsubscription:\n  "+t.map(function(e,t){return t+1+") "+e.toString()}).join("\n  "):"");this.name=n.name="UnsubscriptionError",this.stack=n.stack,this.message=n.message}return r(t,e),t}(Error);t.UnsubscriptionError=o},function(e,t,n){"use strict";var r,o=n(59);function a(){try{return r.apply(this,arguments)}catch(e){return o.errorObject.e=e,o.errorObject}}t.tryCatch=function(e){return r=e,a}},function(e,t,n){"use strict";t.isObject=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){"use strict";t.isArray=Array.isArray||function(e){return e&&"number"==typeof e.length}},function(e,t,n){"use strict";var r=n(114),o=n(113),a=n(60),i=n(112),u=n(59),l=n(111),s=function(){function e(e){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,e&&(this._unsubscribe=e)}var t;return e.prototype.unsubscribe=function(){var e,t=!1;if(!this.closed){var n=this._parent,s=this._parents,f=this._unsubscribe,p=this._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var d=-1,h=s?s.length:0;n;)n.remove(this),n=++d<h&&s[d]||null;if(a.isFunction(f))i.tryCatch(f).call(this)===u.errorObject&&(t=!0,e=e||(u.errorObject.e instanceof l.UnsubscriptionError?c(u.errorObject.e.errors):[u.errorObject.e]));if(r.isArray(p))for(d=-1,h=p.length;++d<h;){var m=p[d];if(o.isObject(m))if(i.tryCatch(m.unsubscribe).call(m)===u.errorObject){t=!0,e=e||[];var y=u.errorObject.e;y instanceof l.UnsubscriptionError?e=e.concat(c(y.errors)):e.push(y)}}if(t)throw new l.UnsubscriptionError(e)}},e.prototype.add=function(t){if(!t||t===e.EMPTY)return e.EMPTY;if(t===this)return this;var n=t;switch(typeof t){case"function":n=new e(t);case"object":if(n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if("function"!=typeof n._addParent){var r=n;(n=new e)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}return(this._subscriptions||(this._subscriptions=[])).push(n),n._addParent(this),n},e.prototype.remove=function(e){var t=this._subscriptions;if(t){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}},e.prototype._addParent=function(e){var t=this._parent,n=this._parents;t&&t!==e?n?-1===n.indexOf(e)&&n.push(e):this._parents=[e]:this._parent=e},e.EMPTY=((t=new e).closed=!0,t),e}();function c(e){return e.reduce(function(e,t){return e.concat(t instanceof l.UnsubscriptionError?t.errors:t)},[])}t.Subscription=s},function(e,t,n){"use strict";var r=this&&this.__extends||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);function r(){this.constructor=e}e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},o=n(60),a=n(115),i=n(110),u=n(109),l=function(e){function t(t,n,r){switch(e.call(this),this.syncErrorValue=null,this.syncErrorThrown=!1,this.syncErrorThrowable=!1,this.isStopped=!1,arguments.length){case 0:this.destination=i.empty;break;case 1:if(!t){this.destination=i.empty;break}if("object"==typeof t){if(c(t)){var o=t[u.rxSubscriber]();this.syncErrorThrowable=o.syncErrorThrowable,this.destination=o,o.add(this)}else this.syncErrorThrowable=!0,this.destination=new s(this,t);break}default:this.syncErrorThrowable=!0,this.destination=new s(this,t,n,r)}}return r(t,e),t.prototype[u.rxSubscriber]=function(){return this},t.create=function(e,n,r){var o=new t(e,n,r);return o.syncErrorThrowable=!1,o},t.prototype.next=function(e){this.isStopped||this._next(e)},t.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this))},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){this.destination.error(e),this.unsubscribe()},t.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},t.prototype._unsubscribeAndRecycle=function(){var e=this._parent,t=this._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=e,this._parents=t,this},t}(a.Subscription);t.Subscriber=l;var s=function(e){function t(t,n,r,a){var u;e.call(this),this._parentSubscriber=t;var l=this;o.isFunction(n)?u=n:n&&(u=n.next,r=n.error,a=n.complete,n!==i.empty&&(l=Object.create(n),o.isFunction(l.unsubscribe)&&this.add(l.unsubscribe.bind(l)),l.unsubscribe=this.unsubscribe.bind(this))),this._context=l,this._next=u,this._error=r,this._complete=a}return r(t,e),t.prototype.next=function(e){if(!this.isStopped&&this._next){var t=this._parentSubscriber;t.syncErrorThrowable?this.__tryOrSetError(t,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}},t.prototype.error=function(e){if(!this.isStopped){var t=this._parentSubscriber;if(this._error)t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,e),this.unsubscribe()):(this.__tryOrUnsub(this._error,e),this.unsubscribe());else{if(!t.syncErrorThrowable)throw this.unsubscribe(),e;t.syncErrorValue=e,t.syncErrorThrown=!0,this.unsubscribe()}}},t.prototype.complete=function(){var e=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var n=function(){return e._complete.call(e._context)};t.syncErrorThrowable?(this.__tryOrSetError(t,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},t.prototype.__tryOrUnsub=function(e,t){try{e.call(this._context,t)}catch(e){throw this.unsubscribe(),e}},t.prototype.__tryOrSetError=function(e,t,n){try{t.call(this._context,n)}catch(t){return e.syncErrorValue=t,e.syncErrorThrown=!0,!0}return!1},t.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe()},t}(l);function c(e){return e instanceof l||"syncErrorThrowable"in e&&e[u.rxSubscriber]}},function(e,t,n){"use strict";var r=this&&this.__extends||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);function r(){this.constructor=e}e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},o=n(116);t.filter=function(e,t){return function(n){return n.lift(new a(e,t))}};var a=function(){function e(e,t){this.predicate=e,this.thisArg=t}return e.prototype.call=function(e,t){return t.subscribe(new i(e,this.predicate,this.thisArg))},e}(),i=function(e){function t(t,n,r){e.call(this,t),this.predicate=n,this.thisArg=r,this.count=0}return r(t,e),t.prototype._next=function(e){var t;try{t=this.predicate.call(this.thisArg,e,this.count++)}catch(e){return void this.destination.error(e)}t&&this.destination.next(e)},t}(o.Subscriber)},function(e,t,n){"use strict";var r=n(117);t.filter=function(e,t){return r.filter(e,t)(this)}},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),_SingleDashboardJob=__webpack_require__(61),_SingleDashboardJob2=_interopRequireDefault(_SingleDashboardJob),_reactRouterDom=__webpack_require__(11),_filter=__webpack_require__(118),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var Company=function(_React$Component){function Company(e){_classCallCheck(this,Company);var t=_possibleConstructorReturn(this,(Company.__proto__||Object.getPrototypeOf(Company)).call(this,e));return t.viewExistingCompany=t.viewExistingCompany.bind(t),t.filterJobs=t.filterJobs.bind(t),t.state={viewCompanyModalIsOpen:!1,companyInfo:t.props.companyInfo,companyDescription:t.props.companyDescription,companyId:t.props.companyId,allJobs:[],filteredJobs:[],userCompanies:t.props.userCompanies,companyName:t.props.companyName},t}return _inherits(Company,_React$Component),_createClass(Company,[{key:"componentWillMount",value:function(){var e=this;(0,_axios2.default)({method:"get",url:"/job/job/",headers:{Authorization:"JWT "+localStorage.getItem("token")},responseType:"json"}).then(function(t){200===t.status&&e.setState({allJobs:t.data})}).then(function(){var t=e.state.allJobs.filter(function(t){return t.posted_by_company==e.state.companyId});e.setState({filteredJobs:t})}).catch(function(e){console.log("this is an error yo",e)})}},{key:"viewExistingCompany",value:function(){this.setState({viewCompanyModalIsOpen:!0}),console.log("open company modal")}},{key:"filterJobs",value:function(e){var t=this;e.preventDefault();var n=this.state.allJobs.filter(function(e){return e.posted_by_company==t.state.companyId});this.setState({filteredJobs:n})}},{key:"render",value:function(){var e=this;return _react2.default.createElement("div",{className:"single-company"},_react2.default.createElement("div",{className:"company-header"},_react2.default.createElement("div",{className:"company-header-title"},_react2.default.createElement("h2",null,this.state.companyInfo.name)),_react2.default.createElement("div",{className:"button-container"},_react2.default.createElement(_reactRouterDom.Link,{to:{pathname:"/new_job",state:{companiesFromLink:this.state.userCompanies}}},_react2.default.createElement("button",{className:"add-job-to-company-button"},"Add new job for this company"))),_react2.default.createElement("div",{className:"button-container"},_react2.default.createElement(_reactRouterDom.Link,{to:"/view_company/"+this.state.companyId},_react2.default.createElement("button",{className:"view-company-button"},"View Company Page")))),_react2.default.createElement("section",null,_react2.default.createElement("div",{className:"company-postings-title"},_react2.default.createElement("h1",null,"Job Postings for ",this.state.companyInfo.name)),this.state.filteredJobs?this.state.filteredJobs.map(function(t){return _react2.default.createElement(_SingleDashboardJob2.default,{title:t.title,companyName:e.state.companyName,area:t.area,created_date:t.created_date,description:t.description,experience:t.experience,hours:t.hours,location:t.location,posted_by_company:t.posted_by_company,salary:t.salary,slug:t.slug,id:t.id,userCompanies:e.state.userCompanies})}):_react2.default.createElement("p",null,"no")))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Company}(_react2.default.Component),_default=Company,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(Company,"Company","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/companies/Company.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/companies/Company.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_Company=__webpack_require__(119),_Company2=_interopRequireDefault(_Company),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),_reactRouterDom=__webpack_require__(11),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var CompaniesSection=function(_React$Component){function CompaniesSection(e){_classCallCheck(this,CompaniesSection);var t=_possibleConstructorReturn(this,(CompaniesSection.__proto__||Object.getPrototypeOf(CompaniesSection)).call(this,e));return t.state={companies:[]},t}return _inherits(CompaniesSection,_React$Component),_createClass(CompaniesSection,[{key:"componentWillMount",value:function(){var e=this;(0,_axios2.default)({method:"get",url:"/company/company/",data:{},headers:{Authorization:"JWT "+localStorage.getItem("token")},responseType:"json"}).then(function(t){200===t.status&&e.setState({companies:t.data})}).catch(function(e){console.log("this is an error yo",e)})}},{key:"render",value:function(){var e=this;return _react2.default.createElement("section",{id:"companies-section"},_react2.default.createElement("div",{id:"companies-section-inner"},_react2.default.createElement("div",{id:"create-new-company-container"},_react2.default.createElement("div",{id:"create-new-company-title"},_react2.default.createElement("h1",null,"Your Companies")),_react2.default.createElement("div",{id:"create-new-company-link-container"},_react2.default.createElement(_reactRouterDom.Link,{to:"/new_company"},_react2.default.createElement("button",{id:"create-new-company-button"},"Create a New Company")))),this.state.companies?this.state.companies.map(function(t){return _react2.default.createElement(_Company2.default,{companyName:t.name,companyId:t.id,companyDescription:t.description,companyInfo:t,userCompanies:e.state.companies})}):_react2.default.createElement("p",null)))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),CompaniesSection}(_react2.default.Component),_default=CompaniesSection,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(CompaniesSection,"CompaniesSection","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/companies/CompaniesSection.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/companies/CompaniesSection.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(8),_reactDom2=_interopRequireDefault(_reactDom),_Header=__webpack_require__(14),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(13),_Footer2=_interopRequireDefault(_Footer),_CompaniesSection=__webpack_require__(120),_CompaniesSection2=_interopRequireDefault(_CompaniesSection),_JobsSection=__webpack_require__(107),_JobsSection2=_interopRequireDefault(_JobsSection),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),_reactRouterDom=__webpack_require__(11),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var EmployerDashboard=function(_React$Component){function EmployerDashboard(e){_classCallCheck(this,EmployerDashboard);var t=_possibleConstructorReturn(this,(EmployerDashboard.__proto__||Object.getPrototypeOf(EmployerDashboard)).call(this,e));t.handleLogOut=t.handleLogOut.bind(t);var n=localStorage.getItem("token"),r=localStorage.getItem("email"),o=localStorage.getItem("first_name"),a=localStorage.getItem("last_name");return t.handleFirstNameChange=t.handleFirstNameChange.bind(t),t.handleLastNameChange=t.handleLastNameChange.bind(t),t.handleEmailChange=t.handleEmailChange.bind(t),t.submitProfileChange=t.submitProfileChange.bind(t),t.state={redirectToHome:!1,first_name:o,last_name:a,email:r,token:n,returnedResponse:null,saveChanges:!1,pk:null},t}return _inherits(EmployerDashboard,_React$Component),_createClass(EmployerDashboard,[{key:"componentWillMount",value:function(){var e=this;_axios2.default.defaults.xsrfCookieName="csrftoken",_axios2.default.defaults.xsrfHeaderName="X-CSRFToken";var t=localStorage.getItem("token");(0,_axios2.default)({method:"get",url:"/authenticate/current_user/",headers:{Authorization:"JWT "+t},responseType:"json"}).then(function(t){console.log(" componentWillMount, authenticate/current_user response:",t.data),200===t.status&&(e.setState({returnedResponse:t.data,first_name:t.data.first_name,last_name:t.data.last_name,token:t.data.token,pk:t.data.pk}),localStorage.setItem("first_name",t.data.first_name),localStorage.setItem("last_name",t.data.last_name),localStorage.setItem("token",t.data.token),localStorage.setItem("pk",t.data.pk),localStorage.setItem("tokenIsValid",!0))}).catch(function(t){console.log("this is an error yo",t),localStorage.clear(),e.setState({redirectToHome:!0})})}},{key:"handleFirstNameChange",value:function(e){this.setState({first_name:e.target.value,saveChanges:!0})}},{key:"handleLastNameChange",value:function(e){this.setState({last_name:e.target.value,saveChanges:!0})}},{key:"handleEmailChange",value:function(e){this.setState({email:e.target.value,saveChanges:!0})}},{key:"handleLogOut",value:function(){localStorage.clear(),this.setState({redirectToHome:!0})}},{key:"submitProfileChange",value:function(e){var t=this;e.preventDefault(),console.log("submitting profile changes");var n=localStorage.getItem("token"),r="/authenticate/users/"+this.state.pk+"/";(0,_axios2.default)({method:"put",url:r,data:{first_name:this.state.first_name,last_name:this.state.last_name,email:this.state.email},headers:{Authorization:"JWT "+n},responseType:"json"}).then(function(e){t.setState({returnedResponse:e}),200===e.status&&(t.setState({first_name:e.data.first_name,last_name:e.data.last_name,email:e.data.email,token:e.data.token,pk:e.data.pk}),localStorage.setItem("first_name",e.data.first_name),localStorage.setItem("last_name",e.data.last_name),localStorage.setItem("email",e.data.email),localStorage.setItem("token",e.data.token),localStorage.setItem("pk",e.data.pk),localStorage.setItem("tokenIsValid",!0))}).catch(function(e){console.log("this is an error yo",e),localStorage.clear(),t.setState({redirectToHome:!0})})}},{key:"render",value:function(){return this.state.redirectToHome?_react2.default.createElement(_reactRouterDom.Redirect,{to:"/"}):_react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null),_react2.default.createElement("div",{id:"employer-wrapper"},_react2.default.createElement("div",{id:"employer-inner-wrapper"},_react2.default.createElement("div",{id:"logout"},_react2.default.createElement("button",{id:"logout-button",onClick:this.handleLogOut},"Logout")),_react2.default.createElement("section",{id:"profile-section"},_react2.default.createElement("div",{id:"profile-section-inner"},_react2.default.createElement("h1",null,"Profile"),_react2.default.createElement("form",{onSubmit:this.submitProfileChange},_react2.default.createElement("section",{className:"profile-attribute"},_react2.default.createElement("div",{className:"profile-section-label"},_react2.default.createElement("p",null,"First Name:")),_react2.default.createElement("div",{className:"profile-section-value"},_react2.default.createElement("input",{value:this.state.first_name,onChange:this.handleFirstNameChange}))),_react2.default.createElement("section",{className:"profile-attribute"},_react2.default.createElement("div",{className:"profile-section-label"},_react2.default.createElement("p",null,"Surname:")),_react2.default.createElement("div",{className:"profile-section-value"},_react2.default.createElement("input",{value:this.state.last_name,onChange:this.handleLastNameChange}))),_react2.default.createElement("section",{className:"profile-attribute"},_react2.default.createElement("div",{className:"profile-section-label"},_react2.default.createElement("p",null,"Email:")),_react2.default.createElement("div",{className:"profile-section-value"},_react2.default.createElement("input",{value:this.state.email,onChange:this.handleEmailChange}))),1==this.state.saveChanges&&_react2.default.createElement("section",{id:"profile-save-changes"},_react2.default.createElement("input",{type:"submit"}))))),_react2.default.createElement(_CompaniesSection2.default,null))),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),EmployerDashboard}(_react2.default.Component),_default=EmployerDashboard,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(EmployerDashboard,"EmployerDashboard","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/EmployerDashboard.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/EmployerDashboard.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(8),_reactDom2=_interopRequireDefault(_reactDom),_Header=__webpack_require__(14),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(13),_Footer2=_interopRequireDefault(_Footer),_JobsPage=__webpack_require__(25),_JobsPage2=_interopRequireDefault(_JobsPage),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var EmployeeDashboard=function(_React$Component){function EmployeeDashboard(e){_classCallCheck(this,EmployeeDashboard);var t=_possibleConstructorReturn(this,(EmployeeDashboard.__proto__||Object.getPrototypeOf(EmployeeDashboard)).call(this,e)),n=localStorage.getItem("responseToken"),r=localStorage.getItem("responseEmail");return t.state={firstName:t.props.first_name,lastName:t.props.last_name,email:r,token:n},t}return _inherits(EmployeeDashboard,_React$Component),_createClass(EmployeeDashboard,[{key:"render",value:function(){return _react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null),_react2.default.createElement("div",{id:"employer-wrapper"},_react2.default.createElement("h1",null,"Employee Dashboard"),_react2.default.createElement("section",null,_react2.default.createElement("h1",null,"Profile:"),_react2.default.createElement("p",null,"Firstname: ",this.state.firstName),_react2.default.createElement("p",null,"Surname: ",this.state.lastName),_react2.default.createElement("p",null,"Email: ",this.state.email),_react2.default.createElement("p",null,"Token: ",this.state.token," "))),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),EmployeeDashboard}(_react2.default.Component),_default=EmployeeDashboard,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(EmployeeDashboard,"EmployeeDashboard","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/EmployeeDashboard.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/EmployeeDashboard.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(8),_reactDom2=_interopRequireDefault(_reactDom),_Header=__webpack_require__(14),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(13),_Footer2=_interopRequireDefault(_Footer),_JobsPage=__webpack_require__(25),_JobsPage2=_interopRequireDefault(_JobsPage),_Login=__webpack_require__(62),_Login2=_interopRequireDefault(_Login),_Register=__webpack_require__(63),_Register2=_interopRequireDefault(_Register),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var MyAccount=function(_React$Component){function MyAccount(e){_classCallCheck(this,MyAccount);var t=_possibleConstructorReturn(this,(MyAccount.__proto__||Object.getPrototypeOf(MyAccount)).call(this,e)),n=localStorage.getItem("token");return t.showLogin=t.showLogin.bind(t),t.showRegister=t.showRegister.bind(t),t.state={token:n,showTab:"login"},t}return _inherits(MyAccount,_React$Component),_createClass(MyAccount,[{key:"showLogin",value:function(){this.setState({showTab:"login"}),console.log("showlogin")}},{key:"showRegister",value:function(){this.setState({showTab:"register"}),console.log("showRegister")}},{key:"render",value:function(){return _react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null),_react2.default.createElement("div",{id:"my-account-container"},_react2.default.createElement("div",{id:"login-register-tabs"},_react2.default.createElement("div",{onClick:this.showLogin,className:"account-tab",id:"login-tab"},_react2.default.createElement("h2",null,"Login")),_react2.default.createElement("div",{onClick:this.showRegister,className:"account-tab",id:"register-tab"},_react2.default.createElement("h2",null,"Register"))),"login"==this.state.showTab?_react2.default.createElement(_Login2.default,null):_react2.default.createElement(_Register2.default,null)),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MyAccount}(_react2.default.Component),_default=MyAccount,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(MyAccount,"MyAccount","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/MyAccount.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/MyAccount.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r,o=u(n(1)),a=(u(n(8)),u(n(14))),i=u(n(13));u(n(25));function u(e){return e&&e.__esModule?e:{default:e}}function l(e){return console.log(e),o.default.createElement("div",null,o.default.createElement(a.default,null,e.children),o.default.createElement("div",{id:"contact-outer-wrapper"},o.default.createElement("div",{id:"contact-inner-wrapper"},o.default.createElement("div",{id:"contact-title"},o.default.createElement("h1",null,"Contact")),o.default.createElement("div",null,o.default.createElement("h2",null,"Adding a job listing"),o.default.createElement("p",null,"To add a job post to the site, please register for a new account by hitting the register/login button"),o.default.createElement("p",null,"Get started by creating a new company. This allows you to create multiple job posts for each company, re-using the same company details"),o.default.createElement("p",null,"All fields should be completed including:"),o.default.createElement("ul",null,o.default.createElement("li",null,o.default.createElement("p",null,"Role being advertised")),o.default.createElement("li",null,o.default.createElement("p",null,"Tagline (1 short sentence displayed on job listing page)")),o.default.createElement("li",null,o.default.createElement("p",null,"Hours: full-time or part-time")),o.default.createElement("li",null,o.default.createElement("p",null,"Area: Front-end, Full-stack, Designer etc")),o.default.createElement("li",null,o.default.createElement("p",null,"Location")),o.default.createElement("li",null,o.default.createElement("p",null,"Salary")),o.default.createElement("li",null,o.default.createElement("p",null,"Full job description - please make this as accurate as possible"))),o.default.createElement("h2",null,"Additional notes"),o.default.createElement("p",null,"We're happy to post internships, but these must be paid internships. Any unpaid interships will be removed."),o.default.createElement("p",null,"You're also welcome to post contract/freelance projects."),o.default.createElement("p",null,"Please remember to include details of how to apply for the post.")),o.default.createElement("div",{id:"contact-details"},o.default.createElement("h2",null,"Contact Us"),o.default.createElement("p",null,"Find us on twitter: ",o.default.createElement("a",{href:"https://twitter.com/nextstep_online"},o.default.createElement("i",{class:"fab fa-twitter twitter"}),"@nextstep_online")),o.default.createElement("p",null,"Reach out by email: marilyn@thenextstep.io")))),o.default.createElement(i.default,null))}(r=n(2).enterModule)&&r(e);var s,c,f=l;t.default=f,s=n(2).default,c=n(2).leaveModule,s&&(s.register(l,"Contact","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Contact.js"),s.register(f,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Contact.js"),c(e))}).call(this,n(7)(e))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(8),_reactDom2=_interopRequireDefault(_reactDom),_Header=__webpack_require__(14),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(13),_Footer2=_interopRequireDefault(_Footer),_JobsPage=__webpack_require__(25),_JobsPage2=_interopRequireDefault(_JobsPage),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var About=function(_React$Component){function About(){return _classCallCheck(this,About),_possibleConstructorReturn(this,(About.__proto__||Object.getPrototypeOf(About)).apply(this,arguments))}return _inherits(About,_React$Component),_createClass(About,[{key:"render",value:function(){return _react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null,this.props.children),_react2.default.createElement("h1",null,"About"),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),About}(_react2.default.Component),_default=About,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(About,"About","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/About.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/About.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(8),_reactDom2=_interopRequireDefault(_reactDom),_Header=__webpack_require__(14),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(13),_Footer2=_interopRequireDefault(_Footer),_JobsPage=__webpack_require__(25),_JobsPage2=_interopRequireDefault(_JobsPage),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var Home=function(_React$Component){function Home(){return _classCallCheck(this,Home),_possibleConstructorReturn(this,(Home.__proto__||Object.getPrototypeOf(Home)).apply(this,arguments))}return _inherits(Home,_React$Component),_createClass(Home,[{key:"render",value:function(){return _react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null,this.props.children),_react2.default.createElement(_JobsPage2.default,null),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Home}(_react2.default.Component),_default=Home,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(Home,"Home","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Home.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Home.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),_draftJs=__webpack_require__(30),_draftJsExportHtml=__webpack_require__(41),_Header=__webpack_require__(14),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(13),_Footer2=_interopRequireDefault(_Footer),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module),_axios2.default.defaults.xsrfCookieName="csrftoken",_axios2.default.defaults.xsrfHeaderName="X-CSRFToken";var ViewJobPage=function(_React$Component){function ViewJobPage(e){_classCallCheck(this,ViewJobPage);var t=_possibleConstructorReturn(this,(ViewJobPage.__proto__||Object.getPrototypeOf(ViewJobPage)).call(this,e)),n=localStorage.getItem("token");t.enableEditMode=t.enableEditMode.bind(t),t.enableViewMode=t.enableViewMode.bind(t),t.deleteJob=t.deleteJob.bind(t),t.submitJobChanges=t.submitJobChanges.bind(t),t.updateJobArea=t.updateJobArea.bind(t),t.updateJobExperience=t.updateJobExperience.bind(t),t.updateJobHours=t.updateJobHours.bind(t),t.updateJobLocation=t.updateJobLocation.bind(t),t.updateJobSalary=t.updateJobSalary.bind(t),t.updateJobSlug=t.updateJobSlug.bind(t),t.updateJobTitle=t.updateJobTitle.bind(t),t.updatePostedByCompany=t.updatePostedByCompany.bind(t),t.onChange=t.onChange.bind(t),t.handleKeyCommand=t.handleKeyCommand.bind(t),t.onUnderlineClick=t.onUnderlineClick.bind(t),t.onBoldClick=t.onBoldClick.bind(t),t.onItalicClick=t.onItalicClick.bind(t),t.onMediumClick=t.onMediumClick.bind(t),t.onLargeClick=t.onLargeClick.bind(t),t.onLeftAlignClick=t.onLeftAlignClick.bind(t),t.onRightAlignClick=t.onRightAlignClick.bind(t),t.onJustifyClick=t.onJustifyClick.bind(t),t.onOrderedListClick=t.onOrderedListClick.bind(t),t.onUnorderedListClick=t.onOrderedListClick.bind(t);var r=t.props.location.state.userCompanies,o=t.props.location.state.companyName;return t.state={id:t.props.match.params.id,token:n,viewMode:!0,editMode:!1,jobInfo:{},jobArea:"",jobExperience:"",jobHours:"",jobLocation:"",jobSalary:"",jobSlug:"",jobTitle:"",posted_by_company:"",userCompanies:r,companyName:o},t}return _inherits(ViewJobPage,_React$Component),_createClass(ViewJobPage,[{key:"componentWillMount",value:function(){var e=this,t="/job/job/"+this.state.id+"/";_axios2.default.defaults.headers.common.Authorization="JWT "+localStorage.getItem("token"),_axios2.default.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded",(0,_axios2.default)({method:"get",url:t,headers:{Authorization:"JWT "+localStorage.getItem("token"),Accept:"application/json"},responseType:"json"}).then(function(t){if(200===t.status){var n=t.data.description,r=JSON.parse(n),o=(0,_draftJs.convertFromRaw)(r);e.setState({jobInfo:t.data,editorState:_draftJs.EditorState.createWithContent(o),jobArea:t.data.area,jobExperience:t.data.experience,jobHours:t.data.hours,jobLocation:t.data.location,jobSalary:t.data.salary,jobSlug:t.data.slug,jobTitle:t.data.title,posted_by_company:t.data.posted_by_company}),console.log("response from company",t.data)}}).then(function(){var t=e.state.editorState.getCurrentContent(),n=(0,_draftJsExportHtml.stateToHTML)(t),r={__html:n};e.setState({html:n,outputHtml:r})}).catch(function(e){console.log("this is an error yo",e)})}},{key:"onChange",value:function(e){this.setState({editorState:e,stringifiedContent:JSON.stringify((0,_draftJs.convertToRaw)(e.getCurrentContent()))});var t=e.getCurrentContent();console.log("content state",(0,_draftJs.convertToRaw)(t))}},{key:"enableEditMode",value:function(){this.setState({viewMode:!1,editMode:!0})}},{key:"enableViewMode",value:function(){this.setState({viewMode:!0,editMode:!1})}},{key:"updateJobArea",value:function(e){this.setState({jobArea:e.target.value})}},{key:"updateJobExperience",value:function(e){this.setState({jobExperience:e.target.value})}},{key:"updateJobHours",value:function(e){this.setState({jobHours:e.target.value})}},{key:"updateJobLocation",value:function(e){this.setState({jobLocation:e.target.value})}},{key:"updateJobSalary",value:function(e){this.setState({jobSalary:e.target.value})}},{key:"updateJobSlug",value:function(e){this.setState({jobSlug:e.target.value})}},{key:"updateJobTitle",value:function(e){this.setState({jobTitle:e.target.value})}},{key:"updatePostedByCompany",value:function(e){this.setState({posted_by_company:e.target.value})}},{key:"handleKeyCommand",value:function(e){var t=_draftJs.RichUtils.handleKeyCommand(this.state.editorState,e);return t?(this.onChange(t),"handled"):"not-handled"}},{key:"onUnderlineClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onBoldClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"BOLD"))}},{key:"onItalicClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"ITALIC"))}},{key:"onMediumClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onLargeClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onLeftAlignClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onRightAlignClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onJustifyClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onOrderedListClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onUnorderedListClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"deleteJob",value:function(e){e.preventDefault();var t="/job/job/"+this.state.id+"/";_axios2.default.defaults.headers.common.Authorization="JWT "+localStorage.getItem("token"),_axios2.default.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded",(0,_axios2.default)({method:"delete",url:t,headers:{Authorization:"JWT "+localStorage.getItem("token"),Accept:"application/json"},responseType:"json"}).then(function(e){}).then(function(){}).catch(function(e){console.log("this is an error yo",e)})}},{key:"submitJobChanges",value:function(e){e.preventDefault();var t="/job/job/"+this.state.id+"/";_axios2.default.defaults.headers.common.Authorization="JWT "+localStorage.getItem("token"),console.log("Bearer "+localStorage.getItem("token")),_axios2.default.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded";var n=JSON.stringify((0,_draftJs.convertToRaw)(this.state.editorState.getCurrentContent()));(0,_axios2.default)({method:"put",url:t,data:{area:this.state.jobArea,description:n,experience:this.state.jobExperience,hours:this.state.jobHours,location:this.state.jobLocation,salary:this.state.jobSalary,slug:this.state.jobSlug,title:this.state.jobTitle,posted_by_company:parseInt(this.state.posted_by_company)},headers:{Authorization:"JWT "+localStorage.getItem("token"),Accept:"application/json"},responseType:"json"}).then(function(e){e.status}).catch(function(e){console.log("this is an error yo",e)})}},{key:"render",value:function(){return _react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null),_react2.default.createElement("div",{id:"view-job-wrapper"},this.state.viewMode&&_react2.default.createElement("section",null,_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Posted By Company:")),_react2.default.createElement("div",{className:"edit-job-value"},_react2.default.createElement("p",null,this.state.companyName))),_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Job Title:")),_react2.default.createElement("div",{className:"edit-job-value"},_react2.default.createElement("p",null,this.state.jobTitle))),_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Job Area:")),_react2.default.createElement("div",{className:"edit-job-value"},_react2.default.createElement("p",null,this.state.jobArea))),_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Job Experience:")),_react2.default.createElement("div",{className:"edit-job-value"},_react2.default.createElement("p",null,this.state.jobExperience))),_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Job Hours:")),_react2.default.createElement("div",{className:"edit-job-value"},_react2.default.createElement("p",null,this.state.jobHours))),_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Job Location:")),_react2.default.createElement("div",{className:"edit-job-value"},_react2.default.createElement("p",null,this.state.jobLocation))),_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Job Salary:")),_react2.default.createElement("div",{className:"edit-job-value"},_react2.default.createElement("p",null,this.state.jobSalary))),_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Job Slug:")),_react2.default.createElement("div",{className:"edit-job-value"},_react2.default.createElement("p",null,this.state.jobSlug))),_react2.default.createElement("section",null,_react2.default.createElement("div",{className:"job-description-title"},_react2.default.createElement("h3",null,"Job Description")),_react2.default.createElement("div",{dangerouslySetInnerHTML:this.state.outputHtml}),_react2.default.createElement("section",{id:"edit-job-button-container"},_react2.default.createElement("button",{onClick:this.enableEditMode,type:"button"},"Edit Job")))),this.state.editMode&&_react2.default.createElement("div",null,_react2.default.createElement("form",{onSubmit:this.submitJobChanges},_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Choose company to list job for:")),_react2.default.createElement("div",{className:"edit-job-input-value"},_react2.default.createElement("select",{id:"company-select",value:this.state.posted_by_company,onChange:this.updatePostedByCompany},this.state.userCompanies.map(function(e){return _react2.default.createElement("option",{value:e.id},e.name," ")})))),_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Job Area:")),_react2.default.createElement("div",{className:"edit-job-input-value"},_react2.default.createElement("input",{type:"text",id:"edit-job-modal-job-area",value:this.state.jobArea,onChange:this.updateJobArea}))),_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Experience:")),_react2.default.createElement("div",{className:"edit-job-input-value"},_react2.default.createElement("input",{type:"text",id:"edit-job-modal-job-experience",value:this.state.jobExperience,onChange:this.updateJobExperience}))),_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Hours:")),_react2.default.createElement("div",{className:"edit-job-input-value"},_react2.default.createElement("input",{type:"text",id:"edit-job-modal-job-hours",value:this.state.jobHours,onChange:this.updateJobHours}))),_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Location:")),_react2.default.createElement("div",{className:"edit-job-input-value"},_react2.default.createElement("input",{type:"text",id:"edit-job-modal-job-location",value:this.state.jobLocation,onChange:this.updateJobLocation}))),_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Salary:")),_react2.default.createElement("div",{className:"edit-job-input-value"},_react2.default.createElement("input",{type:"text",id:"edit-job-modal-job-salary",value:this.state.jobSalary,onChange:this.updateJobSalary}))),_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Slug:")),_react2.default.createElement("div",{className:"edit-job-input-value"},_react2.default.createElement("input",{type:"text",id:"edit-job-modal-job-slug",value:this.state.jobSlug,onChange:this.updateJobSlug}))),_react2.default.createElement("section",{className:"edit-job-section"},_react2.default.createElement("div",{className:"edit-job-label"},_react2.default.createElement("p",null,"Job Title:")),_react2.default.createElement("div",{className:"edit-job-input-value"},_react2.default.createElement("input",{type:"text",id:"edit-job-modal-job-title",value:this.state.jobTitle,onChange:this.updateJobTitle}))),_react2.default.createElement("section",null,_react2.default.createElement("section",{className:"job-description-title"},_react2.default.createElement("h1",null,"Job Description")),_react2.default.createElement("section",{id:"editor-buttons"},_react2.default.createElement("button",{onClick:this.onUnderlineClick,type:"button",className:"editor-button"},_react2.default.createElement("i",{class:"fas fa-underline"})),_react2.default.createElement("button",{onClick:this.onBoldClick,type:"button",className:"editor-button"},_react2.default.createElement("i",{class:"fas fa-bold"})),_react2.default.createElement("button",{onClick:this.onItalicClick,type:"button",className:"editor-button"},_react2.default.createElement("i",{class:"fas fa-italic"}))),_react2.default.createElement("section",{id:"edit-job-editor"},_react2.default.createElement(_draftJs.Editor,{editorState:this.state.editorState,handleKeyCommand:this.handleKeyCommand,onChange:this.onChange}))),_react2.default.createElement("section",{id:"edit-job-submit-container"},_react2.default.createElement("input",{type:"submit"}))),_react2.default.createElement("section",{id:"edit-cancel-delete"},_react2.default.createElement("button",{onClick:this.enableViewMode,id:"cancel-edit-changes"},"Cancel Changes"),_react2.default.createElement("button",{onClick:this.deleteJob,type:"button",id:"delete-edit"},"Delete Job")))),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),ViewJobPage}(_react2.default.Component),_default=ViewJobPage,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(ViewJobPage,"ViewJobPage","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/jobs/ViewJobPage.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/jobs/ViewJobPage.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactModal=__webpack_require__(67),_reactModal2=_interopRequireDefault(_reactModal),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),_draftJs=__webpack_require__(30),_reactRouterDom=__webpack_require__(11),_Header=__webpack_require__(14),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(13),_Footer2=_interopRequireDefault(_Footer),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module),_axios2.default.defaults.xsrfCookieName="csrftoken",_axios2.default.defaults.xsrfHeaderName="X-CSRFToken";var NewJobPage=function(_React$Component){function NewJobPage(e){_classCallCheck(this,NewJobPage);var t=_possibleConstructorReturn(this,(NewJobPage.__proto__||Object.getPrototypeOf(NewJobPage)).call(this,e)),n=localStorage.getItem("token");t.updateJobArea=t.updateJobArea.bind(t),t.updateJobExperience=t.updateJobExperience.bind(t),t.updateJobHours=t.updateJobHours.bind(t),t.updateJobLocation=t.updateJobLocation.bind(t),t.updateJobSalary=t.updateJobSalary.bind(t),t.updateJobSlug=t.updateJobSlug.bind(t),t.updateJobTitle=t.updateJobTitle.bind(t),t.updatePostedByCompany=t.updatePostedByCompany.bind(t),t.submitNewJob=t.submitNewJob.bind(t),t.onChange=t.onChange.bind(t),t.handleKeyCommand=t.handleKeyCommand.bind(t),t.onUnderlineClick=t.onUnderlineClick.bind(t),t.onBoldClick=t.onBoldClick.bind(t),t.onItalicClick=t.onItalicClick.bind(t),t.onMediumClick=t.onMediumClick.bind(t),t.onLargeClick=t.onLargeClick.bind(t),t.onLeftAlignClick=t.onLeftAlignClick.bind(t),t.onRightAlignClick=t.onRightAlignClick.bind(t),t.onJustifyClick=t.onJustifyClick.bind(t),t.onOrderedListClick=t.onOrderedListClick.bind(t),t.onUnorderedListClick=t.onOrderedListClick.bind(t);var r=t.props.location.state.companiesFromLink;t.props.location.state.posted_by_company;return t.state={jobArea:"",jobExperience:"",jobHours:"",jobLocation:"",jobSalary:"",jobSlug:"",jobTitle:"",token:n,editorState:_draftJs.EditorState.createEmpty(),availableCompanies:r,posted_by_company:r[0].id,redirectToDashboard:!1,formError:""},t}return _inherits(NewJobPage,_React$Component),_createClass(NewJobPage,[{key:"updateJobArea",value:function(e){this.setState({jobArea:e.target.value})}},{key:"updateJobExperience",value:function(e){this.setState({jobExperience:e.target.value})}},{key:"updateJobHours",value:function(e){this.setState({jobHours:e.target.value})}},{key:"updateJobLocation",value:function(e){this.setState({jobLocation:e.target.value})}},{key:"updateJobSalary",value:function(e){this.setState({jobSalary:e.target.value})}},{key:"updateJobSlug",value:function(e){this.setState({jobSlug:e.target.value})}},{key:"updateJobTitle",value:function(e){this.setState({jobTitle:e.target.value})}},{key:"updatePostedByCompany",value:function(e){this.setState({posted_by_company:e.target.value})}},{key:"onChange",value:function(e){this.setState({editorState:e,stringifiedContent:JSON.stringify((0,_draftJs.convertToRaw)(e.getCurrentContent())),parsedContent:JSON.parse(JSON.stringify((0,_draftJs.convertToRaw)(e.getCurrentContent())))})}},{key:"handleKeyCommand",value:function(e){var t=_draftJs.RichUtils.handleKeyCommand(this.state.editorState,e);return t?(this.onChange(t),"handled"):"not-handled"}},{key:"onUnderlineClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onBoldClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"BOLD"))}},{key:"onItalicClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"ITALIC"))}},{key:"onMediumClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onLargeClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onLeftAlignClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onRightAlignClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onJustifyClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onOrderedListClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onUnorderedListClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"submitNewJob",value:function(e){var t=this;e.preventDefault();_axios2.default.defaults.headers.common.Authorization="JWT "+localStorage.getItem("token"),_axios2.default.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded",(0,_axios2.default)({method:"post",url:"/job/job/",data:{area:this.state.jobArea,description:this.state.stringifiedContent,experience:this.state.jobExperience,hours:this.state.jobHours,location:this.state.jobLocation,salary:this.state.jobSalary,slug:this.state.jobSlug,title:this.state.jobTitle,posted_by_company:parseInt(this.state.posted_by_company)},headers:{Authorization:"JWT "+localStorage.getItem("token")},responseType:"json"}).then(function(e){201===e.status&&t.setState({redirectToDashboard:!0})}).catch(function(e){console.log("this is an error yo",e),t.setState({formError:e})})}},{key:"render",value:function(){return this.state.redirectToDashboard?_react2.default.createElement(_reactRouterDom.Redirect,{to:"/employer_dashboard"}):_react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null),_react2.default.createElement("div",{id:"new-job-wrapper"},_react2.default.createElement("form",{onSubmit:this.submitNewJob},_react2.default.createElement("div",{id:"post-new-job-title"},_react2.default.createElement("h2",null,"Create a new job")),_react2.default.createElement("section",{className:"new-job-section"},_react2.default.createElement("div",{className:"new-job-label"},_react2.default.createElement("p",null,"Choose company to list job for:")),_react2.default.createElement("div",{className:"new-job-input"},_react2.default.createElement("select",{id:"company-select",value:this.state.posted_by_company,onChange:this.updatePostedByCompany},this.state.availableCompanies.map(function(e){return _react2.default.createElement("option",{value:e.id},e.name," ")})))),_react2.default.createElement("section",{className:"new-job-section"},_react2.default.createElement("div",{className:"new-job-label"},_react2.default.createElement("p",null,"Job Area:")),_react2.default.createElement("div",{className:"new-job-input"},_react2.default.createElement("input",{type:"text",className:"job-text-input",value:this.state.jobArea,onChange:this.updateJobArea}))),_react2.default.createElement("section",{className:"new-job-section"},_react2.default.createElement("div",{className:"new-job-label"},_react2.default.createElement("p",null,"Experience:")),_react2.default.createElement("div",{className:"new-job-input"},_react2.default.createElement("input",{type:"text",className:"job-text-input",value:this.state.jobExperience,onChange:this.updateJobExperience}))),_react2.default.createElement("section",{className:"new-job-section"},_react2.default.createElement("div",{className:"new-job-label"},_react2.default.createElement("p",null,"Hours:")),_react2.default.createElement("div",{className:"new-job-input"},_react2.default.createElement("input",{type:"text",className:"job-text-input",value:this.state.jobHours,onChange:this.updateJobHours}))),_react2.default.createElement("section",{className:"new-job-section"},_react2.default.createElement("div",{className:"new-job-label"},_react2.default.createElement("p",null,"Location:")),_react2.default.createElement("div",{className:"new-job-input"},_react2.default.createElement("input",{type:"text",className:"job-text-input",value:this.state.jobLocation,onChange:this.updateJobLocation}))),_react2.default.createElement("section",{className:"new-job-section"},_react2.default.createElement("div",{className:"new-job-label"},_react2.default.createElement("p",null,"Salary:")),_react2.default.createElement("div",{className:"new-job-input"},_react2.default.createElement("input",{type:"text",className:"job-text-input",value:this.state.jobSalary,onChange:this.updateJobSalary}))),_react2.default.createElement("section",{className:"new-job-section"},_react2.default.createElement("div",{className:"new-job-label"},_react2.default.createElement("p",null,"Slug:")),_react2.default.createElement("div",{className:"new-job-input"},_react2.default.createElement("input",{type:"text",className:"job-text-input",value:this.state.jobSlug,onChange:this.updateJobSlug}))),_react2.default.createElement("section",{className:"new-job-section"},_react2.default.createElement("div",{className:"new-job-label"},_react2.default.createElement("p",null,"Job Title:")),_react2.default.createElement("div",{className:"new-job-input"},_react2.default.createElement("input",{type:"text",className:"job-text-input",value:this.state.jobTitle,onChange:this.updateJobTitle}))),_react2.default.createElement("section",{id:"new-job-description"},_react2.default.createElement("section",{id:"job-description-title"},_react2.default.createElement("p",null,"Job Description:")),_react2.default.createElement("section",{id:"editor-buttons"},_react2.default.createElement("button",{onClick:this.onUnderlineClick,type:"button",className:"editor-button"},_react2.default.createElement("i",{class:"fas fa-underline"})),_react2.default.createElement("button",{onClick:this.onBoldClick,type:"button",className:"editor-button"},_react2.default.createElement("i",{class:"fas fa-bold"})),_react2.default.createElement("button",{onClick:this.onItalicClick,type:"button",className:"editor-button"},_react2.default.createElement("i",{class:"fas fa-italic"}))),_react2.default.createElement("div",{id:"new-job-editor"},_react2.default.createElement(_draftJs.Editor,{editorState:this.state.editorState,handleKeyCommand:this.handleKeyCommand,onChange:this.onChange}))),_react2.default.createElement("section",{id:"new-job-submit-container"},_react2.default.createElement("input",{type:"submit"}))),this.state.formError&&_react2.default.createElement("div",{id:"form-error"},_react2.default.createElement("p",null,"Something went wrong, your new job was not created."),_react2.default.createElement("p",null,"Please try again or contact marilyn@thenextsep.io for help"))),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),NewJobPage}(_react2.default.Component),_default=NewJobPage,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(NewJobPage,"NewJobPage","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/jobs/NewJobPage.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/jobs/NewJobPage.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!==e&&void 0!==e&&this.setState(e)}function o(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!==n&&void 0!==n?n:null}.bind(this))}function a(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function i(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,i=null,u=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?i="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(i="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?u="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(u="UNSAFE_componentWillUpdate"),null!==n||null!==i||null!==u){var l=e.displayName||e.name,s="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+l+" uses "+s+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==i?"\n  "+i:"")+(null!==u?"\n  "+u:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=a;var c=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;c.call(this,e,t,r)}}return e}n.r(t),n.d(t,"polyfill",function(){return i}),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,a.__suppressDeprecationWarning=!0},function(e,t,n){var r;
/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/
/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/
!function(){"use strict";var o=!("undefined"==typeof window||!window.document||!window.document.createElement),a={canUseDOM:o,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:o&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:o&&!!window.screen};void 0===(r=function(){return a}.call(t,n,t,e))||(e.exports=r)}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dumpClassLists=function(){0};var r={},o={};t.add=function(e,t){return n=e.classList,a="html"==e.nodeName.toLowerCase()?r:o,void t.split(" ").forEach(function(e){!function(e,t){e[t]||(e[t]=0),e[t]+=1}(a,e),n.add(e)});var n,a},t.remove=function(e,t){return n=e.classList,a="html"==e.nodeName.toLowerCase()?r:o,void t.split(" ").forEach(function(e){!function(e,t){e[t]&&(e[t]-=1)}(a,e),0===a[e]&&n.remove(e)});var n,a}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=(0,a.default)(e);if(!n.length)return void t.preventDefault();var r,o=t.shiftKey,i=n[0],u=n[n.length-1];if(e===document.activeElement){if(!o)return;r=u}u!==document.activeElement||o||(r=i);i===document.activeElement&&o&&(r=u);if(r)return t.preventDefault(),void r.focus();var l=/(\bChrome\b|\bSafari\b)\//.exec(navigator.userAgent);if(null==l||"Chrome"==l[1]||null!=/\biPod\b|\biPad\b/g.exec(navigator.userAgent))return;var s=n.indexOf(document.activeElement);s>-1&&(s+=o?-1:1);t.preventDefault(),n[s].focus()};var r,o=n(66),a=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.handleBlur=s,t.handleFocus=c,t.markForFocusLater=function(){i.push(document.activeElement)},t.returnFocus=function(){var e=null;try{return void(0!==i.length&&(e=i.pop()).focus())}catch(t){console.warn(["You tried to return focus to",e,"but it is not in the DOM anymore"].join(" "))}},t.popWithoutFocus=function(){i.length>0&&i.pop()},t.setupScopedFocus=function(e){u=e,window.addEventListener?(window.addEventListener("blur",s,!1),document.addEventListener("focus",c,!0)):(window.attachEvent("onBlur",s),document.attachEvent("onFocus",c))},t.teardownScopedFocus=function(){u=null,window.addEventListener?(window.removeEventListener("blur",s),document.removeEventListener("focus",c)):(window.detachEvent("onBlur",s),document.detachEvent("onFocus",c))};var r,o=n(66),a=(r=o)&&r.__esModule?r:{default:r};var i=[],u=null,l=!1;function s(){l=!0}function c(){if(l){if(l=!1,!u)return;setTimeout(function(){u.contains(document.activeElement)||((0,a.default)(u)[0]||u).focus()},0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),u=m(i),l=m(n(0)),s=h(n(133)),c=m(n(132)),f=h(n(65)),p=h(n(131)),d=m(n(64));function h(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function m(e){return e&&e.__esModule?e:{default:e}}var y={overlay:"ReactModal__Overlay",content:"ReactModal__Content"},_=9,g=27,v=0,b=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.setOverlayRef=function(e){n.overlay=e,n.props.overlayRef&&n.props.overlayRef(e)},n.setContentRef=function(e){n.content=e,n.props.contentRef&&n.props.contentRef(e)},n.afterClose=function(){var e=n.props,t=e.appElement,r=e.ariaHideApp,o=e.htmlOpenClassName,a=e.bodyOpenClassName;p.remove(document.body,a),o&&p.remove(document.getElementsByTagName("html")[0],o),r&&v>0&&0===(v-=1)&&f.show(t),n.props.shouldFocusAfterRender&&(n.props.shouldReturnFocusAfterClose?(s.returnFocus(),s.teardownScopedFocus()):s.popWithoutFocus())},n.open=function(){n.beforeOpen(),n.state.afterOpen&&n.state.beforeClose?(clearTimeout(n.closeTimer),n.setState({beforeClose:!1})):(n.props.shouldFocusAfterRender&&(s.setupScopedFocus(n.node),s.markForFocusLater()),n.setState({isOpen:!0},function(){n.setState({afterOpen:!0}),n.props.isOpen&&n.props.onAfterOpen&&n.props.onAfterOpen()}))},n.close=function(){n.props.closeTimeoutMS>0?n.closeWithTimeout():n.closeWithoutTimeout()},n.focusContent=function(){return n.content&&!n.contentHasFocus()&&n.content.focus()},n.closeWithTimeout=function(){var e=Date.now()+n.props.closeTimeoutMS;n.setState({beforeClose:!0,closesAt:e},function(){n.closeTimer=setTimeout(n.closeWithoutTimeout,n.state.closesAt-Date.now())})},n.closeWithoutTimeout=function(){n.setState({beforeClose:!1,isOpen:!1,afterOpen:!1,closesAt:null},n.afterClose)},n.handleKeyDown=function(e){e.keyCode===_&&(0,c.default)(n.content,e),n.props.shouldCloseOnEsc&&e.keyCode===g&&(e.stopPropagation(),n.requestClose(e))},n.handleOverlayOnClick=function(e){null===n.shouldClose&&(n.shouldClose=!0),n.shouldClose&&n.props.shouldCloseOnOverlayClick&&(n.ownerHandlesClose()?n.requestClose(e):n.focusContent()),n.shouldClose=null},n.handleContentOnMouseUp=function(){n.shouldClose=!1},n.handleOverlayOnMouseDown=function(e){n.props.shouldCloseOnOverlayClick||e.target!=n.overlay||e.preventDefault()},n.handleContentOnClick=function(){n.shouldClose=!1},n.handleContentOnMouseDown=function(){n.shouldClose=!1},n.requestClose=function(e){return n.ownerHandlesClose()&&n.props.onRequestClose(e)},n.ownerHandlesClose=function(){return n.props.onRequestClose},n.shouldBeClosed=function(){return!n.state.isOpen&&!n.state.beforeClose},n.contentHasFocus=function(){return document.activeElement===n.content||n.content.contains(document.activeElement)},n.buildClassName=function(e,t){var r="object"===(void 0===t?"undefined":o(t))?t:{base:y[e],afterOpen:y[e]+"--after-open",beforeClose:y[e]+"--before-close"},a=r.base;return n.state.afterOpen&&(a=a+" "+r.afterOpen),n.state.beforeClose&&(a=a+" "+r.beforeClose),"string"==typeof t&&t?a+" "+t:a},n.ariaAttributes=function(e){return Object.keys(e).reduce(function(t,n){return t["aria-"+n]=e[n],t},{})},n.state={afterOpen:!1,beforeClose:!1},n.shouldClose=null,n.moveFromContentToOverlay=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),a(t,[{key:"componentDidMount",value:function(){this.props.isOpen&&this.open()}},{key:"componentDidUpdate",value:function(e,t){this.props.isOpen&&!e.isOpen?this.open():!this.props.isOpen&&e.isOpen&&this.close(),this.props.shouldFocusAfterRender&&this.state.isOpen&&!t.isOpen&&this.focusContent()}},{key:"componentWillUnmount",value:function(){this.afterClose(),clearTimeout(this.closeTimer)}},{key:"beforeOpen",value:function(){var e=this.props,t=e.appElement,n=e.ariaHideApp,r=e.htmlOpenClassName,o=e.bodyOpenClassName;p.add(document.body,o),r&&p.add(document.getElementsByTagName("html")[0],r),n&&(v+=1,f.hide(t))}},{key:"render",value:function(){var e=this.props,t=e.className,n=e.overlayClassName,o=e.defaultStyles,a=t?{}:o.content,i=n?{}:o.overlay;return this.shouldBeClosed()?null:u.default.createElement("div",{ref:this.setOverlayRef,className:this.buildClassName("overlay",n),style:r({},i,this.props.style.overlay),onClick:this.handleOverlayOnClick,onMouseDown:this.handleOverlayOnMouseDown,"aria-modal":"true"},u.default.createElement("div",r({ref:this.setContentRef,style:r({},a,this.props.style.content),className:this.buildClassName("content",t),tabIndex:"-1",onKeyDown:this.handleKeyDown,onMouseDown:this.handleContentOnMouseDown,onMouseUp:this.handleContentOnMouseUp,onClick:this.handleContentOnClick,role:this.props.role,"aria-label":this.props.contentLabel},this.ariaAttributes(this.props.aria||{}),{"data-testid":this.props.testId}),this.props.children))}}]),t}();b.defaultProps={style:{overlay:{},content:{}},defaultStyles:{}},b.propTypes={isOpen:l.default.bool.isRequired,defaultStyles:l.default.shape({content:l.default.object,overlay:l.default.object}),style:l.default.shape({content:l.default.object,overlay:l.default.object}),className:l.default.oneOfType([l.default.string,l.default.object]),overlayClassName:l.default.oneOfType([l.default.string,l.default.object]),bodyOpenClassName:l.default.string,htmlOpenClassName:l.default.string,ariaHideApp:l.default.bool,appElement:l.default.instanceOf(d.default),onAfterOpen:l.default.func,onRequestClose:l.default.func,closeTimeoutMS:l.default.number,shouldFocusAfterRender:l.default.bool,shouldCloseOnOverlayClick:l.default.bool,shouldReturnFocusAfterClose:l.default.bool,role:l.default.string,contentLabel:l.default.string,aria:l.default.object,children:l.default.node,shouldCloseOnEsc:l.default.bool,overlayRef:l.default.func,contentRef:l.default.func,testId:l.default.string},t.default=b,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyOpenClassName=t.portalClassName=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=h(a),u=h(n(8)),l=h(n(0)),s=h(n(134)),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(65)),f=n(64),p=h(f),d=n(129);function h(e){return e&&e.__esModule?e:{default:e}}function m(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var y=t.portalClassName="ReactModalPortal",_=t.bodyOpenClassName="ReactModal__Body--open",g=void 0!==u.default.createPortal,v=g?u.default.createPortal:u.default.unstable_renderSubtreeIntoContainer;function b(e){return e()}var w=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,l=Array(a),c=0;c<a;c++)l[c]=arguments[c];return n=o=m(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(l))),o.removePortal=function(){!g&&u.default.unmountComponentAtNode(o.node),b(o.props.parentSelector).removeChild(o.node)},o.portalRef=function(e){o.portal=e},o.renderPortal=function(e){var n=v(o,i.default.createElement(s.default,r({defaultStyles:t.defaultStyles},e)),o.node);o.portalRef(n)},m(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentDidMount",value:function(){f.canUseDOM&&(g||(this.node=document.createElement("div")),this.node.className=this.props.portalClassName,b(this.props.parentSelector).appendChild(this.node),!g&&this.renderPortal(this.props))}},{key:"getSnapshotBeforeUpdate",value:function(e){return{prevParent:b(e.parentSelector),nextParent:b(this.props.parentSelector)}}},{key:"componentDidUpdate",value:function(e,t,n){if(f.canUseDOM){var r=this.props,o=r.isOpen,a=r.portalClassName;if(e.portalClassName!==a&&(this.node.className=a),e.isOpen||o){var i=n.prevParent,u=n.nextParent;u!==i&&(i.removeChild(this.node),u.appendChild(this.node)),!g&&this.renderPortal(this.props)}}}},{key:"componentWillUnmount",value:function(){if(f.canUseDOM&&this.node&&this.portal){var e=this.portal.state,t=Date.now(),n=e.isOpen&&this.props.closeTimeoutMS&&(e.closesAt||t+this.props.closeTimeoutMS);n?(e.beforeClose||this.portal.closeWithTimeout(),setTimeout(this.removePortal,n-t)):this.removePortal()}}},{key:"render",value:function(){return f.canUseDOM&&g?(!this.node&&g&&(this.node=document.createElement("div")),v(i.default.createElement(s.default,r({ref:this.portalRef,defaultStyles:t.defaultStyles},this.props)),this.node)):null}}],[{key:"setAppElement",value:function(e){c.setElement(e)}}]),t}();w.propTypes={isOpen:l.default.bool.isRequired,style:l.default.shape({content:l.default.object,overlay:l.default.object}),portalClassName:l.default.string,bodyOpenClassName:l.default.string,htmlOpenClassName:l.default.string,className:l.default.oneOfType([l.default.string,l.default.shape({base:l.default.string.isRequired,afterOpen:l.default.string.isRequired,beforeClose:l.default.string.isRequired})]),overlayClassName:l.default.oneOfType([l.default.string,l.default.shape({base:l.default.string.isRequired,afterOpen:l.default.string.isRequired,beforeClose:l.default.string.isRequired})]),appElement:l.default.instanceOf(p.default),onAfterOpen:l.default.func,onRequestClose:l.default.func,closeTimeoutMS:l.default.number,ariaHideApp:l.default.bool,shouldFocusAfterRender:l.default.bool,shouldCloseOnOverlayClick:l.default.bool,shouldReturnFocusAfterClose:l.default.bool,parentSelector:l.default.func,aria:l.default.object,role:l.default.string,contentLabel:l.default.string,shouldCloseOnEsc:l.default.bool,overlayRef:l.default.func,contentRef:l.default.func},w.defaultProps={isOpen:!1,portalClassName:y,bodyOpenClassName:_,ariaHideApp:!0,closeTimeoutMS:0,shouldFocusAfterRender:!0,shouldCloseOnEsc:!0,shouldCloseOnOverlayClick:!0,shouldReturnFocusAfterClose:!0,parentSelector:function(){return document.body}},w.defaultStyles={overlay:{position:"fixed",top:0,left:0,right:0,bottom:0,backgroundColor:"rgba(255, 255, 255, 0.75)"},content:{position:"absolute",top:"40px",left:"40px",right:"40px",bottom:"40px",border:"1px solid #ccc",background:"#fff",overflow:"auto",WebkitOverflowScrolling:"touch",borderRadius:"4px",outline:"none",padding:"20px"}},(0,d.polyfill)(w),t.default=w},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(8),_reactDom2=_interopRequireDefault(_reactDom),_reactModal=__webpack_require__(67),_reactModal2=_interopRequireDefault(_reactModal),_Header=__webpack_require__(14),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(13),_Footer2=_interopRequireDefault(_Footer),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),_reactRouterDom=__webpack_require__(11),_draftJs=__webpack_require__(30),_draftJsExportHtml=__webpack_require__(41),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module),_axios2.default.defaults.xsrfCookieName="csrftoken",_axios2.default.defaults.xsrfHeaderName="X-CSRFToken";var ViewCompanyPage=function(_React$Component){function ViewCompanyPage(e){_classCallCheck(this,ViewCompanyPage);var t=_possibleConstructorReturn(this,(ViewCompanyPage.__proto__||Object.getPrototypeOf(ViewCompanyPage)).call(this,e)),n=localStorage.getItem("token");return t.enableEditMode=t.enableEditMode.bind(t),t.enableViewMode=t.enableViewMode.bind(t),t.updateCompanyName=t.updateCompanyName.bind(t),t.updateSmallLogo=t.updateSmallLogo.bind(t),t.updateLargeLogo=t.updateLargeLogo.bind(t),t.submitCompanyChanges=t.submitCompanyChanges.bind(t),t.deleteCompany=t.deleteCompany.bind(t),t.onChange=t.onChange.bind(t),t.handleKeyCommand=t.handleKeyCommand.bind(t),t.onUnderlineClick=t.onUnderlineClick.bind(t),t.onBoldClick=t.onBoldClick.bind(t),t.onItalicClick=t.onItalicClick.bind(t),t.onMediumClick=t.onMediumClick.bind(t),t.onLargeClick=t.onLargeClick.bind(t),t.onLeftAlignClick=t.onLeftAlignClick.bind(t),t.onRightAlignClick=t.onRightAlignClick.bind(t),t.onJustifyClick=t.onJustifyClick.bind(t),t.onOrderedListClick=t.onOrderedListClick.bind(t),t.onUnorderedListClick=t.onOrderedListClick.bind(t),t.state={token:n,viewMode:!0,editMode:!1,companyId:t.props.match.params.id,companyInfo:{},redirectToDashboard:!1,small_logo:null,large_logo:null,previewSmall:null,previewLarge:null},t}return _inherits(ViewCompanyPage,_React$Component),_createClass(ViewCompanyPage,[{key:"componentWillMount",value:function(){var e=this,t="/company/company/"+this.state.companyId+"/";_axios2.default.defaults.headers.common.Authorization="Bearer "+localStorage.getItem("token"),_axios2.default.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded",(0,_axios2.default)({method:"get",url:t,headers:{Authorization:"JWT "+localStorage.getItem("token"),Accept:"application/json"},responseType:"json"}).then(function(t){if(200===t.status){var n=t.data.description,r=JSON.parse(n),o=(0,_draftJs.convertFromRaw)(r);e.setState({companyInfo:t.data,editorState:_draftJs.EditorState.createWithContent(o),name:t.data.name,previewSmall:t.data.small_logo,previewLarge:t.data.large_logo}),console.log("response from company",t.data)}}).then(function(){var t=e.state.editorState.getCurrentContent(),n=(0,_draftJsExportHtml.stateToHTML)(t),r={__html:n};e.setState({html:n,outputHtml:r})}).catch(function(e){console.log("this is an error yo",e)})}},{key:"onChange",value:function(e){this.setState({editorState:e});var t=e.getCurrentContent();console.log("content state",(0,_draftJs.convertToRaw)(t))}},{key:"handleKeyCommand",value:function(e){var t=_draftJs.RichUtils.handleKeyCommand(this.state.editorState,e);return t?(this.onChange(t),"handled"):"not-handled"}},{key:"onUnderlineClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onBoldClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"BOLD"))}},{key:"onItalicClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"ITALIC"))}},{key:"onMediumClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onLargeClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onLeftAlignClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onRightAlignClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onJustifyClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onOrderedListClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onUnorderedListClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"enableViewMode",value:function(){this.setState({viewMode:!0,editMode:!1})}},{key:"enableEditMode",value:function(){this.setState({viewMode:!1,editMode:!0})}},{key:"updateCompanyName",value:function(e){this.setState({name:e.target.value})}},{key:"updateSmallLogo",value:function(e){var t=this,n=new FileReader,r=e.target.files[0];n.onloadend=function(){t.setState({previewSmall:n.result})},n.readAsDataURL(r),this.setState({small_logo:e.target.files[0]})}},{key:"updateLargeLogo",value:function(e){var t=this,n=new FileReader,r=e.target.files[0];n.onloadend=function(){t.setState({previewLarge:n.result})},n.readAsDataURL(r),this.setState({large_logo:e.target.files[0]})}},{key:"submitCompanyChanges",value:function(e){var t=this;e.preventDefault();var n="/company/company/"+this.state.companyId+"/";_axios2.default.defaults.headers.common.Authorization="JWT "+localStorage.getItem("token"),_axios2.default.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded";var r=JSON.stringify((0,_draftJs.convertToRaw)(this.state.editorState.getCurrentContent())),o=new FormData;o.append("name",this.state.name),o.append("description",r),this.state.small_logo&&o.append("small_logo",this.state.small_logo),this.state.large_logo&&o.append("large_logo",this.state.large_logo),(0,_axios2.default)({method:"put",url:n,data:o,headers:{Authorization:"JWT "+localStorage.getItem("token"),"content-type":"multipart-form-data"},responseType:"json"}).then(function(e){200===e.status&&t.setState({redirectToDashboard:!0})}).catch(function(e){t.setState({formError:e}),console.log("this is an error yo",e)})}},{key:"deleteCompany",value:function(e){var t=this,n="/company/company/"+this.state.companyId+"/";_axios2.default.defaults.headers.common.Authorization="JWT "+localStorage.getItem("token"),_axios2.default.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded",(0,_axios2.default)({method:"delete",url:n,headers:{Authorization:"JWT "+localStorage.getItem("token")},responseType:"json"}).then(function(e){204===e.status&&t.setState({redirectToDashboard:!0})}).catch(function(e){console.log("this is an error yo",e),t.setState({formError:e})})}},{key:"render",value:function(){return this.state.redirectToDashboard?_react2.default.createElement(_reactRouterDom.Redirect,{to:"/employer_dashboard"}):_react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null),_react2.default.createElement("div",{id:"view-company-wrapper"},this.state.viewMode&&_react2.default.createElement("div",null,this.state.companyInfo.small_logo&&_react2.default.createElement("div",{className:"view-logo"},_react2.default.createElement("div",{className:"logo-label"},_react2.default.createElement("p",null,"Small Logo")),_react2.default.createElement("div",{className:"logo-image"},_react2.default.createElement("img",{src:this.state.previewSmall,alt:"company logo"}))),this.state.companyInfo.large_logo&&_react2.default.createElement("div",{className:"view-logo"},_react2.default.createElement("div",{className:"logo-label"},_react2.default.createElement("p",null,"Large Logo")),_react2.default.createElement("div",{className:"logo-image"},_react2.default.createElement("img",{src:this.state.previewLarge,alt:"company logo"}))),_react2.default.createElement("section",{id:"view-name-container"},_react2.default.createElement("div",{id:"view-name-label"},_react2.default.createElement("h3",null,"Company Name:")),_react2.default.createElement("div",{id:"view-name-name"},_react2.default.createElement("p",null,this.state.name))),_react2.default.createElement("section",null,_react2.default.createElement("div",{id:"view-description-title"},_react2.default.createElement("h3",null,"Company Description")),_react2.default.createElement("div",{dangerouslySetInnerHTML:this.state.outputHtml})),_react2.default.createElement("section",{id:"edit-button-container"},_react2.default.createElement("button",{onClick:this.enableEditMode,type:"button"},"Edit Company"))),this.state.editMode&&_react2.default.createElement("div",null,_react2.default.createElement("form",{onSubmit:this.submitCompanyChanges},_react2.default.createElement("section",{id:"edit-name-container"},_react2.default.createElement("div",{id:"edit-name-label"},_react2.default.createElement("p",null,"Company Name:")),_react2.default.createElement("div",{id:"edit-name-name"},_react2.default.createElement("input",{type:"text",value:this.state.name,onChange:this.updateCompanyName}))),_react2.default.createElement("div",{id:"company-edit-logos"},_react2.default.createElement("section",{className:"company-update-logo-section"},_react2.default.createElement("div",{className:"company-update-logo-name"},_react2.default.createElement("p",null,"Small Logo:")),this.state.previewSmall&&_react2.default.createElement("div",{className:"small-logo-preview-image"},_react2.default.createElement("img",{src:this.state.previewSmall,alt:"company logo"})),_react2.default.createElement("div",{className:"update-logo-input-file"},_react2.default.createElement("input",{type:"file",name:"small_logo",onChange:this.updateSmallLogo}))),_react2.default.createElement("section",{className:"company-update-logo-section"},_react2.default.createElement("div",{className:"company-update-logo-name"},_react2.default.createElement("p",null,"Large Logo:")),this.state.previewLarge&&_react2.default.createElement("div",{className:"large-logo-preview-image"},_react2.default.createElement("img",{src:this.state.previewLarge,alt:"company logo"})),_react2.default.createElement("div",{className:"update-logo-input-file"},_react2.default.createElement("input",{type:"file",name:"large_logo",onChange:this.updateLargeLogo})))),_react2.default.createElement("section",{id:"edit-company-description"},_react2.default.createElement("section",{id:"company-description-title"},_react2.default.createElement("h2",null,"Company Description")),_react2.default.createElement("section",{id:"editor-buttons"},_react2.default.createElement("button",{onClick:this.onUnderlineClick,type:"button",className:"editor-button"},_react2.default.createElement("i",{class:"fas fa-underline"})),_react2.default.createElement("button",{onClick:this.onBoldClick,type:"button",className:"editor-button"},_react2.default.createElement("i",{class:"fas fa-bold"})),_react2.default.createElement("button",{onClick:this.onItalicClick,type:"button",className:"editor-button"},_react2.default.createElement("i",{class:"fas fa-italic"}))),_react2.default.createElement("section",{id:"edit-company-editor"},_react2.default.createElement(_draftJs.Editor,{editorState:this.state.editorState,handleKeyCommand:this.handleKeyCommand,onChange:this.onChange}))),_react2.default.createElement("section",{id:"edit-company-submit-container"},_react2.default.createElement("input",{type:"submit"}))),_react2.default.createElement("div",{id:"edit-cancel-delete"},_react2.default.createElement("button",{onClick:this.enableViewMode,type:"button",id:"cancel-edit-changes"},"Cancel Changes"),_react2.default.createElement("button",{onClick:this.deleteCompany,type:"button",id:"delete-edit"},"Delete Company"))),this.state.formError&&_react2.default.createElement("div",{id:"form-error"},_react2.default.createElement("p",null,"Something went wrong, your company was not updated."),_react2.default.createElement("p",null,"Please try again or contact marilyn@thenextsep.io for help"))),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),ViewCompanyPage}(_react2.default.Component),_default=ViewCompanyPage,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(ViewCompanyPage,"ViewCompanyPage","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/companies/ViewCompanyPage.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/companies/ViewCompanyPage.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(8),_reactDom2=_interopRequireDefault(_reactDom),_Header=__webpack_require__(14),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(13),_Footer2=_interopRequireDefault(_Footer),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),_reactRouterDom=__webpack_require__(11),_draftJs=__webpack_require__(30),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var NewCompanyPage=function(_React$Component){function NewCompanyPage(e){_classCallCheck(this,NewCompanyPage);var t=_possibleConstructorReturn(this,(NewCompanyPage.__proto__||Object.getPrototypeOf(NewCompanyPage)).call(this,e)),n=localStorage.getItem("responseToken");return t.updateCompanyName=t.updateCompanyName.bind(t),t.updateSmallLogo=t.updateSmallLogo.bind(t),t.updateLargeLogo=t.updateLargeLogo.bind(t),t.submitNewCompany=t.submitNewCompany.bind(t),t.onChange=t.onChange.bind(t),t.handleKeyCommand=t.handleKeyCommand.bind(t),t.onUnderlineClick=t.onUnderlineClick.bind(t),t.onBoldClick=t.onBoldClick.bind(t),t.onItalicClick=t.onItalicClick.bind(t),t.onMediumClick=t.onMediumClick.bind(t),t.onLargeClick=t.onLargeClick.bind(t),t.onLeftAlignClick=t.onLeftAlignClick.bind(t),t.onRightAlignClick=t.onRightAlignClick.bind(t),t.onJustifyClick=t.onJustifyClick.bind(t),t.onOrderedListClick=t.onOrderedListClick.bind(t),t.onUnorderedListClick=t.onOrderedListClick.bind(t),t.state={companyName:"",companyDescription:"",small_logo:null,large_logo:null,token:n,editorState:_draftJs.EditorState.createEmpty(),redirectToDashboard:!1,formError:""},t}return _inherits(NewCompanyPage,_React$Component),_createClass(NewCompanyPage,[{key:"updateCompanyName",value:function(e){this.setState({companyName:e.target.value})}},{key:"updateSmallLogo",value:function(e){var t=this,n=new FileReader,r=e.target.files[0];n.onloadend=function(){t.setState({smallLogoPreview:n.result})},n.readAsDataURL(r),this.setState({small_logo:e.target.files[0]})}},{key:"updateLargeLogo",value:function(e){var t=this,n=new FileReader,r=e.target.files[0];n.onloadend=function(){t.setState({largeLogoPreview:n.result})},n.readAsDataURL(r),this.setState({large_logo:e.target.files[0]})}},{key:"onChange",value:function(e){this.setState({editorState:e,stringifiedContent:JSON.stringify((0,_draftJs.convertToRaw)(e.getCurrentContent())),parsedContent:JSON.parse(JSON.stringify((0,_draftJs.convertToRaw)(e.getCurrentContent())))})}},{key:"handleKeyCommand",value:function(e){var t=_draftJs.RichUtils.handleKeyCommand(this.state.editorState,e);return t?(this.onChange(t),"handled"):"not-handled"}},{key:"onUnderlineClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onBoldClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"BOLD"))}},{key:"onItalicClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"ITALIC"))}},{key:"onMediumClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onLargeClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onLeftAlignClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onRightAlignClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onJustifyClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onOrderedListClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"onUnorderedListClick",value:function(){this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState,"UNDERLINE"))}},{key:"submitNewCompany",value:function(e){var t=this;e.preventDefault();_axios2.default.defaults.headers.common.Authorization="Bearer "+localStorage.getItem("token"),console.log("Bearer "+localStorage.getItem("token")),_axios2.default.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded";var n=new FormData;n.append("name",this.state.companyName),this.state.small_logo&&n.append("small_logo",this.state.small_logo),this.state.large_logo&&n.append("large_logo",this.state.large_logo),this.state.stringifiedContent&&n.append("description",this.state.stringifiedContent),(0,_axios2.default)({method:"post",url:"/company/company/",data:n,headers:{Authorization:"JWT "+localStorage.getItem("token"),"content-type":"multipart-form-data"},responseType:"json"}).then(function(e){201===e.status&&t.setState({redirectToDashboard:!0})}).catch(function(e){console.log("this is an error yo",e),t.setState({formError:e})})}},{key:"render",value:function(){return this.state.redirectToDashboard?_react2.default.createElement(_reactRouterDom.Redirect,{to:"/employer_dashboard"}):_react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null),_react2.default.createElement("div",{id:"new-company-wrapper"},_react2.default.createElement("form",{onSubmit:this.submitNewCompany},_react2.default.createElement("div",null,_react2.default.createElement("h2",null,"Create a new company")),_react2.default.createElement("section",{className:"new-company-section"},_react2.default.createElement("div",{className:"new-company-label"},_react2.default.createElement("p",null,"Company Name:")),_react2.default.createElement("div",{className:"new-company-input"},_react2.default.createElement("input",{type:"text",value:this.state.companyName,id:"company-name-input",onChange:this.updateCompanyName}))),_react2.default.createElement("section",{className:"new-company-update-logo-section"},_react2.default.createElement("div",{className:"company-update-logo-name"},_react2.default.createElement("p",null,"Small Logo:")),this.state.smallLogoPreview&&_react2.default.createElement("div",{id:"small-logo-preview-image"},_react2.default.createElement("img",{src:this.state.smallLogoPreview})),_react2.default.createElement("div",{className:"new-company-input"},_react2.default.createElement("input",{type:"file",name:"small_logo",onChange:this.updateSmallLogo}))),_react2.default.createElement("section",{className:"new-company-update-logo-section"},_react2.default.createElement("div",{className:"company-update-logo-name"},_react2.default.createElement("p",null,"Large Logo:")),this.state.largeLogoPreview&&_react2.default.createElement("div",{id:"large-logo-preview-image"},_react2.default.createElement("img",{src:this.state.largeLogoPreview})),_react2.default.createElement("div",{className:"new-company-input"},_react2.default.createElement("input",{type:"file",name:"large_logo",onChange:this.updateLargeLogo}))),_react2.default.createElement("section",{id:"new-company-description"},_react2.default.createElement("section",{id:"company-description-title"},_react2.default.createElement("p",null,"Company Description:")),_react2.default.createElement("section",{id:"editor-buttons"},_react2.default.createElement("button",{onClick:this.onUnderlineClick,type:"button",className:"editor-button"},_react2.default.createElement("i",{class:"fas fa-underline"})),_react2.default.createElement("button",{onClick:this.onBoldClick,type:"button",className:"editor-button"},_react2.default.createElement("i",{class:"fas fa-bold"})),_react2.default.createElement("button",{onClick:this.onItalicClick,type:"button",className:"editor-button"},_react2.default.createElement("i",{class:"fas fa-italic"}))),_react2.default.createElement("div",{id:"new-company-editor"},_react2.default.createElement(_draftJs.Editor,{editorState:this.state.editorState,handleKeyCommand:this.handleKeyCommand,onChange:this.onChange}))),_react2.default.createElement("section",{id:"new-company-submit-container"},_react2.default.createElement("input",{type:"submit"}))),this.state.formError&&_react2.default.createElement("div",{id:"form-error"},_react2.default.createElement("p",null,"Something went wrong, your new company was not created."),_react2.default.createElement("p",null,"Please try again or contact marilyn@thenextsep.io for help"))),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),NewCompanyPage}(_react2.default.Component),_default=NewCompanyPage,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(NewCompanyPage,"NewCompanyPage","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/companies/NewCompanyPage.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/companies/NewCompanyPage.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(30),a=n(40),i=(r=a)&&r.__esModule?r:{default:r};t.default=function(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),a=2;a<n;a++)r[a-2]=arguments[a];var u=e.getCurrentContent(),l=e.getSelection(),s=l.getStartKey(),c=l.getEndKey(),f=l.getStartOffset(),p=l.getEndOffset(),d=s===c,h=e;return(0,i.default)(u,s,c).forEach(function(e){var n=e.getKey(),a=f,i=p;n===s?(a=f,i=d?p:e.getText().length):n===c?(a=d?f:0,i=p):(a=0,i=e.getText().length);var u=new o.SelectionState({anchorKey:n,anchorOffset:a,focusKey:n,focusOffset:i});h=t.apply(void 0,[h,u].concat(r))}),o.EditorState.forceSelection(h,l)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(40),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){return function(t,n){var r=t.getCurrentContent(),o=n||t.getSelection(),i=o.getStartKey(),u=o.getEndKey(),l=o.getStartOffset(),s=o.getEndOffset(),c=i===u,f=!1,p=l+1,d=s-1;return(0,a.default)(r,i,u).forEach(function(t){e(t,function(e,n){if(!f){var r=t.getKey();c&&(n<p||e>d)||r===i&&n<p||r===u&&e>d||(f=!0)}},r)}),f}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EMPTY_SET=void 0,t.default=function(e,t){for(var n=null,r=null,o=[],i=0,u=0,l=e.length;u<l;u++){r=n;var s=t.get(u);n=s?s.getEntity():null,u>0&&n!==r&&(o.push([r,a(e.slice(i,u),t.slice(i,u))]),i=u)}return o.push([n,a(e.slice(i),t.slice(i))]),o};var r=n(5),o=t.EMPTY_SET=new r.OrderedSet;function a(e,t){for(var n=o,a=o,i=[],u=0,l=0,s=e.length;l<s;l++){a=n;var c=t.get(l);n=c?c.getStyle():o,l>0&&!(0,r.is)(n,a)&&(i.push([e.slice(u,l),a]),u=l)}return i.push([e.slice(u),n]),i}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.BLOCK_TYPE={UNSTYLED:"unstyled",HEADER_ONE:"header-one",HEADER_TWO:"header-two",HEADER_THREE:"header-three",HEADER_FOUR:"header-four",HEADER_FIVE:"header-five",HEADER_SIX:"header-six",UNORDERED_LIST_ITEM:"unordered-list-item",ORDERED_LIST_ITEM:"ordered-list-item",BLOCKQUOTE:"blockquote",PULLQUOTE:"pullquote",CODE:"code-block",ATOMIC:"atomic"},o=t.ENTITY_TYPE={LINK:"LINK",IMAGE:"IMAGE"},a=t.INLINE_STYLE={BOLD:"BOLD",CODE:"CODE",ITALIC:"ITALIC",STRIKETHROUGH:"STRIKETHROUGH",UNDERLINE:"UNDERLINE"};t.default={BLOCK_TYPE:r,ENTITY_TYPE:o,INLINE_STYLE:a}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(141);Object.keys(r).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})}),Object.defineProperty(t,"Constants",{enumerable:!0,get:function(){return l(r).default}});var o=n(140);Object.defineProperty(t,"getEntityRanges",{enumerable:!0,get:function(){return l(o).default}});var a=n(40);Object.defineProperty(t,"getSelectedBlocks",{enumerable:!0,get:function(){return l(a).default}});var i=n(139);Object.defineProperty(t,"selectionContainsEntity",{enumerable:!0,get:function(){return l(i).default}});var u=n(138);function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"callModifierForSelectedBlocks",{enumerable:!0,get:function(){return l(u).default}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=/^(moz|ms|o|webkit)-/,o=/^\d+$/,a=/([A-Z])/g,i={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0};t.default=function(e){return Object.keys(e).map(function(t){var n=function(e,t){var n=void 0;return"string"==typeof t?n=o.test(t):(n=!0,t=String(t)),n&&"0"!==t&&!0!==i[e]?t+"px":t}(t,e[t]);return function(e){return e.replace(a,"-$1").toLowerCase().replace(r,"-$1-")}(t)+": "+n}).join("; ")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"};t.default=function(e){if(null==e)return e;var t={},n=!1,o=!0,a=!1,i=void 0;try{for(var u,l=Object.keys(e)[Symbol.iterator]();!(o=(u=l.next()).done);o=!0){var s=u.value,c=s;r.hasOwnProperty(s)&&(c=r[s],n=!0),t[c]=e[s]}}catch(e){a=!0,i=e}finally{try{!o&&l.return&&l.return()}finally{if(a)throw i}}return n?t:e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.default=function(e,t){if(null==e)return t;var n=o(t,2),a=n[0],i=n[1],u=r({},a),l=[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(i)),s=!0,c=!1,f=void 0;try{for(var p,d=Object.keys(e)[Symbol.iterator]();!(s=(p=d.next()).done);s=!0){var h=p.value;if(a.hasOwnProperty(h)){var m=a[h];u[h]=r({},m,e[h])}else u[h]=e[h],l.push(h)}}catch(e){c=!0,f=e}finally{try{!s&&d.return&&d.return()}finally{if(c)throw f}}return[u,l]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,a,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.default=function(e,t){return new O(e,t).generate()};var s=d(n(145)),c=d(n(144)),f=d(n(143)),p=n(142);function d(e){return e&&e.__esModule?e:{default:e}}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var m=p.INLINE_STYLE.BOLD,y=p.INLINE_STYLE.CODE,_=p.INLINE_STYLE.ITALIC,g=p.INLINE_STYLE.STRIKETHROUGH,v=p.INLINE_STYLE.UNDERLINE,b="<br>",w=/^data-([a-z0-9-]+)$/,E=(h(r={},m,{element:"strong"}),h(r,y,{element:"code"}),h(r,_,{element:"em"}),h(r,g,{element:"del"}),h(r,v,{element:"u"}),r),C=[m,_,v,g,y],S=(h(o={},p.ENTITY_TYPE.LINK,{url:"href",href:"href",rel:"rel",target:"target",title:"title",className:"class"}),h(o,p.ENTITY_TYPE.IMAGE,{src:"src",height:"height",width:"width",alt:"alt",className:"class"}),o),k=(h(a={},p.ENTITY_TYPE.LINK,function(e,t){var n=S.hasOwnProperty(e)?S[e]:{},r=t.getData(),o={},a=!0,i=!1,u=void 0;try{for(var l,s=Object.keys(r)[Symbol.iterator]();!(a=(l=s.next()).done);a=!0){var c=l.value,f=r[c];if(n.hasOwnProperty(c))o[n[c]]=f;else w.test(c)&&(o[c]=f)}}catch(e){i=!0,u=e}finally{try{!a&&s.return&&s.return()}finally{if(i)throw u}}return o}),h(a,p.ENTITY_TYPE.IMAGE,function(e,t){var n=S.hasOwnProperty(e)?S[e]:{},r=t.getData(),o={},a=!0,i=!1,u=void 0;try{for(var l,s=Object.keys(r)[Symbol.iterator]();!(a=(l=s.next()).done);a=!0){var c=l.value,f=r[c];if(n.hasOwnProperty(c))o[n[c]]=f;else w.test(c)&&(o[c]=f)}}catch(e){i=!0,u=e}finally{try{!a&&s.return&&s.return()}finally{if(i)throw u}}return o}),a);function x(e,t){switch(e){case p.BLOCK_TYPE.HEADER_ONE:return["h1"];case p.BLOCK_TYPE.HEADER_TWO:return["h2"];case p.BLOCK_TYPE.HEADER_THREE:return["h3"];case p.BLOCK_TYPE.HEADER_FOUR:return["h4"];case p.BLOCK_TYPE.HEADER_FIVE:return["h5"];case p.BLOCK_TYPE.HEADER_SIX:return["h6"];case p.BLOCK_TYPE.UNORDERED_LIST_ITEM:case p.BLOCK_TYPE.ORDERED_LIST_ITEM:return["li"];case p.BLOCK_TYPE.BLOCKQUOTE:return["blockquote"];case p.BLOCK_TYPE.CODE:return["pre","code"];case p.BLOCK_TYPE.ATOMIC:return["figure"];default:return[t||"p"]}}var O=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),null==n&&(n={}),this.contentState=t,this.options=n;var r=(0,s.default)(n.inlineStyles,[E,C]),o=u(r,2),a=o[0],i=o[1];this.inlineStyles=a,this.styleOrder=i}return l(e,[{key:"generate",value:function(){for(this.output=[],this.blocks=this.contentState.getBlocksAsArray(),this.totalBlocks=this.blocks.length,this.currentBlock=0,this.indentLevel=0,this.wrapperTag=null;this.currentBlock<this.totalBlocks;)this.processBlock();return this.closeWrapperTag(),this.output.join("").trim()}},{key:"processBlock",value:function(){var e=this.options,t=e.blockRenderers,n=e.defaultBlockTag,r=this.blocks[this.currentBlock],o=r.getType(),a=function(e){switch(e){case p.BLOCK_TYPE.UNORDERED_LIST_ITEM:return"ul";case p.BLOCK_TYPE.ORDERED_LIST_ITEM:return"ol";default:return null}}(o);this.wrapperTag!==a&&(this.wrapperTag&&this.closeWrapperTag(),a&&this.openWrapperTag(a)),this.indent();var i=null!=t&&t.hasOwnProperty(o)?t[o]:null,u=i?i(r):null;if(null!=u)return this.output.push(u),this.output.push("\n"),void(this.currentBlock+=1);this.writeStartTag(r,n),this.output.push(this.renderBlockContent(r));var l=this.getNextBlock();if(function(e){switch(e){case p.BLOCK_TYPE.UNORDERED_LIST_ITEM:case p.BLOCK_TYPE.ORDERED_LIST_ITEM:return!0;default:return!1}}(o)&&l&&l.getDepth()===r.getDepth()+1){this.output.push("\n");var s=this.wrapperTag;this.wrapperTag=null,this.indentLevel+=1,this.currentBlock+=1,this.processBlocksAtDepth(l.getDepth()),this.wrapperTag=s,this.indentLevel-=1,this.indent()}else this.currentBlock+=1;this.writeEndTag(r,n)}},{key:"processBlocksAtDepth",value:function(e){for(var t=this.blocks[this.currentBlock];t&&t.getDepth()===e;)this.processBlock(),t=this.blocks[this.currentBlock];this.closeWrapperTag()}},{key:"getNextBlock",value:function(){return this.blocks[this.currentBlock+1]}},{key:"writeStartTag",value:function(e,t){var n=x(e.getType(),t),r=void 0;if(this.options.blockStyleFn){var o=this.options.blockStyleFn(e)||{},a=o.attributes,u=o.style;if(a=(0,c.default)(a),null!=u){var l=(0,f.default)(u);a=null==a?{style:l}:i({},a,{style:l})}r=T(a)}else r="";var s=!0,p=!1,d=void 0;try{for(var h,m=n[Symbol.iterator]();!(s=(h=m.next()).done);s=!0){var y=h.value;this.output.push("<"+y+r+">")}}catch(e){p=!0,d=e}finally{try{!s&&m.return&&m.return()}finally{if(p)throw d}}}},{key:"writeEndTag",value:function(e,t){var n=x(e.getType(),t);if(1===n.length)this.output.push("</"+n[0]+">\n");else{var r=[],o=!0,a=!1,i=void 0;try{for(var u,l=n[Symbol.iterator]();!(o=(u=l.next()).done);o=!0){var s=u.value;r.unshift("</"+s+">")}}catch(e){a=!0,i=e}finally{try{!o&&l.return&&l.return()}finally{if(a)throw i}}this.output.push(r.join("")+"\n")}}},{key:"openWrapperTag",value:function(e){this.wrapperTag=e,this.indent(),this.output.push("<"+e+">\n"),this.indentLevel+=1}},{key:"closeWrapperTag",value:function(){var e=this.wrapperTag;e&&(this.indentLevel-=1,this.indent(),this.output.push("</"+e+">\n"),this.wrapperTag=null)}},{key:"indent",value:function(){this.output.push("  ".repeat(this.indentLevel))}},{key:"renderBlockContent",value:function(e){var t=this,n=e.getType(),r=e.getText();if(""===r)return b;r=this.preserveWhitespace(r);var o=e.getCharacterList();return(0,p.getEntityRanges)(r,o).map(function(e){var r=u(e,2),o=r[0],a=r[1].map(function(e){var r=u(e,2),o=r[0],a=r[1],l=function(e){return e.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;").split(" ").join("&nbsp;").split("\n").join(b+"\n")}(o),s=!0,d=!1,h=void 0;try{for(var m,_=t.styleOrder[Symbol.iterator]();!(s=(m=_.next()).done);s=!0){var g=m.value;if((g!==y||n!==p.BLOCK_TYPE.CODE)&&a.has(g)){var v=t.inlineStyles[g],w=v.element,E=v.attributes,C=v.style;if(null==w&&(w="span"),E=(0,c.default)(E),null!=C){var S=(0,f.default)(C);E=null==E?{style:S}:i({},E,{style:S})}l="<"+w+T(E)+">"+l+"</"+w+">"}}}catch(e){d=!0,h=e}finally{try{!s&&_.return&&_.return()}finally{if(d)throw h}}return l}).join(""),l=o?t.contentState.getEntity(o):null,s=null==l?null:l.getType().toUpperCase(),d=void 0;if(null!=l&&t.options.entityStyleFn&&(d=t.options.entityStyleFn(l))){var h=d,m=h.element,_=h.attributes,g=h.style;if(null==m&&(m="span"),_=(0,c.default)(_),null!=g){var v=(0,f.default)(g);_=null==_?{style:v}:i({},_,{style:v})}return"<"+m+T(_)+">"+a+"</"+m+">"}return null!=s&&s===p.ENTITY_TYPE.LINK?"<a"+T(k.hasOwnProperty(s)?k[s](s,l):null)+">"+a+"</a>":null!=s&&s===p.ENTITY_TYPE.IMAGE?"<img"+T(k.hasOwnProperty(s)?k[s](s,l):null)+"/>":a}).join("")}},{key:"preserveWhitespace",value:function(e){for(var t=e.length,n=new Array(t),r=0;r<t;r++)" "!==e[r]||0!==r&&r!==t-1&&" "!==e[r-1]?n[r]=e[r]:n[r]=" ";return n.join("")}}]),e}();function T(e){if(null==e)return"";var t=[],n=!0,r=!1,o=void 0;try{for(var a,i=Object.keys(e)[Symbol.iterator]();!(n=(a=i.next()).done);n=!0){var u=a.value,l=e[u];null!=l&&t.push(" "+u+'="'+(l+"").split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;").split('"').join("&quot;")+'"')}}catch(e){r=!0,o=e}finally{try{!n&&i.return&&i.return()}finally{if(r)throw o}}return t.join("")}},function(e,t,n){"use strict";var r=n(76);e.exports=function(e){var t=r(e),n=0,o=0,a=0,i=0;if(t.length){if(t.length>1&&0===t[0].width){var u=t[1];n=u.top,o=u.right,a=u.bottom,i=u.left}else{var l=t[0];n=l.top,o=l.right,a=l.bottom,i=l.left}for(var s=1;s<t.length;s++){var c=t[s];0!==c.height&&0!==c.width&&(n=Math.min(n,c.top),o=Math.max(o,c.right),a=Math.max(a,c.bottom),i=Math.min(i,c.left))}}return{top:n,right:o,bottom:a,left:i,width:o-i,height:a-n}}},function(e,t,n){"use strict";var r=n(147);e.exports=function(e){var t=e.getSelection();if(!t.rangeCount)return null;var n=t.getRangeAt(0),o=r(n),a=o.top,i=o.right,u=o.bottom,l=o.left;return 0===a&&0===i&&0===u&&0===l?null:o}},function(e,t,n){"use strict";var r=n(5).OrderedSet,o=n(26).substr,a=r();e.exports=function(e,t){var n=Array(e.length).fill(a);return t&&t.forEach(function(t){for(var r=o(e,0,t.offset).length,a=r+o(e,t.offset,t.length).length;r<a;)n[r]=n[r].add(t.style),r++}),n}},function(e,t,n){"use strict";var r=n(26).substr;e.exports=function(e,t){var n=Array(e.length).fill(null);return t&&t.forEach(function(t){for(var o=r(e,0,t.offset).length,a=o+r(e,t.offset,t.length).length,i=o;i<a;i++)n[i]=t.key}),n}},function(e,t,n){"use strict";var r=n(16),o=n(5).List;e.exports=function(e,t){var n=e.map(function(e,n){var o=t[n];return r.create({style:e,entity:o})});return o(n)}},function(e,t,n){"use strict";var r=n(15)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(4),a=function(e){if(!e||!e.type)return!1;var t=e.type;return"unordered-list-item"===t||"ordered-list-item"===t},i={fromRawTreeStateToRawState:function(e){var t=e.blocks,n=[];return Array.isArray(t)||o(!1),Array.isArray(t)&&t.length?(function(e,t){for(var n=[].concat(e).reverse();n.length;){var r=n.pop();t(r);var a=r.children;Array.isArray(a)||o(!1),n=n.concat([].concat(a.reverse()))}}(t,function(e){var t=r({},e);a(e)&&(t.depth=t.depth||0,function(e){Array.isArray(e.children)&&(e.children=e.children.map(function(t){return t.type===e.type?r({},t,{depth:(e.depth||0)+1}):t}))}(e)),delete t.children,n.push(t)}),e.blocks=n,r({},e,{blocks:n})):e},fromRawStateToRawTreeState:function(e){var t={},n=[];return e.blocks.forEach(function(e){var i=a(e),u=e.depth||0,l=r({},e,{children:[]});if(!i)return t={},void n.push(l);if(t[u]=l,u>0){var s=t[u-1];return s||o(!1),void s.children.push(l)}n.push(l)}),r({},e,{blocks:n})}};e.exports=i},function(e,t,n){"use strict";var r=n(15)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(27),a=n(17),i=n(52),u=n(37),l=n(24),s=n(152),c=n(5),f=n(29),p=n(151),d=n(150),h=n(149),m=n(23),y=n(4),_=l.draft_tree_data_support,g=c.List,v=c.Map,b=c.OrderedMap,w=function(e,t){var n=e.key,r=e.type,o=e.data;return{text:e.text,depth:e.depth||0,type:r||"unstyled",key:n||m(),data:v(o),characterList:E(e,t)}},E=function(e,t){var n=e.text,o=e.entityRanges,a=e.inlineStyleRanges,i=o||[];return p(h(n,a||[]),d(n,i.filter(function(e){return t.hasOwnProperty(e.key)}).map(function(e){return r({},e,{key:t[e.key]})})))},C=function(e){return r({},e,{key:e.key||m()})},S=function(e,t,n){var o=t.map(function(e){return r({},e,{parentRef:n})});return e.concat(o.reverse())},k=function(e,t){var n=Array.isArray(e.blocks[0].children),i=_&&!n?s.fromRawStateToRawTreeState(e).blocks:e.blocks;return _?function(e,t){return e.map(C).reduce(function(n,o,i){Array.isArray(o.children)||y(!1);var u=o.children.map(C),l=new a(r({},w(o,t),{prevSibling:0===i?null:e[i-1].key,nextSibling:i===e.length-1?null:e[i+1].key,children:g(u.map(function(e){return e.key}))}));n=n.set(l.getKey(),l);for(var s=S([],u,l);s.length>0;){var c=s.pop(),f=c.parentRef,p=f.getChildKeys(),d=p.indexOf(c.key),h=Array.isArray(c.children);if(!h){h||y(!1);break}var m=c.children.map(C),_=new a(r({},w(c,t),{parent:f.getKey(),children:g(m.map(function(e){return e.key})),prevSibling:0===d?null:p.get(d-1),nextSibling:d===p.size-1?null:p.get(d+1)}));n=n.set(_.getKey(),_),s=S(s,m,_)}return n},b())}(i,t):function(e,t){return b(e.map(function(e){var n=new o(w(e,t));return[n.getKey(),n]}))}(n?s.fromRawTreeStateToRawState(e).blocks:i,t)};e.exports=function(e){Array.isArray(e.blocks)||y(!1);var t=function(e){var t=e.entityMap,n={};return Object.keys(t).forEach(function(e){var r=t[e],o=r.type,a=r.mutability,i=r.data;n[e]=u.__create(o,a,i||{})}),n}(e),n=k(e,t),r=n.isEmpty()?new f:f.createEmpty(n.first().getKey());return new i({blockMap:n,entityMap:t,selectionBefore:r,selectionAfter:r})}},function(e,t,n){"use strict";var r=n(26),o=n(34),a=function(e,t){return e===t},i=function(e){return!!e},u=[];e.exports=function(e){var t=e.getCharacterList().map(function(e){return e.getStyle()}).toList(),n=t.flatten().toSet().map(function(n){return function(e,t,n){var u=[],l=t.map(function(e){return e.has(n)}).toList();return o(l,a,i,function(t,o){var a=e.getText();u.push({offset:r.strlen(a.slice(0,t)),length:r.strlen(a.slice(t,o)),style:n})}),u}(e,t,n)});return Array.prototype.concat.apply(u,n.toJS())}},function(e,t,n){"use strict";var r=n(68),o=n(26).strlen;e.exports=function(e,t){var n=[];return e.findEntityRanges(function(e){return!!e.getEntity()},function(a,i){var u=e.getText(),l=e.getEntityAt(a);n.push({offset:o(u.slice(0,a)),length:o(u.slice(a,i)),key:Number(t[r.stringify(l)])})}),n}},function(e,t,n){"use strict";var r=n(15)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(27),a=n(17),i=n(68),u=n(155),l=n(154),s=n(4),c=function(e,t){return{key:e.getKey(),text:e.getText(),type:e.getType(),depth:e.getDepth(),inlineStyleRanges:l(e),entityRanges:u(e,t),data:e.getData().toObject()}},f=function(e,t){var n=t.entityMap,u=[],l={},f={},p=0;return e.getBlockMap().forEach(function(e){e.findEntityRanges(function(e){return null!==e.getEntity()},function(t){var r=e.getEntityAt(t),o=i.stringify(r);f[o]||(f[o]=r,n[o]=""+p,p++)}),function(e,t,n,i){if(e instanceof o)n.push(c(e,t));else{e instanceof a||s(!1);var u=e.getParentKey(),l=i[e.getKey()]=r({},c(e,t),{children:[]});u?i[u].children.push(l):n.push(l)}}(e,n,u,l)}),{blocks:u,entityMap:n}};e.exports=function(e){var t={entityMap:{},blocks:[]};return t=function(e,t){var n=t.blocks,r=t.entityMap,o={};return Object.keys(r).forEach(function(t,n){var r=e.getEntity(i.unstringify(t));o[n]={type:r.getType(),mutability:r.getMutability(),data:r.getData()}}),{blocks:n,entityMap:o}}(e,t=f(e,t))}},function(e,t,n){"use strict";var r=n(1),o=n(28),a=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.shouldComponentUpdate=function(e){return this.props.text!==e.text||this.props.editorState.getSelection().getHasFocus()!==e.editorState.getSelection().getHasFocus()},t.prototype.render=function(){var e=this.props.editorState.getSelection().getHasFocus(),t=o({"public/DraftEditorPlaceholder/root":!0,"public/DraftEditorPlaceholder/hasFocus":e});return r.createElement("div",{className:t},r.createElement("div",{className:o("public/DraftEditorPlaceholder/inner"),id:this.props.accessibilityID,style:{whiteSpace:"pre-wrap"}},this.props.text))},t}(r.Component);e.exports=a},function(e,t,n){"use strict";(function(t){var r=n(75);e.exports=function(e,n){var o=t.getSelection();return 0===o.rangeCount?{selectionState:e.getSelection().set("hasFocus",!1),needsRecovery:!1}:r(e,n,o.anchorNode,o.anchorOffset,o.focusNode,o.focusOffset)}}).call(this,n(20))},function(e,t,n){"use strict";var r=n(6),o=n(8),a=n(158),i=n(4);e.exports=function(e){if(!e._blockSelectEvents&&e._latestEditorState===e.props.editorState){var t=e.props.editorState,n=o.findDOMNode(e.editorContainer);n||i(!1),n.firstChild instanceof HTMLElement||i(!1);var u=a(t,n.firstChild),l=u.selectionState;l!==t.getSelection()&&(t=u.needsRecovery?r.forceSelection(t,l):r.acceptSelection(t,l),e.update(t))}}},function(e,t,n){"use strict";var r=/\r\n?|\n/g;e.exports=function(e){return e.split(r)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r){var o=t.getStartKey(),a=t.getEndKey(),i=e.getBlockMap(),u=i.toSeq().skipUntil(function(e,t){return t===o}).takeUntil(function(e,t){return t===a}).concat([[a,i.get(a)]]).map(function(e){var t=e.getDepth()+n;return t=Math.max(0,Math.min(t,r)),e.set("depth",t)});return i=i.merge(u),e.merge({blockMap:i,selectionBefore:t,selectionAfter:t})}},function(e,t,n){"use strict";var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._uri=t}return e.prototype.toString=function(){return this._uri},e}();e.exports=r},function(e,t,n){"use strict";var r=n(15)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=(n(16),n(27)),a=n(17),i=n(24),u=n(5),l=n(72),s=n(23),c=n(71),f=n(51),p=u.List,d=u.Repeat,h=i.draft_tree_data_support,m=h?a:o,y={processHTML:function(e,t){return l(e,c,t)},processText:function(e,t,n){return e.reduce(function(e,o,a){o=f(o);var i=s(),u={key:i,type:n,text:o,characterList:p(d(t,o.length))};if(h&&0!==a){var l=a-1,c=e[l]=e[l].merge({nextSibling:i});u=r({},u,{prevSibling:c.getKey()})}return e.push(new m(u)),e},[])}};e.exports=y},function(e,t,n){"use strict";var r=n(35),o=n(16),a=n(81),i=n(12),u=n(163),l=n(6),s=n(70),c=n(47),f=n(79),p=n(33),d=n(160);function h(e,t,n){var r=i.replaceWithFragment(e.getCurrentContent(),e.getSelection(),t);return l.push(e,r.set("entityMap",n),"insert-fragment")}e.exports=function(e,t){t.preventDefault();var n=new a(t.clipboardData);if(!n.isRichText()){var m=n.getFiles(),y=n.getText();if(m.length>0){if(e.props.handlePastedFiles&&p(e.props.handlePastedFiles(m)))return;return void f(m,function(t){if(t=t||y){var n=e._latestEditorState,a=d(t),f=o.create({style:n.getCurrentInlineStyle(),entity:c(n.getCurrentContent(),n.getSelection())}),p=s.getCurrentBlockType(n),h=u.processText(a,f,p),m=r.createFromArray(h),_=i.replaceWithFragment(n.getCurrentContent(),n.getSelection(),m);e.update(l.push(n,_,"insert-fragment"))}})}}var _=[],g=n.getText(),v=n.getHTML(),b=e._latestEditorState;if(!e.props.handlePastedText||!p(e.props.handlePastedText(g,v,b))){if(g&&(_=d(g)),!e.props.stripPastedStyles){var w=e.getClipboard();if(n.isRichText()&&w){if(-1!==v.indexOf(e.getEditorKey())||1===_.length&&1===w.size&&w.first().getText()===g)return void e.update(h(e._latestEditorState,w))}else if(w&&n.types.includes("com.apple.webarchive")&&!n.types.includes("text/html")&&function(e,t){return e.length===t.size&&t.valueSeq().every(function(t,n){return t.getText()===e[n]})}(_,w))return void e.update(h(e._latestEditorState,w));if(v){var E=u.processHTML(v,e.props.blockRenderMap);if(E){var C=E.contentBlocks,S=E.entityMap;if(C){var k=r.createFromArray(C);return void e.update(h(e._latestEditorState,k,S))}}}e.setClipboard(null)}if(_.length){var x=o.create({style:b.getCurrentInlineStyle(),entity:c(b.getCurrentContent(),b.getSelection())}),O=s.getCurrentBlockType(b),T=u.processText(_,x,O),j=r.createFromArray(T);e.update(h(e._latestEditorState,j))}}}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t,n){var o=r.undo(t);if("spellcheck-change"!==t.getLastChangeType())e.preventDefault(),t.getNativelyRenderedContent()?(n(r.set(t,{nativelyRenderedContent:null})),setTimeout(function(){n(o)},0)):n(o);else{var a=o.getCurrentContent();n(r.set(o,{nativelyRenderedContent:a}))}}},function(e,t,n){"use strict";var r=n(12),o=n(6),a=n(38);e.exports=function(e){var t=e.getSelection();if(!t.isCollapsed())return e;var n=t.getAnchorOffset();if(0===n)return e;var i,u,l=t.getAnchorKey(),s=e.getCurrentContent(),c=s.getBlockForKey(l).getLength();if(c<=1)return e;n===c?(i=t.set("anchorOffset",n-1),u=t):u=(i=t.set("focusOffset",n+1)).set("anchorOffset",n+1);var f=a(s,i),p=r.removeRange(s,i,"backward"),d=p.getSelectionAfter(),h=d.getAnchorOffset()-1,m=d.merge({anchorOffset:h,focusOffset:h}),y=r.replaceWithFragment(p,m,f),_=o.push(e,y,"insert-fragment");return o.acceptSelection(_,u)}},function(e,t,n){"use strict";var r=n(6),o=n(26),a=n(73),i=n(32);e.exports=function(e){var t=i(e,function(e){var t=e.getSelection(),n=e.getCurrentContent(),r=t.getAnchorKey(),i=t.getAnchorOffset(),u=n.getBlockForKey(r).getText()[i];return a(e,u?o.getUTF16Length(u,0):1)},"forward");if(t===e.getCurrentContent())return e;var n=e.getSelection();return r.push(e,t.set("selectionBefore",n),n.isCollapsed()?"delete-character":"remove-range")}},function(e,t,n){"use strict";var r=n(6),o=n(26),a=n(42),i=n(32);e.exports=function(e){var t=i(e,function(e){var t=e.getSelection(),n=e.getCurrentContent(),r=t.getAnchorKey(),i=t.getAnchorOffset(),u=n.getBlockForKey(r).getText()[i-1];return a(e,u?o.getUTF16Length(u,0):1)},"backward");if(t===e.getCurrentContent())return e;var n=e.getSelection();return r.push(e,t.set("selectionBefore",n),n.isCollapsed()?"backspace-character":"remove-range")}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e){var t=e.getSelection(),n=t.getStartKey();return r.set(e,{selection:t.merge({anchorKey:n,anchorOffset:0,focusKey:n,focusOffset:0,isBackward:!1}),forceSelection:!0})}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e){var t=e.getSelection(),n=t.getEndKey(),o=e.getCurrentContent().getBlockForKey(n).getLength();return r.set(e,{selection:t.merge({anchorKey:n,anchorOffset:o,focusKey:n,focusOffset:o,isBackward:!1}),forceSelection:!0})}},function(e,t,n){"use strict";var r=n(12),o=n(6);e.exports=function(e){var t=r.splitBlock(e.getCurrentContent(),e.getSelection());return o.push(e,t,"split-block")}},function(e,t,n){"use strict";var r=n(74),o=n(6),a=n(73),i=n(32);e.exports=function(e){var t=i(e,function(e){var t=e.getSelection(),n=t.getStartOffset(),o=t.getStartKey(),i=e.getCurrentContent().getBlockForKey(o).getText().slice(n),u=r.getForward(i);return a(e,u.length||1)},"forward");return t===e.getCurrentContent()?e:o.push(e,t,"remove-range")}},function(e,t,n){"use strict";e.exports={getPunctuation:function(){return"[.,+*?$|#{}()'\\^\\-\\[\\]\\\\\\/!@%\"~=<>_:;・、。〈-】〔-〟：-？！-／［-｀｛-･⸮؟٪-٬؛،؍﴾﴿᠁।၊။‐-‧‰-⁞¡-±´-¸º»¿]"}}},function(e,t,n){"use strict";var r=n(74),o=n(6),a=n(42),i=n(32);e.exports=function(e){var t=i(e,function(e){var t=e.getSelection(),n=t.getStartOffset();if(0===n)return a(e,1);var o=t.getStartKey(),i=e.getCurrentContent().getBlockForKey(o).getText().slice(0,n),u=r.getBackward(i);return a(e,u.length||1)},"backward");return t===e.getCurrentContent()?e:o.push(e,t,"remove-range")}},function(e,t,n){"use strict";var r=n(26),o=n(76),a=n(4);function i(e,t){for(var n=1/0,r=1/0,o=-1/0,a=-1/0,i=0;i<e.length;i++){var u=e[i];0!==u.width&&1!==u.width&&(n=Math.min(n,u.top),r=Math.min(r,u.bottom),o=Math.max(o,u.top),a=Math.max(a,u.bottom))}return o<=r&&o-n<t&&a-r<t}function u(e){switch(e.nodeType){case Node.DOCUMENT_TYPE_NODE:return 0;case Node.TEXT_NODE:case Node.PROCESSING_INSTRUCTION_NODE:case Node.COMMENT_NODE:return e.length;default:return e.childNodes.length}}e.exports=function(e){e.collapsed||a(!1);var t=(e=e.cloneRange()).startContainer;1!==t.nodeType&&(t=t.parentNode);var n=function(e){var t=getComputedStyle(e),n=document.createElement("div");n.style.fontFamily=t.fontFamily,n.style.fontSize=t.fontSize,n.style.fontStyle=t.fontStyle,n.style.fontWeight=t.fontWeight,n.style.lineHeight=t.lineHeight,n.style.position="absolute",n.textContent="M";var r=document.body;r||a(!1),r.appendChild(n);var o=n.getBoundingClientRect();return r.removeChild(n),o.height}(t),l=e.endContainer,s=e.endOffset;for(e.setStart(e.startContainer,0);i(o(e),n)&&(l=e.startContainer,s=e.startOffset,l.parentNode||a(!1),e.setStartBefore(l),1!==l.nodeType||"inline"===getComputedStyle(l).display););for(var c=l,f=s-1;;){for(var p=c.nodeValue,d=f;d>=0;d--)if(!(null!=p&&d>0&&r.isSurrogatePair(p,d-1))){if(e.setStart(c,d),!i(o(e),n))break;l=c,s=d}if(-1===d||0===c.childNodes.length)break;f=u(c=c.childNodes[d])}return e.setStart(l,s),e}},function(e,t,n){"use strict";(function(t){var r=n(6),o=n(175),a=n(75),i=n(42),u=n(32);e.exports=function(e){var n=u(e,function(e){var n=e.getSelection();if(n.isCollapsed()&&0===n.getAnchorOffset())return i(e,1);var r=t.getSelection().getRangeAt(0);return r=o(r),a(e,null,r.endContainer,r.endOffset,r.startContainer,r.startOffset).selectionState},"backward");return n===e.getCurrentContent()?e:r.push(e,n,"remove-range")}}).call(this,n(20))},function(e,t,n){"use strict";var r=n(12),o=n(6),a=n(38),i=n(19),u=null,l={cut:function(e){var t=e.getCurrentContent(),n=e.getSelection(),l=null;if(n.isCollapsed()){var s=n.getAnchorKey(),c=t.getBlockForKey(s).getLength();if(c===n.getAnchorOffset())return e;l=n.set("focusOffset",c)}else l=n;l=i(l),u=a(t,l);var f=r.removeRange(t,l,"forward");return f===t?e:o.push(e,f,"remove-range")},paste:function(e){if(!u)return e;var t=r.replaceWithFragment(e.getCurrentContent(),e.getSelection(),u);return o.push(e,t,"insert-fragment")}};e.exports=l},function(e,t,n){"use strict";var r=n(12),o=n(6),a=n(43),i=n(48),u=n(177),l=n(21),s=n(33),c=n(176),f=n(174),p=n(172),d=n(171),h=n(170),m=n(169),y=n(168),_=n(167),g=n(166),v=n(165),b=a.isOptionKeyCommand,w=l.isBrowser("Chrome");e.exports=function(e,t){var n=t.which,a=e._latestEditorState;switch(n){case i.RETURN:if(t.preventDefault(),e.props.handleReturn&&s(e.props.handleReturn(t,a)))return;break;case i.ESC:return t.preventDefault(),void(e.props.onEscape&&e.props.onEscape(t));case i.TAB:return void(e.props.onTab&&e.props.onTab(t));case i.UP:return void(e.props.onUpArrow&&e.props.onUpArrow(t));case i.RIGHT:return void(e.props.onRightArrow&&e.props.onRightArrow(t));case i.DOWN:return void(e.props.onDownArrow&&e.props.onDownArrow(t));case i.LEFT:return void(e.props.onLeftArrow&&e.props.onLeftArrow(t));case i.SPACE:if(w&&b(t)){t.preventDefault();var l=r.replaceText(a.getCurrentContent(),a.getSelection()," ");return void e.update(o.push(a,l,"insert-characters"))}}var E=e.props.keyBindingFn(t);if(E)if("undo"!==E){if(t.preventDefault(),!e.props.handleKeyCommand||!s(e.props.handleKeyCommand(E,a))){var C=function(e,t){switch(e){case"redo":return o.redo(t);case"delete":return _(t);case"delete-word":return p(t);case"backspace":return y(t);case"backspace-word":return f(t);case"backspace-to-start-of-line":return c(t);case"split-block":return d(t);case"transpose-characters":return g(t);case"move-selection-to-start-of-block":return m(t);case"move-selection-to-end-of-block":return h(t);case"secondary-cut":return u.cut(t);case"secondary-paste":return u.paste(t);default:return t}}(E,a);C!==a&&e.update(C)}}else v(t,a,e.update)}},function(e,t,n){"use strict";(function(t){var r=n(24),o=n(12),a=n(36),i=n(6),u=n(21),l=n(44),s=n(19),c=u.isEngine("Gecko"),f="\n\n";e.exports=function(e){void 0!==e._pendingStateFromBeforeInput&&(e.update(e._pendingStateFromBeforeInput),e._pendingStateFromBeforeInput=void 0);var n=t.getSelection(),u=n.anchorNode,p=n.isCollapsed,d=u.nodeType!==Node.TEXT_NODE,h=u.nodeType!==Node.TEXT_NODE&&u.nodeType!==Node.ELEMENT_NODE;if(r.draft_killswitch_allow_nontextnodes){if(d)return}else if(h)return;if(u.nodeType===Node.TEXT_NODE&&(null!==u.previousSibling||null!==u.nextSibling)){var m=u.parentNode;u.nodeValue=m.textContent;for(var y=m.firstChild;null!==y;y=y.nextSibling)y!==u&&m.removeChild(y)}var _=u.textContent,g=e._latestEditorState,v=s(l(u)),b=a.decode(v),w=b.blockKey,E=b.decoratorKey,C=b.leafKey,S=g.getBlockTree(w).getIn([E,"leaves",C]),k=S.start,x=S.end,O=g.getCurrentContent(),T=O.getBlockForKey(w),j=T.getText().slice(k,x);if(_.endsWith(f)&&(_=_.slice(0,-1)),_!==j){var R,M,D,N,P=g.getSelection(),L=P.merge({anchorOffset:k,focusOffset:x,isBackward:!1}),I=T.getEntityAt(k),A=I&&O.getEntity(I),U="MUTABLE"===(A&&A.getMutability()),F=U?"spellcheck-change":"apply-entity",B=o.replaceText(O,L,_,T.getInlineStyleAt(k),U?T.getEntityAt(k):null);if(c)R=n.anchorOffset,M=n.focusOffset,N=(D=k+Math.min(R,M))+Math.abs(R-M),R=D,M=N;else{var q=_.length-j.length;D=P.getStartOffset(),N=P.getEndOffset(),R=p?N+q:D,M=N+q}var K=B.merge({selectionBefore:O.getSelectionAfter(),selectionAfter:P.merge({anchorOffset:R,focusOffset:M})});e.update(i.push(g,K,F))}}}).call(this,n(20))},function(e,t,n){"use strict";var r=n(6),o=n(21);e.exports=function(e,t){var n=e._latestEditorState,a=n.getSelection();if(!a.getHasFocus()){var i=a.set("hasFocus",!0);e.props.onFocus&&e.props.onFocus(t),o.isBrowser("Chrome < 60.0.3081.0")?e.update(r.forceSelection(n,i)):e.update(r.acceptSelection(n,i))}}},function(e,t,n){"use strict";e.exports=function(e){e._internalDrag=!0,e.setMode("drag")}},function(e,t,n){"use strict";e.exports=function(e,t){e._internalDrag=!1,e.setMode("drag"),t.preventDefault()}},function(e,t,n){"use strict";var r=n(12),o=n(6),a=n(46),i=n(77),u=n(45);e.exports=function(e,t){var n=e._latestEditorState,l=n.getSelection(),s=t.target,c=void 0;if(l.isCollapsed())t.preventDefault();else{s instanceof Node&&(c=u(a.getScrollParent(s)));var f=i(n);e.setClipboard(f),e.setMode("cut"),setTimeout(function(){e.restoreEditorDOM(c),e.exitCurrentMode(),e.update(function(e){var t=r.removeRange(e.getCurrentContent(),e.getSelection(),"forward");return o.push(e,t,"remove-range")}(n))},0)}}},function(e,t,n){"use strict";var r=n(77);e.exports=function(e,t){e._latestEditorState.getSelection().isCollapsed()?t.preventDefault():e.setClipboard(r(e._latestEditorState))}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t){e.setMode("composite"),e.update(r.set(e._latestEditorState,{inCompositionMode:!0})),e._onCompositionStart(t)}},function(e,t,n){"use strict";(function(t){var r=n(6),o=n(39),a=n(56);e.exports=function(e,n){if(a()===document.body){var i=t.getSelection(),u=e.editor;1===i.rangeCount&&o(u,i.anchorNode)&&o(u,i.focusNode)&&i.removeAllRanges()}var l=e._latestEditorState,s=l.getSelection();if(s.getHasFocus()){var c=s.set("hasFocus",!1);e.props.onBlur&&e.props.onBlur(n),e.update(r.acceptSelection(l,c))}}}).call(this,n(20))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,o,a,i,u,l=1,s={},c=!1,f=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){h(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((a=new MessageChannel).port1.onmessage=function(e){h(e.data)},r=function(e){a.port2.postMessage(e)}):f&&"onreadystatechange"in f.createElement("script")?(o=f.documentElement,r=function(e){var t=f.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,o.removeChild(t),t=null},o.appendChild(t)}):r=function(e){setTimeout(h,0,e)}:(i="setImmediate$"+Math.random()+"$",u=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(i)&&h(+t.data.slice(i.length))},e.addEventListener?e.addEventListener("message",u,!1):e.attachEvent("onmessage",u),r=function(t){e.postMessage(i+t,"*")}),p.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return s[l]=o,r(l),l++},p.clearImmediate=d}function d(e){delete s[e]}function h(e){if(c)setTimeout(h,0,e);else{var t=s[e];if(t){c=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{d(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(20),n(98))},function(e,t,n){"use strict";(function(t){n(187),e.exports=t.setImmediate}).call(this,n(20))},function(e,t,n){"use strict";(function(t){var r=n(88),o=n(12),a=n(6),i=n(21),u=n(47),l=n(33),s=n(84),c=n(19),f=n(188),p="'",d="/",h=i.isBrowser("Firefox");function m(e,t,n,r){var i=o.replaceText(e.getCurrentContent(),e.getSelection(),t,n,r);return a.push(e,i,"insert-characters")}e.exports=function(e,n){void 0!==e._pendingStateFromBeforeInput&&(e.update(e._pendingStateFromBeforeInput),e._pendingStateFromBeforeInput=void 0);var o=e._latestEditorState,i=n.data;if(i)if(e.props.handleBeforeInput&&l(e.props.handleBeforeInput(i,o)))n.preventDefault();else{var y=o.getSelection(),_=y.getStartOffset(),g=y.getEndOffset(),v=y.getAnchorKey();if(!y.isCollapsed())return n.preventDefault(),void(i===o.getCurrentContent().getPlainText().slice(_,g)?e.update(a.forceSelection(o,y.merge({focusOffset:g}))):e.update(m(o,i,o.getCurrentInlineStyle(),u(o.getCurrentContent(),o.getSelection()))));var b,w=m(o,i,o.getCurrentInlineStyle(),u(o.getCurrentContent(),o.getSelection())),E=!1;if(E||(E=s(e._latestCommittedEditorState)),!E){var C=t.getSelection();if(C.anchorNode&&C.anchorNode.nodeType===Node.TEXT_NODE){var S=C.anchorNode.parentNode;E="SPAN"===S.nodeName&&S.firstChild.nodeType===Node.TEXT_NODE&&-1!==S.firstChild.nodeValue.indexOf("\t")}}if(E||(E=r.getFingerprint(o.getBlockTree(v))!==r.getFingerprint(w.getBlockTree(v))),E||(b=i,E=h&&(b==p||b==d)),E||(E=c(w.getDirectionMap()).get(v)!==c(o.getDirectionMap()).get(v)),E)return n.preventDefault(),void e.update(w);w=a.set(w,{nativelyRenderedContent:w.getCurrentContent()}),e._pendingStateFromBeforeInput=w,f(function(){void 0!==e._pendingStateFromBeforeInput&&(e.update(e._pendingStateFromBeforeInput),e._pendingStateFromBeforeInput=void 0)})}}}).call(this,n(20))},function(e,t,n){"use strict";var r={onBeforeInput:n(189),onBlur:n(186),onCompositionStart:n(185),onCopy:n(184),onCut:n(183),onDragOver:n(182),onDragStart:n(181),onFocus:n(180),onInput:n(179),onKeyDown:n(178),onPaste:n(164),onSelect:n(159)};e.exports=r},function(e,t,n){"use strict";var r=n(4);e.exports=function(e){return function(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"length"in e&&!("setInterval"in e)&&"number"!=typeof e.nodeType&&(Array.isArray(e)||"callee"in e||"item"in e)}(e)?Array.isArray(e)?e.slice():function(e){var t=e.length;if((Array.isArray(e)||"object"!=typeof e&&"function"!=typeof e)&&r(!1),"number"!=typeof t&&r(!1),0===t||t-1 in e||r(!1),"function"==typeof e.callee&&r(!1),e.hasOwnProperty)try{return Array.prototype.slice.call(e)}catch(e){}for(var n=Array(t),o=0;o<t;o++)n[o]=e[o];return n}(e):[e]}},function(e,t,n){"use strict";var r={isImage:function(e){return"image"===o(e)[0]},isJpeg:function(e){var t=o(e);return r.isImage(e)&&("jpeg"===t[1]||"pjpeg"===t[1])}};function o(e){return e.split("/")}e.exports=r},function(e,t,n){"use strict";var r=n(81),o=n(12),a=n(6),i=n(44),u=n(79),l=n(78),s=n(33),c=n(19);var f={onDragEnd:function(e){e.exitCurrentMode()},onDrop:function(e,t){var n=new r(t.nativeEvent.dataTransfer),f=e._latestEditorState,d=function(e,t){var n=null,r=null;if("function"==typeof document.caretRangeFromPoint){var o=document.caretRangeFromPoint(e.x,e.y);n=o.startContainer,r=o.startOffset}else{if(!e.rangeParent)return null;n=e.rangeParent,r=e.rangeOffset}n=c(n),r=c(r);var a=c(i(n));return l(t,a,r,a,r)}(t.nativeEvent,f);if(t.preventDefault(),e.exitCurrentMode(),null!=d){var h=n.getFiles();if(h.length>0){if(e.props.handleDroppedFiles&&s(e.props.handleDroppedFiles(d,h)))return;u(h,function(t){t&&e.update(p(f,d,t))})}else{var m=e._internalDrag?"internal":"external";e.props.handleDrop&&s(e.props.handleDrop(d,n,m))||(e._internalDrag?e.update(function(e,t){var n=o.moveText(e.getCurrentContent(),e.getSelection(),t);return a.push(e,n,"insert-fragment")}(f,d)):e.update(p(f,d,n.getText())))}}}};function p(e,t,n){var r=o.insertText(e.getCurrentContent(),t,n,e.getCurrentInlineStyle());return a.push(e,r,"insert-fragment")}e.exports=f},function(e,t,n){"use strict";e.exports=function(e){e||(e="");var t=void 0,n=arguments.length;if(n>1)for(var r=1;r<n;r++)(t=arguments[r])&&(e=(e?e+" ":"")+t);return e}},function(e,t,n){"use strict";function r(){var e=void 0;return document.documentElement&&(e=document.documentElement.clientWidth),!e&&document.body&&(e=document.body.clientWidth),e||0}function o(){var e=void 0;return document.documentElement&&(e=document.documentElement.clientHeight),!e&&document.body&&(e=document.body.clientHeight),e||0}function a(){return{width:window.innerWidth||r(),height:window.innerHeight||o()}}a.withoutScrollbars=function(){return{width:r(),height:o()}},e.exports=a},function(e,t,n){"use strict";e.exports=function(e){return e.Window&&e instanceof e.Window?{x:e.pageXOffset||e.document.documentElement.scrollLeft,y:e.pageYOffset||e.document.documentElement.scrollTop}:{x:e.scrollLeft,y:e.scrollTop}}},function(e,t,n){"use strict";var r="undefined"!=typeof navigator&&navigator.userAgent.indexOf("AppleWebKit")>-1;e.exports=function(e){return(e=e||document).scrollingElement?e.scrollingElement:r||"CSS1Compat"!==e.compatMode?e.body:e.documentElement}},function(e,t,n){"use strict";var r=n(39);e.exports=function(e){var t=e.ownerDocument.documentElement;if(!("getBoundingClientRect"in e&&r(t,e)))return{left:0,right:0,top:0,bottom:0};var n=e.getBoundingClientRect();return{left:Math.round(n.left)-t.clientLeft,right:Math.round(n.right)-t.clientLeft,top:Math.round(n.top)-t.clientTop,bottom:Math.round(n.bottom)-t.clientTop}}},function(e,t,n){"use strict";var r=n(198);e.exports=function(e){var t=r(e);return{x:t.left,y:t.top,width:t.right-t.left,height:t.bottom-t.top}}},function(e,t,n){"use strict";var r=/([A-Z])/g;e.exports=function(e){return e.replace(r,"-$1").toLowerCase()}},function(e,t,n){"use strict";var r=/-(.)/g;e.exports=function(e){return e.replace(r,function(e,t){return t.toUpperCase()})}},function(e,t,n){"use strict";var r=n(201),o=n(200);function a(e){return null==e?e:String(e)}e.exports=function(e,t){var n=void 0;if(window.getComputedStyle&&(n=window.getComputedStyle(e,null)))return a(n.getPropertyValue(o(t)));if(document.defaultView&&document.defaultView.getComputedStyle){if(n=document.defaultView.getComputedStyle(e,null))return a(n.getPropertyValue(o(t)));if("display"===t)return"none"}return e.currentStyle?a("float"===t?e.currentStyle.cssFloat||e.currentStyle.styleFloat:e.currentStyle[r(t)]):a(e.style&&e.style[r(t)])}},function(e,t,n){"use strict";e.exports={logSelectionStateFailure:function(){return null}}},function(e,t,n){"use strict";(function(t){var r=n(203),o=n(39),a=n(56),i=n(4);function u(e,t){if(!e)return"[empty]";var n=function e(t,n){var r=void 0!==n?n(t):[];if(t.nodeType===Node.TEXT_NODE){var o=t.textContent.length;return document.createTextNode("[text "+o+(r.length?" | "+r.join(", "):"")+"]")}var a=t.cloneNode();1===a.nodeType&&r.length&&a.setAttribute("data-labels",r.join(", "));var i=t.childNodes;for(var u=0;u<i.length;u++)a.appendChild(e(i[u],n));return a}(e,t);return n.nodeType===Node.TEXT_NODE?n.textContent:(n instanceof Element||i(!1),n.outerHTML)}function l(e,t){for(var n=e;n;){if(n instanceof Element&&n.hasAttribute("contenteditable"))return u(n,t);n=n.parentNode}return"Could not find contentEditable parent of node"}function s(e){return null===e.nodeValue?e.childNodes.length:e.nodeValue.length}function c(e,t,n,i){var u=a();if(e.extend&&o(u,t)){n>s(t)&&r.logSelectionStateFailure({anonymizedDom:l(t),extraParams:JSON.stringify({offset:n}),selectionState:JSON.stringify(i.toJS())});var c=t===e.focusNode;try{e.extend(t,n)}catch(o){throw r.logSelectionStateFailure({anonymizedDom:l(t,function(t){var n=[];return t===u&&n.push("active element"),t===e.anchorNode&&n.push("selection anchor node"),t===e.focusNode&&n.push("selection focus node"),n}),extraParams:JSON.stringify({activeElementName:u?u.nodeName:null,nodeIsFocus:t===e.focusNode,nodeWasFocus:c,selectionRangeCount:e.rangeCount,selectionAnchorNodeName:e.anchorNode?e.anchorNode.nodeName:null,selectionAnchorOffset:e.anchorOffset,selectionFocusNodeName:e.focusNode?e.focusNode.nodeName:null,selectionFocusOffset:e.focusOffset,message:o?""+o:null,offset:n},null,2),selectionState:JSON.stringify(i.toJS(),null,2)}),o}}else{var f=e.getRangeAt(0);f.setEnd(t,n),e.addRange(f.cloneRange())}}function f(e,t,n,o){var a=document.createRange();n>s(t)&&r.logSelectionStateFailure({anonymizedDom:l(t),extraParams:JSON.stringify({offset:n}),selectionState:JSON.stringify(o.toJS())}),a.setStart(t,n),e.addRange(a)}e.exports=function(e,n,r,a,i){if(o(document.documentElement,n)){var u=t.getSelection(),l=e.getAnchorKey(),s=e.getAnchorOffset(),p=e.getFocusKey(),d=e.getFocusOffset(),h=e.getIsBackward();if(!u.extend&&h){var m=l,y=s;l=p,s=d,p=m,d=y,h=!1}var _=l===r&&a<=s&&i>=s,g=p===r&&a<=d&&i>=d;if(_&&g)return u.removeAllRanges(),f(u,n,s-a,e),void c(u,n,d-a,e);if(h){if(g&&(u.removeAllRanges(),f(u,n,d-a,e)),_){var v=u.focusNode,b=u.focusOffset;u.removeAllRanges(),f(u,n,s-a,e),c(u,v,b,e)}}else _&&(u.removeAllRanges(),f(u,n,s-a,e)),g&&c(u,n,d-a,e)}}}).call(this,n(20))},function(e,t,n){"use strict";e.exports=function(e){var t={};return function(n){return t.hasOwnProperty(n)||(t[n]=e.call(this,n)),t[n]}}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){if(!e)return null;var o={};for(var a in e)r.call(e,a)&&(o[a]=t.call(n,e[a],a,e));return o}},function(e,t,n){"use strict";var r=n(4),o=/\./,a=/\|\|/,i=/\s+\-\s+/,u=/^(<=|<|=|>=|~>|~|>|)?\s*(.+)/,l=/^(\d*)(.*)/;function s(e,t){var n=e.split(a);return n.length>1?n.some(function(e){return b.contains(e,t)}):function(e,t){var n=e.split(i);if(n.length>0&&n.length<=2||r(!1),1===n.length)return c(n[0],t);var o=n[0],a=n[1];return m(o)&&m(a)||r(!1),c(">="+o,t)&&c("<="+a,t)}(e=n[0].trim(),t)}function c(e,t){if(""===(e=e.trim()))return!0;var n,r=t.split(o),a=d(e),i=a.modifier,u=a.rangeComponents;switch(i){case"<":return f(r,u);case"<=":return-1===(n=v(r,u))||0===n;case">=":return p(r,u);case">":return function(e,t){return 1===v(e,t)}(r,u);case"~":case"~>":return function(e,t){var n=t.slice(),r=t.slice();r.length>1&&r.pop();var o=r.length-1,a=parseInt(r[o],10);h(a)&&(r[o]=a+1+"");return p(e,n)&&f(e,r)}(r,u);default:return function(e,t){return 0===v(e,t)}(r,u)}}function f(e,t){return-1===v(e,t)}function p(e,t){var n=v(e,t);return 1===n||0===n}function d(e){var t=e.split(o),n=t[0].match(u);return n||r(!1),{modifier:n[1],rangeComponents:[n[2]].concat(t.slice(1))}}function h(e){return!isNaN(e)&&isFinite(e)}function m(e){return!d(e).modifier}function y(e,t){for(var n=e.length;n<t;n++)e[n]="0"}function _(e,t){var n=e.match(l)[1],r=t.match(l)[1],o=parseInt(n,10),a=parseInt(r,10);return h(o)&&h(a)&&o!==a?g(o,a):g(e,t)}function g(e,t){return typeof e!=typeof t&&r(!1),e>t?1:e<t?-1:0}function v(e,t){for(var n=function(e,t){y(e=e.slice(),(t=t.slice()).length);for(var n=0;n<t.length;n++){var r=t[n].match(/^[x*]$/i);if(r&&(t[n]=e[n]="0","*"===r[0]&&n===t.length-1))for(var o=n;o<e.length;o++)e[o]="0"}return y(t,e.length),[e,t]}(e,t),r=n[0],o=n[1],a=0;a<o.length;a++){var i=_(r[a],o[a]);if(i)return i}return 0}var b={contains:function(e,t){return s(e.trim(),t.trim())}};e.exports=b},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){var r;
/*!
 * UAParser.js v0.7.18
 * Lightweight JavaScript-based User-Agent string parser
 * https://github.com/faisalman/ua-parser-js
 *
 * Copyright © 2012-2016 Faisal Salman <fyzlman@gmail.com>
 * Dual licensed under GPLv2 or MIT
 */
/*!
 * UAParser.js v0.7.18
 * Lightweight JavaScript-based User-Agent string parser
 * https://github.com/faisalman/ua-parser-js
 *
 * Copyright © 2012-2016 Faisal Salman <fyzlman@gmail.com>
 * Dual licensed under GPLv2 or MIT
 */
!function(o,a){"use strict";var i="model",u="name",l="type",s="vendor",c="version",f="mobile",p="tablet",d={extend:function(e,t){var n={};for(var r in e)t[r]&&t[r].length%2==0?n[r]=t[r].concat(e[r]):n[r]=e[r];return n},has:function(e,t){return"string"==typeof e&&-1!==t.toLowerCase().indexOf(e.toLowerCase())},lowerize:function(e){return e.toLowerCase()},major:function(e){return"string"==typeof e?e.replace(/[^\d\.]/g,"").split(".")[0]:void 0},trim:function(e){return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}},h={rgx:function(e,t){for(var n,r,o,a,i,u,l=0;l<t.length&&!i;){var s=t[l],c=t[l+1];for(n=r=0;n<s.length&&!i;)if(i=s[n++].exec(e))for(o=0;o<c.length;o++)u=i[++r],"object"==typeof(a=c[o])&&a.length>0?2==a.length?"function"==typeof a[1]?this[a[0]]=a[1].call(this,u):this[a[0]]=a[1]:3==a.length?"function"!=typeof a[1]||a[1].exec&&a[1].test?this[a[0]]=u?u.replace(a[1],a[2]):void 0:this[a[0]]=u?a[1].call(this,u,a[2]):void 0:4==a.length&&(this[a[0]]=u?a[3].call(this,u.replace(a[1],a[2])):void 0):this[a]=u||void 0;l+=2}},str:function(e,t){for(var n in t)if("object"==typeof t[n]&&t[n].length>0){for(var r=0;r<t[n].length;r++)if(d.has(t[n][r],e))return"?"===n?void 0:n}else if(d.has(t[n],e))return"?"===n?void 0:n;return e}},m={browser:{oldsafari:{version:{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}}},device:{amazon:{model:{"Fire Phone":["SD","KF"]}},sprint:{model:{"Evo Shift 4G":"7373KT"},vendor:{HTC:"APA",Sprint:"Sprint"}}},os:{windows:{version:{ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2000:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"}}}},y={browser:[[/(opera\smini)\/([\w\.-]+)/i,/(opera\s[mobiletab]+).+version\/([\w\.-]+)/i,/(opera).+version\/([\w\.]+)/i,/(opera)[\/\s]+([\w\.]+)/i],[u,c],[/(opios)[\/\s]+([\w\.]+)/i],[[u,"Opera Mini"],c],[/\s(opr)\/([\w\.]+)/i],[[u,"Opera"],c],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]*)/i,/(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i,/(?:ms|\()(ie)\s([\w\.]+)/i,/(rekonq)\/([\w\.]*)/i,/(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark)\/([\w\.-]+)/i],[u,c],[/(trident).+rv[:\s]([\w\.]+).+like\sgecko/i],[[u,"IE"],c],[/(edge|edgios|edgea)\/((\d+)?[\w\.]+)/i],[[u,"Edge"],c],[/(yabrowser)\/([\w\.]+)/i],[[u,"Yandex"],c],[/(puffin)\/([\w\.]+)/i],[[u,"Puffin"],c],[/((?:[\s\/])uc?\s?browser|(?:juc.+)ucweb)[\/\s]?([\w\.]+)/i],[[u,"UCBrowser"],c],[/(comodo_dragon)\/([\w\.]+)/i],[[u,/_/g," "],c],[/(micromessenger)\/([\w\.]+)/i],[[u,"WeChat"],c],[/(qqbrowserlite)\/([\w\.]+)/i],[u,c],[/(QQ)\/([\d\.]+)/i],[u,c],[/m?(qqbrowser)[\/\s]?([\w\.]+)/i],[u,c],[/(BIDUBrowser)[\/\s]?([\w\.]+)/i],[u,c],[/(2345Explorer)[\/\s]?([\w\.]+)/i],[u,c],[/(MetaSr)[\/\s]?([\w\.]+)/i],[u],[/(LBBROWSER)/i],[u],[/xiaomi\/miuibrowser\/([\w\.]+)/i],[c,[u,"MIUI Browser"]],[/;fbav\/([\w\.]+);/i],[c,[u,"Facebook"]],[/headlesschrome(?:\/([\w\.]+)|\s)/i],[c,[u,"Chrome Headless"]],[/\swv\).+(chrome)\/([\w\.]+)/i],[[u,/(.+)/,"$1 WebView"],c],[/((?:oculus|samsung)browser)\/([\w\.]+)/i],[[u,/(.+(?:g|us))(.+)/,"$1 $2"],c],[/android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i],[c,[u,"Android Browser"]],[/(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i],[u,c],[/(dolfin)\/([\w\.]+)/i],[[u,"Dolphin"],c],[/((?:android.+)crmo|crios)\/([\w\.]+)/i],[[u,"Chrome"],c],[/(coast)\/([\w\.]+)/i],[[u,"Opera Coast"],c],[/fxios\/([\w\.-]+)/i],[c,[u,"Firefox"]],[/version\/([\w\.]+).+?mobile\/\w+\s(safari)/i],[c,[u,"Mobile Safari"]],[/version\/([\w\.]+).+?(mobile\s?safari|safari)/i],[c,u],[/webkit.+?(gsa)\/([\w\.]+).+?(mobile\s?safari|safari)(\/[\w\.]+)/i],[[u,"GSA"],c],[/webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i],[u,[c,h.str,m.browser.oldsafari.version]],[/(konqueror)\/([\w\.]+)/i,/(webkit|khtml)\/([\w\.]+)/i],[u,c],[/(navigator|netscape)\/([\w\.-]+)/i],[[u,"Netscape"],c],[/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,/(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([\w\.-]+)$/i,/(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,/(links)\s\(([\w\.]+)/i,/(gobrowser)\/?([\w\.]*)/i,/(ice\s?browser)\/v?([\w\._]+)/i,/(mosaic)[\/\s]([\w\.]+)/i],[u,c]],cpu:[[/(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i],[["architecture","amd64"]],[/(ia32(?=;))/i],[["architecture",d.lowerize]],[/((?:i[346]|x)86)[;\)]/i],[["architecture","ia32"]],[/windows\s(ce|mobile);\sppc;/i],[["architecture","arm"]],[/((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i],[["architecture",/ower/,"",d.lowerize]],[/(sun4\w)[;\)]/i],[["architecture","sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+;))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i],[["architecture",d.lowerize]]],device:[[/\((ipad|playbook);[\w\s\);-]+(rim|apple)/i],[i,s,[l,p]],[/applecoremedia\/[\w\.]+ \((ipad)/],[i,[s,"Apple"],[l,p]],[/(apple\s{0,1}tv)/i],[[i,"Apple TV"],[s,"Apple"]],[/(archos)\s(gamepad2?)/i,/(hp).+(touchpad)/i,/(hp).+(tablet)/i,/(kindle)\/([\w\.]+)/i,/\s(nook)[\w\s]+build\/(\w+)/i,/(dell)\s(strea[kpr\s\d]*[\dko])/i],[s,i,[l,p]],[/(kf[A-z]+)\sbuild\/.+silk\//i],[i,[s,"Amazon"],[l,p]],[/(sd|kf)[0349hijorstuw]+\sbuild\/.+silk\//i],[[i,h.str,m.device.amazon.model],[s,"Amazon"],[l,f]],[/\((ip[honed|\s\w*]+);.+(apple)/i],[i,s,[l,f]],[/\((ip[honed|\s\w*]+);/i],[i,[s,"Apple"],[l,f]],[/(blackberry)[\s-]?(\w+)/i,/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[\s_-]?([\w-]*)/i,/(hp)\s([\w\s]+\w)/i,/(asus)-?(\w+)/i],[s,i,[l,f]],[/\(bb10;\s(\w+)/i],[i,[s,"BlackBerry"],[l,f]],[/android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone)/i],[i,[s,"Asus"],[l,p]],[/(sony)\s(tablet\s[ps])\sbuild\//i,/(sony)?(?:sgp.+)\sbuild\//i],[[s,"Sony"],[i,"Xperia Tablet"],[l,p]],[/android.+\s([c-g]\d{4}|so[-l]\w+)\sbuild\//i],[i,[s,"Sony"],[l,f]],[/\s(ouya)\s/i,/(nintendo)\s([wids3u]+)/i],[s,i,[l,"console"]],[/android.+;\s(shield)\sbuild/i],[i,[s,"Nvidia"],[l,"console"]],[/(playstation\s[34portablevi]+)/i],[i,[s,"Sony"],[l,"console"]],[/(sprint\s(\w+))/i],[[s,h.str,m.device.sprint.vendor],[i,h.str,m.device.sprint.model],[l,f]],[/(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i],[s,i,[l,p]],[/(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i,/(zte)-(\w*)/i,/(alcatel|geeksphone|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]*)/i],[s,[i,/_/g," "],[l,f]],[/(nexus\s9)/i],[i,[s,"HTC"],[l,p]],[/d\/huawei([\w\s-]+)[;\)]/i,/(nexus\s6p)/i],[i,[s,"Huawei"],[l,f]],[/(microsoft);\s(lumia[\s\w]+)/i],[s,i,[l,f]],[/[\s\(;](xbox(?:\sone)?)[\s\);]/i],[i,[s,"Microsoft"],[l,"console"]],[/(kin\.[onetw]{3})/i],[[i,/\./g," "],[s,"Microsoft"],[l,f]],[/\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?:?(\s4g)?)[\w\s]+build\//i,/mot[\s-]?(\w*)/i,/(XT\d{3,4}) build\//i,/(nexus\s6)/i],[i,[s,"Motorola"],[l,f]],[/android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i],[i,[s,"Motorola"],[l,p]],[/hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i],[[s,d.trim],[i,d.trim],[l,"smarttv"]],[/hbbtv.+maple;(\d+)/i],[[i,/^/,"SmartTV"],[s,"Samsung"],[l,"smarttv"]],[/\(dtv[\);].+(aquos)/i],[i,[s,"Sharp"],[l,"smarttv"]],[/android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i,/((SM-T\w+))/i],[[s,"Samsung"],i,[l,p]],[/smart-tv.+(samsung)/i],[s,[l,"smarttv"],i],[/((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i,/(sam[sung]*)[\s-]*(\w+-?[\w-]*)/i,/sec-((sgh\w+))/i],[[s,"Samsung"],i,[l,f]],[/sie-(\w*)/i],[i,[s,"Siemens"],[l,f]],[/(maemo|nokia).*(n900|lumia\s\d+)/i,/(nokia)[\s_-]?([\w-]*)/i],[[s,"Nokia"],i,[l,f]],[/android\s3\.[\s\w;-]{10}(a\d{3})/i],[i,[s,"Acer"],[l,p]],[/android.+([vl]k\-?\d{3})\s+build/i],[i,[s,"LG"],[l,p]],[/android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i],[[s,"LG"],i,[l,p]],[/(lg) netcast\.tv/i],[s,i,[l,"smarttv"]],[/(nexus\s[45])/i,/lg[e;\s\/-]+(\w*)/i,/android.+lg(\-?[\d\w]+)\s+build/i],[i,[s,"LG"],[l,f]],[/android.+(ideatab[a-z0-9\-\s]+)/i],[i,[s,"Lenovo"],[l,p]],[/linux;.+((jolla));/i],[s,i,[l,f]],[/((pebble))app\/[\d\.]+\s/i],[s,i,[l,"wearable"]],[/android.+;\s(oppo)\s?([\w\s]+)\sbuild/i],[s,i,[l,f]],[/crkey/i],[[i,"Chromecast"],[s,"Google"]],[/android.+;\s(glass)\s\d/i],[i,[s,"Google"],[l,"wearable"]],[/android.+;\s(pixel c)\s/i],[i,[s,"Google"],[l,p]],[/android.+;\s(pixel xl|pixel)\s/i],[i,[s,"Google"],[l,f]],[/android.+;\s(\w+)\s+build\/hm\1/i,/android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i,/android.+(mi[\s\-_]*(?:one|one[\s_]plus|note lte)?[\s_]*(?:\d?\w?)[\s_]*(?:plus)?)\s+build/i,/android.+(redmi[\s\-_]*(?:note)?(?:[\s_]*[\w\s]+))\s+build/i],[[i,/_/g," "],[s,"Xiaomi"],[l,f]],[/android.+(mi[\s\-_]*(?:pad)(?:[\s_]*[\w\s]+))\s+build/i],[[i,/_/g," "],[s,"Xiaomi"],[l,p]],[/android.+;\s(m[1-5]\snote)\sbuild/i],[i,[s,"Meizu"],[l,p]],[/android.+a000(1)\s+build/i,/android.+oneplus\s(a\d{4})\s+build/i],[i,[s,"OnePlus"],[l,f]],[/android.+[;\/]\s*(RCT[\d\w]+)\s+build/i],[i,[s,"RCA"],[l,p]],[/android.+[;\/\s]+(Venue[\d\s]{2,7})\s+build/i],[i,[s,"Dell"],[l,p]],[/android.+[;\/]\s*(Q[T|M][\d\w]+)\s+build/i],[i,[s,"Verizon"],[l,p]],[/android.+[;\/]\s+(Barnes[&\s]+Noble\s+|BN[RT])(V?.*)\s+build/i],[[s,"Barnes & Noble"],i,[l,p]],[/android.+[;\/]\s+(TM\d{3}.*\b)\s+build/i],[i,[s,"NuVision"],[l,p]],[/android.+;\s(k88)\sbuild/i],[i,[s,"ZTE"],[l,p]],[/android.+[;\/]\s*(gen\d{3})\s+build.*49h/i],[i,[s,"Swiss"],[l,f]],[/android.+[;\/]\s*(zur\d{3})\s+build/i],[i,[s,"Swiss"],[l,p]],[/android.+[;\/]\s*((Zeki)?TB.*\b)\s+build/i],[i,[s,"Zeki"],[l,p]],[/(android).+[;\/]\s+([YR]\d{2})\s+build/i,/android.+[;\/]\s+(Dragon[\-\s]+Touch\s+|DT)(\w{5})\sbuild/i],[[s,"Dragon Touch"],i,[l,p]],[/android.+[;\/]\s*(NS-?\w{0,9})\sbuild/i],[i,[s,"Insignia"],[l,p]],[/android.+[;\/]\s*((NX|Next)-?\w{0,9})\s+build/i],[i,[s,"NextBook"],[l,p]],[/android.+[;\/]\s*(Xtreme\_)?(V(1[045]|2[015]|30|40|60|7[05]|90))\s+build/i],[[s,"Voice"],i,[l,f]],[/android.+[;\/]\s*(LVTEL\-)?(V1[12])\s+build/i],[[s,"LvTel"],i,[l,f]],[/android.+[;\/]\s*(V(100MD|700NA|7011|917G).*\b)\s+build/i],[i,[s,"Envizen"],[l,p]],[/android.+[;\/]\s*(Le[\s\-]+Pan)[\s\-]+(\w{1,9})\s+build/i],[s,i,[l,p]],[/android.+[;\/]\s*(Trio[\s\-]*.*)\s+build/i],[i,[s,"MachSpeed"],[l,p]],[/android.+[;\/]\s*(Trinity)[\-\s]*(T\d{3})\s+build/i],[s,i,[l,p]],[/android.+[;\/]\s*TU_(1491)\s+build/i],[i,[s,"Rotor"],[l,p]],[/android.+(KS(.+))\s+build/i],[i,[s,"Amazon"],[l,p]],[/android.+(Gigaset)[\s\-]+(Q\w{1,9})\s+build/i],[s,i,[l,p]],[/\s(tablet|tab)[;\/]/i,/\s(mobile)(?:[;\/]|\ssafari)/i],[[l,d.lowerize],s,i],[/(android[\w\.\s\-]{0,9});.+build/i],[i,[s,"Generic"]]],engine:[[/windows.+\sedge\/([\w\.]+)/i],[c,[u,"EdgeHTML"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i,/(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,/(icab)[\/\s]([23]\.[\d\.]+)/i],[u,c],[/rv\:([\w\.]{1,9}).+(gecko)/i],[c,u]],os:[[/microsoft\s(windows)\s(vista|xp)/i],[u,c],[/(windows)\snt\s6\.2;\s(arm)/i,/(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s\w]*)/i,/(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i],[u,[c,h.str,m.os.windows.version]],[/(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i],[[u,"Windows"],[c,h.str,m.os.windows.version]],[/\((bb)(10);/i],[[u,"BlackBerry"],c],[/(blackberry)\w*\/?([\w\.]*)/i,/(tizen)[\/\s]([\w\.]+)/i,/(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]*)/i,/linux;.+(sailfish);/i],[u,c],[/(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]*)/i],[[u,"Symbian"],c],[/\((series40);/i],[u],[/mozilla.+\(mobile;.+gecko.+firefox/i],[[u,"Firefox OS"],c],[/(nintendo|playstation)\s([wids34portablevu]+)/i,/(mint)[\/\s\(]?(\w*)/i,/(mageia|vectorlinux)[;\s]/i,/(joli|[kxln]?ubuntu|debian|suse|opensuse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]*)/i,/(hurd|linux)\s?([\w\.]*)/i,/(gnu)\s?([\w\.]*)/i],[u,c],[/(cros)\s[\w]+\s([\w\.]+\w)/i],[[u,"Chromium OS"],c],[/(sunos)\s?([\w\.\d]*)/i],[[u,"Solaris"],c],[/\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]*)/i],[u,c],[/(haiku)\s(\w+)/i],[u,c],[/cfnetwork\/.+darwin/i,/ip[honead]{2,4}(?:.*os\s([\w]+)\slike\smac|;\sopera)/i],[[c,/_/g,"."],[u,"iOS"]],[/(mac\sos\sx)\s?([\w\s\.]*)/i,/(macintosh|mac(?=_powerpc)\s)/i],[[u,"Mac OS"],[c,/_/g,"."]],[/((?:open)?solaris)[\/\s-]?([\w\.]*)/i,/(aix)\s((\d)(?=\.|\)|\s)[\w\.])*/i,/(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i,/(unix)\s?([\w\.]*)/i],[u,c]]},_=function(e,t){if("object"==typeof e&&(t=e,e=void 0),!(this instanceof _))return new _(e,t).getResult();var n=e||(o&&o.navigator&&o.navigator.userAgent?o.navigator.userAgent:""),r=t?d.extend(y,t):y;return this.getBrowser=function(){var e={name:void 0,version:void 0};return h.rgx.call(e,n,r.browser),e.major=d.major(e.version),e},this.getCPU=function(){var e={architecture:void 0};return h.rgx.call(e,n,r.cpu),e},this.getDevice=function(){var e={vendor:void 0,model:void 0,type:void 0};return h.rgx.call(e,n,r.device),e},this.getEngine=function(){var e={name:void 0,version:void 0};return h.rgx.call(e,n,r.engine),e},this.getOS=function(){var e={name:void 0,version:void 0};return h.rgx.call(e,n,r.os),e},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return n},this.setUA=function(e){return n=e,this},this};_.VERSION="0.7.18",_.BROWSER={NAME:u,MAJOR:"major",VERSION:c},_.CPU={ARCHITECTURE:"architecture"},_.DEVICE={MODEL:i,VENDOR:s,TYPE:l,CONSOLE:"console",MOBILE:f,SMARTTV:"smarttv",TABLET:p,WEARABLE:"wearable",EMBEDDED:"embedded"},_.ENGINE={NAME:u,VERSION:c},_.OS={NAME:u,VERSION:c},void 0!==t?(void 0!==e&&e.exports&&(t=e.exports=_),t.UAParser=_):n(208)?void 0===(r=function(){return _}.call(t,n,t,e))||(e.exports=r):o&&(o.UAParser=_);var g=o&&(o.jQuery||o.Zepto);if(void 0!==g){var v=new _;g.ua=v.getResult(),g.ua.get=function(){return v.getUA()},g.ua.set=function(e){v.setUA(e);var t=v.getResult();for(var n in t)g.ua[n]=t[n]}}}("object"==typeof window?window:this)},function(e,t,n){"use strict";var r="Unknown",o={"Mac OS":"Mac OS X"};var a,i=(new(n(209))).getResult(),u=function(e){if(!e)return{major:"",minor:""};var t=e.split(".");return{major:t[0],minor:t[1]}}(i.browser.version),l={browserArchitecture:i.cpu.architecture||r,browserFullVersion:i.browser.version||r,browserMinorVersion:u.minor||r,browserName:i.browser.name||r,browserVersion:i.browser.major||r,deviceName:i.device.model||r,engineName:i.engine.name||r,engineVersion:i.engine.version||r,platformArchitecture:i.cpu.architecture||r,platformName:(a=i.os.name,o[a]||a||r),platformVersion:i.os.version||r,platformFullVersion:i.os.version||r};e.exports=l},function(e,t,n){"use strict";var r=n(1),o=n(8),a=n(21),i=n(4),u=a.isBrowser("IE <= 11");var l=u?r.createElement("span",{key:"A","data-text":"true"},"\n"):r.createElement("br",{key:"A","data-text":"true"}),s=u?r.createElement("span",{key:"B","data-text":"true"},"\n"):r.createElement("br",{key:"B","data-text":"true"}),c=function(e){function t(n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n));return r._forceFlag=!1,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.shouldComponentUpdate=function(e){var t=o.findDOMNode(this),n=""===e.children;return t instanceof Element||i(!1),n?!function(e){return u?"\n"===e.textContent:"BR"===e.tagName}(t):t.textContent!==e.children},t.prototype.componentDidMount=function(){this._forceFlag=!this._forceFlag},t.prototype.componentDidUpdate=function(){this._forceFlag=!this._forceFlag},t.prototype.render=function(){return""===this.props.children?this._forceFlag?l:s:r.createElement("span",{key:this._forceFlag?"A":"B","data-text":"true"},this.props.children)},t}(r.Component);e.exports=c},function(e,t,n){"use strict";var r=n(15);var o=n(211),a=n(1),i=n(8),u=n(4),l=n(204),s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype._setSelection=function(){var e=this.props.selection;if(null!=e&&e.getHasFocus()){var t=this.props,n=t.block,r=t.start,o=t.text,a=n.getKey(),s=r+o.length;if(e.hasEdgeWithin(a,r,s)){var c=i.findDOMNode(this);c||u(!1);var f=c.firstChild;f||u(!1);var p=void 0;f.nodeType===Node.TEXT_NODE?p=f:"BR"===f.tagName?p=c:(p=f.firstChild)||u(!1),l(e,p,a,r,s)}}},t.prototype.shouldComponentUpdate=function(e){var t=i.findDOMNode(this.leaf);return t||u(!1),t.textContent!==e.text||e.styleSet!==this.props.styleSet||e.forceSelection},t.prototype.componentDidUpdate=function(){this._setSelection()},t.prototype.componentDidMount=function(){this._setSelection()},t.prototype.render=function(){var e=this,t=this.props.block,n=this.props.text;n.endsWith("\n")&&this.props.isLast&&(n+="\n");var i=this.props,u=i.customStyleMap,l=i.customStyleFn,s=i.offsetKey,c=i.styleSet,f=c.reduce(function(e,t){var n={},o=u[t];return void 0!==o&&e.textDecoration!==o.textDecoration&&(n.textDecoration=[e.textDecoration,o.textDecoration].join(" ").trim()),r(e,o,n)},{});if(l){var p=l(c,t);f=r(f,p)}return a.createElement("span",{"data-offset-key":s,ref:function(t){return e.leaf=t},style:f},a.createElement(o,null,n))},t}(a.Component);e.exports=s},function(e,t,n){"use strict";var r=n(15)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var o=n(83),a=n(36),i=(n(6),n(1)),u=n(28),l=n(194),s=n(19),c=function(e,t,n,r){return u({"public/DraftStyleDefault/unorderedListItem":"unordered-list-item"===e,"public/DraftStyleDefault/orderedListItem":"ordered-list-item"===e,"public/DraftStyleDefault/reset":n,"public/DraftStyleDefault/depth0":0===t,"public/DraftStyleDefault/depth1":1===t,"public/DraftStyleDefault/depth2":2===t,"public/DraftStyleDefault/depth3":3===t,"public/DraftStyleDefault/depth4":4===t,"public/DraftStyleDefault/listLTR":"LTR"===r,"public/DraftStyleDefault/listRTL":"RTL"===r})},f=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.shouldComponentUpdate=function(e){var t=this.props.editorState,n=e.editorState;if(t.getDirectionMap()!==n.getDirectionMap())return!0;if(t.getSelection().getHasFocus()!==n.getSelection().getHasFocus())return!0;var r=n.getNativelyRenderedContent(),o=t.isInCompositionMode(),a=n.isInCompositionMode();if(t===n||null!==r&&n.getCurrentContent()===r||o&&a)return!1;var i=t.getCurrentContent(),u=n.getCurrentContent(),l=t.getDecorator(),s=n.getDecorator();return o!==a||i!==u||l!==s||n.mustForceSelection()},t.prototype.render=function(){for(var e=this.props,t=e.blockRenderMap,n=e.blockRendererFn,u=e.blockStyleFn,f=e.customStyleMap,p=e.customStyleFn,d=e.editorState,h=e.editorKey,m=e.textDirectionality,y=d.getCurrentContent(),_=d.getSelection(),g=d.mustForceSelection(),v=d.getDecorator(),b=s(d.getDirectionMap()),w=y.getBlocksAsArray(),E=[],C=null,S=null,k=0;k<w.length;k++){var x=w[k],O=x.getKey(),T=x.getType(),j=n(x),R=void 0,M=void 0,D=void 0;j&&(R=j.component,M=j.props,D=j.editable);var N=m||b.get(O),P=a.encode(O,0,0),L={contentState:y,block:x,blockProps:M,blockStyleFn:u,customStyleMap:f,customStyleFn:p,decorator:v,direction:N,forceSelection:g,key:O,offsetKey:P,selection:_,tree:d.getBlockTree(O)},I=t.get(T)||t.get("unstyled"),A=I.wrapper,U=I.element||t.get("unstyled").element,F=x.getDepth(),B="";if(u&&(B=u(x)),"li"===U)B=l(B,c(T,F,S!==A||null===C||F>C,N));var q=R||o,K={className:B,"data-block":!0,"data-editor":h,"data-offset-key":P,key:O};void 0!==D&&(K=r({},K,{contentEditable:D,suppressContentEditableWarning:!0}));var H=i.createElement(U,K,i.createElement(q,L));E.push({block:H,wrapperTemplate:A,key:O,offsetKey:P}),C=A?x.getDepth():null,S=A}for(var J=[],z=0;z<E.length;){var W=E[z];if(W.wrapperTemplate){var V=[];do{V.push(E[z].block),z++}while(z<E.length&&E[z].wrapperTemplate===W.wrapperTemplate);var $=i.cloneElement(W.wrapperTemplate,{key:W.key+"-wrap","data-offset-key":W.offsetKey},V);J.push($)}else J.push(W.block),z++}return i.createElement("div",{"data-contents":"true"},J)},t}(i.Component);e.exports=f},function(e,t,n){"use strict";var r=n(213);e.exports=r},function(e,t,n){"use strict";var r=n(24),o=n(12),a=n(6),i=n(48),u=n(47),l=n(33),s=n(84),c=!1,f=!1,p="",d={onBeforeInput:function(e,t){p=(p||"")+t.data},onCompositionStart:function(e){f=!0},onCompositionEnd:function(e){c=!1,f=!1,setTimeout(function(){c||d.resolveComposition(e)},20)},onKeyDown:function(e,t){if(!f)return d.resolveComposition(e),void e._onKeyDown(t);t.which!==i.RIGHT&&t.which!==i.LEFT||t.preventDefault()},onKeyPress:function(e,t){t.which===i.RETURN&&t.preventDefault()},resolveComposition:function(e){if(!f){c=!0;var t=p;p="";var n=a.set(e._latestEditorState,{inCompositionMode:!1}),i=n.getCurrentInlineStyle(),d=u(n.getCurrentContent(),n.getSelection()),h=!t||s(n)||i.size>0||null!==d;if(h&&e.restoreEditorDOM(),e.exitCurrentMode(),t){if(r.draft_handlebeforeinput_composed_text&&e.props.handleBeforeInput&&l(e.props.handleBeforeInput(t,n)))return;var m=o.replaceText(n.getCurrentContent(),n.getSelection(),t,i,d);e.update(a.push(n,m,"insert-characters"))}else h&&e.update(a.set(n,{nativelyRenderedContent:null,forceSelection:!0}))}}};e.exports=d},function(e,t,n){"use strict";var r=n(15)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var o=n(49),a=n(85),i=n(215),u=n(214),l=n(193),s=n(190),c=n(157),f=n(6),p=n(1),d=n(8),h=n(82),m=n(46),y=n(21),_=n(28),g=n(31),v=n(23),b=n(69),w=n(45),E=n(4),C=n(19),S=y.isBrowser("IE"),k=!S,x={edit:s,composite:i,drag:l,cut:null,render:null},O=function(e){function t(n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n));return r.focus=function(e){var t=r.props.editorState,n=t.getSelection().getHasFocus(),o=d.findDOMNode(r.editor);if(o){var a=m.getScrollParent(o),i=e||w(a),u=i.x,l=i.y;o instanceof HTMLElement||E(!1),o.focus(),a===window?window.scrollTo(u,l):h.setTop(a,l),n||r.update(f.forceSelection(t,t.getSelection()))}},r.blur=function(){var e=d.findDOMNode(r.editor);e instanceof HTMLElement||E(!1),e.blur()},r.setMode=function(e){r._handler=x[e]},r.exitCurrentMode=function(){r.setMode("edit")},r.restoreEditorDOM=function(e){r.setState({contentsKey:r.state.contentsKey+1},function(){r.focus(e)})},r.setClipboard=function(e){r._clipboard=e},r.getClipboard=function(){return r._clipboard},r.update=function(e){r._latestEditorState=e,r.props.onChange(e)},r.onDragEnter=function(){r._dragCount++},r.onDragLeave=function(){r._dragCount--,0===r._dragCount&&r.exitCurrentMode()},r._blockSelectEvents=!1,r._clipboard=null,r._handler=null,r._dragCount=0,r._editorKey=n.editorKey||v(),r._placeholderAccessibilityID="placeholder-"+r._editorKey,r._latestEditorState=n.editorState,r._latestCommittedEditorState=n.editorState,r._onBeforeInput=r._buildHandler("onBeforeInput"),r._onBlur=r._buildHandler("onBlur"),r._onCharacterData=r._buildHandler("onCharacterData"),r._onCompositionEnd=r._buildHandler("onCompositionEnd"),r._onCompositionStart=r._buildHandler("onCompositionStart"),r._onCopy=r._buildHandler("onCopy"),r._onCut=r._buildHandler("onCut"),r._onDragEnd=r._buildHandler("onDragEnd"),r._onDragOver=r._buildHandler("onDragOver"),r._onDragStart=r._buildHandler("onDragStart"),r._onDrop=r._buildHandler("onDrop"),r._onInput=r._buildHandler("onInput"),r._onFocus=r._buildHandler("onFocus"),r._onKeyDown=r._buildHandler("onKeyDown"),r._onKeyPress=r._buildHandler("onKeyPress"),r._onKeyUp=r._buildHandler("onKeyUp"),r._onMouseDown=r._buildHandler("onMouseDown"),r._onMouseUp=r._buildHandler("onMouseUp"),r._onPaste=r._buildHandler("onPaste"),r._onSelect=r._buildHandler("onSelect"),r.getEditorKey=function(){return r._editorKey},r.state={contentsKey:0},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype._buildHandler=function(e){var t=this;return function(n){if(!t.props.readOnly){var r=t._handler&&t._handler[e];r&&r(t,n)}}},t.prototype._showPlaceholder=function(){return!!this.props.placeholder&&!this.props.editorState.isInCompositionMode()&&!this.props.editorState.getCurrentContent().hasText()},t.prototype._renderPlaceholder=function(){if(this._showPlaceholder()){var e={text:C(this.props.placeholder),editorState:this.props.editorState,textAlignment:this.props.textAlignment,accessibilityID:this._placeholderAccessibilityID};return p.createElement(c,e)}return null},t.prototype.render=function(){var e=this,t=this.props,n=t.blockRenderMap,o=t.blockRendererFn,i=t.blockStyleFn,l=t.customStyleFn,s=t.customStyleMap,c=t.editorState,f=t.readOnly,d=t.textAlignment,h=t.textDirectionality,m=_({"DraftEditor/root":!0,"DraftEditor/alignLeft":"left"===d,"DraftEditor/alignRight":"right"===d,"DraftEditor/alignCenter":"center"===d}),y=this.props.role||"textbox",g="combobox"===y?!!this.props.ariaExpanded:null,v={blockRenderMap:n,blockRendererFn:o,blockStyleFn:i,customStyleMap:r({},a,s),customStyleFn:l,editorKey:this._editorKey,editorState:c,key:"contents"+this.state.contentsKey,textDirectionality:h};return p.createElement("div",{className:m},this._renderPlaceholder(),p.createElement("div",{className:_("DraftEditor/editorContainer"),ref:function(t){return e.editorContainer=t}},p.createElement("div",{"aria-activedescendant":f?null:this.props.ariaActiveDescendantID,"aria-autocomplete":f?null:this.props.ariaAutoComplete,"aria-controls":f?null:this.props.ariaControls,"aria-describedby":this.props.ariaDescribedBy||this._placeholderAccessibilityID,"aria-expanded":f?null:g,"aria-label":this.props.ariaLabel,"aria-labelledby":this.props.ariaLabelledBy,"aria-multiline":this.props.ariaMultiline,autoCapitalize:this.props.autoCapitalize,autoComplete:this.props.autoComplete,autoCorrect:this.props.autoCorrect,className:_({notranslate:!f,"public/DraftEditor/content":!0}),contentEditable:!f,"data-testid":this.props.webDriverTestID,onBeforeInput:this._onBeforeInput,onBlur:this._onBlur,onCompositionEnd:this._onCompositionEnd,onCompositionStart:this._onCompositionStart,onCopy:this._onCopy,onCut:this._onCut,onDragEnd:this._onDragEnd,onDragEnter:this.onDragEnter,onDragLeave:this.onDragLeave,onDragOver:this._onDragOver,onDragStart:this._onDragStart,onDrop:this._onDrop,onFocus:this._onFocus,onInput:this._onInput,onKeyDown:this._onKeyDown,onKeyPress:this._onKeyPress,onKeyUp:this._onKeyUp,onMouseUp:this._onMouseUp,onPaste:this._onPaste,onSelect:this._onSelect,ref:function(t){return e.editor=t},role:f?null:y,spellCheck:k&&this.props.spellCheck,style:{outline:"none",userSelect:"text",WebkitUserSelect:"text",whiteSpace:"pre-wrap",wordWrap:"break-word"},suppressContentEditableWarning:!0,tabIndex:this.props.tabIndex},p.createElement(u,v))))},t.prototype.componentDidMount=function(){this.setMode("edit"),S&&document.execCommand("AutoUrlDetect",!1,!1)},t.prototype.componentWillUpdate=function(e){this._blockSelectEvents=!0,this._latestEditorState=e.editorState},t.prototype.componentDidUpdate=function(){this._blockSelectEvents=!1,this._latestCommittedEditorState=this.props.editorState},t}(p.Component);O.defaultProps={blockRenderMap:o,blockRendererFn:g.thatReturnsNull,blockStyleFn:g.thatReturns(""),keyBindingFn:b,readOnly:!1,spellCheck:!1,stripPastedStyles:!1},e.exports=O},function(e,t,n){"use strict";var r=n(5).List,o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._decorators=t.slice()}return e.prototype.getDecorations=function(e,t){var n=Array(e.getText().length).fill(null);return this._decorators.forEach(function(r,o){var a=0;(0,r.strategy)(e,function(e,t){(function(e,t,n){for(var r=t;r<n;r++)if(null!=e[r])return!1;return!0})(n,e,t)&&(function(e,t,n,r){for(var o=t;o<n;o++)e[o]=r}(n,e,t,o+"."+a),a++)},t)}),r(n)},e.prototype.getComponentForKey=function(e){var t=parseInt(e.split(".")[0],10);return this._decorators[t].component},e.prototype.getPropsForKey=function(e){var t=parseInt(e.split(".")[0],10);return this._decorators[t].props},e}();e.exports=o},function(e,t,n){"use strict";var r=n(17),o=n(5),a=n(89),i=n(4),u=o.OrderedMap,l=o.List,s=function(e,t,n){if(e){var r=t.get(e);r&&t.set(e,n(r))}};e.exports=function(e,t,n,o){"replace"===o&&i(!1);var c=n.getKey(),f=t.getKey();f===c&&i(!1);var p=e.getBlockMap(),d=t instanceof r,h=[t],m=p.delete(f);d&&(h=[],m=p.withMutations(function(e){var n=t.getNextSiblingKey(),r=a(t,e);e.toSeq().skipUntil(function(e){return e.getKey()===f}).takeWhile(function(e){var t=e.getKey(),o=t===f,a=n&&t!==n,i=!n&&e.getParentKey()&&(!r||t!==r);return!!(o||a||i)}).forEach(function(t){h.push(t),e.delete(t.getKey())})}));var y=m.toSeq().takeUntil(function(e){return e===n}),_=m.toSeq().skipUntil(function(e){return e===n}).skip(1),g=h.map(function(e){return[e.getKey(),e]}),v=u();if("before"===o){var b=e.getBlockBefore(c);b&&b.getKey()===t.getKey()&&i(!1),v=y.concat([].concat(g,[[c,n]]),_).toOrderedMap()}else if("after"===o){var w=e.getBlockAfter(c);w&&w.getKey()===f&&i(!1),v=y.concat([[c,n]].concat(g),_).toOrderedMap()}return e.merge({blockMap:function(e,t,n,r,o){if(!o)return e;var a="after"===r,i=t.getKey(),u=n.getKey(),c=t.getParentKey(),f=t.getNextSiblingKey(),p=t.getPrevSiblingKey(),d=n.getParentKey(),h=a?n.getNextSiblingKey():u,m=a?u:n.getPrevSiblingKey();return e.withMutations(function(e){s(c,e,function(e){var t=e.getChildKeys();return e.merge({children:t.delete(t.indexOf(i))})}),s(p,e,function(e){return e.merge({nextSibling:f})}),s(f,e,function(e){return e.merge({prevSibling:p})}),s(h,e,function(e){return e.merge({prevSibling:i})}),s(m,e,function(e){return e.merge({nextSibling:i})}),s(d,e,function(e){var t=e.getChildKeys(),n=t.indexOf(u),r=a?n+1:0!==n?n-1:0,o=t.toArray();return o.splice(r,0,i),e.merge({children:l(o)})}),s(i,e,function(e){return e.merge({nextSibling:h,prevSibling:m,parent:d})})})}(v,t,n,o,d),selectionBefore:e.getSelectionAfter(),selectionAfter:e.getSelectionAfter().merge({anchorKey:f,focusKey:f})})}},function(e,t,n){"use strict";var r=n(86),o=n(50),a=n(4),i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t?o.isStrong(t)||a(!1):t=o.getGlobalDir(),this._defaultDir=t,this.reset()}return e.prototype.reset=function(){this._lastDir=this._defaultDir},e.prototype.getDirection=function(e){return this._lastDir=r.getDirection(e,this._lastDir),this._lastDir},e}();e.exports=i},function(e,t,n){"use strict";var r,o=n(5),a=n(219),i=n(19),u=o.OrderedMap,l={getDirectionMap:function(e,t){r?r.reset():r=new a;var n=e.getBlockMap(),l=n.valueSeq().map(function(e){return i(r).getDirection(e.getText())}),s=u(n.keySeq().zip(l));return null!=t&&o.is(t,s)?t:s}};e.exports=l},function(e,t,n){"use strict";var r=n(17),o=n(5),a=n(23),i=n(4),u=o.List,l=o.Map,s=function(e,t,n){if(e){var r=t.get(e);r&&t.set(e,n(r))}};e.exports=function(e,t){t.isCollapsed()||i(!1);var n=t.getAnchorKey(),o=t.getAnchorOffset(),c=e.getBlockMap(),f=c.get(n),p=f.getText(),d=f.getCharacterList(),h=a(),m=f instanceof r,y=f.merge({text:p.slice(0,o),characterList:d.slice(0,o)}),_=y.merge({key:h,text:p.slice(o),characterList:d.slice(o),data:l()}),g=c.toSeq().takeUntil(function(e){return e===f}),v=c.toSeq().skipUntil(function(e){return e===f}).rest(),b=g.concat([[n,y],[h,_]],v).toOrderedMap();return m&&(f.getChildKeys().isEmpty()||i(!1),b=function(e,t,n){return e.withMutations(function(e){var r=t.getKey(),o=n.getKey();s(t.getParentKey(),e,function(e){var t=e.getChildKeys(),n=t.indexOf(r)+1,a=t.toArray();return a.splice(n,0,o),e.merge({children:u(a)})}),s(t.getNextSiblingKey(),e,function(e){return e.merge({prevSibling:o})}),s(r,e,function(e){return e.merge({nextSibling:o})}),s(o,e,function(e){return e.merge({prevSibling:r})})})}(b,y,_)),e.merge({blockMap:b,selectionBefore:t,selectionAfter:t.merge({anchorKey:h,anchorOffset:0,focusKey:h,focusOffset:0,isBackward:!1})})}},function(e,t,n){"use strict";var r=n(17),o=n(5),a=n(89),i=(o.List,o.Map),u=function(e,t,n){if(e){var r=t.get(e);r&&t.set(e,n(r))}},l=function(e,t){var n=[];if(!e)return n;for(var r=t.get(e);r&&r.getParentKey();){var o=r.getParentKey();o&&n.push(o),r=o?t.get(o):null}return n},s=function(e,t,n){if(!e)return null;for(var r=n.get(e.getKey()).getNextSiblingKey();r&&!t.get(r);)r=n.get(r).getNextSiblingKey()||null;return r},c=function(e,t,n){if(!e)return null;for(var r=n.get(e.getKey()).getPrevSiblingKey();r&&!t.get(r);)r=n.get(r).getPrevSiblingKey()||null;return r},f=function(e,t,n,r){return e.withMutations(function(e){u(t.getKey(),e,function(n){return n.merge({nextSibling:s(t,e,r),prevSibling:c(t,e,r)})}),u(n.getKey(),e,function(t){return t.merge({nextSibling:s(n,e,r),prevSibling:c(n,e,r)})}),l(t.getKey(),r).forEach(function(t){return u(t,e,function(t){return t.merge({children:t.getChildKeys().filter(function(t){return e.get(t)}),nextSibling:s(t,e,r),prevSibling:c(t,e,r)})})}),u(t.getNextSiblingKey(),e,function(e){return e.merge({prevSibling:t.getPrevSiblingKey()})}),u(t.getPrevSiblingKey(),e,function(n){return n.merge({nextSibling:s(t,e,r)})}),u(n.getNextSiblingKey(),e,function(t){return t.merge({prevSibling:c(n,e,r)})}),u(n.getPrevSiblingKey(),e,function(e){return e.merge({nextSibling:n.getNextSiblingKey()})}),l(n.getKey(),r).forEach(function(t){u(t,e,function(t){return t.merge({children:t.getChildKeys().filter(function(t){return e.get(t)}),nextSibling:s(t,e,r),prevSibling:c(t,e,r)})})}),function(e,t){var n=[];if(!e)return n;for(var r=a(e,t);r&&t.get(r);){var o=t.get(r);n.push(r),r=o.getParentKey()?a(o,t):null}return n}(n,r).forEach(function(t){return u(t,e,function(t){return t.merge({nextSibling:s(t,e,r),prevSibling:c(t,e,r)})})})})},p=function(e,t,n){if(0===t)for(;t<n;)e=e.shift(),t++;else if(n===e.count())for(;n>t;)e=e.pop(),n--;else{var r=e.slice(0,t),o=e.slice(n);e=r.concat(o).toList()}return e};e.exports=function(e,t){if(t.isCollapsed())return e;var n=e.getBlockMap(),o=t.getStartKey(),u=t.getStartOffset(),s=t.getEndKey(),c=t.getEndOffset(),d=n.get(o),h=n.get(s),m=d instanceof r,y=[];if(m){var _=h.getChildKeys(),g=l(s,n);h.getNextSiblingKey()&&(y=y.concat(g)),_.isEmpty()||(y=y.concat(g.concat([s]))),y=y.concat(l(a(h,n),n))}var v=void 0;v=d===h?p(d.getCharacterList(),u,c):d.getCharacterList().slice(0,u).concat(h.getCharacterList().slice(c));var b=d.merge({text:d.getText().slice(0,u)+h.getText().slice(c),characterList:v}),w=n.toSeq().skipUntil(function(e,t){return t===o}).takeUntil(function(e,t){return t===s}).filter(function(e,t){return-1===y.indexOf(t)}).concat(i([[s,null]])).map(function(e,t){return t===o?b:null}),E=n.merge(w).filter(function(e){return!!e});return m&&(E=f(E,d,h,n)),e.merge({blockMap:E,selectionBefore:t,selectionAfter:t.merge({anchorKey:o,anchorOffset:u,focusKey:o,focusOffset:u,isBackward:!1})})}},function(e,t,n){"use strict";var r=n(5).Map;e.exports=function(e,t,n){var o=t.getStartKey(),a=t.getEndKey(),i=e.getBlockMap(),u=i.toSeq().skipUntil(function(e,t){return t===o}).takeUntil(function(e,t){return t===a}).concat(r([[a,i.get(a)]])).map(n);return e.merge({blockMap:i.merge(u),selectionBefore:t,selectionAfter:t})}},function(e,t,n){"use strict";var r=n(5),o=n(90),a=n(4),i=r.Repeat;e.exports=function(e,t,n,r){t.isCollapsed()||a(!1);var u=n.length;if(!u)return e;var l=e.getBlockMap(),s=t.getStartKey(),c=t.getStartOffset(),f=l.get(s),p=f.getText(),d=f.merge({text:p.slice(0,c)+n+p.slice(c,f.getLength()),characterList:o(f.getCharacterList(),i(r,u).toList(),c)}),h=c+u;return e.merge({blockMap:l.set(s,d),selectionAfter:t.merge({anchorOffset:h,focusOffset:h})})}},function(e,t,n){"use strict";var r=n(35),o=n(17),a=n(5),i=n(90),u=n(4),l=n(92),s=a.List,c=function(e,t,n,a,i,u){var l=n.first()instanceof o,c=[],f=a.size,p=n.get(i),d=a.first(),h=a.last(),m=h.getLength(),y=h.getKey(),_=l&&(!p.getChildKeys().isEmpty()||!d.getChildKeys().isEmpty());n.forEach(function(e,t){t===i?(_?c.push(e):c.push(function(e,t,n){var r=e.getText(),o=e.getCharacterList(),a=r.slice(0,t),i=o.slice(0,t),u=n.first();return e.merge({text:a+u.getText(),characterList:i.concat(u.getCharacterList()),type:a?e.getType():u.getType(),data:u.getData()})}(e,u,a)),a.slice(_?0:1,f-1).forEach(function(e){return c.push(e)}),c.push(function(e,t,n){var r=e.getText(),o=e.getCharacterList(),a=r.length,i=r.slice(t,a),u=o.slice(t,a),l=n.last();return l.merge({text:l.getText()+i,characterList:l.getCharacterList().concat(u),data:l.getData()})}(e,u,a))):c.push(e)});var g=r.createFromArray(c);return l&&(g=function(e,t,n,r){return e.withMutations(function(t){var o=n.getKey(),a=r.getKey(),i=n.getNextSiblingKey(),u=n.getParentKey(),l=function(e,t){var n=e.getKey(),r=e,o=[];for(t.get(n)&&o.push(n);r&&r.getNextSiblingKey();){var a=r.getNextSiblingKey();if(!a)break;o.push(a),r=t.get(a)}return o}(r,e),c=l[l.length-1];if(t.get(a)?(t.setIn([o,"nextSibling"],a),t.setIn([a,"prevSibling"],o)):(t.setIn([o,"nextSibling"],r.getNextSiblingKey()),t.setIn([r.getNextSiblingKey(),"prevSibling"],o)),t.setIn([c,"nextSibling"],i),i&&t.setIn([i,"prevSibling"],c),l.forEach(function(e){return t.setIn([e,"parent"],u)}),u){var f=e.get(u).getChildKeys(),p=f.indexOf(o)+1,d=f.toArray();d.splice.apply(d,[p,0].concat(l)),t.setIn([u,"children"],s(d))}})}(g,0,p,d)),e.merge({blockMap:g,selectionBefore:t,selectionAfter:t.merge({anchorKey:y,anchorOffset:m,focusKey:y,focusOffset:m,isBackward:!1})})};e.exports=function(e,t,n){t.isCollapsed()||u(!1);var r=e.getBlockMap(),a=l(n),s=t.getStartKey(),f=t.getStartOffset(),p=r.get(s);return p instanceof o&&(p.getChildKeys().isEmpty()||u(!1)),1===a.size?function(e,t,n,r,o,a){var u=n.get(o),l=u.getText(),s=u.getCharacterList(),c=o,f=a+r.getText().length,p=u.merge({text:l.slice(0,a)+r.getText()+l.slice(a),characterList:i(s,r.getCharacterList(),a),data:r.getData()});return e.merge({blockMap:n.set(o,p),selectionBefore:t,selectionAfter:t.merge({anchorKey:c,anchorOffset:f,focusKey:c,focusOffset:f,isBackward:!1})})}(e,t,r,a.first(),s,f):c(e,t,r,a,s,f)}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t){var n=[];return e.findEntityRanges(function(e){return e.getEntity()===t},function(e,t){n.push({start:e,end:t})}),n.length||r(!1),n}},function(e,t,n){"use strict";e.exports={getRemovalRange:function(e,t,n,r,o){var a=n.split(" ");a=a.map(function(e,t){if("forward"===o){if(t>0)return" "+e}else if(t<a.length-1)return e+" ";return e});for(var i,u=r,l=null,s=null,c=0;c<a.length;c++){if(e<(i=u+a[c].length)&&u<t)null!==l?s=i:(l=u,s=i);else if(null!==l)break;u=i}var f=r+n.length,p=l===r,d=s===f;return(!p&&d||p&&!d)&&("forward"===o?s!==f&&s++:l!==r&&l--),{start:l,end:s}}}},function(e,t,n){"use strict";var r=n(227),o=n(226),a=n(4);function i(e,t,n,i,u,l,s){var c=n.getStartOffset(),f=n.getEndOffset(),p=e.__get(u).getMutability(),d=s?c:f;if("MUTABLE"===p)return n;var h=o(t,u).filter(function(e){return d<=e.end&&d>=e.start});1!=h.length&&a(!1);var m=h[0];if("IMMUTABLE"===p)return n.merge({anchorOffset:m.start,focusOffset:m.end,isBackward:!1});l||(s?f=m.end:c=m.start);var y=r.getRemovalRange(c,f,t.getText().slice(m.start,m.end),m.start,i);return n.merge({anchorOffset:y.start,focusOffset:y.end,isBackward:!1})}e.exports=function(e,t,n,r,o){var a=r.getStartOffset(),u=r.getEndOffset(),l=t.getEntityAt(a),s=n.getEntityAt(u-1);if(!l&&!s)return r;var c=r;if(l&&l===s)c=i(e,t,c,o,l,!0,!0);else if(l&&s){var f=i(e,t,c,o,l,!1,!0),p=i(e,n,c,o,s,!1,!1);c=c.merge({anchorOffset:f.getAnchorOffset(),focusOffset:p.getFocusOffset(),isBackward:!1})}else if(l){var d=i(e,t,c,o,l,!1,!0);c=c.merge({anchorOffset:d.getStartOffset(),isBackward:!1})}else if(s){var h=i(e,n,c,o,s,!1,!1);c=c.merge({focusOffset:h.getEndOffset(),isBackward:!1})}return c}},function(e,t,n){"use strict";var r=n(16);e.exports=function(e,t,n,o){for(var a=e.getCharacterList();t<n;)a=a.set(t,r.applyEntity(a.get(t),o)),t++;return e.set("characterList",a)}},function(e,t,n){"use strict";var r=n(5),o=n(229);e.exports=function(e,t,n){var a=e.getBlockMap(),i=t.getStartKey(),u=t.getStartOffset(),l=t.getEndKey(),s=t.getEndOffset(),c=a.skipUntil(function(e,t){return t===i}).takeUntil(function(e,t){return t===l}).toOrderedMap().merge(r.OrderedMap([[l,a.get(l)]])).map(function(e,t){var r=t===i?u:0,a=t===l?s:e.getLength();return o(e,r,a,n)});return e.merge({blockMap:a.merge(c),selectionBefore:t,selectionAfter:t})}},function(e,t,n){"use strict";var r=n(16),o=n(5).Map,a={add:function(e,t,n){return i(e,t,n,!0)},remove:function(e,t,n){return i(e,t,n,!1)}};function i(e,t,n,a){var i=e.getBlockMap(),u=t.getStartKey(),l=t.getStartOffset(),s=t.getEndKey(),c=t.getEndOffset(),f=i.skipUntil(function(e,t){return t===u}).takeUntil(function(e,t){return t===s}).concat(o([[s,i.get(s)]])).map(function(e,t){var o,i;u===s?(o=l,i=c):(o=t===u?l:0,i=t===s?c:e.getLength());for(var f,p=e.getCharacterList();o<i;)f=p.get(o),p=p.set(o,a?r.applyStyle(f,n):r.removeStyle(f,n)),o++;return e.set("characterList",p)});return e.merge({blockMap:i.merge(f),selectionBefore:t,selectionAfter:t})}e.exports=a},function(e,t,n){"use strict";e.exports={draft_killswitch_allow_nontextnodes:!1,draft_segmented_entities_behavior:!1,draft_handlebeforeinput_composed_text:!1,draft_tree_data_support:!1}},function(e,t,n){"use strict";var r=n(15)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(35),a=n(16),i=n(27),u=n(17),l=n(24),s=n(12),c=n(6),f=n(5),p=(n(29),n(23)),d=n(218),h=l.draft_tree_data_support,m=h?u:i,y=f.List,_=f.Repeat,g={insertAtomicBlock:function(e,t,n){var i=e.getCurrentContent(),u=e.getSelection(),l=s.removeRange(i,u,"backward"),f=l.getSelectionAfter(),d=s.splitBlock(l,f),g=d.getSelectionAfter(),v=s.setBlockType(d,g,"atomic"),b=a.create({entity:t}),w={key:p(),type:"atomic",text:n,characterList:y(_(b,n.length))},E={key:p(),type:"unstyled"};h&&(w=r({},w,{nextSibling:E.key}),E=r({},E,{prevSibling:w.key}));var C=[new m(w),new m(E)],S=o.createFromArray(C),k=s.replaceWithFragment(v,g,S),x=k.merge({selectionBefore:u,selectionAfter:k.getSelectionAfter().set("hasFocus",!0)});return c.push(e,x,"insert-fragment")},moveAtomicBlock:function(e,t,n,r){var o=e.getCurrentContent(),a=e.getSelection(),i=void 0;if("before"===r||"after"===r){var u=o.getBlockForKey("before"===r?n.getStartKey():n.getEndKey());i=d(o,t,u,r)}else{var l=s.removeRange(o,n,"backward"),f=l.getSelectionAfter(),p=l.getBlockForKey(f.getFocusKey());if(0===f.getStartOffset())i=d(l,t,p,"before");else if(f.getEndOffset()===p.getLength())i=d(l,t,p,"after");else{var h=s.splitBlock(l,f),m=h.getSelectionAfter(),y=h.getBlockForKey(m.getFocusKey());i=d(h,t,y,"before")}}var _=i.merge({selectionBefore:a,selectionAfter:i.getSelectionAfter().set("hasFocus",!0)});return c.push(e,_,"move-block")}};e.exports=g},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(8),_reactDom2=_interopRequireDefault(_reactDom),_SingleJob=__webpack_require__(93),_SingleJob2=_interopRequireDefault(_SingleJob),_Header=__webpack_require__(14),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(13),_Footer2=_interopRequireDefault(_Footer),_axios=__webpack_require__(10),_axios2=_interopRequireDefault(_axios),_reactRouterDom=__webpack_require__(11),_draftJs=__webpack_require__(30),_draftJsExportHtml=__webpack_require__(41),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var JobPost=function(_React$Component){function JobPost(e){_classCallCheck(this,JobPost);var t=_possibleConstructorReturn(this,(JobPost.__proto__||Object.getPrototypeOf(JobPost)).call(this,e));return t.state={id:t.props.match.params.id},t}return _inherits(JobPost,_React$Component),_createClass(JobPost,[{key:"componentWillMount",value:function(){var e=this,t="/job/api/"+this.state.id+"/";_axios2.default.defaults.headers.common.Authorization="Bearer "+localStorage.getItem("token"),_axios2.default.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded",(0,_axios2.default)({method:"get",url:t,headers:{Authorization:"JWT "+localStorage.getItem("token"),Accept:"application/json"},responseType:"json"}).then(function(t){e.setState({jobInfo:t.data});var n=t.data.description,r=JSON.parse(n),o=(0,_draftJs.convertFromRaw)(r),a=(0,_draftJsExportHtml.stateToHTML)(o),i={__html:a};e.setState({jobHtml:a,jobOutputHtml:i})}).then(function(){_axios2.default.defaults.headers.common.Authorization="Bearer "+localStorage.getItem("token"),_axios2.default.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded";var t="/company/api/"+e.state.jobInfo.posted_by_company+"/";(0,_axios2.default)({method:"get",url:t,headers:{Authorization:"Bearer "+localStorage.getItem("token"),Accept:"application/json"},responseType:"json"}).then(function(t){if(200===t.status){e.setState({companyInfo:t.data});var n=t.data.description,r=JSON.parse(n),o=(0,_draftJs.convertFromRaw)(r),a=(0,_draftJsExportHtml.stateToHTML)(o),i={__html:a};e.setState({companyHtml:a,companyOutputHtml:i,companyName:t.data.name})}}).catch(function(e){console.log("this is an error yo",e)})}).catch(function(e){console.log("this is an error yo",e)})}},{key:"render",value:function(){return _react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null),_react2.default.createElement("div",{id:"job-wrapper-outer"},this.state.companyInfo&&_react2.default.createElement("div",{id:"company-details-on-job"},_react2.default.createElement("section",{id:"individual-company-logo-container"},_react2.default.createElement("img",{src:this.state.companyInfo.large_logo,alt:"company logo"})),_react2.default.createElement("section",{id:"individual-company-details-container"},_react2.default.createElement("h1",null,this.state.companyInfo.name),_react2.default.createElement("div",{dangerouslySetInnerHTML:this.state.companyOutputHtml}))),this.state.jobInfo&&_react2.default.createElement("div",{id:"job-wrapper"},_react2.default.createElement("section",{id:"job-wrapper-header"},_react2.default.createElement("div",{id:"job-wrapper-title"},_react2.default.createElement("h2",null,this.state.jobInfo.title)),_react2.default.createElement("div",{id:"job-wrapper-slug"},_react2.default.createElement("h3",null,this.state.jobInfo.slug))),_react2.default.createElement("section",{id:"individual-job-details"},_react2.default.createElement("div",null,_react2.default.createElement("p",null,"Posted on:"),_react2.default.createElement("p",null,this.state.jobInfo.created_date)),_react2.default.createElement("div",null,_react2.default.createElement("p",null,"Area:"),_react2.default.createElement("p",null,this.state.jobInfo.area)),_react2.default.createElement("div",null,_react2.default.createElement("p",null,"Hours:"),_react2.default.createElement("p",null,this.state.jobInfo.hours)),_react2.default.createElement("div",null,_react2.default.createElement("p",null,"Location:"),_react2.default.createElement("p",null,this.state.jobInfo.location)),_react2.default.createElement("div",null,_react2.default.createElement("p",null,"Salary:"),_react2.default.createElement("p",null,this.state.jobInfo.salary))),_react2.default.createElement("div",{id:"individual-job-title"},_react2.default.createElement("h3",null,"Job Description:")),_react2.default.createElement("div",{dangerouslySetInnerHTML:this.state.jobOutputHtml}))),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),JobPost}(_react2.default.Component),_default=JobPost,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(JobPost,"JobPost","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/jobs/JobPost.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/jobs/JobPost.js"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r=n(1))&&"object"==typeof r&&"default"in r?r.default:r,a=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},u=function(e){function t(){return a(this,t),i(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){return o.Children.only(this.props.children)},t}(o.Component);t.AppContainer=u,t.hot=function(){return function(e){return e}},t.areComponentsEqual=function(e,t){return e===t},t.setConfig=function(){}},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=n(94);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";var r=n(18);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";var r=n(18),o=n(240),a=n(95),i=n(53),u=n(239),l=n(238);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.baseURL&&!u(e.url)&&(e.url=l(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||i.adapter)(e).then(function(t){return s(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return a(t)||(s(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(18);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(18);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(a)&&u.push("domain="+a),!0===i&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,a=String(e),i="",u=0,l=r;a.charAt(0|u)||(l="=",u%1);i+=l.charAt(63&t>>8-u%1*8)){if((n=a.charCodeAt(u+=.75))>255)throw new o;t=t<<8|n}return i}},function(e,t,n){"use strict";var r=n(18);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(18),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}}),i):i}},function(e,t,n){"use strict";var r=n(18);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,function(e,t){null!==e&&void 0!==e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))}))}),a=i.join("&")}return a&&(e+=(-1===e.indexOf("?")?"?":"&")+a),e}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(96);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";var r=n(18);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(53),o=n(18),a=n(242),i=n(241);function u(e){this.defaults=e,this.interceptors={request:new a,response:new a}}u.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){u.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){u.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=u},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(18),o=n(99),a=n(251),i=n(53);function u(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var l=u(i);l.Axios=a,l.create=function(e){return u(r.merge(i,e))},l.Cancel=n(94),l.CancelToken=n(237),l.isCancel=n(95),l.all=function(e){return Promise.all(e)},l.spread=n(236),e.exports=l,e.exports.default=l},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(31),o=n(4),a=n(255);e.exports=function(){function e(e,t,n,r,i,u){u!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r,o=v(n(1)),a=(v(n(8)),v(n(14)),v(n(13)),v(n(25)),v(n(234))),i=v(n(137)),u=v(n(136)),l=v(n(128)),s=v(n(127)),c=v(n(126)),f=v(n(125)),p=v(n(124)),d=v(n(63)),h=v(n(62)),m=v(n(123)),y=v(n(122)),_=v(n(121)),g=n(11);function v(e){return e&&e.__esModule?e:{default:e}}function b(e){return o.default.createElement(g.BrowserRouter,null,o.default.createElement(g.Switch,null,o.default.createElement(g.Route,{path:"/",component:c.default,exact:!0}),o.default.createElement(g.Route,{path:"/my_account",component:m.default}),o.default.createElement(g.Route,{path:"/employee_dashboard",component:y.default}),o.default.createElement(g.Route,{path:"/employer_dashboard",component:_.default}),o.default.createElement(g.Route,{path:"/register",component:d.default}),o.default.createElement(g.Route,{path:"/login",component:h.default}),o.default.createElement(g.Route,{path:"/about",component:f.default}),o.default.createElement(g.Route,{path:"/contact",component:p.default}),o.default.createElement(g.Route,{path:"/new_company",component:i.default}),o.default.createElement(g.Route,{path:"/view_company/:id",component:u.default}),o.default.createElement(g.Route,{path:"/new_job",component:l.default}),o.default.createElement(g.Route,{path:"/view_job/:id",component:s.default}),o.default.createElement(g.Route,{path:"/job_post/:id",component:a.default}),o.default.createElement(g.Route,{component:w})))}function w(e){return o.default.createElement("div",null,o.default.createElement("h1",null,"404 page"),o.default.createElement(g.Link,{to:"/"},"Got to homepage"))}(r=n(2).enterModule)&&r(e);var E,C,S=b;t.default=S,E=n(2).default,C=n(2).leaveModule,E&&(E.register(b,"AppRouter","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/routers/AppRouter.js"),E.register(w,"NotFoundPage","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/routers/AppRouter.js"),E.register(S,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/routers/AppRouter.js"),C(e))}).call(this,n(7)(e))},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(258);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var i=0;i<n.length;i++)if(!r.call(t,n[i])||!o(e[n[i]],t[n[i]]))return!1;return!0}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(4),o=n(1),a=n(261),i=n(15),u=n(31),l=n(56),s=n(260),c=n(39),f=n(101);function p(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||p("227");var d={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,a,i,u,l){(function(e,t,n,r,o,a,i,u,l){this._hasCaughtError=!1,this._caughtError=null;var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(d,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,a,i,u,l){if(d.invokeGuardedCallback.apply(this,arguments),d.hasCaughtError()){var s=d.clearCaughtError();d._hasRethrowError||(d._hasRethrowError=!0,d._rethrowError=s)}},rethrowCaughtError:function(){return function(){if(d._hasRethrowError){var e=d._rethrowError;throw d._rethrowError=null,d._hasRethrowError=!1,e}}.apply(d,arguments)},hasCaughtError:function(){return d._hasCaughtError},clearCaughtError:function(){if(d._hasCaughtError){var e=d._caughtError;return d._caughtError=null,d._hasCaughtError=!1,e}p("198")}};var h=null,m={};function y(){if(h)for(var e in m){var t=m[e],n=h.indexOf(e);if(-1<n||p("96",e),!g[n])for(var r in t.extractEvents||p("97",e),g[n]=t,n=t.eventTypes){var o=void 0,a=n[r],i=t,u=r;v.hasOwnProperty(u)&&p("99",u),v[u]=a;var l=a.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&_(l[o],i,u);o=!0}else a.registrationName?(_(a.registrationName,i,u),o=!0):o=!1;o||p("98",r,e)}}}function _(e,t,n){b[e]&&p("100",e),b[e]=t,w[e]=t.eventTypes[n].dependencies}var g=[],v={},b={},w={};function E(e){h&&p("101"),h=Array.prototype.slice.call(e),y()}function C(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];m.hasOwnProperty(t)&&m[t]===r||(m[t]&&p("102",t),m[t]=r,n=!0)}n&&y()}var S=Object.freeze({plugins:g,eventNameDispatchConfigs:v,registrationNameModules:b,registrationNameDependencies:w,possibleRegistrationNames:null,injectEventPluginOrder:E,injectEventPluginsByName:C}),k=null,x=null,O=null;function T(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=O(r),d.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function j(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function R(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var M=null;function D(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)T(e,t,n[o],r[o]);else n&&T(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function N(e){return D(e,!0)}function P(e){return D(e,!1)}var L={injectEventPluginOrder:E,injectEventPluginsByName:C};function I(e,t){var n=e.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function A(e,t){null!==e&&(M=j(M,e)),e=M,M=null,e&&(R(e,t?N:P),M&&p("95"),d.rethrowCaughtError())}function U(e,t,n,r){for(var o=null,a=0;a<g.length;a++){var i=g[a];i&&(i=i.extractEvents(e,t,n,r))&&(o=j(o,i))}A(o,!1)}var F=Object.freeze({injection:L,getListener:I,runEventsInBatch:A,runExtractedEventsInBatch:U}),B=Math.random().toString(36).slice(2),q="__reactInternalInstance$"+B,K="__reactEventHandlers$"+B;function H(e){if(e[q])return e[q];for(;!e[q];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[q]).tag||6===e.tag?e:null}function J(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function z(e){return e[K]||null}var W=Object.freeze({precacheFiberNode:function(e,t){t[q]=e},getClosestInstanceFromNode:H,getInstanceFromNode:function(e){return!(e=e[q])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:J,getFiberCurrentPropsFromNode:z,updateFiberProps:function(e,t){e[K]=t}});function V(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function $(e,t,n){for(var r=[];e;)r.push(e),e=V(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function Y(e,t,n){(t=I(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=j(n._dispatchListeners,t),n._dispatchInstances=j(n._dispatchInstances,e))}function G(e){e&&e.dispatchConfig.phasedRegistrationNames&&$(e._targetInst,Y,e)}function Q(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;$(t=t?V(t):null,Y,e)}}function X(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=I(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=j(n._dispatchListeners,t),n._dispatchInstances=j(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&X(e._targetInst,null,e)}function ee(e){R(e,G)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,a=r,i=0,u=o;u;u=V(u))i++;u=0;for(var l=a;l;l=V(l))u++;for(;0<i-u;)o=V(o),i--;for(;0<u-i;)a=V(a),u--;for(;i--;){if(o===a||o===a.alternate)break e;o=V(o),a=V(a)}o=null}else o=null;for(a=o,o=[];n&&n!==a&&(null===(i=n.alternate)||i!==a);)o.push(n),n=V(n);for(n=[];r&&r!==a&&(null===(i=r.alternate)||i!==a);)n.push(r),r=V(r);for(r=0;r<o.length;r++)X(o[r],"bubbled",e);for(e=n.length;0<e--;)X(n[e],"captured",t)}var ne=Object.freeze({accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){R(e,Q)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){R(e,Z)}}),re=null;function oe(){return!re&&a.canUseDOM&&(re="textContent"in document.documentElement?"textContent":"innerText"),re}var ae={_root:null,_startText:null,_fallbackText:null};function ie(){if(ae._fallbackText)return ae._fallbackText;var e,t,n=ae._startText,r=n.length,o=ue(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return ae._fallbackText=o.slice(e,1<t?1-t:void 0),ae._fallbackText}function ue(){return"value"in ae._root?ae._root.value:ae._root[oe()]}var le="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),se={type:null,target:null,currentTarget:u.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function ce(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?u.thatReturnsTrue:u.thatReturnsFalse,this.isPropagationStopped=u.thatReturnsFalse,this}function fe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function pe(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function de(e){e.eventPool=[],e.getPooled=fe,e.release=pe}i(ce.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=u.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=u.thatReturnsTrue)},persist:function(){this.isPersistent=u.thatReturnsTrue},isPersistent:u.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<le.length;t++)this[le[t]]=null}}),ce.Interface=se,ce.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,de(n),n},de(ce);var he=ce.extend({data:null}),me=ce.extend({data:null}),ye=[9,13,27,32],_e=a.canUseDOM&&"CompositionEvent"in window,ge=null;a.canUseDOM&&"documentMode"in document&&(ge=document.documentMode);var ve=a.canUseDOM&&"TextEvent"in window&&!ge,be=a.canUseDOM&&(!_e||ge&&8<ge&&11>=ge),we=String.fromCharCode(32),Ee={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},Ce=!1;function Se(e,t){switch(e){case"topKeyUp":return-1!==ye.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function ke(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var xe=!1;var Oe={eventTypes:Ee,extractEvents:function(e,t,n,r){var o=void 0,a=void 0;if(_e)e:{switch(e){case"topCompositionStart":o=Ee.compositionStart;break e;case"topCompositionEnd":o=Ee.compositionEnd;break e;case"topCompositionUpdate":o=Ee.compositionUpdate;break e}o=void 0}else xe?Se(e,n)&&(o=Ee.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=Ee.compositionStart);return o?(be&&(xe||o!==Ee.compositionStart?o===Ee.compositionEnd&&xe&&(a=ie()):(ae._root=r,ae._startText=ue(),xe=!0)),o=he.getPooled(o,t,n,r),a?o.data=a:null!==(a=ke(n))&&(o.data=a),ee(o),a=o):a=null,(e=ve?function(e,t){switch(e){case"topCompositionEnd":return ke(t);case"topKeyPress":return 32!==t.which?null:(Ce=!0,we);case"topTextInput":return(e=t.data)===we&&Ce?null:e;default:return null}}(e,n):function(e,t){if(xe)return"topCompositionEnd"===e||!_e&&Se(e,t)?(e=ie(),ae._root=null,ae._startText=null,ae._fallbackText=null,xe=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return be?null:t.data;default:return null}}(e,n))?((t=me.getPooled(Ee.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===a?t:null===t?a:[a,t]}},Te=null,je={injectFiberControlledHostComponent:function(e){Te=e}},Re=null,Me=null;function De(e){if(e=x(e)){Te&&"function"==typeof Te.restoreControlledState||p("194");var t=k(e.stateNode);Te.restoreControlledState(e.stateNode,e.type,t)}}function Ne(e){Re?Me?Me.push(e):Me=[e]:Re=e}function Pe(){return null!==Re||null!==Me}function Le(){if(Re){var e=Re,t=Me;if(Me=Re=null,De(e),t)for(e=0;e<t.length;e++)De(t[e])}}var Ie=Object.freeze({injection:je,enqueueStateRestore:Ne,needsStateRestore:Pe,restoreStateIfNeeded:Le});function Ae(e,t){return e(t)}function Ue(e,t,n){return e(t,n)}function Fe(){}var Be=!1;function qe(e,t){if(Be)return e(t);Be=!0;try{return Ae(e,t)}finally{Be=!1,Pe()&&(Fe(),Le())}}var Ke={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function He(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ke[e.type]:"textarea"===t}function Je(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ze(e,t){return!(!a.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function We(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ve(e){e._valueTracker||(e._valueTracker=function(e){var t=We(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=We(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ye=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Ge="function"==typeof Symbol&&Symbol.for,Qe=Ge?Symbol.for("react.element"):60103,Xe=Ge?Symbol.for("react.call"):60104,Ze=Ge?Symbol.for("react.return"):60105,et=Ge?Symbol.for("react.portal"):60106,tt=Ge?Symbol.for("react.fragment"):60107,nt=Ge?Symbol.for("react.strict_mode"):60108,rt=Ge?Symbol.for("react.provider"):60109,ot=Ge?Symbol.for("react.context"):60110,at=Ge?Symbol.for("react.async_mode"):60111,it=Ge?Symbol.for("react.forward_ref"):60112,ut="function"==typeof Symbol&&Symbol.iterator;function lt(e){return null===e||void 0===e?null:"function"==typeof(e=ut&&e[ut]||e["@@iterator"])?e:null}function st(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case tt:return"ReactFragment";case et:return"ReactPortal";case Xe:return"ReactCall";case Ze:return"ReactReturn"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case it:return""!==(e=e.render.displayName||e.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function ct(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=st(e),a=null;n&&(a=st(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":a?" (created by "+a+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt={},dt={};function ht(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var mt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){mt[e]=new ht(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];mt[t]=new ht(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){mt[e]=new ht(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){mt[e]=new ht(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){mt[e]=new ht(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){mt[e]=new ht(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){mt[e]=new ht(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){mt[e]=new ht(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){mt[e]=new ht(e,5,!1,e.toLowerCase(),null)});var yt=/[\-:]([a-z])/g;function _t(e){return e[1].toUpperCase()}function gt(e,t,n,r){var o=mt.hasOwnProperty(t)?mt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!dt.hasOwnProperty(e)||!pt.hasOwnProperty(e)&&(ft.test(e)?dt[e]=!0:(pt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function vt(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function bt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=kt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function wt(e,t){null!=(t=t.checked)&&gt(e,"checked",t,!1)}function Et(e,t){wt(e,t);var n=kt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?St(e,t.type,n):t.hasOwnProperty("defaultValue")&&St(e,t.type,kt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ct(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function St(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function kt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(yt,_t);mt[t]=new ht(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(yt,_t);mt[t]=new ht(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(yt,_t);mt[t]=new ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),mt.tabIndex=new ht("tabIndex",1,!1,"tabindex",null);var xt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Ot(e,t,n){return(e=ce.getPooled(xt.change,e,t,n)).type="change",Ne(n),ee(e),e}var Tt=null,jt=null;function Rt(e){A(e,!1)}function Mt(e){if($e(J(e)))return e}function Dt(e,t){if("topChange"===e)return t}var Nt=!1;function Pt(){Tt&&(Tt.detachEvent("onpropertychange",Lt),jt=Tt=null)}function Lt(e){"value"===e.propertyName&&Mt(jt)&&qe(Rt,e=Ot(jt,e,Je(e)))}function It(e,t,n){"topFocus"===e?(Pt(),jt=n,(Tt=t).attachEvent("onpropertychange",Lt)):"topBlur"===e&&Pt()}function At(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return Mt(jt)}function Ut(e,t){if("topClick"===e)return Mt(t)}function Ft(e,t){if("topInput"===e||"topChange"===e)return Mt(t)}a.canUseDOM&&(Nt=ze("input")&&(!document.documentMode||9<document.documentMode));var Bt={eventTypes:xt,_isInputEventSupported:Nt,extractEvents:function(e,t,n,r){var o=t?J(t):window,a=void 0,i=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?a=Dt:He(o)?Nt?a=Ft:(a=At,i=It):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Ut),a&&(a=a(e,t)))return Ot(a,n,r);i&&i(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&St(o,"number",o.value)}},qt=ce.extend({view:null,detail:null}),Kt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ht(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Kt[e])&&!!t[e]}function Jt(){return Ht}var zt=qt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Jt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),Wt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Vt={eventTypes:Wt,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?H(t):null):e=null,e===t)return null;var a=null==e?o:J(e);o=null==t?o:J(t);var i=zt.getPooled(Wt.mouseLeave,e,n,r);return i.type="mouseleave",i.target=a,i.relatedTarget=o,(n=zt.getPooled(Wt.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=a,te(i,n,e,t),[i,n]}};function $t(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Yt(e){return!!(e=e._reactInternalFiber)&&2===$t(e)}function Gt(e){2!==$t(e)&&p("188")}function Qt(e){var t=e.alternate;if(!t)return 3===(t=$t(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var i=o.child;i;){if(i===n)return Gt(o),e;if(i===r)return Gt(o),t;i=i.sibling}p("188")}if(n.return!==r.return)n=o,r=a;else{i=!1;for(var u=o.child;u;){if(u===n){i=!0,n=o,r=a;break}if(u===r){i=!0,r=o,n=a;break}u=u.sibling}if(!i){for(u=a.child;u;){if(u===n){i=!0,n=a,r=o;break}if(u===r){i=!0,r=a,n=o;break}u=u.sibling}i||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function Xt(e){if(!(e=Qt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var Zt=ce.extend({animationName:null,elapsedTime:null,pseudoElement:null}),en=ce.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tn=qt.extend({relatedTarget:null});function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var rn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},on={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=qt.extend({key:function(e){if(e.key){var t=rn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?on[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Jt,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),un=zt.extend({dataTransfer:null}),ln=qt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Jt}),sn=ce.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),cn=zt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),fn={},pn={};function dn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},fn[e]=t,pn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){dn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){dn(e,!1)});var hn={eventTypes:fn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=pn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=pn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":e=an;break;case"topBlur":case"topFocus":e=tn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=zt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=un;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=ln;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Zt;break;case"topTransitionEnd":e=sn;break;case"topScroll":e=qt;break;case"topWheel":e=cn;break;case"topCopy":case"topCut":case"topPaste":e=en;break;default:e=ce}return ee(t=e.getPooled(o,t,n,r)),t}},mn=hn.isInteractiveTopLevelEventType,yn=[];function _n(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=H(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],U(e.topLevelType,t,e.nativeEvent,Je(e.nativeEvent))}var gn=!0;function vn(e){gn=!!e}function bn(e,t,n){if(!n)return null;e=(mn(e)?En:Cn).bind(null,e),n.addEventListener(t,e,!1)}function wn(e,t,n){if(!n)return null;e=(mn(e)?En:Cn).bind(null,e),n.addEventListener(t,e,!0)}function En(e,t){Ue(Cn,e,t)}function Cn(e,t){if(gn){var n=Je(t);if(null!==(n=H(n))&&"number"==typeof n.tag&&2!==$t(n)&&(n=null),yn.length){var r=yn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{qe(_n,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>yn.length&&yn.push(e)}}}var Sn=Object.freeze({get _enabled(){return gn},setEnabled:vn,isEnabled:function(){return gn},trapBubbledEvent:bn,trapCapturedEvent:wn,dispatchEvent:Cn});function kn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var xn={animationend:kn("Animation","AnimationEnd"),animationiteration:kn("Animation","AnimationIteration"),animationstart:kn("Animation","AnimationStart"),transitionend:kn("Transition","TransitionEnd")},On={},Tn={};function jn(e){if(On[e])return On[e];if(!xn[e])return e;var t,n=xn[e];for(t in n)if(n.hasOwnProperty(t)&&t in Tn)return On[e]=n[t];return e}a.canUseDOM&&(Tn=document.createElement("div").style,"AnimationEvent"in window||(delete xn.animationend.animation,delete xn.animationiteration.animation,delete xn.animationstart.animation),"TransitionEvent"in window||delete xn.transitionend.transition);var Rn={topAnimationEnd:jn("animationend"),topAnimationIteration:jn("animationiteration"),topAnimationStart:jn("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:jn("transitionend"),topWheel:"wheel"},Mn={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Dn={},Nn=0,Pn="_reactListenersID"+(""+Math.random()).slice(2);function Ln(e){return Object.prototype.hasOwnProperty.call(e,Pn)||(e[Pn]=Nn++,Dn[e[Pn]]={}),Dn[e[Pn]]}function In(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function An(e,t){var n,r=In(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=In(r)}}function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Fn=a.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Bn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},qn=null,Kn=null,Hn=null,Jn=!1;function zn(e,t){if(Jn||null==qn||qn!==l())return null;var n=qn;return"selectionStart"in n&&Un(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Hn&&s(Hn,n)?null:(Hn=n,(e=ce.getPooled(Bn.select,Kn,e,t)).type="select",e.target=qn,ee(e),e)}var Wn={eventTypes:Bn,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Ln(a),o=w.onSelect;for(var i=0;i<o.length;i++){var u=o[i];if(!a.hasOwnProperty(u)||!a[u]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?J(t):window,e){case"topFocus":(He(a)||"true"===a.contentEditable)&&(qn=a,Kn=t,Hn=null);break;case"topBlur":Hn=Kn=qn=null;break;case"topMouseDown":Jn=!0;break;case"topContextMenu":case"topMouseUp":return Jn=!1,zn(n,r);case"topSelectionChange":if(Fn)break;case"topKeyDown":case"topKeyUp":return zn(n,r)}return null}};function Vn(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function $n(e,t,n){var r=e.alternate;return null===r?((r=new Vn(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Yn(e,t,n){var r=e.type,o=e.key;e=e.props;var a=void 0;if("function"==typeof r)a=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)a=5;else switch(r){case tt:return Gn(e.children,t,n,o);case at:a=11,t|=3;break;case nt:a=11,t|=2;break;case Xe:a=7;break;case Ze:a=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case rt:a=13;break;case ot:a=12;break;case it:a=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;p("130",null==r?r:typeof r,"")}else p("130",null==r?r:typeof r,"")}return(t=new Vn(a,e,o,t)).type=r,t.expirationTime=n,t}function Gn(e,t,n,r){return(e=new Vn(10,e,r,t)).expirationTime=n,e}function Qn(e,t,n){return(e=new Vn(6,e,null,t)).expirationTime=n,e}function Xn(e,t,n){return(t=new Vn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}L.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=W.getFiberCurrentPropsFromNode,x=W.getInstanceFromNode,O=W.getNodeFromInstance,L.injectEventPluginsByName({SimpleEventPlugin:hn,EnterLeaveEventPlugin:Vt,ChangeEventPlugin:Bt,SelectEventPlugin:Wn,BeforeInputEventPlugin:Oe});var Zn=null,er=null;function tr(e){return function(t){try{return e(t)}catch(e){}}}function nr(e){"function"==typeof Zn&&Zn(e)}function rr(e){"function"==typeof er&&er(e)}function or(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function ar(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var ir=void 0,ur=void 0;function lr(e){ir=ur=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=or(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=or(null)):e=null,ir=n,ur=e!==n?e:null}function sr(e,t){lr(e),e=ir;var n=ur;null===n?ar(e,t):null===e.last||null===n.last?(ar(e,t),ar(n,t)):(ar(e,t),n.last=t)}function cr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function fr(e,t,n,r,o,a){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var u=!0,l=n.first,s=!1;null!==l;){var c=l.expirationTime;if(c>a){var f=n.expirationTime;(0===f||f>c)&&(n.expirationTime=c),s||(s=!0,n.baseState=e)}else s||(n.first=l.next,null===n.first&&(n.last=null)),l.isReplace?(e=cr(l,r,e,o),u=!0):(c=cr(l,r,e,o))&&(e=u?i({},e,c):i(e,c),u=!1),l.isForced&&(n.hasForceUpdate=!0),null!==l.callback&&(null===(c=n.callbackList)&&(c=n.callbackList=[]),c.push(l)),null!==l.capturedValue&&(null===(c=n.capturedValues)?n.capturedValues=[l.capturedValue]:c.push(l.capturedValue));l=l.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),s||(n.baseState=e),e}function pr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&p("191",o),o.call(t)}}var dr=Array.isArray;function hr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function mr(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function yr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=$n(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function i(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Qn(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=hr(e,t,n),r.return=e,r):((r=Yn(n,e.mode,r)).ref=hr(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Xn(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function c(e,t,n,r,a){return null===t||10!==t.tag?((t=Gn(n,e.mode,r,a)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Qn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Qe:return(n=Yn(t,e.mode,n)).ref=hr(e,null,t),n.return=e,n;case et:return(t=Xn(t,e.mode,n)).return=e,t}if(dr(t)||lt(t))return(t=Gn(t,e.mode,n,null)).return=e,t;mr(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Qe:return n.key===o?n.type===tt?c(e,t,n.props.children,r,o):l(e,t,n,r):null;case et:return n.key===o?s(e,t,n,r):null}if(dr(n)||lt(n))return null!==o?null:c(e,t,n,r,null);mr(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Qe:return e=e.get(null===r.key?n:r.key)||null,r.type===tt?c(t,e,r.props.children,o,r.key):l(t,e,r,o);case et:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(dr(r)||lt(r))return c(t,e=e.get(n)||null,r,o,null);mr(t,r)}return null}function m(o,i,u,l){for(var s=null,c=null,p=i,m=i=0,y=null;null!==p&&m<u.length;m++){p.index>m?(y=p,p=null):y=p.sibling;var _=d(o,p,u[m],l);if(null===_){null===p&&(p=y);break}e&&p&&null===_.alternate&&t(o,p),i=a(_,i,m),null===c?s=_:c.sibling=_,c=_,p=y}if(m===u.length)return n(o,p),s;if(null===p){for(;m<u.length;m++)(p=f(o,u[m],l))&&(i=a(p,i,m),null===c?s=p:c.sibling=p,c=p);return s}for(p=r(o,p);m<u.length;m++)(y=h(p,o,m,u[m],l))&&(e&&null!==y.alternate&&p.delete(null===y.key?m:y.key),i=a(y,i,m),null===c?s=y:c.sibling=y,c=y);return e&&p.forEach(function(e){return t(o,e)}),s}function y(o,i,u,l){var s=lt(u);"function"!=typeof s&&p("150"),null==(u=s.call(u))&&p("151");for(var c=s=null,m=i,y=i=0,_=null,g=u.next();null!==m&&!g.done;y++,g=u.next()){m.index>y?(_=m,m=null):_=m.sibling;var v=d(o,m,g.value,l);if(null===v){m||(m=_);break}e&&m&&null===v.alternate&&t(o,m),i=a(v,i,y),null===c?s=v:c.sibling=v,c=v,m=_}if(g.done)return n(o,m),s;if(null===m){for(;!g.done;y++,g=u.next())null!==(g=f(o,g.value,l))&&(i=a(g,i,y),null===c?s=g:c.sibling=g,c=g);return s}for(m=r(o,m);!g.done;y++,g=u.next())null!==(g=h(m,o,y,g.value,l))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),i=a(g,i,y),null===c?s=g:c.sibling=g,c=g);return e&&m.forEach(function(e){return t(o,e)}),s}return function(e,r,a,u){"object"==typeof a&&null!==a&&a.type===tt&&null===a.key&&(a=a.props.children);var l="object"==typeof a&&null!==a;if(l)switch(a.$$typeof){case Qe:e:{var s=a.key;for(l=r;null!==l;){if(l.key===s){if(10===l.tag?a.type===tt:l.type===a.type){n(e,l.sibling),(r=o(l,a.type===tt?a.props.children:a.props,u)).ref=hr(e,l,a),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}a.type===tt?((r=Gn(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Yn(a,e.mode,u)).ref=hr(e,r,a),u.return=e,e=u)}return i(e);case et:e:{for(l=a.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[],u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Xn(a,e.mode,u)).return=e,e=r}return i(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a,u)).return=e,e=r):(n(e,r),(r=Qn(a,e.mode,u)).return=e,e=r),i(e);if(dr(a))return m(e,r,a,u);if(lt(a))return y(e,r,a,u);if(l&&mr(e,a),void 0===a)switch(e.tag){case 2:case 1:p("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var _r=yr(!0),gr=yr(!1);function vr(e,t,n,r,o,a,u){function l(e,t,n){c(e,t,n,t.expirationTime)}function c(e,t,n,r){t.child=null===e?gr(t,null,n,r):_r(t,e.child,n,r)}function d(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,r,o,a){if(d(e,t),!n&&!o)return r&&T(t,!1),_(e,t);n=t.stateNode,Ye.current=t;var i=o?null:n.render();return t.effectTag|=1,o&&(c(e,t,null,a),t.child=null),c(e,t,i,a),t.memoizedState=n.state,t.memoizedProps=n.props,r&&T(t,!0),t.child}function m(e){var t=e.stateNode;t.pendingContext?O(e,t.pendingContext,t.pendingContext!==t.context):t.context&&O(e,t.context,!1),w(e,t.containerInfo)}function y(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var a=0|o.stateNode;if(o.type===t&&0!=(a&n)){for(a=o;null!==a;){var i=a.alternate;if(0===a.expirationTime||a.expirationTime>r)a.expirationTime=r,null!==i&&(0===i.expirationTime||i.expirationTime>r)&&(i.expirationTime=r);else{if(null===i||!(0===i.expirationTime||i.expirationTime>r))break;i.expirationTime=r}a=a.return}a=null}else a=o.child;break;case 13:a=o.type===e.type?null:o.child;break;default:a=o.child}if(null!==a)a.return=o;else for(a=o;null!==a;){if(a===e){a=null;break}if(null!==(o=a.sibling)){a=o;break}a=a.return}o=a}}function _(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=$n(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$n(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var g=e.shouldSetTextContent,v=e.shouldDeprioritizeSubtree,b=t.pushHostContext,w=t.pushHostContainer,E=r.pushProvider,C=n.getMaskedContext,S=n.getUnmaskedContext,k=n.hasContextChanged,x=n.pushContextProvider,O=n.pushTopLevelContextObject,T=n.invalidateContextProvider,j=o.enterHydrationState,R=o.resetHydrationState,M=o.tryToClaimNextHydratableInstance,D=(e=function(e,t,n,r,o){function a(e,t,n,r,o,a){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var i=e.stateNode;return e=e.type,"function"==typeof i.shouldComponentUpdate?i.shouldComponentUpdate(n,o,a):!(e.prototype&&e.prototype.isPureReactComponent&&s(t,n)&&s(r,o))}function u(e,t){t.updater=_,e.stateNode=t,t._reactInternalFiber=e}function l(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&_.enqueueReplaceState(t,t.state,null)}function c(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var p=e.cacheContext,d=e.getMaskedContext,h=e.getUnmaskedContext,m=e.isContextConsumer,y=e.hasContextChanged,_={isMounted:Yt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var a=n(e);sr(e,{expirationTime:a,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,a)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var a=n(e);sr(e,{expirationTime:a,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,a)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);sr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:u,callGetDerivedStateFromProps:c,constructClassInstance:function(e,t){var n=e.type,r=h(e),o=m(e),a=o?d(e,r):f,l=null!==(n=new n(t,a)).state&&void 0!==n.state?n.state:null;return u(e,n),e.memoizedState=l,null!==(t=c(e,0,t,l))&&void 0!==t&&(e.memoizedState=i({},e.memoizedState,t)),o&&p(e,r,a),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,a=e.pendingProps,i=h(e);o.props=a,o.state=e.memoizedState,o.refs=f,o.context=d(e,i),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&_.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=fr(r,e,n,o,a,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,u=e.stateNode;u.props=e.memoizedProps,u.state=e.memoizedState;var s=e.memoizedProps,f=e.pendingProps,p=u.context,m=h(e);m=d(e,m),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(s!==f||p!==m)&&l(e,u,f,m),p=e.memoizedState,t=null!==e.updateQueue?fr(null,e,e.updateQueue,u,f,t):p;var _=void 0;if(s!==f&&(_=c(e,0,f,t)),null!==_&&void 0!==_){t=null===t||void 0===t?_:i({},t,_);var g=e.updateQueue;null!==g&&(g.baseState=i({},g.baseState,_))}return s!==f||p!==t||y()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((s=a(e,s,f,p,t,m))?(n||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(e.effectTag|=4)):("function"==typeof u.componentDidMount&&(e.effectTag|=4),r(e,f),o(e,t)),u.props=f,u.state=t,u.context=m,s):("function"==typeof u.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var u=t.type,s=t.stateNode;s.props=t.memoizedProps,s.state=t.memoizedState;var f=t.memoizedProps,p=t.pendingProps,m=s.context,_=h(t);_=d(t,_),(u="function"==typeof u.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(f!==p||m!==_)&&l(t,s,p,_),m=t.memoizedState,n=null!==t.updateQueue?fr(e,t,t.updateQueue,s,p,n):m;var g=void 0;if(f!==p&&(g=c(t,0,p,n)),null!==g&&void 0!==g){n=null===n||void 0===n?g:i({},n,g);var v=t.updateQueue;null!==v&&(v.baseState=i({},v.baseState,g))}return f!==p||m!==n||y()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((g=a(t,f,p,m,n,_))?(u||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(p,n,_),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(p,n,_)),"function"==typeof s.componentDidUpdate&&(t.effectTag|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof s.componentDidUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof s.getSnapshotBeforeUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),r(t,p),o(t,n)),s.props=p,s.state=n,s.context=_,g):("function"!=typeof s.componentDidUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof s.getSnapshotBeforeUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,a,u,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,N=e.callGetDerivedStateFromProps,P=e.constructClassInstance,L=e.mountClassInstance,I=e.resumeMountClassInstance,A=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:m(t);break;case 2:x(t);break;case 4:w(t,t.stateNode.containerInfo);break;case 13:E(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var r=t.type,o=t.pendingProps,a=S(t);return r=r(o,a=C(t,a)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(a=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof a.getDerivedStateFromProps&&(null!==(o=N(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=i({},t.memoizedState,o))),o=x(t),D(t,r),L(t,n),e=h(e,t,!0,o,!1,n)):(t.tag=1,l(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,k()||t.memoizedProps!==n?(r=S(t),o=o(n,r=C(t,r)),t.effectTag|=1,l(e,t,o),t.memoizedProps=n,e=t.child):e=_(e,t),e;case 2:o=x(t),null===e?null===t.stateNode?(P(t,t.pendingProps),L(t,n),r=!0):r=I(t,n):r=A(e,t,n),a=!1;var u=t.updateQueue;return null!==u&&null!==u.capturedValues&&(a=r=!0),h(e,t,r,o,a,n);case 3:e:if(m(t),r=t.updateQueue,null!==r){if(a=t.memoizedState,o=fr(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(a===o){R(),e=_(e,t);break e}r=o.element}a=t.stateNode,(null===e||null===e.child)&&a.hydrate&&j(t)?(t.effectTag|=2,t.child=gr(t,null,r,n)):(R(),l(e,t,r)),t.memoizedState=o,e=t.child}else R(),e=_(e,t);return e;case 5:return b(t),null===e&&M(t),o=t.type,u=t.memoizedProps,r=t.pendingProps,a=null!==e?e.memoizedProps:null,k()||u!==r||((u=1&t.mode&&v(o,r))&&(t.expirationTime=1073741823),u&&1073741823===n)?(u=r.children,g(o,r)?u=null:a&&g(o,a)&&(t.effectTag|=16),d(e,t),1073741823!==n&&1&t.mode&&v(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(l(e,t,u),t.memoizedProps=r,e=t.child)):e=_(e,t),e;case 6:return null===e&&M(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,k()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?gr(t,t.stateNode,r,n):_r(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return w(t,t.stateNode.containerInfo),o=t.pendingProps,k()||t.memoizedProps!==o?(null===e?t.child=_r(t,null,o,n):l(e,t,o),t.memoizedProps=o,e=t.child):e=_(e,t),e;case 14:return l(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,k()||t.memoizedProps!==n?(l(e,t,n),t.memoizedProps=n,e=t.child):e=_(e,t),e;case 11:return n=t.pendingProps.children,k()||null!==n&&t.memoizedProps!==n?(l(e,t,n),t.memoizedProps=n,e=t.child):e=_(e,t),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,a=t.memoizedProps;if(!k()&&a===o)return t.stateNode=0,E(t),_(e,t);var i=o.value;if(t.memoizedProps=o,null===a)i=1073741823;else if(a.value===o.value){if(a.children===o.children)return t.stateNode=0,E(t),_(e,t);i=0}else{var u=a.value;if(u===i&&(0!==u||1/u==1/i)||u!=u&&i!=i){if(a.children===o.children)return t.stateNode=0,E(t),_(e,t);i=0}else if(i="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823,0==(i|=0)){if(a.children===o.children)return t.stateNode=0,E(t),_(e,t)}else y(t,r,i,n)}return t.stateNode=i,E(t),l(e,t,o.children),t.child}(e,t,n);case 12:e:{r=t.type,a=t.pendingProps,u=t.memoizedProps,o=r._currentValue;var s=r._changedBits;if(k()||0!==s||u!==a){t.memoizedProps=a;var c=a.unstable_observedBits;if(void 0!==c&&null!==c||(c=1073741823),t.stateNode=c,0!=(s&c))y(t,r,s,n);else if(u===a){e=_(e,t);break e}l(e,t,n=(n=a.children)(o)),e=t.child}else e=_(e,t)}return e;default:p("156")}}}}function br(e,t){var n=t.source;null===t.stack&&ct(n),null!==n&&st(n),t=t.value,null!==e&&2===e.tag&&st(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var wr={};function Er(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)P(e),e=e.return;te=null,ne=0,ee=null,ae=!1}function n(e){return null!==ie&&ie.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=M(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var a=o.updateQueue;a=null===a?0:a.expirationTime;break e;default:a=0}for(var i=o.child;null!==i;)0!==i.expirationTime&&(0===a||a>i.expirationTime)&&(a=i.expirationTime),i=i.sibling;o.expirationTime=a}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ae=!0;break}e=n}else{if(null!==(e=N(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=R(e.alternate,e,ne);return null===t&&(t=r(e)),Ye.current=null,t}function a(e,n,a){Z&&p("243"),Z=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=$n((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var i=!1;;){try{if(a)for(;null!==ee&&!S();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){i=!0,k(e);break}var u=(a=ee).return;if(null===u){i=!0,k(e);break}D(u,a,e),ee=r(a)}break}return Z=!1,i||null!==ee?null:ae?(e.pendingCommitExpirationTime=n,e.current.alternate):void p("262")}function u(e,t,n,r){sr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:ct(e)},next:null}),c(t,r)}function l(e,t){e:{Z&&!oe&&p("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){u(e,r,t,1),e=void 0;break e}break;case 3:u(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&u(e,e,t,1),e=void 0}return e}function s(e){return e=0!==X?X:Z?oe?1:ne:1&e.mode?we?10*(1+((d()+15)/10|0)):25*(1+((d()+500)/25|0)):1,we&&(0===he||e>he)&&(he=e),e}function c(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!Z&&0!==ne&&n<ne&&t(),Z&&!oe&&te===r||y(r,n),Se>Ce&&p("185")}e=e.return}n=void 0}return n}function d(){return G=J()-Y,2+(G/10|0)}function h(e,t,n,r,o){var a=X;X=1;try{return e(t,n,r,o)}finally{X=a}}function m(e){if(0!==se){if(e>se)return;W(ce)}var t=J()-Y;se=e,ce=z(g,{timeout:10*(e-2)-t})}function y(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===le?(ue=le=e,e.nextScheduledRoot=e):(le=le.nextScheduledRoot=e).nextScheduledRoot=ue;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}fe||(ve?be&&(pe=e,de=1,E(e,1,!1)):1===t?v():m(t))}function _(){var e=0,t=null;if(null!==le)for(var n=le,r=ue;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===le)&&p("244"),r===r.nextScheduledRoot){ue=le=r.nextScheduledRoot=null;break}if(r===ue)ue=o=r.nextScheduledRoot,le.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===le){(le=n).nextScheduledRoot=ue,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===le)break;n=r,r=r.nextScheduledRoot}}null!==(n=pe)&&n===t&&1===e?Se++:Se=0,pe=t,de=e}function g(e){b(0,!0,e)}function v(){b(1,!1,null)}function b(e,t,n){if(ge=n,_(),t)for(;null!==pe&&0!==de&&(0===e||e>=de)&&(!me||d()>=de);)E(pe,de,!me),_();else for(;null!==pe&&0!==de&&(0===e||e>=de);)E(pe,de,!1),_();null!==ge&&(se=0,ce=-1),0!==de&&m(de),ge=null,me=!1,w()}function w(){if(Se=0,null!==Ee){var e=Ee;Ee=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ye||(ye=!0,_e=e)}}}if(ye)throw e=_e,_e=null,ye=!1,e}function E(e,t,n){fe&&p("245"),fe=!0,n?null!==(n=e.finishedWork)?C(e,n,t):(e.finishedWork=null,null!==(n=a(e,t,!0))&&(S()?e.finishedWork=n:C(e,n,t))):null!==(n=e.finishedWork)?C(e,n,t):(e.finishedWork=null,null!==(n=a(e,t,!1))&&C(e,n,t)),fe=!1}function C(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ee?Ee=[r]:Ee.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=Z=!0,(n=t.stateNode).current===t&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0;var o=d();if(Ye.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var a=t.firstEffect}else a=t;else a=t.firstEffect;for(V(n.containerInfo),re=a;null!==re;){var i=!1,u=void 0;try{for(;null!==re;)2048&re.effectTag&&L(re.alternate,re),re=re.nextEffect}catch(e){i=!0,u=e}i&&(null===re&&p("178"),l(re,u),null!==re&&(re=re.nextEffect))}for(re=a;null!==re;){i=!1,u=void 0;try{for(;null!==re;){var s=re.effectTag;if(16&s&&I(re),128&s){var c=re.alternate;null!==c&&H(c)}switch(14&s){case 2:A(re),re.effectTag&=-3;break;case 6:A(re),re.effectTag&=-3,F(re.alternate,re);break;case 4:F(re.alternate,re);break;case 8:U(re)}re=re.nextEffect}}catch(e){i=!0,u=e}i&&(null===re&&p("178"),l(re,u),null!==re&&(re=re.nextEffect))}for($(n.containerInfo),n.current=t,re=a;null!==re;){s=!1,c=void 0;try{for(a=n,i=o,u=r;null!==re;){var f=re.effectTag;36&f&&B(a,re.alternate,re,i,u),256&f&&q(re,k),128&f&&K(re);var h=re.nextEffect;re.nextEffect=null,re=h}}catch(e){s=!0,c=e}s&&(null===re&&p("178"),l(re,c),null!==re&&(re=re.nextEffect))}Z=oe=!1,nr(t.stateNode),0===(t=n.current.expirationTime)&&(ie=null),e.remainingExpirationTime=t}function S(){return!(null===ge||ge.timeRemaining()>ke)&&(me=!0)}function k(e){null===pe&&p("246"),pe.remainingExpirationTime=0,ye||(ye=!0,_e=e)}var x=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),O=function(e,t){function n(e){return e===wr&&p("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var a=t.push,i=t.pop,u=e(wr),l=e(wr),s=e(wr);return{getHostContext:function(){return n(u.current)},getRootHostContainer:function(){return n(s.current)},popHostContainer:function(e){i(u,e),i(l,e),i(s,e)},popHostContext:function(e){l.current===e&&(i(u,e),i(l,e))},pushHostContainer:function(e,t){a(s,t,e),a(l,e,e),a(u,wr,e),t=o(t),i(u,e),a(u,t,e)},pushHostContext:function(e){var t=n(s.current),o=n(u.current);o!==(t=r(o,e.type,t))&&(a(l,e,e),a(u,t,e))}}}(e,x),T=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||p("108",st(e)||"Unknown",o);return i({},t,n)}var o=e.createCursor,a=e.push,u=e.pop,l=o(f),s=o(!1),c=f;return{getUnmaskedContext:function(e){return n(e)?c:l.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return f;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in r)i[a]=n[a];return o&&t(e,n,i),i},hasContextChanged:function(){return s.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(u(s,e),u(l,e))},popTopLevelContextObject:function(e){u(s,e),u(l,e)},pushTopLevelContextObject:function(e,t,n){null!=l.cursor&&p("168"),a(l,t,e),a(s,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,c=l.current,a(l,t,e),a(s,s.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||p("169"),t){var o=r(e,c);n.__reactInternalMemoizedMergedChildContext=o,u(s,e),u(l,e),a(l,o,e)}else u(s,e);a(s,t,e)},findCurrentUnmaskedContext:function(e){for((2!==$t(e)||2!==e.tag)&&p("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||p("171")}return e.stateNode.context}}}(x);x=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),a=t(null),i=t(0);return{pushProvider:function(e){var t=e.type._context;n(i,t._changedBits,e),n(a,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=i.current,n=a.current;r(o,e),r(a,e),r(i,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(x);var j=function(e){function t(e,t){var n=new Vn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=a(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=i(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;f=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){p("175")},prepareToHydrateHostTextInstance:function(){p("176")},popHydrationState:function(){return!1}};var a=e.canHydrateInstance,i=e.canHydrateTextInstance,u=e.getNextHydratableSibling,l=e.getFirstHydratableChild,s=e.hydrateInstance,c=e.hydrateTextInstance,f=null,d=null,h=!1;return{enterHydrationState:function(e){return d=l(e.stateNode.containerInfo),f=e,h=!0},resetHydrationState:function(){d=f=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=d;if(r){if(!n(e,r)){if(!(r=u(r))||!n(e,r))return e.effectTag|=2,h=!1,void(f=e);t(f,d)}f=e,d=l(r)}else e.effectTag|=2,h=!1,f=e}},prepareToHydrateHostInstance:function(e,t,n){return t=s(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return c(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==f)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=d;n;)t(e,n),n=u(n);return r(e),d=f?u(e.stateNode):null,!0}}}(e),R=vr(e,O,T,x,j,c,s).beginWork,M=function(e,t,n,r,o){function a(e){e.effectTag|=4}var i=e.createInstance,u=e.createTextInstance,l=e.appendInitialChild,s=e.finalizeInitialChildren,c=e.prepareUpdate,f=e.persistence,d=t.getRootHostContainer,h=t.popHostContext,m=t.getHostContext,y=t.popHostContainer,_=n.popContextProvider,g=n.popTopLevelContextObject,v=r.popProvider,b=o.prepareToHydrateHostInstance,w=o.prepareToHydrateHostTextInstance,E=o.popHydrationState,C=void 0,S=void 0,k=void 0;return e.mutation?(C=function(){},S=function(e,t,n){(t.updateQueue=n)&&a(t)},k=function(e,t,n,r){n!==r&&a(t)}):p(f?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return _(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return y(t),g(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(E(t),t.effectTag&=-3),C(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=d();var o=t.type;if(null!==e&&null!=t.stateNode){var f=e.memoizedProps,x=t.stateNode,O=m();x=c(x,o,f,r,n,O),S(e,t,x,o,f,r,n,O),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&p("166"),null;if(e=m(),E(t))b(t,n,e)&&a(t);else{f=i(o,r,n,e,t);e:for(O=t.child;null!==O;){if(5===O.tag||6===O.tag)l(f,O.stateNode);else if(4!==O.tag&&null!==O.child){O.child.return=O,O=O.child;continue}if(O===t)break;for(;null===O.sibling;){if(null===O.return||O.return===t)break e;O=O.return}O.sibling.return=O.return,O=O.sibling}s(f,o,r,n,e)&&a(t),t.stateNode=f}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)k(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&p("166"),null;e=d(),n=m(),E(t)?w(t)&&a(t):t.stateNode=u(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||p("165"),t.tag=8,o=[];e:for((f=t.stateNode)&&(f.return=t);null!==f;){if(5===f.tag||6===f.tag||4===f.tag)p("247");else if(9===f.tag)o.push(f.pendingProps.value);else if(null!==f.child){f.child.return=f,f=f.child;continue}for(;null===f.sibling;){if(null===f.return||f.return===t)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}return r=(f=r.handler)(r.props,o),t.child=_r(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return y(t),C(t),null;case 13:return v(t),null;case 12:return null;case 0:p("167");default:p("156")}}}}(e,O,T,x,j).completeWork,D=(O=function(e,t,n,r,o){var a=e.popHostContainer,i=e.popHostContext,u=t.popContextProvider,l=t.popTopLevelContextObject,s=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:ct(t)};do{switch(e.tag){case 3:return lr(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){lr(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:u(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return a(e),l(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return i(e),null;case 4:return a(e),null;case 13:return s(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:u(e);break;case 3:a(e),l(e);break;case 5:i(e);break;case 4:a(e);break;case 13:s(e)}}}}(O,T,x,0,n)).throwException,N=O.unwindWork,P=O.unwindInterruptedWork,L=(O=function(e,t,n,r,o){function a(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function i(e){switch(rr(e),e.tag){case 2:a(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:a(e);break;case 7:u(e.stateNode);break;case 4:f&&s(e)}}function u(e){for(var t=e;;)if(i(t),null===t.child||f&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function l(e){return 5===e.tag||3===e.tag||4===e.tag}function s(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)u(t),o?E(r,t.stateNode):w(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:i(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var c=e.getPublicInstance,f=e.mutation;e=e.persistence,f||p(e?"235":"236");var d=f.commitMount,h=f.commitUpdate,m=f.resetTextContent,y=f.commitTextUpdate,_=f.appendChild,g=f.appendChildToContainer,v=f.insertBefore,b=f.insertInContainerBefore,w=f.removeChild,E=f.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:p("163")}},commitResetTextContent:function(e){m(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(l(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(m(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||l(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?b(t,o.stateNode,n):v(t,o.stateNode,n):r?g(t,o.stateNode):_(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){s(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&h(n,a,o,e,r,t)}break;case 6:null===t.stateNode&&p("162"),n=t.memoizedProps,y(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:p("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&pr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=c(n.child.stateNode);break;case 2:e=n.child.stateNode}pr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&d(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:p("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&p("264");var a=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<a.length;n++){var i=(r=a[n]).value,u=r.stack;br(e,r),t.componentDidCatch(i,{componentStack:null!==u?u:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&p("264"),a=n.capturedValues,n.capturedValues=null,n=0;n<a.length;n++)br(e,r=a[n]),t(r.value);break;default:p("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=c(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,l,0,0,function(e){null===ie?ie=new Set([e]):ie.add(e)})).commitBeforeMutationLifeCycles,I=O.commitResetTextContent,A=O.commitPlacement,U=O.commitDeletion,F=O.commitWork,B=O.commitLifeCycles,q=O.commitErrorLogging,K=O.commitAttachRef,H=O.commitDetachRef,J=e.now,z=e.scheduleDeferredCallback,W=e.cancelDeferredCallback,V=e.prepareForCommit,$=e.resetAfterCommit,Y=J(),G=Y,Q=0,X=0,Z=!1,ee=null,te=null,ne=0,re=null,oe=!1,ae=!1,ie=null,ue=null,le=null,se=0,ce=-1,fe=!1,pe=null,de=0,he=0,me=!1,ye=!1,_e=null,ge=null,ve=!1,be=!1,we=!1,Ee=null,Ce=1e3,Se=0,ke=1;return{recalculateCurrentTime:d,computeExpirationForFiber:s,scheduleWork:c,requestWork:y,flushRoot:function(e,t){fe&&p("253"),pe=e,de=t,E(e,t,!1),v(),w()},batchedUpdates:function(e,t){var n=ve;ve=!0;try{return e(t)}finally{(ve=n)||fe||v()}},unbatchedUpdates:function(e,t){if(ve&&!be){be=!0;try{return e(t)}finally{be=!1}}return e(t)},flushSync:function(e,t){fe&&p("187");var n=ve;ve=!0;try{return h(e,t)}finally{ve=n,v()}},flushControlled:function(e){var t=ve;ve=!0;try{h(e)}finally{(ve=t)||fe||b(1,!1,null)}},deferredUpdates:function(e){var t=X;X=25*(1+((d()+500)/25|0));try{return e()}finally{X=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(we)return e(t,n);ve||fe||0===he||(b(he,!1,null),he=0);var r=we,o=ve;ve=we=!0;try{return e(t,n)}finally{we=r,(ve=o)||fe||v()}},flushInteractiveUpdates:function(){fe||0===he||(b(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((d()+500)/25|0));return e<=Q&&(e=Q+1),Q=e},legacyContext:T}}function Cr(e){function t(e,t,n,r,o,i){if(r=t.current,n){n=n._reactInternalFiber;var u=l(n);n=s(n)?c(n,u):u}else n=f;return null===t.context?t.context=n:t.pendingContext=n,sr(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=i)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),a(r,o),o}var n=e.getPublicInstance,r=(e=Er(e)).recalculateCurrentTime,o=e.computeExpirationForFiber,a=e.scheduleWork,u=e.legacyContext,l=u.findCurrentUnmaskedContext,s=u.isContextProvider,c=u.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new Vn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,a,i){var u=n.current;return t(e,n,a,r(),u=o(u),i)},updateContainerAtExpirationTime:function(e,n,o,a,i){return t(e,n,o,r(),a,i)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=Xt(t))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Qt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Zn=tr(function(e){return t.onCommitFiberRoot(n,e)}),er=tr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(i({},e,{findHostInstanceByFiber:function(e){return null===(e=Xt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var Sr=Object.freeze({default:Cr}),kr=Sr&&Cr||Sr,xr=kr.default?kr.default:kr;var Or="object"==typeof performance&&"function"==typeof performance.now,Tr=void 0;Tr=Or?function(){return performance.now()}:function(){return Date.now()};var jr=void 0,Rr=void 0;if(a.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Mr=null,Dr=!1,Nr=-1,Pr=!1,Lr=0,Ir=33,Ar=33,Ur=void 0;Ur=Or?{didTimeout:!1,timeRemaining:function(){var e=Lr-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Lr-Date.now();return 0<e?e:0}};var Fr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Fr){if(Dr=!1,e=Tr(),0>=Lr-e){if(!(-1!==Nr&&Nr<=e))return void(Pr||(Pr=!0,requestAnimationFrame(Br)));Ur.didTimeout=!0}else Ur.didTimeout=!1;Nr=-1,e=Mr,Mr=null,null!==e&&e(Ur)}},!1);var Br=function(e){Pr=!1;var t=e-Lr+Ar;t<Ar&&Ir<Ar?(8>t&&(t=8),Ar=t<Ir?Ir:t):Ir=t,Lr=e+Ar,Dr||(Dr=!0,window.postMessage(Fr,"*"))};jr=function(e,t){return Mr=e,null!=t&&"number"==typeof t.timeout&&(Nr=Tr()+t.timeout),Pr||(Pr=!0,requestAnimationFrame(Br)),0},Rr=function(){Mr=null,Dr=!1,Nr=-1}}else jr=window.requestIdleCallback,Rr=window.cancelIdleCallback;else jr=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Rr=function(e){clearTimeout(e)};function qr(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Kr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Hr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Jr(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function zr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Wr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Vr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var $r={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Yr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Gr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Yr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Qr,Xr=void 0,Zr=(Qr=function(e,t){if(e.namespaceURI!==$r.svg||"innerHTML"in e)e.innerHTML=t;else{for((Xr=Xr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Xr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Qr(e,t)})}:Qr);function eo(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var to={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},no=["Webkit","ms","Moz","O"];function ro(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,a=t[n];o=null==a||"boolean"==typeof a||""===a?"":r||"number"!=typeof a||0===a||to.hasOwnProperty(o)&&to[o]?(""+a).trim():a+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(to).forEach(function(e){no.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),to[t]=to[e]})});var oo=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ao(e,t,n){t&&(oo[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function io(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var uo=u.thatReturns("");function lo(e,t){var n=Ln(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?wn("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(wn("topFocus","focus",e),wn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(ze("cancel",!0)&&wn("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(ze("close",!0)&&wn("topClose","close",e),n.topClose=!0):Rn.hasOwnProperty(o)&&bn(o,Rn[o],e),n[o]=!0)}}function so(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===$r.html&&(r=Yr(e)),r===$r.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function co(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function fo(e,t,n,r){var o=io(t,n);switch(t){case"iframe":case"object":bn("topLoad","load",e);var a=n;break;case"video":case"audio":for(a in Mn)Mn.hasOwnProperty(a)&&bn(a,Mn[a],e);a=n;break;case"source":bn("topError","error",e),a=n;break;case"img":case"image":case"link":bn("topError","error",e),bn("topLoad","load",e),a=n;break;case"form":bn("topReset","reset",e),bn("topSubmit","submit",e),a=n;break;case"details":bn("topToggle","toggle",e),a=n;break;case"input":bt(e,n),a=vt(e,n),bn("topInvalid","invalid",e),lo(r,"onChange");break;case"option":a=qr(e,n);break;case"select":Hr(e,n),a=i({},n,{value:void 0}),bn("topInvalid","invalid",e),lo(r,"onChange");break;case"textarea":zr(e,n),a=Jr(e,n),bn("topInvalid","invalid",e),lo(r,"onChange");break;default:a=n}ao(t,a,uo);var l,s=a;for(l in s)if(s.hasOwnProperty(l)){var c=s[l];"style"===l?ro(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&Zr(e,c):"children"===l?"string"==typeof c?("textarea"!==t||""!==c)&&eo(e,c):"number"==typeof c&&eo(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(b.hasOwnProperty(l)?null!=c&&lo(r,l):null!=c&&gt(e,l,c,o))}switch(t){case"input":Ve(e),Ct(e,n);break;case"textarea":Ve(e),Vr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Kr(e,!!n.multiple,t,!1):null!=n.defaultValue&&Kr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=u)}}function po(e,t,n,r,o){var a=null;switch(t){case"input":n=vt(e,n),r=vt(e,r),a=[];break;case"option":n=qr(e,n),r=qr(e,r),a=[];break;case"select":n=i({},n,{value:void 0}),r=i({},r,{value:void 0}),a=[];break;case"textarea":n=Jr(e,n),r=Jr(e,r),a=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=u)}ao(t,r,uo),t=e=void 0;var l=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var s=n[e];for(t in s)s.hasOwnProperty(t)&&(l||(l={}),l[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(b.hasOwnProperty(e)?a||(a=[]):(a=a||[]).push(e,null));for(e in r){var c=r[e];if(s=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&c!==s&&(null!=c||null!=s))if("style"===e)if(s){for(t in s)!s.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(l||(l={}),l[t]="");for(t in c)c.hasOwnProperty(t)&&s[t]!==c[t]&&(l||(l={}),l[t]=c[t])}else l||(a||(a=[]),a.push(e,l)),l=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(a=a||[]).push(e,""+c)):"children"===e?s===c||"string"!=typeof c&&"number"!=typeof c||(a=a||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(b.hasOwnProperty(e)?(null!=c&&lo(o,e),a||s===c||(a=[])):(a=a||[]).push(e,c))}return l&&(a=a||[]).push("style",l),a}function ho(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&wt(e,o),io(n,r),r=io(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],u=t[a+1];"style"===i?ro(e,u):"dangerouslySetInnerHTML"===i?Zr(e,u):"children"===i?eo(e,u):gt(e,i,u,r)}switch(n){case"input":Et(e,o);break;case"textarea":Wr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Kr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Kr(e,!!o.multiple,o.defaultValue,!0):Kr(e,!!o.multiple,o.multiple?[]:"",!1))}}function mo(e,t,n,r,o){switch(t){case"iframe":case"object":bn("topLoad","load",e);break;case"video":case"audio":for(var a in Mn)Mn.hasOwnProperty(a)&&bn(a,Mn[a],e);break;case"source":bn("topError","error",e);break;case"img":case"image":case"link":bn("topError","error",e),bn("topLoad","load",e);break;case"form":bn("topReset","reset",e),bn("topSubmit","submit",e);break;case"details":bn("topToggle","toggle",e);break;case"input":bt(e,n),bn("topInvalid","invalid",e),lo(o,"onChange");break;case"select":Hr(e,n),bn("topInvalid","invalid",e),lo(o,"onChange");break;case"textarea":zr(e,n),bn("topInvalid","invalid",e),lo(o,"onChange")}for(var i in ao(t,n,uo),r=null,n)n.hasOwnProperty(i)&&(a=n[i],"children"===i?"string"==typeof a?e.textContent!==a&&(r=["children",a]):"number"==typeof a&&e.textContent!==""+a&&(r=["children",""+a]):b.hasOwnProperty(i)&&null!=a&&lo(o,i));switch(t){case"input":Ve(e),Ct(e,n);break;case"textarea":Ve(e),Vr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=u)}return r}function yo(e,t){return e.nodeValue!==t}var _o=Object.freeze({createElement:so,createTextNode:co,setInitialProperties:fo,diffProperties:po,updateProperties:ho,diffHydratedProperties:mo,diffHydratedText:yo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Et(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=z(r);o||p("90"),$e(r),Et(r,o)}}}break;case"textarea":Wr(e,n);break;case"select":null!=(t=n.value)&&Kr(e,!!n.multiple,t,!1)}}});je.injectFiberControlledHostComponent(_o);var go=null,vo=null;function bo(e){this._expirationTime=ko.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function wo(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Eo(e,t,n){this._internalRoot=ko.createContainer(e,t,n)}function Co(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function So(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}bo.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new wo;return ko.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},bo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},bo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,ko.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},bo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},wo.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},wo.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},Eo.prototype.render=function(e,t){var n=this._internalRoot,r=new wo;return null!==(t=void 0===t?null:t)&&r.then(t),ko.updateContainer(e,n,null,r._onCommit),r},Eo.prototype.unmount=function(e){var t=this._internalRoot,n=new wo;return null!==(e=void 0===e?null:e)&&n.then(e),ko.updateContainer(null,t,null,n._onCommit),n},Eo.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new wo;return null!==(n=void 0===n?null:n)&&o.then(n),ko.updateContainer(t,r,e,o._onCommit),o},Eo.prototype.createBatch=function(){var e=new bo(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var ko=xr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Gr(null,"");break;default:e=Gr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Gr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){go=gn;var e=l();if(Un(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var a=0,i=-1,u=-1,s=0,c=0,f=e,p=null;t:for(;;){for(var d;f!==t||0!==r&&3!==f.nodeType||(i=a+r),f!==o||0!==n&&3!==f.nodeType||(u=a+n),3===f.nodeType&&(a+=f.nodeValue.length),null!==(d=f.firstChild);)p=f,f=d;for(;;){if(f===e)break t;if(p===t&&++s===r&&(i=a),p===o&&++c===n&&(u=a),null!==(d=f.nextSibling))break;p=(f=p).parentNode}f=d}t=-1===i||-1===u?null:{start:i,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;vo={focusedElem:e,selectionRange:t},vn(!1)},resetAfterCommit:function(){var e=vo,t=l(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&c(document.documentElement,n)){if(Un(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[oe()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=An(n,e);var a=An(n,r);if(o&&a&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==a.node||t.focusOffset!==a.offset)){var i=document.createRange();i.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(i),t.extend(a.node,a.offset)):(i.setEnd(a.node,a.offset),t.addRange(i))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}vo=null,vn(go),go=null},createInstance:function(e,t,n,r,o){return(e=so(e,t,n,r))[q]=o,e[K]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return fo(e,t,n,r),So(t,n)},prepareUpdate:function(e,t,n,r,o){return po(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=co(e,t))[q]=r,e},now:Tr,mutation:{commitMount:function(e,t,n){So(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[K]=o,ho(e,t,n,r,o)},resetTextContent:function(e){eo(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,a){return e[q]=a,e[K]=n,mo(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[q]=n,yo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:jr,cancelDeferredCallback:Rr}),xo=ko;function Oo(e,t,n,r,o){Co(n)||p("200");var a=n._reactRootContainer;if(a){if("function"==typeof o){var i=o;o=function(){var e=ko.getPublicRootInstance(a._internalRoot);i.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Eo(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=ko.getPublicRootInstance(a._internalRoot);u.call(e)}}ko.unbatchedUpdates(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)})}return ko.getPublicRootInstance(a._internalRoot)}function To(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Co(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:et,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ae=xo.batchedUpdates,Ue=xo.interactiveUpdates,Fe=xo.flushInteractiveUpdates;var jo={createPortal:To,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:ko.findHostInstance(e)},hydrate:function(e,t,n){return Oo(null,e,t,!0,n)},render:function(e,t,n){return Oo(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),Oo(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Co(e)||p("40"),!!e._reactRootContainer&&(ko.unbatchedUpdates(function(){Oo(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return To.apply(void 0,arguments)},unstable_batchedUpdates:ko.batchedUpdates,unstable_deferredUpdates:ko.deferredUpdates,flushSync:ko.flushSync,unstable_flushControlled:ko.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:F,EventPluginRegistry:S,EventPropagators:ne,ReactControlledComponent:Ie,ReactDOMComponentTree:W,ReactDOMEventListener:Sn},unstable_createRoot:function(e,t){return new Eo(e,!0,null!=t&&!0===t.hydrate)}};ko.injectIntoDevTools({findFiberByHostInstance:H,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Ro=Object.freeze({default:jo}),Mo=Ro&&jo||Ro;e.exports=Mo.default?Mo.default:Mo},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(15),o=n(4),a=n(101),i=n(31),u="function"==typeof Symbol&&Symbol.for,l=u?Symbol.for("react.element"):60103,s=u?Symbol.for("react.portal"):60106,c=u?Symbol.for("react.fragment"):60107,f=u?Symbol.for("react.strict_mode"):60108,p=u?Symbol.for("react.provider"):60109,d=u?Symbol.for("react.context"):60110,h=u?Symbol.for("react.async_mode"):60111,m=u?Symbol.for("react.forward_ref"):60112,y="function"==typeof Symbol&&Symbol.iterator;function _(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function v(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||g}function b(){}function w(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||g}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&_("85"),this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=v.prototype;var E=w.prototype=new b;E.constructor=w,r(E,v.prototype),E.isPureReactComponent=!0;var C={current:null},S=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r=void 0,o={},a=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!k.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:l,type:e,key:a,ref:i,props:o,_owner:C.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var T=/\/+/g,j=[];function R(e,t,n,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function D(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case l:case s:a=!0}}if(a)return n(r,e,""===t?"."+N(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var i=0;i<e.length;i++){var u=t+N(o=e[i],i);a+=D(o,u,n,r)}else if(null===e||void 0===e?u=null:u="function"==typeof(u=y&&e[y]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),i=0;!(o=e.next()).done;)a+=D(o=o.value,u=t+N(o,i++),n,r);else"object"===o&&_("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function P(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?I(e,r,n,i.thatReturnsArgument):null!=e&&(O(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(T,"$&/")+"/")+n,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function I(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(T,"$&/")+"/"),t=R(t,a,r,o),null==e||D(e,"",L,t),M(t)}var A={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return I(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=R(null,null,t,n),null==e||D(e,"",P,t),M(t)},count:function(e){return null==e?0:D(e,"",i.thatReturnsNull,null)},toArray:function(e){var t=[];return I(e,t,null,i.thatReturnsArgument),t},only:function(e){return O(e)||_("143"),e}},createRef:function(){return{current:null}},Component:v,PureComponent:w,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:m,render:e}},Fragment:c,StrictMode:f,unstable_AsyncMode:h,createElement:x,cloneElement:function(e,t,n){(null===e||void 0===e)&&_("267",e);var o=void 0,a=r({},e.props),i=e.key,u=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,s=C.current),void 0!==t.key&&(i=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)S.call(t,o)&&!k.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:l,type:e.type,key:i,ref:u,props:a,_owner:s}},createFactory:function(e){var t=x.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:C,assign:r}},U=Object.freeze({default:A}),F=U&&A||U;e.exports=F.default?F.default:F},function(e,t,n){"use strict";n(266);var r=i(n(1)),o=i(n(8)),a=i(n(257));function i(e){return e&&e.__esModule?e:{default:e}}o.default.render(r.default.createElement(a.default,null),document.getElementById("app"))},,function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ob3QtbG9hZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW1tdXRhYmxlL2Rpc3QvaW1tdXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRWRpdG9yU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0Jyb3dzZXJSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvSGFzaFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9MaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JvdXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL05hdkxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Qcm9tcHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL0RPTVV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZUJyb3dzZXJIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZUhhc2hIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9SZWRpcmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9SZWRpcmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N0YXRpY1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvU3dpdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0TW9kaWZpZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZ2xvYmFsL0Zvb3Rlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9nbG9iYWwvSGVhZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvQ2hhcmFjdGVyTWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9Db250ZW50QmxvY2tOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL251bGx0aHJvd3MuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvVXNlckFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L1BhdGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dlbmVyYXRlUmFuZG9tS2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRGZWF0dXJlRmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvam9icy9Kb2JzUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvVW5pY29kZVV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvQ29udGVudEJsb2NrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL1NlbGVjdGlvblN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9yZW1vdmVUZXh0V2l0aFN0cmF0ZWd5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvaXNFdmVudEhhbmRsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9maW5kUmFuZ2VzSW1tdXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvQmxvY2tNYXBCdWlsZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRPZmZzZXRLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldENvbnRlbnRTdGF0ZUZyYWdtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jb250YWluc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzLXV0aWxzL2xpYi9nZXRTZWxlY3RlZEJsb2Nrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMtZXhwb3J0LWh0bWwvbGliL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9tb3ZlU2VsZWN0aW9uQmFja3dhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9LZXlCaW5kaW5nVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2ZpbmRBbmNlc3Rvck9mZnNldEtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0U2Nyb2xsUG9zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL1N0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9LZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL1VuaWNvZGVCaWRpRGlyZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvc2FuaXRpemVEcmFmdFRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9Db250ZW50U3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL2Vycm9yT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL3V0aWwvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9kYXNoYm9hcmRzL2pvYnMvU2luZ2xlRGFzaGJvYXJkSm9iLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2dsb2JhbC9Mb2dpbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9nbG9iYWwvUmVnaXN0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vZGFsL2xpYi9oZWxwZXJzL3NhZmVIVE1MRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9kYWwvbGliL2hlbHBlcnMvYXJpYUFwcEhpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvaGVscGVycy90YWJiYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9kYWwvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRTdHJpbmdLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXREZWZhdWx0S2V5QmluZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL1JpY2hUZXh0RWRpdG9yVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFNhZmVCb2R5RnJvbUhUTUwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9jb252ZXJ0RnJvbUhUTUxUb0NvbnRlbnRCbG9ja3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9tb3ZlU2VsZWN0aW9uRm9yd2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0UmVtb3ZhYmxlV29yZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldERyYWZ0RWRpdG9yU2VsZWN0aW9uV2l0aE5vZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0UmFuZ2VDbGllbnRSZWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldEZyYWdtZW50RnJvbVNlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFRleHRDb250ZW50RnJvbUZpbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRGF0YVRyYW5zZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9TY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVkaXRvckJsb2NrLnJlYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvaXNTZWxlY3Rpb25BdExlYWZTdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RlZmF1bHREcmFmdElubGluZVN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9Vbmljb2RlQmlkaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RW50aXR5SW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9CbG9ja1RyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXROZXh0RGVsaW1pdGVyQmxvY2tLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9pbnNlcnRJbnRvTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3JlbW92ZUVudGl0aWVzQXRFZGdlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3JhbmRvbWl6ZUJsb2NrTWFwS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9qb2JzL1NpbmdsZUpvYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvRE9NVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZUhhc2hIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZUJyb3dzZXJIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Rhc2hib2FyZHMvam9icy9Kb2JzU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvc3ltYm9sL3J4U3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9PYnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC90cnlDYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL3V0aWwvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9vcGVyYXRvcnMvZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL29wZXJhdG9yL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9kYXNoYm9hcmRzL2NvbXBhbmllcy9Db21wYW55LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Rhc2hib2FyZHMvY29tcGFuaWVzL0NvbXBhbmllc1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGFzaGJvYXJkcy9FbXBsb3llckRhc2hib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9kYXNoYm9hcmRzL0VtcGxveWVlRGFzaGJvYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Rhc2hib2FyZHMvTXlBY2NvdW50LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2dsb2JhbC9Db250YWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2dsb2JhbC9BYm91dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9nbG9iYWwvSG9tZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9kYXNoYm9hcmRzL2pvYnMvVmlld0pvYlBhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGFzaGJvYXJkcy9qb2JzL05ld0pvYlBhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0L3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0LmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leGVudi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9kYWwvbGliL2hlbHBlcnMvY2xhc3NMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvaGVscGVycy9zY29wZVRhYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9kYWwvbGliL2hlbHBlcnMvZm9jdXNNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvY29tcG9uZW50cy9Nb2RhbFBvcnRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9kYWwvbGliL2NvbXBvbmVudHMvTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGFzaGJvYXJkcy9jb21wYW5pZXMvVmlld0NvbXBhbnlQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Rhc2hib2FyZHMvY29tcGFuaWVzL05ld0NvbXBhbnlQYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy11dGlscy9saWIvY2FsbE1vZGlmaWVyRm9yU2VsZWN0ZWRCbG9ja3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzLXV0aWxzL2xpYi9zZWxlY3Rpb25Db250YWluc0VudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMtdXRpbHMvbGliL2dldEVudGl0eVJhbmdlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMtdXRpbHMvbGliL0NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMtdXRpbHMvbGliL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzLWV4cG9ydC1odG1sL2xpYi9oZWxwZXJzL3N0eWxlVG9DU1MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzLWV4cG9ydC1odG1sL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzLWV4cG9ydC1odG1sL2xpYi9oZWxwZXJzL2NvbWJpbmVPcmRlcmVkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy1leHBvcnQtaHRtbC9saWIvc3RhdGVUb0hUTUwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXRSYW5nZUJvdW5kaW5nQ2xpZW50UmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFZpc2libGVTZWxlY3Rpb25SZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZGVjb2RlSW5saW5lU3R5bGVSYW5nZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9kZWNvZGVFbnRpdHlSYW5nZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9jcmVhdGVDaGFyYWN0ZXJMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRUcmVlQWRhcHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2NvbnZlcnRGcm9tUmF3VG9EcmFmdFN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZW5jb2RlSW5saW5lU3R5bGVSYW5nZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lbmNvZGVFbnRpdHlSYW5nZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9jb252ZXJ0RnJvbURyYWZ0U3RhdGVUb1Jhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yUGxhY2Vob2xkZXIucmVhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXREcmFmdEVkaXRvclNlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPblNlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3NwbGl0VGV4dEludG9UZXh0QmxvY2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvYWRqdXN0QmxvY2tEZXB0aEZvckNvbnRlbnRTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvVVJJLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRQYXN0ZVByb2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPblBhc3RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIva2V5Q29tbWFuZFVuZG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9rZXlDb21tYW5kVHJhbnNwb3NlQ2hhcmFjdGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRQbGFpbkRlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRQbGFpbkJhY2tzcGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9TdGFydE9mQmxvY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9rZXlDb21tYW5kTW92ZVNlbGVjdGlvblRvRW5kT2ZCbG9jay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRJbnNlcnROZXdsaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIva2V5Q29tbWFuZERlbGV0ZVdvcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL1Rva2VuaXplVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRCYWNrc3BhY2VXb3JkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZXhwYW5kUmFuZ2VUb1N0YXJ0T2ZMaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIva2V5Q29tbWFuZEJhY2tzcGFjZVRvU3RhcnRPZkxpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9TZWNvbmRhcnlDbGlwYm9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25LZXlEb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZWRpdE9uSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25Gb2N1cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkRyYWdTdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkRyYWdPdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZWRpdE9uQ3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZWRpdE9uQ29weS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkNvbXBvc2l0aW9uU3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25CbHVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25CZWZvcmVJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yRWRpdEhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2NyZWF0ZUFycmF5RnJvbU1peGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9QaG90b3NNaW1lVHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yRHJhZ0hhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2pvaW5DbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRWaWV3cG9ydERpbWVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXREb2N1bWVudFNjcm9sbEVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldEVsZW1lbnRSZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRFbGVtZW50UG9zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2h5cGhlbmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY2FtZWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldFN0eWxlUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEpzRGVidWdMb2dnaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvc2V0RHJhZnRFZGl0b3JTZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL21lbW9pemVTdHJpbmdPbmx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9tYXBPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL1ZlcnNpb25SYW5nZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VhLXBhcnNlci1qcy9zcmMvdWEtcGFyc2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9Vc2VyQWdlbnREYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRFZGl0b3JUZXh0Tm9kZS5yZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yTGVhZi5yZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yQ29udGVudHMtY29yZS5yZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yQ29udGVudHMucmVhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVkaXRvckNvbXBvc2l0aW9uSGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yLnJlYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvQ29tcG9zaXRlRHJhZnREZWNvcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9tb3ZlQmxvY2tJbkNvbnRlbnRTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvVW5pY29kZUJpZGlTZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRWRpdG9yQmlkaVNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9zcGxpdEJsb2NrSW5Db250ZW50U3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9yZW1vdmVSYW5nZUZyb21Db250ZW50U3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9tb2RpZnlCbG9ja0ZvckNvbnRlbnRTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2luc2VydFRleHRJbnRvQ29udGVudFN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvaW5zZXJ0RnJhZ21lbnRJbnRvQ29udGVudFN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0UmFuZ2VzRm9yRHJhZnRFbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVudGl0eVNlZ21lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0Q2hhcmFjdGVyUmVtb3ZhbFJhbmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvYXBwbHlFbnRpdHlUb0NvbnRlbnRCbG9jay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2FwcGx5RW50aXR5VG9Db250ZW50U3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9Db250ZW50U3RhdGVJbmxpbmVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RmVhdHVyZUZsYWdzLWNvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9BdG9taWNCbG9ja1V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2pvYnMvSm9iUG9zdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaG90LWxvYWRlci9kaXN0L3JlYWN0LWhvdC1sb2FkZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idG9hLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3JvdXRlcnMvQXBwUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzVGV4dE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwidmFsaWRhdGVGb3JtYXQiLCJmb3JtYXQiLCJjb25kaXRpb24iLCJhIiwiYiIsImUiLCJmIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJFcnJvciIsImFyZ3MiLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsIlNMSUNFJDAiLCJBcnJheSIsInNsaWNlIiwiY3JlYXRlQ2xhc3MiLCJjdG9yIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiSXRlcmFibGUiLCJpc0l0ZXJhYmxlIiwiU2VxIiwiS2V5ZWRJdGVyYWJsZSIsImlzS2V5ZWQiLCJLZXllZFNlcSIsIkluZGV4ZWRJdGVyYWJsZSIsImlzSW5kZXhlZCIsIkluZGV4ZWRTZXEiLCJTZXRJdGVyYWJsZSIsImlzQXNzb2NpYXRpdmUiLCJTZXRTZXEiLCJtYXliZUl0ZXJhYmxlIiwiSVNfSVRFUkFCTEVfU0VOVElORUwiLCJtYXliZUtleWVkIiwiSVNfS0VZRURfU0VOVElORUwiLCJtYXliZUluZGV4ZWQiLCJJU19JTkRFWEVEX1NFTlRJTkVMIiwibWF5YmVBc3NvY2lhdGl2ZSIsImlzT3JkZXJlZCIsIm1heWJlT3JkZXJlZCIsIklTX09SREVSRURfU0VOVElORUwiLCJLZXllZCIsIkluZGV4ZWQiLCJTZXQiLCJTSElGVCIsIlNJWkUiLCJNQVNLIiwiTk9UX1NFVCIsIkNIQU5HRV9MRU5HVEgiLCJESURfQUxURVIiLCJNYWtlUmVmIiwicmVmIiwiU2V0UmVmIiwiT3duZXJJRCIsImFyckNvcHkiLCJhcnIiLCJvZmZzZXQiLCJsZW4iLCJNYXRoIiwibWF4IiwibGVuZ3RoIiwibmV3QXJyIiwiaWkiLCJlbnN1cmVTaXplIiwiaXRlciIsInNpemUiLCJfX2l0ZXJhdGUiLCJyZXR1cm5UcnVlIiwid3JhcEluZGV4IiwiaW5kZXgiLCJ1aW50MzJJbmRleCIsIk5hTiIsIndob2xlU2xpY2UiLCJiZWdpbiIsImVuZCIsInJlc29sdmVCZWdpbiIsInJlc29sdmVJbmRleCIsInJlc29sdmVFbmQiLCJkZWZhdWx0SW5kZXgiLCJtaW4iLCJJVEVSQVRFX0tFWVMiLCJJVEVSQVRFX1ZBTFVFUyIsIklURVJBVEVfRU5UUklFUyIsIlJFQUxfSVRFUkFUT1JfU1lNQk9MIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJGQVVYX0lURVJBVE9SX1NZTUJPTCIsIklURVJBVE9SX1NZTUJPTCIsIkl0ZXJhdG9yIiwibmV4dCIsInRoaXMiLCJpdGVyYXRvclZhbHVlIiwidHlwZSIsImsiLCJ2IiwiaXRlcmF0b3JSZXN1bHQiLCJkb25lIiwiaXRlcmF0b3JEb25lIiwiaGFzSXRlcmF0b3IiLCJnZXRJdGVyYXRvckZuIiwiaXNJdGVyYXRvciIsIm1heWJlSXRlcmF0b3IiLCJnZXRJdGVyYXRvciIsIml0ZXJhYmxlIiwiaXRlcmF0b3JGbiIsImlzQXJyYXlMaWtlIiwiZW1wdHlTZXF1ZW5jZSIsInRvU2VxIiwic2VxIiwibWF5YmVJbmRleGVkU2VxRnJvbVZhbHVlIiwiT2JqZWN0U2VxIiwiVHlwZUVycm9yIiwic2VxRnJvbVZhbHVlIiwidG9LZXllZFNlcSIsImZyb21FbnRyeVNlcSIsImtleWVkU2VxRnJvbVZhbHVlIiwiZW50cnlTZXEiLCJ0b0luZGV4ZWRTZXEiLCJpbmRleGVkU2VxRnJvbVZhbHVlIiwidG9TZXRTZXEiLCJ0b1N0cmluZyIsIktFWVMiLCJWQUxVRVMiLCJFTlRSSUVTIiwiaW5zcGVjdCIsInRvU291cmNlIiwib2YiLCJhcmd1bWVudHMiLCJfX3RvU3RyaW5nIiwiY2FjaGVSZXN1bHQiLCJfY2FjaGUiLCJfX2l0ZXJhdGVVbmNhY2hlZCIsInRvQXJyYXkiLCJmbiIsInJldmVyc2UiLCJzZXFJdGVyYXRlIiwiX19pdGVyYXRvciIsInNlcUl0ZXJhdG9yIiwiaXNTZXEiLCJFTVBUWV9TRVEiLCJFTVBUWV9SRVBFQVQiLCJFTVBUWV9SQU5HRSIsIklTX1NFUV9TRU5USU5FTCIsIkFycmF5U2VxIiwiYXJyYXkiLCJfYXJyYXkiLCJrZXlzIiwiX29iamVjdCIsIl9rZXlzIiwiSXRlcmFibGVTZXEiLCJfaXRlcmFibGUiLCJJdGVyYXRvclNlcSIsIl9pdGVyYXRvciIsIl9pdGVyYXRvckNhY2hlIiwibWF5YmVTZXEiLCJpc0FycmF5IiwidXNlS2V5cyIsImNhY2hlIiwibWF4SW5kZXgiLCJlbnRyeSIsIl9faXRlcmF0b3JVbmNhY2hlZCIsImZyb21KUyIsImpzb24iLCJjb252ZXJ0ZXIiLCJmcm9tSlNXaXRoIiwia2V5IiwicGFyZW50SlNPTiIsIm1hcCIsImlzUGxhaW5PYmoiLCIiLCJmcm9tSlNEZWZhdWx0IiwidG9MaXN0IiwidG9NYXAiLCJpcyIsInZhbHVlQSIsInZhbHVlQiIsInZhbHVlT2YiLCJlcXVhbHMiLCJkZWVwRXF1YWwiLCJfX2hhc2giLCJub3RBc3NvY2lhdGl2ZSIsImVudHJpZXMiLCJldmVyeSIsImZsaXBwZWQiLCJfIiwiYWxsRXF1YWwiLCJiU2l6ZSIsImhhcyIsIlJlcGVhdCIsInRpbWVzIiwiX3ZhbHVlIiwiSW5maW5pdHkiLCJpbnZhcmlhbnQiLCJSYW5nZSIsInN0YXJ0Iiwic3RlcCIsImFicyIsIl9zdGFydCIsIl9lbmQiLCJfc3RlcCIsImNlaWwiLCJDb2xsZWN0aW9uIiwiS2V5ZWRDb2xsZWN0aW9uIiwiSW5kZXhlZENvbGxlY3Rpb24iLCJTZXRDb2xsZWN0aW9uIiwibm90U2V0VmFsdWUiLCJpdGVyYXRpb25zIiwidmFsIiwiaW5jbHVkZXMiLCJzZWFyY2hWYWx1ZSIsImluZGV4T2YiLCJsYXN0SW5kZXhPZiIsInRoaXMkMCIsIm90aGVyIiwicG9zc2libGVJbmRleCIsImZsb29yIiwib2Zmc2V0VmFsdWUiLCJpbXVsIiwic21pIiwiaTMyIiwiaGFzaCIsInN0cmluZyIsImgiLCJTVFJJTkdfSEFTSF9DQUNIRV9NSU5fU1RSTEVOIiwic3RyaW5nSGFzaENhY2hlIiwiaGFzaFN0cmluZyIsIlNUUklOR19IQVNIX0NBQ0hFX1NJWkUiLCJTVFJJTkdfSEFTSF9DQUNIRV9NQVhfU0laRSIsImhhc2hDb2RlIiwib2JqIiwidXNpbmdXZWFrTWFwIiwid2Vha01hcCIsIlVJRF9IQVNIX0tFWSIsImNhbkRlZmluZVByb3BlcnR5IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJub2RlIiwibm9kZVR5cGUiLCJ1bmlxdWVJRCIsImRvY3VtZW50RWxlbWVudCIsImdldElFTm9kZUhhc2giLCJvYmpIYXNoVUlEIiwic2V0IiwiaXNFeHRlbnNpYmxlIiwid3JpdGFibGUiLCJhcHBseSIsImhhc2hKU09iaiIsImNoYXJDb2RlQXQiLCJXZWFrTWFwIiwiYXNzZXJ0Tm90SW5maW5pdGUiLCJNYXAiLCJlbXB0eU1hcCIsImlzTWFwIiwid2l0aE11dGF0aW9ucyIsImZvckVhY2giLCJtYXliZU1hcCIsIklTX01BUF9TRU5USU5FTCIsIl9yb290IiwidXBkYXRlTWFwIiwic2V0SW4iLCJrZXlQYXRoIiwidXBkYXRlSW4iLCJyZW1vdmUiLCJkZWxldGVJbiIsInVwZGF0ZSIsInVwZGF0ZXIiLCJ1cGRhdGVkVmFsdWUiLCJ1cGRhdGVJbkRlZXBNYXAiLCJleGlzdGluZyIsImtleVBhdGhJdGVyIiwiaXNOb3RTZXQiLCJleGlzdGluZ1ZhbHVlIiwibmV3VmFsdWUiLCJuZXh0RXhpc3RpbmciLCJuZXh0VXBkYXRlZCIsImZvcmNlSXRlcmF0b3IiLCJjbGVhciIsIl9fb3duZXJJRCIsIl9fYWx0ZXJlZCIsIm1lcmdlIiwibWVyZ2VJbnRvTWFwV2l0aCIsIm1lcmdlV2l0aCIsIm1lcmdlciIsIml0ZXJzIiwibWVyZ2VJbiIsIm1lcmdlRGVlcCIsImRlZXBNZXJnZXIiLCJtZXJnZURlZXBXaXRoIiwiZGVlcE1lcmdlcldpdGgiLCJtZXJnZURlZXBJbiIsInNvcnQiLCJjb21wYXJhdG9yIiwiT3JkZXJlZE1hcCIsInNvcnRGYWN0b3J5Iiwic29ydEJ5IiwibWFwcGVyIiwibXV0YWJsZSIsImFzTXV0YWJsZSIsIndhc0FsdGVyZWQiLCJfX2Vuc3VyZU93bmVyIiwiYXNJbW11dGFibGUiLCJNYXBJdGVyYXRvciIsIml0ZXJhdGUiLCJvd25lcklEIiwibWFrZU1hcCIsIkVNUFRZX01BUCIsIk1hcFByb3RvdHlwZSIsIkFycmF5TWFwTm9kZSIsIkJpdG1hcEluZGV4ZWROb2RlIiwiYml0bWFwIiwibm9kZXMiLCJIYXNoQXJyYXlNYXBOb2RlIiwiY291bnQiLCJIYXNoQ29sbGlzaW9uTm9kZSIsImtleUhhc2giLCJWYWx1ZU5vZGUiLCJfdHlwZSIsIl9yZXZlcnNlIiwiX3N0YWNrIiwibWFwSXRlcmF0b3JGcmFtZSIsIm1hcEl0ZXJhdG9yVmFsdWUiLCJwcmV2IiwiX19wcmV2Iiwicm9vdCIsIm5ld1Jvb3QiLCJuZXdTaXplIiwiZGlkQ2hhbmdlU2l6ZSIsImRpZEFsdGVyIiwidXBkYXRlTm9kZSIsInNoaWZ0IiwiaXNMZWFmTm9kZSIsIm1lcmdlSW50b05vZGUiLCJuZXdOb2RlIiwiaWR4MSIsImlkeDIiLCJpdGVyYWJsZXMiLCJwdXNoIiwibWVyZ2VJbnRvQ29sbGVjdGlvbldpdGgiLCJuZXh0VmFsdWUiLCJjb2xsZWN0aW9uIiwiZmlsdGVyIiwieCIsIm1lcmdlSW50b01hcCIsInBvcENvdW50IiwiaWR4IiwiY2FuRWRpdCIsIm5ld0FycmF5IiwicmVtb3ZlSW4iLCJyZW1vdmVkIiwiZXhpc3RzIiwiTUFYX0FSUkFZX01BUF9TSVpFIiwiY3JlYXRlTm9kZXMiLCJpc0VkaXRhYmxlIiwibmV3RW50cmllcyIsInBvcCIsImJpdCIsImtleUhhc2hGcmFnIiwiTUFYX0JJVE1BUF9JTkRFWEVEX1NJWkUiLCJpbmNsdWRpbmciLCJleHBhbmRlZE5vZGVzIiwiZXhwYW5kTm9kZXMiLCJuZXdCaXRtYXAiLCJuZXdOb2RlcyIsIm5ld0xlbiIsImFmdGVyIiwic3BsaWNlT3V0Iiwic3BsaWNlSW4iLCJuZXdDb3VudCIsIk1JTl9IQVNIX0FSUkFZX01BUF9TSVpFIiwiZXhjbHVkaW5nIiwicGFja2VkSUkiLCJwYWNrZWROb2RlcyIsInBhY2tOb2RlcyIsImtleU1hdGNoIiwic3RhY2siLCJzdWJOb2RlIiwiTGlzdCIsImVtcHR5IiwiZW1wdHlMaXN0IiwiaXNMaXN0IiwibWFrZUxpc3QiLCJWTm9kZSIsImxpc3QiLCJzZXRTaXplIiwibWF5YmVMaXN0IiwiSVNfTElTVF9TRU5USU5FTCIsImxpc3ROb2RlRm9yIiwiX29yaWdpbiIsInNldExpc3RCb3VuZHMiLCJuZXdUYWlsIiwiX3RhaWwiLCJnZXRUYWlsT2Zmc2V0IiwiX2NhcGFjaXR5IiwidXBkYXRlVk5vZGUiLCJfbGV2ZWwiLCJ1cGRhdGVMaXN0Iiwic3BsaWNlIiwiaW5zZXJ0IiwidmFsdWVzIiwib2xkU2l6ZSIsInVuc2hpZnQiLCJtZXJnZUludG9MaXN0V2l0aCIsIml0ZXJhdGVMaXN0IiwiRE9ORSIsIkxpc3RQcm90b3R5cGUiLCJyZW1vdmVCZWZvcmUiLCJsZXZlbCIsIm9yaWdpbkluZGV4IiwibmV3Q2hpbGQiLCJyZW1vdmluZ0ZpcnN0Iiwib2xkQ2hpbGQiLCJlZGl0YWJsZSIsImVkaXRhYmxlVk5vZGUiLCJyZW1vdmVBZnRlciIsInNpemVJbmRleCIsIkVNUFRZX0xJU1QiLCJFTVBUWV9PUkRFUkVEX01BUCIsImxlZnQiLCJyaWdodCIsInRhaWxQb3MiLCJ0YWlsIiwiaXRlcmF0ZU5vZGVPckxlYWYiLCJmcm9tIiwidG8iLCJpdGVyYXRlTGVhZiIsIml0ZXJhdGVOb2RlIiwib3JpZ2luIiwiY2FwYWNpdHkiLCJub2RlSGFzIiwibG93ZXJOb2RlIiwibmV3TG93ZXJOb2RlIiwicmF3SW5kZXgiLCJvd25lciIsIm9sZE9yaWdpbiIsIm9sZENhcGFjaXR5IiwibmV3T3JpZ2luIiwibmV3Q2FwYWNpdHkiLCJuZXdMZXZlbCIsIm9mZnNldFNoaWZ0Iiwib2xkVGFpbE9mZnNldCIsIm5ld1RhaWxPZmZzZXQiLCJvbGRUYWlsIiwiYmVnaW5JbmRleCIsIm1heFNpemUiLCJlbXB0eU9yZGVyZWRNYXAiLCJpc09yZGVyZWRNYXAiLCJtYXliZU9yZGVyZWRNYXAiLCJtYWtlT3JkZXJlZE1hcCIsIm9tYXAiLCJfbWFwIiwiX2xpc3QiLCJ1cGRhdGVPcmRlcmVkTWFwIiwibmV3TWFwIiwibmV3TGlzdCIsImZsaXAiLCJUb0tleWVkU2VxdWVuY2UiLCJpbmRleGVkIiwiX2l0ZXIiLCJfdXNlS2V5cyIsIlRvSW5kZXhlZFNlcXVlbmNlIiwiVG9TZXRTZXF1ZW5jZSIsIkZyb21FbnRyaWVzU2VxdWVuY2UiLCJmbGlwRmFjdG9yeSIsImZsaXBTZXF1ZW5jZSIsIm1ha2VTZXF1ZW5jZSIsInJldmVyc2VkU2VxdWVuY2UiLCJjYWNoZVJlc3VsdFRocm91Z2giLCJtYXBGYWN0b3J5IiwiY29udGV4dCIsIm1hcHBlZFNlcXVlbmNlIiwicmV2ZXJzZUZhY3RvcnkiLCJmaWx0ZXJGYWN0b3J5IiwicHJlZGljYXRlIiwiZmlsdGVyU2VxdWVuY2UiLCJzbGljZUZhY3RvcnkiLCJvcmlnaW5hbFNpemUiLCJyZXNvbHZlZEJlZ2luIiwicmVzb2x2ZWRFbmQiLCJzbGljZVNpemUiLCJyZXNvbHZlZFNpemUiLCJzbGljZVNlcSIsInNraXBwZWQiLCJpc1NraXBwaW5nIiwic2tpcFdoaWxlRmFjdG9yeSIsInNraXBTZXF1ZW5jZSIsInNraXBwaW5nIiwiZmxhdHRlbkZhY3RvcnkiLCJkZXB0aCIsImZsYXRTZXF1ZW5jZSIsInN0b3BwZWQiLCJmbGF0RGVlcCIsImN1cnJlbnREZXB0aCIsImRlZmF1bHRDb21wYXJhdG9yIiwiaXNLZXllZEl0ZXJhYmxlIiwibWF4RmFjdG9yeSIsInJlZHVjZSIsIm1heENvbXBhcmUiLCJjb21wIiwiemlwV2l0aEZhY3RvcnkiLCJrZXlJdGVyIiwiemlwcGVyIiwiemlwU2VxdWVuY2UiLCJpdGVyYXRvcnMiLCJpc0RvbmUiLCJzdGVwcyIsInNvbWUiLCJyZWlmeSIsInZhbGlkYXRlRW50cnkiLCJyZXNvbHZlU2l6ZSIsIml0ZXJhYmxlQ2xhc3MiLCJSZWNvcmQiLCJkZWZhdWx0VmFsdWVzIiwiaGFzSW5pdGlhbGl6ZWQiLCJSZWNvcmRUeXBlIiwibmFtZXMiLCJiaW5kIiwic2V0UHJvcHMiLCJSZWNvcmRUeXBlUHJvdG90eXBlIiwiX25hbWUiLCJfZGVmYXVsdFZhbHVlcyIsIlJlY29yZFByb3RvdHlwZSIsInZhbHVlU2VxIiwiaW5kZXhlZEl0ZXJhYmxlIiwicmVjb3JkTmFtZSIsImRlZmF1bHRWYWwiLCJfZW1wdHkiLCJtYWtlUmVjb3JkIiwibGlrZVJlY29yZCIsInJlY29yZCIsImdldFByb3RvdHlwZU9mIiwiZW1wdHlTZXQiLCJpc1NldCIsImFkZCIsIm1heWJlU2V0IiwiSVNfU0VUX1NFTlRJTkVMIiwiZnJvbUtleXMiLCJrZXlTZXEiLCJ1cGRhdGVTZXQiLCJ1bmlvbiIsImludGVyc2VjdCIsIm9yaWdpbmFsU2V0Iiwic3VidHJhY3QiLCJPcmRlcmVkU2V0IiwiX19tYWtlIiwiRU1QVFlfU0VUIiwiU2V0UHJvdG90eXBlIiwiX19lbXB0eSIsIm1ha2VTZXQiLCJlbXB0eU9yZGVyZWRTZXQiLCJpc09yZGVyZWRTZXQiLCJtYXliZU9yZGVyZWRTZXQiLCJFTVBUWV9PUkRFUkVEX1NFVCIsIk9yZGVyZWRTZXRQcm90b3R5cGUiLCJtYWtlT3JkZXJlZFNldCIsIlN0YWNrIiwiZW1wdHlTdGFjayIsImlzU3RhY2siLCJ1bnNoaWZ0QWxsIiwibWF5YmVTdGFjayIsIklTX1NUQUNLX1NFTlRJTkVMIiwiaGVhZCIsIl9oZWFkIiwicGVlayIsIm1ha2VTdGFjayIsInB1c2hBbGwiLCJFTVBUWV9TVEFDSyIsIlN0YWNrUHJvdG90eXBlIiwibWl4aW4iLCJtZXRob2RzIiwia2V5Q29waWVyIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwidG9KUyIsIl9fdG9KUyIsInRvSlNPTiIsInRvT2JqZWN0IiwidG9PcmRlcmVkTWFwIiwidG9PcmRlcmVkU2V0IiwidG9TZXQiLCJ0b1N0YWNrIiwiX190b1N0cmluZ01hcHBlciIsImpvaW4iLCJjb25jYXQiLCJzaW5nbGV0b24iLCJjb25jYXRTZXEiLCJmbGF0dGVuIiwic3VtIiwiY29uY2F0RmFjdG9yeSIsInJldHVyblZhbHVlIiwiZmluZCIsImZpbmRFbnRyeSIsImZvdW5kIiwiZmluZExhc3RFbnRyeSIsInNpZGVFZmZlY3QiLCJzZXBhcmF0b3IiLCJqb2luZWQiLCJpc0ZpcnN0IiwicmVkdWNlciIsImluaXRpYWxSZWR1Y3Rpb24iLCJyZWR1Y3Rpb24iLCJ1c2VGaXJzdCIsInJlZHVjZVJpZ2h0IiwicmV2ZXJzZWQiLCJub3QiLCJidXRMYXN0IiwiaXNFbXB0eSIsImNvdW50QnkiLCJncm91cGVyIiwiZ3JvdXBzIiwiY291bnRCeUZhY3RvcnkiLCJlbnRyaWVzU2VxdWVuY2UiLCJlbnRyeU1hcHBlciIsImZpbHRlck5vdCIsImZpbmRMYXN0IiwiZmlyc3QiLCJmbGF0TWFwIiwiY29lcmNlIiwiZmxhdE1hcEZhY3RvcnkiLCJzZWFyY2hLZXkiLCJnZXRJbiIsInNlYXJjaEtleVBhdGgiLCJuZXN0ZWQiLCJncm91cEJ5IiwiaXNLZXllZEl0ZXIiLCJncm91cEJ5RmFjdG9yeSIsImhhc0luIiwiaXNTdWJzZXQiLCJpc1N1cGVyc2V0Iiwia2V5TWFwcGVyIiwibGFzdCIsIm1heEJ5IiwibmVnIiwiZGVmYXVsdE5lZ0NvbXBhcmF0b3IiLCJtaW5CeSIsInJlc3QiLCJza2lwIiwiYW1vdW50Iiwic2tpcExhc3QiLCJza2lwV2hpbGUiLCJza2lwVW50aWwiLCJ0YWtlIiwidGFrZUxhc3QiLCJ0YWtlV2hpbGUiLCJ0YWtlU2VxdWVuY2UiLCJpdGVyYXRpbmciLCJ0YWtlV2hpbGVGYWN0b3J5IiwidGFrZVVudGlsIiwib3JkZXJlZCIsImtleWVkIiwibXVybXVySGFzaE9mU2l6ZSIsImhhc2hNZXJnZSIsImhhc2hJdGVyYWJsZSIsIkl0ZXJhYmxlUHJvdG90eXBlIiwicXVvdGVTdHJpbmciLCJjaGFpbiIsImNvbnRhaW5zIiwibm9MZW5ndGhXYXJuaW5nIiwiY29uc29sZSIsIndhcm4iLCJmaW5kS2V5IiwiZmluZExhc3RLZXkiLCJrZXlPZiIsImxhc3RLZXlPZiIsIm1hcEVudHJpZXMiLCJtYXBLZXlzIiwiS2V5ZWRJdGVyYWJsZVByb3RvdHlwZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZWZhdWx0WmlwcGVyIiwiZmluZEluZGV4IiwicmVtb3ZlTnVtIiwibnVtQXJncyIsInNwbGljZWQiLCJmaW5kTGFzdEluZGV4IiwiaW50ZXJwb3NlIiwiaW50ZXJwb3NlZFNlcXVlbmNlIiwiaW50ZXJwb3NlRmFjdG9yeSIsImludGVybGVhdmUiLCJ6aXBwZWQiLCJpbnRlcmxlYXZlZCIsInppcCIsInppcFdpdGgiLCJmYWN0b3J5IiwiX2V4dGVuZHMiLCJ0YXJnZXQiLCJzb3VyY2UiLCJCbG9ja1RyZWUiLCJDb250ZW50U3RhdGUiLCJFZGl0b3JCaWRpU2VydmljZSIsIkltbXV0YWJsZSIsIlNlbGVjdGlvblN0YXRlIiwiRWRpdG9yU3RhdGVSZWNvcmQiLCJhbGxvd1VuZG8iLCJjdXJyZW50Q29udGVudCIsImRlY29yYXRvciIsImRpcmVjdGlvbk1hcCIsImZvcmNlU2VsZWN0aW9uIiwiaW5Db21wb3NpdGlvbk1vZGUiLCJpbmxpbmVTdHlsZU92ZXJyaWRlIiwibGFzdENoYW5nZVR5cGUiLCJuYXRpdmVseVJlbmRlcmVkQ29udGVudCIsInJlZG9TdGFjayIsInNlbGVjdGlvbiIsInRyZWVNYXAiLCJ1bmRvU3RhY2siLCJFZGl0b3JTdGF0ZSIsImltbXV0YWJsZSIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJfaW1tdXRhYmxlIiwiY3JlYXRlRW1wdHkiLCJjcmVhdGVXaXRoQ29udGVudCIsImNyZWF0ZUZyb21UZXh0IiwiY29udGVudFN0YXRlIiwiZmlyc3RLZXkiLCJnZXRCbG9ja01hcCIsImdldEtleSIsImNvbmZpZyIsInJlY29yZENvbmZpZyIsImdlbmVyYXRlTmV3VHJlZU1hcCIsImdldERpcmVjdGlvbk1hcCIsImVkaXRvclN0YXRlIiwicHV0IiwiZ2V0SW1tdXRhYmxlIiwic3RhdGUiLCJleGlzdGluZ0RlY29yYXRvciIsIm5ld0NvbnRlbnQiLCJnZXRDdXJyZW50Q29udGVudCIsIm5ld1RyZWVNYXAiLCJjb250ZW50IiwiYmxvY2tNYXAiLCJwcmV2aW91c1RyZWVNYXAiLCJibG9jayIsImdldERlY29yYXRpb25zIiwiZ2VuZXJhdGUiLCJyZWdlbmVyYXRlVHJlZUZvck5ld0RlY29yYXRvciIsIm5ld0Jsb2NrTWFwIiwibmV3RW50aXR5TWFwIiwicHJldkJsb2NrTWFwIiwicmVnZW5lcmF0ZVRyZWVGb3JOZXdCbG9ja3MiLCJnZXRFbnRpdHlNYXAiLCJnZXRBbGxvd1VuZG8iLCJnZXRVbmRvU3RhY2siLCJnZXRSZWRvU3RhY2siLCJnZXRTZWxlY3Rpb24iLCJnZXREZWNvcmF0b3IiLCJpc0luQ29tcG9zaXRpb25Nb2RlIiwibXVzdEZvcmNlU2VsZWN0aW9uIiwiZ2V0TmF0aXZlbHlSZW5kZXJlZENvbnRlbnQiLCJnZXRMYXN0Q2hhbmdlVHlwZSIsImdldElubGluZVN0eWxlT3ZlcnJpZGUiLCJzZXRJbmxpbmVTdHlsZU92ZXJyaWRlIiwiZ2V0Q3VycmVudElubGluZVN0eWxlIiwib3ZlcnJpZGUiLCJpc0NvbGxhcHNlZCIsInN0YXJ0S2V5IiwiZ2V0U3RhcnRLZXkiLCJzdGFydE9mZnNldCIsImdldFN0YXJ0T2Zmc2V0Iiwic3RhcnRCbG9jayIsImdldEJsb2NrRm9yS2V5IiwiZ2V0SW5saW5lU3R5bGVBdCIsImdldExlbmd0aCIsImxvb2tVcHdhcmRGb3JJbmxpbmVTdHlsZSIsImdldElubGluZVN0eWxlRm9yQ29sbGFwc2VkU2VsZWN0aW9uIiwiZ2V0SW5saW5lU3R5bGVGb3JOb25Db2xsYXBzZWRTZWxlY3Rpb24iLCJnZXRCbG9ja1RyZWUiLCJibG9ja0tleSIsImlzU2VsZWN0aW9uQXRTdGFydE9mQ29udGVudCIsImhhc0VkZ2VXaXRoaW4iLCJpc1NlbGVjdGlvbkF0RW5kT2ZDb250ZW50IiwiYWNjZXB0U2VsZWN0aW9uIiwidXBkYXRlU2VsZWN0aW9uIiwiZ2V0SGFzRm9jdXMiLCJtb3ZlU2VsZWN0aW9uVG9FbmQiLCJsYXN0QmxvY2siLCJnZXRMYXN0QmxvY2siLCJsYXN0S2V5IiwiYW5jaG9yS2V5IiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNLZXkiLCJmb2N1c09mZnNldCIsImlzQmFja3dhcmQiLCJtb3ZlRm9jdXNUb0VuZCIsImFmdGVyU2VsZWN0aW9uTW92ZSIsImNoYW5nZVR5cGUiLCJnZXRTZWxlY3Rpb25BZnRlciIsIm11c3RCZWNvbWVCb3VuZGFyeSIsImdldFNlbGVjdGlvbkJlZm9yZSIsImVkaXRvclN0YXRlQ2hhbmdlcyIsInVuZG8iLCJuZXdDdXJyZW50Q29udGVudCIsInJlZG8iLCJmcm9tS2V5IiwibGFzdE5vbkVtcHR5Iiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJjaGlsZHJlbiIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZXJyIiwiYXNzaWduIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJSb3V0ZXJfUm91dGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIlJvdXRlciIsIl90ZW1wIiwiX3RoaXMiLCJfbGVuIiwiX2tleSIsIm1hdGNoIiwiY29tcHV0ZU1hdGNoIiwicHJvcHMiLCJoaXN0b3J5IiwibG9jYXRpb24iLCJwYXRobmFtZSIsInN1YkNsYXNzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHMiLCJnZXRDaGlsZENvbnRleHQiLCJyb3V0ZXIiLCJyb3V0ZSIsInBhdGgiLCJ1cmwiLCJwYXJhbXMiLCJpc0V4YWN0IiwiY29tcG9uZW50V2lsbE1vdW50IiwiX3RoaXMyIiwiX3Byb3BzIiwiaW52YXJpYW50X2Jyb3dzZXJfZGVmYXVsdCIsInJlYWN0X2RlZmF1bHQiLCJDaGlsZHJlbiIsInVubGlzdGVuIiwibGlzdGVuIiwic2V0U3RhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiYnJvd3Nlcl9kZWZhdWx0IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW5kZXIiLCJvbmx5IiwiQ29tcG9uZW50IiwicHJvcFR5cGVzIiwicHJvcF90eXBlc19kZWZhdWx0IiwiaXNSZXF1aXJlZCIsImNvbnRleHRUeXBlcyIsImNoaWxkQ29udGV4dFR5cGVzIiwiZXNfUm91dGVyIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZXIiLCJCcm93c2VyUm91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJCcm93c2VyUm91dGVyX0Jyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyIiwiQnJvd3NlclJvdXRlcl9jbGFzc0NhbGxDaGVjayIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5X2RlZmF1bHQiLCJCcm93c2VyUm91dGVyX2luaGVyaXRzIiwiY3JlYXRlRWxlbWVudCIsImJhc2VuYW1lIiwiZm9yY2VSZWZyZXNoIiwiYm9vbCIsImdldFVzZXJDb25maXJtYXRpb24iLCJmdW5jIiwia2V5TGVuZ3RoIiwibnVtYmVyIiwiZXNfQnJvd3NlclJvdXRlciIsIkhhc2hSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkhhc2hSb3V0ZXJfSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXIiLCJIYXNoUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiY3JlYXRlSGFzaEhpc3RvcnlfZGVmYXVsdCIsIkhhc2hSb3V0ZXJfaW5oZXJpdHMiLCJoYXNoVHlwZSIsIm9uZU9mIiwiZXNfSGFzaFJvdXRlciIsIkxpbmtfZXh0ZW5kcyIsIkxpbmtfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImlzTW9kaWZpZWRFdmVudCIsImV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsIkxpbmtfTGluayIsIkxpbmsiLCJMaW5rX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsInByZXZlbnREZWZhdWx0IiwiX3RoaXMkcHJvcHMiLCJMaW5rX2luaGVyaXRzIiwiaW5uZXJSZWYiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJocmVmIiwiY3JlYXRlSHJlZiIsIm9uZU9mVHlwZSIsImRlZmF1bHRQcm9wcyIsInNoYXBlIiwiZXNfTGluayIsIk1lbW9yeVJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiTWVtb3J5Um91dGVyX01lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlcl9jbGFzc0NhbGxDaGVjayIsImNyZWF0ZU1lbW9yeUhpc3RvcnlfZGVmYXVsdCIsIk1lbW9yeVJvdXRlcl9pbmhlcml0cyIsImluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEluZGV4IiwicmVhY3Rfcm91dGVyX2RvbV9lc19NZW1vcnlSb3V0ZXIiLCJwYXR0ZXJuQ2FjaGUiLCJjYWNoZUNvdW50IiwiZXNfbWF0Y2hQYXRoIiwib3B0aW9ucyIsIl9vcHRpb25zIiwiX29wdGlvbnMkcGF0aCIsIl9vcHRpb25zJGV4YWN0IiwiZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJzZW5zaXRpdmUiLCJfY29tcGlsZVBhdGgiLCJwYXR0ZXJuIiwiY2FjaGVLZXkiLCJjb21waWxlZFBhdHRlcm4iLCJyZSIsInBhdGhfdG9fcmVnZXhwX2RlZmF1bHQiLCJtYXRjaFBhdGhfY29tcGlsZVBhdGgiLCJleGVjIiwibWVtbyIsIlJvdXRlX2V4dGVuZHMiLCJSb3V0ZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUm91dGVfaXNFbXB0eUNoaWxkcmVuIiwiUm91dGVfUm91dGUiLCJSb3V0ZSIsIlJvdXRlX2NsYXNzQ2FsbENoZWNrIiwiUm91dGVfaW5oZXJpdHMiLCJfcmVmIiwiY29tcHV0ZWRNYXRjaCIsImNvbXBvbmVudCIsIm5leHRDb250ZXh0IiwiX2NvbnRleHQkcm91dGVyIiwic3RhdGljQ29udGV4dCIsImVzX1JvdXRlIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZSIsIk5hdkxpbmtfZXh0ZW5kcyIsIl90eXBlb2YiLCJOYXZMaW5rX05hdkxpbmsiLCJhY3RpdmVDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsInN0eWxlIiwiZ2V0SXNBY3RpdmUiLCJpc0FjdGl2ZSIsImFyaWFDdXJyZW50IiwiTmF2TGlua19vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9yZWYyIiwiYXJpYS1jdXJyZW50IiwiZXNfTmF2TGluayIsIlByb21wdF9Qcm9tcHQiLCJQcm9tcHQiLCJQcm9tcHRfY2xhc3NDYWxsQ2hlY2siLCJQcm9tcHRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlByb21wdF9pbmhlcml0cyIsImVuYWJsZSIsIm1lc3NhZ2UiLCJ1bmJsb2NrIiwiZGlzYWJsZSIsIndoZW4iLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1Byb21wdCIsIkxvY2F0aW9uVXRpbHNfZXh0ZW5kcyIsIkxvY2F0aW9uVXRpbHNfY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJzZWFyY2giLCJoYXNoSW5kZXgiLCJzdWJzdHIiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImNoYXJBdCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwicmVzb2x2ZV9wYXRobmFtZSIsIkxvY2F0aW9uVXRpbHNfbG9jYXRpb25zQXJlRXF1YWwiLCJ2YWx1ZV9lcXVhbCIsIndpbmRvdyIsImRvY3VtZW50IiwiUmVkaXJlY3RfUmVkaXJlY3QiLCJSZWRpcmVjdCIsIlJlZGlyZWN0X2NsYXNzQ2FsbENoZWNrIiwiUmVkaXJlY3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZGlyZWN0X2luaGVyaXRzIiwiaXNTdGF0aWMiLCJwZXJmb3JtIiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJwcmV2VG8iLCJuZXh0VG8iLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JlZGlyZWN0IiwiU3RhdGljUm91dGVyX2V4dGVuZHMiLCJTdGF0aWNSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlN0YXRpY1JvdXRlcl9hZGRCYXNlbmFtZSIsIlBhdGhVdGlscyIsIlN0YXRpY1JvdXRlcl9jcmVhdGVMb2NhdGlvbiIsIl9vYmplY3QkcGF0aG5hbWUiLCJfb2JqZWN0JHNlYXJjaCIsIl9vYmplY3QkaGFzaCIsIlN0YXRpY1JvdXRlcl9jcmVhdGVVUkwiLCJTdGF0aWNSb3V0ZXJfc3RhdGljSGFuZGxlciIsIm1ldGhvZE5hbWUiLCJub29wIiwiU3RhdGljUm91dGVyX1N0YXRpY1JvdXRlciIsIlN0YXRpY1JvdXRlciIsIlN0YXRpY1JvdXRlcl9jbGFzc0NhbGxDaGVjayIsImhhbmRsZVB1c2giLCJhY3Rpb24iLCJoYW5kbGVSZXBsYWNlIiwiX3RoaXMkcHJvcHMyIiwiaGFuZGxlTGlzdGVuIiwiaGFuZGxlQmxvY2siLCJTdGF0aWNSb3V0ZXJfaW5oZXJpdHMiLCJTdGF0aWNSb3V0ZXJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJiYXNlIiwiU3RhdGljUm91dGVyX3N0cmlwQmFzZW5hbWUiLCJnbyIsImdvQmFjayIsImdvRm9yd2FyZCIsInJlYWN0X3JvdXRlcl9kb21fZXNfU3RhdGljUm91dGVyIiwiU3dpdGNoX1N3aXRjaCIsIlN3aXRjaCIsIlN3aXRjaF9jbGFzc0NhbGxDaGVjayIsIlN3aXRjaF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3dpdGNoX2luaGVyaXRzIiwiY2hpbGQiLCJlbGVtZW50IiwiaXNWYWxpZEVsZW1lbnQiLCJfZWxlbWVudCRwcm9wcyIsInBhdGhQcm9wIiwiY2xvbmVFbGVtZW50IiwicmVhY3Rfcm91dGVyX2RvbV9lc19Td2l0Y2giLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX21hdGNoUGF0aCIsIndpdGhSb3V0ZXJfZXh0ZW5kcyIsInJlYWN0X3JvdXRlcl9kb21fZXNfd2l0aFJvdXRlciIsIkMiLCJ3cmFwcGVkQ29tcG9uZW50UmVmIiwicmVtYWluaW5nUHJvcHMiLCJ3aXRoUm91dGVyX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwicm91dGVDb21wb25lbnRQcm9wcyIsImRpc3BsYXlOYW1lIiwiV3JhcHBlZENvbXBvbmVudCIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX2RlZmF1bHQiLCJDaGFyYWN0ZXJNZXRhZGF0YSIsIkNvbnRlbnRTdGF0ZUlubGluZVN0eWxlIiwiRHJhZnRGZWF0dXJlRmxhZ3MiLCJhcHBseUVudGl0eVRvQ29udGVudFN0YXRlIiwiZ2V0Q2hhcmFjdGVyUmVtb3ZhbFJhbmdlIiwiZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQiLCJpbnNlcnRGcmFnbWVudEludG9Db250ZW50U3RhdGUiLCJpbnNlcnRUZXh0SW50b0NvbnRlbnRTdGF0ZSIsIm1vZGlmeUJsb2NrRm9yQ29udGVudFN0YXRlIiwicmVtb3ZlRW50aXRpZXNBdEVkZ2VzIiwicmVtb3ZlUmFuZ2VGcm9tQ29udGVudFN0YXRlIiwic3BsaXRCbG9ja0luQ29udGVudFN0YXRlIiwiRHJhZnRNb2RpZmllciIsInJlcGxhY2VUZXh0IiwicmFuZ2VUb1JlcGxhY2UiLCJ0ZXh0IiwiaW5saW5lU3R5bGUiLCJlbnRpdHlLZXkiLCJ3aXRob3V0RW50aXRpZXMiLCJ3aXRob3V0VGV4dCIsImNoYXJhY3RlciIsImVudGl0eSIsImluc2VydFRleHQiLCJ0YXJnZXRSYW5nZSIsIm1vdmVUZXh0IiwicmVtb3ZhbFJhbmdlIiwibW92ZWRGcmFnbWVudCIsImFmdGVyUmVtb3ZhbCIsInJlbW92ZVJhbmdlIiwicmVwbGFjZVdpdGhGcmFnbWVudCIsImZyYWdtZW50IiwicmFuZ2VUb1JlbW92ZSIsInJlbW92YWxEaXJlY3Rpb24iLCJlbmRLZXkiLCJlbmRCbG9jayIsImdldElzQmFja3dhcmQiLCJnZXRGb2N1c0tleSIsImdldEZvY3VzT2Zmc2V0IiwiZ2V0QW5jaG9yS2V5IiwiZ2V0QW5jaG9yT2Zmc2V0IiwiZW5kT2Zmc2V0IiwiZ2V0RW5kT2Zmc2V0Iiwic3RhcnRFbnRpdHlLZXkiLCJnZXRFbnRpdHlBdCIsImVuZEVudGl0eUtleSIsIl9hZGp1c3RlZFJlbW92YWxSYW5nZSIsImFkanVzdGVkUmVtb3ZhbFJhbmdlIiwiZHJhZnRfc2VnbWVudGVkX2VudGl0aWVzX2JlaGF2aW9yIiwic3BsaXRCbG9jayIsInNlbGVjdGlvblN0YXRlIiwiYXBwbHlJbmxpbmVTdHlsZSIsInJlbW92ZUlubGluZVN0eWxlIiwic2V0QmxvY2tUeXBlIiwiYmxvY2tUeXBlIiwic2V0QmxvY2tEYXRhIiwiYmxvY2tEYXRhIiwiZGF0YSIsIm1lcmdlQmxvY2tEYXRhIiwiZ2V0RGF0YSIsImFwcGx5RW50aXR5IiwiRm9vdGVyIiwiX3JlYWN0MiIsImRlZmF1bHQiLCJfcmVhY3QiLCJfcmVhY3REb20iLCJfcmVhY3RSb3V0ZXJEb20iLCJfYXhpb3MiLCJIZWFkZXIiLCJ0b2tlbiIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJ0b2tlbklzVmFsaWQiLCJfYXhpb3MyIiwibWV0aG9kIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJBY2NlcHQiLCJyZXNwb25zZVR5cGUiLCJ0aGVuIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJzZXRJdGVtIiwiY2F0Y2giLCJsb2ciLCJpZCIsIk5hdkxpbmsiLCJSZWFjdCIsInByb3BJc0VudW1lcmFibGUiLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwic3BsaXQiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwiX3JlcXVpcmUiLCJkZWZhdWx0UmVjb3JkIiwiX0NoYXJhY3Rlck1ldGFkYXRhUmVjIiwiZ2V0U3R5bGUiLCJnZXRFbnRpdHkiLCJoYXNTdHlsZSIsImFwcGx5U3R5bGUiLCJ3aXRoU3R5bGUiLCJyZW1vdmVTdHlsZSIsIndpdGhvdXRTdHlsZSIsIndpdGhFbnRpdHkiLCJFTVBUWSIsImNvbmZpZ01hcCIsInBvb2wiLCJuZXdDaGFyYWN0ZXIiLCJmaW5kUmFuZ2VzSW1tdXRhYmxlIiwicGFyZW50IiwiY2hhcmFjdGVyTGlzdCIsInByZXZTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJoYXZlRXF1YWxTdHlsZSIsImNoYXJBIiwiY2hhckIiLCJoYXZlRXF1YWxFbnRpdHkiLCJkZWNvcmF0ZUNoYXJhY3Rlckxpc3QiLCJDb250ZW50QmxvY2tOb2RlIiwiX1JlY29yZCIsImdldFR5cGUiLCJnZXRUZXh0IiwiZ2V0Q2hhcmFjdGVyTGlzdCIsImdldERlcHRoIiwiZ2V0Q2hpbGRLZXlzIiwiZ2V0UGFyZW50S2V5IiwiZ2V0UHJldlNpYmxpbmdLZXkiLCJnZXROZXh0U2libGluZ0tleSIsImZpbmRTdHlsZVJhbmdlcyIsImZpbHRlckZuIiwiY2FsbGJhY2siLCJmaW5kRW50aXR5UmFuZ2VzIiwiaXNCdWZmZXIiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJpc0FycmF5QnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwicmVzdWx0IiwiYXNzaWduVmFsdWUiLCJleHRlbmQiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsImciLCJGdW5jdGlvbiIsImV2YWwiLCJVc2VyQWdlbnREYXRhIiwiVmVyc2lvblJhbmdlIiwibWFwT2JqZWN0IiwibWVtb2l6ZVN0cmluZ09ubHkiLCJjb21wYXJlIiwidmVyc2lvbiIsInF1ZXJ5Iiwibm9ybWFsaXplciIsInN0YXJ0c1dpdGgiLCJyYW5nZSIsIm5vcm1hbGl6ZVBsYXRmb3JtVmVyc2lvbiIsInBsYXRmb3JtTmFtZSIsIlVzZXJBZ2VudCIsImlzQnJvd3NlciIsImJyb3dzZXJOYW1lIiwiYnJvd3NlckZ1bGxWZXJzaW9uIiwiaXNCcm93c2VyQXJjaGl0ZWN0dXJlIiwiYnJvd3NlckFyY2hpdGVjdHVyZSIsImlzRGV2aWNlIiwiZGV2aWNlTmFtZSIsImlzRW5naW5lIiwiZW5naW5lTmFtZSIsImVuZ2luZVZlcnNpb24iLCJpc1BsYXRmb3JtIiwicGxhdGZvcm1GdWxsVmVyc2lvbiIsImlzUGxhdGZvcm1BcmNoaXRlY3R1cmUiLCJwbGF0Zm9ybUFyY2hpdGVjdHVyZSIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwTGVhZGluZ1NsYXNoIiwiaGFzQmFzZW5hbWUiLCJwcmVmaXgiLCJSZWdFeHAiLCJ0ZXN0Iiwic3RyaXBCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJzZWVuS2V5cyIsIk1VTFRJUExJRVIiLCJwb3ciLCJpc05hTiIsInJhbmRvbSIsIl9TaW5nbGVKb2IiLCJKb2JzUGFnZSIsImpvYnMiLCJheGlvcyIsImpvYiIsInRpdGxlIiwiX1NpbmdsZUpvYjIiLCJqb2JUaXRsZSIsImpvYkhvdXJzIiwiaG91cnMiLCJqb2JBcmVhIiwiYXJlYSIsImpvYlNsdWciLCJzbHVnIiwiam9iTG9jYXRpb24iLCJqb2JTYWxhcnkiLCJzYWxhcnkiLCJqb2JDb21wYW55IiwicG9zdGVkX2J5X2NvbXBhbnkiLCJqb2JJZCIsImpvYkV4cGVyaWVuY2UiLCJleHBlcmllbmNlIiwiam9iRGF0ZSIsImNyZWF0ZWRfZGF0ZSIsIlNVUlJPR0FURV9ISUdIX1NUQVJUIiwiU1VSUk9HQVRFX0hJR0hfRU5EIiwiU1VSUk9HQVRFX0xPV19TVEFSVCIsIlNVUlJPR0FURV9MT1dfRU5EIiwiU1VSUk9HQVRFX1VOSVRTX1JFR0VYIiwiaXNDb2RlVW5pdEluU3Vycm9nYXRlUmFuZ2UiLCJjb2RlVW5pdCIsImhhc1N1cnJvZ2F0ZVVuaXQiLCJnZXRVVEYxNkxlbmd0aCIsInBvcyIsInBvc0EiLCJwb3NCIiwic3Vic3RyaW5nIiwiVW5pY29kZVV0aWxzIiwiZ2V0Q29kZVBvaW50cyIsImNvZGVQb2ludHMiLCJjb2RlUG9pbnRBdCIsImlzU3Vycm9nYXRlUGFpciIsInNlY29uZCIsInN0cmxlbiIsIkNvbnRlbnRCbG9jayIsIl9Db250ZW50QmxvY2tSZWNvcmQiLCJjbGFzc05hbWVzIiwiX1NlbGVjdGlvblN0YXRlUmVjb3JkIiwic2VyaWFsaXplIiwic2VsZWN0aW9uU3RhcnQiLCJvZmZzZXRUb0NoZWNrIiwiZ2V0RW5kS2V5IiwiaGFzRm9jdXMiLCJBdG9taWNCbG9ja1V0aWxzIiwiQmxvY2tNYXBCdWlsZGVyIiwiQ29tcG9zaXRlRHJhZnREZWNvcmF0b3IiLCJEZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcCIsIkRlZmF1bHREcmFmdElubGluZVN0eWxlIiwiRHJhZnRFZGl0b3IiLCJEcmFmdEVkaXRvckJsb2NrIiwiRHJhZnRFbnRpdHkiLCJEcmFmdEVudGl0eUluc3RhbmNlIiwiS2V5QmluZGluZ1V0aWwiLCJSaWNoVGV4dEVkaXRvclV0aWwiLCJjb252ZXJ0RnJvbURyYWZ0U3RhdGVUb1JhdyIsIkRyYWZ0UHVibGljIiwiRWRpdG9yIiwiRWRpdG9yQmxvY2siLCJDb21wb3NpdGVEZWNvcmF0b3IiLCJFbnRpdHkiLCJFbnRpdHlJbnN0YW5jZSIsIk1vZGlmaWVyIiwiUmljaFV0aWxzIiwiY29udmVydEZyb21IVE1MIiwiY29udmVydEZyb21SYXciLCJjb252ZXJ0VG9SYXciLCJnZW5LZXkiLCJnZXREZWZhdWx0S2V5QmluZGluZyIsImdldFZpc2libGVTZWxlY3Rpb25SZWN0IiwibWFrZUVtcHR5RnVuY3Rpb24iLCJhcmciLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsInN0cmF0ZWd5IiwiZGlyZWN0aW9uIiwiaGF5c3RhY2siLCJhcmVFcXVhbEZuIiwiZm91bmRGbiIsImN1cnNvciIsIm5leHRJbmRleCIsImNyZWF0ZUZyb21BcnJheSIsImJsb2NrcyIsIkRyYWZ0T2Zmc2V0S2V5IiwiZW5jb2RlIiwiZGVjb3JhdG9yS2V5IiwibGVhZktleSIsImRlY29kZSIsIm9mZnNldEtleSIsIl9vZmZzZXRLZXkkc3BsaXQiLCJwYXJzZUludCIsImluc3RhbmNlcyIsImluc3RhbmNlS2V5IiwibG9nV2FybmluZyIsIm9sZE1ldGhvZENhbGwiLCJuZXdNZXRob2RDYWxsIiwiZ2V0TGFzdENyZWF0ZWRFbnRpdHlLZXkiLCJfX2dldExhc3RDcmVhdGVkRW50aXR5S2V5IiwibXV0YWJpbGl0eSIsIl9fY3JlYXRlIiwiX19hZGQiLCJfX2dldCIsIm1lcmdlRGF0YSIsInRvTWVyZ2UiLCJfX21lcmdlRGF0YSIsInJlcGxhY2VEYXRhIiwibmV3RGF0YSIsIl9fcmVwbGFjZURhdGEiLCJuZXdJbnN0YW5jZSIsInJhbmRvbWl6ZUJsb2NrTWFwS2V5cyIsImJsb2NrS2V5cyIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsImNoYXJzIiwiaXNUZXh0Tm9kZSIsImNvbnRhaW5zTm9kZSIsIm91dGVyTm9kZSIsImlubmVyTm9kZSIsInBhcmVudE5vZGUiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImlzU2FtZUJsb2NrIiwic3RhcnRpbmdCbG9jayIsInNlbGVjdGVkQmxvY2tzIiwibmV4dEJsb2NrIiwiZ2V0QmxvY2tBZnRlciIsIl9zdGF0ZVRvSFRNTCIsIm1heERpc3RhbmNlIiwia2V5QmVmb3JlIiwiZ2V0S2V5QmVmb3JlIiwiaXNPU1giLCJpc0N0cmxLZXlDb21tYW5kIiwiaXNPcHRpb25LZXlDb21tYW5kIiwiaGFzQ29tbWFuZE1vZGlmaWVyIiwiZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZSIsInNlYXJjaE5vZGUiLCJnZXREb2N1bWVudFNjcm9sbEVsZW1lbnQiLCJnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbiIsInNjcm9sbGFibGUiLCJkb2N1bWVudFNjcm9sbEVsZW1lbnQiLCJvd25lckRvY3VtZW50IiwiV2luZG93Iiwic2Nyb2xsUG9zaXRpb24iLCJ2aWV3cG9ydCIsInhNYXgiLCJzY3JvbGxXaWR0aCIsImNsaWVudFdpZHRoIiwieU1heCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInkiLCJfaXNOb2RlU2Nyb2xsYWJsZSIsIm92ZXJmbG93IiwiU3R5bGUiLCJnZXRTY3JvbGxQYXJlbnQiLCJib2R5IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJmaWx0ZXJLZXkiLCJlbnRpdHlNYXAiLCJnZXRNdXRhYmlsaXR5IiwidGFyZ2V0U2VsZWN0aW9uIiwiQkFDS1NQQUNFIiwiVEFCIiwiUkVUVVJOIiwiQUxUIiwiRVNDIiwiU1BBQ0UiLCJQQUdFX1VQIiwiUEFHRV9ET1dOIiwiRU5EIiwiSE9NRSIsIkxFRlQiLCJVUCIsIlJJR0hUIiwiRE9XTiIsIkRFTEVURSIsIkNPTU1BIiwiUEVSSU9EIiwiQSIsIloiLCJaRVJPIiwiTlVNUEFEXzAiLCJOVU1QQURfOSIsImN4IiwiaGVhZGVyLW9uZSIsImhlYWRlci10d28iLCJoZWFkZXItdGhyZWUiLCJoZWFkZXItZm91ciIsImhlYWRlci1maXZlIiwiaGVhZGVyLXNpeCIsInVub3JkZXJlZC1saXN0LWl0ZW0iLCJ3cmFwcGVyIiwib3JkZXJlZC1saXN0LWl0ZW0iLCJibG9ja3F1b3RlIiwiYXRvbWljIiwiY29kZS1ibG9jayIsInVuc3R5bGVkIiwiYWxpYXNlZEVsZW1lbnRzIiwiTFRSIiwiUlRMIiwiZ2xvYmFsRGlyIiwiaXNTdHJvbmciLCJkaXIiLCJnZXRIVE1MRGlyIiwic2V0R2xvYmFsRGlyIiwiVW5pY29kZUJpZGlEaXJlY3Rpb24iLCJORVVUUkFMIiwiZ2V0SFRNTERpcklmRGlmZmVyZW50Iiwib3RoZXJEaXIiLCJpbml0R2xvYmFsRGlyIiwiZ2V0R2xvYmFsRGlyIiwiUkVHRVhfQkxPQ0tfREVMSU1JVEVSIiwiaW5wdXQiLCJnZW5lcmF0ZVJhbmRvbUtleSIsInNhbml0aXplRHJhZnRUZXh0IiwiQ29udGVudEJsb2NrTm9kZVJlY29yZCIsImRyYWZ0X3RyZWVfZGF0YV9zdXBwb3J0IiwiX0NvbnRlbnRTdGF0ZVJlY29yZCIsImdldEtleUFmdGVyIiwiZ2V0QmxvY2tCZWZvcmUiLCJnZXRCbG9ja3NBc0FycmF5IiwiZ2V0Rmlyc3RCbG9jayIsImdldFBsYWluVGV4dCIsImRlbGltaXRlciIsImhhc1RleHQiLCJjcmVhdGVFbnRpdHkiLCJtZXJnZUVudGl0eURhdGEiLCJyZXBsYWNlRW50aXR5RGF0YSIsImFkZEVudGl0eSIsImNyZWF0ZUZyb21CbG9ja0FycmF5IiwidGhlQmxvY2tzIiwiY29udGVudEJsb2NrcyIsInNlbGVjdGlvbkJlZm9yZSIsInNlbGVjdGlvbkFmdGVyIiwidXRpbHMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJDb250ZW50LVR5cGUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJhZGFwdGVyIiwiZGVmYXVsdHMiLCJYTUxIdHRwUmVxdWVzdCIsInByb2Nlc3MiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwiY29tbW9uIiwiX3dhcm5pbmciLCJfd2FybmluZzIiLCJwcm9tcHQiLCJsaXN0ZW5lcnMiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImFwcGVuZExpc3RlbmVyIiwibGlzdGVuZXIiLCJpdGVtIiwibm90aWZ5TGlzdGVuZXJzIiwibG9jYXRpb25zQXJlRXF1YWwiLCJjcmVhdGVMb2NhdGlvbiIsIl9yZXNvbHZlUGF0aG5hbWUyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl92YWx1ZUVxdWFsMiIsIl9QYXRoVXRpbHMiLCJkb2MiLCJhY3RpdmVFbGVtZW50IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsInZhbHVlRXF1YWwiLCJhVHlwZSIsImFWYWx1ZSIsImJWYWx1ZSIsImFLZXlzIiwiYktleXMiLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiaGFzVHJhaWxpbmdTbGFzaCIsInVwIiwicGFydCIsImVycm9yT2JqZWN0IiwiU2luZ2xlRGFzaGJvYXJkSm9iIiwiaXNPcGVuIiwiZGVzY3JpcHRpb24iLCJjb21wYW55TmFtZSIsInVzZXJDb21wYW5pZXMiLCJjb21wYW55SWQiLCJfSGVhZGVyIiwiX0Zvb3RlciIsIl9Kb2JzUGFnZSIsIkxvZ2luIiwic3VibWl0TG9naW5Gb3JtIiwiaGFuZGxlRW1haWxDaGFuZ2UiLCJoYW5kbGVQYXNzd29yZENoYW5nZSIsImVtYWlsIiwicGFzc3dvcmQiLCJyZXNwb25zZURhdGEiLCJyZWRpcmVjdFRvRGFzaGJvYXJkIiwidXNlciIsIm9uU3VibWl0Iiwib25DaGFuZ2UiLCJSZWdpc3RlciIsImhhbmRsZVJlZ2lzdGVyRm9ybSIsInN1Ym1pdFJlZ2lzdGVyRm9ybSIsImhhbmRsZUZpcnN0TmFtZUNoYW5nZSIsImhhbmRsZUxhc3ROYW1lQ2hhbmdlIiwiaGFuZGxlVXNlclR5cGVFbXBsb3llZSIsImhhbmRsZVVzZXJUeXBlRW1wbG95ZXIiLCJmaXJzdF9uYW1lIiwibGFzdF9uYW1lIiwidXNlcl90eXBlIiwiZmlyc3RfbmFtZV9lcnJvciIsImZpcnN0X25hbWVfZXJyb3Jfc3RhdGUiLCJsYXN0X25hbWVfZXJyb3IiLCJsYXN0X25hbWVfZXJyb3Jfc3RhdGUiLCJlbWFpbF9lcnJvciIsImVtYWlsX2Vycm9yX3N0YXRlIiwicGFzc3dvcmRfZXJyb3IiLCJwYXNzd29yZF9lcnJvcl9zdGF0ZSIsInR5cGVfZXJyb3IiLCJ0eXBlX2Vycm9yX3N0YXRlIiwiYW55X2lucHV0X2Vycm9yIiwibWF4bGVuZ3RoIiwiY2FuVXNlRE9NIiwiX2V4ZW52IiwiRUUiLCJTYWZlSFRNTEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImFzc2VydE5vZGVMaXN0Iiwic2V0RWxlbWVudCIsInVzZUVsZW1lbnQiLCJlbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnbG9iYWxFbGVtZW50IiwidmFsaWRhdGVFbGVtZW50IiwiaGlkZSIsImFwcEVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJzaG93IiwicmVtb3ZlQXR0cmlidXRlIiwiZG9jdW1lbnROb3RSZWFkeU9yU1NSVGVzdGluZyIsInJlc2V0Rm9yVGVzdGluZyIsIm5vZGVMaXN0Iiwic2VsZWN0b3IiLCJ0YWJiYWJsZSIsInRhYmJhYmxlTm9kZSIsImhpZGVzQ29udGVudHMiLCJ6ZXJvU2l6ZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiaW5uZXJIVE1MIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJmb2N1c2FibGUiLCJpc1RhYkluZGV4Tm90TmFOIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImRpc2FibGVkIiwicGFyZW50RWxlbWVudCIsInZpc2libGUiLCJ0YWJJbmRleCIsImdldEF0dHJpYnV0ZSIsImlzVGFiSW5kZXhOYU4iLCJfTW9kYWwiLCJfTW9kYWwyIiwiRHJhZnRTdHJpbmdLZXkiLCJ1bnN0cmluZ2lmeSIsIktleXMiLCJpc1dpbmRvd3MiLCJzaG91bGRGaXhGaXJlZm94TW92ZW1lbnQiLCJzaG91bGRSZW1vdmVXb3JkIiwia2V5Q29kZSIsImdldFpDb21tYW5kIiwiZ2V0RGVsZXRlQ29tbWFuZCIsImdldEJhY2tzcGFjZUNvbW1hbmQiLCJhZGp1c3RCbG9ja0RlcHRoRm9yQ29udGVudFN0YXRlIiwibnVsbHRocm93cyIsImN1cnJlbnRCbG9ja0NvbnRhaW5zTGluayIsImdldEN1cnJlbnRCbG9ja1R5cGUiLCJnZXREYXRhT2JqZWN0Rm9yTGlua1VSTCIsInVyaSIsImhhbmRsZUtleUNvbW1hbmQiLCJjb21tYW5kIiwidG9nZ2xlSW5saW5lU3R5bGUiLCJ0b2dnbGVDb2RlIiwib25CYWNrc3BhY2UiLCJvbkRlbGV0ZSIsImluc2VydFNvZnROZXdsaW5lIiwibmV3RWRpdG9yU3RhdGUiLCJibG9ja0JlZm9yZSIsIndpdGhvdXRBdG9taWNCbG9jayIsIndpdGhvdXRCbG9ja1N0eWxlIiwidHJ5VG9SZW1vdmVCbG9ja1N0eWxlIiwiYmxvY2tBZnRlciIsImF0b21pY0Jsb2NrVGFyZ2V0Iiwib25UYWIiLCJtYXhEZXB0aCIsImJsb2NrQWJvdmUiLCJ0eXBlQWJvdmUiLCJ3aXRoQWRqdXN0bWVudCIsInRvZ2dsZUJsb2NrVHlwZSIsInR5cGVUb1NldCIsImN1cnJlbnRTdHlsZSIsInRvZ2dsZUxpbmsiLCJ3aXRob3V0TGluayIsImZpcnN0QmxvY2siLCJpc09sZElFIiwiaHRtbCIsImltcGxlbWVudGF0aW9uIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJfa25vd25MaXN0SXRlbURlcHRoQ2wiLCJfYXNzaWduIiwiX2RlZmluZVByb3BlcnR5IiwiVVJJIiwiZ2V0U2FmZUJvZHlGcm9tSFRNTCIsImV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCIsIlJFR0VYX0NSIiwiUkVHRVhfTEYiLCJSRUdFWF9OQlNQIiwiUkVHRVhfQ0FSUklBR0UiLCJSRUdFWF9aV1MiLCJib2xkVmFsdWVzIiwibm90Qm9sZFZhbHVlcyIsImlubGluZVRhZ3MiLCJjb2RlIiwiZGVsIiwiZW0iLCJzdHJpa2UiLCJzdHJvbmciLCJ1Iiwia25vd25MaXN0SXRlbURlcHRoQ2xhc3NlcyIsImFuY2hvckF0dHIiLCJpbWdBdHRyIiwiRU1QVFlfQ0hVTksiLCJpbmxpbmVzIiwiZW50aXRpZXMiLCJFTVBUWV9CTE9DSyIsImdldExpc3RCbG9ja1R5cGUiLCJ0YWciLCJsYXN0TGlzdCIsImdldEJsb2NrVHlwZUZvclRhZyIsImJsb2NrUmVuZGVyTWFwIiwibWF0Y2hlZFR5cGVzIiwiZHJhZnRCbG9jayIsImFsaWFzIiwibXVsdGlNYXRjaEV4dHJhY3RvciIsIm1hdGNoVHlwZSIsImdldE11bHRpTWF0Y2hlZFR5cGUiLCJqb2luQ2h1bmtzIiwiQiIsImV4cGVyaW1lbnRhbEhhc05lc3RlZEJsb2NrcyIsImxhc3RJbkEiLCJmaXJzdEluQiIsImhhc1ZhbGlkTGlua1RleHQiLCJsaW5rIiwiSFRNTEFuY2hvckVsZW1lbnQiLCJwcm90b2NvbCIsImdldFNvZnROZXdsaW5lQ2h1bmsiLCJnZXRCbG9ja0RpdmlkZXJDaHVuayIsInBhcmVudEtleSIsImdldENodW5rZWRCbG9jayIsImdlbkZyYWdtZW50IiwiaW5CbG9jayIsImJsb2NrVGFncyIsImluRW50aXR5IiwibGFzdExhc3RCbG9jayIsIm5leHRCbG9ja1R5cGUiLCJuZXdCbG9jayIsImluQmxvY2tUeXBlIiwiY2h1bmsiLCJfdGV4dCIsInRleHRDb250ZW50Iiwibm9kZVRleHRDb250ZW50IiwicGFyZW50Tm9kZU5hbWUiLCJnZXRXaGl0ZXNwYWNlQ2h1bmsiLCJmaWxsIiwiSFRNTEltYWdlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJnZXROYW1lZEl0ZW0iLCJpbWFnZSIsImVudGl0eUNvbmZpZyIsImF0dHIiLCJpbWFnZUF0dHJpYnV0ZSIsInN0eWxlVG9DaGVjayIsImh0bWxFbGVtZW50IiwiZm9udFdlaWdodCIsImZvbnRTdHlsZSIsInRleHREZWNvcmF0aW9uIiwicHJvY2Vzc0lubGluZVRhZyIsImRlcHRoQ2xhc3MiLCJjbGFzc0xpc3QiLCJnZXRMaXN0SXRlbURlcHRoIiwiaW5MaXN0QmxvY2siLCJpbkJsb2NrT3JIYXNOZXN0ZWRCbG9ja3MiLCJmaXJzdENoaWxkIiwiZW50aXR5SWQiLCJhbmNob3IiLCJhbmNob3JBdHRyaWJ1dGUiLCJfZ2VuRnJhZ21lbnQiLCJnZW5lcmF0ZWRDaHVuayIsInNpYmxpbmciLCJnZXRDaHVua0ZvckhUTUwiLCJET01CdWlsZGVyIiwic3VwcG9ydGVkQmxvY2tUYWdzIiwidW5zdHlsZWRFbGVtZW50IiwidGFncyIsImdldEJsb2NrTWFwU3VwcG9ydGVkVGFncyIsInNhZmVCb2R5Iiwid29ya2luZ0Jsb2NrcyIsImNvbnRhaW5zU2VtYW50aWNCbG9ja01hcmt1cCIsImNodW5rRGF0YSIsInJhd0Jsb2NrcyIsInJhd0lubGluZXMiLCJyYXdFbnRpdGllcyIsIkJsb2NrTm9kZVJlY29yZCIsImFjYyIsInRleHRCbG9jayIsInBhcmVudFRleHROb2RlS2V5IiwicGFyZW50SW5kZXgiLCJjYWNoZVJlZiIsInBhcmVudFJlY29yZCIsInBhcmVudENoYXJhY3Rlckxpc3QiLCJwYXJlbnRUZXh0IiwidGV4dE5vZGUiLCJibG9ja05vZGUiLCJjb252ZXJ0Q2h1bmtUb0NvbnRlbnRCbG9ja3MiLCJXSElURVNQQUNFX0FORF9QVU5DVFVBVElPTiIsImdldFB1bmN0dWF0aW9uIiwiREVMRVRFX1JFR0VYIiwiQkFDS1NQQUNFX1JFR0VYIiwiZ2V0UmVtb3ZhYmxlV29yZCIsIm1hdGNoZXMiLCJEcmFmdFJlbW92YWJsZVdvcmQiLCJnZXRCYWNrd2FyZCIsImdldEZvcndhcmQiLCJmaW5kQW5jZXN0b3JPZmZzZXRLZXkiLCJnZXRVcGRhdGVkU2VsZWN0aW9uU3RhdGUiLCJnZXRQb2ludEZvck5vblRleHROb2RlIiwiZWRpdG9yUm9vdCIsInN0YXJ0Tm9kZSIsImNoaWxkT2Zmc2V0IiwiRWxlbWVudCIsImNoaWxkTm9kZXMiLCJmaXJzdExlYWYiLCJnZXRGaXJzdExlYWYiLCJub2RlQmVmb3JlQ3Vyc29yIiwidGV4dExlbmd0aCIsImxhc3RMZWFmIiwibGFzdENoaWxkIiwiZ2V0TGFzdExlYWYiLCJnZXRUZXh0Q29udGVudExlbmd0aCIsImFuY2hvck5vZGUiLCJmb2N1c05vZGUiLCJhbmNob3JJc1RleHROb2RlIiwiTm9kZSIsIlRFWFRfTk9ERSIsImZvY3VzSXNUZXh0Tm9kZSIsIm5lZWRzUmVjb3ZlcnkiLCJhbmNob3JQb2ludCIsImZvY3VzUG9pbnQiLCJnZXRSYW5nZUNsaWVudFJlY3RzIiwidGVtcFJhbmdlIiwiY2xvbmVSYW5nZSIsImNsaWVudFJlY3RzIiwiYW5jZXN0b3IiLCJlbmRDb250YWluZXIiLCJhdENvbW1vbkFuY2VzdG9yIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJzZXRTdGFydCIsInN0YXJ0Q29udGFpbmVyIiwicmVjdHMiLCJnZXRDbGllbnRSZWN0cyIsInNldEVuZEJlZm9yZSIsImFuY2hvclBhdGgiLCJhbmNob3JCbG9ja0tleSIsImFuY2hvckxlYWYiLCJmb2N1c1BhdGgiLCJmb2N1c0Jsb2NrS2V5IiwiZm9jdXNMZWFmIiwiYW5jaG9yTGVhZlN0YXJ0IiwiZm9jdXNMZWFmU3RhcnQiLCJhbmNob3JCbG9ja09mZnNldCIsImZvY3VzQmxvY2tPZmZzZXQiLCJhbmNob3JMZWFmRW5kIiwiZm9jdXNMZWFmRW5kIiwiZ2xvYmFsIiwiVEVYVF9DTElQUElOR19SRUdFWCIsIlRFWFRfVFlQRVMiLCJ0ZXh0L3BsYWluIiwidGV4dC9odG1sIiwidGV4dC9ydGYiLCJURVhUX1NJWkVfVVBQRVJfQk9VTkQiLCJmaWxlcyIsInJlYWRDb3VudCIsInJlc3VsdHMiLCJmaWxlIiwiRmlsZVJlYWRlciIsImNvbnRlbnRzIiwicmVhZGVyIiwib25sb2FkIiwib25lcnJvciIsInJlYWRBc1RleHQiLCJyZWFkRmlsZSIsImNoaWxkT2Zmc2V0S2V5IiwiUGhvdG9zTWltZVR5cGUiLCJjcmVhdGVBcnJheUZyb21NaXhlZCIsIkNSX0xGX1JFR0VYIiwiUklDSF9URVhUX1RZUEVTIiwiZ2V0RmlsZUZyb21EYXRhVHJhbnNmZXIiLCJraW5kIiwiZ2V0QXNGaWxlIiwiRGF0YVRyYW5zZmVyIiwidHlwZXMiLCJpc1JpY2hUZXh0IiwiZ2V0SFRNTCIsImlzSW1hZ2UiLCJpc0xpbmsiLCJnZXRMaW5rIiwiaXRlbXMiLCJnZXRGaWxlcyIsImdldENvdW50IiwibW96SXRlbUNvdW50IiwiaGFzRmlsZXMiLCJfaXNWaWV3cG9ydFNjcm9sbEVsZW1lbnQiLCJTY3JvbGwiLCJnZXRUb3AiLCJzY3JvbGxUb3AiLCJzZXRUb3AiLCJuZXdUb3AiLCJnZXRMZWZ0Iiwic2Nyb2xsTGVmdCIsInNldExlZnQiLCJuZXdMZWZ0IiwiRHJhZnRFZGl0b3JMZWFmIiwiUmVhY3RET00iLCJVbmljb2RlQmlkaSIsImdldEVsZW1lbnRQb3NpdGlvbiIsImdldFNjcm9sbFBvc2l0aW9uIiwiZ2V0Vmlld3BvcnREaW1lbnNpb25zIiwiaXNCbG9ja09uU2VsZWN0aW9uRWRnZSIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInRyZWUiLCJmaW5kRE9NTm9kZSIsInNjcm9sbFBhcmVudCIsInNjcm9sbERlbHRhIiwibm9kZVBvc2l0aW9uIiwiaGVpZ2h0Iiwic2Nyb2xsVG8iLCJvZmZzZXRUb3AiLCJfcmVuZGVyQ2hpbGRyZW4iLCJsYXN0TGVhZlNldCIsImhhc1NlbGVjdGlvbiIsImxlYWZTZXQiLCJsZWF2ZXNGb3JMZWFmU2V0IiwibGVhdmVzIiwibGVhZiIsImpqIiwic3R5bGVTZXQiLCJjdXN0b21TdHlsZU1hcCIsImN1c3RvbVN0eWxlRm4iLCJpc0xhc3QiLCJEZWNvcmF0b3JDb21wb25lbnQiLCJnZXRDb21wb25lbnRGb3JLZXkiLCJkZWNvcmF0b3JQcm9wcyIsImdldFByb3BzRm9yS2V5IiwiZGVjb3JhdG9yT2Zmc2V0S2V5IiwiZGVjb3JhdGVkVGV4dCIsImdldERpcmVjdGlvbiIsInB1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9ibG9jayIsInB1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9sdHIiLCJwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvcnRsIiwiZGF0YS1vZmZzZXQta2V5IiwiYmxvY2tUcmVlIiwiaXNBdFN0YXJ0IiwibGVhZlN0YXJ0IiwiQk9MRCIsIkNPREUiLCJmb250RmFtaWx5Iiwid29yZFdyYXAiLCJJVEFMSUMiLCJTVFJJS0VUSFJPVUdIIiwiVU5ERVJMSU5FIiwiUkFOR0VfQllfQklESV9UWVBFIiwiUkVHRVhfU1RST05HIiwiUkVHRVhfUlRMIiwiZmlyc3RTdHJvbmdDaGFyIiwiZmlyc3RTdHJvbmdDaGFyRGlyIiwic3Ryb25nQ2hhciIsInJlc29sdmVCbG9ja0RpciIsImZhbGxiYWNrIiwiYmxvY2tEaXIiLCJzdHJvbmdGYWxsYmFjayIsImlzRGlyZWN0aW9uTFRSIiwiaXNEaXJlY3Rpb25SVEwiLCJfRHJhZnRFbnRpdHlJbnN0YW5jZVIiLCJMZWFmUmFuZ2UiLCJEZWNvcmF0b3JSYW5nZSIsImxlYWZTZXRzIiwiZGVjb3JhdGlvbnMiLCJhcmVFcXVhbCIsImNoYXJhY3RlcnMiLCJpbmxpbmVTdHlsZXMiLCJnZXRGaW5nZXJwcmludCIsIm5leHRTaWJsaW5nS2V5IiwibmV4dE5vbkRlc2NlbmRhbnRCbG9jayIsInRhcmdldExpc3QiLCJ0b0luc2VydCIsInJlbW92ZUZvckJsb2NrIiwiY2hhckJlZm9yZSIsImNoYXJBZnRlciIsImVudGl0eUJlZm9yZUN1cnNvciIsImVudGl0eUFmdGVyQ3Vyc29yIiwiY3VycmVudCIsIl9nZXRSZW1vdmFsUmFuZ2UiLCJnZXRSZW1vdmFsUmFuZ2UiLCJ1cGRhdGVkQmxvY2tzIiwidXBkYXRlZFN0YXJ0IiwidXBkYXRlZEVuZCIsIm5ld0tleXNSZWYiLCJsYXN0Um9vdEJsb2NrIiwiYmxvY2tNYXBTdGF0ZSIsIm9sZEtleSIsIm5leHRLZXkiLCJwcmV2S2V5IiwiY2hpbGRyZW5LZXlzIiwicGFyZW50Q2hpbGRyZW5MaXN0IiwiY2hpbGRLZXkiLCJyYW5kb21pemVDb250ZW50QmxvY2tOb2RlS2V5cyIsInJhbmRvbWl6ZUNvbnRlbnRCbG9ja0tleXMiLCJTaW5nbGVKb2IiLCJqb2JDb21wYW55SWQiLCJleGlzdGluZ0NvbXBhbnlFbmRQb2ludCIsInBvc3QiLCJjb21wYW55Iiwic3JjIiwic21hbGxfbG9nbyIsImFsdCIsIkNhbmNlbCIsIl9fQ0FOQ0VMX18iLCJlbmhhbmNlRXJyb3IiLCJyZXF1ZXN0Iiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImJ0b2EiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJsb2FkRXZlbnQiLCJ4RG9tYWluIiwiWERvbWFpblJlcXVlc3QiLCJvbnByb2dyZXNzIiwib250aW1lb3V0IiwiYXV0aCIsInVzZXJuYW1lIiwib3BlbiIsInRvVXBwZXJDYXNlIiwicGFyYW1zU2VyaWFsaXplciIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwicmVhZCIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5leHRUaWNrIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwic3VwcG9ydHNIaXN0b3J5IiwidWEiLCJ1c2VyQWdlbnQiLCJzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlIiwic3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2giLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiUkVBQ1RfU1RBVElDUyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwiZGVzY3JpcHRvciIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJjb21waWxlIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJyZXMiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZXNjYXBlZCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsIm9wdHMiLCJwcmV0dHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZWdtZW50IiwiaiIsImF0dGFjaEtleXMiLCJmbGFncyIsImVuZHNXaXRoRGVsaW1pdGVyIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsIl9Mb2NhdGlvblV0aWxzIiwiX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiX3Byb3BzJGtleUxlbmd0aCIsInRyYW5zaXRpb25NYW5hZ2VyIiwibmV4dFN0YXRlIiwiY3JlYXRlS2V5Iiwib2siLCJuZXh0RW50cmllcyIsImNhbkdvIiwiX2ludmFyaWFudDIiLCJfRE9NVXRpbHMiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJnZXRIYXNoUGF0aCIsInJlcGxhY2VIYXNoUGF0aCIsImdsb2JhbEhpc3RvcnkiLCJjYW5Hb1dpdGhvdXRSZWxvYWQiLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMkaGFzaFR5cGUiLCJfSGFzaFBhdGhDb2RlcnMkaGFzaFQiLCJnZXRET01Mb2NhdGlvbiIsImZvcmNlTmV4dFBvcCIsImlnbm9yZVBhdGgiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJoYW5kbGVQb3AiLCJyZXZlcnRQb3AiLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbFBhdGhzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJpbml0aWFsTG9jYXRpb24iLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJwdXNoSGFzaFBhdGgiLCJwcmV2SW5kZXgiLCJuZXh0UGF0aHMiLCJnZXRIaXN0b3J5U3RhdGUiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImhhbmRsZVBvcFN0YXRlIiwiYWxsS2V5cyIsInB1c2hTdGF0ZSIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiX1NpbmdsZURhc2hib2FyZEpvYiIsIkNvbXBhbmllc1NlY3Rpb24iLCJhbGxVc2VySm9icyIsIl9TaW5nbGVEYXNoYm9hcmRKb2IyIiwiX193aW5kb3ciLCJfX3NlbGYiLCJXb3JrZXJHbG9iYWxTY29wZSIsInJ4U3Vic2NyaWJlciIsImZvciIsIiQkcnhTdWJzY3JpYmVyIiwiY2xvc2VkIiwiY29tcGxldGUiLCJfX2V4dGVuZHMiLCJfXyIsIlVuc3Vic2NyaXB0aW9uRXJyb3IiLCJfc3VwZXIiLCJlcnJvcnMiLCJ0cnlDYXRjaFRhcmdldCIsImVycm9yT2JqZWN0XzEiLCJ0cnlDYXRjaGVyIiwidHJ5Q2F0Y2giLCJpc0FycmF5XzEiLCJpc09iamVjdF8xIiwiaXNGdW5jdGlvbl8xIiwidHJ5Q2F0Y2hfMSIsIlVuc3Vic2NyaXB0aW9uRXJyb3JfMSIsIlN1YnNjcmlwdGlvbiIsInVuc3Vic2NyaWJlIiwiX3BhcmVudCIsIl9wYXJlbnRzIiwiX3N1YnNjcmlwdGlvbnMiLCJfdW5zdWJzY3JpYmUiLCJoYXNFcnJvcnMiLCJmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMiLCJzdWIiLCJ0ZWFyZG93biIsInN1YnNjcmlwdGlvbiIsIl9hZGRQYXJlbnQiLCJ0bXAiLCJzdWJzY3JpcHRpb25zIiwic3Vic2NyaXB0aW9uSW5kZXgiLCJlcnJzIiwiU3Vic2NyaXB0aW9uXzEiLCJPYnNlcnZlcl8xIiwicnhTdWJzY3JpYmVyXzEiLCJTdWJzY3JpYmVyIiwiZGVzdGluYXRpb25Pck5leHQiLCJzeW5jRXJyb3JWYWx1ZSIsInN5bmNFcnJvclRocm93biIsInN5bmNFcnJvclRocm93YWJsZSIsImlzU3RvcHBlZCIsImRlc3RpbmF0aW9uIiwiaXNUcnVzdGVkU3Vic2NyaWJlciIsInRydXN0ZWRTdWJzY3JpYmVyIiwiU2FmZVN1YnNjcmliZXIiLCJzdWJzY3JpYmVyIiwiX25leHQiLCJfZXJyb3IiLCJfY29tcGxldGUiLCJfdW5zdWJzY3JpYmVBbmRSZWN5Y2xlIiwiX3BhcmVudFN1YnNjcmliZXIiLCJvYnNlcnZlck9yTmV4dCIsIl9jb250ZXh0IiwiX190cnlPclNldEVycm9yIiwiX190cnlPclVuc3ViIiwid3JhcHBlZENvbXBsZXRlIiwiU3Vic2NyaWJlcl8xIiwibGlmdCIsIkZpbHRlck9wZXJhdG9yIiwic3Vic2NyaWJlIiwiRmlsdGVyU3Vic2NyaWJlciIsImZpbHRlcl8xIiwiX2ZpbHRlciIsIkNvbXBhbnkiLCJ2aWV3RXhpc3RpbmdDb21wYW55IiwiZmlsdGVySm9icyIsInZpZXdDb21wYW55TW9kYWxJc09wZW4iLCJjb21wYW55SW5mbyIsImNvbXBhbnlEZXNjcmlwdGlvbiIsImFsbEpvYnMiLCJmaWx0ZXJlZEpvYnMiLCJfdGhpczMiLCJfdGhpczQiLCJjb21wYW5pZXNGcm9tTGluayIsIl9Db21wYW55IiwiY29tcGFuaWVzIiwiX0NvbXBhbnkyIiwiX0NvbXBhbmllc1NlY3Rpb24iLCJfSm9ic1NlY3Rpb24iLCJFbXBsb3llckRhc2hib2FyZCIsImhhbmRsZUxvZ091dCIsInN1Ym1pdFByb2ZpbGVDaGFuZ2UiLCJyZWRpcmVjdFRvSG9tZSIsInJldHVybmVkUmVzcG9uc2UiLCJzYXZlQ2hhbmdlcyIsInBrIiwidXBkYXRlUHJvZmlsZVVybCIsIl9IZWFkZXIyIiwiX0NvbXBhbmllc1NlY3Rpb24yIiwiX0Zvb3RlcjIiLCJFbXBsb3llZURhc2hib2FyZCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiX0xvZ2luIiwiX1JlZ2lzdGVyIiwiTXlBY2NvdW50Iiwic2hvd0xvZ2luIiwic2hvd1JlZ2lzdGVyIiwic2hvd1RhYiIsIl9Mb2dpbjIiLCJfUmVnaXN0ZXIyIiwiQ29udGFjdCIsImNsYXNzIiwiQWJvdXQiLCJIb21lIiwiX0pvYnNQYWdlMiIsIl9kcmFmdEpzIiwiX2RyYWZ0SnNFeHBvcnRIdG1sIiwiVmlld0pvYlBhZ2UiLCJlbmFibGVFZGl0TW9kZSIsImVuYWJsZVZpZXdNb2RlIiwiZGVsZXRlSm9iIiwic3VibWl0Sm9iQ2hhbmdlcyIsInVwZGF0ZUpvYkFyZWEiLCJ1cGRhdGVKb2JFeHBlcmllbmNlIiwidXBkYXRlSm9iSG91cnMiLCJ1cGRhdGVKb2JMb2NhdGlvbiIsInVwZGF0ZUpvYlNhbGFyeSIsInVwZGF0ZUpvYlNsdWciLCJ1cGRhdGVKb2JUaXRsZSIsInVwZGF0ZVBvc3RlZEJ5Q29tcGFueSIsIm9uVW5kZXJsaW5lQ2xpY2siLCJvbkJvbGRDbGljayIsIm9uSXRhbGljQ2xpY2siLCJvbk1lZGl1bUNsaWNrIiwib25MYXJnZUNsaWNrIiwib25MZWZ0QWxpZ25DbGljayIsIm9uUmlnaHRBbGlnbkNsaWNrIiwib25KdXN0aWZ5Q2xpY2siLCJvbk9yZGVyZWRMaXN0Q2xpY2siLCJvblVub3JkZXJlZExpc3RDbGljayIsInZpZXdNb2RlIiwiZWRpdE1vZGUiLCJqb2JJbmZvIiwiZXhpc3RpbmdKb2JFbmRQb2ludCIsImdpdmVuQ29udGVudCIsInBhcnNlZENvbnRlbnQiLCJpbW11dGFibGVDb250ZW50Iiwic3RhdGVUb0hUTUwiLCJvdXRwdXRIdG1sIiwiX19odG1sIiwic3RyaW5naWZpZWRDb250ZW50IiwibmV3U3RhdGUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9yZWFjdE1vZGFsIiwiTmV3Sm9iUGFnZSIsInN1Ym1pdE5ld0pvYiIsImxpbmtzSW5mbyIsImF2YWlsYWJsZUNvbXBhbmllcyIsImZvcm1FcnJvciIsInByZXZTdGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWciLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdCIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwicG9seWZpbGwiLCJpc1JlYWN0Q29tcG9uZW50IiwiZm91bmRXaWxsTW91bnROYW1lIiwiZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSIsImZvdW5kV2lsbFVwZGF0ZU5hbWUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudE5hbWUiLCJuZXdBcGlOYW1lIiwibWF5YmVTbmFwc2hvdCIsInNuYXBzaG90IiwiX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImR1bXBDbGFzc0xpc3RzIiwiaHRtbENsYXNzTGlzdCIsImRvY0JvZHlDbGFzc0xpc3QiLCJjbGFzc1N0cmluZyIsImNsYXNzTGlzdFJlZiIsInBvbGwiLCJpbmNyZW1lbnRSZWZlcmVuY2UiLCJkZWNyZW1lbnRSZWZlcmVuY2UiLCJfdGFiYmFibGUyIiwiZm9jdXMiLCJjaGVja1NhZmFyaSIsIl90YWJiYWJsZSIsImhhbmRsZUJsdXIiLCJoYW5kbGVGb2N1cyIsIm1hcmtGb3JGb2N1c0xhdGVyIiwiZm9jdXNMYXRlckVsZW1lbnRzIiwicmV0dXJuRm9jdXMiLCJ0b0ZvY3VzIiwicG9wV2l0aG91dEZvY3VzIiwic2V0dXBTY29wZWRGb2N1cyIsIm1vZGFsRWxlbWVudCIsInRlYXJkb3duU2NvcGVkRm9jdXMiLCJuZWVkVG9Gb2N1cyIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfcHJvcFR5cGVzMiIsImZvY3VzTWFuYWdlciIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3Njb3BlVGFiMiIsImFyaWFBcHBIaWRlciIsIl9zYWZlSFRNTEVsZW1lbnQyIiwibmV3T2JqIiwiQ0xBU1NfTkFNRVMiLCJvdmVybGF5IiwiVEFCX0tFWSIsIkVTQ19LRVkiLCJhcmlhSGlkZGVuSW5zdGFuY2VzIiwiTW9kYWxQb3J0YWwiLCJfQ29tcG9uZW50Iiwic2V0T3ZlcmxheVJlZiIsIm92ZXJsYXlSZWYiLCJzZXRDb250ZW50UmVmIiwiY29udGVudFJlZiIsImFmdGVyQ2xvc2UiLCJhcmlhSGlkZUFwcCIsImh0bWxPcGVuQ2xhc3NOYW1lIiwiYm9keU9wZW5DbGFzc05hbWUiLCJzaG91bGRGb2N1c0FmdGVyUmVuZGVyIiwic2hvdWxkUmV0dXJuRm9jdXNBZnRlckNsb3NlIiwiYmVmb3JlT3BlbiIsImFmdGVyT3BlbiIsImJlZm9yZUNsb3NlIiwiY2xvc2VUaW1lciIsIm9uQWZ0ZXJPcGVuIiwiY2xvc2UiLCJjbG9zZVRpbWVvdXRNUyIsImNsb3NlV2l0aFRpbWVvdXQiLCJjbG9zZVdpdGhvdXRUaW1lb3V0IiwiZm9jdXNDb250ZW50IiwiY29udGVudEhhc0ZvY3VzIiwiY2xvc2VzQXQiLCJEYXRlIiwibm93IiwiaGFuZGxlS2V5RG93biIsInNob3VsZENsb3NlT25Fc2MiLCJzdG9wUHJvcGFnYXRpb24iLCJyZXF1ZXN0Q2xvc2UiLCJoYW5kbGVPdmVybGF5T25DbGljayIsInNob3VsZENsb3NlIiwic2hvdWxkQ2xvc2VPbk92ZXJsYXlDbGljayIsIm93bmVySGFuZGxlc0Nsb3NlIiwiaGFuZGxlQ29udGVudE9uTW91c2VVcCIsImhhbmRsZU92ZXJsYXlPbk1vdXNlRG93biIsImhhbmRsZUNvbnRlbnRPbkNsaWNrIiwiaGFuZGxlQ29udGVudE9uTW91c2VEb3duIiwib25SZXF1ZXN0Q2xvc2UiLCJzaG91bGRCZUNsb3NlZCIsImJ1aWxkQ2xhc3NOYW1lIiwid2hpY2giLCJhZGRpdGlvbmFsIiwiYXJpYUF0dHJpYnV0ZXMiLCJtb3ZlRnJvbUNvbnRlbnRUb092ZXJsYXkiLCJfcHJvcHMyIiwib3ZlcmxheUNsYXNzTmFtZSIsImRlZmF1bHRTdHlsZXMiLCJjb250ZW50U3R5bGVzIiwib3ZlcmxheVN0eWxlcyIsIm9uTW91c2VEb3duIiwiYXJpYS1tb2RhbCIsIm9uS2V5RG93biIsIm9uTW91c2VVcCIsInJvbGUiLCJhcmlhLWxhYmVsIiwiY29udGVudExhYmVsIiwiYXJpYSIsImRhdGEtdGVzdGlkIiwidGVzdElkIiwiaW5zdGFuY2VPZiIsInBvcnRhbENsYXNzTmFtZSIsIl9yZWFjdERvbTIiLCJfTW9kYWxQb3J0YWwyIiwiX3NhZmVIVE1MRWxlbWVudCIsIl9yZWFjdExpZmVjeWNsZXNDb21wYXQiLCJpc1JlYWN0MTYiLCJjcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImdldFBhcmVudEVsZW1lbnQiLCJwYXJlbnRTZWxlY3RvciIsIk1vZGFsIiwicmVtb3ZlUG9ydGFsIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInJlbW92ZUNoaWxkIiwicG9ydGFsUmVmIiwicG9ydGFsIiwicmVuZGVyUG9ydGFsIiwiYXBwZW5kQ2hpbGQiLCJwcmV2UGFyZW50IiwibmV4dFBhcmVudCIsInBvc2l0aW9uIiwidG9wIiwiYm90dG9tIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwiYmFja2dyb3VuZCIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwiYm9yZGVyUmFkaXVzIiwib3V0bGluZSIsInBhZGRpbmciLCJWaWV3Q29tcGFueVBhZ2UiLCJ1cGRhdGVDb21wYW55TmFtZSIsInVwZGF0ZVNtYWxsTG9nbyIsInVwZGF0ZUxhcmdlTG9nbyIsInN1Ym1pdENvbXBhbnlDaGFuZ2VzIiwiZGVsZXRlQ29tcGFueSIsImxhcmdlX2xvZ28iLCJwcmV2aWV3U21hbGwiLCJwcmV2aWV3TGFyZ2UiLCJvbmxvYWRlbmQiLCJyZWFkQXNEYXRhVVJMIiwiX3RoaXM1IiwiZm9ybURhdGEiLCJhcHBlbmQiLCJjb250ZW50LXR5cGUiLCJfdGhpczYiLCJOZXdDb21wYW55UGFnZSIsInN1Ym1pdE5ld0NvbXBhbnkiLCJzbWFsbExvZ29QcmV2aWV3IiwibGFyZ2VMb2dvUHJldmlldyIsIl9nZXRTZWxlY3RlZEJsb2NrcyIsIl9nZXRTZWxlY3RlZEJsb2NrczIiLCJjdXJyZW50U2VsZWN0aW9uIiwiZmluYWxFZGl0b3JTdGF0ZSIsImN1cnJlbnRCbG9ja0tleSIsInNlbGVjdGlvbkVuZCIsImVudGl0eUZvdW5kIiwiZmluYWxTdGFydE9mZnNldCIsImZpbmFsRW5kT2Zmc2V0IiwiY2hhck1ldGFMaXN0IiwiY2hhckVudGl0eSIsInByZXZDaGFyRW50aXR5IiwicmFuZ2VzIiwicmFuZ2VTdGFydCIsIm1ldGEiLCJnZXRTdHlsZVJhbmdlcyIsImNoYXJTdHlsZSIsInByZXZDaGFyU3R5bGUiLCJCTE9DS19UWVBFIiwiVU5TVFlMRUQiLCJIRUFERVJfT05FIiwiSEVBREVSX1RXTyIsIkhFQURFUl9USFJFRSIsIkhFQURFUl9GT1VSIiwiSEVBREVSX0ZJVkUiLCJIRUFERVJfU0lYIiwiVU5PUkRFUkVEX0xJU1RfSVRFTSIsIk9SREVSRURfTElTVF9JVEVNIiwiQkxPQ0tRVU9URSIsIlBVTExRVU9URSIsIkFUT01JQyIsIkVOVElUWV9UWVBFIiwiTElOSyIsIklNQUdFIiwiSU5MSU5FX1NUWUxFIiwiX0NvbnN0YW50cyIsIl9nZXRFbnRpdHlSYW5nZXMiLCJfc2VsZWN0aW9uQ29udGFpbnNFbnRpdHkiLCJfY2FsbE1vZGlmaWVyRm9yU2VsZWN0ZWRCbG9ja3MiLCJWRU5ET1JfUFJFRklYIiwiTlVNRVJJQ19TVFJJTkciLCJVUFBFUkNBU0VfUEFUVEVSTiIsImlzVW5pdGxlc3NOdW1iZXIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwic3R5bGVEZXNjciIsInN0eWxlVmFsdWUiLCJpc051bWVyaWMiLCJwcm9jZXNzU3R5bGVWYWx1ZSIsInByb2Nlc3NTdHlsZU5hbWUiLCJBVFRSX05BTUVfTUFQIiwiYWNjZXB0Q2hhcnNldCIsImh0bWxGb3IiLCJodHRwRXF1aXYiLCJub3JtYWxpemVkIiwiZGlkTm9ybWFsaXplIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJuZXdOYW1lIiwicmV0dXJuIiwiX3NsaWNlZFRvQXJyYXkiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfaSIsInNsaWNlSXRlcmF0b3IiLCJjdXN0b21NYXAiLCJfZGVmYXVsdHMiLCJkZWZhdWx0U3R5bGVNYXAiLCJkZWZhdWx0U3R5bGVPcmRlciIsInN0eWxlTWFwIiwic3R5bGVPcmRlciIsImFycjIiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJfc3R5bGVOYW1lIiwiX0RFRkFVTFRfU1RZTEVfTUFQIiwiX0VOVElUWV9BVFRSX01BUCIsIl9EQVRBX1RPX0FUVFIiLCJNYXJrdXBHZW5lcmF0b3IiLCJfY29tYmluZU9yZGVyZWRTdHlsZXM0IiwiX25vcm1hbGl6ZUF0dHJpYnV0ZXMyIiwiX3N0eWxlVG9DU1MyIiwiX2RyYWZ0SnNVdGlscyIsIkJSRUFLIiwiREFUQV9BVFRSSUJVVEUiLCJERUZBVUxUX1NUWUxFX01BUCIsIkRFRkFVTFRfU1RZTEVfT1JERVIiLCJFTlRJVFlfQVRUUl9NQVAiLCJyZWwiLCJ3aWR0aCIsIkRBVEFfVE9fQVRUUiIsImVudGl0eVR5cGUiLCJhdHRyTWFwIiwiYXR0cnMiLCJkYXRhS2V5IiwiZGF0YVZhbHVlIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIiLCJfZGlkSXRlcmF0b3JFcnJvcjIiLCJfaXRlcmF0b3JFcnJvcjIiLCJfc3RlcDIiLCJfaXRlcmF0b3IyIiwiZ2V0VGFncyIsImRlZmF1bHRCbG9ja1RhZyIsIl9jb21iaW5lT3JkZXJlZFN0eWxlcyIsIl9jb21iaW5lT3JkZXJlZFN0eWxlczIiLCJvdXRwdXQiLCJ0b3RhbEJsb2NrcyIsImN1cnJlbnRCbG9jayIsImluZGVudExldmVsIiwid3JhcHBlclRhZyIsInByb2Nlc3NCbG9jayIsImNsb3NlV3JhcHBlclRhZyIsImJsb2NrUmVuZGVyZXJzIiwibmV3V3JhcHBlclRhZyIsImdldFdyYXBwZXJUYWciLCJvcGVuV3JhcHBlclRhZyIsImluZGVudCIsImN1c3RvbVJlbmRlcmVyIiwiY3VzdG9tUmVuZGVyZXJPdXRwdXQiLCJ3cml0ZVN0YXJ0VGFnIiwicmVuZGVyQmxvY2tDb250ZW50IiwiZ2V0TmV4dEJsb2NrIiwiY2FuSGF2ZURlcHRoIiwidGhpc1dyYXBwZXJUYWciLCJwcm9jZXNzQmxvY2tzQXREZXB0aCIsIndyaXRlRW5kVGFnIiwiYXR0clN0cmluZyIsImJsb2NrU3R5bGVGbiIsIl9hdHRyaWJ1dGVzIiwiX3N0eWxlIiwic3R5bGVBdHRyIiwic3RyaW5naWZ5QXR0cnMiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyIsIl9kaWRJdGVyYXRvckVycm9yMyIsIl9pdGVyYXRvckVycm9yMyIsIl9zdGVwMyIsIl9pdGVyYXRvcjMiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCIsIl9kaWRJdGVyYXRvckVycm9yNCIsIl9pdGVyYXRvckVycm9yNCIsIl9zdGVwNCIsIl9pdGVyYXRvcjQiLCJwcmVzZXJ2ZVdoaXRlc3BhY2UiLCJnZXRFbnRpdHlSYW5nZXMiLCJfcmVmMyIsIl9yZWY0IiwiX3JlZjUiLCJlbmNvZGVDb250ZW50IiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUiLCJfZGlkSXRlcmF0b3JFcnJvcjUiLCJfaXRlcmF0b3JFcnJvcjUiLCJfc3RlcDUiLCJfaXRlcmF0b3I1IiwiX2lubGluZVN0eWxlcyRfc3R5bGVOIiwiX2VsZW1lbnQiLCJfYXR0cmlidXRlczIiLCJfc3R5bGUyIiwiZW50aXR5U3R5bGUiLCJlbnRpdHlTdHlsZUZuIiwiX2VudGl0eVN0eWxlIiwiX2VsZW1lbnQyIiwiX2F0dHJpYnV0ZXMzIiwiX3N0eWxlMyIsIm5ld1RleHQiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiIsIl9kaWRJdGVyYXRvckVycm9yNiIsIl9pdGVyYXRvckVycm9yNiIsIl9zdGVwNiIsIl9pdGVyYXRvcjYiLCJfcmVjdHMkIiwiX3JlY3RzJDIiLCJyZWN0IiwiZ2V0UmFuZ2VCb3VuZGluZ0NsaWVudFJlY3QiLCJyYW5nZUNvdW50IiwiZ2V0UmFuZ2VBdCIsImJvdW5kaW5nUmVjdCIsInN0eWxlcyIsImNoYXJhY3RlckFycmF5IiwiaXNMaXN0QmxvY2siLCJEcmFmdFRyZWVBZGFwdGVyIiwiZnJvbVJhd1RyZWVTdGF0ZVRvUmF3U3RhdGUiLCJkcmFmdFRyZWVTdGF0ZSIsInRyYW5zZm9ybWVkQmxvY2tzIiwiX2Jsb2NrIiwidHJhdmVyc2VJbkRlcHRoT3JkZXIiLCJhZGREZXB0aFRvQ2hpbGRyZW4iLCJmcm9tUmF3U3RhdGVUb1Jhd1RyZWVTdGF0ZSIsImRyYWZ0U3RhdGUiLCJsYXN0TGlzdERlcHRoQ2FjaGVSZWYiLCJ0cmVlQmxvY2siLCJjcmVhdGVDaGFyYWN0ZXJMaXN0IiwiZGVjb2RlRW50aXR5UmFuZ2VzIiwiZGVjb2RlSW5saW5lU3R5bGVSYW5nZXMiLCJkZWNvZGVCbG9ja05vZGVDb25maWciLCJkZWNvZGVDaGFyYWN0ZXJMaXN0IiwicmF3RW50aXR5UmFuZ2VzIiwiZW50aXR5UmFuZ2VzIiwicmF3SW5saW5lU3R5bGVSYW5nZXMiLCJpbmxpbmVTdHlsZVJhbmdlcyIsImFkZEtleUlmTWlzc2luZyIsInVwZGF0ZU5vZGVTdGFjayIsInBhcmVudFJlZiIsIm5vZGVzV2l0aFBhcmVudFJlZiIsImRlY29kZVJhd0Jsb2NrcyIsInJhd1N0YXRlIiwiaXNUcmVlUmF3QmxvY2siLCJjb250ZW50QmxvY2tOb2RlIiwic2libGluZ3MiLCJfaW5kZXgiLCJpc1ZhbGlkQmxvY2siLCJfY2hpbGRyZW4iLCJfY29udGVudEJsb2NrTm9kZSIsImRlY29kZUNvbnRlbnRCbG9ja05vZGVzIiwiY29udGVudEJsb2NrIiwiZGVjb2RlQ29udGVudEJsb2NrcyIsInJhd0VudGl0eU1hcCIsInJhd0VudGl0eUtleSIsIl9yYXdFbnRpdHlNYXAkcmF3RW50aSIsImRlY29kZVJhd0VudGl0eU1hcCIsImlzVHJ1dGh5IiwiRU1QVFlfQVJSQVkiLCJzdHlsZUxpc3QiLCJzdHlsZVRvRW5jb2RlIiwiZmlsdGVyZWRJbmxpbmVzIiwiZ2V0RW5jb2RlZElubGluZXNGb3JUeXBlIiwic3RvcmFnZU1hcCIsImVuY29kZWQiLCJOdW1iZXIiLCJlbmNvZGVFbnRpdHlSYW5nZXMiLCJlbmNvZGVJbmxpbmVTdHlsZVJhbmdlcyIsImNyZWF0ZVJhd0Jsb2NrIiwiZW50aXR5U3RvcmFnZU1hcCIsImVuY29kZVJhd0Jsb2NrcyIsImJsb2NrQ2FjaGVSZWYiLCJlbnRpdHlDYWNoZVJlZiIsImVudGl0eVN0b3JhZ2VLZXkiLCJzdHJpbmdpZmllZEVudGl0eUtleSIsInJhd0Jsb2NrIiwiaW5zZXJ0UmF3QmxvY2siLCJyYXdEcmFmdENvbnRlbnRTdGF0ZSIsImVuY29kZVJhd0VudGl0eU1hcCIsIkRyYWZ0RWRpdG9yUGxhY2Vob2xkZXIiLCJwdWJsaWMvRHJhZnRFZGl0b3JQbGFjZWhvbGRlci9yb290IiwicHVibGljL0RyYWZ0RWRpdG9yUGxhY2Vob2xkZXIvaGFzRm9jdXMiLCJhY2Nlc3NpYmlsaXR5SUQiLCJ3aGl0ZVNwYWNlIiwiZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25XaXRoTm9kZXMiLCJnZXREcmFmdEVkaXRvclNlbGVjdGlvbiIsImVkaXRvciIsIl9ibG9ja1NlbGVjdEV2ZW50cyIsIl9sYXRlc3RFZGl0b3JTdGF0ZSIsImVkaXRvck5vZGUiLCJlZGl0b3JDb250YWluZXIiLCJkb2N1bWVudFNlbGVjdGlvbiIsInVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSIsIk5FV0xJTkVfUkVHRVgiLCJhZGp1c3RtZW50IiwiX3VyaSIsImNvbnZlcnRGcm9tSFRNTHRvQ29udGVudEJsb2NrcyIsIkNvbnRlbnRCbG9ja1JlY29yZCIsIkRyYWZ0UGFzdGVQcm9jZXNzb3IiLCJwcm9jZXNzSFRNTCIsInByb2Nlc3NUZXh0IiwidGV4dEJsb2NrcyIsInRleHRMaW5lIiwiYmxvY2tOb2RlQ29uZmlnIiwicHJldlNpYmxpbmdJbmRleCIsInByZXZpb3VzQmxvY2siLCJnZXRFbnRpdHlLZXlGb3JTZWxlY3Rpb24iLCJnZXRUZXh0Q29udGVudEZyb21GaWxlcyIsImlzRXZlbnRIYW5kbGVkIiwic3BsaXRUZXh0SW50b1RleHRCbG9ja3MiLCJpbnNlcnRGcmFnbWVudCIsImNsaXBib2FyZERhdGEiLCJkZWZhdWx0RmlsZVRleHQiLCJoYW5kbGVQYXN0ZWRGaWxlcyIsImZpbGVUZXh0IiwiY3VycmVudEJsb2NrVHlwZSIsIndpdGhJbnNlcnRlZFRleHQiLCJoYW5kbGVQYXN0ZWRUZXh0Iiwic3RyaXBQYXN0ZWRTdHlsZXMiLCJpbnRlcm5hbENsaXBib2FyZCIsImdldENsaXBib2FyZCIsImdldEVkaXRvcktleSIsImFyZVRleHRCbG9ja3NBbmRDbGlwYm9hcmRFcXVhbCIsImh0bWxGcmFnbWVudCIsImh0bWxNYXAiLCJzZXRDbGlwYm9hcmQiLCJ0ZXh0RnJhZ21lbnQiLCJ0ZXh0TWFwIiwidXBkYXRlRm4iLCJ1bmRvbmVTdGF0ZSIsImZpbmFsU2VsZWN0aW9uIiwidGFyZ2V0T2Zmc2V0IiwiYWZ0ZXJJbnNlcnQiLCJtb3ZlU2VsZWN0aW9uRm9yd2FyZCIsInJlbW92ZVRleHRXaXRoU3RyYXRlZ3kiLCJzdHJhdGVneVN0YXRlIiwiY2hhckFoZWFkIiwibW92ZVNlbGVjdGlvbkJhY2t3YXJkIiwiY2hhckJlaGluZCIsInRvUmVtb3ZlIiwiYXJlUmVjdHNPbk9uZUxpbmUiLCJtaW5Ub3AiLCJtaW5Cb3R0b20iLCJtYXhUb3AiLCJtYXhCb3R0b20iLCJnZXROb2RlTGVuZ3RoIiwiRE9DVU1FTlRfVFlQRV9OT0RFIiwiUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFIiwiQ09NTUVOVF9OT0RFIiwiY29sbGFwc2VkIiwiY29udGFpbmluZ0VsZW1lbnQiLCJjb21wdXRlZCIsImRpdiIsImZvbnRTaXplIiwiZG9jdW1lbnRCb2R5IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZ2V0TGluZUhlaWdodFB4IiwiYmVzdENvbnRhaW5lciIsImJlc3RPZmZzZXQiLCJzZXRTdGFydEJlZm9yZSIsImRpc3BsYXkiLCJjdXJyZW50Q29udGFpbmVyIiwibWF4SW5kZXhUb0NvbnNpZGVyIiwibm9kZVZhbHVlIiwiZXhwYW5kUmFuZ2VUb1N0YXJ0T2ZMaW5lIiwiY2xpcGJvYXJkIiwiU2Vjb25kYXJ5Q2xpcGJvYXJkIiwiY3V0IiwiYmxvY2tFbmQiLCJwYXN0ZSIsImtleUNvbW1hbmRCYWNrc3BhY2VUb1N0YXJ0T2ZMaW5lIiwia2V5Q29tbWFuZEJhY2tzcGFjZVdvcmQiLCJrZXlDb21tYW5kRGVsZXRlV29yZCIsImtleUNvbW1hbmRJbnNlcnROZXdsaW5lIiwia2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub0VuZE9mQmxvY2siLCJrZXlDb21tYW5kTW92ZVNlbGVjdGlvblRvU3RhcnRPZkJsb2NrIiwia2V5Q29tbWFuZFBsYWluQmFja3NwYWNlIiwia2V5Q29tbWFuZFBsYWluRGVsZXRlIiwia2V5Q29tbWFuZFRyYW5zcG9zZUNoYXJhY3RlcnMiLCJrZXlDb21tYW5kVW5kbyIsImlzQ2hyb21lIiwiaGFuZGxlUmV0dXJuIiwib25Fc2NhcGUiLCJvblVwQXJyb3ciLCJvblJpZ2h0QXJyb3ciLCJvbkRvd25BcnJvdyIsIm9uTGVmdEFycm93Iiwia2V5QmluZGluZ0ZuIiwib25LZXlDb21tYW5kIiwiaXNHZWNrbyIsIkRPVUJMRV9ORVdMSU5FIiwiX3BlbmRpbmdTdGF0ZUZyb21CZWZvcmVJbnB1dCIsImRvbVNlbGVjdGlvbiIsImlzTm90VGV4dE5vZGUiLCJpc05vdFRleHRPckVsZW1lbnROb2RlIiwiRUxFTUVOVF9OT0RFIiwiZHJhZnRfa2lsbHN3aXRjaF9hbGxvd19ub250ZXh0bm9kZXMiLCJwcmV2aW91c1NpYmxpbmciLCJzcGFuIiwiZG9tVGV4dCIsIl9EcmFmdE9mZnNldEtleSRkZWNvZCIsIl9lZGl0b3JTdGF0ZSRnZXRCbG9jayIsIm1vZGVsVGV4dCIsImVuZHNXaXRoIiwicHJlc2VydmVFbnRpdHkiLCJjaGFyRGVsdGEiLCJjb250ZW50V2l0aEFkanVzdGVkRE9NU2VsZWN0aW9uIiwib25Gb2N1cyIsIl9pbnRlcm5hbERyYWciLCJzZXRNb2RlIiwiZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uIiwicmVzdG9yZUVkaXRvckRPTSIsImV4aXRDdXJyZW50TW9kZSIsInJlbW92ZUZyYWdtZW50IiwiX29uQ29tcG9zaXRpb25TdGFydCIsImdldEFjdGl2ZUVsZW1lbnQiLCJfc2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwib25CbHVyIiwic2V0SW1tZWRpYXRlIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJjaGFubmVsIiwibWVzc2FnZVByZWZpeCIsIm9uR2xvYmFsTWVzc2FnZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiYXR0YWNoVG8iLCJoYW5kbGUiLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwib25tZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJ0YXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJpc1NlbGVjdGlvbkF0TGVhZlN0YXJ0IiwiRkZfUVVJQ0tGSU5EX0NIQVIiLCJGRl9RVUlDS0ZJTkRfTElOS19DSEFSIiwiaXNGaXJlZm94IiwiaGFuZGxlQmVmb3JlSW5wdXQiLCJtdXN0UHJldmVudE5hdGl2ZSIsIl9sYXRlc3RDb21taXR0ZWRFZGl0b3JTdGF0ZSIsIm5hdGl2ZVNlbGVjdGlvbiIsIkRyYWZ0RWRpdG9yRWRpdEhhbmRsZXIiLCJvbkJlZm9yZUlucHV0Iiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db3B5Iiwib25DdXQiLCJvbkRyYWdPdmVyIiwib25EcmFnU3RhcnQiLCJvbklucHV0Iiwib25QYXN0ZSIsIm9uU2VsZWN0IiwiaGFzQXJyYXlOYXR1cmUiLCJyZXQiLCJtaW1lU3RyaW5nIiwiZ2V0UGFydHMiLCJpc0pwZWciLCJEcmFmdEVkaXRvckRyYWdIYW5kbGVyIiwib25EcmFnRW5kIiwib25Ecm9wIiwibmF0aXZlRXZlbnQiLCJkYXRhVHJhbnNmZXIiLCJkcm9wU2VsZWN0aW9uIiwiY2FyZXRSYW5nZUZyb21Qb2ludCIsImRyb3BSYW5nZSIsInJhbmdlUGFyZW50IiwicmFuZ2VPZmZzZXQiLCJnZXRTZWxlY3Rpb25Gb3JFdmVudCIsImhhbmRsZURyb3BwZWRGaWxlcyIsImluc2VydFRleHRBdFNlbGVjdGlvbiIsImRyYWdUeXBlIiwiaGFuZGxlRHJvcCIsIm5ld0NvbnRlbnRTdGF0ZSIsIm5leHRDbGFzcyIsImFyZ0xlbmd0aCIsImdldFZpZXdwb3J0V2lkdGgiLCJnZXRWaWV3cG9ydEhlaWdodCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIndpdGhvdXRTY3JvbGxiYXJzIiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsImlzV2Via2l0Iiwic2Nyb2xsaW5nRWxlbWVudCIsImNvbXBhdE1vZGUiLCJlbGVtIiwiZG9jRWxlbSIsInJvdW5kIiwiY2xpZW50TGVmdCIsImNsaWVudFRvcCIsImdldEVsZW1lbnRSZWN0IiwiX3VwcGVyY2FzZVBhdHRlcm4iLCJfaHlwaGVuUGF0dGVybiIsImNhbWVsaXplIiwiaHlwaGVuYXRlIiwiYXNTdHJpbmciLCJjb21wdXRlZFN0eWxlIiwiY3NzRmxvYXQiLCJzdHlsZUZsb2F0IiwibG9nU2VsZWN0aW9uU3RhdGVGYWlsdXJlIiwiRHJhZnRKc0RlYnVnTG9nZ2luZyIsImdldEFub255bWl6ZWRET00iLCJnZXROb2RlTGFiZWxzIiwiYW5vbnltaXplZCIsImFub255bWl6ZVRleHRXaXRoaW4iLCJsYWJlbHMiLCJjcmVhdGVUZXh0Tm9kZSIsImNsb25lIiwiY2xvbmVOb2RlIiwib3V0ZXJIVE1MIiwiZ2V0QW5vbnltaXplZEVkaXRvckRPTSIsImN1cnJlbnROb2RlIiwiaGFzQXR0cmlidXRlIiwiYWRkRm9jdXNUb1NlbGVjdGlvbiIsImFub255bWl6ZWREb20iLCJleHRyYVBhcmFtcyIsIm5vZGVXYXNGb2N1cyIsImFjdGl2ZUVsZW1lbnROYW1lIiwibm9kZUlzRm9jdXMiLCJzZWxlY3Rpb25SYW5nZUNvdW50Iiwic2VsZWN0aW9uQW5jaG9yTm9kZU5hbWUiLCJzZWxlY3Rpb25BbmNob3JPZmZzZXQiLCJzZWxlY3Rpb25Gb2N1c05vZGVOYW1lIiwic2VsZWN0aW9uRm9jdXNPZmZzZXQiLCJzZXRFbmQiLCJhZGRSYW5nZSIsImFkZFBvaW50VG9TZWxlY3Rpb24iLCJjcmVhdGVSYW5nZSIsIm5vZGVTdGFydCIsIm5vZGVFbmQiLCJ0ZW1wS2V5IiwidGVtcE9mZnNldCIsImhhc0FuY2hvciIsInN0b3JlZEZvY3VzTm9kZSIsInN0b3JlZEZvY3VzT2Zmc2V0IiwiY29tcG9uZW50UmVnZXgiLCJvclJlZ2V4IiwicmFuZ2VSZWdleCIsIm1vZGlmaWVyUmVnZXgiLCJudW1lcmljUmVnZXgiLCJjaGVja09yRXhwcmVzc2lvbiIsImV4cHJlc3Npb25zIiwiY2hlY2tTaW1wbGVFeHByZXNzaW9uIiwic3RhcnRWZXJzaW9uIiwiZW5kVmVyc2lvbiIsImlzU2ltcGxlVmVyc2lvbiIsImNoZWNrUmFuZ2VFeHByZXNzaW9uIiwidmVyc2lvbkNvbXBvbmVudHMiLCJfZ2V0TW9kaWZpZXJBbmRDb21wb24iLCJnZXRNb2RpZmllckFuZENvbXBvbmVudHMiLCJyYW5nZUNvbXBvbmVudHMiLCJjaGVja0xlc3NUaGFuIiwiY29tcGFyZUNvbXBvbmVudHMiLCJjaGVja0dyZWF0ZXJUaGFuT3JFcXVhbCIsImNoZWNrR3JlYXRlclRoYW4iLCJsYXN0SW5kZXgiLCJudW1lcmljIiwiY2hlY2tBcHByb3hpbWF0ZVZlcnNpb24iLCJjaGVja0VxdWFsIiwiaXNGaW5pdGUiLCJ6ZXJvUGFkIiwiY29tcGFyZU51bWVyaWMiLCJhUHJlZml4IiwiYlByZWZpeCIsImFOdW1lcmljIiwiYk51bWVyaWMiLCJfbm9ybWFsaXplVmVyc2lvbnMiLCJub3JtYWxpemVWZXJzaW9ucyIsImFOb3JtYWxpemVkIiwiYk5vcm1hbGl6ZWQiLCJfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyIsIk1PREVMIiwiTkFNRSIsIlRZUEUiLCJWRU5ET1IiLCJWRVJTSU9OIiwiTU9CSUxFIiwiVEFCTEVUIiwidXRpbCIsInJlZ2V4ZXMiLCJleHRlbnNpb25zIiwibWFyZ2VkUmVnZXhlcyIsInN0cjEiLCJzdHIyIiwibG93ZXJpemUiLCJtYWpvciIsInJneCIsImFycmF5cyIsInEiLCJyZWdleCIsIm1hcHMiLCJvbGRzYWZhcmkiLCIxLjAiLCIxLjIiLCIxLjMiLCIyLjAiLCIyLjAuMiIsIjIuMC4zIiwiMi4wLjQiLCI/IiwiZGV2aWNlIiwiYW1hem9uIiwibW9kZWwiLCJGaXJlIFBob25lIiwic3ByaW50IiwiRXZvIFNoaWZ0IDRHIiwidmVuZG9yIiwiSFRDIiwiU3ByaW50Iiwib3MiLCJ3aW5kb3dzIiwiTUUiLCJOVCAzLjExIiwiTlQgNC4wIiwiMjAwMCIsIlhQIiwiVmlzdGEiLCI3IiwiOCIsIjguMSIsIjEwIiwiUlQiLCJjcHUiLCJlbmdpbmUiLCJVQVBhcnNlciIsInVhc3RyaW5nIiwiZ2V0UmVzdWx0Iiwicmd4bWFwIiwiZ2V0QnJvd3NlciIsImdldENQVSIsImFyY2hpdGVjdHVyZSIsImdldERldmljZSIsImdldEVuZ2luZSIsImdldE9TIiwiZ2V0VUEiLCJzZXRVQSIsIkJST1dTRVIiLCJNQUpPUiIsIkNQVSIsIkFSQ0hJVEVDVFVSRSIsIkRFVklDRSIsIkNPTlNPTEUiLCJTTUFSVFRWIiwiV0VBUkFCTEUiLCJFTUJFRERFRCIsIkVOR0lORSIsIk9TIiwiJCIsImpRdWVyeSIsIlplcHRvIiwicGFyc2VyIiwicHJvcCIsIlVOS05PV04iLCJQTEFURk9STV9NQVAiLCJNYWMgT1MiLCJicm93c2VyVmVyc2lvbkRhdGEiLCJtaW5vciIsImdldEJyb3dzZXJWZXJzaW9uIiwidWFEYXRhIiwiYnJvd3Nlck1pbm9yVmVyc2lvbiIsImJyb3dzZXJWZXJzaW9uIiwicGxhdGZvcm1WZXJzaW9uIiwidXNlTmV3bGluZUNoYXIiLCJORVdMSU5FX0EiLCJkYXRhLXRleHQiLCJORVdMSU5FX0IiLCJEcmFmdEVkaXRvclRleHROb2RlIiwiX2ZvcmNlRmxhZyIsInNob3VsZEJlTmV3bGluZSIsInRhZ05hbWUiLCJpc05ld2xpbmUiLCJzZXREcmFmdEVkaXRvclNlbGVjdGlvbiIsIl9zZXRTZWxlY3Rpb24iLCJ0YXJnZXROb2RlIiwibGVhZk5vZGUiLCJzdHlsZU9iaiIsInN0eWxlTmFtZSIsIm1lcmdlZFN0eWxlcyIsIm5ld1N0eWxlcyIsImpvaW5DbGFzc2VzIiwiZ2V0TGlzdEl0ZW1DbGFzc2VzIiwic2hvdWxkUmVzZXRDb3VudCIsInB1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC91bm9yZGVyZWRMaXN0SXRlbSIsInB1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9vcmRlcmVkTGlzdEl0ZW0iLCJwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvcmVzZXQiLCJwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvZGVwdGgwIiwicHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2RlcHRoMSIsInB1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9kZXB0aDIiLCJwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvZGVwdGgzIiwicHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2RlcHRoNCIsInB1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9saXN0TFRSIiwicHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2xpc3RSVEwiLCJEcmFmdEVkaXRvckNvbnRlbnRzIiwicHJldkVkaXRvclN0YXRlIiwibmV4dEVkaXRvclN0YXRlIiwibmV4dE5hdGl2ZUNvbnRlbnQiLCJ3YXNDb21wb3NpbmciLCJub3dDb21wb3NpbmciLCJwcmV2Q29udGVudCIsIm5leHRDb250ZW50IiwicHJldkRlY29yYXRvciIsIm5leHREZWNvcmF0b3IiLCJibG9ja1JlbmRlcmVyRm4iLCJlZGl0b3JLZXkiLCJ0ZXh0RGlyZWN0aW9uYWxpdHkiLCJibG9ja3NBc0FycmF5IiwicHJvY2Vzc2VkQmxvY2tzIiwibGFzdFdyYXBwZXJUZW1wbGF0ZSIsIkN1c3RvbUNvbXBvbmVudCIsImN1c3RvbVByb3BzIiwiY3VzdG9tRWRpdGFibGUiLCJjb21wb25lbnRQcm9wcyIsImJsb2NrUHJvcHMiLCJjb25maWdGb3JUeXBlIiwid3JhcHBlclRlbXBsYXRlIiwiY2hpbGRQcm9wcyIsImRhdGEtYmxvY2siLCJkYXRhLWVkaXRvciIsImNvbnRlbnRFZGl0YWJsZSIsInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyIsIm91dHB1dEJsb2NrcyIsIl9paSIsImluZm8iLCJ3cmFwcGVyRWxlbWVudCIsImRhdGEtY29udGVudHMiLCJyZXNvbHZlZCIsInN0aWxsQ29tcG9zaW5nIiwidGV4dElucHV0RGF0YSIsIkRyYWZ0RWRpdG9yQ29tcG9zaXRpb25IYW5kbGVyIiwib25Db21wb3NpdGlvbkVuZCIsInJlc29sdmVDb21wb3NpdGlvbiIsIl9vbktleURvd24iLCJvbktleVByZXNzIiwiY29tcG9zZWRDaGFycyIsIm11c3RSZXNldCIsImRyYWZ0X2hhbmRsZWJlZm9yZWlucHV0X2NvbXBvc2VkX3RleHQiLCJpc0lFIiwiYWxsb3dTcGVsbENoZWNrIiwiaGFuZGxlck1hcCIsImVkaXQiLCJjb21wb3NpdGUiLCJkcmFnIiwiYWxyZWFkeUhhc0ZvY3VzIiwiYmx1ciIsIm1vZGUiLCJfaGFuZGxlciIsImNvbnRlbnRzS2V5IiwiX2NsaXBib2FyZCIsIm9uRHJhZ0VudGVyIiwiX2RyYWdDb3VudCIsIm9uRHJhZ0xlYXZlIiwiX2VkaXRvcktleSIsIl9wbGFjZWhvbGRlckFjY2Vzc2liaWxpdHlJRCIsIl9vbkJlZm9yZUlucHV0IiwiX2J1aWxkSGFuZGxlciIsIl9vbkJsdXIiLCJfb25DaGFyYWN0ZXJEYXRhIiwiX29uQ29tcG9zaXRpb25FbmQiLCJfb25Db3B5IiwiX29uQ3V0IiwiX29uRHJhZ0VuZCIsIl9vbkRyYWdPdmVyIiwiX29uRHJhZ1N0YXJ0IiwiX29uRHJvcCIsIl9vbklucHV0IiwiX29uRm9jdXMiLCJfb25LZXlQcmVzcyIsIl9vbktleVVwIiwiX29uTW91c2VEb3duIiwiX29uTW91c2VVcCIsIl9vblBhc3RlIiwiX29uU2VsZWN0IiwiZXZlbnROYW1lIiwicmVhZE9ubHkiLCJfc2hvd1BsYWNlaG9sZGVyIiwicGxhY2Vob2xkZXIiLCJfcmVuZGVyUGxhY2Vob2xkZXIiLCJwbGFjZUhvbGRlclByb3BzIiwidGV4dEFsaWdubWVudCIsInJvb3RDbGFzcyIsIkRyYWZ0RWRpdG9yL3Jvb3QiLCJEcmFmdEVkaXRvci9hbGlnbkxlZnQiLCJEcmFmdEVkaXRvci9hbGlnblJpZ2h0IiwiRHJhZnRFZGl0b3IvYWxpZ25DZW50ZXIiLCJhcmlhUm9sZSIsImFyaWFFeHBhbmRlZCIsImVkaXRvckNvbnRlbnRzUHJvcHMiLCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnQiLCJhcmlhQWN0aXZlRGVzY2VuZGFudElEIiwiYXJpYS1hdXRvY29tcGxldGUiLCJhcmlhQXV0b0NvbXBsZXRlIiwiYXJpYS1jb250cm9scyIsImFyaWFDb250cm9scyIsImFyaWEtZGVzY3JpYmVkYnkiLCJhcmlhRGVzY3JpYmVkQnkiLCJhcmlhLWV4cGFuZGVkIiwiYXJpYUxhYmVsIiwiYXJpYS1sYWJlbGxlZGJ5IiwiYXJpYUxhYmVsbGVkQnkiLCJhcmlhLW11bHRpbGluZSIsImFyaWFNdWx0aWxpbmUiLCJhdXRvQ2FwaXRhbGl6ZSIsImF1dG9Db21wbGV0ZSIsImF1dG9Db3JyZWN0Iiwibm90cmFuc2xhdGUiLCJwdWJsaWMvRHJhZnRFZGl0b3IvY29udGVudCIsIndlYkRyaXZlclRlc3RJRCIsIm9uS2V5VXAiLCJzcGVsbENoZWNrIiwidXNlclNlbGVjdCIsIldlYmtpdFVzZXJTZWxlY3QiLCJleGVjQ29tbWFuZCIsImRlY29yYXRvcnMiLCJfZGVjb3JhdG9ycyIsImNvdW50ZXIiLCJjYW5PY2N1cHlTbGljZSIsInRhcmdldEFyciIsImNvbXBvbmVudEtleSIsIm9jY3VweVNsaWNlIiwiZ2V0TmV4dERlbGltaXRlckJsb2NrS2V5IiwidHJhbnNmb3JtQmxvY2siLCJibG9ja1RvQmVNb3ZlZCIsInRhcmdldEJsb2NrIiwiaW5zZXJ0aW9uTW9kZSIsInRhcmdldEtleSIsImlzRXhwZXJpbWVudGFsVHJlZUJsb2NrIiwiYmxvY2tzVG9CZU1vdmVkIiwiYmxvY2tNYXBXaXRob3V0QmxvY2tzVG9CZU1vdmVkIiwibmV4dERlbGltaXRlckJsb2NrS2V5IiwiaXNCbG9ja1RvQmVNb3ZlZCIsImhhc05leHRTaWJsaW5nQW5kSXNOb3ROZXh0U2libGluZyIsImRvZXNOb3RIYXZlTmV4dFNpYmxpbmdBbmRJc05vdERlbGltaXRlciIsImJsb2Nrc0JlZm9yZSIsImJsb2Nrc0FmdGVyIiwic2xpY2VkQmxvY2tzIiwibmV3QmxvY2tzIiwib3JpZ2luYWxCbG9ja1RvQmVNb3ZlZCIsIm9yaWdpbmFsVGFyZ2V0QmxvY2siLCJpc0luc2VydGVkQWZ0ZXJUYXJnZXQiLCJvcmlnaW5hbEJsb2NrS2V5Iiwib3JpZ2luYWxUYXJnZXRLZXkiLCJvcmlnaW5hbFBhcmVudEtleSIsIm9yaWdpbmFsTmV4dFNpYmxpbmdLZXkiLCJvcmlnaW5hbFByZXZTaWJsaW5nS2V5IiwibmV3UGFyZW50S2V5IiwibmV3TmV4dFNpYmxpbmdLZXkiLCJuZXdQcmV2U2libGluZ0tleSIsIm5ld1BhcmVudENoaWxkcmVuTGlzdCIsInRhcmdldEJsb2NrSW5kZXgiLCJpbnNlcnRpb25JbmRleCIsIm5ld0NoaWxkcmVuQXJyYXkiLCJ1cGRhdGVCbG9ja01hcExpbmtzIiwiVW5pY29kZUJpZGlTZXJ2aWNlIiwiZGVmYXVsdERpciIsIl9kZWZhdWx0RGlyIiwicmVzZXQiLCJfbGFzdERpciIsImJpZGlTZXJ2aWNlIiwicHJldkJpZGlNYXAiLCJuZXh0QmlkaSIsImJpZGlNYXAiLCJibG9ja1RvU3BsaXQiLCJrZXlCZWxvdyIsImJsb2NrQmVsb3ciLCJvcmlnaW5hbEJsb2NrIiwiYmVsb3dCbG9jayIsImJlbG93QmxvY2tLZXkiLCJnZXRBbmNlc3RvcnNLZXlzIiwicGFyZW50cyIsImdldE5leHRWYWxpZFNpYmxpbmciLCJvcmlnaW5hbEJsb2NrTWFwIiwibmV4dFZhbGlkU2libGluZ0tleSIsImdldFByZXZWYWxpZFNpYmxpbmciLCJwcmV2VmFsaWRTaWJsaW5nS2V5IiwibmV4dERlbGltaXRlcnMiLCJuZXh0RGVsaW1pdGVyIiwiZ2V0TmV4dERlbGltaXRlcnNCbG9ja0tleXMiLCJkZWxpbWl0ZXJLZXkiLCJyZW1vdmVGcm9tTGlzdCIsInBhcmVudEFuY2VzdG9ycyIsImVuZEJsb2NrY2hpbGRyZW5LZXlzIiwiZW5kQmxvY2tBbmNlc3RvcnMiLCJtb2RpZmllZFN0YXJ0IiwidXBkYXRlZEJsb2NrTWFwIiwib3BlcmF0aW9uIiwiaW5zZXJ0SW50b0xpc3QiLCJjaGFyYWN0ZXJNZXRhZGF0YSIsImJsb2NrVGV4dCIsIm5ld09mZnNldCIsImlzVHJlZUJhc2VkQmxvY2tNYXAiLCJuZXdCbG9ja0FyciIsImZyYWdtZW50U2l6ZSIsImZpbmFsT2Zmc2V0IiwiZmluYWxLZXkiLCJzaG91bGROb3RVcGRhdGVGcm9tRnJhZ21lbnRCbG9jayIsImhlYWRUZXh0IiwiaGVhZENoYXJhY3RlcnMiLCJhcHBlbmRUb0hlYWQiLCJ1cGRhdGVIZWFkIiwiZnJhZ21lbnRCbG9jayIsImJsb2NrU2l6ZSIsInRhaWxUZXh0IiwidGFpbENoYXJhY3RlcnMiLCJwcmVwZW5kVG9UYWlsIiwidXBkYXRlVGFpbCIsImZyYWdtZW50SGVhZEJsb2NrIiwiaGVhZEtleSIsInRhcmdldE5leHRLZXkiLCJ0YXJnZXRQYXJlbnRLZXkiLCJmcmFnbWVudFJvb3RCbG9ja3MiLCJyb290QmxvY2siLCJyb290QmxvY2tzIiwibGFzdFNpYmxpbmdLZXkiLCJnZXRSb290QmxvY2tzIiwibGFzdFJvb3RGcmFnbWVudEJsb2NrS2V5Iiwib3JpZ2luYWxUYXJnZXRQYXJlbnRDaGlsZEtleXMiLCJuZXdDaGlsZHJlbktleXNBcnJheSIsImZyYWdtZW50QmxvY2tNYXAiLCJ1cGRhdGVFeGlzdGluZ0Jsb2NrIiwiZW50aXR5U3RhcnQiLCJzZWdtZW50cyIsInNlZ21lbnRFbmQiLCJzZWdtZW50U3RhcnQiLCJyZW1vdmFsU3RhcnQiLCJyZW1vdmFsRW5kIiwiZW50aXR5RW5kIiwiYXRTdGFydCIsImF0RW5kIiwiRHJhZnRFbnRpdHlTZWdtZW50cyIsImdldFJhbmdlc0ZvckRyYWZ0RW50aXR5IiwiZ2V0RW50aXR5UmVtb3ZhbFJhbmdlIiwiaXNFbnRpcmVTZWxlY3Rpb25XaXRoaW5FbnRpdHkiLCJpc0VudGl0eUF0U3RhcnQiLCJzaWRlVG9Db25zaWRlciIsImVudGl0eVJhbmdlIiwibmV3U2VsZWN0aW9uU3RhdGUiLCJzdGFydFNlbGVjdGlvblN0YXRlIiwiZW5kU2VsZWN0aW9uU3RhdGUiLCJfc3RhcnRTZWxlY3Rpb25TdGF0ZSIsIl9lbmRTZWxlY3Rpb25TdGF0ZSIsImFwcGx5RW50aXR5VG9Db250ZW50QmxvY2siLCJzbGljZVN0YXJ0Iiwic2xpY2VFbmQiLCJtb2RpZnlJbmxpbmVTdHlsZSIsImFkZE9yUmVtb3ZlIiwibW92ZUJsb2NrSW5Db250ZW50U3RhdGUiLCJpbnNlcnRBdG9taWNCbG9jayIsImFmdGVyU3BsaXQiLCJpbnNlcnRpb25UYXJnZXQiLCJhc0F0b21pY0Jsb2NrIiwiY2hhckRhdGEiLCJhdG9taWNCbG9ja0NvbmZpZyIsImF0b21pY0RpdmlkZXJCbG9ja0NvbmZpZyIsImZyYWdtZW50QXJyYXkiLCJ3aXRoQXRvbWljQmxvY2siLCJtb3ZlQXRvbWljQmxvY2siLCJhdG9taWNCbG9jayIsIndpdGhNb3ZlZEF0b21pY0Jsb2NrIiwic2VsZWN0aW9uQWZ0ZXJSZW1vdmFsIiwiX3RhcmdldEJsb2NrIiwic2VsZWN0aW9uQWZ0ZXJTcGxpdCIsIl90YXJnZXRCbG9jazIiLCJKb2JQb3N0IiwiZ2V0U2luZ2xlSm9iRW5kcG9pbnQiLCJqb2JIdG1sIiwiam9iT3V0cHV0SHRtbCIsImdpdmVuQ29tcGFueUNvbnRlbnQiLCJwYXJzZWRDb21wYW55Q29udGVudCIsImltbXV0YWJsZUNvbXBhbnlDb250ZW50IiwiY29tcGFueUh0bWwiLCJjb21wYW55T3V0cHV0SHRtbCIsImNsYXNzQ2FsbENoZWNrIiwidCIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJBcHBDb250YWluZXIiLCJpbmhlcml0cyIsImhvdCIsImFyZUNvbXBvbmVudHNFcXVhbCIsInNldENvbmZpZyIsIkNhbmNlbFRva2VuIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsInJlYXNvbiIsInRocm93SWZSZXF1ZXN0ZWQiLCJiYXNlVVJMIiwicmVsYXRpdmVVUkwiLCJmbnMiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNDYW5jZWwiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiaGFuZGxlcnMiLCJ1c2UiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsImVqZWN0Iiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJFIiwiY2hhckNvZGUiLCJvcmlnaW5VUkwiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwiaG9zdCIsImhvc3RuYW1lIiwicG9ydCIsInJlcXVlc3RVUkwiLCJwYXJzZWQiLCJpZ25vcmVEdXBsaWNhdGVPZiIsImxpbmUiLCJzZXJpYWxpemVkUGFyYW1zIiwidG9JU09TdHJpbmciLCJub3JtYWxpemVkTmFtZSIsImRpc3BhdGNoUmVxdWVzdCIsIkF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJpbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJlYWRGbG9hdExFIiwiaXNTbG93QnVmZmVyIiwiX2lzQnVmZmVyIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsInNoaW0iLCJwcm9wTmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJvYmplY3RPZiIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiQXBwUm91dGVyIiwiTm90Rm91bmRQYWdlIiwiaXNOb2RlIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwiaXNJbldvcmtlciIsImJhIiwiZWEiLCJmYSIsImhhIiwiamEiLCJrYSIsIkQiLCJfY2F1Z2h0RXJyb3IiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiX2hhc1JldGhyb3dFcnJvciIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvciIsImhhc0NhdWdodEVycm9yIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciIsIm9hIiwicGEiLCJxYSIsInJhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJzYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidGEiLCJyZWdpc3RyYXRpb25OYW1lIiwidmEiLCJkZXBlbmRlbmNpZXMiLCJ3YSIsInhhIiwiQ2EiLCJmcmVlemUiLCJwbHVnaW5zIiwiZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzIiwicmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsImN1cnJlbnRUYXJnZXQiLCJIYSIsIklhIiwiSmEiLCJLYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwic3RhdGVOb2RlIiwiUGEiLCJRYSIsIlJhIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIlNhIiwiRiIsIlRhIiwiVWEiLCJWYSIsIlhhIiwiYmIiLCJwcmVjYWNoZUZpYmVyTm9kZSIsImdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0SW5zdGFuY2VGcm9tTm9kZSIsImdldE5vZGVGcm9tSW5zdGFuY2UiLCJnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlIiwidXBkYXRlRmliZXJQcm9wcyIsIkwiLCJjYiIsImRiIiwiZGlzcGF0Y2hDb25maWciLCJlYiIsIl90YXJnZXRJbnN0IiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImFsdGVybmF0ZSIsImtiIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0IiwiYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMiLCJsYiIsIm1iIiwiTSIsIl9zdGFydFRleHQiLCJfZmFsbGJhY2tUZXh0IiwibmIiLCJvYiIsInBiIiwicWIiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJOIiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwic2IiLCJldmVudFBvb2wiLCJ0YiIsImRlc3RydWN0b3IiLCJyYiIsImdldFBvb2xlZCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJ1YiIsInZiIiwid2IiLCJ4YiIsInliIiwiZG9jdW1lbnRNb2RlIiwiemIiLCJBYiIsIkJiIiwiS2IiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwiTGIiLCJNYiIsIk5iIiwiZGV0YWlsIiwiT2IiLCJSYiIsIlBiIiwiY2hhciIsIlFiIiwiU2IiLCJUYiIsImluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQiLCJVYiIsIlZiIiwiV2IiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJlbnF1ZXVlU3RhdGVSZXN0b3JlIiwibmVlZHNTdGF0ZVJlc3RvcmUiLCJyZXN0b3JlU3RhdGVJZk5lZWRlZCIsImFjIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJtb250aCIsInRlbCIsInRpbWUiLCJ3ZWVrIiwiZ2MiLCJoYyIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwiaWMiLCJqYyIsImxjIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJrYyIsIm1jIiwiY2hlY2tlZCIsIm5jIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsIk8iLCJvYyIsInBjIiwicWMiLCJyYyIsInNjIiwidGMiLCJ1YyIsInZjIiwid2MiLCJ4YyIsInljIiwiemMiLCJBYyIsIiQkdHlwZW9mIiwiQmMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIkNjIiwiRGMiLCJFYyIsIlUiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwiViIsIlNjIiwiVGMiLCJVYyIsIkdjIiwiSGMiLCJGYyIsInNldEF0dHJpYnV0ZU5TIiwiVmMiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIldjIiwiWGMiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNoYW5nZSIsImNkIiwiZGQiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsInBkIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsInFkIiwidmlldyIsInJkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsInNkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInRkIiwidWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJzcmNFbGVtZW50IiwidG9FbGVtZW50IiwidmQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsIndkIiwieGQiLCJlZmZlY3RUYWciLCJ5ZCIsIl9yZWFjdEludGVybmFsRmliZXIiLCJ6ZCIsIkFkIiwiQmQiLCJEZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJFZCIsIkZkIiwiR2QiLCJIZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJNb3pQcmludGFibGVLZXkiLCJJZCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIkpkIiwibG9jYWxlIiwiS2QiLCJMZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJNZCIsIk5kIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJPZCIsIlBkIiwiUWQiLCJpc0ludGVyYWN0aXZlIiwiUmQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJTZCIsIlRkIiwiVWQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIlZkIiwiV2QiLCJXIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiYWUiLCJiZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsImNlIiwiZGUiLCJlZSIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJmZSIsInRvcEFuaW1hdGlvbkVuZCIsInRvcEFuaW1hdGlvbkl0ZXJhdGlvbiIsInRvcEFuaW1hdGlvblN0YXJ0IiwidG9wQmx1ciIsInRvcENhbmNlbCIsInRvcENoYW5nZSIsInRvcENsaWNrIiwidG9wQ2xvc2UiLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcEZvY3VzIiwidG9wSW5wdXQiLCJ0b3BLZXlEb3duIiwidG9wS2V5UHJlc3MiLCJ0b3BLZXlVcCIsInRvcExvYWQiLCJ0b3BMb2FkU3RhcnQiLCJ0b3BNb3VzZURvd24iLCJ0b3BNb3VzZU1vdmUiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsInRvcE1vdXNlVXAiLCJ0b3BQYXN0ZSIsInRvcFNjcm9sbCIsInRvcFNlbGVjdGlvbkNoYW5nZSIsInRvcFRleHRJbnB1dCIsInRvcFRvZ2dsZSIsInRvcFRvdWNoQ2FuY2VsIiwidG9wVG91Y2hFbmQiLCJ0b3BUb3VjaE1vdmUiLCJ0b3BUb3VjaFN0YXJ0IiwidG9wVHJhbnNpdGlvbkVuZCIsInRvcFdoZWVsIiwiZ2UiLCJ0b3BBYm9ydCIsInRvcENhblBsYXkiLCJ0b3BDYW5QbGF5VGhyb3VnaCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BMb2FkZWREYXRhIiwidG9wTG9hZGVkTWV0YWRhdGEiLCJ0b3BQYXVzZSIsInRvcFBsYXkiLCJ0b3BQbGF5aW5nIiwidG9wUHJvZ3Jlc3MiLCJ0b3BSYXRlQ2hhbmdlIiwidG9wU2Vla2VkIiwidG9wU2Vla2luZyIsInRvcFN0YWxsZWQiLCJ0b3BTdXNwZW5kIiwidG9wVGltZVVwZGF0ZSIsInRvcFZvbHVtZUNoYW5nZSIsInRvcFdhaXRpbmciLCJoZSIsImllIiwiamUiLCJrZSIsImxlIiwibWUiLCJuZSIsIm9lIiwicGUiLCJzZWxlY3QiLCJxZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwieGUiLCJwZW5kaW5nUHJvcHMiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImV4cGlyYXRpb25UaW1lIiwiemUiLCJBZSIsIkJlIiwiQ2UiLCJEZSIsInBlbmRpbmdDaGlsZHJlbiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJFZSIsIkZlIiwiR2UiLCJJZSIsIkplIiwiS2UiLCJiYXNlU3RhdGUiLCJjYWxsYmFja0xpc3QiLCJoYXNGb3JjZVVwZGF0ZSIsImlzSW5pdGlhbGl6ZWQiLCJjYXB0dXJlZFZhbHVlcyIsIkxlIiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJRZSIsInBhcnRpYWxTdGF0ZSIsIlJlIiwiaXNSZXBsYWNlIiwiaXNGb3JjZWQiLCJjYXB0dXJlZFZhbHVlIiwiU2UiLCJVZSIsIlZlIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInJlZnMiLCJXZSIsIlhlIiwieiIsIlEiLCJIIiwiWWUiLCJaZSIsIiRlIiwicGVuZGluZ0NvbnRleHQiLCJZIiwic2hvdWxkU2V0VGV4dENvbnRlbnQiLCJzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlIiwicHVzaEhvc3RDb250ZXh0IiwicHVzaEhvc3RDb250YWluZXIiLCJHIiwicHVzaFByb3ZpZGVyIiwiUiIsImdldE1hc2tlZENvbnRleHQiLCJTIiwiZ2V0VW5tYXNrZWRDb250ZXh0IiwiaGFzQ29udGV4dENoYW5nZWQiLCJwdXNoQ29udGV4dFByb3ZpZGVyIiwicHVzaFRvcExldmVsQ29udGV4dE9iamVjdCIsImludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIiLCJlbnRlckh5ZHJhdGlvblN0YXRlIiwiV2EiLCJyZXNldEh5ZHJhdGlvblN0YXRlIiwiQ2IiLCJ0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSIsIkpjIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiY2FjaGVDb250ZXh0IiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc01vdW50ZWQiLCJlbnF1ZXVlU2V0U3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJhZG9wdENsYXNzSW5zdGFuY2UiLCJjYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29uc3RydWN0Q2xhc3NJbnN0YW5jZSIsIm1vdW50Q2xhc3NJbnN0YW5jZSIsInJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZSIsInVwZGF0ZUNsYXNzSW5zdGFuY2UiLCJUZSIsIktjIiwiTGMiLCJEYiIsIk1jIiwiRWIiLCJiZWdpbldvcmsiLCJoeWRyYXRlIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsImNmIiwic3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZyIsImVmIiwibGYiLCJJIiwiWWEiLCJOYyIsInlhIiwiY2EiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJPYyIsIlphIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJpYSIsInphIiwiZGEiLCJGYiIsInhnIiwieWUiLCJJYyIsIlBjIiwiR2IiLCJtZyIsIlFjIiwibGciLCJuZXh0U2NoZWR1bGVkUm9vdCIsInJlbWFpbmluZ0V4cGlyYXRpb25UaW1lIiwiSyIsImxhIiwiVCIsIkoiLCJIYiIsImFhIiwiUCIsIiRhIiwiSWIiLCJBYSIsIl9vbkNvbXBsZXRlIiwid2ciLCJCYSIsIkpiIiwiZmluaXNoZWRXb3JrIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInpnIiwidyIsImFiIiwia2ciLCJ3ZSIsImdnIiwiQWciLCJoZyIsImlnIiwiamciLCJ0aW1lUmVtYWluaW5nIiwiQmciLCJjcmVhdGVDdXJzb3IiLCJjaGVja1RoYXRTdGFja0lzRW1wdHkiLCJyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXYiLCJrZiIsImdldENoaWxkSG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRleHQiLCJnZXRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250ZXh0IiwiZmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJpc0NvbnRleHRQcm92aWRlciIsInBvcENvbnRleHRQcm92aWRlciIsInBvcFRvcExldmVsQ29udGV4dE9iamVjdCIsInByb2Nlc3NDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0IiwiaGYiLCJwb3BQcm92aWRlciIsImpmIiwiaHlkcmF0aW9uIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSIsInByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlIiwicG9wSHlkcmF0aW9uU3RhdGUiLCJjYW5IeWRyYXRlSW5zdGFuY2UiLCJjYW5IeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nIiwiZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQiLCJoeWRyYXRlSW5zdGFuY2UiLCJoeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2YiLCJjcmVhdGVUZXh0SW5zdGFuY2UiLCJhcHBlbmRJbml0aWFsQ2hpbGQiLCJmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbiIsInByZXBhcmVVcGRhdGUiLCJwZXJzaXN0ZW5jZSIsIm11dGF0aW9uIiwiY29tcGxldGVXb3JrIiwiaGFuZGxlciIsImFmIiwidGhyb3dFeGNlcHRpb24iLCJ1bndpbmRXb3JrIiwidW53aW5kSW50ZXJydXB0ZWRXb3JrIiwiYmYiLCJnZXRQdWJsaWNJbnN0YW5jZSIsImNvbW1pdE1vdW50IiwiY29tbWl0VXBkYXRlIiwicmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFRleHRVcGRhdGUiLCJhcHBlbmRDaGlsZFRvQ29udGFpbmVyIiwiaW5zZXJ0QmVmb3JlIiwiaW5zZXJ0SW5Db250YWluZXJCZWZvcmUiLCJyZW1vdmVDaGlsZEZyb21Db250YWluZXIiLCJjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXMiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImNvbW1pdFJlc2V0VGV4dENvbnRlbnQiLCJjb21taXRQbGFjZW1lbnQiLCJjb21taXREZWxldGlvbiIsImNvbW1pdFdvcmsiLCJjb21taXRMaWZlQ3ljbGVzIiwiY29tbWl0RXJyb3JMb2dnaW5nIiwiY29tcG9uZW50U3RhY2siLCJjb21taXRBdHRhY2hSZWYiLCJjb21taXREZXRhY2hSZWYiLCJkZiIsInNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayIsImNhbmNlbERlZmVycmVkQ2FsbGJhY2siLCJwcmVwYXJlRm9yQ29tbWl0IiwicmVzZXRBZnRlckNvbW1pdCIsIlJjIiwicmVjYWxjdWxhdGVDdXJyZW50VGltZSIsImNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIiLCJzY2hlZHVsZVdvcmsiLCJyZXF1ZXN0V29yayIsImZsdXNoUm9vdCIsImJhdGNoZWRVcGRhdGVzIiwidW5iYXRjaGVkVXBkYXRlcyIsImZsdXNoU3luYyIsImZsdXNoQ29udHJvbGxlZCIsImRlZmVycmVkVXBkYXRlcyIsInN5bmNVcGRhdGVzIiwiaW50ZXJhY3RpdmVVcGRhdGVzIiwiZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMiLCJjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uIiwibGVnYWN5Q29udGV4dCIsIm1mIiwiY3JlYXRlQ29udGFpbmVyIiwidXBkYXRlQ29udGFpbmVyIiwidXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZSIsImdldFB1YmxpY1Jvb3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFscyIsIkNkIiwiaW5qZWN0SW50b0RldlRvb2xzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJIZSIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwibmYiLCJwZiIsInJmIiwicGVyZm9ybWFuY2UiLCJzZiIsInRmIiwidWYiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsImRpZFRpbWVvdXQiLCJEZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIkVmIiwiR2YiLCJGZiIsIkhmIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJJZiIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJKZiIsIktmIiwiTGYiLCJNZiIsIk5mIiwibWF0aG1sIiwic3ZnIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJuYW1lc3BhY2VVUkkiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiU2YiLCJUZiIsImNvbHVtbnMiLCJVZiIsIlZmIiwic2V0UHJvcGVydHkiLCJXZiIsIm1lbnVpdGVtIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJjcmVhdGVFbGVtZW50TlMiLCJiZyIsImNnIiwib25jbGljayIsImRnIiwiZWciLCJmZyIsIm5nIiwib2ciLCJzZXRJbml0aWFsUHJvcGVydGllcyIsImRpZmZQcm9wZXJ0aWVzIiwidXBkYXRlUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRUZXh0Iiwid2FybkZvclVubWF0Y2hlZFRleHQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dCIsImZvcm0iLCJwZyIsInFnIiwicmciLCJYIiwiX2NhbGxiYWNrcyIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsInNnIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsInRnIiwiX2ludGVybmFsUm9vdCIsInVnIiwidmciLCJhdXRvRm9jdXMiLCJjb21taXQiLCJ1bm1vdW50IiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY3JlYXRlQmF0Y2giLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiaGlkZGVuIiwiZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZSIsImRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UiLCJDZyIsIkVnIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIkRnIiwiRmciLCJxZiIsIkdnIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJFdmVudFByb3BhZ2F0b3JzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RET01FdmVudExpc3RlbmVyIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiSGciLCJJZyIsImZvcmNlVXBkYXRlIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCI9IiwiOiIsImVzY2FwZSIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2RlZmF1bHRWYWx1ZSIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJmb3J3YXJkUmVmIiwiRnJhZ21lbnQiLCJTdHJpY3RNb2RlIiwidW5zdGFibGVfQXN5bmNNb2RlIiwiY3JlYXRlRmFjdG9yeSIsIl9BcHBSb3V0ZXIyIiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FB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QXFEMDZJLGNBQUEsU0FBQTc2SSxHQUEyQixJQUFBQyxFQUFBdW5ILEVBQUF0bkcsS0FBQSxLQUFBbGdCLEdBQThCLE9BQVRDLEVBQUEyRixLQUFBNUYsRUFBU0MsR0FBUzRnQyxlQUFBOG5GLEVBQUFoOEUsUUFBQSxTQUFBMGhGLG9EQUF1RkMsa0JBQUFnWixFQUFBcjFHLE9BQUF6ekIsSUFBOEJvNEksRUFBQTkzSSxPQUFBMmxILFFBQWtCOStFLFFBQUFxMEYsSUFDOWVvSyxFQUFBd1MsR0FBQTVjLEdBQUE0YyxFQUFVejRJLEVBQUFELFFBQUFrbUksRUFBQSxRQUFBQSxFQUFBLFFBQUFBLGdDQ3JCVnBtSSxFQUFBLEtBQ0EsUUFBQUEsRUFBQSxRQUNBQSxFQUFBLFFBRUFBLEVBQUEseURBR0FnNkQsVUFBU3RqQyxPQUFPZ1IsRUFBQUMsUUFBQWpRLGNBQUNvbEgsRUFBQW4xRyxRQUFELE1BQWNoSSxTQUFTbzlHLGVBQWUiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyNjQpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCdcblxuaWYgKCFtb2R1bGUuaG90IHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvcmVhY3QtaG90LWxvYWRlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvcmVhY3QtaG90LWxvYWRlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiLyoqXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiAgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiAgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICBnbG9iYWwuSW1tdXRhYmxlID0gZmFjdG9yeSgpO1xufSh0aGlzLCBmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0Jzt2YXIgU0xJQ0UkMCA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICBmdW5jdGlvbiBjcmVhdGVDbGFzcyhjdG9yLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIHtcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gICAgfVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIEl0ZXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNJdGVyYWJsZSh2YWx1ZSkgPyB2YWx1ZSA6IFNlcSh2YWx1ZSk7XG4gICAgfVxuXG5cbiAgY3JlYXRlQ2xhc3MoS2V5ZWRJdGVyYWJsZSwgSXRlcmFibGUpO1xuICAgIGZ1bmN0aW9uIEtleWVkSXRlcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0tleWVkKHZhbHVlKSA/IHZhbHVlIDogS2V5ZWRTZXEodmFsdWUpO1xuICAgIH1cblxuXG4gIGNyZWF0ZUNsYXNzKEluZGV4ZWRJdGVyYWJsZSwgSXRlcmFibGUpO1xuICAgIGZ1bmN0aW9uIEluZGV4ZWRJdGVyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW5kZXhlZCh2YWx1ZSkgPyB2YWx1ZSA6IEluZGV4ZWRTZXEodmFsdWUpO1xuICAgIH1cblxuXG4gIGNyZWF0ZUNsYXNzKFNldEl0ZXJhYmxlLCBJdGVyYWJsZSk7XG4gICAgZnVuY3Rpb24gU2V0SXRlcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0l0ZXJhYmxlKHZhbHVlKSAmJiAhaXNBc3NvY2lhdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IFNldFNlcSh2YWx1ZSk7XG4gICAgfVxuXG5cblxuICBmdW5jdGlvbiBpc0l0ZXJhYmxlKG1heWJlSXRlcmFibGUpIHtcbiAgICByZXR1cm4gISEobWF5YmVJdGVyYWJsZSAmJiBtYXliZUl0ZXJhYmxlW0lTX0lURVJBQkxFX1NFTlRJTkVMXSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0tleWVkKG1heWJlS2V5ZWQpIHtcbiAgICByZXR1cm4gISEobWF5YmVLZXllZCAmJiBtYXliZUtleWVkW0lTX0tFWUVEX1NFTlRJTkVMXSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0luZGV4ZWQobWF5YmVJbmRleGVkKSB7XG4gICAgcmV0dXJuICEhKG1heWJlSW5kZXhlZCAmJiBtYXliZUluZGV4ZWRbSVNfSU5ERVhFRF9TRU5USU5FTF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBc3NvY2lhdGl2ZShtYXliZUFzc29jaWF0aXZlKSB7XG4gICAgcmV0dXJuIGlzS2V5ZWQobWF5YmVBc3NvY2lhdGl2ZSkgfHwgaXNJbmRleGVkKG1heWJlQXNzb2NpYXRpdmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNPcmRlcmVkKG1heWJlT3JkZXJlZCkge1xuICAgIHJldHVybiAhIShtYXliZU9yZGVyZWQgJiYgbWF5YmVPcmRlcmVkW0lTX09SREVSRURfU0VOVElORUxdKTtcbiAgfVxuXG4gIEl0ZXJhYmxlLmlzSXRlcmFibGUgPSBpc0l0ZXJhYmxlO1xuICBJdGVyYWJsZS5pc0tleWVkID0gaXNLZXllZDtcbiAgSXRlcmFibGUuaXNJbmRleGVkID0gaXNJbmRleGVkO1xuICBJdGVyYWJsZS5pc0Fzc29jaWF0aXZlID0gaXNBc3NvY2lhdGl2ZTtcbiAgSXRlcmFibGUuaXNPcmRlcmVkID0gaXNPcmRlcmVkO1xuXG4gIEl0ZXJhYmxlLktleWVkID0gS2V5ZWRJdGVyYWJsZTtcbiAgSXRlcmFibGUuSW5kZXhlZCA9IEluZGV4ZWRJdGVyYWJsZTtcbiAgSXRlcmFibGUuU2V0ID0gU2V0SXRlcmFibGU7XG5cblxuICB2YXIgSVNfSVRFUkFCTEVfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9JVEVSQUJMRV9fQEAnO1xuICB2YXIgSVNfS0VZRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9LRVlFRF9fQEAnO1xuICB2YXIgSVNfSU5ERVhFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0lOREVYRURfX0BAJztcbiAgdmFyIElTX09SREVSRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9PUkRFUkVEX19AQCc7XG5cbiAgLy8gVXNlZCBmb3Igc2V0dGluZyBwcm90b3R5cGUgbWV0aG9kcyB0aGF0IElFOCBjaG9rZXMgb24uXG4gIHZhciBERUxFVEUgPSAnZGVsZXRlJztcblxuICAvLyBDb25zdGFudHMgZGVzY3JpYmluZyB0aGUgc2l6ZSBvZiB0cmllIG5vZGVzLlxuICB2YXIgU0hJRlQgPSA1OyAvLyBSZXN1bHRlZCBpbiBiZXN0IHBlcmZvcm1hbmNlIGFmdGVyIF9fX19fXz9cbiAgdmFyIFNJWkUgPSAxIDw8IFNISUZUO1xuICB2YXIgTUFTSyA9IFNJWkUgLSAxO1xuXG4gIC8vIEEgY29uc2lzdGVudCBzaGFyZWQgdmFsdWUgcmVwcmVzZW50aW5nIFwibm90IHNldFwiIHdoaWNoIGVxdWFscyBub3RoaW5nIG90aGVyXG4gIC8vIHRoYW4gaXRzZWxmLCBhbmQgbm90aGluZyB0aGF0IGNvdWxkIGJlIHByb3ZpZGVkIGV4dGVybmFsbHkuXG4gIHZhciBOT1RfU0VUID0ge307XG5cbiAgLy8gQm9vbGVhbiByZWZlcmVuY2VzLCBSb3VnaCBlcXVpdmFsZW50IG9mIGBib29sICZgLlxuICB2YXIgQ0hBTkdFX0xFTkdUSCA9IHsgdmFsdWU6IGZhbHNlIH07XG4gIHZhciBESURfQUxURVIgPSB7IHZhbHVlOiBmYWxzZSB9O1xuXG4gIGZ1bmN0aW9uIE1ha2VSZWYocmVmKSB7XG4gICAgcmVmLnZhbHVlID0gZmFsc2U7XG4gICAgcmV0dXJuIHJlZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFNldFJlZihyZWYpIHtcbiAgICByZWYgJiYgKHJlZi52YWx1ZSA9IHRydWUpO1xuICB9XG5cbiAgLy8gQSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgdmFsdWUgcmVwcmVzZW50aW5nIGFuIFwib3duZXJcIiBmb3IgdHJhbnNpZW50IHdyaXRlc1xuICAvLyB0byB0cmllcy4gVGhlIHJldHVybiB2YWx1ZSB3aWxsIG9ubHkgZXZlciBlcXVhbCBpdHNlbGYsIGFuZCB3aWxsIG5vdCBlcXVhbFxuICAvLyB0aGUgcmV0dXJuIG9mIGFueSBzdWJzZXF1ZW50IGNhbGwgb2YgdGhpcyBmdW5jdGlvbi5cbiAgZnVuY3Rpb24gT3duZXJJRCgpIHt9XG5cbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vY29weS1hcnJheS1pbmxpbmVcbiAgZnVuY3Rpb24gYXJyQ29weShhcnIsIG9mZnNldCkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1heCgwLCBhcnIubGVuZ3RoIC0gb2Zmc2V0KTtcbiAgICB2YXIgbmV3QXJyID0gbmV3IEFycmF5KGxlbik7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGxlbjsgaWkrKykge1xuICAgICAgbmV3QXJyW2lpXSA9IGFycltpaSArIG9mZnNldF07XG4gICAgfVxuICAgIHJldHVybiBuZXdBcnI7XG4gIH1cblxuICBmdW5jdGlvbiBlbnN1cmVTaXplKGl0ZXIpIHtcbiAgICBpZiAoaXRlci5zaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGl0ZXIuc2l6ZSA9IGl0ZXIuX19pdGVyYXRlKHJldHVyblRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlci5zaXplO1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcEluZGV4KGl0ZXIsIGluZGV4KSB7XG4gICAgLy8gVGhpcyBpbXBsZW1lbnRzIFwiaXMgYXJyYXkgaW5kZXhcIiB3aGljaCB0aGUgRUNNQVN0cmluZyBzcGVjIGRlZmluZXMgYXM6XG4gICAgLy9cbiAgICAvLyAgICAgQSBTdHJpbmcgcHJvcGVydHkgbmFtZSBQIGlzIGFuIGFycmF5IGluZGV4IGlmIGFuZCBvbmx5IGlmXG4gICAgLy8gICAgIFRvU3RyaW5nKFRvVWludDMyKFApKSBpcyBlcXVhbCB0byBQIGFuZCBUb1VpbnQzMihQKSBpcyBub3QgZXF1YWxcbiAgICAvLyAgICAgdG8gMl4zMuKIkjEuXG4gICAgLy9cbiAgICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtYXJyYXktZXhvdGljLW9iamVjdHNcbiAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgdmFyIHVpbnQzMkluZGV4ID0gaW5kZXggPj4+IDA7IC8vIE4gPj4+IDAgaXMgc2hvcnRoYW5kIGZvciBUb1VpbnQzMlxuICAgICAgaWYgKCcnICsgdWludDMySW5kZXggIT09IGluZGV4IHx8IHVpbnQzMkluZGV4ID09PSA0Mjk0OTY3Mjk1KSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgICB9XG4gICAgICBpbmRleCA9IHVpbnQzMkluZGV4O1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXggPCAwID8gZW5zdXJlU2l6ZShpdGVyKSArIGluZGV4IDogaW5kZXg7XG4gIH1cblxuICBmdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gd2hvbGVTbGljZShiZWdpbiwgZW5kLCBzaXplKSB7XG4gICAgcmV0dXJuIChiZWdpbiA9PT0gMCB8fCAoc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGJlZ2luIDw9IC1zaXplKSkgJiZcbiAgICAgIChlbmQgPT09IHVuZGVmaW5lZCB8fCAoc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA+PSBzaXplKSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlQmVnaW4oYmVnaW4sIHNpemUpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUluZGV4KGJlZ2luLCBzaXplLCAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVFbmQoZW5kLCBzaXplKSB7XG4gICAgcmV0dXJuIHJlc29sdmVJbmRleChlbmQsIHNpemUsIHNpemUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUluZGV4KGluZGV4LCBzaXplLCBkZWZhdWx0SW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXggPT09IHVuZGVmaW5lZCA/XG4gICAgICBkZWZhdWx0SW5kZXggOlxuICAgICAgaW5kZXggPCAwID9cbiAgICAgICAgTWF0aC5tYXgoMCwgc2l6ZSArIGluZGV4KSA6XG4gICAgICAgIHNpemUgPT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgaW5kZXggOlxuICAgICAgICAgIE1hdGgubWluKHNpemUsIGluZGV4KTtcbiAgfVxuXG4gIC8qIGdsb2JhbCBTeW1ib2wgKi9cblxuICB2YXIgSVRFUkFURV9LRVlTID0gMDtcbiAgdmFyIElURVJBVEVfVkFMVUVTID0gMTtcbiAgdmFyIElURVJBVEVfRU5UUklFUyA9IDI7XG5cbiAgdmFyIFJFQUxfSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gIHZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJztcblxuICB2YXIgSVRFUkFUT1JfU1lNQk9MID0gUkVBTF9JVEVSQVRPUl9TWU1CT0wgfHwgRkFVWF9JVEVSQVRPUl9TWU1CT0w7XG5cblxuICBmdW5jdGlvbiBJdGVyYXRvcihuZXh0KSB7XG4gICAgICB0aGlzLm5leHQgPSBuZXh0O1xuICAgIH1cblxuICAgIEl0ZXJhdG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICdbSXRlcmF0b3JdJztcbiAgICB9O1xuXG5cbiAgSXRlcmF0b3IuS0VZUyA9IElURVJBVEVfS0VZUztcbiAgSXRlcmF0b3IuVkFMVUVTID0gSVRFUkFURV9WQUxVRVM7XG4gIEl0ZXJhdG9yLkVOVFJJRVMgPSBJVEVSQVRFX0VOVFJJRVM7XG5cbiAgSXRlcmF0b3IucHJvdG90eXBlLmluc3BlY3QgPVxuICBJdGVyYXRvci5wcm90b3R5cGUudG9Tb3VyY2UgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnRvU3RyaW5nKCk7IH1cbiAgSXRlcmF0b3IucHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICBmdW5jdGlvbiBpdGVyYXRvclZhbHVlKHR5cGUsIGssIHYsIGl0ZXJhdG9yUmVzdWx0KSB7XG4gICAgdmFyIHZhbHVlID0gdHlwZSA9PT0gMCA/IGsgOiB0eXBlID09PSAxID8gdiA6IFtrLCB2XTtcbiAgICBpdGVyYXRvclJlc3VsdCA/IChpdGVyYXRvclJlc3VsdC52YWx1ZSA9IHZhbHVlKSA6IChpdGVyYXRvclJlc3VsdCA9IHtcbiAgICAgIHZhbHVlOiB2YWx1ZSwgZG9uZTogZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gaXRlcmF0b3JSZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBpdGVyYXRvckRvbmUoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzSXRlcmF0b3IobWF5YmVJdGVyYWJsZSkge1xuICAgIHJldHVybiAhIWdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0l0ZXJhdG9yKG1heWJlSXRlcmF0b3IpIHtcbiAgICByZXR1cm4gbWF5YmVJdGVyYXRvciAmJiB0eXBlb2YgbWF5YmVJdGVyYXRvci5uZXh0ID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SXRlcmF0b3IoaXRlcmFibGUpIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4oaXRlcmFibGUpO1xuICAgIHJldHVybiBpdGVyYXRvckZuICYmIGl0ZXJhdG9yRm4uY2FsbChpdGVyYWJsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJdGVyYXRvckZuKGl0ZXJhYmxlKSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBpdGVyYWJsZSAmJiAoXG4gICAgICAoUkVBTF9JVEVSQVRPUl9TWU1CT0wgJiYgaXRlcmFibGVbUkVBTF9JVEVSQVRPUl9TWU1CT0xdKSB8fFxuICAgICAgaXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdXG4gICAgKTtcbiAgICBpZiAodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvckZuO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU2VxLCBJdGVyYWJsZSk7XG4gICAgZnVuY3Rpb24gU2VxKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5U2VxdWVuY2UoKSA6XG4gICAgICAgIGlzSXRlcmFibGUodmFsdWUpID8gdmFsdWUudG9TZXEoKSA6IHNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgU2VxLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIFNlcShhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBTZXEucHJvdG90eXBlLnRvU2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgU2VxLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU2VxIHsnLCAnfScpO1xuICAgIH07XG5cbiAgICBTZXEucHJvdG90eXBlLmNhY2hlUmVzdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuX2NhY2hlICYmIHRoaXMuX19pdGVyYXRlVW5jYWNoZWQpIHtcbiAgICAgICAgdGhpcy5fY2FjaGUgPSB0aGlzLmVudHJ5U2VxKCkudG9BcnJheSgpO1xuICAgICAgICB0aGlzLnNpemUgPSB0aGlzLl9jYWNoZS5sZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLy8gYWJzdHJhY3QgX19pdGVyYXRlVW5jYWNoZWQoZm4sIHJldmVyc2UpXG5cbiAgICBTZXEucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gc2VxSXRlcmF0ZSh0aGlzLCBmbiwgcmV2ZXJzZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIC8vIGFic3RyYWN0IF9faXRlcmF0b3JVbmNhY2hlZCh0eXBlLCByZXZlcnNlKVxuXG4gICAgU2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHNlcUl0ZXJhdG9yKHRoaXMsIHR5cGUsIHJldmVyc2UsIHRydWUpO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKEtleWVkU2VxLCBTZXEpO1xuICAgIGZ1bmN0aW9uIEtleWVkU2VxKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/XG4gICAgICAgIGVtcHR5U2VxdWVuY2UoKS50b0tleWVkU2VxKCkgOlxuICAgICAgICBpc0l0ZXJhYmxlKHZhbHVlKSA/XG4gICAgICAgICAgKGlzS2V5ZWQodmFsdWUpID8gdmFsdWUudG9TZXEoKSA6IHZhbHVlLmZyb21FbnRyeVNlcSgpKSA6XG4gICAgICAgICAga2V5ZWRTZXFGcm9tVmFsdWUodmFsdWUpO1xuICAgIH1cblxuICAgIEtleWVkU2VxLnByb3RvdHlwZS50b0tleWVkU2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5cblxuICBjcmVhdGVDbGFzcyhJbmRleGVkU2VxLCBTZXEpO1xuICAgIGZ1bmN0aW9uIEluZGV4ZWRTZXEodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTZXF1ZW5jZSgpIDpcbiAgICAgICAgIWlzSXRlcmFibGUodmFsdWUpID8gaW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSkgOlxuICAgICAgICBpc0tleWVkKHZhbHVlKSA/IHZhbHVlLmVudHJ5U2VxKCkgOiB2YWx1ZS50b0luZGV4ZWRTZXEoKTtcbiAgICB9XG5cbiAgICBJbmRleGVkU2VxLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIEluZGV4ZWRTZXEoYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgSW5kZXhlZFNlcS5wcm90b3R5cGUudG9JbmRleGVkU2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgSW5kZXhlZFNlcS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1NlcSBbJywgJ10nKTtcbiAgICB9O1xuXG4gICAgSW5kZXhlZFNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBzZXFJdGVyYXRlKHRoaXMsIGZuLCByZXZlcnNlLCBmYWxzZSk7XG4gICAgfTtcblxuICAgIEluZGV4ZWRTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gc2VxSXRlcmF0b3IodGhpcywgdHlwZSwgcmV2ZXJzZSwgZmFsc2UpO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKFNldFNlcSwgU2VxKTtcbiAgICBmdW5jdGlvbiBTZXRTZXEodmFsdWUpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eVNlcXVlbmNlKCkgOlxuICAgICAgICAhaXNJdGVyYWJsZSh2YWx1ZSkgPyBpbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSA6XG4gICAgICAgIGlzS2V5ZWQodmFsdWUpID8gdmFsdWUuZW50cnlTZXEoKSA6IHZhbHVlXG4gICAgICApLnRvU2V0U2VxKCk7XG4gICAgfVxuXG4gICAgU2V0U2VxLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIFNldFNlcShhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBTZXRTZXEucHJvdG90eXBlLnRvU2V0U2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5cblxuICBTZXEuaXNTZXEgPSBpc1NlcTtcbiAgU2VxLktleWVkID0gS2V5ZWRTZXE7XG4gIFNlcS5TZXQgPSBTZXRTZXE7XG4gIFNlcS5JbmRleGVkID0gSW5kZXhlZFNlcTtcblxuICB2YXIgSVNfU0VRX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfU0VRX19AQCc7XG5cbiAgU2VxLnByb3RvdHlwZVtJU19TRVFfU0VOVElORUxdID0gdHJ1ZTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoQXJyYXlTZXEsIEluZGV4ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIEFycmF5U2VxKGFycmF5KSB7XG4gICAgICB0aGlzLl9hcnJheSA9IGFycmF5O1xuICAgICAgdGhpcy5zaXplID0gYXJyYXkubGVuZ3RoO1xuICAgIH1cblxuICAgIEFycmF5U2VxLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyhpbmRleCkgPyB0aGlzLl9hcnJheVt3cmFwSW5kZXgodGhpcywgaW5kZXgpXSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBBcnJheVNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX2FycmF5O1xuICAgICAgdmFyIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgICAgaWYgKGZuKGFycmF5W3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBBcnJheVNlcS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX2FycmF5O1xuICAgICAgdmFyIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgXG4gICAgICAgIHtyZXR1cm4gaWkgPiBtYXhJbmRleCA/XG4gICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaWksIGFycmF5W3JldmVyc2UgPyBtYXhJbmRleCAtIGlpKysgOiBpaSsrXSl9XG4gICAgICApO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKE9iamVjdFNlcSwgS2V5ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIE9iamVjdFNlcShvYmplY3QpIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgICAgIHRoaXMuX29iamVjdCA9IG9iamVjdDtcbiAgICAgIHRoaXMuX2tleXMgPSBrZXlzO1xuICAgICAgdGhpcy5zaXplID0ga2V5cy5sZW5ndGg7XG4gICAgfVxuXG4gICAgT2JqZWN0U2VxLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICBpZiAobm90U2V0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5oYXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fb2JqZWN0W2tleV07XG4gICAgfTtcblxuICAgIE9iamVjdFNlcS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fb2JqZWN0Lmhhc093blByb3BlcnR5KGtleSk7XG4gICAgfTtcblxuICAgIE9iamVjdFNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBvYmplY3QgPSB0aGlzLl9vYmplY3Q7XG4gICAgICB2YXIga2V5cyA9IHRoaXMuX2tleXM7XG4gICAgICB2YXIgbWF4SW5kZXggPSBrZXlzLmxlbmd0aCAtIDE7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDw9IG1heEluZGV4OyBpaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuICAgICAgICBpZiAoZm4ob2JqZWN0W2tleV0sIGtleSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBPYmplY3RTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gdGhpcy5fb2JqZWN0O1xuICAgICAgdmFyIGtleXMgPSB0aGlzLl9rZXlzO1xuICAgICAgdmFyIG1heEluZGV4ID0ga2V5cy5sZW5ndGggLSAxO1xuICAgICAgdmFyIGlpID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tyZXZlcnNlID8gbWF4SW5kZXggLSBpaSA6IGlpXTtcbiAgICAgICAgcmV0dXJuIGlpKysgPiBtYXhJbmRleCA/XG4gICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwga2V5LCBvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gIE9iamVjdFNlcS5wcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuXG5cbiAgY3JlYXRlQ2xhc3MoSXRlcmFibGVTZXEsIEluZGV4ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIEl0ZXJhYmxlU2VxKGl0ZXJhYmxlKSB7XG4gICAgICB0aGlzLl9pdGVyYWJsZSA9IGl0ZXJhYmxlO1xuICAgICAgdGhpcy5zaXplID0gaXRlcmFibGUubGVuZ3RoIHx8IGl0ZXJhYmxlLnNpemU7XG4gICAgfVxuXG4gICAgSXRlcmFibGVTZXEucHJvdG90eXBlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYWJsZSA9IHRoaXMuX2l0ZXJhYmxlO1xuICAgICAgdmFyIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaWYgKGlzSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG4gICAgICAgIHZhciBzdGVwO1xuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgaWYgKGZuKHN0ZXAudmFsdWUsIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG5cbiAgICBJdGVyYWJsZVNlcS5wcm90b3R5cGUuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhYmxlID0gdGhpcy5faXRlcmFibGU7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihpdGVyYWJsZSk7XG4gICAgICBpZiAoIWlzSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoaXRlcmF0b3JEb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgc3RlcC52YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG5cblxuICBjcmVhdGVDbGFzcyhJdGVyYXRvclNlcSwgSW5kZXhlZFNlcSk7XG4gICAgZnVuY3Rpb24gSXRlcmF0b3JTZXEoaXRlcmF0b3IpIHtcbiAgICAgIHRoaXMuX2l0ZXJhdG9yID0gaXRlcmF0b3I7XG4gICAgICB0aGlzLl9pdGVyYXRvckNhY2hlID0gW107XG4gICAgfVxuXG4gICAgSXRlcmF0b3JTZXEucHJvdG90eXBlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXJhdG9yO1xuICAgICAgdmFyIGNhY2hlID0gdGhpcy5faXRlcmF0b3JDYWNoZTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHdoaWxlIChpdGVyYXRpb25zIDwgY2FjaGUubGVuZ3RoKSB7XG4gICAgICAgIGlmIChmbihjYWNoZVtpdGVyYXRpb25zXSwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHN0ZXA7XG4gICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIHZhciB2YWwgPSBzdGVwLnZhbHVlO1xuICAgICAgICBjYWNoZVtpdGVyYXRpb25zXSA9IHZhbDtcbiAgICAgICAgaWYgKGZuKHZhbCwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcblxuICAgIEl0ZXJhdG9yU2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyYXRvcjtcbiAgICAgIHZhciBjYWNoZSA9IHRoaXMuX2l0ZXJhdG9yQ2FjaGU7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnMgPj0gY2FjaGUubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhY2hlW2l0ZXJhdGlvbnNdID0gc3RlcC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zLCBjYWNoZVtpdGVyYXRpb25zKytdKTtcbiAgICAgIH0pO1xuICAgIH07XG5cblxuXG5cbiAgLy8gIyBwcmFnbWEgSGVscGVyIGZ1bmN0aW9uc1xuXG4gIGZ1bmN0aW9uIGlzU2VxKG1heWJlU2VxKSB7XG4gICAgcmV0dXJuICEhKG1heWJlU2VxICYmIG1heWJlU2VxW0lTX1NFUV9TRU5USU5FTF0pO1xuICB9XG5cbiAgdmFyIEVNUFRZX1NFUTtcblxuICBmdW5jdGlvbiBlbXB0eVNlcXVlbmNlKCkge1xuICAgIHJldHVybiBFTVBUWV9TRVEgfHwgKEVNUFRZX1NFUSA9IG5ldyBBcnJheVNlcShbXSkpO1xuICB9XG5cbiAgZnVuY3Rpb24ga2V5ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICB2YXIgc2VxID1cbiAgICAgIEFycmF5LmlzQXJyYXkodmFsdWUpID8gbmV3IEFycmF5U2VxKHZhbHVlKS5mcm9tRW50cnlTZXEoKSA6XG4gICAgICBpc0l0ZXJhdG9yKHZhbHVlKSA/IG5ldyBJdGVyYXRvclNlcSh2YWx1ZSkuZnJvbUVudHJ5U2VxKCkgOlxuICAgICAgaGFzSXRlcmF0b3IodmFsdWUpID8gbmV3IEl0ZXJhYmxlU2VxKHZhbHVlKS5mcm9tRW50cnlTZXEoKSA6XG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gbmV3IE9iamVjdFNlcSh2YWx1ZSkgOlxuICAgICAgdW5kZWZpbmVkO1xuICAgIGlmICghc2VxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgaXRlcmFibGUgb2JqZWN0IG9mIFtrLCB2XSBlbnRyaWVzLCAnK1xuICAgICAgICAnb3Iga2V5ZWQgb2JqZWN0OiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBpbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSB7XG4gICAgdmFyIHNlcSA9IG1heWJlSW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gICAgaWYgKCFzZXEpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdFeHBlY3RlZCBBcnJheSBvciBpdGVyYWJsZSBvYmplY3Qgb2YgdmFsdWVzOiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBzZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICB2YXIgc2VxID0gbWF5YmVJbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSB8fFxuICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgbmV3IE9iamVjdFNlcSh2YWx1ZSkpO1xuICAgIGlmICghc2VxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgaXRlcmFibGUgb2JqZWN0IG9mIHZhbHVlcywgb3Iga2V5ZWQgb2JqZWN0OiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBtYXliZUluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgaXNBcnJheUxpa2UodmFsdWUpID8gbmV3IEFycmF5U2VxKHZhbHVlKSA6XG4gICAgICBpc0l0ZXJhdG9yKHZhbHVlKSA/IG5ldyBJdGVyYXRvclNlcSh2YWx1ZSkgOlxuICAgICAgaGFzSXRlcmF0b3IodmFsdWUpID8gbmV3IEl0ZXJhYmxlU2VxKHZhbHVlKSA6XG4gICAgICB1bmRlZmluZWRcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VxSXRlcmF0ZShzZXEsIGZuLCByZXZlcnNlLCB1c2VLZXlzKSB7XG4gICAgdmFyIGNhY2hlID0gc2VxLl9jYWNoZTtcbiAgICBpZiAoY2FjaGUpIHtcbiAgICAgIHZhciBtYXhJbmRleCA9IGNhY2hlLmxlbmd0aCAtIDE7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDw9IG1heEluZGV4OyBpaSsrKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGNhY2hlW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuICAgICAgICBpZiAoZm4oZW50cnlbMV0sIHVzZUtleXMgPyBlbnRyeVswXSA6IGlpLCBzZXEpID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBpaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpaTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcS5fX2l0ZXJhdGVVbmNhY2hlZChmbiwgcmV2ZXJzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXFJdGVyYXRvcihzZXEsIHR5cGUsIHJldmVyc2UsIHVzZUtleXMpIHtcbiAgICB2YXIgY2FjaGUgPSBzZXEuX2NhY2hlO1xuICAgIGlmIChjYWNoZSkge1xuICAgICAgdmFyIG1heEluZGV4ID0gY2FjaGUubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gY2FjaGVbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG4gICAgICAgIHJldHVybiBpaSsrID4gbWF4SW5kZXggP1xuICAgICAgICAgIGl0ZXJhdG9yRG9uZSgpIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIHVzZUtleXMgPyBlbnRyeVswXSA6IGlpIC0gMSwgZW50cnlbMV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBzZXEuX19pdGVyYXRvclVuY2FjaGVkKHR5cGUsIHJldmVyc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJvbUpTKGpzb24sIGNvbnZlcnRlcikge1xuICAgIHJldHVybiBjb252ZXJ0ZXIgP1xuICAgICAgZnJvbUpTV2l0aChjb252ZXJ0ZXIsIGpzb24sICcnLCB7Jyc6IGpzb259KSA6XG4gICAgICBmcm9tSlNEZWZhdWx0KGpzb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJvbUpTV2l0aChjb252ZXJ0ZXIsIGpzb24sIGtleSwgcGFyZW50SlNPTikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGpzb24pKSB7XG4gICAgICByZXR1cm4gY29udmVydGVyLmNhbGwocGFyZW50SlNPTiwga2V5LCBJbmRleGVkU2VxKGpzb24pLm1hcChmdW5jdGlvbih2LCBrKSAge3JldHVybiBmcm9tSlNXaXRoKGNvbnZlcnRlciwgdiwgaywganNvbil9KSk7XG4gICAgfVxuICAgIGlmIChpc1BsYWluT2JqKGpzb24pKSB7XG4gICAgICByZXR1cm4gY29udmVydGVyLmNhbGwocGFyZW50SlNPTiwga2V5LCBLZXllZFNlcShqc29uKS5tYXAoZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gZnJvbUpTV2l0aChjb252ZXJ0ZXIsIHYsIGssIGpzb24pfSkpO1xuICAgIH1cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyb21KU0RlZmF1bHQoanNvbikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGpzb24pKSB7XG4gICAgICByZXR1cm4gSW5kZXhlZFNlcShqc29uKS5tYXAoZnJvbUpTRGVmYXVsdCkudG9MaXN0KCk7XG4gICAgfVxuICAgIGlmIChpc1BsYWluT2JqKGpzb24pKSB7XG4gICAgICByZXR1cm4gS2V5ZWRTZXEoanNvbikubWFwKGZyb21KU0RlZmF1bHQpLnRvTWFwKCk7XG4gICAgfVxuICAgIHJldHVybiBqc29uO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNQbGFpbk9iaih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiAodmFsdWUuY29uc3RydWN0b3IgPT09IE9iamVjdCB8fCB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBleHRlbnNpb24gb2YgdGhlIFwic2FtZS12YWx1ZVwiIGFsZ29yaXRobSBhcyBbZGVzY3JpYmVkIGZvciB1c2UgYnkgRVM2IE1hcFxuICAgKiBhbmQgU2V0XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXAjS2V5X2VxdWFsaXR5KVxuICAgKlxuICAgKiBOYU4gaXMgY29uc2lkZXJlZCB0aGUgc2FtZSBhcyBOYU4sIGhvd2V2ZXIgLTAgYW5kIDAgYXJlIGNvbnNpZGVyZWQgdGhlIHNhbWVcbiAgICogdmFsdWUsIHdoaWNoIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBhbGdvcml0aG0gZGVzY3JpYmVkIGJ5XG4gICAqIFtgT2JqZWN0LmlzYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzKS5cbiAgICpcbiAgICogVGhpcyBpcyBleHRlbmRlZCBmdXJ0aGVyIHRvIGFsbG93IE9iamVjdHMgdG8gZGVzY3JpYmUgdGhlIHZhbHVlcyB0aGV5XG4gICAqIHJlcHJlc2VudCwgYnkgd2F5IG9mIGB2YWx1ZU9mYCBvciBgZXF1YWxzYCAoYW5kIGBoYXNoQ29kZWApLlxuICAgKlxuICAgKiBOb3RlOiBiZWNhdXNlIG9mIHRoaXMgZXh0ZW5zaW9uLCB0aGUga2V5IGVxdWFsaXR5IG9mIEltbXV0YWJsZS5NYXAgYW5kIHRoZVxuICAgKiB2YWx1ZSBlcXVhbGl0eSBvZiBJbW11dGFibGUuU2V0IHdpbGwgZGlmZmVyIGZyb20gRVM2IE1hcCBhbmQgU2V0LlxuICAgKlxuICAgKiAjIyMgRGVmaW5pbmcgY3VzdG9tIHZhbHVlc1xuICAgKlxuICAgKiBUaGUgZWFzaWVzdCB3YXkgdG8gZGVzY3JpYmUgdGhlIHZhbHVlIGFuIG9iamVjdCByZXByZXNlbnRzIGlzIGJ5IGltcGxlbWVudGluZ1xuICAgKiBgdmFsdWVPZmAuIEZvciBleGFtcGxlLCBgRGF0ZWAgcmVwcmVzZW50cyBhIHZhbHVlIGJ5IHJldHVybmluZyBhIHVuaXhcbiAgICogdGltZXN0YW1wIGZvciBgdmFsdWVPZmA6XG4gICAqXG4gICAqICAgICB2YXIgZGF0ZTEgPSBuZXcgRGF0ZSgxMjM0NTY3ODkwMDAwKTsgLy8gRnJpIEZlYiAxMyAyMDA5IC4uLlxuICAgKiAgICAgdmFyIGRhdGUyID0gbmV3IERhdGUoMTIzNDU2Nzg5MDAwMCk7XG4gICAqICAgICBkYXRlMS52YWx1ZU9mKCk7IC8vIDEyMzQ1Njc4OTAwMDBcbiAgICogICAgIGFzc2VydCggZGF0ZTEgIT09IGRhdGUyICk7XG4gICAqICAgICBhc3NlcnQoIEltbXV0YWJsZS5pcyggZGF0ZTEsIGRhdGUyICkgKTtcbiAgICpcbiAgICogTm90ZTogb3ZlcnJpZGluZyBgdmFsdWVPZmAgbWF5IGhhdmUgb3RoZXIgaW1wbGljYXRpb25zIGlmIHlvdSB1c2UgdGhpcyBvYmplY3RcbiAgICogd2hlcmUgSmF2YVNjcmlwdCBleHBlY3RzIGEgcHJpbWl0aXZlLCBzdWNoIGFzIGltcGxpY2l0IHN0cmluZyBjb2VyY2lvbi5cbiAgICpcbiAgICogRm9yIG1vcmUgY29tcGxleCB0eXBlcywgZXNwZWNpYWxseSBjb2xsZWN0aW9ucywgaW1wbGVtZW50aW5nIGB2YWx1ZU9mYCBtYXlcbiAgICogbm90IGJlIHBlcmZvcm1hbnQuIEFuIGFsdGVybmF0aXZlIGlzIHRvIGltcGxlbWVudCBgZXF1YWxzYCBhbmQgYGhhc2hDb2RlYC5cbiAgICpcbiAgICogYGVxdWFsc2AgdGFrZXMgYW5vdGhlciBvYmplY3QsIHByZXN1bWFibHkgb2Ygc2ltaWxhciB0eXBlLCBhbmQgcmV0dXJucyB0cnVlXG4gICAqIGlmIHRoZSBpdCBpcyBlcXVhbC4gRXF1YWxpdHkgaXMgc3ltbWV0cmljYWwsIHNvIHRoZSBzYW1lIHJlc3VsdCBzaG91bGQgYmVcbiAgICogcmV0dXJuZWQgaWYgdGhpcyBhbmQgdGhlIGFyZ3VtZW50IGFyZSBmbGlwcGVkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0KCBhLmVxdWFscyhiKSA9PT0gYi5lcXVhbHMoYSkgKTtcbiAgICpcbiAgICogYGhhc2hDb2RlYCByZXR1cm5zIGEgMzJiaXQgaW50ZWdlciBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBvYmplY3Qgd2hpY2ggd2lsbFxuICAgKiBiZSB1c2VkIHRvIGRldGVybWluZSBob3cgdG8gc3RvcmUgdGhlIHZhbHVlIG9iamVjdCBpbiBhIE1hcCBvciBTZXQuIFlvdSBtdXN0XG4gICAqIHByb3ZpZGUgYm90aCBvciBuZWl0aGVyIG1ldGhvZHMsIG9uZSBtdXN0IG5vdCBleGlzdCB3aXRob3V0IHRoZSBvdGhlci5cbiAgICpcbiAgICogQWxzbywgYW4gaW1wb3J0YW50IHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZXNlIG1ldGhvZHMgbXVzdCBiZSB1cGhlbGQ6IGlmIHR3b1xuICAgKiB2YWx1ZXMgYXJlIGVxdWFsLCB0aGV5ICptdXN0KiByZXR1cm4gdGhlIHNhbWUgaGFzaENvZGUuIElmIHRoZSB2YWx1ZXMgYXJlIG5vdFxuICAgKiBlcXVhbCwgdGhleSBtaWdodCBoYXZlIHRoZSBzYW1lIGhhc2hDb2RlOyB0aGlzIGlzIGNhbGxlZCBhIGhhc2ggY29sbGlzaW9uLFxuICAgKiBhbmQgd2hpbGUgdW5kZXNpcmFibGUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIGl0IGlzIGFjY2VwdGFibGUuXG4gICAqXG4gICAqICAgICBpZiAoYS5lcXVhbHMoYikpIHtcbiAgICogICAgICAgYXNzZXJ0KCBhLmhhc2hDb2RlKCkgPT09IGIuaGFzaENvZGUoKSApO1xuICAgKiAgICAgfVxuICAgKlxuICAgKiBBbGwgSW1tdXRhYmxlIGNvbGxlY3Rpb25zIGltcGxlbWVudCBgZXF1YWxzYCBhbmQgYGhhc2hDb2RlYC5cbiAgICpcbiAgICovXG4gIGZ1bmN0aW9uIGlzKHZhbHVlQSwgdmFsdWVCKSB7XG4gICAgaWYgKHZhbHVlQSA9PT0gdmFsdWVCIHx8ICh2YWx1ZUEgIT09IHZhbHVlQSAmJiB2YWx1ZUIgIT09IHZhbHVlQikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXZhbHVlQSB8fCAhdmFsdWVCKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWVBLnZhbHVlT2YgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgdHlwZW9mIHZhbHVlQi52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZUEgPSB2YWx1ZUEudmFsdWVPZigpO1xuICAgICAgdmFsdWVCID0gdmFsdWVCLnZhbHVlT2YoKTtcbiAgICAgIGlmICh2YWx1ZUEgPT09IHZhbHVlQiB8fCAodmFsdWVBICE9PSB2YWx1ZUEgJiYgdmFsdWVCICE9PSB2YWx1ZUIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCF2YWx1ZUEgfHwgIXZhbHVlQikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWVBLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICB0eXBlb2YgdmFsdWVCLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICB2YWx1ZUEuZXF1YWxzKHZhbHVlQikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAhaXNJdGVyYWJsZShiKSB8fFxuICAgICAgYS5zaXplICE9PSB1bmRlZmluZWQgJiYgYi5zaXplICE9PSB1bmRlZmluZWQgJiYgYS5zaXplICE9PSBiLnNpemUgfHxcbiAgICAgIGEuX19oYXNoICE9PSB1bmRlZmluZWQgJiYgYi5fX2hhc2ggIT09IHVuZGVmaW5lZCAmJiBhLl9faGFzaCAhPT0gYi5fX2hhc2ggfHxcbiAgICAgIGlzS2V5ZWQoYSkgIT09IGlzS2V5ZWQoYikgfHxcbiAgICAgIGlzSW5kZXhlZChhKSAhPT0gaXNJbmRleGVkKGIpIHx8XG4gICAgICBpc09yZGVyZWQoYSkgIT09IGlzT3JkZXJlZChiKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChhLnNpemUgPT09IDAgJiYgYi5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbm90QXNzb2NpYXRpdmUgPSAhaXNBc3NvY2lhdGl2ZShhKTtcblxuICAgIGlmIChpc09yZGVyZWQoYSkpIHtcbiAgICAgIHZhciBlbnRyaWVzID0gYS5lbnRyaWVzKCk7XG4gICAgICByZXR1cm4gYi5ldmVyeShmdW5jdGlvbih2LCBrKSAge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzLm5leHQoKS52YWx1ZTtcbiAgICAgICAgcmV0dXJuIGVudHJ5ICYmIGlzKGVudHJ5WzFdLCB2KSAmJiAobm90QXNzb2NpYXRpdmUgfHwgaXMoZW50cnlbMF0sIGspKTtcbiAgICAgIH0pICYmIGVudHJpZXMubmV4dCgpLmRvbmU7XG4gICAgfVxuXG4gICAgdmFyIGZsaXBwZWQgPSBmYWxzZTtcblxuICAgIGlmIChhLnNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGIuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYS5jYWNoZVJlc3VsdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGEuY2FjaGVSZXN1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmxpcHBlZCA9IHRydWU7XG4gICAgICAgIHZhciBfID0gYTtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGIgPSBfO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhbGxFcXVhbCA9IHRydWU7XG4gICAgdmFyIGJTaXplID0gYi5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcbiAgICAgIGlmIChub3RBc3NvY2lhdGl2ZSA/ICFhLmhhcyh2KSA6XG4gICAgICAgICAgZmxpcHBlZCA/ICFpcyh2LCBhLmdldChrLCBOT1RfU0VUKSkgOiAhaXMoYS5nZXQoaywgTk9UX1NFVCksIHYpKSB7XG4gICAgICAgIGFsbEVxdWFsID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhbGxFcXVhbCAmJiBhLnNpemUgPT09IGJTaXplO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoUmVwZWF0LCBJbmRleGVkU2VxKTtcblxuICAgIGZ1bmN0aW9uIFJlcGVhdCh2YWx1ZSwgdGltZXMpIHtcbiAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXBlYXQpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVwZWF0KHZhbHVlLCB0aW1lcyk7XG4gICAgICB9XG4gICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy5zaXplID0gdGltZXMgPT09IHVuZGVmaW5lZCA/IEluZmluaXR5IDogTWF0aC5tYXgoMCwgdGltZXMpO1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICBpZiAoRU1QVFlfUkVQRUFUKSB7XG4gICAgICAgICAgcmV0dXJuIEVNUFRZX1JFUEVBVDtcbiAgICAgICAgfVxuICAgICAgICBFTVBUWV9SRVBFQVQgPSB0aGlzO1xuICAgICAgfVxuICAgIH1cblxuICAgIFJlcGVhdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuICdSZXBlYXQgW10nO1xuICAgICAgfVxuICAgICAgcmV0dXJuICdSZXBlYXQgWyAnICsgdGhpcy5fdmFsdWUgKyAnICcgKyB0aGlzLnNpemUgKyAnIHRpbWVzIF0nO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzKGluZGV4KSA/IHRoaXMuX3ZhbHVlIDogbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgcmV0dXJuIGlzKHRoaXMuX3ZhbHVlLCBzZWFyY2hWYWx1ZSk7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIHNpemUpID8gdGhpcyA6XG4gICAgICAgIG5ldyBSZXBlYXQodGhpcy5fdmFsdWUsIHJlc29sdmVFbmQoZW5kLCBzaXplKSAtIHJlc29sdmVCZWdpbihiZWdpbiwgc2l6ZSkpO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgaWYgKGlzKHRoaXMuX3ZhbHVlLCBzZWFyY2hWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgaWYgKGlzKHRoaXMuX3ZhbHVlLCBzZWFyY2hWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuXG4gICAgUmVwZWF0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHRoaXMuc2l6ZTsgaWkrKykge1xuICAgICAgICBpZiAoZm4odGhpcy5fdmFsdWUsIGlpLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gaWkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaWk7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgXG4gICAgICAgIHtyZXR1cm4gaWkgPCB0aGlzJDAuc2l6ZSA/IGl0ZXJhdG9yVmFsdWUodHlwZSwgaWkrKywgdGhpcyQwLl92YWx1ZSkgOiBpdGVyYXRvckRvbmUoKX1cbiAgICAgICk7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIFJlcGVhdCA/XG4gICAgICAgIGlzKHRoaXMuX3ZhbHVlLCBvdGhlci5fdmFsdWUpIDpcbiAgICAgICAgZGVlcEVxdWFsKG90aGVyKTtcbiAgICB9O1xuXG5cbiAgdmFyIEVNUFRZX1JFUEVBVDtcblxuICBmdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBlcnJvcikge1xuICAgIGlmICghY29uZGl0aW9uKSB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoUmFuZ2UsIEluZGV4ZWRTZXEpO1xuXG4gICAgZnVuY3Rpb24gUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJhbmdlKSkge1xuICAgICAgICByZXR1cm4gbmV3IFJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXApO1xuICAgICAgfVxuICAgICAgaW52YXJpYW50KHN0ZXAgIT09IDAsICdDYW5ub3Qgc3RlcCBhIFJhbmdlIGJ5IDAnKTtcbiAgICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBJbmZpbml0eTtcbiAgICAgIH1cbiAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAxIDogTWF0aC5hYnMoc3RlcCk7XG4gICAgICBpZiAoZW5kIDwgc3RhcnQpIHtcbiAgICAgICAgc3RlcCA9IC1zdGVwO1xuICAgICAgfVxuICAgICAgdGhpcy5fc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuX2VuZCA9IGVuZDtcbiAgICAgIHRoaXMuX3N0ZXAgPSBzdGVwO1xuICAgICAgdGhpcy5zaXplID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChlbmQgLSBzdGFydCkgLyBzdGVwIC0gMSkgKyAxKTtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgaWYgKEVNUFRZX1JBTkdFKSB7XG4gICAgICAgICAgcmV0dXJuIEVNUFRZX1JBTkdFO1xuICAgICAgICB9XG4gICAgICAgIEVNUFRZX1JBTkdFID0gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuICdSYW5nZSBbXSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1JhbmdlIFsgJyArXG4gICAgICAgIHRoaXMuX3N0YXJ0ICsgJy4uLicgKyB0aGlzLl9lbmQgK1xuICAgICAgICAodGhpcy5fc3RlcCA+IDEgPyAnIGJ5ICcgKyB0aGlzLl9zdGVwIDogJycpICtcbiAgICAgICcgXSc7XG4gICAgfTtcblxuICAgIFJhbmdlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyhpbmRleCkgP1xuICAgICAgICB0aGlzLl9zdGFydCArIHdyYXBJbmRleCh0aGlzLCBpbmRleCkgKiB0aGlzLl9zdGVwIDpcbiAgICAgICAgbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIFJhbmdlLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICB2YXIgcG9zc2libGVJbmRleCA9IChzZWFyY2hWYWx1ZSAtIHRoaXMuX3N0YXJ0KSAvIHRoaXMuX3N0ZXA7XG4gICAgICByZXR1cm4gcG9zc2libGVJbmRleCA+PSAwICYmXG4gICAgICAgIHBvc3NpYmxlSW5kZXggPCB0aGlzLnNpemUgJiZcbiAgICAgICAgcG9zc2libGVJbmRleCA9PT0gTWF0aC5mbG9vcihwb3NzaWJsZUluZGV4KTtcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgdGhpcy5zaXplKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCB0aGlzLnNpemUpO1xuICAgICAgZW5kID0gcmVzb2x2ZUVuZChlbmQsIHRoaXMuc2l6ZSk7XG4gICAgICBpZiAoZW5kIDw9IGJlZ2luKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2UoMCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFJhbmdlKHRoaXMuZ2V0KGJlZ2luLCB0aGlzLl9lbmQpLCB0aGlzLmdldChlbmQsIHRoaXMuX2VuZCksIHRoaXMuX3N0ZXApO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICB2YXIgb2Zmc2V0VmFsdWUgPSBzZWFyY2hWYWx1ZSAtIHRoaXMuX3N0YXJ0O1xuICAgICAgaWYgKG9mZnNldFZhbHVlICUgdGhpcy5fc3RlcCA9PT0gMCkge1xuICAgICAgICB2YXIgaW5kZXggPSBvZmZzZXRWYWx1ZSAvIHRoaXMuX3N0ZXA7XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5zaXplKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4T2Yoc2VhcmNoVmFsdWUpO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBtYXhJbmRleCA9IHRoaXMuc2l6ZSAtIDE7XG4gICAgICB2YXIgc3RlcCA9IHRoaXMuX3N0ZXA7XG4gICAgICB2YXIgdmFsdWUgPSByZXZlcnNlID8gdGhpcy5fc3RhcnQgKyBtYXhJbmRleCAqIHN0ZXAgOiB0aGlzLl9zdGFydDtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgICAgaWYgKGZuKHZhbHVlLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSArPSByZXZlcnNlID8gLXN0ZXAgOiBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBtYXhJbmRleCA9IHRoaXMuc2l6ZSAtIDE7XG4gICAgICB2YXIgc3RlcCA9IHRoaXMuX3N0ZXA7XG4gICAgICB2YXIgdmFsdWUgPSByZXZlcnNlID8gdGhpcy5fc3RhcnQgKyBtYXhJbmRleCAqIHN0ZXAgOiB0aGlzLl9zdGFydDtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIHYgPSB2YWx1ZTtcbiAgICAgICAgdmFsdWUgKz0gcmV2ZXJzZSA/IC1zdGVwIDogc3RlcDtcbiAgICAgICAgcmV0dXJuIGlpID4gbWF4SW5kZXggPyBpdGVyYXRvckRvbmUoKSA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaWkrKywgdik7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBSYW5nZSA/XG4gICAgICAgIHRoaXMuX3N0YXJ0ID09PSBvdGhlci5fc3RhcnQgJiZcbiAgICAgICAgdGhpcy5fZW5kID09PSBvdGhlci5fZW5kICYmXG4gICAgICAgIHRoaXMuX3N0ZXAgPT09IG90aGVyLl9zdGVwIDpcbiAgICAgICAgZGVlcEVxdWFsKHRoaXMsIG90aGVyKTtcbiAgICB9O1xuXG5cbiAgdmFyIEVNUFRZX1JBTkdFO1xuXG4gIGNyZWF0ZUNsYXNzKENvbGxlY3Rpb24sIEl0ZXJhYmxlKTtcbiAgICBmdW5jdGlvbiBDb2xsZWN0aW9uKCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdBYnN0cmFjdCcpO1xuICAgIH1cblxuXG4gIGNyZWF0ZUNsYXNzKEtleWVkQ29sbGVjdGlvbiwgQ29sbGVjdGlvbik7ZnVuY3Rpb24gS2V5ZWRDb2xsZWN0aW9uKCkge31cblxuICBjcmVhdGVDbGFzcyhJbmRleGVkQ29sbGVjdGlvbiwgQ29sbGVjdGlvbik7ZnVuY3Rpb24gSW5kZXhlZENvbGxlY3Rpb24oKSB7fVxuXG4gIGNyZWF0ZUNsYXNzKFNldENvbGxlY3Rpb24sIENvbGxlY3Rpb24pO2Z1bmN0aW9uIFNldENvbGxlY3Rpb24oKSB7fVxuXG5cbiAgQ29sbGVjdGlvbi5LZXllZCA9IEtleWVkQ29sbGVjdGlvbjtcbiAgQ29sbGVjdGlvbi5JbmRleGVkID0gSW5kZXhlZENvbGxlY3Rpb247XG4gIENvbGxlY3Rpb24uU2V0ID0gU2V0Q29sbGVjdGlvbjtcblxuICB2YXIgaW11bCA9XG4gICAgdHlwZW9mIE1hdGguaW11bCA9PT0gJ2Z1bmN0aW9uJyAmJiBNYXRoLmltdWwoMHhmZmZmZmZmZiwgMikgPT09IC0yID9cbiAgICBNYXRoLmltdWwgOlxuICAgIGZ1bmN0aW9uIGltdWwoYSwgYikge1xuICAgICAgYSA9IGEgfCAwOyAvLyBpbnRcbiAgICAgIGIgPSBiIHwgMDsgLy8gaW50XG4gICAgICB2YXIgYyA9IGEgJiAweGZmZmY7XG4gICAgICB2YXIgZCA9IGIgJiAweGZmZmY7XG4gICAgICAvLyBTaGlmdCBieSAwIGZpeGVzIHRoZSBzaWduIG9uIHRoZSBoaWdoIHBhcnQuXG4gICAgICByZXR1cm4gKGMgKiBkKSArICgoKChhID4+PiAxNikgKiBkICsgYyAqIChiID4+PiAxNikpIDw8IDE2KSA+Pj4gMCkgfCAwOyAvLyBpbnRcbiAgICB9O1xuXG4gIC8vIHY4IGhhcyBhbiBvcHRpbWl6YXRpb24gZm9yIHN0b3JpbmcgMzEtYml0IHNpZ25lZCBudW1iZXJzLlxuICAvLyBWYWx1ZXMgd2hpY2ggaGF2ZSBlaXRoZXIgMDAgb3IgMTEgYXMgdGhlIGhpZ2ggb3JkZXIgYml0cyBxdWFsaWZ5LlxuICAvLyBUaGlzIGZ1bmN0aW9uIGRyb3BzIHRoZSBoaWdoZXN0IG9yZGVyIGJpdCBpbiBhIHNpZ25lZCBudW1iZXIsIG1haW50YWluaW5nXG4gIC8vIHRoZSBzaWduIGJpdC5cbiAgZnVuY3Rpb24gc21pKGkzMikge1xuICAgIHJldHVybiAoKGkzMiA+Pj4gMSkgJiAweDQwMDAwMDAwKSB8IChpMzIgJiAweEJGRkZGRkZGKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc2gobykge1xuICAgIGlmIChvID09PSBmYWxzZSB8fCBvID09PSBudWxsIHx8IG8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygby52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvID0gby52YWx1ZU9mKCk7XG4gICAgICBpZiAobyA9PT0gZmFsc2UgfHwgbyA9PT0gbnVsbCB8fCBvID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgbztcbiAgICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHZhciBoID0gbyB8IDA7XG4gICAgICBpZiAoaCAhPT0gbykge1xuICAgICAgICBoIF49IG8gKiAweEZGRkZGRkZGO1xuICAgICAgfVxuICAgICAgd2hpbGUgKG8gPiAweEZGRkZGRkZGKSB7XG4gICAgICAgIG8gLz0gMHhGRkZGRkZGRjtcbiAgICAgICAgaCBePSBvO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNtaShoKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gby5sZW5ndGggPiBTVFJJTkdfSEFTSF9DQUNIRV9NSU5fU1RSTEVOID8gY2FjaGVkSGFzaFN0cmluZyhvKSA6IGhhc2hTdHJpbmcobyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygby5oYXNoQ29kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG8uaGFzaENvZGUoKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gaGFzaEpTT2JqKG8pO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG8udG9TdHJpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBoYXNoU3RyaW5nKG8udG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignVmFsdWUgdHlwZSAnICsgdHlwZSArICcgY2Fubm90IGJlIGhhc2hlZC4nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhY2hlZEhhc2hTdHJpbmcoc3RyaW5nKSB7XG4gICAgdmFyIGhhc2ggPSBzdHJpbmdIYXNoQ2FjaGVbc3RyaW5nXTtcbiAgICBpZiAoaGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNoID0gaGFzaFN0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKFNUUklOR19IQVNIX0NBQ0hFX1NJWkUgPT09IFNUUklOR19IQVNIX0NBQ0hFX01BWF9TSVpFKSB7XG4gICAgICAgIFNUUklOR19IQVNIX0NBQ0hFX1NJWkUgPSAwO1xuICAgICAgICBzdHJpbmdIYXNoQ2FjaGUgPSB7fTtcbiAgICAgIH1cbiAgICAgIFNUUklOR19IQVNIX0NBQ0hFX1NJWkUrKztcbiAgICAgIHN0cmluZ0hhc2hDYWNoZVtzdHJpbmddID0gaGFzaDtcbiAgICB9XG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cblxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9oYXNoaW5nLXN0cmluZ3NcbiAgZnVuY3Rpb24gaGFzaFN0cmluZyhzdHJpbmcpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBoYXNoIGZyb20gSlZNXG4gICAgLy8gVGhlIGhhc2ggY29kZSBmb3IgYSBzdHJpbmcgaXMgY29tcHV0ZWQgYXNcbiAgICAvLyBzWzBdICogMzEgXiAobiAtIDEpICsgc1sxXSAqIDMxIF4gKG4gLSAyKSArIC4uLiArIHNbbiAtIDFdLFxuICAgIC8vIHdoZXJlIHNbaV0gaXMgdGhlIGl0aCBjaGFyYWN0ZXIgb2YgdGhlIHN0cmluZyBhbmQgbiBpcyB0aGUgbGVuZ3RoIG9mXG4gICAgLy8gdGhlIHN0cmluZy4gV2UgXCJtb2RcIiB0aGUgcmVzdWx0IHRvIG1ha2UgaXQgYmV0d2VlbiAwIChpbmNsdXNpdmUpIGFuZCAyXjMxXG4gICAgLy8gKGV4Y2x1c2l2ZSkgYnkgZHJvcHBpbmcgaGlnaCBiaXRzLlxuICAgIHZhciBoYXNoID0gMDtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgc3RyaW5nLmxlbmd0aDsgaWkrKykge1xuICAgICAgaGFzaCA9IDMxICogaGFzaCArIHN0cmluZy5jaGFyQ29kZUF0KGlpKSB8IDA7XG4gICAgfVxuICAgIHJldHVybiBzbWkoaGFzaCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNoSlNPYmoob2JqKSB7XG4gICAgdmFyIGhhc2g7XG4gICAgaWYgKHVzaW5nV2Vha01hcCkge1xuICAgICAgaGFzaCA9IHdlYWtNYXAuZ2V0KG9iaik7XG4gICAgICBpZiAoaGFzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc2ggPSBvYmpbVUlEX0hBU0hfS0VZXTtcbiAgICBpZiAoaGFzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG5cbiAgICBpZiAoIWNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICBoYXNoID0gb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlICYmIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZVtVSURfSEFTSF9LRVldO1xuICAgICAgaWYgKGhhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICAgIH1cblxuICAgICAgaGFzaCA9IGdldElFTm9kZUhhc2gob2JqKTtcbiAgICAgIGlmIChoYXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFzaCA9ICsrb2JqSGFzaFVJRDtcbiAgICBpZiAob2JqSGFzaFVJRCAmIDB4NDAwMDAwMDApIHtcbiAgICAgIG9iakhhc2hVSUQgPSAwO1xuICAgIH1cblxuICAgIGlmICh1c2luZ1dlYWtNYXApIHtcbiAgICAgIHdlYWtNYXAuc2V0KG9iaiwgaGFzaCk7XG4gICAgfSBlbHNlIGlmIChpc0V4dGVuc2libGUgIT09IHVuZGVmaW5lZCAmJiBpc0V4dGVuc2libGUob2JqKSA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm9uLWV4dGVuc2libGUgb2JqZWN0cyBhcmUgbm90IGFsbG93ZWQgYXMga2V5cy4nKTtcbiAgICB9IGVsc2UgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBVSURfSEFTSF9LRVksIHtcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IGZhbHNlLFxuICAgICAgICAnd3JpdGFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogaGFzaFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChvYmoucHJvcGVydHlJc0VudW1lcmFibGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlID09PSBvYmouY29uc3RydWN0b3IucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlKSB7XG4gICAgICAvLyBTaW5jZSB3ZSBjYW4ndCBkZWZpbmUgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0XG4gICAgICAvLyB3ZSdsbCBoaWphY2sgb25lIG9mIHRoZSBsZXNzLXVzZWQgbm9uLWVudW1lcmFibGUgcHJvcGVydGllcyB0b1xuICAgICAgLy8gc2F2ZSBvdXIgaGFzaCBvbiBpdC4gU2luY2UgdGhpcyBpcyBhIGZ1bmN0aW9uIGl0IHdpbGwgbm90IHNob3cgdXAgaW5cbiAgICAgIC8vIGBKU09OLnN0cmluZ2lmeWAgd2hpY2ggaXMgd2hhdCB3ZSB3YW50LlxuICAgICAgb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZVtVSURfSEFTSF9LRVldID0gaGFzaDtcbiAgICB9IGVsc2UgaWYgKG9iai5ub2RlVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBdCB0aGlzIHBvaW50IHdlIGNvdWxkbid0IGdldCB0aGUgSUUgYHVuaXF1ZUlEYCB0byB1c2UgYXMgYSBoYXNoXG4gICAgICAvLyBhbmQgd2UgY291bGRuJ3QgdXNlIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgdG8gZXhwbG9pdCB0aGVcbiAgICAgIC8vIGRvbnRFbnVtIGJ1ZyBzbyB3ZSBzaW1wbHkgYWRkIHRoZSBgVUlEX0hBU0hfS0VZYCBvbiB0aGUgbm9kZVxuICAgICAgLy8gaXRzZWxmLlxuICAgICAgb2JqW1VJRF9IQVNIX0tFWV0gPSBoYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBzZXQgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBvbiBvYmplY3QuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cblxuICAvLyBHZXQgcmVmZXJlbmNlcyB0byBFUzUgb2JqZWN0IG1ldGhvZHMuXG4gIHZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4gIC8vIFRydWUgaWYgT2JqZWN0LmRlZmluZVByb3BlcnR5IHdvcmtzIGFzIGV4cGVjdGVkLiBJRTggZmFpbHMgdGhpcyB0ZXN0LlxuICB2YXIgY2FuRGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ0AnLCB7fSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KCkpO1xuXG4gIC8vIElFIGhhcyBhIGB1bmlxdWVJRGAgcHJvcGVydHkgb24gRE9NIG5vZGVzLiBXZSBjYW4gY29uc3RydWN0IHRoZSBoYXNoIGZyb20gaXRcbiAgLy8gYW5kIGF2b2lkIG1lbW9yeSBsZWFrcyBmcm9tIHRoZSBJRSBjbG9uZU5vZGUgYnVnLlxuICBmdW5jdGlvbiBnZXRJRU5vZGVIYXNoKG5vZGUpIHtcbiAgICBpZiAobm9kZSAmJiBub2RlLm5vZGVUeXBlID4gMCkge1xuICAgICAgc3dpdGNoIChub2RlLm5vZGVUeXBlKSB7XG4gICAgICAgIGNhc2UgMTogLy8gRWxlbWVudFxuICAgICAgICAgIHJldHVybiBub2RlLnVuaXF1ZUlEO1xuICAgICAgICBjYXNlIDk6IC8vIERvY3VtZW50XG4gICAgICAgICAgcmV0dXJuIG5vZGUuZG9jdW1lbnRFbGVtZW50ICYmIG5vZGUuZG9jdW1lbnRFbGVtZW50LnVuaXF1ZUlEO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIElmIHBvc3NpYmxlLCB1c2UgYSBXZWFrTWFwLlxuICB2YXIgdXNpbmdXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbic7XG4gIHZhciB3ZWFrTWFwO1xuICBpZiAodXNpbmdXZWFrTWFwKSB7XG4gICAgd2Vha01hcCA9IG5ldyBXZWFrTWFwKCk7XG4gIH1cblxuICB2YXIgb2JqSGFzaFVJRCA9IDA7XG5cbiAgdmFyIFVJRF9IQVNIX0tFWSA9ICdfX2ltbXV0YWJsZWhhc2hfXyc7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG4gICAgVUlEX0hBU0hfS0VZID0gU3ltYm9sKFVJRF9IQVNIX0tFWSk7XG4gIH1cblxuICB2YXIgU1RSSU5HX0hBU0hfQ0FDSEVfTUlOX1NUUkxFTiA9IDE2O1xuICB2YXIgU1RSSU5HX0hBU0hfQ0FDSEVfTUFYX1NJWkUgPSAyNTU7XG4gIHZhciBTVFJJTkdfSEFTSF9DQUNIRV9TSVpFID0gMDtcbiAgdmFyIHN0cmluZ0hhc2hDYWNoZSA9IHt9O1xuXG4gIGZ1bmN0aW9uIGFzc2VydE5vdEluZmluaXRlKHNpemUpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBzaXplICE9PSBJbmZpbml0eSxcbiAgICAgICdDYW5ub3QgcGVyZm9ybSB0aGlzIGFjdGlvbiB3aXRoIGFuIGluZmluaXRlIHNpemUuJ1xuICAgICk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhNYXAsIEtleWVkQ29sbGVjdGlvbik7XG5cbiAgICAvLyBAcHJhZ21hIENvbnN0cnVjdGlvblxuXG4gICAgZnVuY3Rpb24gTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5TWFwKCkgOlxuICAgICAgICBpc01hcCh2YWx1ZSkgJiYgIWlzT3JkZXJlZCh2YWx1ZSkgPyB2YWx1ZSA6XG4gICAgICAgIGVtcHR5TWFwKCkud2l0aE11dGF0aW9ucyhmdW5jdGlvbihtYXAgKSB7XG4gICAgICAgICAgdmFyIGl0ZXIgPSBLZXllZEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2LCBrKSAge3JldHVybiBtYXAuc2V0KGssIHYpfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIE1hcC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ01hcCB7JywgJ30nKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICAgIE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaywgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yb290ID9cbiAgICAgICAgdGhpcy5fcm9vdC5nZXQoMCwgdW5kZWZpbmVkLCBrLCBub3RTZXRWYWx1ZSkgOlxuICAgICAgICBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuICAgIE1hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oaywgdikge1xuICAgICAgcmV0dXJuIHVwZGF0ZU1hcCh0aGlzLCBrLCB2KTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5zZXRJbiA9IGZ1bmN0aW9uKGtleVBhdGgsIHYpIHtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUluKGtleVBhdGgsIE5PVF9TRVQsIGZ1bmN0aW9uKCkgIHtyZXR1cm4gdn0pO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGspIHtcbiAgICAgIHJldHVybiB1cGRhdGVNYXAodGhpcywgaywgTk9UX1NFVCk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuZGVsZXRlSW4gPSBmdW5jdGlvbihrZXlQYXRoKSB7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVJbihrZXlQYXRoLCBmdW5jdGlvbigpICB7cmV0dXJuIE5PVF9TRVR9KTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihrLCBub3RTZXRWYWx1ZSwgdXBkYXRlcikge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuICAgICAgICBrKHRoaXMpIDpcbiAgICAgICAgdGhpcy51cGRhdGVJbihba10sIG5vdFNldFZhbHVlLCB1cGRhdGVyKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS51cGRhdGVJbiA9IGZ1bmN0aW9uKGtleVBhdGgsIG5vdFNldFZhbHVlLCB1cGRhdGVyKSB7XG4gICAgICBpZiAoIXVwZGF0ZXIpIHtcbiAgICAgICAgdXBkYXRlciA9IG5vdFNldFZhbHVlO1xuICAgICAgICBub3RTZXRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciB1cGRhdGVkVmFsdWUgPSB1cGRhdGVJbkRlZXBNYXAoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGZvcmNlSXRlcmF0b3Ioa2V5UGF0aCksXG4gICAgICAgIG5vdFNldFZhbHVlLFxuICAgICAgICB1cGRhdGVyXG4gICAgICApO1xuICAgICAgcmV0dXJuIHVwZGF0ZWRWYWx1ZSA9PT0gTk9UX1NFVCA/IHVuZGVmaW5lZCA6IHVwZGF0ZWRWYWx1ZTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgICB0aGlzLl9yb290ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlNYXAoKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBDb21wb3NpdGlvblxuXG4gICAgTWFwLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uKC8qLi4uaXRlcnMqLykge1xuICAgICAgcmV0dXJuIG1lcmdlSW50b01hcFdpdGgodGhpcywgdW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlV2l0aCA9IGZ1bmN0aW9uKG1lcmdlcikge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgcmV0dXJuIG1lcmdlSW50b01hcFdpdGgodGhpcywgbWVyZ2VyLCBpdGVycyk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUubWVyZ2VJbiA9IGZ1bmN0aW9uKGtleVBhdGgpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUluKFxuICAgICAgICBrZXlQYXRoLFxuICAgICAgICBlbXB0eU1hcCgpLFxuICAgICAgICBmdW5jdGlvbihtICkge3JldHVybiB0eXBlb2YgbS5tZXJnZSA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgbS5tZXJnZS5hcHBseShtLCBpdGVycykgOlxuICAgICAgICAgIGl0ZXJzW2l0ZXJzLmxlbmd0aCAtIDFdfVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5tZXJnZURlZXAgPSBmdW5jdGlvbigvKi4uLml0ZXJzKi8pIHtcbiAgICAgIHJldHVybiBtZXJnZUludG9NYXBXaXRoKHRoaXMsIGRlZXBNZXJnZXIsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUubWVyZ2VEZWVwV2l0aCA9IGZ1bmN0aW9uKG1lcmdlcikge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgcmV0dXJuIG1lcmdlSW50b01hcFdpdGgodGhpcywgZGVlcE1lcmdlcldpdGgobWVyZ2VyKSwgaXRlcnMpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlRGVlcEluID0gZnVuY3Rpb24oa2V5UGF0aCkge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSW4oXG4gICAgICAgIGtleVBhdGgsXG4gICAgICAgIGVtcHR5TWFwKCksXG4gICAgICAgIGZ1bmN0aW9uKG0gKSB7cmV0dXJuIHR5cGVvZiBtLm1lcmdlRGVlcCA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgbS5tZXJnZURlZXAuYXBwbHkobSwgaXRlcnMpIDpcbiAgICAgICAgICBpdGVyc1tpdGVycy5sZW5ndGggLSAxXX1cbiAgICAgICk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKGNvbXBhcmF0b3IpIHtcbiAgICAgIC8vIExhdGUgYmluZGluZ1xuICAgICAgcmV0dXJuIE9yZGVyZWRNYXAoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvcikpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLnNvcnRCeSA9IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgLy8gTGF0ZSBiaW5kaW5nXG4gICAgICByZXR1cm4gT3JkZXJlZE1hcChzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNdXRhYmlsaXR5XG5cbiAgICBNYXAucHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSBmdW5jdGlvbihmbikge1xuICAgICAgdmFyIG11dGFibGUgPSB0aGlzLmFzTXV0YWJsZSgpO1xuICAgICAgZm4obXV0YWJsZSk7XG4gICAgICByZXR1cm4gbXV0YWJsZS53YXNBbHRlcmVkKCkgPyBtdXRhYmxlLl9fZW5zdXJlT3duZXIodGhpcy5fX293bmVySUQpIDogdGhpcztcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5hc011dGFibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fb3duZXJJRCA/IHRoaXMgOiB0aGlzLl9fZW5zdXJlT3duZXIobmV3IE93bmVySUQoKSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuYXNJbW11dGFibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZW5zdXJlT3duZXIoKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2FsdGVyZWQ7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcywgdHlwZSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHRoaXMuX3Jvb3QgJiYgdGhpcy5fcm9vdC5pdGVyYXRlKGZ1bmN0aW9uKGVudHJ5ICkge1xuICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgIHJldHVybiBmbihlbnRyeVsxXSwgZW50cnlbMF0sIHRoaXMkMCk7XG4gICAgICB9LCByZXZlcnNlKTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG4gICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlTWFwKHRoaXMuc2l6ZSwgdGhpcy5fcm9vdCwgb3duZXJJRCwgdGhpcy5fX2hhc2gpO1xuICAgIH07XG5cblxuICBmdW5jdGlvbiBpc01hcChtYXliZU1hcCkge1xuICAgIHJldHVybiAhIShtYXliZU1hcCAmJiBtYXliZU1hcFtJU19NQVBfU0VOVElORUxdKTtcbiAgfVxuXG4gIE1hcC5pc01hcCA9IGlzTWFwO1xuXG4gIHZhciBJU19NQVBfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9NQVBfX0BAJztcblxuICB2YXIgTWFwUHJvdG90eXBlID0gTWFwLnByb3RvdHlwZTtcbiAgTWFwUHJvdG90eXBlW0lTX01BUF9TRU5USU5FTF0gPSB0cnVlO1xuICBNYXBQcm90b3R5cGVbREVMRVRFXSA9IE1hcFByb3RvdHlwZS5yZW1vdmU7XG4gIE1hcFByb3RvdHlwZS5yZW1vdmVJbiA9IE1hcFByb3RvdHlwZS5kZWxldGVJbjtcblxuXG4gIC8vICNwcmFnbWEgVHJpZSBOb2Rlc1xuXG5cblxuICAgIGZ1bmN0aW9uIEFycmF5TWFwTm9kZShvd25lcklELCBlbnRyaWVzKSB7XG4gICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5lbnRyaWVzID0gZW50cmllcztcbiAgICB9XG5cbiAgICBBcnJheU1hcE5vZGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgICAgIGZvciAodmFyIGlpID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGlpIDwgbGVuOyBpaSsrKSB7XG4gICAgICAgIGlmIChpcyhrZXksIGVudHJpZXNbaWldWzBdKSkge1xuICAgICAgICAgIHJldHVybiBlbnRyaWVzW2lpXVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBBcnJheU1hcE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcblxuICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG4gICAgICB2YXIgaWR4ID0gMDtcbiAgICAgIGZvciAodmFyIGxlbiA9IGVudHJpZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgIGlmIChpcyhrZXksIGVudHJpZXNbaWR4XVswXSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGV4aXN0cyA9IGlkeCA8IGxlbjtcblxuICAgICAgaWYgKGV4aXN0cyA/IGVudHJpZXNbaWR4XVsxXSA9PT0gdmFsdWUgOiByZW1vdmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuICAgICAgKHJlbW92ZWQgfHwgIWV4aXN0cykgJiYgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuXG4gICAgICBpZiAocmVtb3ZlZCAmJiBlbnRyaWVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICBpZiAoIWV4aXN0cyAmJiAhcmVtb3ZlZCAmJiBlbnRyaWVzLmxlbmd0aCA+PSBNQVhfQVJSQVlfTUFQX1NJWkUpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZU5vZGVzKG93bmVySUQsIGVudHJpZXMsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuICAgICAgdmFyIG5ld0VudHJpZXMgPSBpc0VkaXRhYmxlID8gZW50cmllcyA6IGFyckNvcHkoZW50cmllcyk7XG5cbiAgICAgIGlmIChleGlzdHMpIHtcbiAgICAgICAgaWYgKHJlbW92ZWQpIHtcbiAgICAgICAgICBpZHggPT09IGxlbiAtIDEgPyBuZXdFbnRyaWVzLnBvcCgpIDogKG5ld0VudHJpZXNbaWR4XSA9IG5ld0VudHJpZXMucG9wKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0VudHJpZXNbaWR4XSA9IFtrZXksIHZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3RW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgIHRoaXMuZW50cmllcyA9IG5ld0VudHJpZXM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IEFycmF5TWFwTm9kZShvd25lcklELCBuZXdFbnRyaWVzKTtcbiAgICB9O1xuXG5cblxuXG4gICAgZnVuY3Rpb24gQml0bWFwSW5kZXhlZE5vZGUob3duZXJJRCwgYml0bWFwLCBub2Rlcykge1xuICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMuYml0bWFwID0gYml0bWFwO1xuICAgICAgdGhpcy5ub2RlcyA9IG5vZGVzO1xuICAgIH1cblxuICAgIEJpdG1hcEluZGV4ZWROb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGJpdCA9ICgxIDw8ICgoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSykpO1xuICAgICAgdmFyIGJpdG1hcCA9IHRoaXMuYml0bWFwO1xuICAgICAgcmV0dXJuIChiaXRtYXAgJiBiaXQpID09PSAwID8gbm90U2V0VmFsdWUgOlxuICAgICAgICB0aGlzLm5vZGVzW3BvcENvdW50KGJpdG1hcCAmIChiaXQgLSAxKSldLmdldChzaGlmdCArIFNISUZULCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKTtcbiAgICB9O1xuXG4gICAgQml0bWFwSW5kZXhlZE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGtleUhhc2hGcmFnID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG4gICAgICB2YXIgYml0ID0gMSA8PCBrZXlIYXNoRnJhZztcbiAgICAgIHZhciBiaXRtYXAgPSB0aGlzLmJpdG1hcDtcbiAgICAgIHZhciBleGlzdHMgPSAoYml0bWFwICYgYml0KSAhPT0gMDtcblxuICAgICAgaWYgKCFleGlzdHMgJiYgdmFsdWUgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBpZHggPSBwb3BDb3VudChiaXRtYXAgJiAoYml0IC0gMSkpO1xuICAgICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcbiAgICAgIHZhciBub2RlID0gZXhpc3RzID8gbm9kZXNbaWR4XSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciBuZXdOb2RlID0gdXBkYXRlTm9kZShub2RlLCBvd25lcklELCBzaGlmdCArIFNISUZULCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcik7XG5cbiAgICAgIGlmIChuZXdOb2RlID09PSBub2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV4aXN0cyAmJiBuZXdOb2RlICYmIG5vZGVzLmxlbmd0aCA+PSBNQVhfQklUTUFQX0lOREVYRURfU0laRSkge1xuICAgICAgICByZXR1cm4gZXhwYW5kTm9kZXMob3duZXJJRCwgbm9kZXMsIGJpdG1hcCwga2V5SGFzaEZyYWcsIG5ld05vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXhpc3RzICYmICFuZXdOb2RlICYmIG5vZGVzLmxlbmd0aCA9PT0gMiAmJiBpc0xlYWZOb2RlKG5vZGVzW2lkeCBeIDFdKSkge1xuICAgICAgICByZXR1cm4gbm9kZXNbaWR4IF4gMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChleGlzdHMgJiYgbmV3Tm9kZSAmJiBub2Rlcy5sZW5ndGggPT09IDEgJiYgaXNMZWFmTm9kZShuZXdOb2RlKSkge1xuICAgICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzRWRpdGFibGUgPSBvd25lcklEICYmIG93bmVySUQgPT09IHRoaXMub3duZXJJRDtcbiAgICAgIHZhciBuZXdCaXRtYXAgPSBleGlzdHMgPyBuZXdOb2RlID8gYml0bWFwIDogYml0bWFwIF4gYml0IDogYml0bWFwIHwgYml0O1xuICAgICAgdmFyIG5ld05vZGVzID0gZXhpc3RzID8gbmV3Tm9kZSA/XG4gICAgICAgIHNldEluKG5vZGVzLCBpZHgsIG5ld05vZGUsIGlzRWRpdGFibGUpIDpcbiAgICAgICAgc3BsaWNlT3V0KG5vZGVzLCBpZHgsIGlzRWRpdGFibGUpIDpcbiAgICAgICAgc3BsaWNlSW4obm9kZXMsIGlkeCwgbmV3Tm9kZSwgaXNFZGl0YWJsZSk7XG5cbiAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgIHRoaXMuYml0bWFwID0gbmV3Qml0bWFwO1xuICAgICAgICB0aGlzLm5vZGVzID0gbmV3Tm9kZXM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsIG5ld0JpdG1hcCwgbmV3Tm9kZXMpO1xuICAgIH07XG5cblxuXG5cbiAgICBmdW5jdGlvbiBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIGNvdW50LCBub2Rlcykge1xuICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICB9XG5cbiAgICBIYXNoQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGlkeCA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGVzW2lkeF07XG4gICAgICByZXR1cm4gbm9kZSA/IG5vZGUuZ2V0KHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIDogbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIEhhc2hBcnJheU1hcE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGlkeCA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcbiAgICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW2lkeF07XG5cbiAgICAgIGlmIChyZW1vdmVkICYmICFub2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3Tm9kZSA9IHVwZGF0ZU5vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQgKyBTSElGVCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpO1xuICAgICAgaWYgKG5ld05vZGUgPT09IG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdDb3VudCA9IHRoaXMuY291bnQ7XG4gICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgbmV3Q291bnQrKztcbiAgICAgIH0gZWxzZSBpZiAoIW5ld05vZGUpIHtcbiAgICAgICAgbmV3Q291bnQtLTtcbiAgICAgICAgaWYgKG5ld0NvdW50IDwgTUlOX0hBU0hfQVJSQVlfTUFQX1NJWkUpIHtcbiAgICAgICAgICByZXR1cm4gcGFja05vZGVzKG93bmVySUQsIG5vZGVzLCBuZXdDb3VudCwgaWR4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuICAgICAgdmFyIG5ld05vZGVzID0gc2V0SW4obm9kZXMsIGlkeCwgbmV3Tm9kZSwgaXNFZGl0YWJsZSk7XG5cbiAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgIHRoaXMuY291bnQgPSBuZXdDb3VudDtcbiAgICAgICAgdGhpcy5ub2RlcyA9IG5ld05vZGVzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIG5ld0NvdW50LCBuZXdOb2Rlcyk7XG4gICAgfTtcblxuXG5cblxuICAgIGZ1bmN0aW9uIEhhc2hDb2xsaXNpb25Ob2RlKG93bmVySUQsIGtleUhhc2gsIGVudHJpZXMpIHtcbiAgICAgIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG4gICAgICB0aGlzLmtleUhhc2ggPSBrZXlIYXNoO1xuICAgICAgdGhpcy5lbnRyaWVzID0gZW50cmllcztcbiAgICB9XG5cbiAgICBIYXNoQ29sbGlzaW9uTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgICAgZm9yICh2YXIgaWkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyspIHtcbiAgICAgICAgaWYgKGlzKGtleSwgZW50cmllc1tpaV1bMF0pKSB7XG4gICAgICAgICAgcmV0dXJuIGVudHJpZXNbaWldWzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIEhhc2hDb2xsaXNpb25Ob2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgICAgIGlmIChrZXlIYXNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5SGFzaCA9IGhhc2goa2V5KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcblxuICAgICAgaWYgKGtleUhhc2ggIT09IHRoaXMua2V5SGFzaCkge1xuICAgICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIFNldFJlZihkaWRBbHRlcik7XG4gICAgICAgIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcbiAgICAgICAgcmV0dXJuIG1lcmdlSW50b05vZGUodGhpcywgb3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIFtrZXksIHZhbHVlXSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgICAgdmFyIGlkeCA9IDA7XG4gICAgICBmb3IgKHZhciBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICBpZiAoaXMoa2V5LCBlbnRyaWVzW2lkeF1bMF0pKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBleGlzdHMgPSBpZHggPCBsZW47XG5cbiAgICAgIGlmIChleGlzdHMgPyBlbnRyaWVzW2lkeF1bMV0gPT09IHZhbHVlIDogcmVtb3ZlZCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgU2V0UmVmKGRpZEFsdGVyKTtcbiAgICAgIChyZW1vdmVkIHx8ICFleGlzdHMpICYmIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcblxuICAgICAgaWYgKHJlbW92ZWQgJiYgbGVuID09PSAyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmFsdWVOb2RlKG93bmVySUQsIHRoaXMua2V5SGFzaCwgZW50cmllc1tpZHggXiAxXSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpc0VkaXRhYmxlID0gb3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQ7XG4gICAgICB2YXIgbmV3RW50cmllcyA9IGlzRWRpdGFibGUgPyBlbnRyaWVzIDogYXJyQ29weShlbnRyaWVzKTtcblxuICAgICAgaWYgKGV4aXN0cykge1xuICAgICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICAgIGlkeCA9PT0gbGVuIC0gMSA/IG5ld0VudHJpZXMucG9wKCkgOiAobmV3RW50cmllc1tpZHhdID0gbmV3RW50cmllcy5wb3AoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3RW50cmllc1tpZHhdID0gW2tleSwgdmFsdWVdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdFbnRyaWVzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRWRpdGFibGUpIHtcbiAgICAgICAgdGhpcy5lbnRyaWVzID0gbmV3RW50cmllcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgSGFzaENvbGxpc2lvbk5vZGUob3duZXJJRCwgdGhpcy5rZXlIYXNoLCBuZXdFbnRyaWVzKTtcbiAgICB9O1xuXG5cblxuXG4gICAgZnVuY3Rpb24gVmFsdWVOb2RlKG93bmVySUQsIGtleUhhc2gsIGVudHJ5KSB7XG4gICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5rZXlIYXNoID0ga2V5SGFzaDtcbiAgICAgIHRoaXMuZW50cnkgPSBlbnRyeTtcbiAgICB9XG5cbiAgICBWYWx1ZU5vZGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICByZXR1cm4gaXMoa2V5LCB0aGlzLmVudHJ5WzBdKSA/IHRoaXMuZW50cnlbMV0gOiBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgVmFsdWVOb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgICAgIHZhciByZW1vdmVkID0gdmFsdWUgPT09IE5PVF9TRVQ7XG4gICAgICB2YXIga2V5TWF0Y2ggPSBpcyhrZXksIHRoaXMuZW50cnlbMF0pO1xuICAgICAgaWYgKGtleU1hdGNoID8gdmFsdWUgPT09IHRoaXMuZW50cnlbMV0gOiByZW1vdmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuXG4gICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG4gICAgICAgIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICB9XG5cbiAgICAgIGlmIChrZXlNYXRjaCkge1xuICAgICAgICBpZiAob3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQpIHtcbiAgICAgICAgICB0aGlzLmVudHJ5WzFdID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZU5vZGUob3duZXJJRCwgdGhpcy5rZXlIYXNoLCBba2V5LCB2YWx1ZV0pO1xuICAgICAgfVxuXG4gICAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTm9kZSh0aGlzLCBvd25lcklELCBzaGlmdCwgaGFzaChrZXkpLCBba2V5LCB2YWx1ZV0pO1xuICAgIH07XG5cblxuXG4gIC8vICNwcmFnbWEgSXRlcmF0b3JzXG5cbiAgQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5pdGVyYXRlID1cbiAgSGFzaENvbGxpc2lvbk5vZGUucHJvdG90eXBlLml0ZXJhdGUgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgICBmb3IgKHZhciBpaSA9IDAsIG1heEluZGV4ID0gZW50cmllcy5sZW5ndGggLSAxOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuICAgICAgaWYgKGZuKGVudHJpZXNbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV0pID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQml0bWFwSW5kZXhlZE5vZGUucHJvdG90eXBlLml0ZXJhdGUgPVxuICBIYXNoQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5pdGVyYXRlID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcbiAgICBmb3IgKHZhciBpaSA9IDAsIG1heEluZGV4ID0gbm9kZXMubGVuZ3RoIC0gMTsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgIHZhciBub2RlID0gbm9kZXNbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG4gICAgICBpZiAobm9kZSAmJiBub2RlLml0ZXJhdGUoZm4sIHJldmVyc2UpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgVmFsdWVOb2RlLnByb3RvdHlwZS5pdGVyYXRlID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgcmV0dXJuIGZuKHRoaXMuZW50cnkpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoTWFwSXRlcmF0b3IsIEl0ZXJhdG9yKTtcblxuICAgIGZ1bmN0aW9uIE1hcEl0ZXJhdG9yKG1hcCwgdHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgICB0aGlzLl9yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICAgIHRoaXMuX3N0YWNrID0gbWFwLl9yb290ICYmIG1hcEl0ZXJhdG9yRnJhbWUobWFwLl9yb290KTtcbiAgICB9XG5cbiAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHR5cGUgPSB0aGlzLl90eXBlO1xuICAgICAgdmFyIHN0YWNrID0gdGhpcy5fc3RhY2s7XG4gICAgICB3aGlsZSAoc3RhY2spIHtcbiAgICAgICAgdmFyIG5vZGUgPSBzdGFjay5ub2RlO1xuICAgICAgICB2YXIgaW5kZXggPSBzdGFjay5pbmRleCsrO1xuICAgICAgICB2YXIgbWF4SW5kZXg7XG4gICAgICAgIGlmIChub2RlLmVudHJ5KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBub2RlLmVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5lbnRyaWVzKSB7XG4gICAgICAgICAgbWF4SW5kZXggPSBub2RlLmVudHJpZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICBpZiAoaW5kZXggPD0gbWF4SW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXBJdGVyYXRvclZhbHVlKHR5cGUsIG5vZGUuZW50cmllc1t0aGlzLl9yZXZlcnNlID8gbWF4SW5kZXggLSBpbmRleCA6IGluZGV4XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1heEluZGV4ID0gbm9kZS5ub2Rlcy5sZW5ndGggLSAxO1xuICAgICAgICAgIGlmIChpbmRleCA8PSBtYXhJbmRleCkge1xuICAgICAgICAgICAgdmFyIHN1Yk5vZGUgPSBub2RlLm5vZGVzW3RoaXMuX3JldmVyc2UgPyBtYXhJbmRleCAtIGluZGV4IDogaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHN1Yk5vZGUpIHtcbiAgICAgICAgICAgICAgaWYgKHN1Yk5vZGUuZW50cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBzdWJOb2RlLmVudHJ5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdGFjayA9IHRoaXMuX3N0YWNrID0gbWFwSXRlcmF0b3JGcmFtZShzdWJOb2RlLCBzdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RhY2sgPSB0aGlzLl9zdGFjayA9IHRoaXMuX3N0YWNrLl9fcHJldjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBlbnRyeSkge1xuICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXBJdGVyYXRvckZyYW1lKG5vZGUsIHByZXYpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbm9kZTogbm9kZSxcbiAgICAgIGluZGV4OiAwLFxuICAgICAgX19wcmV2OiBwcmV2XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VNYXAoc2l6ZSwgcm9vdCwgb3duZXJJRCwgaGFzaCkge1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKE1hcFByb3RvdHlwZSk7XG4gICAgbWFwLnNpemUgPSBzaXplO1xuICAgIG1hcC5fcm9vdCA9IHJvb3Q7XG4gICAgbWFwLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgbWFwLl9faGFzaCA9IGhhc2g7XG4gICAgbWFwLl9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgIHJldHVybiBtYXA7XG4gIH1cblxuICB2YXIgRU1QVFlfTUFQO1xuICBmdW5jdGlvbiBlbXB0eU1hcCgpIHtcbiAgICByZXR1cm4gRU1QVFlfTUFQIHx8IChFTVBUWV9NQVAgPSBtYWtlTWFwKDApKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU1hcChtYXAsIGssIHYpIHtcbiAgICB2YXIgbmV3Um9vdDtcbiAgICB2YXIgbmV3U2l6ZTtcbiAgICBpZiAoIW1hcC5fcm9vdCkge1xuICAgICAgaWYgKHYgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgIH1cbiAgICAgIG5ld1NpemUgPSAxO1xuICAgICAgbmV3Um9vdCA9IG5ldyBBcnJheU1hcE5vZGUobWFwLl9fb3duZXJJRCwgW1trLCB2XV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGlkQ2hhbmdlU2l6ZSA9IE1ha2VSZWYoQ0hBTkdFX0xFTkdUSCk7XG4gICAgICB2YXIgZGlkQWx0ZXIgPSBNYWtlUmVmKERJRF9BTFRFUik7XG4gICAgICBuZXdSb290ID0gdXBkYXRlTm9kZShtYXAuX3Jvb3QsIG1hcC5fX293bmVySUQsIDAsIHVuZGVmaW5lZCwgaywgdiwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpO1xuICAgICAgaWYgKCFkaWRBbHRlci52YWx1ZSkge1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgfVxuICAgICAgbmV3U2l6ZSA9IG1hcC5zaXplICsgKGRpZENoYW5nZVNpemUudmFsdWUgPyB2ID09PSBOT1RfU0VUID8gLTEgOiAxIDogMCk7XG4gICAgfVxuICAgIGlmIChtYXAuX19vd25lcklEKSB7XG4gICAgICBtYXAuc2l6ZSA9IG5ld1NpemU7XG4gICAgICBtYXAuX3Jvb3QgPSBuZXdSb290O1xuICAgICAgbWFwLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgIG1hcC5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1Jvb3QgPyBtYWtlTWFwKG5ld1NpemUsIG5ld1Jvb3QpIDogZW1wdHlNYXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU5vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKSB7XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICBpZiAodmFsdWUgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuICAgICAgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuICAgICAgcmV0dXJuIG5ldyBWYWx1ZU5vZGUob3duZXJJRCwga2V5SGFzaCwgW2tleSwgdmFsdWVdKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGUudXBkYXRlKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBpc0xlYWZOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5jb25zdHJ1Y3RvciA9PT0gVmFsdWVOb2RlIHx8IG5vZGUuY29uc3RydWN0b3IgPT09IEhhc2hDb2xsaXNpb25Ob2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VJbnRvTm9kZShub2RlLCBvd25lcklELCBzaGlmdCwga2V5SGFzaCwgZW50cnkpIHtcbiAgICBpZiAobm9kZS5rZXlIYXNoID09PSBrZXlIYXNoKSB7XG4gICAgICByZXR1cm4gbmV3IEhhc2hDb2xsaXNpb25Ob2RlKG93bmVySUQsIGtleUhhc2gsIFtub2RlLmVudHJ5LCBlbnRyeV0pO1xuICAgIH1cblxuICAgIHZhciBpZHgxID0gKHNoaWZ0ID09PSAwID8gbm9kZS5rZXlIYXNoIDogbm9kZS5rZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICAgIHZhciBpZHgyID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG5cbiAgICB2YXIgbmV3Tm9kZTtcbiAgICB2YXIgbm9kZXMgPSBpZHgxID09PSBpZHgyID9cbiAgICAgIFttZXJnZUludG9Ob2RlKG5vZGUsIG93bmVySUQsIHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGVudHJ5KV0gOlxuICAgICAgKChuZXdOb2RlID0gbmV3IFZhbHVlTm9kZShvd25lcklELCBrZXlIYXNoLCBlbnRyeSkpLCBpZHgxIDwgaWR4MiA/IFtub2RlLCBuZXdOb2RlXSA6IFtuZXdOb2RlLCBub2RlXSk7XG5cbiAgICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsICgxIDw8IGlkeDEpIHwgKDEgPDwgaWR4MiksIG5vZGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU5vZGVzKG93bmVySUQsIGVudHJpZXMsIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgIG93bmVySUQgPSBuZXcgT3duZXJJRCgpO1xuICAgIH1cbiAgICB2YXIgbm9kZSA9IG5ldyBWYWx1ZU5vZGUob3duZXJJRCwgaGFzaChrZXkpLCBba2V5LCB2YWx1ZV0pO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBlbnRyaWVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpaV07XG4gICAgICBub2RlID0gbm9kZS51cGRhdGUob3duZXJJRCwgMCwgdW5kZWZpbmVkLCBlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhY2tOb2Rlcyhvd25lcklELCBub2RlcywgY291bnQsIGV4Y2x1ZGluZykge1xuICAgIHZhciBiaXRtYXAgPSAwO1xuICAgIHZhciBwYWNrZWRJSSA9IDA7XG4gICAgdmFyIHBhY2tlZE5vZGVzID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBmb3IgKHZhciBpaSA9IDAsIGJpdCA9IDEsIGxlbiA9IG5vZGVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyssIGJpdCA8PD0gMSkge1xuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpaV07XG4gICAgICBpZiAobm9kZSAhPT0gdW5kZWZpbmVkICYmIGlpICE9PSBleGNsdWRpbmcpIHtcbiAgICAgICAgYml0bWFwIHw9IGJpdDtcbiAgICAgICAgcGFja2VkTm9kZXNbcGFja2VkSUkrK10gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsIGJpdG1hcCwgcGFja2VkTm9kZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwYW5kTm9kZXMob3duZXJJRCwgbm9kZXMsIGJpdG1hcCwgaW5jbHVkaW5nLCBub2RlKSB7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgZXhwYW5kZWROb2RlcyA9IG5ldyBBcnJheShTSVpFKTtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGJpdG1hcCAhPT0gMDsgaWkrKywgYml0bWFwID4+Pj0gMSkge1xuICAgICAgZXhwYW5kZWROb2Rlc1tpaV0gPSBiaXRtYXAgJiAxID8gbm9kZXNbY291bnQrK10gOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGV4cGFuZGVkTm9kZXNbaW5jbHVkaW5nXSA9IG5vZGU7XG4gICAgcmV0dXJuIG5ldyBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIGNvdW50ICsgMSwgZXhwYW5kZWROb2Rlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZUludG9NYXBXaXRoKG1hcCwgbWVyZ2VyLCBpdGVyYWJsZXMpIHtcbiAgICB2YXIgaXRlcnMgPSBbXTtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaXRlcmFibGVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVzW2lpXTtcbiAgICAgIHZhciBpdGVyID0gS2V5ZWRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICBpZiAoIWlzSXRlcmFibGUodmFsdWUpKSB7XG4gICAgICAgIGl0ZXIgPSBpdGVyLm1hcChmdW5jdGlvbih2ICkge3JldHVybiBmcm9tSlModil9KTtcbiAgICAgIH1cbiAgICAgIGl0ZXJzLnB1c2goaXRlcik7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZUludG9Db2xsZWN0aW9uV2l0aChtYXAsIG1lcmdlciwgaXRlcnMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVlcE1lcmdlcihleGlzdGluZywgdmFsdWUsIGtleSkge1xuICAgIHJldHVybiBleGlzdGluZyAmJiBleGlzdGluZy5tZXJnZURlZXAgJiYgaXNJdGVyYWJsZSh2YWx1ZSkgP1xuICAgICAgZXhpc3RpbmcubWVyZ2VEZWVwKHZhbHVlKSA6XG4gICAgICBpcyhleGlzdGluZywgdmFsdWUpID8gZXhpc3RpbmcgOiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZXBNZXJnZXJXaXRoKG1lcmdlcikge1xuICAgIHJldHVybiBmdW5jdGlvbihleGlzdGluZywgdmFsdWUsIGtleSkgIHtcbiAgICAgIGlmIChleGlzdGluZyAmJiBleGlzdGluZy5tZXJnZURlZXBXaXRoICYmIGlzSXRlcmFibGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBleGlzdGluZy5tZXJnZURlZXBXaXRoKG1lcmdlciwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIG5leHRWYWx1ZSA9IG1lcmdlcihleGlzdGluZywgdmFsdWUsIGtleSk7XG4gICAgICByZXR1cm4gaXMoZXhpc3RpbmcsIG5leHRWYWx1ZSkgPyBleGlzdGluZyA6IG5leHRWYWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VJbnRvQ29sbGVjdGlvbldpdGgoY29sbGVjdGlvbiwgbWVyZ2VyLCBpdGVycykge1xuICAgIGl0ZXJzID0gaXRlcnMuZmlsdGVyKGZ1bmN0aW9uKHggKSB7cmV0dXJuIHguc2l6ZSAhPT0gMH0pO1xuICAgIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBpZiAoY29sbGVjdGlvbi5zaXplID09PSAwICYmICFjb2xsZWN0aW9uLl9fb3duZXJJRCAmJiBpdGVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uLmNvbnN0cnVjdG9yKGl0ZXJzWzBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3Rpb24ud2l0aE11dGF0aW9ucyhmdW5jdGlvbihjb2xsZWN0aW9uICkge1xuICAgICAgdmFyIG1lcmdlSW50b01hcCA9IG1lcmdlciA/XG4gICAgICAgIGZ1bmN0aW9uKHZhbHVlLCBrZXkpICB7XG4gICAgICAgICAgY29sbGVjdGlvbi51cGRhdGUoa2V5LCBOT1RfU0VULCBmdW5jdGlvbihleGlzdGluZyApXG4gICAgICAgICAgICB7cmV0dXJuIGV4aXN0aW5nID09PSBOT1RfU0VUID8gdmFsdWUgOiBtZXJnZXIoZXhpc3RpbmcsIHZhbHVlLCBrZXkpfVxuICAgICAgICAgICk7XG4gICAgICAgIH0gOlxuICAgICAgICBmdW5jdGlvbih2YWx1ZSwga2V5KSAge1xuICAgICAgICAgIGNvbGxlY3Rpb24uc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaXRlcnMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgIGl0ZXJzW2lpXS5mb3JFYWNoKG1lcmdlSW50b01hcCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVJbkRlZXBNYXAoZXhpc3RpbmcsIGtleVBhdGhJdGVyLCBub3RTZXRWYWx1ZSwgdXBkYXRlcikge1xuICAgIHZhciBpc05vdFNldCA9IGV4aXN0aW5nID09PSBOT1RfU0VUO1xuICAgIHZhciBzdGVwID0ga2V5UGF0aEl0ZXIubmV4dCgpO1xuICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgIHZhciBleGlzdGluZ1ZhbHVlID0gaXNOb3RTZXQgPyBub3RTZXRWYWx1ZSA6IGV4aXN0aW5nO1xuICAgICAgdmFyIG5ld1ZhbHVlID0gdXBkYXRlcihleGlzdGluZ1ZhbHVlKTtcbiAgICAgIHJldHVybiBuZXdWYWx1ZSA9PT0gZXhpc3RpbmdWYWx1ZSA/IGV4aXN0aW5nIDogbmV3VmFsdWU7XG4gICAgfVxuICAgIGludmFyaWFudChcbiAgICAgIGlzTm90U2V0IHx8IChleGlzdGluZyAmJiBleGlzdGluZy5zZXQpLFxuICAgICAgJ2ludmFsaWQga2V5UGF0aCdcbiAgICApO1xuICAgIHZhciBrZXkgPSBzdGVwLnZhbHVlO1xuICAgIHZhciBuZXh0RXhpc3RpbmcgPSBpc05vdFNldCA/IE5PVF9TRVQgOiBleGlzdGluZy5nZXQoa2V5LCBOT1RfU0VUKTtcbiAgICB2YXIgbmV4dFVwZGF0ZWQgPSB1cGRhdGVJbkRlZXBNYXAoXG4gICAgICBuZXh0RXhpc3RpbmcsXG4gICAgICBrZXlQYXRoSXRlcixcbiAgICAgIG5vdFNldFZhbHVlLFxuICAgICAgdXBkYXRlclxuICAgICk7XG4gICAgcmV0dXJuIG5leHRVcGRhdGVkID09PSBuZXh0RXhpc3RpbmcgPyBleGlzdGluZyA6XG4gICAgICBuZXh0VXBkYXRlZCA9PT0gTk9UX1NFVCA/IGV4aXN0aW5nLnJlbW92ZShrZXkpIDpcbiAgICAgIChpc05vdFNldCA/IGVtcHR5TWFwKCkgOiBleGlzdGluZykuc2V0KGtleSwgbmV4dFVwZGF0ZWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9wQ291bnQoeCkge1xuICAgIHggPSB4IC0gKCh4ID4+IDEpICYgMHg1NTU1NTU1NSk7XG4gICAgeCA9ICh4ICYgMHgzMzMzMzMzMykgKyAoKHggPj4gMikgJiAweDMzMzMzMzMzKTtcbiAgICB4ID0gKHggKyAoeCA+PiA0KSkgJiAweDBmMGYwZjBmO1xuICAgIHggPSB4ICsgKHggPj4gOCk7XG4gICAgeCA9IHggKyAoeCA+PiAxNik7XG4gICAgcmV0dXJuIHggJiAweDdmO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0SW4oYXJyYXksIGlkeCwgdmFsLCBjYW5FZGl0KSB7XG4gICAgdmFyIG5ld0FycmF5ID0gY2FuRWRpdCA/IGFycmF5IDogYXJyQ29weShhcnJheSk7XG4gICAgbmV3QXJyYXlbaWR4XSA9IHZhbDtcbiAgICByZXR1cm4gbmV3QXJyYXk7XG4gIH1cblxuICBmdW5jdGlvbiBzcGxpY2VJbihhcnJheSwgaWR4LCB2YWwsIGNhbkVkaXQpIHtcbiAgICB2YXIgbmV3TGVuID0gYXJyYXkubGVuZ3RoICsgMTtcbiAgICBpZiAoY2FuRWRpdCAmJiBpZHggKyAxID09PSBuZXdMZW4pIHtcbiAgICAgIGFycmF5W2lkeF0gPSB2YWw7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuICAgIHZhciBuZXdBcnJheSA9IG5ldyBBcnJheShuZXdMZW4pO1xuICAgIHZhciBhZnRlciA9IDA7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IG5ld0xlbjsgaWkrKykge1xuICAgICAgaWYgKGlpID09PSBpZHgpIHtcbiAgICAgICAgbmV3QXJyYXlbaWldID0gdmFsO1xuICAgICAgICBhZnRlciA9IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3QXJyYXlbaWldID0gYXJyYXlbaWkgKyBhZnRlcl07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdBcnJheTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNwbGljZU91dChhcnJheSwgaWR4LCBjYW5FZGl0KSB7XG4gICAgdmFyIG5ld0xlbiA9IGFycmF5Lmxlbmd0aCAtIDE7XG4gICAgaWYgKGNhbkVkaXQgJiYgaWR4ID09PSBuZXdMZW4pIHtcbiAgICAgIGFycmF5LnBvcCgpO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbiAgICB2YXIgbmV3QXJyYXkgPSBuZXcgQXJyYXkobmV3TGVuKTtcbiAgICB2YXIgYWZ0ZXIgPSAwO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBuZXdMZW47IGlpKyspIHtcbiAgICAgIGlmIChpaSA9PT0gaWR4KSB7XG4gICAgICAgIGFmdGVyID0gMTtcbiAgICAgIH1cbiAgICAgIG5ld0FycmF5W2lpXSA9IGFycmF5W2lpICsgYWZ0ZXJdO1xuICAgIH1cbiAgICByZXR1cm4gbmV3QXJyYXk7XG4gIH1cblxuICB2YXIgTUFYX0FSUkFZX01BUF9TSVpFID0gU0laRSAvIDQ7XG4gIHZhciBNQVhfQklUTUFQX0lOREVYRURfU0laRSA9IFNJWkUgLyAyO1xuICB2YXIgTUlOX0hBU0hfQVJSQVlfTUFQX1NJWkUgPSBTSVpFIC8gNDtcblxuICBjcmVhdGVDbGFzcyhMaXN0LCBJbmRleGVkQ29sbGVjdGlvbik7XG5cbiAgICAvLyBAcHJhZ21hIENvbnN0cnVjdGlvblxuXG4gICAgZnVuY3Rpb24gTGlzdCh2YWx1ZSkge1xuICAgICAgdmFyIGVtcHR5ID0gZW1wdHlMaXN0KCk7XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgICB9XG4gICAgICBpZiAoaXNMaXN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXRlciA9IEluZGV4ZWRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICB2YXIgc2l6ZSA9IGl0ZXIuc2l6ZTtcbiAgICAgIGlmIChzaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICAgIH1cbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHNpemUpO1xuICAgICAgaWYgKHNpemUgPiAwICYmIHNpemUgPCBTSVpFKSB7XG4gICAgICAgIHJldHVybiBtYWtlTGlzdCgwLCBzaXplLCBTSElGVCwgbnVsbCwgbmV3IFZOb2RlKGl0ZXIudG9BcnJheSgpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHkud2l0aE11dGF0aW9ucyhmdW5jdGlvbihsaXN0ICkge1xuICAgICAgICBsaXN0LnNldFNpemUoc2l6ZSk7XG4gICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2LCBpKSAge3JldHVybiBsaXN0LnNldChpLCB2KX0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgTGlzdC5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdMaXN0IFsnLCAnXScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgTGlzdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaW5kZXgsIG5vdFNldFZhbHVlKSB7XG4gICAgICBpbmRleCA9IHdyYXBJbmRleCh0aGlzLCBpbmRleCk7XG4gICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuc2l6ZSkge1xuICAgICAgICBpbmRleCArPSB0aGlzLl9vcmlnaW47XG4gICAgICAgIHZhciBub2RlID0gbGlzdE5vZGVGb3IodGhpcywgaW5kZXgpO1xuICAgICAgICByZXR1cm4gbm9kZSAmJiBub2RlLmFycmF5W2luZGV4ICYgTUFTS107XG4gICAgICB9XG4gICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgICBMaXN0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB1cGRhdGVMaXN0KHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICByZXR1cm4gIXRoaXMuaGFzKGluZGV4KSA/IHRoaXMgOlxuICAgICAgICBpbmRleCA9PT0gMCA/IHRoaXMuc2hpZnQoKSA6XG4gICAgICAgIGluZGV4ID09PSB0aGlzLnNpemUgLSAxID8gdGhpcy5wb3AoKSA6XG4gICAgICAgIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24oaW5kZXgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5zcGxpY2UoaW5kZXgsIDAsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gdGhpcy5fb3JpZ2luID0gdGhpcy5fY2FwYWNpdHkgPSAwO1xuICAgICAgICB0aGlzLl9sZXZlbCA9IFNISUZUO1xuICAgICAgICB0aGlzLl9yb290ID0gdGhpcy5fdGFpbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVtcHR5TGlzdCgpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgdmFyIHZhbHVlcyA9IGFyZ3VtZW50cztcbiAgICAgIHZhciBvbGRTaXplID0gdGhpcy5zaXplO1xuICAgICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbihsaXN0ICkge1xuICAgICAgICBzZXRMaXN0Qm91bmRzKGxpc3QsIDAsIG9sZFNpemUgKyB2YWx1ZXMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHZhbHVlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgICBsaXN0LnNldChvbGRTaXplICsgaWksIHZhbHVlc1tpaV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyh0aGlzLCAwLCAtMSk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICB2YXIgdmFsdWVzID0gYXJndW1lbnRzO1xuICAgICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbihsaXN0ICkge1xuICAgICAgICBzZXRMaXN0Qm91bmRzKGxpc3QsIC12YWx1ZXMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHZhbHVlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgICBsaXN0LnNldChpaSwgdmFsdWVzW2lpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNldExpc3RCb3VuZHModGhpcywgMSk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQ29tcG9zaXRpb25cblxuICAgIExpc3QucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24oLyouLi5pdGVycyovKSB7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTGlzdFdpdGgodGhpcywgdW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5tZXJnZVdpdGggPSBmdW5jdGlvbihtZXJnZXIpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiBtZXJnZUludG9MaXN0V2l0aCh0aGlzLCBtZXJnZXIsIGl0ZXJzKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUubWVyZ2VEZWVwID0gZnVuY3Rpb24oLyouLi5pdGVycyovKSB7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTGlzdFdpdGgodGhpcywgZGVlcE1lcmdlciwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUubWVyZ2VEZWVwV2l0aCA9IGZ1bmN0aW9uKG1lcmdlcikge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgcmV0dXJuIG1lcmdlSW50b0xpc3RXaXRoKHRoaXMsIGRlZXBNZXJnZXJXaXRoKG1lcmdlciksIGl0ZXJzKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUuc2V0U2l6ZSA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgIHJldHVybiBzZXRMaXN0Qm91bmRzKHRoaXMsIDAsIHNpemUpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEl0ZXJhdGlvblxuXG4gICAgTGlzdC5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICAgIGlmICh3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIHNpemUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldExpc3RCb3VuZHMoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHJlc29sdmVCZWdpbihiZWdpbiwgc2l6ZSksXG4gICAgICAgIHJlc29sdmVFbmQoZW5kLCBzaXplKVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWVzID0gaXRlcmF0ZUxpc3QodGhpcywgcmV2ZXJzZSk7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVzKCk7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gRE9ORSA/XG4gICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaW5kZXgrKywgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlcyA9IGl0ZXJhdGVMaXN0KHRoaXMsIHJldmVyc2UpO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgd2hpbGUgKCh2YWx1ZSA9IHZhbHVlcygpKSAhPT0gRE9ORSkge1xuICAgICAgICBpZiAoZm4odmFsdWUsIGluZGV4KyssIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG4gICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlTGlzdCh0aGlzLl9vcmlnaW4sIHRoaXMuX2NhcGFjaXR5LCB0aGlzLl9sZXZlbCwgdGhpcy5fcm9vdCwgdGhpcy5fdGFpbCwgb3duZXJJRCwgdGhpcy5fX2hhc2gpO1xuICAgIH07XG5cblxuICBmdW5jdGlvbiBpc0xpc3QobWF5YmVMaXN0KSB7XG4gICAgcmV0dXJuICEhKG1heWJlTGlzdCAmJiBtYXliZUxpc3RbSVNfTElTVF9TRU5USU5FTF0pO1xuICB9XG5cbiAgTGlzdC5pc0xpc3QgPSBpc0xpc3Q7XG5cbiAgdmFyIElTX0xJU1RfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9MSVNUX19AQCc7XG5cbiAgdmFyIExpc3RQcm90b3R5cGUgPSBMaXN0LnByb3RvdHlwZTtcbiAgTGlzdFByb3RvdHlwZVtJU19MSVNUX1NFTlRJTkVMXSA9IHRydWU7XG4gIExpc3RQcm90b3R5cGVbREVMRVRFXSA9IExpc3RQcm90b3R5cGUucmVtb3ZlO1xuICBMaXN0UHJvdG90eXBlLnNldEluID0gTWFwUHJvdG90eXBlLnNldEluO1xuICBMaXN0UHJvdG90eXBlLmRlbGV0ZUluID1cbiAgTGlzdFByb3RvdHlwZS5yZW1vdmVJbiA9IE1hcFByb3RvdHlwZS5yZW1vdmVJbjtcbiAgTGlzdFByb3RvdHlwZS51cGRhdGUgPSBNYXBQcm90b3R5cGUudXBkYXRlO1xuICBMaXN0UHJvdG90eXBlLnVwZGF0ZUluID0gTWFwUHJvdG90eXBlLnVwZGF0ZUluO1xuICBMaXN0UHJvdG90eXBlLm1lcmdlSW4gPSBNYXBQcm90b3R5cGUubWVyZ2VJbjtcbiAgTGlzdFByb3RvdHlwZS5tZXJnZURlZXBJbiA9IE1hcFByb3RvdHlwZS5tZXJnZURlZXBJbjtcbiAgTGlzdFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gTWFwUHJvdG90eXBlLndpdGhNdXRhdGlvbnM7XG4gIExpc3RQcm90b3R5cGUuYXNNdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzTXV0YWJsZTtcbiAgTGlzdFByb3RvdHlwZS5hc0ltbXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc0ltbXV0YWJsZTtcbiAgTGlzdFByb3RvdHlwZS53YXNBbHRlcmVkID0gTWFwUHJvdG90eXBlLndhc0FsdGVyZWQ7XG5cblxuXG4gICAgZnVuY3Rpb24gVk5vZGUoYXJyYXksIG93bmVySUQpIHtcbiAgICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbiAgICAgIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogc2VlbXMgbGlrZSB0aGVzZSBtZXRob2RzIGFyZSB2ZXJ5IHNpbWlsYXJcblxuICAgIFZOb2RlLnByb3RvdHlwZS5yZW1vdmVCZWZvcmUgPSBmdW5jdGlvbihvd25lcklELCBsZXZlbCwgaW5kZXgpIHtcbiAgICAgIGlmIChpbmRleCA9PT0gbGV2ZWwgPyAxIDw8IGxldmVsIDogMCB8fCB0aGlzLmFycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBvcmlnaW5JbmRleCA9IChpbmRleCA+Pj4gbGV2ZWwpICYgTUFTSztcbiAgICAgIGlmIChvcmlnaW5JbmRleCA+PSB0aGlzLmFycmF5Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbmV3IFZOb2RlKFtdLCBvd25lcklEKTtcbiAgICAgIH1cbiAgICAgIHZhciByZW1vdmluZ0ZpcnN0ID0gb3JpZ2luSW5kZXggPT09IDA7XG4gICAgICB2YXIgbmV3Q2hpbGQ7XG4gICAgICBpZiAobGV2ZWwgPiAwKSB7XG4gICAgICAgIHZhciBvbGRDaGlsZCA9IHRoaXMuYXJyYXlbb3JpZ2luSW5kZXhdO1xuICAgICAgICBuZXdDaGlsZCA9IG9sZENoaWxkICYmIG9sZENoaWxkLnJlbW92ZUJlZm9yZShvd25lcklELCBsZXZlbCAtIFNISUZULCBpbmRleCk7XG4gICAgICAgIGlmIChuZXdDaGlsZCA9PT0gb2xkQ2hpbGQgJiYgcmVtb3ZpbmdGaXJzdCkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVtb3ZpbmdGaXJzdCAmJiAhbmV3Q2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgZWRpdGFibGUgPSBlZGl0YWJsZVZOb2RlKHRoaXMsIG93bmVySUQpO1xuICAgICAgaWYgKCFyZW1vdmluZ0ZpcnN0KSB7XG4gICAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBvcmlnaW5JbmRleDsgaWkrKykge1xuICAgICAgICAgIGVkaXRhYmxlLmFycmF5W2lpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG5ld0NoaWxkKSB7XG4gICAgICAgIGVkaXRhYmxlLmFycmF5W29yaWdpbkluZGV4XSA9IG5ld0NoaWxkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVkaXRhYmxlO1xuICAgIH07XG5cbiAgICBWTm9kZS5wcm90b3R5cGUucmVtb3ZlQWZ0ZXIgPSBmdW5jdGlvbihvd25lcklELCBsZXZlbCwgaW5kZXgpIHtcbiAgICAgIGlmIChpbmRleCA9PT0gKGxldmVsID8gMSA8PCBsZXZlbCA6IDApIHx8IHRoaXMuYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIHNpemVJbmRleCA9ICgoaW5kZXggLSAxKSA+Pj4gbGV2ZWwpICYgTUFTSztcbiAgICAgIGlmIChzaXplSW5kZXggPj0gdGhpcy5hcnJheS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdDaGlsZDtcbiAgICAgIGlmIChsZXZlbCA+IDApIHtcbiAgICAgICAgdmFyIG9sZENoaWxkID0gdGhpcy5hcnJheVtzaXplSW5kZXhdO1xuICAgICAgICBuZXdDaGlsZCA9IG9sZENoaWxkICYmIG9sZENoaWxkLnJlbW92ZUFmdGVyKG93bmVySUQsIGxldmVsIC0gU0hJRlQsIGluZGV4KTtcbiAgICAgICAgaWYgKG5ld0NoaWxkID09PSBvbGRDaGlsZCAmJiBzaXplSW5kZXggPT09IHRoaXMuYXJyYXkubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBlZGl0YWJsZSA9IGVkaXRhYmxlVk5vZGUodGhpcywgb3duZXJJRCk7XG4gICAgICBlZGl0YWJsZS5hcnJheS5zcGxpY2Uoc2l6ZUluZGV4ICsgMSk7XG4gICAgICBpZiAobmV3Q2hpbGQpIHtcbiAgICAgICAgZWRpdGFibGUuYXJyYXlbc2l6ZUluZGV4XSA9IG5ld0NoaWxkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVkaXRhYmxlO1xuICAgIH07XG5cblxuXG4gIHZhciBET05FID0ge307XG5cbiAgZnVuY3Rpb24gaXRlcmF0ZUxpc3QobGlzdCwgcmV2ZXJzZSkge1xuICAgIHZhciBsZWZ0ID0gbGlzdC5fb3JpZ2luO1xuICAgIHZhciByaWdodCA9IGxpc3QuX2NhcGFjaXR5O1xuICAgIHZhciB0YWlsUG9zID0gZ2V0VGFpbE9mZnNldChyaWdodCk7XG4gICAgdmFyIHRhaWwgPSBsaXN0Ll90YWlsO1xuXG4gICAgcmV0dXJuIGl0ZXJhdGVOb2RlT3JMZWFmKGxpc3QuX3Jvb3QsIGxpc3QuX2xldmVsLCAwKTtcblxuICAgIGZ1bmN0aW9uIGl0ZXJhdGVOb2RlT3JMZWFmKG5vZGUsIGxldmVsLCBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBsZXZlbCA9PT0gMCA/XG4gICAgICAgIGl0ZXJhdGVMZWFmKG5vZGUsIG9mZnNldCkgOlxuICAgICAgICBpdGVyYXRlTm9kZShub2RlLCBsZXZlbCwgb2Zmc2V0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpdGVyYXRlTGVhZihub2RlLCBvZmZzZXQpIHtcbiAgICAgIHZhciBhcnJheSA9IG9mZnNldCA9PT0gdGFpbFBvcyA/IHRhaWwgJiYgdGFpbC5hcnJheSA6IG5vZGUgJiYgbm9kZS5hcnJheTtcbiAgICAgIHZhciBmcm9tID0gb2Zmc2V0ID4gbGVmdCA/IDAgOiBsZWZ0IC0gb2Zmc2V0O1xuICAgICAgdmFyIHRvID0gcmlnaHQgLSBvZmZzZXQ7XG4gICAgICBpZiAodG8gPiBTSVpFKSB7XG4gICAgICAgIHRvID0gU0laRTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpICB7XG4gICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgIHJldHVybiBET05FO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZHggPSByZXZlcnNlID8gLS10byA6IGZyb20rKztcbiAgICAgICAgcmV0dXJuIGFycmF5ICYmIGFycmF5W2lkeF07XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGl0ZXJhdGVOb2RlKG5vZGUsIGxldmVsLCBvZmZzZXQpIHtcbiAgICAgIHZhciB2YWx1ZXM7XG4gICAgICB2YXIgYXJyYXkgPSBub2RlICYmIG5vZGUuYXJyYXk7XG4gICAgICB2YXIgZnJvbSA9IG9mZnNldCA+IGxlZnQgPyAwIDogKGxlZnQgLSBvZmZzZXQpID4+IGxldmVsO1xuICAgICAgdmFyIHRvID0gKChyaWdodCAtIG9mZnNldCkgPj4gbGV2ZWwpICsgMTtcbiAgICAgIGlmICh0byA+IFNJWkUpIHtcbiAgICAgICAgdG8gPSBTSVpFO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlcygpO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBET05FKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlcyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgICAgcmV0dXJuIERPTkU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpZHggPSByZXZlcnNlID8gLS10byA6IGZyb20rKztcbiAgICAgICAgICB2YWx1ZXMgPSBpdGVyYXRlTm9kZU9yTGVhZihcbiAgICAgICAgICAgIGFycmF5ICYmIGFycmF5W2lkeF0sIGxldmVsIC0gU0hJRlQsIG9mZnNldCArIChpZHggPDwgbGV2ZWwpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VMaXN0KG9yaWdpbiwgY2FwYWNpdHksIGxldmVsLCByb290LCB0YWlsLCBvd25lcklELCBoYXNoKSB7XG4gICAgdmFyIGxpc3QgPSBPYmplY3QuY3JlYXRlKExpc3RQcm90b3R5cGUpO1xuICAgIGxpc3Quc2l6ZSA9IGNhcGFjaXR5IC0gb3JpZ2luO1xuICAgIGxpc3QuX29yaWdpbiA9IG9yaWdpbjtcbiAgICBsaXN0Ll9jYXBhY2l0eSA9IGNhcGFjaXR5O1xuICAgIGxpc3QuX2xldmVsID0gbGV2ZWw7XG4gICAgbGlzdC5fcm9vdCA9IHJvb3Q7XG4gICAgbGlzdC5fdGFpbCA9IHRhaWw7XG4gICAgbGlzdC5fX293bmVySUQgPSBvd25lcklEO1xuICAgIGxpc3QuX19oYXNoID0gaGFzaDtcbiAgICBsaXN0Ll9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgIHJldHVybiBsaXN0O1xuICB9XG5cbiAgdmFyIEVNUFRZX0xJU1Q7XG4gIGZ1bmN0aW9uIGVtcHR5TGlzdCgpIHtcbiAgICByZXR1cm4gRU1QVFlfTElTVCB8fCAoRU1QVFlfTElTVCA9IG1ha2VMaXN0KDAsIDAsIFNISUZUKSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVMaXN0KGxpc3QsIGluZGV4LCB2YWx1ZSkge1xuICAgIGluZGV4ID0gd3JhcEluZGV4KGxpc3QsIGluZGV4KTtcblxuICAgIGlmIChpbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIGlmIChpbmRleCA+PSBsaXN0LnNpemUgfHwgaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4gbGlzdC53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKGxpc3QgKSB7XG4gICAgICAgIGluZGV4IDwgMCA/XG4gICAgICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCBpbmRleCkuc2V0KDAsIHZhbHVlKSA6XG4gICAgICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCAwLCBpbmRleCArIDEpLnNldChpbmRleCwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpbmRleCArPSBsaXN0Ll9vcmlnaW47XG5cbiAgICB2YXIgbmV3VGFpbCA9IGxpc3QuX3RhaWw7XG4gICAgdmFyIG5ld1Jvb3QgPSBsaXN0Ll9yb290O1xuICAgIHZhciBkaWRBbHRlciA9IE1ha2VSZWYoRElEX0FMVEVSKTtcbiAgICBpZiAoaW5kZXggPj0gZ2V0VGFpbE9mZnNldChsaXN0Ll9jYXBhY2l0eSkpIHtcbiAgICAgIG5ld1RhaWwgPSB1cGRhdGVWTm9kZShuZXdUYWlsLCBsaXN0Ll9fb3duZXJJRCwgMCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1Jvb3QgPSB1cGRhdGVWTm9kZShuZXdSb290LCBsaXN0Ll9fb3duZXJJRCwgbGlzdC5fbGV2ZWwsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpO1xuICAgIH1cblxuICAgIGlmICghZGlkQWx0ZXIudmFsdWUpIHtcbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIGlmIChsaXN0Ll9fb3duZXJJRCkge1xuICAgICAgbGlzdC5fcm9vdCA9IG5ld1Jvb3Q7XG4gICAgICBsaXN0Ll90YWlsID0gbmV3VGFpbDtcbiAgICAgIGxpc3QuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgbGlzdC5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuICAgIHJldHVybiBtYWtlTGlzdChsaXN0Ll9vcmlnaW4sIGxpc3QuX2NhcGFjaXR5LCBsaXN0Ll9sZXZlbCwgbmV3Um9vdCwgbmV3VGFpbCk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVWTm9kZShub2RlLCBvd25lcklELCBsZXZlbCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcikge1xuICAgIHZhciBpZHggPSAoaW5kZXggPj4+IGxldmVsKSAmIE1BU0s7XG4gICAgdmFyIG5vZGVIYXMgPSBub2RlICYmIGlkeCA8IG5vZGUuYXJyYXkubGVuZ3RoO1xuICAgIGlmICghbm9kZUhhcyAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICB2YXIgbmV3Tm9kZTtcblxuICAgIGlmIChsZXZlbCA+IDApIHtcbiAgICAgIHZhciBsb3dlck5vZGUgPSBub2RlICYmIG5vZGUuYXJyYXlbaWR4XTtcbiAgICAgIHZhciBuZXdMb3dlck5vZGUgPSB1cGRhdGVWTm9kZShsb3dlck5vZGUsIG93bmVySUQsIGxldmVsIC0gU0hJRlQsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpO1xuICAgICAgaWYgKG5ld0xvd2VyTm9kZSA9PT0gbG93ZXJOb2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgICAgbmV3Tm9kZSA9IGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCk7XG4gICAgICBuZXdOb2RlLmFycmF5W2lkeF0gPSBuZXdMb3dlck5vZGU7XG4gICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICB9XG5cbiAgICBpZiAobm9kZUhhcyAmJiBub2RlLmFycmF5W2lkeF0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuXG4gICAgbmV3Tm9kZSA9IGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCk7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgaWR4ID09PSBuZXdOb2RlLmFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgIG5ld05vZGUuYXJyYXkucG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld05vZGUuYXJyYXlbaWR4XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbmV3Tm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCkge1xuICAgIGlmIChvd25lcklEICYmIG5vZGUgJiYgb3duZXJJRCA9PT0gbm9kZS5vd25lcklEKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlID8gbm9kZS5hcnJheS5zbGljZSgpIDogW10sIG93bmVySUQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdE5vZGVGb3IobGlzdCwgcmF3SW5kZXgpIHtcbiAgICBpZiAocmF3SW5kZXggPj0gZ2V0VGFpbE9mZnNldChsaXN0Ll9jYXBhY2l0eSkpIHtcbiAgICAgIHJldHVybiBsaXN0Ll90YWlsO1xuICAgIH1cbiAgICBpZiAocmF3SW5kZXggPCAxIDw8IChsaXN0Ll9sZXZlbCArIFNISUZUKSkge1xuICAgICAgdmFyIG5vZGUgPSBsaXN0Ll9yb290O1xuICAgICAgdmFyIGxldmVsID0gbGlzdC5fbGV2ZWw7XG4gICAgICB3aGlsZSAobm9kZSAmJiBsZXZlbCA+IDApIHtcbiAgICAgICAgbm9kZSA9IG5vZGUuYXJyYXlbKHJhd0luZGV4ID4+PiBsZXZlbCkgJiBNQVNLXTtcbiAgICAgICAgbGV2ZWwgLT0gU0hJRlQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRMaXN0Qm91bmRzKGxpc3QsIGJlZ2luLCBlbmQpIHtcbiAgICAvLyBTYW5pdGl6ZSBiZWdpbiAmIGVuZCB1c2luZyB0aGlzIHNob3J0aGFuZCBmb3IgVG9JbnQzMihhcmd1bWVudClcbiAgICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9pbnQzMlxuICAgIGlmIChiZWdpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBiZWdpbiA9IGJlZ2luIHwgMDtcbiAgICB9XG4gICAgaWYgKGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBlbmQgPSBlbmQgfCAwO1xuICAgIH1cbiAgICB2YXIgb3duZXIgPSBsaXN0Ll9fb3duZXJJRCB8fCBuZXcgT3duZXJJRCgpO1xuICAgIHZhciBvbGRPcmlnaW4gPSBsaXN0Ll9vcmlnaW47XG4gICAgdmFyIG9sZENhcGFjaXR5ID0gbGlzdC5fY2FwYWNpdHk7XG4gICAgdmFyIG5ld09yaWdpbiA9IG9sZE9yaWdpbiArIGJlZ2luO1xuICAgIHZhciBuZXdDYXBhY2l0eSA9IGVuZCA9PT0gdW5kZWZpbmVkID8gb2xkQ2FwYWNpdHkgOiBlbmQgPCAwID8gb2xkQ2FwYWNpdHkgKyBlbmQgOiBvbGRPcmlnaW4gKyBlbmQ7XG4gICAgaWYgKG5ld09yaWdpbiA9PT0gb2xkT3JpZ2luICYmIG5ld0NhcGFjaXR5ID09PSBvbGRDYXBhY2l0eSkge1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgLy8gSWYgaXQncyBnb2luZyB0byBlbmQgYWZ0ZXIgaXQgc3RhcnRzLCBpdCdzIGVtcHR5LlxuICAgIGlmIChuZXdPcmlnaW4gPj0gbmV3Q2FwYWNpdHkpIHtcbiAgICAgIHJldHVybiBsaXN0LmNsZWFyKCk7XG4gICAgfVxuXG4gICAgdmFyIG5ld0xldmVsID0gbGlzdC5fbGV2ZWw7XG4gICAgdmFyIG5ld1Jvb3QgPSBsaXN0Ll9yb290O1xuXG4gICAgLy8gTmV3IG9yaWdpbiBtaWdodCBuZWVkIGNyZWF0aW5nIGEgaGlnaGVyIHJvb3QuXG4gICAgdmFyIG9mZnNldFNoaWZ0ID0gMDtcbiAgICB3aGlsZSAobmV3T3JpZ2luICsgb2Zmc2V0U2hpZnQgPCAwKSB7XG4gICAgICBuZXdSb290ID0gbmV3IFZOb2RlKG5ld1Jvb3QgJiYgbmV3Um9vdC5hcnJheS5sZW5ndGggPyBbdW5kZWZpbmVkLCBuZXdSb290XSA6IFtdLCBvd25lcik7XG4gICAgICBuZXdMZXZlbCArPSBTSElGVDtcbiAgICAgIG9mZnNldFNoaWZ0ICs9IDEgPDwgbmV3TGV2ZWw7XG4gICAgfVxuICAgIGlmIChvZmZzZXRTaGlmdCkge1xuICAgICAgbmV3T3JpZ2luICs9IG9mZnNldFNoaWZ0O1xuICAgICAgb2xkT3JpZ2luICs9IG9mZnNldFNoaWZ0O1xuICAgICAgbmV3Q2FwYWNpdHkgKz0gb2Zmc2V0U2hpZnQ7XG4gICAgICBvbGRDYXBhY2l0eSArPSBvZmZzZXRTaGlmdDtcbiAgICB9XG5cbiAgICB2YXIgb2xkVGFpbE9mZnNldCA9IGdldFRhaWxPZmZzZXQob2xkQ2FwYWNpdHkpO1xuICAgIHZhciBuZXdUYWlsT2Zmc2V0ID0gZ2V0VGFpbE9mZnNldChuZXdDYXBhY2l0eSk7XG5cbiAgICAvLyBOZXcgc2l6ZSBtaWdodCBuZWVkIGNyZWF0aW5nIGEgaGlnaGVyIHJvb3QuXG4gICAgd2hpbGUgKG5ld1RhaWxPZmZzZXQgPj0gMSA8PCAobmV3TGV2ZWwgKyBTSElGVCkpIHtcbiAgICAgIG5ld1Jvb3QgPSBuZXcgVk5vZGUobmV3Um9vdCAmJiBuZXdSb290LmFycmF5Lmxlbmd0aCA/IFtuZXdSb290XSA6IFtdLCBvd25lcik7XG4gICAgICBuZXdMZXZlbCArPSBTSElGVDtcbiAgICB9XG5cbiAgICAvLyBMb2NhdGUgb3IgY3JlYXRlIHRoZSBuZXcgdGFpbC5cbiAgICB2YXIgb2xkVGFpbCA9IGxpc3QuX3RhaWw7XG4gICAgdmFyIG5ld1RhaWwgPSBuZXdUYWlsT2Zmc2V0IDwgb2xkVGFpbE9mZnNldCA/XG4gICAgICBsaXN0Tm9kZUZvcihsaXN0LCBuZXdDYXBhY2l0eSAtIDEpIDpcbiAgICAgIG5ld1RhaWxPZmZzZXQgPiBvbGRUYWlsT2Zmc2V0ID8gbmV3IFZOb2RlKFtdLCBvd25lcikgOiBvbGRUYWlsO1xuXG4gICAgLy8gTWVyZ2UgVGFpbCBpbnRvIHRyZWUuXG4gICAgaWYgKG9sZFRhaWwgJiYgbmV3VGFpbE9mZnNldCA+IG9sZFRhaWxPZmZzZXQgJiYgbmV3T3JpZ2luIDwgb2xkQ2FwYWNpdHkgJiYgb2xkVGFpbC5hcnJheS5sZW5ndGgpIHtcbiAgICAgIG5ld1Jvb3QgPSBlZGl0YWJsZVZOb2RlKG5ld1Jvb3QsIG93bmVyKTtcbiAgICAgIHZhciBub2RlID0gbmV3Um9vdDtcbiAgICAgIGZvciAodmFyIGxldmVsID0gbmV3TGV2ZWw7IGxldmVsID4gU0hJRlQ7IGxldmVsIC09IFNISUZUKSB7XG4gICAgICAgIHZhciBpZHggPSAob2xkVGFpbE9mZnNldCA+Pj4gbGV2ZWwpICYgTUFTSztcbiAgICAgICAgbm9kZSA9IG5vZGUuYXJyYXlbaWR4XSA9IGVkaXRhYmxlVk5vZGUobm9kZS5hcnJheVtpZHhdLCBvd25lcik7XG4gICAgICB9XG4gICAgICBub2RlLmFycmF5WyhvbGRUYWlsT2Zmc2V0ID4+PiBTSElGVCkgJiBNQVNLXSA9IG9sZFRhaWw7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHNpemUgaGFzIGJlZW4gcmVkdWNlZCwgdGhlcmUncyBhIGNoYW5jZSB0aGUgdGFpbCBuZWVkcyB0byBiZSB0cmltbWVkLlxuICAgIGlmIChuZXdDYXBhY2l0eSA8IG9sZENhcGFjaXR5KSB7XG4gICAgICBuZXdUYWlsID0gbmV3VGFpbCAmJiBuZXdUYWlsLnJlbW92ZUFmdGVyKG93bmVyLCAwLCBuZXdDYXBhY2l0eSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIG5ldyBvcmlnaW4gaXMgd2l0aGluIHRoZSB0YWlsLCB0aGVuIHdlIGRvIG5vdCBuZWVkIGEgcm9vdC5cbiAgICBpZiAobmV3T3JpZ2luID49IG5ld1RhaWxPZmZzZXQpIHtcbiAgICAgIG5ld09yaWdpbiAtPSBuZXdUYWlsT2Zmc2V0O1xuICAgICAgbmV3Q2FwYWNpdHkgLT0gbmV3VGFpbE9mZnNldDtcbiAgICAgIG5ld0xldmVsID0gU0hJRlQ7XG4gICAgICBuZXdSb290ID0gbnVsbDtcbiAgICAgIG5ld1RhaWwgPSBuZXdUYWlsICYmIG5ld1RhaWwucmVtb3ZlQmVmb3JlKG93bmVyLCAwLCBuZXdPcmlnaW4pO1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiB0aGUgcm9vdCBoYXMgYmVlbiB0cmltbWVkLCBnYXJiYWdlIGNvbGxlY3QuXG4gICAgfSBlbHNlIGlmIChuZXdPcmlnaW4gPiBvbGRPcmlnaW4gfHwgbmV3VGFpbE9mZnNldCA8IG9sZFRhaWxPZmZzZXQpIHtcbiAgICAgIG9mZnNldFNoaWZ0ID0gMDtcblxuICAgICAgLy8gSWRlbnRpZnkgdGhlIG5ldyB0b3Agcm9vdCBub2RlIG9mIHRoZSBzdWJ0cmVlIG9mIHRoZSBvbGQgcm9vdC5cbiAgICAgIHdoaWxlIChuZXdSb290KSB7XG4gICAgICAgIHZhciBiZWdpbkluZGV4ID0gKG5ld09yaWdpbiA+Pj4gbmV3TGV2ZWwpICYgTUFTSztcbiAgICAgICAgaWYgKGJlZ2luSW5kZXggIT09IChuZXdUYWlsT2Zmc2V0ID4+PiBuZXdMZXZlbCkgJiBNQVNLKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJlZ2luSW5kZXgpIHtcbiAgICAgICAgICBvZmZzZXRTaGlmdCArPSAoMSA8PCBuZXdMZXZlbCkgKiBiZWdpbkluZGV4O1xuICAgICAgICB9XG4gICAgICAgIG5ld0xldmVsIC09IFNISUZUO1xuICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5hcnJheVtiZWdpbkluZGV4XTtcbiAgICAgIH1cblxuICAgICAgLy8gVHJpbSB0aGUgbmV3IHNpZGVzIG9mIHRoZSBuZXcgcm9vdC5cbiAgICAgIGlmIChuZXdSb290ICYmIG5ld09yaWdpbiA+IG9sZE9yaWdpbikge1xuICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5yZW1vdmVCZWZvcmUob3duZXIsIG5ld0xldmVsLCBuZXdPcmlnaW4gLSBvZmZzZXRTaGlmdCk7XG4gICAgICB9XG4gICAgICBpZiAobmV3Um9vdCAmJiBuZXdUYWlsT2Zmc2V0IDwgb2xkVGFpbE9mZnNldCkge1xuICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5yZW1vdmVBZnRlcihvd25lciwgbmV3TGV2ZWwsIG5ld1RhaWxPZmZzZXQgLSBvZmZzZXRTaGlmdCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0U2hpZnQpIHtcbiAgICAgICAgbmV3T3JpZ2luIC09IG9mZnNldFNoaWZ0O1xuICAgICAgICBuZXdDYXBhY2l0eSAtPSBvZmZzZXRTaGlmdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobGlzdC5fX293bmVySUQpIHtcbiAgICAgIGxpc3Quc2l6ZSA9IG5ld0NhcGFjaXR5IC0gbmV3T3JpZ2luO1xuICAgICAgbGlzdC5fb3JpZ2luID0gbmV3T3JpZ2luO1xuICAgICAgbGlzdC5fY2FwYWNpdHkgPSBuZXdDYXBhY2l0eTtcbiAgICAgIGxpc3QuX2xldmVsID0gbmV3TGV2ZWw7XG4gICAgICBsaXN0Ll9yb290ID0gbmV3Um9vdDtcbiAgICAgIGxpc3QuX3RhaWwgPSBuZXdUYWlsO1xuICAgICAgbGlzdC5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICBsaXN0Ll9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG4gICAgcmV0dXJuIG1ha2VMaXN0KG5ld09yaWdpbiwgbmV3Q2FwYWNpdHksIG5ld0xldmVsLCBuZXdSb290LCBuZXdUYWlsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlSW50b0xpc3RXaXRoKGxpc3QsIG1lcmdlciwgaXRlcmFibGVzKSB7XG4gICAgdmFyIGl0ZXJzID0gW107XG4gICAgdmFyIG1heFNpemUgPSAwO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBpdGVyYWJsZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZXNbaWldO1xuICAgICAgdmFyIGl0ZXIgPSBJbmRleGVkSXRlcmFibGUodmFsdWUpO1xuICAgICAgaWYgKGl0ZXIuc2l6ZSA+IG1heFNpemUpIHtcbiAgICAgICAgbWF4U2l6ZSA9IGl0ZXIuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNJdGVyYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgaXRlciA9IGl0ZXIubWFwKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIGZyb21KUyh2KX0pO1xuICAgICAgfVxuICAgICAgaXRlcnMucHVzaChpdGVyKTtcbiAgICB9XG4gICAgaWYgKG1heFNpemUgPiBsaXN0LnNpemUpIHtcbiAgICAgIGxpc3QgPSBsaXN0LnNldFNpemUobWF4U2l6ZSk7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZUludG9Db2xsZWN0aW9uV2l0aChsaXN0LCBtZXJnZXIsIGl0ZXJzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhaWxPZmZzZXQoc2l6ZSkge1xuICAgIHJldHVybiBzaXplIDwgU0laRSA/IDAgOiAoKChzaXplIC0gMSkgPj4+IFNISUZUKSA8PCBTSElGVCk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhPcmRlcmVkTWFwLCBNYXApO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIE9yZGVyZWRNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlPcmRlcmVkTWFwKCkgOlxuICAgICAgICBpc09yZGVyZWRNYXAodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eU9yZGVyZWRNYXAoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKG1hcCApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IEtleWVkSXRlcmFibGUodmFsdWUpO1xuICAgICAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgICAgICAgaXRlci5mb3JFYWNoKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIG1hcC5zZXQoaywgdil9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgT3JkZXJlZE1hcC5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdPcmRlcmVkTWFwIHsnLCAnfScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaywgbm90U2V0VmFsdWUpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuX21hcC5nZXQoayk7XG4gICAgICByZXR1cm4gaW5kZXggIT09IHVuZGVmaW5lZCA/IHRoaXMuX2xpc3QuZ2V0KGluZGV4KVsxXSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgdGhpcy5fbWFwLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX2xpc3QuY2xlYXIoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlPcmRlcmVkTWFwKCk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgIHJldHVybiB1cGRhdGVPcmRlcmVkTWFwKHRoaXMsIGssIHYpO1xuICAgIH07XG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gdXBkYXRlT3JkZXJlZE1hcCh0aGlzLCBrLCBOT1RfU0VUKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUud2FzQWx0ZXJlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC53YXNBbHRlcmVkKCkgfHwgdGhpcy5fbGlzdC53YXNBbHRlcmVkKCk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy5fbGlzdC5fX2l0ZXJhdGUoXG4gICAgICAgIGZ1bmN0aW9uKGVudHJ5ICkge3JldHVybiBlbnRyeSAmJiBmbihlbnRyeVsxXSwgZW50cnlbMF0sIHRoaXMkMCl9LFxuICAgICAgICByZXZlcnNlXG4gICAgICApO1xuICAgIH07XG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xpc3QuZnJvbUVudHJ5U2VxKCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcbiAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAuX19lbnN1cmVPd25lcihvd25lcklEKTtcbiAgICAgIHZhciBuZXdMaXN0ID0gdGhpcy5fbGlzdC5fX2Vuc3VyZU93bmVyKG93bmVySUQpO1xuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3TWFwO1xuICAgICAgICB0aGlzLl9saXN0ID0gbmV3TGlzdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZU9yZGVyZWRNYXAobmV3TWFwLCBuZXdMaXN0LCBvd25lcklELCB0aGlzLl9faGFzaCk7XG4gICAgfTtcblxuXG4gIGZ1bmN0aW9uIGlzT3JkZXJlZE1hcChtYXliZU9yZGVyZWRNYXApIHtcbiAgICByZXR1cm4gaXNNYXAobWF5YmVPcmRlcmVkTWFwKSAmJiBpc09yZGVyZWQobWF5YmVPcmRlcmVkTWFwKTtcbiAgfVxuXG4gIE9yZGVyZWRNYXAuaXNPcmRlcmVkTWFwID0gaXNPcmRlcmVkTWFwO1xuXG4gIE9yZGVyZWRNYXAucHJvdG90eXBlW0lTX09SREVSRURfU0VOVElORUxdID0gdHJ1ZTtcbiAgT3JkZXJlZE1hcC5wcm90b3R5cGVbREVMRVRFXSA9IE9yZGVyZWRNYXAucHJvdG90eXBlLnJlbW92ZTtcblxuXG5cbiAgZnVuY3Rpb24gbWFrZU9yZGVyZWRNYXAobWFwLCBsaXN0LCBvd25lcklELCBoYXNoKSB7XG4gICAgdmFyIG9tYXAgPSBPYmplY3QuY3JlYXRlKE9yZGVyZWRNYXAucHJvdG90eXBlKTtcbiAgICBvbWFwLnNpemUgPSBtYXAgPyBtYXAuc2l6ZSA6IDA7XG4gICAgb21hcC5fbWFwID0gbWFwO1xuICAgIG9tYXAuX2xpc3QgPSBsaXN0O1xuICAgIG9tYXAuX19vd25lcklEID0gb3duZXJJRDtcbiAgICBvbWFwLl9faGFzaCA9IGhhc2g7XG4gICAgcmV0dXJuIG9tYXA7XG4gIH1cblxuICB2YXIgRU1QVFlfT1JERVJFRF9NQVA7XG4gIGZ1bmN0aW9uIGVtcHR5T3JkZXJlZE1hcCgpIHtcbiAgICByZXR1cm4gRU1QVFlfT1JERVJFRF9NQVAgfHwgKEVNUFRZX09SREVSRURfTUFQID0gbWFrZU9yZGVyZWRNYXAoZW1wdHlNYXAoKSwgZW1wdHlMaXN0KCkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU9yZGVyZWRNYXAob21hcCwgaywgdikge1xuICAgIHZhciBtYXAgPSBvbWFwLl9tYXA7XG4gICAgdmFyIGxpc3QgPSBvbWFwLl9saXN0O1xuICAgIHZhciBpID0gbWFwLmdldChrKTtcbiAgICB2YXIgaGFzID0gaSAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBuZXdNYXA7XG4gICAgdmFyIG5ld0xpc3Q7XG4gICAgaWYgKHYgPT09IE5PVF9TRVQpIHsgLy8gcmVtb3ZlZFxuICAgICAgaWYgKCFoYXMpIHtcbiAgICAgICAgcmV0dXJuIG9tYXA7XG4gICAgICB9XG4gICAgICBpZiAobGlzdC5zaXplID49IFNJWkUgJiYgbGlzdC5zaXplID49IG1hcC5zaXplICogMikge1xuICAgICAgICBuZXdMaXN0ID0gbGlzdC5maWx0ZXIoZnVuY3Rpb24oZW50cnksIGlkeCkgIHtyZXR1cm4gZW50cnkgIT09IHVuZGVmaW5lZCAmJiBpICE9PSBpZHh9KTtcbiAgICAgICAgbmV3TWFwID0gbmV3TGlzdC50b0tleWVkU2VxKCkubWFwKGZ1bmN0aW9uKGVudHJ5ICkge3JldHVybiBlbnRyeVswXX0pLmZsaXAoKS50b01hcCgpO1xuICAgICAgICBpZiAob21hcC5fX293bmVySUQpIHtcbiAgICAgICAgICBuZXdNYXAuX19vd25lcklEID0gbmV3TGlzdC5fX293bmVySUQgPSBvbWFwLl9fb3duZXJJRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3TWFwID0gbWFwLnJlbW92ZShrKTtcbiAgICAgICAgbmV3TGlzdCA9IGkgPT09IGxpc3Quc2l6ZSAtIDEgPyBsaXN0LnBvcCgpIDogbGlzdC5zZXQoaSwgdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcykge1xuICAgICAgICBpZiAodiA9PT0gbGlzdC5nZXQoaSlbMV0pIHtcbiAgICAgICAgICByZXR1cm4gb21hcDtcbiAgICAgICAgfVxuICAgICAgICBuZXdNYXAgPSBtYXA7XG4gICAgICAgIG5ld0xpc3QgPSBsaXN0LnNldChpLCBbaywgdl0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3TWFwID0gbWFwLnNldChrLCBsaXN0LnNpemUpO1xuICAgICAgICBuZXdMaXN0ID0gbGlzdC5zZXQobGlzdC5zaXplLCBbaywgdl0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob21hcC5fX293bmVySUQpIHtcbiAgICAgIG9tYXAuc2l6ZSA9IG5ld01hcC5zaXplO1xuICAgICAgb21hcC5fbWFwID0gbmV3TWFwO1xuICAgICAgb21hcC5fbGlzdCA9IG5ld0xpc3Q7XG4gICAgICBvbWFwLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvbWFwO1xuICAgIH1cbiAgICByZXR1cm4gbWFrZU9yZGVyZWRNYXAobmV3TWFwLCBuZXdMaXN0KTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFRvS2V5ZWRTZXF1ZW5jZSwgS2V5ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIFRvS2V5ZWRTZXF1ZW5jZShpbmRleGVkLCB1c2VLZXlzKSB7XG4gICAgICB0aGlzLl9pdGVyID0gaW5kZXhlZDtcbiAgICAgIHRoaXMuX3VzZUtleXMgPSB1c2VLZXlzO1xuICAgICAgdGhpcy5zaXplID0gaW5kZXhlZC5zaXplO1xuICAgIH1cblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuZ2V0KGtleSwgbm90U2V0VmFsdWUpO1xuICAgIH07XG5cbiAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuaGFzKGtleSk7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUudmFsdWVTZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLnZhbHVlU2VxKCk7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uKCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSByZXZlcnNlRmFjdG9yeSh0aGlzLCB0cnVlKTtcbiAgICAgIGlmICghdGhpcy5fdXNlS2V5cykge1xuICAgICAgICByZXZlcnNlZFNlcXVlbmNlLnZhbHVlU2VxID0gZnVuY3Rpb24oKSAge3JldHVybiB0aGlzJDAuX2l0ZXIudG9TZXEoKS5yZXZlcnNlKCl9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldmVyc2VkU2VxdWVuY2U7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24obWFwcGVyLCBjb250ZXh0KSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgbWFwcGVkU2VxdWVuY2UgPSBtYXBGYWN0b3J5KHRoaXMsIG1hcHBlciwgY29udGV4dCk7XG4gICAgICBpZiAoIXRoaXMuX3VzZUtleXMpIHtcbiAgICAgICAgbWFwcGVkU2VxdWVuY2UudmFsdWVTZXEgPSBmdW5jdGlvbigpICB7cmV0dXJuIHRoaXMkMC5faXRlci50b1NlcSgpLm1hcChtYXBwZXIsIGNvbnRleHQpfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXBwZWRTZXF1ZW5jZTtcbiAgICB9O1xuXG4gICAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIGlpO1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRlKFxuICAgICAgICB0aGlzLl91c2VLZXlzID9cbiAgICAgICAgICBmdW5jdGlvbih2LCBrKSAge3JldHVybiBmbih2LCBrLCB0aGlzJDApfSA6XG4gICAgICAgICAgKChpaSA9IHJldmVyc2UgPyByZXNvbHZlU2l6ZSh0aGlzKSA6IDApLFxuICAgICAgICAgICAgZnVuY3Rpb24odiApIHtyZXR1cm4gZm4odiwgcmV2ZXJzZSA/IC0taWkgOiBpaSsrLCB0aGlzJDApfSksXG4gICAgICAgIHJldmVyc2VcbiAgICAgICk7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIGlmICh0aGlzLl91c2VLZXlzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIGlpID0gcmV2ZXJzZSA/IHJlc29sdmVTaXplKHRoaXMpIDogMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgcmV2ZXJzZSA/IC0taWkgOiBpaSsrLCBzdGVwLnZhbHVlLCBzdGVwKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZVtJU19PUkRFUkVEX1NFTlRJTkVMXSA9IHRydWU7XG5cblxuICBjcmVhdGVDbGFzcyhUb0luZGV4ZWRTZXF1ZW5jZSwgSW5kZXhlZFNlcSk7XG4gICAgZnVuY3Rpb24gVG9JbmRleGVkU2VxdWVuY2UoaXRlcikge1xuICAgICAgdGhpcy5faXRlciA9IGl0ZXI7XG4gICAgICB0aGlzLnNpemUgPSBpdGVyLnNpemU7XG4gICAgfVxuXG4gICAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLmluY2x1ZGVzKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci5fX2l0ZXJhdGUoZnVuY3Rpb24odiApIHtyZXR1cm4gZm4odiwgaXRlcmF0aW9ucysrLCB0aGlzJDApfSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIFRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlci5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlLCBzdGVwKVxuICAgICAgfSk7XG4gICAgfTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoVG9TZXRTZXF1ZW5jZSwgU2V0U2VxKTtcbiAgICBmdW5jdGlvbiBUb1NldFNlcXVlbmNlKGl0ZXIpIHtcbiAgICAgIHRoaXMuX2l0ZXIgPSBpdGVyO1xuICAgICAgdGhpcy5zaXplID0gaXRlci5zaXplO1xuICAgIH1cblxuICAgIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuaW5jbHVkZXMoa2V5KTtcbiAgICB9O1xuXG4gICAgVG9TZXRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShmdW5jdGlvbih2ICkge3JldHVybiBmbih2LCB2LCB0aGlzJDApfSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICByZXR1cm4gc3RlcC5kb25lID8gc3RlcCA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBzdGVwLnZhbHVlLCBzdGVwLnZhbHVlLCBzdGVwKTtcbiAgICAgIH0pO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKEZyb21FbnRyaWVzU2VxdWVuY2UsIEtleWVkU2VxKTtcbiAgICBmdW5jdGlvbiBGcm9tRW50cmllc1NlcXVlbmNlKGVudHJpZXMpIHtcbiAgICAgIHRoaXMuX2l0ZXIgPSBlbnRyaWVzO1xuICAgICAgdGhpcy5zaXplID0gZW50cmllcy5zaXplO1xuICAgIH1cblxuICAgIEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlLmVudHJ5U2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci50b1NlcSgpO1xuICAgIH07XG5cbiAgICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRlKGZ1bmN0aW9uKGVudHJ5ICkge1xuICAgICAgICAvLyBDaGVjayBpZiBlbnRyeSBleGlzdHMgZmlyc3Qgc28gYXJyYXkgYWNjZXNzIGRvZXNuJ3QgdGhyb3cgZm9yIGhvbGVzXG4gICAgICAgIC8vIGluIHRoZSBwYXJlbnQgaXRlcmF0aW9uLlxuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YWxpZGF0ZUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB2YXIgaW5kZXhlZEl0ZXJhYmxlID0gaXNJdGVyYWJsZShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIGZuKFxuICAgICAgICAgICAgaW5kZXhlZEl0ZXJhYmxlID8gZW50cnkuZ2V0KDEpIDogZW50cnlbMV0sXG4gICAgICAgICAgICBpbmRleGVkSXRlcmFibGUgPyBlbnRyeS5nZXQoMCkgOiBlbnRyeVswXSxcbiAgICAgICAgICAgIHRoaXMkMFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlci5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgIC8vIENoZWNrIGlmIGVudHJ5IGV4aXN0cyBmaXJzdCBzbyBhcnJheSBhY2Nlc3MgZG9lc24ndCB0aHJvdyBmb3IgaG9sZXNcbiAgICAgICAgICAvLyBpbiB0aGUgcGFyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlRW50cnkoZW50cnkpO1xuICAgICAgICAgICAgdmFyIGluZGV4ZWRJdGVyYWJsZSA9IGlzSXRlcmFibGUoZW50cnkpO1xuICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUoXG4gICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgIGluZGV4ZWRJdGVyYWJsZSA/IGVudHJ5LmdldCgwKSA6IGVudHJ5WzBdLFxuICAgICAgICAgICAgICBpbmRleGVkSXRlcmFibGUgPyBlbnRyeS5nZXQoMSkgOiBlbnRyeVsxXSxcbiAgICAgICAgICAgICAgc3RlcFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cblxuICBUb0luZGV4ZWRTZXF1ZW5jZS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPVxuICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLmNhY2hlUmVzdWx0ID1cbiAgVG9TZXRTZXF1ZW5jZS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPVxuICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9XG4gICAgY2FjaGVSZXN1bHRUaHJvdWdoO1xuXG5cbiAgZnVuY3Rpb24gZmxpcEZhY3RvcnkoaXRlcmFibGUpIHtcbiAgICB2YXIgZmxpcFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICBmbGlwU2VxdWVuY2UuX2l0ZXIgPSBpdGVyYWJsZTtcbiAgICBmbGlwU2VxdWVuY2Uuc2l6ZSA9IGl0ZXJhYmxlLnNpemU7XG4gICAgZmxpcFNlcXVlbmNlLmZsaXAgPSBmdW5jdGlvbigpICB7cmV0dXJuIGl0ZXJhYmxlfTtcbiAgICBmbGlwU2VxdWVuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZXZlcnNlZFNlcXVlbmNlID0gaXRlcmFibGUucmV2ZXJzZS5hcHBseSh0aGlzKTsgLy8gc3VwZXIucmV2ZXJzZSgpXG4gICAgICByZXZlcnNlZFNlcXVlbmNlLmZsaXAgPSBmdW5jdGlvbigpICB7cmV0dXJuIGl0ZXJhYmxlLnJldmVyc2UoKX07XG4gICAgICByZXR1cm4gcmV2ZXJzZWRTZXF1ZW5jZTtcbiAgICB9O1xuICAgIGZsaXBTZXF1ZW5jZS5oYXMgPSBmdW5jdGlvbihrZXkgKSB7cmV0dXJuIGl0ZXJhYmxlLmluY2x1ZGVzKGtleSl9O1xuICAgIGZsaXBTZXF1ZW5jZS5pbmNsdWRlcyA9IGZ1bmN0aW9uKGtleSApIHtyZXR1cm4gaXRlcmFibGUuaGFzKGtleSl9O1xuICAgIGZsaXBTZXF1ZW5jZS5jYWNoZVJlc3VsdCA9IGNhY2hlUmVzdWx0VGhyb3VnaDtcbiAgICBmbGlwU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gZm4oaywgdiwgdGhpcyQwKSAhPT0gZmFsc2V9LCByZXZlcnNlKTtcbiAgICB9XG4gICAgZmxpcFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIGlmICh0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKCFzdGVwLmRvbmUpIHtcbiAgICAgICAgICAgIHZhciBrID0gc3RlcC52YWx1ZVswXTtcbiAgICAgICAgICAgIHN0ZXAudmFsdWVbMF0gPSBzdGVwLnZhbHVlWzFdO1xuICAgICAgICAgICAgc3RlcC52YWx1ZVsxXSA9IGs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYWJsZS5fX2l0ZXJhdG9yKFxuICAgICAgICB0eXBlID09PSBJVEVSQVRFX1ZBTFVFUyA/IElURVJBVEVfS0VZUyA6IElURVJBVEVfVkFMVUVTLFxuICAgICAgICByZXZlcnNlXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZmxpcFNlcXVlbmNlO1xuICB9XG5cblxuICBmdW5jdGlvbiBtYXBGYWN0b3J5KGl0ZXJhYmxlLCBtYXBwZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgbWFwcGVkU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIG1hcHBlZFNlcXVlbmNlLnNpemUgPSBpdGVyYWJsZS5zaXplO1xuICAgIG1hcHBlZFNlcXVlbmNlLmhhcyA9IGZ1bmN0aW9uKGtleSApIHtyZXR1cm4gaXRlcmFibGUuaGFzKGtleSl9O1xuICAgIG1hcHBlZFNlcXVlbmNlLmdldCA9IGZ1bmN0aW9uKGtleSwgbm90U2V0VmFsdWUpICB7XG4gICAgICB2YXIgdiA9IGl0ZXJhYmxlLmdldChrZXksIE5PVF9TRVQpO1xuICAgICAgcmV0dXJuIHYgPT09IE5PVF9TRVQgP1xuICAgICAgICBub3RTZXRWYWx1ZSA6XG4gICAgICAgIG1hcHBlci5jYWxsKGNvbnRleHQsIHYsIGtleSwgaXRlcmFibGUpO1xuICAgIH07XG4gICAgbWFwcGVkU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiBpdGVyYWJsZS5fX2l0ZXJhdGUoXG4gICAgICAgIGZ1bmN0aW9uKHYsIGssIGMpICB7cmV0dXJuIGZuKG1hcHBlci5jYWxsKGNvbnRleHQsIHYsIGssIGMpLCBrLCB0aGlzJDApICE9PSBmYWxzZX0sXG4gICAgICAgIHJldmVyc2VcbiAgICAgICk7XG4gICAgfVxuICAgIG1hcHBlZFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uICh0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICB2YXIga2V5ID0gZW50cnlbMF07XG4gICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIG1hcHBlci5jYWxsKGNvbnRleHQsIGVudHJ5WzFdLCBrZXksIGl0ZXJhYmxlKSxcbiAgICAgICAgICBzdGVwXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcHBlZFNlcXVlbmNlO1xuICB9XG5cblxuICBmdW5jdGlvbiByZXZlcnNlRmFjdG9yeShpdGVyYWJsZSwgdXNlS2V5cykge1xuICAgIHZhciByZXZlcnNlZFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLl9pdGVyID0gaXRlcmFibGU7XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5zaXplID0gaXRlcmFibGUuc2l6ZTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLnJldmVyc2UgPSBmdW5jdGlvbigpICB7cmV0dXJuIGl0ZXJhYmxlfTtcbiAgICBpZiAoaXRlcmFibGUuZmxpcCkge1xuICAgICAgcmV2ZXJzZWRTZXF1ZW5jZS5mbGlwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZmxpcFNlcXVlbmNlID0gZmxpcEZhY3RvcnkoaXRlcmFibGUpO1xuICAgICAgICBmbGlwU2VxdWVuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGUuZmxpcCgpfTtcbiAgICAgICAgcmV0dXJuIGZsaXBTZXF1ZW5jZTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldmVyc2VkU2VxdWVuY2UuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkgXG4gICAgICB7cmV0dXJuIGl0ZXJhYmxlLmdldCh1c2VLZXlzID8ga2V5IDogLTEgLSBrZXksIG5vdFNldFZhbHVlKX07XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5oYXMgPSBmdW5jdGlvbihrZXkgKVxuICAgICAge3JldHVybiBpdGVyYWJsZS5oYXModXNlS2V5cyA/IGtleSA6IC0xIC0ga2V5KX07XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5pbmNsdWRlcyA9IGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBpdGVyYWJsZS5pbmNsdWRlcyh2YWx1ZSl9O1xuICAgIHJldmVyc2VkU2VxdWVuY2UuY2FjaGVSZXN1bHQgPSBjYWNoZVJlc3VsdFRocm91Z2g7XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gZm4odiwgaywgdGhpcyQwKX0sICFyZXZlcnNlKTtcbiAgICB9O1xuICAgIHJldmVyc2VkU2VxdWVuY2UuX19pdGVyYXRvciA9XG4gICAgICBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSAge3JldHVybiBpdGVyYWJsZS5fX2l0ZXJhdG9yKHR5cGUsICFyZXZlcnNlKX07XG4gICAgcmV0dXJuIHJldmVyc2VkU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGZpbHRlckZhY3RvcnkoaXRlcmFibGUsIHByZWRpY2F0ZSwgY29udGV4dCwgdXNlS2V5cykge1xuICAgIHZhciBmaWx0ZXJTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgaWYgKHVzZUtleXMpIHtcbiAgICAgIGZpbHRlclNlcXVlbmNlLmhhcyA9IGZ1bmN0aW9uKGtleSApIHtcbiAgICAgICAgdmFyIHYgPSBpdGVyYWJsZS5nZXQoa2V5LCBOT1RfU0VUKTtcbiAgICAgICAgcmV0dXJuIHYgIT09IE5PVF9TRVQgJiYgISFwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrZXksIGl0ZXJhYmxlKTtcbiAgICAgIH07XG4gICAgICBmaWx0ZXJTZXF1ZW5jZS5nZXQgPSBmdW5jdGlvbihrZXksIG5vdFNldFZhbHVlKSAge1xuICAgICAgICB2YXIgdiA9IGl0ZXJhYmxlLmdldChrZXksIE5PVF9TRVQpO1xuICAgICAgICByZXR1cm4gdiAhPT0gTk9UX1NFVCAmJiBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrZXksIGl0ZXJhYmxlKSA/XG4gICAgICAgICAgdiA6IG5vdFNldFZhbHVlO1xuICAgICAgfTtcbiAgICB9XG4gICAgZmlsdGVyU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrLCBjKSAge1xuICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgYykpIHtcbiAgICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgICAgcmV0dXJuIGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucyAtIDEsIHRoaXMkMCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHJldmVyc2UpO1xuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcbiAgICBmaWx0ZXJTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbiAodHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgdmFyIGtleSA9IGVudHJ5WzBdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGVudHJ5WzFdO1xuICAgICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2YWx1ZSwga2V5LCBpdGVyYWJsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIHVzZUtleXMgPyBrZXkgOiBpdGVyYXRpb25zKyssIHZhbHVlLCBzdGVwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGNvdW50QnlGYWN0b3J5KGl0ZXJhYmxlLCBncm91cGVyLCBjb250ZXh0KSB7XG4gICAgdmFyIGdyb3VwcyA9IE1hcCgpLmFzTXV0YWJsZSgpO1xuICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge1xuICAgICAgZ3JvdXBzLnVwZGF0ZShcbiAgICAgICAgZ3JvdXBlci5jYWxsKGNvbnRleHQsIHYsIGssIGl0ZXJhYmxlKSxcbiAgICAgICAgMCxcbiAgICAgICAgZnVuY3Rpb24oYSApIHtyZXR1cm4gYSArIDF9XG4gICAgICApO1xuICAgIH0pO1xuICAgIHJldHVybiBncm91cHMuYXNJbW11dGFibGUoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gZ3JvdXBCeUZhY3RvcnkoaXRlcmFibGUsIGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgaXNLZXllZEl0ZXIgPSBpc0tleWVkKGl0ZXJhYmxlKTtcbiAgICB2YXIgZ3JvdXBzID0gKGlzT3JkZXJlZChpdGVyYWJsZSkgPyBPcmRlcmVkTWFwKCkgOiBNYXAoKSkuYXNNdXRhYmxlKCk7XG4gICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICBncm91cHMudXBkYXRlKFxuICAgICAgICBncm91cGVyLmNhbGwoY29udGV4dCwgdiwgaywgaXRlcmFibGUpLFxuICAgICAgICBmdW5jdGlvbihhICkge3JldHVybiAoYSA9IGEgfHwgW10sIGEucHVzaChpc0tleWVkSXRlciA/IFtrLCB2XSA6IHYpLCBhKX1cbiAgICAgICk7XG4gICAgfSk7XG4gICAgdmFyIGNvZXJjZSA9IGl0ZXJhYmxlQ2xhc3MoaXRlcmFibGUpO1xuICAgIHJldHVybiBncm91cHMubWFwKGZ1bmN0aW9uKGFyciApIHtyZXR1cm4gcmVpZnkoaXRlcmFibGUsIGNvZXJjZShhcnIpKX0pO1xuICB9XG5cblxuICBmdW5jdGlvbiBzbGljZUZhY3RvcnkoaXRlcmFibGUsIGJlZ2luLCBlbmQsIHVzZUtleXMpIHtcbiAgICB2YXIgb3JpZ2luYWxTaXplID0gaXRlcmFibGUuc2l6ZTtcblxuICAgIC8vIFNhbml0aXplIGJlZ2luICYgZW5kIHVzaW5nIHRoaXMgc2hvcnRoYW5kIGZvciBUb0ludDMyKGFyZ3VtZW50KVxuICAgIC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b2ludDMyXG4gICAgaWYgKGJlZ2luICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJlZ2luID0gYmVnaW4gfCAwO1xuICAgIH1cbiAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGVuZCA9IGVuZCB8IDA7XG4gICAgfVxuXG4gICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgb3JpZ2luYWxTaXplKSkge1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgIH1cblxuICAgIHZhciByZXNvbHZlZEJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCBvcmlnaW5hbFNpemUpO1xuICAgIHZhciByZXNvbHZlZEVuZCA9IHJlc29sdmVFbmQoZW5kLCBvcmlnaW5hbFNpemUpO1xuXG4gICAgLy8gYmVnaW4gb3IgZW5kIHdpbGwgYmUgTmFOIGlmIHRoZXkgd2VyZSBwcm92aWRlZCBhcyBuZWdhdGl2ZSBudW1iZXJzIGFuZFxuICAgIC8vIHRoaXMgaXRlcmFibGUncyBzaXplIGlzIHVua25vd24uIEluIHRoYXQgY2FzZSwgY2FjaGUgZmlyc3Qgc28gdGhlcmUgaXNcbiAgICAvLyBhIGtub3duIHNpemUgYW5kIHRoZXNlIGRvIG5vdCByZXNvbHZlIHRvIE5hTi5cbiAgICBpZiAocmVzb2x2ZWRCZWdpbiAhPT0gcmVzb2x2ZWRCZWdpbiB8fCByZXNvbHZlZEVuZCAhPT0gcmVzb2x2ZWRFbmQpIHtcbiAgICAgIHJldHVybiBzbGljZUZhY3RvcnkoaXRlcmFibGUudG9TZXEoKS5jYWNoZVJlc3VsdCgpLCBiZWdpbiwgZW5kLCB1c2VLZXlzKTtcbiAgICB9XG5cbiAgICAvLyBOb3RlOiByZXNvbHZlZEVuZCBpcyB1bmRlZmluZWQgd2hlbiB0aGUgb3JpZ2luYWwgc2VxdWVuY2UncyBsZW5ndGggaXNcbiAgICAvLyB1bmtub3duIGFuZCB0aGlzIHNsaWNlIGRpZCBub3Qgc3VwcGx5IGFuIGVuZCBhbmQgc2hvdWxkIGNvbnRhaW4gYWxsXG4gICAgLy8gZWxlbWVudHMgYWZ0ZXIgcmVzb2x2ZWRCZWdpbi5cbiAgICAvLyBJbiB0aGF0IGNhc2UsIHJlc29sdmVkU2l6ZSB3aWxsIGJlIE5hTiBhbmQgc2xpY2VTaXplIHdpbGwgcmVtYWluIHVuZGVmaW5lZC5cbiAgICB2YXIgcmVzb2x2ZWRTaXplID0gcmVzb2x2ZWRFbmQgLSByZXNvbHZlZEJlZ2luO1xuICAgIHZhciBzbGljZVNpemU7XG4gICAgaWYgKHJlc29sdmVkU2l6ZSA9PT0gcmVzb2x2ZWRTaXplKSB7XG4gICAgICBzbGljZVNpemUgPSByZXNvbHZlZFNpemUgPCAwID8gMCA6IHJlc29sdmVkU2l6ZTtcbiAgICB9XG5cbiAgICB2YXIgc2xpY2VTZXEgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuXG4gICAgLy8gSWYgaXRlcmFibGUuc2l6ZSBpcyB1bmRlZmluZWQsIHRoZSBzaXplIG9mIHRoZSByZWFsaXplZCBzbGljZVNlcSBpc1xuICAgIC8vIHVua25vd24gYXQgdGhpcyBwb2ludCB1bmxlc3MgdGhlIG51bWJlciBvZiBpdGVtcyB0byBzbGljZSBpcyAwXG4gICAgc2xpY2VTZXEuc2l6ZSA9IHNsaWNlU2l6ZSA9PT0gMCA/IHNsaWNlU2l6ZSA6IGl0ZXJhYmxlLnNpemUgJiYgc2xpY2VTaXplIHx8IHVuZGVmaW5lZDtcblxuICAgIGlmICghdXNlS2V5cyAmJiBpc1NlcShpdGVyYWJsZSkgJiYgc2xpY2VTaXplID49IDApIHtcbiAgICAgIHNsaWNlU2VxLmdldCA9IGZ1bmN0aW9uIChpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgICByZXR1cm4gaW5kZXggPj0gMCAmJiBpbmRleCA8IHNsaWNlU2l6ZSA/XG4gICAgICAgICAgaXRlcmFibGUuZ2V0KGluZGV4ICsgcmVzb2x2ZWRCZWdpbiwgbm90U2V0VmFsdWUpIDpcbiAgICAgICAgICBub3RTZXRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzbGljZVNlcS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICBpZiAoc2xpY2VTaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIHNraXBwZWQgPSAwO1xuICAgICAgdmFyIGlzU2tpcHBpbmcgPSB0cnVlO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICAgIGlmICghKGlzU2tpcHBpbmcgJiYgKGlzU2tpcHBpbmcgPSBza2lwcGVkKysgPCByZXNvbHZlZEJlZ2luKSkpIHtcbiAgICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgICAgcmV0dXJuIGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucyAtIDEsIHRoaXMkMCkgIT09IGZhbHNlICYmXG4gICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnMgIT09IHNsaWNlU2l6ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuXG4gICAgc2xpY2VTZXEuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHNsaWNlU2l6ZSAhPT0gMCAmJiByZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIC8vIERvbid0IGJvdGhlciBpbnN0YW50aWF0aW5nIHBhcmVudCBpdGVyYXRvciBpZiB0YWtpbmcgMC5cbiAgICAgIHZhciBpdGVyYXRvciA9IHNsaWNlU2l6ZSAhPT0gMCAmJiBpdGVyYWJsZS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgdmFyIHNraXBwZWQgPSAwO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHdoaWxlIChza2lwcGVkKysgPCByZXNvbHZlZEJlZ2luKSB7XG4gICAgICAgICAgaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgrK2l0ZXJhdGlvbnMgPiBzbGljZVNpemUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmICh1c2VLZXlzIHx8IHR5cGUgPT09IElURVJBVEVfVkFMVUVTKSB7XG4gICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSVRFUkFURV9LRVlTKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucyAtIDEsIHVuZGVmaW5lZCwgc3RlcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucyAtIDEsIHN0ZXAudmFsdWVbMV0sIHN0ZXApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2xpY2VTZXE7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHRha2VXaGlsZUZhY3RvcnkoaXRlcmFibGUsIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciB0YWtlU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIHRha2VTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgXG4gICAgICAgIHtyZXR1cm4gcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgYykgJiYgKytpdGVyYXRpb25zICYmIGZuKHYsIGssIHRoaXMkMCl9XG4gICAgICApO1xuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcbiAgICB0YWtlU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIGl0ZXJhdGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgaWYgKCFpdGVyYXRpbmcpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICB2YXIgayA9IGVudHJ5WzBdO1xuICAgICAgICB2YXIgdiA9IGVudHJ5WzFdO1xuICAgICAgICBpZiAoIXByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIHRoaXMkMCkpIHtcbiAgICAgICAgICBpdGVyYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGUgPT09IElURVJBVEVfRU5UUklFUyA/IHN0ZXAgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgc3RlcCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiB0YWtlU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHNraXBXaGlsZUZhY3RvcnkoaXRlcmFibGUsIHByZWRpY2F0ZSwgY29udGV4dCwgdXNlS2V5cykge1xuICAgIHZhciBza2lwU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIHNraXBTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGlzU2tpcHBpbmcgPSB0cnVlO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmICghKGlzU2tpcHBpbmcgJiYgKGlzU2tpcHBpbmcgPSBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkpKSB7XG4gICAgICAgICAgaXRlcmF0aW9ucysrO1xuICAgICAgICAgIHJldHVybiBmbih2LCB1c2VLZXlzID8gayA6IGl0ZXJhdGlvbnMgLSAxLCB0aGlzJDApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG4gICAgc2tpcFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBza2lwcGluZyA9IHRydWU7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIHN0ZXAsIGssIHY7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgICAgIGlmICh1c2VLZXlzIHx8IHR5cGUgPT09IElURVJBVEVfVkFMVUVTKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJVEVSQVRFX0tFWVMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCB1bmRlZmluZWQsIHN0ZXApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlWzFdLCBzdGVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBrID0gZW50cnlbMF07XG4gICAgICAgICAgdiA9IGVudHJ5WzFdO1xuICAgICAgICAgIHNraXBwaW5nICYmIChza2lwcGluZyA9IHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIHRoaXMkMCkpO1xuICAgICAgICB9IHdoaWxlIChza2lwcGluZyk7XG4gICAgICAgIHJldHVybiB0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMgPyBzdGVwIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGssIHYsIHN0ZXApO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gc2tpcFNlcXVlbmNlO1xuICB9XG5cblxuICBmdW5jdGlvbiBjb25jYXRGYWN0b3J5KGl0ZXJhYmxlLCB2YWx1ZXMpIHtcbiAgICB2YXIgaXNLZXllZEl0ZXJhYmxlID0gaXNLZXllZChpdGVyYWJsZSk7XG4gICAgdmFyIGl0ZXJzID0gW2l0ZXJhYmxlXS5jb25jYXQodmFsdWVzKS5tYXAoZnVuY3Rpb24odiApIHtcbiAgICAgIGlmICghaXNJdGVyYWJsZSh2KSkge1xuICAgICAgICB2ID0gaXNLZXllZEl0ZXJhYmxlID9cbiAgICAgICAgICBrZXllZFNlcUZyb21WYWx1ZSh2KSA6XG4gICAgICAgICAgaW5kZXhlZFNlcUZyb21WYWx1ZShBcnJheS5pc0FycmF5KHYpID8gdiA6IFt2XSk7XG4gICAgICB9IGVsc2UgaWYgKGlzS2V5ZWRJdGVyYWJsZSkge1xuICAgICAgICB2ID0gS2V5ZWRJdGVyYWJsZSh2KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2O1xuICAgIH0pLmZpbHRlcihmdW5jdGlvbih2ICkge3JldHVybiB2LnNpemUgIT09IDB9KTtcblxuICAgIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICB9XG5cbiAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgc2luZ2xldG9uID0gaXRlcnNbMF07XG4gICAgICBpZiAoc2luZ2xldG9uID09PSBpdGVyYWJsZSB8fFxuICAgICAgICAgIGlzS2V5ZWRJdGVyYWJsZSAmJiBpc0tleWVkKHNpbmdsZXRvbikgfHxcbiAgICAgICAgICBpc0luZGV4ZWQoaXRlcmFibGUpICYmIGlzSW5kZXhlZChzaW5nbGV0b24pKSB7XG4gICAgICAgIHJldHVybiBzaW5nbGV0b247XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNvbmNhdFNlcSA9IG5ldyBBcnJheVNlcShpdGVycyk7XG4gICAgaWYgKGlzS2V5ZWRJdGVyYWJsZSkge1xuICAgICAgY29uY2F0U2VxID0gY29uY2F0U2VxLnRvS2V5ZWRTZXEoKTtcbiAgICB9IGVsc2UgaWYgKCFpc0luZGV4ZWQoaXRlcmFibGUpKSB7XG4gICAgICBjb25jYXRTZXEgPSBjb25jYXRTZXEudG9TZXRTZXEoKTtcbiAgICB9XG4gICAgY29uY2F0U2VxID0gY29uY2F0U2VxLmZsYXR0ZW4odHJ1ZSk7XG4gICAgY29uY2F0U2VxLnNpemUgPSBpdGVycy5yZWR1Y2UoXG4gICAgICBmdW5jdGlvbihzdW0sIHNlcSkgIHtcbiAgICAgICAgaWYgKHN1bSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHNpemUgPSBzZXEuc2l6ZTtcbiAgICAgICAgICBpZiAoc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VtICsgc2l6ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAwXG4gICAgKTtcbiAgICByZXR1cm4gY29uY2F0U2VxO1xuICB9XG5cblxuICBmdW5jdGlvbiBmbGF0dGVuRmFjdG9yeShpdGVyYWJsZSwgZGVwdGgsIHVzZUtleXMpIHtcbiAgICB2YXIgZmxhdFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICBmbGF0U2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgdmFyIHN0b3BwZWQgPSBmYWxzZTtcbiAgICAgIGZ1bmN0aW9uIGZsYXREZWVwKGl0ZXIsIGN1cnJlbnREZXB0aCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgICBpdGVyLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge1xuICAgICAgICAgIGlmICgoIWRlcHRoIHx8IGN1cnJlbnREZXB0aCA8IGRlcHRoKSAmJiBpc0l0ZXJhYmxlKHYpKSB7XG4gICAgICAgICAgICBmbGF0RGVlcCh2LCBjdXJyZW50RGVwdGggKyAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucysrLCB0aGlzJDApID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAhc3RvcHBlZDtcbiAgICAgICAgfSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICBmbGF0RGVlcChpdGVyYWJsZSwgMCk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9XG4gICAgZmxhdFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB3aGlsZSAoaXRlcmF0b3IpIHtcbiAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoc3RlcC5kb25lICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgaXRlcmF0b3IgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdiA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgaWYgKHR5cGUgPT09IElURVJBVEVfRU5UUklFUykge1xuICAgICAgICAgICAgdiA9IHZbMV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgoIWRlcHRoIHx8IHN0YWNrLmxlbmd0aCA8IGRlcHRoKSAmJiBpc0l0ZXJhYmxlKHYpKSB7XG4gICAgICAgICAgICBzdGFjay5wdXNoKGl0ZXJhdG9yKTtcbiAgICAgICAgICAgIGl0ZXJhdG9yID0gdi5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdXNlS2V5cyA/IHN0ZXAgOiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgdiwgc3RlcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZmxhdFNlcXVlbmNlO1xuICB9XG5cblxuICBmdW5jdGlvbiBmbGF0TWFwRmFjdG9yeShpdGVyYWJsZSwgbWFwcGVyLCBjb250ZXh0KSB7XG4gICAgdmFyIGNvZXJjZSA9IGl0ZXJhYmxlQ2xhc3MoaXRlcmFibGUpO1xuICAgIHJldHVybiBpdGVyYWJsZS50b1NlcSgpLm1hcChcbiAgICAgIGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIGNvZXJjZShtYXBwZXIuY2FsbChjb250ZXh0LCB2LCBrLCBpdGVyYWJsZSkpfVxuICAgICkuZmxhdHRlbih0cnVlKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gaW50ZXJwb3NlRmFjdG9yeShpdGVyYWJsZSwgc2VwYXJhdG9yKSB7XG4gICAgdmFyIGludGVycG9zZWRTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgaW50ZXJwb3NlZFNlcXVlbmNlLnNpemUgPSBpdGVyYWJsZS5zaXplICYmIGl0ZXJhYmxlLnNpemUgKiAyIC0xO1xuICAgIGludGVycG9zZWRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgXG4gICAgICAgIHtyZXR1cm4gKCFpdGVyYXRpb25zIHx8IGZuKHNlcGFyYXRvciwgaXRlcmF0aW9ucysrLCB0aGlzJDApICE9PSBmYWxzZSkgJiZcbiAgICAgICAgZm4odiwgaXRlcmF0aW9ucysrLCB0aGlzJDApICE9PSBmYWxzZX0sXG4gICAgICAgIHJldmVyc2VcbiAgICAgICk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuICAgIGludGVycG9zZWRTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIGlmICghc3RlcCB8fCBpdGVyYXRpb25zICUgMikge1xuICAgICAgICAgIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVyYXRpb25zICUgMiA/XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHNlcGFyYXRvcikgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlLCBzdGVwKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIGludGVycG9zZWRTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gc29ydEZhY3RvcnkoaXRlcmFibGUsIGNvbXBhcmF0b3IsIG1hcHBlcikge1xuICAgIGlmICghY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IGRlZmF1bHRDb21wYXJhdG9yO1xuICAgIH1cbiAgICB2YXIgaXNLZXllZEl0ZXJhYmxlID0gaXNLZXllZChpdGVyYWJsZSk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cmllcyA9IGl0ZXJhYmxlLnRvU2VxKCkubWFwKFxuICAgICAgZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gW2ssIHYsIGluZGV4KyssIG1hcHBlciA/IG1hcHBlcih2LCBrLCBpdGVyYWJsZSkgOiB2XX1cbiAgICApLnRvQXJyYXkoKTtcbiAgICBlbnRyaWVzLnNvcnQoZnVuY3Rpb24oYSwgYikgIHtyZXR1cm4gY29tcGFyYXRvcihhWzNdLCBiWzNdKSB8fCBhWzJdIC0gYlsyXX0pLmZvckVhY2goXG4gICAgICBpc0tleWVkSXRlcmFibGUgP1xuICAgICAgZnVuY3Rpb24odiwgaSkgIHsgZW50cmllc1tpXS5sZW5ndGggPSAyOyB9IDpcbiAgICAgIGZ1bmN0aW9uKHYsIGkpICB7IGVudHJpZXNbaV0gPSB2WzFdOyB9XG4gICAgKTtcbiAgICByZXR1cm4gaXNLZXllZEl0ZXJhYmxlID8gS2V5ZWRTZXEoZW50cmllcykgOlxuICAgICAgaXNJbmRleGVkKGl0ZXJhYmxlKSA/IEluZGV4ZWRTZXEoZW50cmllcykgOlxuICAgICAgU2V0U2VxKGVudHJpZXMpO1xuICB9XG5cblxuICBmdW5jdGlvbiBtYXhGYWN0b3J5KGl0ZXJhYmxlLCBjb21wYXJhdG9yLCBtYXBwZXIpIHtcbiAgICBpZiAoIWNvbXBhcmF0b3IpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSBkZWZhdWx0Q29tcGFyYXRvcjtcbiAgICB9XG4gICAgaWYgKG1hcHBlcikge1xuICAgICAgdmFyIGVudHJ5ID0gaXRlcmFibGUudG9TZXEoKVxuICAgICAgICAubWFwKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIFt2LCBtYXBwZXIodiwgaywgaXRlcmFibGUpXX0pXG4gICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24oYSwgYikgIHtyZXR1cm4gbWF4Q29tcGFyZShjb21wYXJhdG9yLCBhWzFdLCBiWzFdKSA/IGIgOiBhfSk7XG4gICAgICByZXR1cm4gZW50cnkgJiYgZW50cnlbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpdGVyYWJsZS5yZWR1Y2UoZnVuY3Rpb24oYSwgYikgIHtyZXR1cm4gbWF4Q29tcGFyZShjb21wYXJhdG9yLCBhLCBiKSA/IGIgOiBhfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWF4Q29tcGFyZShjb21wYXJhdG9yLCBhLCBiKSB7XG4gICAgdmFyIGNvbXAgPSBjb21wYXJhdG9yKGIsIGEpO1xuICAgIC8vIGIgaXMgY29uc2lkZXJlZCB0aGUgbmV3IG1heCBpZiB0aGUgY29tcGFyYXRvciBkZWNsYXJlcyB0aGVtIGVxdWFsLCBidXRcbiAgICAvLyB0aGV5IGFyZSBub3QgZXF1YWwgYW5kIGIgaXMgaW4gZmFjdCBhIG51bGxpc2ggdmFsdWUuXG4gICAgcmV0dXJuIChjb21wID09PSAwICYmIGIgIT09IGEgJiYgKGIgPT09IHVuZGVmaW5lZCB8fCBiID09PSBudWxsIHx8IGIgIT09IGIpKSB8fCBjb21wID4gMDtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gemlwV2l0aEZhY3Rvcnkoa2V5SXRlciwgemlwcGVyLCBpdGVycykge1xuICAgIHZhciB6aXBTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShrZXlJdGVyKTtcbiAgICB6aXBTZXF1ZW5jZS5zaXplID0gbmV3IEFycmF5U2VxKGl0ZXJzKS5tYXAoZnVuY3Rpb24oaSApIHtyZXR1cm4gaS5zaXplfSkubWluKCk7XG4gICAgLy8gTm90ZTogdGhpcyBhIGdlbmVyaWMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBfX2l0ZXJhdGUgaW4gdGVybXMgb2ZcbiAgICAvLyBfX2l0ZXJhdG9yIHdoaWNoIG1heSBiZSBtb3JlIGdlbmVyaWNhbGx5IHVzZWZ1bCBpbiB0aGUgZnV0dXJlLlxuICAgIHppcFNlcXVlbmNlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgICAvKiBnZW5lcmljOlxuICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgaXRlcmF0aW9ucysrO1xuICAgICAgICBpZiAoZm4oc3RlcC52YWx1ZVsxXSwgc3RlcC52YWx1ZVswXSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgICAgKi9cbiAgICAgIC8vIGluZGV4ZWQ6XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIHN0ZXA7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIGlmIChmbihzdGVwLnZhbHVlLCBpdGVyYXRpb25zKyssIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuICAgIHppcFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvcnMgPSBpdGVycy5tYXAoZnVuY3Rpb24oaSApXG4gICAgICAgIHtyZXR1cm4gKGkgPSBJdGVyYWJsZShpKSwgZ2V0SXRlcmF0b3IocmV2ZXJzZSA/IGkucmV2ZXJzZSgpIDogaSkpfVxuICAgICAgKTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBpc0RvbmUgPSBmYWxzZTtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcHM7XG4gICAgICAgIGlmICghaXNEb25lKSB7XG4gICAgICAgICAgc3RlcHMgPSBpdGVyYXRvcnMubWFwKGZ1bmN0aW9uKGkgKSB7cmV0dXJuIGkubmV4dCgpfSk7XG4gICAgICAgICAgaXNEb25lID0gc3RlcHMuc29tZShmdW5jdGlvbihzICkge3JldHVybiBzLmRvbmV9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEb25lKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgaXRlcmF0aW9ucysrLFxuICAgICAgICAgIHppcHBlci5hcHBseShudWxsLCBzdGVwcy5tYXAoZnVuY3Rpb24ocyApIHtyZXR1cm4gcy52YWx1ZX0pKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gemlwU2VxdWVuY2VcbiAgfVxuXG5cbiAgLy8gI3ByYWdtYSBIZWxwZXIgRnVuY3Rpb25zXG5cbiAgZnVuY3Rpb24gcmVpZnkoaXRlciwgc2VxKSB7XG4gICAgcmV0dXJuIGlzU2VxKGl0ZXIpID8gc2VxIDogaXRlci5jb25zdHJ1Y3RvcihzZXEpO1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVFbnRyeShlbnRyeSkge1xuICAgIGlmIChlbnRyeSAhPT0gT2JqZWN0KGVudHJ5KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgW0ssIFZdIHR1cGxlOiAnICsgZW50cnkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVTaXplKGl0ZXIpIHtcbiAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgIHJldHVybiBlbnN1cmVTaXplKGl0ZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXRlcmFibGVDbGFzcyhpdGVyYWJsZSkge1xuICAgIHJldHVybiBpc0tleWVkKGl0ZXJhYmxlKSA/IEtleWVkSXRlcmFibGUgOlxuICAgICAgaXNJbmRleGVkKGl0ZXJhYmxlKSA/IEluZGV4ZWRJdGVyYWJsZSA6XG4gICAgICBTZXRJdGVyYWJsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VTZXF1ZW5jZShpdGVyYWJsZSkge1xuICAgIHJldHVybiBPYmplY3QuY3JlYXRlKFxuICAgICAgKFxuICAgICAgICBpc0tleWVkKGl0ZXJhYmxlKSA/IEtleWVkU2VxIDpcbiAgICAgICAgaXNJbmRleGVkKGl0ZXJhYmxlKSA/IEluZGV4ZWRTZXEgOlxuICAgICAgICBTZXRTZXFcbiAgICAgICkucHJvdG90eXBlXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhY2hlUmVzdWx0VGhyb3VnaCgpIHtcbiAgICBpZiAodGhpcy5faXRlci5jYWNoZVJlc3VsdCkge1xuICAgICAgdGhpcy5faXRlci5jYWNoZVJlc3VsdCgpO1xuICAgICAgdGhpcy5zaXplID0gdGhpcy5faXRlci5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBTZXEucHJvdG90eXBlLmNhY2hlUmVzdWx0LmNhbGwodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdENvbXBhcmF0b3IoYSwgYikge1xuICAgIHJldHVybiBhID4gYiA/IDEgOiBhIDwgYiA/IC0xIDogMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcmNlSXRlcmF0b3Ioa2V5UGF0aCkge1xuICAgIHZhciBpdGVyID0gZ2V0SXRlcmF0b3Ioa2V5UGF0aCk7XG4gICAgaWYgKCFpdGVyKSB7XG4gICAgICAvLyBBcnJheSBtaWdodCBub3QgYmUgaXRlcmFibGUgaW4gdGhpcyBlbnZpcm9ubWVudCwgc28gd2UgbmVlZCBhIGZhbGxiYWNrXG4gICAgICAvLyB0byBvdXIgd3JhcHBlZCB0eXBlLlxuICAgICAgaWYgKCFpc0FycmF5TGlrZShrZXlQYXRoKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBpdGVyYWJsZSBvciBhcnJheS1saWtlOiAnICsga2V5UGF0aCk7XG4gICAgICB9XG4gICAgICBpdGVyID0gZ2V0SXRlcmF0b3IoSXRlcmFibGUoa2V5UGF0aCkpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlcjtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFJlY29yZCwgS2V5ZWRDb2xsZWN0aW9uKTtcblxuICAgIGZ1bmN0aW9uIFJlY29yZChkZWZhdWx0VmFsdWVzLCBuYW1lKSB7XG4gICAgICB2YXIgaGFzSW5pdGlhbGl6ZWQ7XG5cbiAgICAgIHZhciBSZWNvcmRUeXBlID0gZnVuY3Rpb24gUmVjb3JkKHZhbHVlcykge1xuICAgICAgICBpZiAodmFsdWVzIGluc3RhbmNlb2YgUmVjb3JkVHlwZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlY29yZFR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBSZWNvcmRUeXBlKHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoYXNJbml0aWFsaXplZCkge1xuICAgICAgICAgIGhhc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRlZmF1bHRWYWx1ZXMpO1xuICAgICAgICAgIHNldFByb3BzKFJlY29yZFR5cGVQcm90b3R5cGUsIGtleXMpO1xuICAgICAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuc2l6ZSA9IGtleXMubGVuZ3RoO1xuICAgICAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuX25hbWUgPSBuYW1lO1xuICAgICAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuX2tleXMgPSBrZXlzO1xuICAgICAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuX2RlZmF1bHRWYWx1ZXMgPSBkZWZhdWx0VmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21hcCA9IE1hcCh2YWx1ZXMpO1xuICAgICAgfTtcblxuICAgICAgdmFyIFJlY29yZFR5cGVQcm90b3R5cGUgPSBSZWNvcmRUeXBlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmVjb3JkUHJvdG90eXBlKTtcbiAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZWNvcmRUeXBlO1xuXG4gICAgICByZXR1cm4gUmVjb3JkVHlwZTtcbiAgICB9XG5cbiAgICBSZWNvcmQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKHJlY29yZE5hbWUodGhpcykgKyAnIHsnLCAnfScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFZhbHVlcy5oYXNPd25Qcm9wZXJ0eShrKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrLCBub3RTZXRWYWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLmhhcyhrKSkge1xuICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgZGVmYXVsdFZhbCA9IHRoaXMuX2RlZmF1bHRWYWx1ZXNba107XG4gICAgICByZXR1cm4gdGhpcy5fbWFwID8gdGhpcy5fbWFwLmdldChrLCBkZWZhdWx0VmFsKSA6IGRlZmF1bHRWYWw7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgICBSZWNvcmQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5fbWFwICYmIHRoaXMuX21hcC5jbGVhcigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBSZWNvcmRUeXBlID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiBSZWNvcmRUeXBlLl9lbXB0eSB8fCAoUmVjb3JkVHlwZS5fZW1wdHkgPSBtYWtlUmVjb3JkKHRoaXMsIGVtcHR5TWFwKCkpKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrLCB2KSB7XG4gICAgICBpZiAoIXRoaXMuaGFzKGspKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNldCB1bmtub3duIGtleSBcIicgKyBrICsgJ1wiIG9uICcgKyByZWNvcmROYW1lKHRoaXMpKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLnNldChrLCB2KTtcbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCB8fCBuZXdNYXAgPT09IHRoaXMuX21hcCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlUmVjb3JkKHRoaXMsIG5ld01hcCk7XG4gICAgfTtcblxuICAgIFJlY29yZC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oaykge1xuICAgICAgaWYgKCF0aGlzLmhhcyhrKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLnJlbW92ZShrKTtcbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCB8fCBuZXdNYXAgPT09IHRoaXMuX21hcCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlUmVjb3JkKHRoaXMsIG5ld01hcCk7XG4gICAgfTtcblxuICAgIFJlY29yZC5wcm90b3R5cGUud2FzQWx0ZXJlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC53YXNBbHRlcmVkKCk7XG4gICAgfTtcblxuICAgIFJlY29yZC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiBLZXllZEl0ZXJhYmxlKHRoaXMuX2RlZmF1bHRWYWx1ZXMpLm1hcChmdW5jdGlvbihfLCBrKSAge3JldHVybiB0aGlzJDAuZ2V0KGspfSkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIEtleWVkSXRlcmFibGUodGhpcy5fZGVmYXVsdFZhbHVlcykubWFwKGZ1bmN0aW9uKF8sIGspICB7cmV0dXJuIHRoaXMkMC5nZXQoayl9KS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBSZWNvcmQucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG4gICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgbmV3TWFwID0gdGhpcy5fbWFwICYmIHRoaXMuX21hcC5fX2Vuc3VyZU93bmVyKG93bmVySUQpO1xuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3TWFwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlUmVjb3JkKHRoaXMsIG5ld01hcCwgb3duZXJJRCk7XG4gICAgfTtcblxuXG4gIHZhciBSZWNvcmRQcm90b3R5cGUgPSBSZWNvcmQucHJvdG90eXBlO1xuICBSZWNvcmRQcm90b3R5cGVbREVMRVRFXSA9IFJlY29yZFByb3RvdHlwZS5yZW1vdmU7XG4gIFJlY29yZFByb3RvdHlwZS5kZWxldGVJbiA9XG4gIFJlY29yZFByb3RvdHlwZS5yZW1vdmVJbiA9IE1hcFByb3RvdHlwZS5yZW1vdmVJbjtcbiAgUmVjb3JkUHJvdG90eXBlLm1lcmdlID0gTWFwUHJvdG90eXBlLm1lcmdlO1xuICBSZWNvcmRQcm90b3R5cGUubWVyZ2VXaXRoID0gTWFwUHJvdG90eXBlLm1lcmdlV2l0aDtcbiAgUmVjb3JkUHJvdG90eXBlLm1lcmdlSW4gPSBNYXBQcm90b3R5cGUubWVyZ2VJbjtcbiAgUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcCA9IE1hcFByb3RvdHlwZS5tZXJnZURlZXA7XG4gIFJlY29yZFByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gTWFwUHJvdG90eXBlLm1lcmdlRGVlcFdpdGg7XG4gIFJlY29yZFByb3RvdHlwZS5tZXJnZURlZXBJbiA9IE1hcFByb3RvdHlwZS5tZXJnZURlZXBJbjtcbiAgUmVjb3JkUHJvdG90eXBlLnNldEluID0gTWFwUHJvdG90eXBlLnNldEluO1xuICBSZWNvcmRQcm90b3R5cGUudXBkYXRlID0gTWFwUHJvdG90eXBlLnVwZGF0ZTtcbiAgUmVjb3JkUHJvdG90eXBlLnVwZGF0ZUluID0gTWFwUHJvdG90eXBlLnVwZGF0ZUluO1xuICBSZWNvcmRQcm90b3R5cGUud2l0aE11dGF0aW9ucyA9IE1hcFByb3RvdHlwZS53aXRoTXV0YXRpb25zO1xuICBSZWNvcmRQcm90b3R5cGUuYXNNdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzTXV0YWJsZTtcbiAgUmVjb3JkUHJvdG90eXBlLmFzSW1tdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzSW1tdXRhYmxlO1xuXG5cbiAgZnVuY3Rpb24gbWFrZVJlY29yZChsaWtlUmVjb3JkLCBtYXAsIG93bmVySUQpIHtcbiAgICB2YXIgcmVjb3JkID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YobGlrZVJlY29yZCkpO1xuICAgIHJlY29yZC5fbWFwID0gbWFwO1xuICAgIHJlY29yZC5fX293bmVySUQgPSBvd25lcklEO1xuICAgIHJldHVybiByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiByZWNvcmROYW1lKHJlY29yZCkge1xuICAgIHJldHVybiByZWNvcmQuX25hbWUgfHwgcmVjb3JkLmNvbnN0cnVjdG9yLm5hbWUgfHwgJ1JlY29yZCc7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRQcm9wcyhwcm90b3R5cGUsIG5hbWVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIG5hbWVzLmZvckVhY2goc2V0UHJvcC5iaW5kKHVuZGVmaW5lZCwgcHJvdG90eXBlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBmYWlsZWQuIFByb2JhYmx5IElFOC5cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRQcm9wKHByb3RvdHlwZSwgbmFtZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsIG5hbWUsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChuYW1lKTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGludmFyaWFudCh0aGlzLl9fb3duZXJJRCwgJ0Nhbm5vdCBzZXQgb24gYW4gaW1tdXRhYmxlIHJlY29yZC4nKTtcbiAgICAgICAgdGhpcy5zZXQobmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU2V0LCBTZXRDb2xsZWN0aW9uKTtcblxuICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cbiAgICBmdW5jdGlvbiBTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTZXQoKSA6XG4gICAgICAgIGlzU2V0KHZhbHVlKSAmJiAhaXNPcmRlcmVkKHZhbHVlKSA/IHZhbHVlIDpcbiAgICAgICAgZW1wdHlTZXQoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IFNldEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2ICkge3JldHVybiBzZXQuYWRkKHYpfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIFNldC5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNldC5mcm9tS2V5cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcyhLZXllZEl0ZXJhYmxlKHZhbHVlKS5rZXlTZXEoKSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1NldCB7JywgJ30nKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXAuaGFzKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB1cGRhdGVTZXQodGhpcywgdGhpcy5fbWFwLnNldCh2YWx1ZSwgdHJ1ZSkpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdXBkYXRlU2V0KHRoaXMsIHRoaXMuX21hcC5yZW1vdmUodmFsdWUpKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZVNldCh0aGlzLCB0aGlzLl9tYXAuY2xlYXIoKSk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQ29tcG9zaXRpb25cblxuICAgIFNldC5wcm90b3R5cGUudW5pb24gPSBmdW5jdGlvbigpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIGl0ZXJzID0gaXRlcnMuZmlsdGVyKGZ1bmN0aW9uKHggKSB7cmV0dXJuIHguc2l6ZSAhPT0gMH0pO1xuICAgICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDAgJiYgIXRoaXMuX19vd25lcklEICYmIGl0ZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcihpdGVyc1swXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGl0ZXJzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICAgIFNldEl0ZXJhYmxlKGl0ZXJzW2lpXSkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gc2V0LmFkZCh2YWx1ZSl9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24oKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaXRlcnMgPSBpdGVycy5tYXAoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gU2V0SXRlcmFibGUoaXRlcil9KTtcbiAgICAgIHZhciBvcmlnaW5hbFNldCA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgb3JpZ2luYWxTZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSApIHtcbiAgICAgICAgICBpZiAoIWl0ZXJzLmV2ZXJ5KGZ1bmN0aW9uKGl0ZXIgKSB7cmV0dXJuIGl0ZXIuaW5jbHVkZXModmFsdWUpfSkpIHtcbiAgICAgICAgICAgIHNldC5yZW1vdmUodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uKCkge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDApO1xuICAgICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGl0ZXJzID0gaXRlcnMubWFwKGZ1bmN0aW9uKGl0ZXIgKSB7cmV0dXJuIFNldEl0ZXJhYmxlKGl0ZXIpfSk7XG4gICAgICB2YXIgb3JpZ2luYWxTZXQgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbihzZXQgKSB7XG4gICAgICAgIG9yaWdpbmFsU2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUgKSB7XG4gICAgICAgICAgaWYgKGl0ZXJzLnNvbWUoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gaXRlci5pbmNsdWRlcyh2YWx1ZSl9KSkge1xuICAgICAgICAgICAgc2V0LnJlbW92ZSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy51bmlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLm1lcmdlV2l0aCA9IGZ1bmN0aW9uKG1lcmdlcikge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgcmV0dXJuIHRoaXMudW5pb24uYXBwbHkodGhpcywgaXRlcnMpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG4gICAgICAvLyBMYXRlIGJpbmRpbmdcbiAgICAgIHJldHVybiBPcmRlcmVkU2V0KHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5zb3J0QnkgPSBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICAgIC8vIExhdGUgYmluZGluZ1xuICAgICAgcmV0dXJuIE9yZGVyZWRTZXQoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvciwgbWFwcGVyKSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUud2FzQWx0ZXJlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC53YXNBbHRlcmVkKCk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLl9tYXAuX19pdGVyYXRlKGZ1bmN0aW9uKF8sIGspICB7cmV0dXJuIGZuKGssIGssIHRoaXMkMCl9LCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC5tYXAoZnVuY3Rpb24oXywgaykgIHtyZXR1cm4ga30pLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcbiAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAuX19lbnN1cmVPd25lcihvd25lcklEKTtcbiAgICAgIGlmICghb3duZXJJRCkge1xuICAgICAgICB0aGlzLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgICAgIHRoaXMuX21hcCA9IG5ld01hcDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fX21ha2UobmV3TWFwLCBvd25lcklEKTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gaXNTZXQobWF5YmVTZXQpIHtcbiAgICByZXR1cm4gISEobWF5YmVTZXQgJiYgbWF5YmVTZXRbSVNfU0VUX1NFTlRJTkVMXSk7XG4gIH1cblxuICBTZXQuaXNTZXQgPSBpc1NldDtcblxuICB2YXIgSVNfU0VUX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfU0VUX19AQCc7XG5cbiAgdmFyIFNldFByb3RvdHlwZSA9IFNldC5wcm90b3R5cGU7XG4gIFNldFByb3RvdHlwZVtJU19TRVRfU0VOVElORUxdID0gdHJ1ZTtcbiAgU2V0UHJvdG90eXBlW0RFTEVURV0gPSBTZXRQcm90b3R5cGUucmVtb3ZlO1xuICBTZXRQcm90b3R5cGUubWVyZ2VEZWVwID0gU2V0UHJvdG90eXBlLm1lcmdlO1xuICBTZXRQcm90b3R5cGUubWVyZ2VEZWVwV2l0aCA9IFNldFByb3RvdHlwZS5tZXJnZVdpdGg7XG4gIFNldFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gTWFwUHJvdG90eXBlLndpdGhNdXRhdGlvbnM7XG4gIFNldFByb3RvdHlwZS5hc011dGFibGUgPSBNYXBQcm90b3R5cGUuYXNNdXRhYmxlO1xuICBTZXRQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG5cbiAgU2V0UHJvdG90eXBlLl9fZW1wdHkgPSBlbXB0eVNldDtcbiAgU2V0UHJvdG90eXBlLl9fbWFrZSA9IG1ha2VTZXQ7XG5cbiAgZnVuY3Rpb24gdXBkYXRlU2V0KHNldCwgbmV3TWFwKSB7XG4gICAgaWYgKHNldC5fX293bmVySUQpIHtcbiAgICAgIHNldC5zaXplID0gbmV3TWFwLnNpemU7XG4gICAgICBzZXQuX21hcCA9IG5ld01hcDtcbiAgICAgIHJldHVybiBzZXQ7XG4gICAgfVxuICAgIHJldHVybiBuZXdNYXAgPT09IHNldC5fbWFwID8gc2V0IDpcbiAgICAgIG5ld01hcC5zaXplID09PSAwID8gc2V0Ll9fZW1wdHkoKSA6XG4gICAgICBzZXQuX19tYWtlKG5ld01hcCk7XG4gIH1cblxuICBmdW5jdGlvbiBtYWtlU2V0KG1hcCwgb3duZXJJRCkge1xuICAgIHZhciBzZXQgPSBPYmplY3QuY3JlYXRlKFNldFByb3RvdHlwZSk7XG4gICAgc2V0LnNpemUgPSBtYXAgPyBtYXAuc2l6ZSA6IDA7XG4gICAgc2V0Ll9tYXAgPSBtYXA7XG4gICAgc2V0Ll9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgcmV0dXJuIHNldDtcbiAgfVxuXG4gIHZhciBFTVBUWV9TRVQ7XG4gIGZ1bmN0aW9uIGVtcHR5U2V0KCkge1xuICAgIHJldHVybiBFTVBUWV9TRVQgfHwgKEVNUFRZX1NFVCA9IG1ha2VTZXQoZW1wdHlNYXAoKSkpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoT3JkZXJlZFNldCwgU2V0KTtcblxuICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cbiAgICBmdW5jdGlvbiBPcmRlcmVkU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5T3JkZXJlZFNldCgpIDpcbiAgICAgICAgaXNPcmRlcmVkU2V0KHZhbHVlKSA/IHZhbHVlIDpcbiAgICAgICAgZW1wdHlPcmRlcmVkU2V0KCkud2l0aE11dGF0aW9ucyhmdW5jdGlvbihzZXQgKSB7XG4gICAgICAgICAgdmFyIGl0ZXIgPSBTZXRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcbiAgICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24odiApIHtyZXR1cm4gc2V0LmFkZCh2KX0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBPcmRlcmVkU2V0Lm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIHRoaXMoYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZFNldC5mcm9tS2V5cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcyhLZXllZEl0ZXJhYmxlKHZhbHVlKS5rZXlTZXEoKSk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRTZXQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdPcmRlcmVkU2V0IHsnLCAnfScpO1xuICAgIH07XG5cblxuICBmdW5jdGlvbiBpc09yZGVyZWRTZXQobWF5YmVPcmRlcmVkU2V0KSB7XG4gICAgcmV0dXJuIGlzU2V0KG1heWJlT3JkZXJlZFNldCkgJiYgaXNPcmRlcmVkKG1heWJlT3JkZXJlZFNldCk7XG4gIH1cblxuICBPcmRlcmVkU2V0LmlzT3JkZXJlZFNldCA9IGlzT3JkZXJlZFNldDtcblxuICB2YXIgT3JkZXJlZFNldFByb3RvdHlwZSA9IE9yZGVyZWRTZXQucHJvdG90eXBlO1xuICBPcmRlcmVkU2V0UHJvdG90eXBlW0lTX09SREVSRURfU0VOVElORUxdID0gdHJ1ZTtcblxuICBPcmRlcmVkU2V0UHJvdG90eXBlLl9fZW1wdHkgPSBlbXB0eU9yZGVyZWRTZXQ7XG4gIE9yZGVyZWRTZXRQcm90b3R5cGUuX19tYWtlID0gbWFrZU9yZGVyZWRTZXQ7XG5cbiAgZnVuY3Rpb24gbWFrZU9yZGVyZWRTZXQobWFwLCBvd25lcklEKSB7XG4gICAgdmFyIHNldCA9IE9iamVjdC5jcmVhdGUoT3JkZXJlZFNldFByb3RvdHlwZSk7XG4gICAgc2V0LnNpemUgPSBtYXAgPyBtYXAuc2l6ZSA6IDA7XG4gICAgc2V0Ll9tYXAgPSBtYXA7XG4gICAgc2V0Ll9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgcmV0dXJuIHNldDtcbiAgfVxuXG4gIHZhciBFTVBUWV9PUkRFUkVEX1NFVDtcbiAgZnVuY3Rpb24gZW1wdHlPcmRlcmVkU2V0KCkge1xuICAgIHJldHVybiBFTVBUWV9PUkRFUkVEX1NFVCB8fCAoRU1QVFlfT1JERVJFRF9TRVQgPSBtYWtlT3JkZXJlZFNldChlbXB0eU9yZGVyZWRNYXAoKSkpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU3RhY2ssIEluZGV4ZWRDb2xsZWN0aW9uKTtcblxuICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cbiAgICBmdW5jdGlvbiBTdGFjayh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eVN0YWNrKCkgOlxuICAgICAgICBpc1N0YWNrKHZhbHVlKSA/IHZhbHVlIDpcbiAgICAgICAgZW1wdHlTdGFjaygpLnVuc2hpZnRBbGwodmFsdWUpO1xuICAgIH1cblxuICAgIFN0YWNrLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIHRoaXMoYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdTdGFjayBbJywgJ10nKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICAgIFN0YWNrLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICAgIGluZGV4ID0gd3JhcEluZGV4KHRoaXMsIGluZGV4KTtcbiAgICAgIHdoaWxlIChoZWFkICYmIGluZGV4LS0pIHtcbiAgICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoZWFkID8gaGVhZC52YWx1ZSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hlYWQgJiYgdGhpcy5faGVhZC52YWx1ZTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuICAgIFN0YWNrLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgbmV3U2l6ZSA9IHRoaXMuc2l6ZSArIGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICBmb3IgKHZhciBpaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpaSA+PSAwOyBpaS0tKSB7XG4gICAgICAgIGhlYWQgPSB7XG4gICAgICAgICAgdmFsdWU6IGFyZ3VtZW50c1tpaV0sXG4gICAgICAgICAgbmV4dDogaGVhZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IG5ld1NpemU7XG4gICAgICAgIHRoaXMuX2hlYWQgPSBoZWFkO1xuICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlU3RhY2sobmV3U2l6ZSwgaGVhZCk7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS5wdXNoQWxsID0gZnVuY3Rpb24oaXRlcikge1xuICAgICAgaXRlciA9IEluZGV4ZWRJdGVyYWJsZShpdGVyKTtcbiAgICAgIGlmIChpdGVyLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgICAgdmFyIG5ld1NpemUgPSB0aGlzLnNpemU7XG4gICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICBpdGVyLnJldmVyc2UoKS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlICkge1xuICAgICAgICBuZXdTaXplKys7XG4gICAgICAgIGhlYWQgPSB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIG5leHQ6IGhlYWRcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IG5ld1NpemU7XG4gICAgICAgIHRoaXMuX2hlYWQgPSBoZWFkO1xuICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlU3RhY2sobmV3U2l6ZSwgaGVhZCk7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnNsaWNlKDEpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHJldHVybiB0aGlzLnB1c2guYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnVuc2hpZnRBbGwgPSBmdW5jdGlvbihpdGVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXNoQWxsKGl0ZXIpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnBvcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgdGhpcy5faGVhZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlTdGFjaygpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG4gICAgICBpZiAod2hvbGVTbGljZShiZWdpbiwgZW5kLCB0aGlzLnNpemUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc29sdmVkQmVnaW4gPSByZXNvbHZlQmVnaW4oYmVnaW4sIHRoaXMuc2l6ZSk7XG4gICAgICB2YXIgcmVzb2x2ZWRFbmQgPSByZXNvbHZlRW5kKGVuZCwgdGhpcy5zaXplKTtcbiAgICAgIGlmIChyZXNvbHZlZEVuZCAhPT0gdGhpcy5zaXplKSB7XG4gICAgICAgIC8vIHN1cGVyLnNsaWNlKGJlZ2luLCBlbmQpO1xuICAgICAgICByZXR1cm4gSW5kZXhlZENvbGxlY3Rpb24ucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3U2l6ZSA9IHRoaXMuc2l6ZSAtIHJlc29sdmVkQmVnaW47XG4gICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICB3aGlsZSAocmVzb2x2ZWRCZWdpbi0tKSB7XG4gICAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gbmV3U2l6ZTtcbiAgICAgICAgdGhpcy5faGVhZCA9IGhlYWQ7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VTdGFjayhuZXdTaXplLCBoZWFkKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNdXRhYmlsaXR5XG5cbiAgICBTdGFjay5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcbiAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmICghb3duZXJJRCkge1xuICAgICAgICB0aGlzLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgICAgIHRoaXMuX19hbHRlcmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VTdGFjayh0aGlzLnNpemUsIHRoaXMuX2hlYWQsIG93bmVySUQsIHRoaXMuX19oYXNoKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBJdGVyYXRpb25cblxuICAgIFN0YWNrLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLl9faXRlcmF0ZShmbik7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuX2hlYWQ7XG4gICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICBpZiAoZm4obm9kZS52YWx1ZSwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLl9faXRlcmF0b3IodHlwZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuX2hlYWQ7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBub2RlLnZhbHVlO1xuICAgICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgfSk7XG4gICAgfTtcblxuXG4gIGZ1bmN0aW9uIGlzU3RhY2sobWF5YmVTdGFjaykge1xuICAgIHJldHVybiAhIShtYXliZVN0YWNrICYmIG1heWJlU3RhY2tbSVNfU1RBQ0tfU0VOVElORUxdKTtcbiAgfVxuXG4gIFN0YWNrLmlzU3RhY2sgPSBpc1N0YWNrO1xuXG4gIHZhciBJU19TVEFDS19TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX1NUQUNLX19AQCc7XG5cbiAgdmFyIFN0YWNrUHJvdG90eXBlID0gU3RhY2sucHJvdG90eXBlO1xuICBTdGFja1Byb3RvdHlwZVtJU19TVEFDS19TRU5USU5FTF0gPSB0cnVlO1xuICBTdGFja1Byb3RvdHlwZS53aXRoTXV0YXRpb25zID0gTWFwUHJvdG90eXBlLndpdGhNdXRhdGlvbnM7XG4gIFN0YWNrUHJvdG90eXBlLmFzTXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc011dGFibGU7XG4gIFN0YWNrUHJvdG90eXBlLmFzSW1tdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzSW1tdXRhYmxlO1xuICBTdGFja1Byb3RvdHlwZS53YXNBbHRlcmVkID0gTWFwUHJvdG90eXBlLndhc0FsdGVyZWQ7XG5cblxuICBmdW5jdGlvbiBtYWtlU3RhY2soc2l6ZSwgaGVhZCwgb3duZXJJRCwgaGFzaCkge1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKFN0YWNrUHJvdG90eXBlKTtcbiAgICBtYXAuc2l6ZSA9IHNpemU7XG4gICAgbWFwLl9oZWFkID0gaGVhZDtcbiAgICBtYXAuX19vd25lcklEID0gb3duZXJJRDtcbiAgICBtYXAuX19oYXNoID0gaGFzaDtcbiAgICBtYXAuX19hbHRlcmVkID0gZmFsc2U7XG4gICAgcmV0dXJuIG1hcDtcbiAgfVxuXG4gIHZhciBFTVBUWV9TVEFDSztcbiAgZnVuY3Rpb24gZW1wdHlTdGFjaygpIHtcbiAgICByZXR1cm4gRU1QVFlfU1RBQ0sgfHwgKEVNUFRZX1NUQUNLID0gbWFrZVN0YWNrKDApKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb250cmlidXRlcyBhZGRpdGlvbmFsIG1ldGhvZHMgdG8gYSBjb25zdHJ1Y3RvclxuICAgKi9cbiAgZnVuY3Rpb24gbWl4aW4oY3RvciwgbWV0aG9kcykge1xuICAgIHZhciBrZXlDb3BpZXIgPSBmdW5jdGlvbihrZXkgKSB7IGN0b3IucHJvdG90eXBlW2tleV0gPSBtZXRob2RzW2tleV07IH07XG4gICAgT2JqZWN0LmtleXMobWV0aG9kcykuZm9yRWFjaChrZXlDb3BpZXIpO1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiZcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobWV0aG9kcykuZm9yRWFjaChrZXlDb3BpZXIpO1xuICAgIHJldHVybiBjdG9yO1xuICB9XG5cbiAgSXRlcmFibGUuSXRlcmF0b3IgPSBJdGVyYXRvcjtcblxuICBtaXhpbihJdGVyYWJsZSwge1xuXG4gICAgLy8gIyMjIENvbnZlcnNpb24gdG8gb3RoZXIgdHlwZXNcblxuICAgIHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICAgIHZhciBhcnJheSA9IG5ldyBBcnJheSh0aGlzLnNpemUgfHwgMCk7XG4gICAgICB0aGlzLnZhbHVlU2VxKCkuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGkpICB7IGFycmF5W2ldID0gdjsgfSk7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfSxcblxuICAgIHRvSW5kZXhlZFNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFRvSW5kZXhlZFNlcXVlbmNlKHRoaXMpO1xuICAgIH0sXG5cbiAgICB0b0pTOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkubWFwKFxuICAgICAgICBmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRvSlMgPT09ICdmdW5jdGlvbicgPyB2YWx1ZS50b0pTKCkgOiB2YWx1ZX1cbiAgICAgICkuX190b0pTKCk7XG4gICAgfSxcblxuICAgIHRvSlNPTjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50b1NlcSgpLm1hcChcbiAgICAgICAgZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS50b0pTT04gPT09ICdmdW5jdGlvbicgPyB2YWx1ZS50b0pTT04oKSA6IHZhbHVlfVxuICAgICAgKS5fX3RvSlMoKTtcbiAgICB9LFxuXG4gICAgdG9LZXllZFNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFRvS2V5ZWRTZXF1ZW5jZSh0aGlzLCB0cnVlKTtcbiAgICB9LFxuXG4gICAgdG9NYXA6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgICAgcmV0dXJuIE1hcCh0aGlzLnRvS2V5ZWRTZXEoKSk7XG4gICAgfSxcblxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICB0aGlzLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAgeyBvYmplY3Rba10gPSB2OyB9KTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSxcblxuICAgIHRvT3JkZXJlZE1hcDogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgICByZXR1cm4gT3JkZXJlZE1hcCh0aGlzLnRvS2V5ZWRTZXEoKSk7XG4gICAgfSxcblxuICAgIHRvT3JkZXJlZFNldDogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgICByZXR1cm4gT3JkZXJlZFNldChpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG4gICAgfSxcblxuICAgIHRvU2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBTZXQoaXNLZXllZCh0aGlzKSA/IHRoaXMudmFsdWVTZXEoKSA6IHRoaXMpO1xuICAgIH0sXG5cbiAgICB0b1NldFNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFRvU2V0U2VxdWVuY2UodGhpcyk7XG4gICAgfSxcblxuICAgIHRvU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpc0luZGV4ZWQodGhpcykgPyB0aGlzLnRvSW5kZXhlZFNlcSgpIDpcbiAgICAgICAgaXNLZXllZCh0aGlzKSA/IHRoaXMudG9LZXllZFNlcSgpIDpcbiAgICAgICAgdGhpcy50b1NldFNlcSgpO1xuICAgIH0sXG5cbiAgICB0b1N0YWNrOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBTdGFjayhpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG4gICAgfSxcblxuICAgIHRvTGlzdDogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgICByZXR1cm4gTGlzdChpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG4gICAgfSxcblxuXG4gICAgLy8gIyMjIENvbW1vbiBKYXZhU2NyaXB0IG1ldGhvZHMgYW5kIHByb3BlcnRpZXNcblxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAnW0l0ZXJhYmxlXSc7XG4gICAgfSxcblxuICAgIF9fdG9TdHJpbmc6IGZ1bmN0aW9uKGhlYWQsIHRhaWwpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGhlYWQgKyB0YWlsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhlYWQgKyAnICcgKyB0aGlzLnRvU2VxKCkubWFwKHRoaXMuX190b1N0cmluZ01hcHBlcikuam9pbignLCAnKSArICcgJyArIHRhaWw7XG4gICAgfSxcblxuXG4gICAgLy8gIyMjIEVTNiBDb2xsZWN0aW9uIG1ldGhvZHMgKEVTNiBBcnJheSBhbmQgTWFwKVxuXG4gICAgY29uY2F0OiBmdW5jdGlvbigpIHt2YXIgdmFsdWVzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgY29uY2F0RmFjdG9yeSh0aGlzLCB2YWx1ZXMpKTtcbiAgICB9LFxuXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5zb21lKGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBpcyh2YWx1ZSwgc2VhcmNoVmFsdWUpfSk7XG4gICAgfSxcblxuICAgIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMpO1xuICAgIH0sXG5cbiAgICBldmVyeTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuICAgICAgdmFyIHJldHVyblZhbHVlID0gdHJ1ZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmICghcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgYykpIHtcbiAgICAgICAgICByZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgfSxcblxuICAgIGZpbHRlcjogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgZmlsdGVyRmFjdG9yeSh0aGlzLCBwcmVkaWNhdGUsIGNvbnRleHQsIHRydWUpKTtcbiAgICB9LFxuXG4gICAgZmluZDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0LCBub3RTZXRWYWx1ZSkge1xuICAgICAgdmFyIGVudHJ5ID0gdGhpcy5maW5kRW50cnkocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICAgIHJldHVybiBlbnRyeSA/IGVudHJ5WzFdIDogbm90U2V0VmFsdWU7XG4gICAgfSxcblxuICAgIGZpbmRFbnRyeTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgZm91bmQ7XG4gICAgICB0aGlzLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrLCBjKSAge1xuICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgYykpIHtcbiAgICAgICAgICBmb3VuZCA9IFtrLCB2XTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH0sXG5cbiAgICBmaW5kTGFzdEVudHJ5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBmb3JFYWNoOiBmdW5jdGlvbihzaWRlRWZmZWN0LCBjb250ZXh0KSB7XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuICAgICAgcmV0dXJuIHRoaXMuX19pdGVyYXRlKGNvbnRleHQgPyBzaWRlRWZmZWN0LmJpbmQoY29udGV4dCkgOiBzaWRlRWZmZWN0KTtcbiAgICB9LFxuXG4gICAgam9pbjogZnVuY3Rpb24oc2VwYXJhdG9yKSB7XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuICAgICAgc2VwYXJhdG9yID0gc2VwYXJhdG9yICE9PSB1bmRlZmluZWQgPyAnJyArIHNlcGFyYXRvciA6ICcsJztcbiAgICAgIHZhciBqb2luZWQgPSAnJztcbiAgICAgIHZhciBpc0ZpcnN0ID0gdHJ1ZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYgKSB7XG4gICAgICAgIGlzRmlyc3QgPyAoaXNGaXJzdCA9IGZhbHNlKSA6IChqb2luZWQgKz0gc2VwYXJhdG9yKTtcbiAgICAgICAgam9pbmVkICs9IHYgIT09IG51bGwgJiYgdiAhPT0gdW5kZWZpbmVkID8gdi50b1N0cmluZygpIDogJyc7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBqb2luZWQ7XG4gICAgfSxcblxuICAgIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0tFWVMpO1xuICAgIH0sXG5cbiAgICBtYXA6IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIG1hcEZhY3RvcnkodGhpcywgbWFwcGVyLCBjb250ZXh0KSk7XG4gICAgfSxcblxuICAgIHJlZHVjZTogZnVuY3Rpb24ocmVkdWNlciwgaW5pdGlhbFJlZHVjdGlvbiwgY29udGV4dCkge1xuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICAgIHZhciByZWR1Y3Rpb247XG4gICAgICB2YXIgdXNlRmlyc3Q7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgdXNlRmlyc3QgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVkdWN0aW9uID0gaW5pdGlhbFJlZHVjdGlvbjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmICh1c2VGaXJzdCkge1xuICAgICAgICAgIHVzZUZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgcmVkdWN0aW9uID0gdjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWR1Y3Rpb24gPSByZWR1Y2VyLmNhbGwoY29udGV4dCwgcmVkdWN0aW9uLCB2LCBrLCBjKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVkdWN0aW9uO1xuICAgIH0sXG5cbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24ocmVkdWNlciwgaW5pdGlhbFJlZHVjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIHJldmVyc2VkID0gdGhpcy50b0tleWVkU2VxKCkucmV2ZXJzZSgpO1xuICAgICAgcmV0dXJuIHJldmVyc2VkLnJlZHVjZS5hcHBseShyZXZlcnNlZCwgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgcmV2ZXJzZUZhY3RvcnkodGhpcywgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBzbGljZTogZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNsaWNlRmFjdG9yeSh0aGlzLCBiZWdpbiwgZW5kLCB0cnVlKSk7XG4gICAgfSxcblxuICAgIHNvbWU6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuICF0aGlzLmV2ZXJ5KG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgc29ydDogZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpKTtcbiAgICB9LFxuXG4gICAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMpO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBNb3JlIHNlcXVlbnRpYWwgbWV0aG9kc1xuXG4gICAgYnV0TGFzdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zbGljZSgwLCAtMSk7XG4gICAgfSxcblxuICAgIGlzRW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkID8gdGhpcy5zaXplID09PSAwIDogIXRoaXMuc29tZShmdW5jdGlvbigpICB7cmV0dXJuIHRydWV9KTtcbiAgICB9LFxuXG4gICAgY291bnQ6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIGVuc3VyZVNpemUoXG4gICAgICAgIHByZWRpY2F0ZSA/IHRoaXMudG9TZXEoKS5maWx0ZXIocHJlZGljYXRlLCBjb250ZXh0KSA6IHRoaXNcbiAgICAgICk7XG4gICAgfSxcblxuICAgIGNvdW50Qnk6IGZ1bmN0aW9uKGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBjb3VudEJ5RmFjdG9yeSh0aGlzLCBncm91cGVyLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgZXF1YWxzOiBmdW5jdGlvbihvdGhlcikge1xuICAgICAgcmV0dXJuIGRlZXBFcXVhbCh0aGlzLCBvdGhlcik7XG4gICAgfSxcblxuICAgIGVudHJ5U2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpdGVyYWJsZSA9IHRoaXM7XG4gICAgICBpZiAoaXRlcmFibGUuX2NhY2hlKSB7XG4gICAgICAgIC8vIFdlIGNhY2hlIGFzIGFuIGVudHJpZXMgYXJyYXksIHNvIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgY2FjaGUhXG4gICAgICAgIHJldHVybiBuZXcgQXJyYXlTZXEoaXRlcmFibGUuX2NhY2hlKTtcbiAgICAgIH1cbiAgICAgIHZhciBlbnRyaWVzU2VxdWVuY2UgPSBpdGVyYWJsZS50b1NlcSgpLm1hcChlbnRyeU1hcHBlcikudG9JbmRleGVkU2VxKCk7XG4gICAgICBlbnRyaWVzU2VxdWVuY2UuZnJvbUVudHJ5U2VxID0gZnVuY3Rpb24oKSAge3JldHVybiBpdGVyYWJsZS50b1NlcSgpfTtcbiAgICAgIHJldHVybiBlbnRyaWVzU2VxdWVuY2U7XG4gICAgfSxcblxuICAgIGZpbHRlck5vdDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobm90KHByZWRpY2F0ZSksIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBmaW5kTGFzdDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMudG9LZXllZFNlcSgpLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSwgY29udGV4dCwgbm90U2V0VmFsdWUpO1xuICAgIH0sXG5cbiAgICBmaXJzdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kKHJldHVyblRydWUpO1xuICAgIH0sXG5cbiAgICBmbGF0TWFwOiBmdW5jdGlvbihtYXBwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGF0TWFwRmFjdG9yeSh0aGlzLCBtYXBwZXIsIGNvbnRleHQpKTtcbiAgICB9LFxuXG4gICAgZmxhdHRlbjogZnVuY3Rpb24oZGVwdGgpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGF0dGVuRmFjdG9yeSh0aGlzLCBkZXB0aCwgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBmcm9tRW50cnlTZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBGcm9tRW50cmllc1NlcXVlbmNlKHRoaXMpO1xuICAgIH0sXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKHNlYXJjaEtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmQoZnVuY3Rpb24oXywga2V5KSAge3JldHVybiBpcyhrZXksIHNlYXJjaEtleSl9LCB1bmRlZmluZWQsIG5vdFNldFZhbHVlKTtcbiAgICB9LFxuXG4gICAgZ2V0SW46IGZ1bmN0aW9uKHNlYXJjaEtleVBhdGgsIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgbmVzdGVkID0gdGhpcztcbiAgICAgIC8vIE5vdGU6IGluIGFuIEVTNiBlbnZpcm9ubWVudCwgd2Ugd291bGQgcHJlZmVyOlxuICAgICAgLy8gZm9yICh2YXIga2V5IG9mIHNlYXJjaEtleVBhdGgpIHtcbiAgICAgIHZhciBpdGVyID0gZm9yY2VJdGVyYXRvcihzZWFyY2hLZXlQYXRoKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXIubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIHZhciBrZXkgPSBzdGVwLnZhbHVlO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWQgJiYgbmVzdGVkLmdldCA/IG5lc3RlZC5nZXQoa2V5LCBOT1RfU0VUKSA6IE5PVF9TRVQ7XG4gICAgICAgIGlmIChuZXN0ZWQgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXN0ZWQ7XG4gICAgfSxcblxuICAgIGdyb3VwQnk6IGZ1bmN0aW9uKGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBncm91cEJ5RmFjdG9yeSh0aGlzLCBncm91cGVyLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgaGFzOiBmdW5jdGlvbihzZWFyY2hLZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldChzZWFyY2hLZXksIE5PVF9TRVQpICE9PSBOT1RfU0VUO1xuICAgIH0sXG5cbiAgICBoYXNJbjogZnVuY3Rpb24oc2VhcmNoS2V5UGF0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0SW4oc2VhcmNoS2V5UGF0aCwgTk9UX1NFVCkgIT09IE5PVF9TRVQ7XG4gICAgfSxcblxuICAgIGlzU3Vic2V0OiBmdW5jdGlvbihpdGVyKSB7XG4gICAgICBpdGVyID0gdHlwZW9mIGl0ZXIuaW5jbHVkZXMgPT09ICdmdW5jdGlvbicgPyBpdGVyIDogSXRlcmFibGUoaXRlcik7XG4gICAgICByZXR1cm4gdGhpcy5ldmVyeShmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gaXRlci5pbmNsdWRlcyh2YWx1ZSl9KTtcbiAgICB9LFxuXG4gICAgaXNTdXBlcnNldDogZnVuY3Rpb24oaXRlcikge1xuICAgICAgaXRlciA9IHR5cGVvZiBpdGVyLmlzU3Vic2V0ID09PSAnZnVuY3Rpb24nID8gaXRlciA6IEl0ZXJhYmxlKGl0ZXIpO1xuICAgICAgcmV0dXJuIGl0ZXIuaXNTdWJzZXQodGhpcyk7XG4gICAgfSxcblxuICAgIGtleVNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50b1NlcSgpLm1hcChrZXlNYXBwZXIpLnRvSW5kZXhlZFNlcSgpO1xuICAgIH0sXG5cbiAgICBsYXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmZpcnN0KCk7XG4gICAgfSxcblxuICAgIG1heDogZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvcik7XG4gICAgfSxcblxuICAgIG1heEJ5OiBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBtYXhGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IsIG1hcHBlcik7XG4gICAgfSxcblxuICAgIG1pbjogZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvciA/IG5lZyhjb21wYXJhdG9yKSA6IGRlZmF1bHROZWdDb21wYXJhdG9yKTtcbiAgICB9LFxuXG4gICAgbWluQnk6IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvciA/IG5lZyhjb21wYXJhdG9yKSA6IGRlZmF1bHROZWdDb21wYXJhdG9yLCBtYXBwZXIpO1xuICAgIH0sXG5cbiAgICByZXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnNsaWNlKDEpO1xuICAgIH0sXG5cbiAgICBza2lwOiBmdW5jdGlvbihhbW91bnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnNsaWNlKE1hdGgubWF4KDAsIGFtb3VudCkpO1xuICAgIH0sXG5cbiAgICBza2lwTGFzdDogZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgdGhpcy50b1NlcSgpLnJldmVyc2UoKS5za2lwKGFtb3VudCkucmV2ZXJzZSgpKTtcbiAgICB9LFxuXG4gICAgc2tpcFdoaWxlOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBza2lwV2hpbGVGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBza2lwVW50aWw6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2tpcFdoaWxlKG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgc29ydEJ5OiBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpKTtcbiAgICB9LFxuXG4gICAgdGFrZTogZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5zbGljZSgwLCBNYXRoLm1heCgwLCBhbW91bnQpKTtcbiAgICB9LFxuXG4gICAgdGFrZUxhc3Q6IGZ1bmN0aW9uKGFtb3VudCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkudGFrZShhbW91bnQpLnJldmVyc2UoKSk7XG4gICAgfSxcblxuICAgIHRha2VXaGlsZTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgdGFrZVdoaWxlRmFjdG9yeSh0aGlzLCBwcmVkaWNhdGUsIGNvbnRleHQpKTtcbiAgICB9LFxuXG4gICAgdGFrZVVudGlsOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRha2VXaGlsZShub3QocHJlZGljYXRlKSwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIHZhbHVlU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvSW5kZXhlZFNlcSgpO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBIYXNoYWJsZSBPYmplY3RcblxuICAgIGhhc2hDb2RlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9faGFzaCB8fCAodGhpcy5fX2hhc2ggPSBoYXNoSXRlcmFibGUodGhpcykpO1xuICAgIH1cblxuXG4gICAgLy8gIyMjIEludGVybmFsXG5cbiAgICAvLyBhYnN0cmFjdCBfX2l0ZXJhdGUoZm4sIHJldmVyc2UpXG5cbiAgICAvLyBhYnN0cmFjdCBfX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpXG4gIH0pO1xuXG4gIC8vIHZhciBJU19JVEVSQUJMRV9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0lURVJBQkxFX19AQCc7XG4gIC8vIHZhciBJU19LRVlFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0tFWUVEX19AQCc7XG4gIC8vIHZhciBJU19JTkRFWEVEX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfSU5ERVhFRF9fQEAnO1xuICAvLyB2YXIgSVNfT1JERVJFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX09SREVSRURfX0BAJztcblxuICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG4gIEl0ZXJhYmxlUHJvdG90eXBlW0lTX0lURVJBQkxFX1NFTlRJTkVMXSA9IHRydWU7XG4gIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBJdGVyYWJsZVByb3RvdHlwZS52YWx1ZXM7XG4gIEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9KUyA9IEl0ZXJhYmxlUHJvdG90eXBlLnRvQXJyYXk7XG4gIEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9TdHJpbmdNYXBwZXIgPSBxdW90ZVN0cmluZztcbiAgSXRlcmFibGVQcm90b3R5cGUuaW5zcGVjdCA9XG4gIEl0ZXJhYmxlUHJvdG90eXBlLnRvU291cmNlID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnRvU3RyaW5nKCk7IH07XG4gIEl0ZXJhYmxlUHJvdG90eXBlLmNoYWluID0gSXRlcmFibGVQcm90b3R5cGUuZmxhdE1hcDtcbiAgSXRlcmFibGVQcm90b3R5cGUuY29udGFpbnMgPSBJdGVyYWJsZVByb3RvdHlwZS5pbmNsdWRlcztcblxuICAvLyBUZW1wb3Jhcnkgd2FybmluZyBhYm91dCB1c2luZyBsZW5ndGhcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCAnbGVuZ3RoJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIUl0ZXJhYmxlLm5vTGVuZ3RoV2FybmluZykge1xuICAgICAgICAgICAgdmFyIHN0YWNrO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBzdGFjayA9IGVycm9yLnN0YWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YWNrLmluZGV4T2YoJ193cmFwT2JqZWN0JykgPT09IC0xKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUgJiYgY29uc29sZS53YXJuICYmIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAnaXRlcmFibGUubGVuZ3RoIGhhcyBiZWVuIGRlcHJlY2F0ZWQsICcrXG4gICAgICAgICAgICAgICAgJ3VzZSBpdGVyYWJsZS5zaXplIG9yIGl0ZXJhYmxlLmNvdW50KCkuICcrXG4gICAgICAgICAgICAgICAgJ1RoaXMgd2FybmluZyB3aWxsIGJlY29tZSBhIHNpbGVudCBlcnJvciBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiAnICtcbiAgICAgICAgICAgICAgICBzdGFja1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSkoKTtcblxuXG5cbiAgbWl4aW4oS2V5ZWRJdGVyYWJsZSwge1xuXG4gICAgLy8gIyMjIE1vcmUgc2VxdWVudGlhbCBtZXRob2RzXG5cbiAgICBmbGlwOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGlwRmFjdG9yeSh0aGlzKSk7XG4gICAgfSxcblxuICAgIGZpbmRLZXk6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgdmFyIGVudHJ5ID0gdGhpcy5maW5kRW50cnkocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeVswXTtcbiAgICB9LFxuXG4gICAgZmluZExhc3RLZXk6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkuZmluZEtleShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBrZXlPZjogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmRLZXkoZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIGlzKHZhbHVlLCBzZWFyY2hWYWx1ZSl9KTtcbiAgICB9LFxuXG4gICAgbGFzdEtleU9mOiBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmluZExhc3RLZXkoZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIGlzKHZhbHVlLCBzZWFyY2hWYWx1ZSl9KTtcbiAgICB9LFxuXG4gICAgbWFwRW50cmllczogZnVuY3Rpb24obWFwcGVyLCBjb250ZXh0KSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcyxcbiAgICAgICAgdGhpcy50b1NlcSgpLm1hcChcbiAgICAgICAgICBmdW5jdGlvbih2LCBrKSAge3JldHVybiBtYXBwZXIuY2FsbChjb250ZXh0LCBbaywgdl0sIGl0ZXJhdGlvbnMrKywgdGhpcyQwKX1cbiAgICAgICAgKS5mcm9tRW50cnlTZXEoKVxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgbWFwS2V5czogZnVuY3Rpb24obWFwcGVyLCBjb250ZXh0KSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcyxcbiAgICAgICAgdGhpcy50b1NlcSgpLmZsaXAoKS5tYXAoXG4gICAgICAgICAgZnVuY3Rpb24oaywgdikgIHtyZXR1cm4gbWFwcGVyLmNhbGwoY29udGV4dCwgaywgdiwgdGhpcyQwKX1cbiAgICAgICAgKS5mbGlwKClcbiAgICAgICk7XG4gICAgfVxuXG4gIH0pO1xuXG4gIHZhciBLZXllZEl0ZXJhYmxlUHJvdG90eXBlID0gS2V5ZWRJdGVyYWJsZS5wcm90b3R5cGU7XG4gIEtleWVkSXRlcmFibGVQcm90b3R5cGVbSVNfS0VZRURfU0VOVElORUxdID0gdHJ1ZTtcbiAgS2V5ZWRJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl9TWU1CT0xdID0gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcztcbiAgS2V5ZWRJdGVyYWJsZVByb3RvdHlwZS5fX3RvSlMgPSBJdGVyYWJsZVByb3RvdHlwZS50b09iamVjdDtcbiAgS2V5ZWRJdGVyYWJsZVByb3RvdHlwZS5fX3RvU3RyaW5nTWFwcGVyID0gZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoaykgKyAnOiAnICsgcXVvdGVTdHJpbmcodil9O1xuXG5cblxuICBtaXhpbihJbmRleGVkSXRlcmFibGUsIHtcblxuICAgIC8vICMjIyBDb252ZXJzaW9uIHRvIG90aGVyIHR5cGVzXG5cbiAgICB0b0tleWVkU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVG9LZXllZFNlcXVlbmNlKHRoaXMsIGZhbHNlKTtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgRVM2IENvbGxlY3Rpb24gbWV0aG9kcyAoRVM2IEFycmF5IGFuZCBNYXApXG5cbiAgICBmaWx0ZXI6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZpbHRlckZhY3RvcnkodGhpcywgcHJlZGljYXRlLCBjb250ZXh0LCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgdmFyIGVudHJ5ID0gdGhpcy5maW5kRW50cnkocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICAgIHJldHVybiBlbnRyeSA/IGVudHJ5WzBdIDogLTE7XG4gICAgfSxcblxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICB2YXIga2V5ID0gdGhpcy50b0tleWVkU2VxKCkua2V5T2Yoc2VhcmNoVmFsdWUpO1xuICAgICAgcmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID8gLTEgOiBrZXk7XG4gICAgfSxcblxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgdmFyIGtleSA9IHRoaXMudG9LZXllZFNlcSgpLnJldmVyc2UoKS5rZXlPZihzZWFyY2hWYWx1ZSk7XG4gICAgICByZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgPyAtMSA6IGtleTtcblxuICAgICAgLy8gdmFyIGluZGV4ID1cbiAgICAgIC8vIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmluZGV4T2Yoc2VhcmNoVmFsdWUpO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCByZXZlcnNlRmFjdG9yeSh0aGlzLCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBzbGljZTogZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNsaWNlRmFjdG9yeSh0aGlzLCBiZWdpbiwgZW5kLCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBzcGxpY2U6IGZ1bmN0aW9uKGluZGV4LCByZW1vdmVOdW0gLyosIC4uLnZhbHVlcyovKSB7XG4gICAgICB2YXIgbnVtQXJncyA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICByZW1vdmVOdW0gPSBNYXRoLm1heChyZW1vdmVOdW0gfCAwLCAwKTtcbiAgICAgIGlmIChudW1BcmdzID09PSAwIHx8IChudW1BcmdzID09PSAyICYmICFyZW1vdmVOdW0pKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgLy8gSWYgaW5kZXggaXMgbmVnYXRpdmUsIGl0IHNob3VsZCByZXNvbHZlIHJlbGF0aXZlIHRvIHRoZSBzaXplIG9mIHRoZVxuICAgICAgLy8gY29sbGVjdGlvbi4gSG93ZXZlciBzaXplIG1heSBiZSBleHBlbnNpdmUgdG8gY29tcHV0ZSBpZiBub3QgY2FjaGVkLCBzb1xuICAgICAgLy8gb25seSBjYWxsIGNvdW50KCkgaWYgdGhlIG51bWJlciBpcyBpbiBmYWN0IG5lZ2F0aXZlLlxuICAgICAgaW5kZXggPSByZXNvbHZlQmVnaW4oaW5kZXgsIGluZGV4IDwgMCA/IHRoaXMuY291bnQoKSA6IHRoaXMuc2l6ZSk7XG4gICAgICB2YXIgc3BsaWNlZCA9IHRoaXMuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgcmV0dXJuIHJlaWZ5KFxuICAgICAgICB0aGlzLFxuICAgICAgICBudW1BcmdzID09PSAxID9cbiAgICAgICAgICBzcGxpY2VkIDpcbiAgICAgICAgICBzcGxpY2VkLmNvbmNhdChhcnJDb3B5KGFyZ3VtZW50cywgMiksIHRoaXMuc2xpY2UoaW5kZXggKyByZW1vdmVOdW0pKVxuICAgICAgKTtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgTW9yZSBjb2xsZWN0aW9uIG1ldGhvZHNcblxuICAgIGZpbmRMYXN0SW5kZXg6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgdmFyIGtleSA9IHRoaXMudG9LZXllZFNlcSgpLmZpbmRMYXN0S2V5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICByZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgPyAtMSA6IGtleTtcbiAgICB9LFxuXG4gICAgZmlyc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KDApO1xuICAgIH0sXG5cbiAgICBmbGF0dGVuOiBmdW5jdGlvbihkZXB0aCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZsYXR0ZW5GYWN0b3J5KHRoaXMsIGRlcHRoLCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgcmV0dXJuIChpbmRleCA8IDAgfHwgKHRoaXMuc2l6ZSA9PT0gSW5maW5pdHkgfHxcbiAgICAgICAgICAodGhpcy5zaXplICE9PSB1bmRlZmluZWQgJiYgaW5kZXggPiB0aGlzLnNpemUpKSkgP1xuICAgICAgICBub3RTZXRWYWx1ZSA6XG4gICAgICAgIHRoaXMuZmluZChmdW5jdGlvbihfLCBrZXkpICB7cmV0dXJuIGtleSA9PT0gaW5kZXh9LCB1bmRlZmluZWQsIG5vdFNldFZhbHVlKTtcbiAgICB9LFxuXG4gICAgaGFzOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgcmV0dXJuIGluZGV4ID49IDAgJiYgKHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgdGhpcy5zaXplID09PSBJbmZpbml0eSB8fCBpbmRleCA8IHRoaXMuc2l6ZSA6XG4gICAgICAgIHRoaXMuaW5kZXhPZihpbmRleCkgIT09IC0xXG4gICAgICApO1xuICAgIH0sXG5cbiAgICBpbnRlcnBvc2U6IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGludGVycG9zZUZhY3RvcnkodGhpcywgc2VwYXJhdG9yKSk7XG4gICAgfSxcblxuICAgIGludGVybGVhdmU6IGZ1bmN0aW9uKC8qLi4uaXRlcmFibGVzKi8pIHtcbiAgICAgIHZhciBpdGVyYWJsZXMgPSBbdGhpc10uY29uY2F0KGFyckNvcHkoYXJndW1lbnRzKSk7XG4gICAgICB2YXIgemlwcGVkID0gemlwV2l0aEZhY3RvcnkodGhpcy50b1NlcSgpLCBJbmRleGVkU2VxLm9mLCBpdGVyYWJsZXMpO1xuICAgICAgdmFyIGludGVybGVhdmVkID0gemlwcGVkLmZsYXR0ZW4odHJ1ZSk7XG4gICAgICBpZiAoemlwcGVkLnNpemUpIHtcbiAgICAgICAgaW50ZXJsZWF2ZWQuc2l6ZSA9IHppcHBlZC5zaXplICogaXRlcmFibGVzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBpbnRlcmxlYXZlZCk7XG4gICAgfSxcblxuICAgIGxhc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KC0xKTtcbiAgICB9LFxuXG4gICAgc2tpcFdoaWxlOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBza2lwV2hpbGVGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgZmFsc2UpKTtcbiAgICB9LFxuXG4gICAgemlwOiBmdW5jdGlvbigvKiwgLi4uaXRlcmFibGVzICovKSB7XG4gICAgICB2YXIgaXRlcmFibGVzID0gW3RoaXNdLmNvbmNhdChhcnJDb3B5KGFyZ3VtZW50cykpO1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHppcFdpdGhGYWN0b3J5KHRoaXMsIGRlZmF1bHRaaXBwZXIsIGl0ZXJhYmxlcykpO1xuICAgIH0sXG5cbiAgICB6aXBXaXRoOiBmdW5jdGlvbih6aXBwZXIvKiwgLi4uaXRlcmFibGVzICovKSB7XG4gICAgICB2YXIgaXRlcmFibGVzID0gYXJyQ29weShhcmd1bWVudHMpO1xuICAgICAgaXRlcmFibGVzWzBdID0gdGhpcztcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCB6aXBXaXRoRmFjdG9yeSh0aGlzLCB6aXBwZXIsIGl0ZXJhYmxlcykpO1xuICAgIH1cblxuICB9KTtcblxuICBJbmRleGVkSXRlcmFibGUucHJvdG90eXBlW0lTX0lOREVYRURfU0VOVElORUxdID0gdHJ1ZTtcbiAgSW5kZXhlZEl0ZXJhYmxlLnByb3RvdHlwZVtJU19PUkRFUkVEX1NFTlRJTkVMXSA9IHRydWU7XG5cblxuXG4gIG1peGluKFNldEl0ZXJhYmxlLCB7XG5cbiAgICAvLyAjIyMgRVM2IENvbGxlY3Rpb24gbWV0aG9kcyAoRVM2IEFycmF5IGFuZCBNYXApXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKHZhbHVlLCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzKHZhbHVlKSA/IHZhbHVlIDogbm90U2V0VmFsdWU7XG4gICAgfSxcblxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzKHZhbHVlKTtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgTW9yZSBzZXF1ZW50aWFsIG1ldGhvZHNcblxuICAgIGtleVNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZVNlcSgpO1xuICAgIH1cblxuICB9KTtcblxuICBTZXRJdGVyYWJsZS5wcm90b3R5cGUuaGFzID0gSXRlcmFibGVQcm90b3R5cGUuaW5jbHVkZXM7XG5cblxuICAvLyBNaXhpbiBzdWJjbGFzc2VzXG5cbiAgbWl4aW4oS2V5ZWRTZXEsIEtleWVkSXRlcmFibGUucHJvdG90eXBlKTtcbiAgbWl4aW4oSW5kZXhlZFNlcSwgSW5kZXhlZEl0ZXJhYmxlLnByb3RvdHlwZSk7XG4gIG1peGluKFNldFNlcSwgU2V0SXRlcmFibGUucHJvdG90eXBlKTtcblxuICBtaXhpbihLZXllZENvbGxlY3Rpb24sIEtleWVkSXRlcmFibGUucHJvdG90eXBlKTtcbiAgbWl4aW4oSW5kZXhlZENvbGxlY3Rpb24sIEluZGV4ZWRJdGVyYWJsZS5wcm90b3R5cGUpO1xuICBtaXhpbihTZXRDb2xsZWN0aW9uLCBTZXRJdGVyYWJsZS5wcm90b3R5cGUpO1xuXG5cbiAgLy8gI3ByYWdtYSBIZWxwZXIgZnVuY3Rpb25zXG5cbiAgZnVuY3Rpb24ga2V5TWFwcGVyKHYsIGspIHtcbiAgICByZXR1cm4gaztcbiAgfVxuXG4gIGZ1bmN0aW9uIGVudHJ5TWFwcGVyKHYsIGspIHtcbiAgICByZXR1cm4gW2ssIHZdO1xuICB9XG5cbiAgZnVuY3Rpb24gbm90KHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbmVnKHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAtcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcXVvdGVTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKSA6IHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFppcHBlcigpIHtcbiAgICByZXR1cm4gYXJyQ29weShhcmd1bWVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdE5lZ0NvbXBhcmF0b3IoYSwgYikge1xuICAgIHJldHVybiBhIDwgYiA/IDEgOiBhID4gYiA/IC0xIDogMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc2hJdGVyYWJsZShpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZS5zaXplID09PSBJbmZpbml0eSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHZhciBvcmRlcmVkID0gaXNPcmRlcmVkKGl0ZXJhYmxlKTtcbiAgICB2YXIga2V5ZWQgPSBpc0tleWVkKGl0ZXJhYmxlKTtcbiAgICB2YXIgaCA9IG9yZGVyZWQgPyAxIDogMDtcbiAgICB2YXIgc2l6ZSA9IGl0ZXJhYmxlLl9faXRlcmF0ZShcbiAgICAgIGtleWVkID9cbiAgICAgICAgb3JkZXJlZCA/XG4gICAgICAgICAgZnVuY3Rpb24odiwgaykgIHsgaCA9IDMxICogaCArIGhhc2hNZXJnZShoYXNoKHYpLCBoYXNoKGspKSB8IDA7IH0gOlxuICAgICAgICAgIGZ1bmN0aW9uKHYsIGspICB7IGggPSBoICsgaGFzaE1lcmdlKGhhc2godiksIGhhc2goaykpIHwgMDsgfSA6XG4gICAgICAgIG9yZGVyZWQgP1xuICAgICAgICAgIGZ1bmN0aW9uKHYgKSB7IGggPSAzMSAqIGggKyBoYXNoKHYpIHwgMDsgfSA6XG4gICAgICAgICAgZnVuY3Rpb24odiApIHsgaCA9IGggKyBoYXNoKHYpIHwgMDsgfVxuICAgICk7XG4gICAgcmV0dXJuIG11cm11ckhhc2hPZlNpemUoc2l6ZSwgaCk7XG4gIH1cblxuICBmdW5jdGlvbiBtdXJtdXJIYXNoT2ZTaXplKHNpemUsIGgpIHtcbiAgICBoID0gaW11bChoLCAweENDOUUyRDUxKTtcbiAgICBoID0gaW11bChoIDw8IDE1IHwgaCA+Pj4gLTE1LCAweDFCODczNTkzKTtcbiAgICBoID0gaW11bChoIDw8IDEzIHwgaCA+Pj4gLTEzLCA1KTtcbiAgICBoID0gKGggKyAweEU2NTQ2QjY0IHwgMCkgXiBzaXplO1xuICAgIGggPSBpbXVsKGggXiBoID4+PiAxNiwgMHg4NUVCQ0E2Qik7XG4gICAgaCA9IGltdWwoaCBeIGggPj4+IDEzLCAweEMyQjJBRTM1KTtcbiAgICBoID0gc21pKGggXiBoID4+PiAxNik7XG4gICAgcmV0dXJuIGg7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNoTWVyZ2UoYSwgYikge1xuICAgIHJldHVybiBhIF4gYiArIDB4OUUzNzc5QjkgKyAoYSA8PCA2KSArIChhID4+IDIpIHwgMDsgLy8gaW50XG4gIH1cblxuICB2YXIgSW1tdXRhYmxlID0ge1xuXG4gICAgSXRlcmFibGU6IEl0ZXJhYmxlLFxuXG4gICAgU2VxOiBTZXEsXG4gICAgQ29sbGVjdGlvbjogQ29sbGVjdGlvbixcbiAgICBNYXA6IE1hcCxcbiAgICBPcmRlcmVkTWFwOiBPcmRlcmVkTWFwLFxuICAgIExpc3Q6IExpc3QsXG4gICAgU3RhY2s6IFN0YWNrLFxuICAgIFNldDogU2V0LFxuICAgIE9yZGVyZWRTZXQ6IE9yZGVyZWRTZXQsXG5cbiAgICBSZWNvcmQ6IFJlY29yZCxcbiAgICBSYW5nZTogUmFuZ2UsXG4gICAgUmVwZWF0OiBSZXBlYXQsXG5cbiAgICBpczogaXMsXG4gICAgZnJvbUpTOiBmcm9tSlNcblxuICB9O1xuXG4gIHJldHVybiBJbW11dGFibGU7XG5cbn0pKTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEVkaXRvclN0YXRlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgX2V4dGVuZHMgPSBfYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQmxvY2tUcmVlID0gcmVxdWlyZSgnLi9CbG9ja1RyZWUnKTtcbnZhciBDb250ZW50U3RhdGUgPSByZXF1aXJlKCcuL0NvbnRlbnRTdGF0ZScpO1xudmFyIEVkaXRvckJpZGlTZXJ2aWNlID0gcmVxdWlyZSgnLi9FZGl0b3JCaWRpU2VydmljZScpO1xudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xudmFyIFNlbGVjdGlvblN0YXRlID0gcmVxdWlyZSgnLi9TZWxlY3Rpb25TdGF0ZScpO1xuXG52YXIgT3JkZXJlZFNldCA9IEltbXV0YWJsZS5PcmRlcmVkU2V0LFxuICAgIFJlY29yZCA9IEltbXV0YWJsZS5SZWNvcmQsXG4gICAgU3RhY2sgPSBJbW11dGFibGUuU3RhY2s7XG5cblxudmFyIGRlZmF1bHRSZWNvcmQgPSB7XG4gIGFsbG93VW5kbzogdHJ1ZSxcbiAgY3VycmVudENvbnRlbnQ6IG51bGwsXG4gIGRlY29yYXRvcjogbnVsbCxcbiAgZGlyZWN0aW9uTWFwOiBudWxsLFxuICBmb3JjZVNlbGVjdGlvbjogZmFsc2UsXG4gIGluQ29tcG9zaXRpb25Nb2RlOiBmYWxzZSxcbiAgaW5saW5lU3R5bGVPdmVycmlkZTogbnVsbCxcbiAgbGFzdENoYW5nZVR5cGU6IG51bGwsXG4gIG5hdGl2ZWx5UmVuZGVyZWRDb250ZW50OiBudWxsLFxuICByZWRvU3RhY2s6IFN0YWNrKCksXG4gIHNlbGVjdGlvbjogbnVsbCxcbiAgdHJlZU1hcDogbnVsbCxcbiAgdW5kb1N0YWNrOiBTdGFjaygpXG59O1xuXG52YXIgRWRpdG9yU3RhdGVSZWNvcmQgPSBSZWNvcmQoZGVmYXVsdFJlY29yZCk7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgRWRpdG9yU3RhdGUuY3JlYXRlRW1wdHkgPSBmdW5jdGlvbiBjcmVhdGVFbXB0eShkZWNvcmF0b3IpIHtcbiAgICByZXR1cm4gRWRpdG9yU3RhdGUuY3JlYXRlV2l0aENvbnRlbnQoQ29udGVudFN0YXRlLmNyZWF0ZUZyb21UZXh0KCcnKSwgZGVjb3JhdG9yKTtcbiAgfTtcblxuICBFZGl0b3JTdGF0ZS5jcmVhdGVXaXRoQ29udGVudCA9IGZ1bmN0aW9uIGNyZWF0ZVdpdGhDb250ZW50KGNvbnRlbnRTdGF0ZSwgZGVjb3JhdG9yKSB7XG4gICAgdmFyIGZpcnN0S2V5ID0gY29udGVudFN0YXRlLmdldEJsb2NrTWFwKCkuZmlyc3QoKS5nZXRLZXkoKTtcbiAgICByZXR1cm4gRWRpdG9yU3RhdGUuY3JlYXRlKHtcbiAgICAgIGN1cnJlbnRDb250ZW50OiBjb250ZW50U3RhdGUsXG4gICAgICB1bmRvU3RhY2s6IFN0YWNrKCksXG4gICAgICByZWRvU3RhY2s6IFN0YWNrKCksXG4gICAgICBkZWNvcmF0b3I6IGRlY29yYXRvciB8fCBudWxsLFxuICAgICAgc2VsZWN0aW9uOiBTZWxlY3Rpb25TdGF0ZS5jcmVhdGVFbXB0eShmaXJzdEtleSlcbiAgICB9KTtcbiAgfTtcblxuICBFZGl0b3JTdGF0ZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoY29uZmlnKSB7XG4gICAgdmFyIGN1cnJlbnRDb250ZW50ID0gY29uZmlnLmN1cnJlbnRDb250ZW50LFxuICAgICAgICBkZWNvcmF0b3IgPSBjb25maWcuZGVjb3JhdG9yO1xuXG4gICAgdmFyIHJlY29yZENvbmZpZyA9IF9leHRlbmRzKHt9LCBjb25maWcsIHtcbiAgICAgIHRyZWVNYXA6IGdlbmVyYXRlTmV3VHJlZU1hcChjdXJyZW50Q29udGVudCwgZGVjb3JhdG9yKSxcbiAgICAgIGRpcmVjdGlvbk1hcDogRWRpdG9yQmlkaVNlcnZpY2UuZ2V0RGlyZWN0aW9uTWFwKGN1cnJlbnRDb250ZW50KVxuICAgIH0pO1xuICAgIHJldHVybiBuZXcgRWRpdG9yU3RhdGUobmV3IEVkaXRvclN0YXRlUmVjb3JkKHJlY29yZENvbmZpZykpO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLnNldCA9IGZ1bmN0aW9uIHNldChlZGl0b3JTdGF0ZSwgcHV0KSB7XG4gICAgdmFyIG1hcCA9IGVkaXRvclN0YXRlLmdldEltbXV0YWJsZSgpLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICB2YXIgZXhpc3RpbmdEZWNvcmF0b3IgPSBzdGF0ZS5nZXQoJ2RlY29yYXRvcicpO1xuICAgICAgdmFyIGRlY29yYXRvciA9IGV4aXN0aW5nRGVjb3JhdG9yO1xuICAgICAgaWYgKHB1dC5kZWNvcmF0b3IgPT09IG51bGwpIHtcbiAgICAgICAgZGVjb3JhdG9yID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAocHV0LmRlY29yYXRvcikge1xuICAgICAgICBkZWNvcmF0b3IgPSBwdXQuZGVjb3JhdG9yO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3Q29udGVudCA9IHB1dC5jdXJyZW50Q29udGVudCB8fCBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuXG4gICAgICBpZiAoZGVjb3JhdG9yICE9PSBleGlzdGluZ0RlY29yYXRvcikge1xuICAgICAgICB2YXIgdHJlZU1hcCA9IHN0YXRlLmdldCgndHJlZU1hcCcpO1xuICAgICAgICB2YXIgbmV3VHJlZU1hcDtcbiAgICAgICAgaWYgKGRlY29yYXRvciAmJiBleGlzdGluZ0RlY29yYXRvcikge1xuICAgICAgICAgIG5ld1RyZWVNYXAgPSByZWdlbmVyYXRlVHJlZUZvck5ld0RlY29yYXRvcihuZXdDb250ZW50LCBuZXdDb250ZW50LmdldEJsb2NrTWFwKCksIHRyZWVNYXAsIGRlY29yYXRvciwgZXhpc3RpbmdEZWNvcmF0b3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1RyZWVNYXAgPSBnZW5lcmF0ZU5ld1RyZWVNYXAobmV3Q29udGVudCwgZGVjb3JhdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlLm1lcmdlKHtcbiAgICAgICAgICBkZWNvcmF0b3I6IGRlY29yYXRvcixcbiAgICAgICAgICB0cmVlTWFwOiBuZXdUcmVlTWFwLFxuICAgICAgICAgIG5hdGl2ZWx5UmVuZGVyZWRDb250ZW50OiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBleGlzdGluZ0NvbnRlbnQgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgICAgaWYgKG5ld0NvbnRlbnQgIT09IGV4aXN0aW5nQ29udGVudCkge1xuICAgICAgICBzdGF0ZS5zZXQoJ3RyZWVNYXAnLCByZWdlbmVyYXRlVHJlZUZvck5ld0Jsb2NrcyhlZGl0b3JTdGF0ZSwgbmV3Q29udGVudC5nZXRCbG9ja01hcCgpLCBuZXdDb250ZW50LmdldEVudGl0eU1hcCgpLCBkZWNvcmF0b3IpKTtcbiAgICAgIH1cblxuICAgICAgc3RhdGUubWVyZ2UocHV0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgRWRpdG9yU3RhdGUobWFwKTtcbiAgfTtcblxuICBFZGl0b3JTdGF0ZS5wcm90b3R5cGUudG9KUyA9IGZ1bmN0aW9uIHRvSlMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SW1tdXRhYmxlKCkudG9KUygpO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLnByb3RvdHlwZS5nZXRBbGxvd1VuZG8gPSBmdW5jdGlvbiBnZXRBbGxvd1VuZG8oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SW1tdXRhYmxlKCkuZ2V0KCdhbGxvd1VuZG8nKTtcbiAgfTtcblxuICBFZGl0b3JTdGF0ZS5wcm90b3R5cGUuZ2V0Q3VycmVudENvbnRlbnQgPSBmdW5jdGlvbiBnZXRDdXJyZW50Q29udGVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbW11dGFibGUoKS5nZXQoJ2N1cnJlbnRDb250ZW50Jyk7XG4gIH07XG5cbiAgRWRpdG9yU3RhdGUucHJvdG90eXBlLmdldFVuZG9TdGFjayA9IGZ1bmN0aW9uIGdldFVuZG9TdGFjaygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbW11dGFibGUoKS5nZXQoJ3VuZG9TdGFjaycpO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLnByb3RvdHlwZS5nZXRSZWRvU3RhY2sgPSBmdW5jdGlvbiBnZXRSZWRvU3RhY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SW1tdXRhYmxlKCkuZ2V0KCdyZWRvU3RhY2snKTtcbiAgfTtcblxuICBFZGl0b3JTdGF0ZS5wcm90b3R5cGUuZ2V0U2VsZWN0aW9uID0gZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdldEltbXV0YWJsZSgpLmdldCgnc2VsZWN0aW9uJyk7XG4gIH07XG5cbiAgRWRpdG9yU3RhdGUucHJvdG90eXBlLmdldERlY29yYXRvciA9IGZ1bmN0aW9uIGdldERlY29yYXRvcigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbW11dGFibGUoKS5nZXQoJ2RlY29yYXRvcicpO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLnByb3RvdHlwZS5pc0luQ29tcG9zaXRpb25Nb2RlID0gZnVuY3Rpb24gaXNJbkNvbXBvc2l0aW9uTW9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbW11dGFibGUoKS5nZXQoJ2luQ29tcG9zaXRpb25Nb2RlJyk7XG4gIH07XG5cbiAgRWRpdG9yU3RhdGUucHJvdG90eXBlLm11c3RGb3JjZVNlbGVjdGlvbiA9IGZ1bmN0aW9uIG11c3RGb3JjZVNlbGVjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbW11dGFibGUoKS5nZXQoJ2ZvcmNlU2VsZWN0aW9uJyk7XG4gIH07XG5cbiAgRWRpdG9yU3RhdGUucHJvdG90eXBlLmdldE5hdGl2ZWx5UmVuZGVyZWRDb250ZW50ID0gZnVuY3Rpb24gZ2V0TmF0aXZlbHlSZW5kZXJlZENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SW1tdXRhYmxlKCkuZ2V0KCduYXRpdmVseVJlbmRlcmVkQ29udGVudCcpO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLnByb3RvdHlwZS5nZXRMYXN0Q2hhbmdlVHlwZSA9IGZ1bmN0aW9uIGdldExhc3RDaGFuZ2VUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLmdldEltbXV0YWJsZSgpLmdldCgnbGFzdENoYW5nZVR5cGUnKTtcbiAgfTtcblxuICAvKipcbiAgICogV2hpbGUgZWRpdGluZywgdGhlIHVzZXIgbWF5IGFwcGx5IGlubGluZSBzdHlsZSBjb21tYW5kcyB3aXRoIGEgY29sbGFwc2VkXG4gICAqIGN1cnNvciwgaW50ZW5kaW5nIHRvIHR5cGUgdGV4dCB0aGF0IGFkb3B0cyB0aGUgc3BlY2lmaWVkIHN0eWxlLiBJbiB0aGlzXG4gICAqIGNhc2UsIHdlIHRyYWNrIHRoZSBzcGVjaWZpZWQgc3R5bGUgYXMgYW4gXCJvdmVycmlkZVwiIHRoYXQgdGFrZXMgcHJlY2VkZW5jZVxuICAgKiBvdmVyIHRoZSBpbmxpbmUgc3R5bGUgb2YgdGhlIHRleHQgYWRqYWNlbnQgdG8gdGhlIGN1cnNvci5cbiAgICpcbiAgICogSWYgbnVsbCwgdGhlcmUgaXMgbm8gb3ZlcnJpZGUgaW4gcGxhY2UuXG4gICAqL1xuXG5cbiAgRWRpdG9yU3RhdGUucHJvdG90eXBlLmdldElubGluZVN0eWxlT3ZlcnJpZGUgPSBmdW5jdGlvbiBnZXRJbmxpbmVTdHlsZU92ZXJyaWRlKCkge1xuICAgIHJldHVybiB0aGlzLmdldEltbXV0YWJsZSgpLmdldCgnaW5saW5lU3R5bGVPdmVycmlkZScpO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLnNldElubGluZVN0eWxlT3ZlcnJpZGUgPSBmdW5jdGlvbiBzZXRJbmxpbmVTdHlsZU92ZXJyaWRlKGVkaXRvclN0YXRlLCBpbmxpbmVTdHlsZU92ZXJyaWRlKSB7XG4gICAgcmV0dXJuIEVkaXRvclN0YXRlLnNldChlZGl0b3JTdGF0ZSwgeyBpbmxpbmVTdHlsZU92ZXJyaWRlOiBpbmxpbmVTdHlsZU92ZXJyaWRlIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGFwcHJvcHJpYXRlIGlubGluZSBzdHlsZSBmb3IgdGhlIGVkaXRvciBzdGF0ZS4gSWYgYW5cbiAgICogb3ZlcnJpZGUgaXMgaW4gcGxhY2UsIHVzZSBpdC4gT3RoZXJ3aXNlLCB0aGUgY3VycmVudCBzdHlsZSBpc1xuICAgKiBiYXNlZCBvbiB0aGUgbG9jYXRpb24gb2YgdGhlIHNlbGVjdGlvbiBzdGF0ZS5cbiAgICovXG5cblxuICBFZGl0b3JTdGF0ZS5wcm90b3R5cGUuZ2V0Q3VycmVudElubGluZVN0eWxlID0gZnVuY3Rpb24gZ2V0Q3VycmVudElubGluZVN0eWxlKCkge1xuICAgIHZhciBvdmVycmlkZSA9IHRoaXMuZ2V0SW5saW5lU3R5bGVPdmVycmlkZSgpO1xuICAgIGlmIChvdmVycmlkZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gb3ZlcnJpZGU7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIHNlbGVjdGlvbiA9IHRoaXMuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgICBpZiAoc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkpIHtcbiAgICAgIHJldHVybiBnZXRJbmxpbmVTdHlsZUZvckNvbGxhcHNlZFNlbGVjdGlvbihjb250ZW50LCBzZWxlY3Rpb24pO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRJbmxpbmVTdHlsZUZvck5vbkNvbGxhcHNlZFNlbGVjdGlvbihjb250ZW50LCBzZWxlY3Rpb24pO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLnByb3RvdHlwZS5nZXRCbG9ja1RyZWUgPSBmdW5jdGlvbiBnZXRCbG9ja1RyZWUoYmxvY2tLZXkpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbW11dGFibGUoKS5nZXRJbihbJ3RyZWVNYXAnLCBibG9ja0tleV0pO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLnByb3RvdHlwZS5pc1NlbGVjdGlvbkF0U3RhcnRPZkNvbnRlbnQgPSBmdW5jdGlvbiBpc1NlbGVjdGlvbkF0U3RhcnRPZkNvbnRlbnQoKSB7XG4gICAgdmFyIGZpcnN0S2V5ID0gdGhpcy5nZXRDdXJyZW50Q29udGVudCgpLmdldEJsb2NrTWFwKCkuZmlyc3QoKS5nZXRLZXkoKTtcbiAgICByZXR1cm4gdGhpcy5nZXRTZWxlY3Rpb24oKS5oYXNFZGdlV2l0aGluKGZpcnN0S2V5LCAwLCAwKTtcbiAgfTtcblxuICBFZGl0b3JTdGF0ZS5wcm90b3R5cGUuaXNTZWxlY3Rpb25BdEVuZE9mQ29udGVudCA9IGZ1bmN0aW9uIGlzU2VsZWN0aW9uQXRFbmRPZkNvbnRlbnQoKSB7XG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIGJsb2NrTWFwID0gY29udGVudC5nZXRCbG9ja01hcCgpO1xuICAgIHZhciBsYXN0ID0gYmxvY2tNYXAubGFzdCgpO1xuICAgIHZhciBlbmQgPSBsYXN0LmdldExlbmd0aCgpO1xuICAgIHJldHVybiB0aGlzLmdldFNlbGVjdGlvbigpLmhhc0VkZ2VXaXRoaW4obGFzdC5nZXRLZXkoKSwgZW5kLCBlbmQpO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLnByb3RvdHlwZS5nZXREaXJlY3Rpb25NYXAgPSBmdW5jdGlvbiBnZXREaXJlY3Rpb25NYXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SW1tdXRhYmxlKCkuZ2V0KCdkaXJlY3Rpb25NYXAnKTtcbiAgfTtcblxuICAvKipcbiAgICogSW5jb3Jwb3JhdGUgbmF0aXZlIERPTSBzZWxlY3Rpb24gY2hhbmdlcyBpbnRvIHRoZSBFZGl0b3JTdGF0ZS4gVGhpc1xuICAgKiBtZXRob2QgY2FuIGJlIHVzZWQgd2hlbiB3ZSBzaW1wbHkgd2FudCB0byBhY2NlcHQgd2hhdGV2ZXIgdGhlIERPTVxuICAgKiBoYXMgZ2l2ZW4gdXMgdG8gcmVwcmVzZW50IHNlbGVjdGlvbiwgYW5kIHdlIGRvIG5vdCBuZWVkIHRvIHJlLXJlbmRlclxuICAgKiB0aGUgZWRpdG9yLlxuICAgKlxuICAgKiBUbyBmb3JjaWJseSBtb3ZlIHRoZSBET00gc2VsZWN0aW9uLCBzZWUgYEVkaXRvclN0YXRlLmZvcmNlU2VsZWN0aW9uYC5cbiAgICovXG5cblxuICBFZGl0b3JTdGF0ZS5hY2NlcHRTZWxlY3Rpb24gPSBmdW5jdGlvbiBhY2NlcHRTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIHNlbGVjdGlvbikge1xuICAgIHJldHVybiB1cGRhdGVTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIHNlbGVjdGlvbiwgZmFsc2UpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBdCB0aW1lcywgd2UgbmVlZCB0byBmb3JjZSB0aGUgRE9NIHNlbGVjdGlvbiB0byBiZSB3aGVyZSB3ZVxuICAgKiBuZWVkIGl0IHRvIGJlLiBUaGlzIGNhbiBvY2N1ciB3aGVuIHRoZSBhbmNob3Igb3IgZm9jdXMgbm9kZXNcbiAgICogYXJlIG5vbi10ZXh0IG5vZGVzLCBmb3IgaW5zdGFuY2UuIEluIHRoaXMgY2FzZSwgd2Ugd2FudCB0byB0cmlnZ2VyXG4gICAqIGEgcmUtcmVuZGVyIG9mIHRoZSBlZGl0b3IsIHdoaWNoIGluIHR1cm4gZm9yY2VzIHNlbGVjdGlvbiBpbnRvXG4gICAqIHRoZSBjb3JyZWN0IHBsYWNlIGluIHRoZSBET00uIFRoZSBgZm9yY2VTZWxlY3Rpb25gIG1ldGhvZFxuICAgKiBhY2NvbXBsaXNoZXMgdGhpcy5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIHVzZWQgaW4gY2FzZXMgd2hlcmUgeW91IG5lZWQgdG8gZXhwbGljaXRseVxuICAgKiBtb3ZlIHRoZSBET00gc2VsZWN0aW9uIGZyb20gb25lIHBsYWNlIHRvIGFub3RoZXIgd2l0aG91dCBhIGNoYW5nZVxuICAgKiBpbiBDb250ZW50U3RhdGUuXG4gICAqL1xuXG5cbiAgRWRpdG9yU3RhdGUuZm9yY2VTZWxlY3Rpb24gPSBmdW5jdGlvbiBmb3JjZVNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgc2VsZWN0aW9uKSB7XG4gICAgaWYgKCFzZWxlY3Rpb24uZ2V0SGFzRm9jdXMoKSkge1xuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0aW9uLnNldCgnaGFzRm9jdXMnLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZVNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgc2VsZWN0aW9uLCB0cnVlKTtcbiAgfTtcblxuICAvKipcbiAgICogTW92ZSBzZWxlY3Rpb24gdG8gdGhlIGVuZCBvZiB0aGUgZWRpdG9yIHdpdGhvdXQgZm9yY2luZyBmb2N1cy5cbiAgICovXG5cblxuICBFZGl0b3JTdGF0ZS5tb3ZlU2VsZWN0aW9uVG9FbmQgPSBmdW5jdGlvbiBtb3ZlU2VsZWN0aW9uVG9FbmQoZWRpdG9yU3RhdGUpIHtcbiAgICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIGxhc3RCbG9jayA9IGNvbnRlbnQuZ2V0TGFzdEJsb2NrKCk7XG4gICAgdmFyIGxhc3RLZXkgPSBsYXN0QmxvY2suZ2V0S2V5KCk7XG4gICAgdmFyIGxlbmd0aCA9IGxhc3RCbG9jay5nZXRMZW5ndGgoKTtcblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5hY2NlcHRTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIG5ldyBTZWxlY3Rpb25TdGF0ZSh7XG4gICAgICBhbmNob3JLZXk6IGxhc3RLZXksXG4gICAgICBhbmNob3JPZmZzZXQ6IGxlbmd0aCxcbiAgICAgIGZvY3VzS2V5OiBsYXN0S2V5LFxuICAgICAgZm9jdXNPZmZzZXQ6IGxlbmd0aCxcbiAgICAgIGlzQmFja3dhcmQ6IGZhbHNlXG4gICAgfSkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBGb3JjZSBmb2N1cyB0byB0aGUgZW5kIG9mIHRoZSBlZGl0b3IuIFRoaXMgaXMgdXNlZnVsIGluIHNjZW5hcmlvc1xuICAgKiB3aGVyZSB3ZSB3YW50IHRvIHByb2dyYW1tYXRpY2FsbHkgZm9jdXMgdGhlIGlucHV0IGFuZCBpdCBtYWtlcyBzZW5zZVxuICAgKiB0byBhbGxvdyB0aGUgdXNlciB0byBjb250aW51ZSB3b3JraW5nIHNlYW1sZXNzbHkuXG4gICAqL1xuXG5cbiAgRWRpdG9yU3RhdGUubW92ZUZvY3VzVG9FbmQgPSBmdW5jdGlvbiBtb3ZlRm9jdXNUb0VuZChlZGl0b3JTdGF0ZSkge1xuICAgIHZhciBhZnRlclNlbGVjdGlvbk1vdmUgPSBFZGl0b3JTdGF0ZS5tb3ZlU2VsZWN0aW9uVG9FbmQoZWRpdG9yU3RhdGUpO1xuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5mb3JjZVNlbGVjdGlvbihhZnRlclNlbGVjdGlvbk1vdmUsIGFmdGVyU2VsZWN0aW9uTW92ZS5nZXRTZWxlY3Rpb24oKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFB1c2ggdGhlIGN1cnJlbnQgQ29udGVudFN0YXRlIG9udG8gdGhlIHVuZG8gc3RhY2sgaWYgaXQgc2hvdWxkIGJlXG4gICAqIGNvbnNpZGVyZWQgYSBib3VuZGFyeSBzdGF0ZSwgYW5kIHNldCB0aGUgcHJvdmlkZWQgQ29udGVudFN0YXRlIGFzIHRoZVxuICAgKiBuZXcgY3VycmVudCBjb250ZW50LlxuICAgKi9cblxuXG4gIEVkaXRvclN0YXRlLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGVkaXRvclN0YXRlLCBjb250ZW50U3RhdGUsIGNoYW5nZVR5cGUpIHtcbiAgICBpZiAoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSA9PT0gY29udGVudFN0YXRlKSB7XG4gICAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIGZvcmNlU2VsZWN0aW9uID0gY2hhbmdlVHlwZSAhPT0gJ2luc2VydC1jaGFyYWN0ZXJzJztcbiAgICB2YXIgZGlyZWN0aW9uTWFwID0gRWRpdG9yQmlkaVNlcnZpY2UuZ2V0RGlyZWN0aW9uTWFwKGNvbnRlbnRTdGF0ZSwgZWRpdG9yU3RhdGUuZ2V0RGlyZWN0aW9uTWFwKCkpO1xuXG4gICAgaWYgKCFlZGl0b3JTdGF0ZS5nZXRBbGxvd1VuZG8oKSkge1xuICAgICAgcmV0dXJuIEVkaXRvclN0YXRlLnNldChlZGl0b3JTdGF0ZSwge1xuICAgICAgICBjdXJyZW50Q29udGVudDogY29udGVudFN0YXRlLFxuICAgICAgICBkaXJlY3Rpb25NYXA6IGRpcmVjdGlvbk1hcCxcbiAgICAgICAgbGFzdENoYW5nZVR5cGU6IGNoYW5nZVR5cGUsXG4gICAgICAgIHNlbGVjdGlvbjogY29udGVudFN0YXRlLmdldFNlbGVjdGlvbkFmdGVyKCksXG4gICAgICAgIGZvcmNlU2VsZWN0aW9uOiBmb3JjZVNlbGVjdGlvbixcbiAgICAgICAgaW5saW5lU3R5bGVPdmVycmlkZTogbnVsbFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIHZhciBjdXJyZW50Q29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIHVuZG9TdGFjayA9IGVkaXRvclN0YXRlLmdldFVuZG9TdGFjaygpO1xuICAgIHZhciBuZXdDb250ZW50ID0gY29udGVudFN0YXRlO1xuXG4gICAgaWYgKHNlbGVjdGlvbiAhPT0gY3VycmVudENvbnRlbnQuZ2V0U2VsZWN0aW9uQWZ0ZXIoKSB8fCBtdXN0QmVjb21lQm91bmRhcnkoZWRpdG9yU3RhdGUsIGNoYW5nZVR5cGUpKSB7XG4gICAgICB1bmRvU3RhY2sgPSB1bmRvU3RhY2sucHVzaChjdXJyZW50Q29udGVudCk7XG4gICAgICBuZXdDb250ZW50ID0gbmV3Q29udGVudC5zZXQoJ3NlbGVjdGlvbkJlZm9yZScsIHNlbGVjdGlvbik7XG4gICAgfSBlbHNlIGlmIChjaGFuZ2VUeXBlID09PSAnaW5zZXJ0LWNoYXJhY3RlcnMnIHx8IGNoYW5nZVR5cGUgPT09ICdiYWNrc3BhY2UtY2hhcmFjdGVyJyB8fCBjaGFuZ2VUeXBlID09PSAnZGVsZXRlLWNoYXJhY3RlcicpIHtcbiAgICAgIC8vIFByZXNlcnZlIHRoZSBwcmV2aW91cyBzZWxlY3Rpb24uXG4gICAgICBuZXdDb250ZW50ID0gbmV3Q29udGVudC5zZXQoJ3NlbGVjdGlvbkJlZm9yZScsIGN1cnJlbnRDb250ZW50LmdldFNlbGVjdGlvbkJlZm9yZSgpKTtcbiAgICB9XG5cbiAgICB2YXIgaW5saW5lU3R5bGVPdmVycmlkZSA9IGVkaXRvclN0YXRlLmdldElubGluZVN0eWxlT3ZlcnJpZGUoKTtcblxuICAgIC8vIERvbid0IGRpc2NhcmQgaW5saW5lIHN0eWxlIG92ZXJyaWRlcyBmb3IgdGhlIGZvbGxvd2luZyBjaGFuZ2UgdHlwZXM6XG4gICAgdmFyIG92ZXJyaWRlQ2hhbmdlVHlwZXMgPSBbJ2FkanVzdC1kZXB0aCcsICdjaGFuZ2UtYmxvY2stdHlwZScsICdzcGxpdC1ibG9jayddO1xuXG4gICAgaWYgKG92ZXJyaWRlQ2hhbmdlVHlwZXMuaW5kZXhPZihjaGFuZ2VUeXBlKSA9PT0gLTEpIHtcbiAgICAgIGlubGluZVN0eWxlT3ZlcnJpZGUgPSBudWxsO1xuICAgIH1cblxuICAgIHZhciBlZGl0b3JTdGF0ZUNoYW5nZXMgPSB7XG4gICAgICBjdXJyZW50Q29udGVudDogbmV3Q29udGVudCxcbiAgICAgIGRpcmVjdGlvbk1hcDogZGlyZWN0aW9uTWFwLFxuICAgICAgdW5kb1N0YWNrOiB1bmRvU3RhY2ssXG4gICAgICByZWRvU3RhY2s6IFN0YWNrKCksXG4gICAgICBsYXN0Q2hhbmdlVHlwZTogY2hhbmdlVHlwZSxcbiAgICAgIHNlbGVjdGlvbjogY29udGVudFN0YXRlLmdldFNlbGVjdGlvbkFmdGVyKCksXG4gICAgICBmb3JjZVNlbGVjdGlvbjogZm9yY2VTZWxlY3Rpb24sXG4gICAgICBpbmxpbmVTdHlsZU92ZXJyaWRlOiBpbmxpbmVTdHlsZU92ZXJyaWRlXG4gICAgfTtcblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5zZXQoZWRpdG9yU3RhdGUsIGVkaXRvclN0YXRlQ2hhbmdlcyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1ha2UgdGhlIHRvcCBDb250ZW50U3RhdGUgaW4gdGhlIHVuZG8gc3RhY2sgdGhlIG5ldyBjdXJyZW50IGNvbnRlbnQgYW5kXG4gICAqIHB1c2ggdGhlIGN1cnJlbnQgY29udGVudCBvbnRvIHRoZSByZWRvIHN0YWNrLlxuICAgKi9cblxuXG4gIEVkaXRvclN0YXRlLnVuZG8gPSBmdW5jdGlvbiB1bmRvKGVkaXRvclN0YXRlKSB7XG4gICAgaWYgKCFlZGl0b3JTdGF0ZS5nZXRBbGxvd1VuZG8oKSkge1xuICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICAgIH1cblxuICAgIHZhciB1bmRvU3RhY2sgPSBlZGl0b3JTdGF0ZS5nZXRVbmRvU3RhY2soKTtcbiAgICB2YXIgbmV3Q3VycmVudENvbnRlbnQgPSB1bmRvU3RhY2sucGVlaygpO1xuICAgIGlmICghbmV3Q3VycmVudENvbnRlbnQpIHtcbiAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudENvbnRlbnQgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciBkaXJlY3Rpb25NYXAgPSBFZGl0b3JCaWRpU2VydmljZS5nZXREaXJlY3Rpb25NYXAobmV3Q3VycmVudENvbnRlbnQsIGVkaXRvclN0YXRlLmdldERpcmVjdGlvbk1hcCgpKTtcblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5zZXQoZWRpdG9yU3RhdGUsIHtcbiAgICAgIGN1cnJlbnRDb250ZW50OiBuZXdDdXJyZW50Q29udGVudCxcbiAgICAgIGRpcmVjdGlvbk1hcDogZGlyZWN0aW9uTWFwLFxuICAgICAgdW5kb1N0YWNrOiB1bmRvU3RhY2suc2hpZnQoKSxcbiAgICAgIHJlZG9TdGFjazogZWRpdG9yU3RhdGUuZ2V0UmVkb1N0YWNrKCkucHVzaChjdXJyZW50Q29udGVudCksXG4gICAgICBmb3JjZVNlbGVjdGlvbjogdHJ1ZSxcbiAgICAgIGlubGluZVN0eWxlT3ZlcnJpZGU6IG51bGwsXG4gICAgICBsYXN0Q2hhbmdlVHlwZTogJ3VuZG8nLFxuICAgICAgbmF0aXZlbHlSZW5kZXJlZENvbnRlbnQ6IG51bGwsXG4gICAgICBzZWxlY3Rpb246IGN1cnJlbnRDb250ZW50LmdldFNlbGVjdGlvbkJlZm9yZSgpXG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1ha2UgdGhlIHRvcCBDb250ZW50U3RhdGUgaW4gdGhlIHJlZG8gc3RhY2sgdGhlIG5ldyBjdXJyZW50IGNvbnRlbnQgYW5kXG4gICAqIHB1c2ggdGhlIGN1cnJlbnQgY29udGVudCBvbnRvIHRoZSB1bmRvIHN0YWNrLlxuICAgKi9cblxuXG4gIEVkaXRvclN0YXRlLnJlZG8gPSBmdW5jdGlvbiByZWRvKGVkaXRvclN0YXRlKSB7XG4gICAgaWYgKCFlZGl0b3JTdGF0ZS5nZXRBbGxvd1VuZG8oKSkge1xuICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICAgIH1cblxuICAgIHZhciByZWRvU3RhY2sgPSBlZGl0b3JTdGF0ZS5nZXRSZWRvU3RhY2soKTtcbiAgICB2YXIgbmV3Q3VycmVudENvbnRlbnQgPSByZWRvU3RhY2sucGVlaygpO1xuICAgIGlmICghbmV3Q3VycmVudENvbnRlbnQpIHtcbiAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudENvbnRlbnQgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciBkaXJlY3Rpb25NYXAgPSBFZGl0b3JCaWRpU2VydmljZS5nZXREaXJlY3Rpb25NYXAobmV3Q3VycmVudENvbnRlbnQsIGVkaXRvclN0YXRlLmdldERpcmVjdGlvbk1hcCgpKTtcblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5zZXQoZWRpdG9yU3RhdGUsIHtcbiAgICAgIGN1cnJlbnRDb250ZW50OiBuZXdDdXJyZW50Q29udGVudCxcbiAgICAgIGRpcmVjdGlvbk1hcDogZGlyZWN0aW9uTWFwLFxuICAgICAgdW5kb1N0YWNrOiBlZGl0b3JTdGF0ZS5nZXRVbmRvU3RhY2soKS5wdXNoKGN1cnJlbnRDb250ZW50KSxcbiAgICAgIHJlZG9TdGFjazogcmVkb1N0YWNrLnNoaWZ0KCksXG4gICAgICBmb3JjZVNlbGVjdGlvbjogdHJ1ZSxcbiAgICAgIGlubGluZVN0eWxlT3ZlcnJpZGU6IG51bGwsXG4gICAgICBsYXN0Q2hhbmdlVHlwZTogJ3JlZG8nLFxuICAgICAgbmF0aXZlbHlSZW5kZXJlZENvbnRlbnQ6IG51bGwsXG4gICAgICBzZWxlY3Rpb246IG5ld0N1cnJlbnRDb250ZW50LmdldFNlbGVjdGlvbkFmdGVyKClcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogTm90IGZvciBwdWJsaWMgY29uc3VtcHRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gRWRpdG9yU3RhdGUoaW1tdXRhYmxlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVkaXRvclN0YXRlKTtcblxuICAgIHRoaXMuX2ltbXV0YWJsZSA9IGltbXV0YWJsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3QgZm9yIHB1YmxpYyBjb25zdW1wdGlvbi5cbiAgICovXG5cblxuICBFZGl0b3JTdGF0ZS5wcm90b3R5cGUuZ2V0SW1tdXRhYmxlID0gZnVuY3Rpb24gZ2V0SW1tdXRhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLl9pbW11dGFibGU7XG4gIH07XG5cbiAgcmV0dXJuIEVkaXRvclN0YXRlO1xufSgpO1xuXG4vKipcbiAqIFNldCB0aGUgc3VwcGxpZWQgU2VsZWN0aW9uU3RhdGUgYXMgdGhlIG5ldyBjdXJyZW50IHNlbGVjdGlvbiwgYW5kIHNldFxuICogdGhlIGBmb3JjZWAgZmxhZyB0byB0cmlnZ2VyIG1hbnVhbCBzZWxlY3Rpb24gcGxhY2VtZW50IGJ5IHRoZSB2aWV3LlxuICovXG5cblxuZnVuY3Rpb24gdXBkYXRlU2VsZWN0aW9uKGVkaXRvclN0YXRlLCBzZWxlY3Rpb24sIGZvcmNlU2VsZWN0aW9uKSB7XG4gIHJldHVybiBFZGl0b3JTdGF0ZS5zZXQoZWRpdG9yU3RhdGUsIHtcbiAgICBzZWxlY3Rpb246IHNlbGVjdGlvbixcbiAgICBmb3JjZVNlbGVjdGlvbjogZm9yY2VTZWxlY3Rpb24sXG4gICAgbmF0aXZlbHlSZW5kZXJlZENvbnRlbnQ6IG51bGwsXG4gICAgaW5saW5lU3R5bGVPdmVycmlkZTogbnVsbFxuICB9KTtcbn1cblxuLyoqXG4gKiBSZWdlbmVyYXRlIHRoZSBlbnRpcmUgdHJlZSBtYXAgZm9yIGEgZ2l2ZW4gQ29udGVudFN0YXRlIGFuZCBkZWNvcmF0b3IuXG4gKiBSZXR1cm5zIGFuIE9yZGVyZWRNYXAgdGhhdCBtYXBzIGFsbCBhdmFpbGFibGUgQ29udGVudEJsb2NrIG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlTmV3VHJlZU1hcChjb250ZW50U3RhdGUsIGRlY29yYXRvcikge1xuICByZXR1cm4gY29udGVudFN0YXRlLmdldEJsb2NrTWFwKCkubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgIHJldHVybiBCbG9ja1RyZWUuZ2VuZXJhdGUoY29udGVudFN0YXRlLCBibG9jaywgZGVjb3JhdG9yKTtcbiAgfSkudG9PcmRlcmVkTWFwKCk7XG59XG5cbi8qKlxuICogUmVnZW5lcmF0ZSB0cmVlIG1hcCBvYmplY3RzIGZvciBhbGwgQ29udGVudEJsb2NrcyB0aGF0IGhhdmUgY2hhbmdlZFxuICogYmV0d2VlbiB0aGUgY3VycmVudCBlZGl0b3JTdGF0ZSBhbmQgbmV3Q29udGVudC4gUmV0dXJucyBhbiBPcmRlcmVkTWFwXG4gKiB3aXRoIG9ubHkgY2hhbmdlZCByZWdlbmVyYXRlZCB0cmVlIG1hcCBvYmplY3RzLlxuICovXG5mdW5jdGlvbiByZWdlbmVyYXRlVHJlZUZvck5ld0Jsb2NrcyhlZGl0b3JTdGF0ZSwgbmV3QmxvY2tNYXAsIG5ld0VudGl0eU1hcCwgZGVjb3JhdG9yKSB7XG4gIHZhciBjb250ZW50U3RhdGUgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLnNldCgnZW50aXR5TWFwJywgbmV3RW50aXR5TWFwKTtcbiAgdmFyIHByZXZCbG9ja01hcCA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja01hcCgpO1xuICB2YXIgcHJldlRyZWVNYXAgPSBlZGl0b3JTdGF0ZS5nZXRJbW11dGFibGUoKS5nZXQoJ3RyZWVNYXAnKTtcbiAgcmV0dXJuIHByZXZUcmVlTWFwLm1lcmdlKG5ld0Jsb2NrTWFwLnRvU2VxKCkuZmlsdGVyKGZ1bmN0aW9uIChibG9jaywga2V5KSB7XG4gICAgcmV0dXJuIGJsb2NrICE9PSBwcmV2QmxvY2tNYXAuZ2V0KGtleSk7XG4gIH0pLm1hcChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICByZXR1cm4gQmxvY2tUcmVlLmdlbmVyYXRlKGNvbnRlbnRTdGF0ZSwgYmxvY2ssIGRlY29yYXRvcik7XG4gIH0pKTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSB0cmVlIG1hcCBvYmplY3RzIGZvciBhIG5ldyBkZWNvcmF0b3Igb2JqZWN0LCBwcmVzZXJ2aW5nIGFueVxuICogZGVjb3JhdGlvbnMgdGhhdCBhcmUgdW5jaGFuZ2VkIGZyb20gdGhlIHByZXZpb3VzIGRlY29yYXRvci5cbiAqXG4gKiBOb3RlIHRoYXQgaW4gb3JkZXIgZm9yIHRoaXMgdG8gcGVyZm9ybSBvcHRpbWFsbHksIGRlY29yYXRpb24gTGlzdHMgZm9yXG4gKiBkZWNvcmF0b3JzIHNob3VsZCBiZSBwcmVzZXJ2ZWQgd2hlbiBwb3NzaWJsZSB0byBhbGxvdyBmb3IgZGlyZWN0IGltbXV0YWJsZVxuICogTGlzdCBjb21wYXJpc29uLlxuICovXG5mdW5jdGlvbiByZWdlbmVyYXRlVHJlZUZvck5ld0RlY29yYXRvcihjb250ZW50LCBibG9ja01hcCwgcHJldmlvdXNUcmVlTWFwLCBkZWNvcmF0b3IsIGV4aXN0aW5nRGVjb3JhdG9yKSB7XG4gIHJldHVybiBwcmV2aW91c1RyZWVNYXAubWVyZ2UoYmxvY2tNYXAudG9TZXEoKS5maWx0ZXIoZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgcmV0dXJuIGRlY29yYXRvci5nZXREZWNvcmF0aW9ucyhibG9jaywgY29udGVudCkgIT09IGV4aXN0aW5nRGVjb3JhdG9yLmdldERlY29yYXRpb25zKGJsb2NrLCBjb250ZW50KTtcbiAgfSkubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgIHJldHVybiBCbG9ja1RyZWUuZ2VuZXJhdGUoY29udGVudCwgYmxvY2ssIGRlY29yYXRvcik7XG4gIH0pKTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gd2hldGhlciBhIGNoYW5nZSBzaG91bGQgYmUgY29uc2lkZXJlZCBhIGJvdW5kYXJ5IHN0YXRlLCBnaXZlblxuICogdGhlIHByZXZpb3VzIGNoYW5nZSB0eXBlLiBBbGxvd3MgdXMgdG8gZGlzY2FyZCBwb3RlbnRpYWwgYm91bmRhcnkgc3RhdGVzXG4gKiBkdXJpbmcgc3RhbmRhcmQgdHlwaW5nIG9yIGRlbGV0aW9uIGJlaGF2aW9yLlxuICovXG5mdW5jdGlvbiBtdXN0QmVjb21lQm91bmRhcnkoZWRpdG9yU3RhdGUsIGNoYW5nZVR5cGUpIHtcbiAgdmFyIGxhc3RDaGFuZ2VUeXBlID0gZWRpdG9yU3RhdGUuZ2V0TGFzdENoYW5nZVR5cGUoKTtcbiAgcmV0dXJuIGNoYW5nZVR5cGUgIT09IGxhc3RDaGFuZ2VUeXBlIHx8IGNoYW5nZVR5cGUgIT09ICdpbnNlcnQtY2hhcmFjdGVycycgJiYgY2hhbmdlVHlwZSAhPT0gJ2JhY2tzcGFjZS1jaGFyYWN0ZXInICYmIGNoYW5nZVR5cGUgIT09ICdkZWxldGUtY2hhcmFjdGVyJztcbn1cblxuZnVuY3Rpb24gZ2V0SW5saW5lU3R5bGVGb3JDb2xsYXBzZWRTZWxlY3Rpb24oY29udGVudCwgc2VsZWN0aW9uKSB7XG4gIHZhciBzdGFydEtleSA9IHNlbGVjdGlvbi5nZXRTdGFydEtleSgpO1xuICB2YXIgc3RhcnRPZmZzZXQgPSBzZWxlY3Rpb24uZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIHN0YXJ0QmxvY2sgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KHN0YXJ0S2V5KTtcblxuICAvLyBJZiB0aGUgY3Vyc29yIGlzIG5vdCBhdCB0aGUgc3RhcnQgb2YgdGhlIGJsb2NrLCBsb29rIGJhY2t3YXJkIHRvXG4gIC8vIHByZXNlcnZlIHRoZSBzdHlsZSBvZiB0aGUgcHJlY2VkaW5nIGNoYXJhY3Rlci5cbiAgaWYgKHN0YXJ0T2Zmc2V0ID4gMCkge1xuICAgIHJldHVybiBzdGFydEJsb2NrLmdldElubGluZVN0eWxlQXQoc3RhcnRPZmZzZXQgLSAxKTtcbiAgfVxuXG4gIC8vIFRoZSBjYXJldCBpcyBhdCBwb3NpdGlvbiB6ZXJvIGluIHRoaXMgYmxvY2suIElmIHRoZSBibG9jayBoYXMgYW55XG4gIC8vIHRleHQgYXQgYWxsLCB1c2UgdGhlIHN0eWxlIG9mIHRoZSBmaXJzdCBjaGFyYWN0ZXIuXG4gIGlmIChzdGFydEJsb2NrLmdldExlbmd0aCgpKSB7XG4gICAgcmV0dXJuIHN0YXJ0QmxvY2suZ2V0SW5saW5lU3R5bGVBdCgwKTtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSwgbG9vayB1cHdhcmQgaW4gdGhlIGRvY3VtZW50IHRvIGZpbmQgdGhlIGNsb3Nlc3QgY2hhcmFjdGVyLlxuICByZXR1cm4gbG9va1Vwd2FyZEZvcklubGluZVN0eWxlKGNvbnRlbnQsIHN0YXJ0S2V5KTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5saW5lU3R5bGVGb3JOb25Db2xsYXBzZWRTZWxlY3Rpb24oY29udGVudCwgc2VsZWN0aW9uKSB7XG4gIHZhciBzdGFydEtleSA9IHNlbGVjdGlvbi5nZXRTdGFydEtleSgpO1xuICB2YXIgc3RhcnRPZmZzZXQgPSBzZWxlY3Rpb24uZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIHN0YXJ0QmxvY2sgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KHN0YXJ0S2V5KTtcblxuICAvLyBJZiB0aGVyZSBpcyBhIGNoYXJhY3RlciBqdXN0IGluc2lkZSB0aGUgc2VsZWN0aW9uLCB1c2UgaXRzIHN0eWxlLlxuICBpZiAoc3RhcnRPZmZzZXQgPCBzdGFydEJsb2NrLmdldExlbmd0aCgpKSB7XG4gICAgcmV0dXJuIHN0YXJ0QmxvY2suZ2V0SW5saW5lU3R5bGVBdChzdGFydE9mZnNldCk7XG4gIH1cblxuICAvLyBDaGVjayBpZiB0aGUgc2VsZWN0aW9uIGF0IHRoZSBlbmQgb2YgYSBub24tZW1wdHkgYmxvY2suIFVzZSB0aGUgbGFzdFxuICAvLyBzdHlsZSBpbiB0aGUgYmxvY2suXG4gIGlmIChzdGFydE9mZnNldCA+IDApIHtcbiAgICByZXR1cm4gc3RhcnRCbG9jay5nZXRJbmxpbmVTdHlsZUF0KHN0YXJ0T2Zmc2V0IC0gMSk7XG4gIH1cblxuICAvLyBPdGhlcndpc2UsIGxvb2sgdXB3YXJkIGluIHRoZSBkb2N1bWVudCB0byBmaW5kIHRoZSBjbG9zZXN0IGNoYXJhY3Rlci5cbiAgcmV0dXJuIGxvb2tVcHdhcmRGb3JJbmxpbmVTdHlsZShjb250ZW50LCBzdGFydEtleSk7XG59XG5cbmZ1bmN0aW9uIGxvb2tVcHdhcmRGb3JJbmxpbmVTdHlsZShjb250ZW50LCBmcm9tS2V5KSB7XG4gIHZhciBsYXN0Tm9uRW1wdHkgPSBjb250ZW50LmdldEJsb2NrTWFwKCkucmV2ZXJzZSgpLnNraXBVbnRpbChmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBrID09PSBmcm9tS2V5O1xuICB9KS5za2lwKDEpLnNraXBVbnRpbChmdW5jdGlvbiAoYmxvY2ssIF8pIHtcbiAgICByZXR1cm4gYmxvY2suZ2V0TGVuZ3RoKCk7XG4gIH0pLmZpcnN0KCk7XG5cbiAgaWYgKGxhc3ROb25FbXB0eSkgcmV0dXJuIGxhc3ROb25FbXB0eS5nZXRJbmxpbmVTdHlsZUF0KGxhc3ROb25FbXB0eS5nZXRMZW5ndGgoKSAtIDEpO1xuICByZXR1cm4gT3JkZXJlZFNldCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVkaXRvclN0YXRlOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6ICcvJyxcbiAgICAgIHVybDogJy8nLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSAnLydcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBoaXN0b3J5ID0gX3Byb3BzLmhpc3Rvcnk7XG5cblxuICAgIGludmFyaWFudChjaGlsZHJlbiA9PSBudWxsIHx8IFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMSwgJ0EgPFJvdXRlcj4gbWF5IGhhdmUgb25seSBvbmUgY2hpbGQgZWxlbWVudCcpO1xuXG4gICAgLy8gRG8gdGhpcyBoZXJlIHNvIHdlIGNhbiBzZXRTdGF0ZSB3aGVuIGEgPFJlZGlyZWN0PiBjaGFuZ2VzIHRoZVxuICAgIC8vIGxvY2F0aW9uIGluIGNvbXBvbmVudFdpbGxNb3VudC4gVGhpcyBoYXBwZW5zIGUuZy4gd2hlbiBkb2luZ1xuICAgIC8vIHNlcnZlciByZW5kZXJpbmcgdXNpbmcgYSA8U3RhdGljUm91dGVyPi5cbiAgICB0aGlzLnVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgbWF0Y2g6IF90aGlzMi5jb21wdXRlTWF0Y2goaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyh0aGlzLnByb3BzLmhpc3RvcnkgPT09IG5leHRQcm9wcy5oaXN0b3J5LCAnWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PicpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHJldHVybiBjaGlsZHJlbiA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZXIucHJvcFR5cGVzID0ge1xuICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblJvdXRlci5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGVyIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Sb3V0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUhpc3RvcnkgZnJvbSAnaGlzdG9yeS9jcmVhdGVCcm93c2VySGlzdG9yeSc7XG5pbXBvcnQgUm91dGVyIGZyb20gJy4vUm91dGVyJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJvd3NlclJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksICc8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgJyArICd1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC4nKTtcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUhpc3RvcnkgZnJvbSAnaGlzdG9yeS9jcmVhdGVIYXNoSGlzdG9yeSc7XG5pbXBvcnQgUm91dGVyIGZyb20gJy4vUm91dGVyJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhhc2hSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCAnPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksICcgKyAndXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuJyk7XG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5IYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnaGFzaGJhbmcnLCAnbm9zbGFzaCcsICdzbGFzaCddKSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEhhc2hSb3V0ZXI7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG52YXIgaXNNb2RpZmllZEV2ZW50ID0gZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cbnZhciBMaW5rID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2xpY2spIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSByaWdodCBjbGlja3NcbiAgICAgICFfdGhpcy5wcm9wcy50YXJnZXQgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgdmFyIGhpc3RvcnkgPSBfdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgICByZXBsYWNlID0gX3RoaXMkcHJvcHMucmVwbGFjZSxcbiAgICAgICAgICAgICAgdG8gPSBfdGhpcyRwcm9wcy50bztcblxuXG4gICAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBMaW5rLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHJlcGxhY2UgPSBfcHJvcHMucmVwbGFjZSxcbiAgICAgICAgdG8gPSBfcHJvcHMudG8sXG4gICAgICAgIGlubmVyUmVmID0gX3Byb3BzLmlubmVyUmVmLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsncmVwbGFjZScsICd0bycsICdpbm5lclJlZiddKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgdmFyIGhyZWYgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuY3JlYXRlSHJlZih0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8geyBwYXRobmFtZTogdG8gfSA6IHRvKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdhJywgX2V4dGVuZHMoe30sIHByb3BzLCB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssIGhyZWY6IGhyZWYsIHJlZjogaW5uZXJSZWYgfSkpO1xuICB9O1xuXG4gIHJldHVybiBMaW5rO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5MaW5rLnByb3BUeXBlcyA9IHtcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZCxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSlcbn07XG5MaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgcmVwbGFjZTogZmFsc2Vcbn07XG5MaW5rLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGNyZWF0ZUhyZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTGluazsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlSGlzdG9yeSBmcm9tICdoaXN0b3J5L2NyZWF0ZU1lbW9yeUhpc3RvcnknO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW1vcnlSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksICc8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuJyk7XG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgTWVtb3J5Um91dGVyIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBNZW1vcnlSb3V0ZXI7IiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5cbnZhciBwYXR0ZXJuQ2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbnZhciBjb21waWxlUGF0aCA9IGZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gJycgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHBhdHRlcm4sIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgY29tcGlsZWRQYXR0ZXJuID0geyByZTogcmUsIGtleXM6IGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkUGF0dGVybjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRQYXR0ZXJuO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGggcGF0dGVybi5cbiAqL1xudmFyIG1hdGNoUGF0aCA9IGZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIHBhdGggPSBfb3B0aW9ucyRwYXRoID09PSB1bmRlZmluZWQgPyAnLycgOiBfb3B0aW9ucyRwYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcblxuICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgocGF0aCwgeyBlbmQ6IGV4YWN0LCBzdHJpY3Q6IHN0cmljdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSksXG4gICAgICByZSA9IF9jb21waWxlUGF0aC5yZSxcbiAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICB2YXIgbWF0Y2ggPSByZS5leGVjKHBhdGhuYW1lKTtcblxuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcblxuICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG5cbiAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHBhdGgsIC8vIHRoZSBwYXRoIHBhdHRlcm4gdXNlZCB0byBtYXRjaFxuICAgIHVybDogcGF0aCA9PT0gJy8nICYmIHVybCA9PT0gJycgPyAnLycgOiB1cmwsIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgIGlzRXhhY3Q6IGlzRXhhY3QsIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIHt9KVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBtYXRjaFBhdGggZnJvbSAnLi9tYXRjaFBhdGgnO1xuXG52YXIgaXNFbXB0eUNoaWxkcmVuID0gZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxudmFyIFJvdXRlID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMsIF90aGlzLmNvbnRleHQucm91dGVyKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGUucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiBfZXh0ZW5kcyh7fSwgdGhpcy5jb250ZXh0LnJvdXRlciwge1xuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGUubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wdXRlTWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlTWF0Y2goX3JlZiwgcm91dGVyKSB7XG4gICAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgICAgcGF0aCA9IF9yZWYucGF0aCxcbiAgICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmU7XG5cbiAgICBpZiAoY29tcHV0ZWRNYXRjaCkgcmV0dXJuIGNvbXB1dGVkTWF0Y2g7IC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuXG4gICAgaW52YXJpYW50KHJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG9yIHdpdGhSb3V0ZXIoKSBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcblxuICAgIHZhciByb3V0ZSA9IHJvdXRlci5yb3V0ZTtcblxuICAgIHZhciBwYXRobmFtZSA9IChsb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbikucGF0aG5hbWU7XG5cbiAgICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChwYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBzdHJpY3Q6IHN0cmljdCwgZXhhY3Q6IGV4YWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9KSA6IHJvdXRlLm1hdGNoO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZCcpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkJyk7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5yZW5kZXIgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWQnKTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgd2FybmluZyghKCFuZXh0UHJvcHMubG9jYXRpb24gJiYgdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbWF0Y2g6IHRoaXMuY29tcHV0ZU1hdGNoKG5leHRQcm9wcywgbmV4dENvbnRleHQucm91dGVyKVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIG1hdGNoID0gdGhpcy5zdGF0ZS5tYXRjaDtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnQsXG4gICAgICAgIHJlbmRlciA9IF9wcm9wcy5yZW5kZXI7XG4gICAgdmFyIF9jb250ZXh0JHJvdXRlciA9IHRoaXMuY29udGV4dC5yb3V0ZXIsXG4gICAgICAgIGhpc3RvcnkgPSBfY29udGV4dCRyb3V0ZXIuaGlzdG9yeSxcbiAgICAgICAgcm91dGUgPSBfY29udGV4dCRyb3V0ZXIucm91dGUsXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBfY29udGV4dCRyb3V0ZXIuc3RhdGljQ29udGV4dDtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG4gICAgdmFyIHByb3BzID0geyBtYXRjaDogbWF0Y2gsIGxvY2F0aW9uOiBsb2NhdGlvbiwgaGlzdG9yeTogaGlzdG9yeSwgc3RhdGljQ29udGV4dDogc3RhdGljQ29udGV4dCB9O1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudCA/IC8vIGNvbXBvbmVudCBwcm9wIGdldHMgZmlyc3QgcHJpb3JpdHksIG9ubHkgY2FsbGVkIGlmIHRoZXJlJ3MgYSBtYXRjaFxuICAgIG1hdGNoID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IG51bGwgOiByZW5kZXIgPyAvLyByZW5kZXIgcHJvcCBpcyBuZXh0LCBvbmx5IGNhbGxlZCBpZiB0aGVyZSdzIGEgbWF0Y2hcbiAgICBtYXRjaCA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogY2hpbGRyZW4gPyAvLyBjaGlsZHJlbiBjb21lIGxhc3QsIGFsd2F5cyBjYWxsZWRcbiAgICB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihwcm9wcykgOiAhaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbCA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZS5wcm9wVHlwZXMgPSB7XG4gIGNvbXB1dGVkTWF0Y2g6IFByb3BUeXBlcy5vYmplY3QsIC8vIHByaXZhdGUsIGZyb20gPFN3aXRjaD5cbiAgcGF0aDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICBjb21wb25lbnQ6IFByb3BUeXBlcy5mdW5jLFxuICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuUm91dGUuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KVxufTtcblJvdXRlLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Sb3V0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSb3V0ZSBmcm9tICcuL1JvdXRlJztcbmltcG9ydCBMaW5rIGZyb20gJy4vTGluayc7XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbnZhciBOYXZMaW5rID0gZnVuY3Rpb24gTmF2TGluayhfcmVmKSB7XG4gIHZhciB0byA9IF9yZWYudG8sXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICBnZXRJc0FjdGl2ZSA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWYuYXJpYUN1cnJlbnQsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsndG8nLCAnZXhhY3QnLCAnc3RyaWN0JywgJ2xvY2F0aW9uJywgJ2FjdGl2ZUNsYXNzTmFtZScsICdjbGFzc05hbWUnLCAnYWN0aXZlU3R5bGUnLCAnc3R5bGUnLCAnaXNBY3RpdmUnLCAnYXJpYUN1cnJlbnQnXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHtcbiAgICBwYXRoOiAodHlwZW9mIHRvID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0bykpID09PSAnb2JqZWN0JyA/IHRvLnBhdGhuYW1lIDogdG8sXG4gICAgZXhhY3Q6IGV4YWN0LFxuICAgIHN0cmljdDogc3RyaWN0LFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oX3JlZjIpIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF9yZWYyLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoID0gX3JlZjIubWF0Y2g7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICEhKGdldElzQWN0aXZlID8gZ2V0SXNBY3RpdmUobWF0Y2gsIGxvY2F0aW9uKSA6IG1hdGNoKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe1xuICAgICAgICB0bzogdG8sXG4gICAgICAgIGNsYXNzTmFtZTogaXNBY3RpdmUgPyBbY2xhc3NOYW1lLCBhY3RpdmVDbGFzc05hbWVdLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KS5qb2luKCcgJykgOiBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZSwgYWN0aXZlU3R5bGUpIDogc3R5bGUsXG4gICAgICAgICdhcmlhLWN1cnJlbnQnOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudFxuICAgICAgfSwgcmVzdCkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5OYXZMaW5rLnByb3BUeXBlcyA9IHtcbiAgdG86IExpbmsucHJvcFR5cGVzLnRvLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGFyaWFDdXJyZW50OiBQcm9wVHlwZXMub25lT2YoWydwYWdlJywgJ3N0ZXAnLCAnbG9jYXRpb24nLCAndHJ1ZSddKVxufTtcblxuTmF2TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZUNsYXNzTmFtZTogJ2FjdGl2ZScsXG4gIGFyaWFDdXJyZW50OiAndHJ1ZSdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkxpbms7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXlcbiAqIGZyb20gYSBzY3JlZW4gd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUHJvbXB0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb21wdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvbXB0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9tcHQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQcm9tcHQucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZShtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykgdGhpcy51bmJsb2NrKCk7XG5cbiAgICB0aGlzLnVuYmxvY2sgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuYmxvY2sobWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgIHRoaXMudW5ibG9jayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMud2hlbikgdGhpcy5lbmFibGUodGhpcy5wcm9wcy5tZXNzYWdlKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMud2hlbikge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLndoZW4gfHwgdGhpcy5wcm9wcy5tZXNzYWdlICE9PSBuZXh0UHJvcHMubWVzc2FnZSkgdGhpcy5lbmFibGUobmV4dFByb3BzLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuZGlzYWJsZSgpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQcm9tcHQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblByb21wdC5wcm9wVHlwZXMgPSB7XG4gIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICBtZXNzYWdlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pLmlzUmVxdWlyZWRcbn07XG5Qcm9tcHQuZGVmYXVsdFByb3BzID0ge1xuICB3aGVuOiB0cnVlXG59O1xuUHJvbXB0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBibG9jazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBQcm9tcHQgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1Byb21wdCc7XG5cbmV4cG9ydCBkZWZhdWx0IFByb21wdDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHsgcGFyc2VQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuXG5leHBvcnQgdmFyIGNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcblxuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn07XG5cbmV4cG9ydCB2YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn07IiwiZXhwb3J0IHZhciBhZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIGhhc0Jhc2VuYW1lID0gZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBwYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgY3JlYXRlUGF0aCA9IGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcblxuXG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogJz8nICsgc2VhcmNoO1xuXG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6ICcjJyArIGhhc2g7XG5cbiAgcmV0dXJuIHBhdGg7XG59OyIsImV4cG9ydCB2YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZXhwb3J0IHZhciBhZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG5leHBvcnQgdmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID8gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNIaXN0b3J5ID0gZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbmV4cG9ydCB2YXIgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn07IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0hpc3RvcnksIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UsIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgfSBmcm9tICcuL0RPTVV0aWxzJztcblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIGdldEhpc3RvcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG5cbiAgdmFyIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBwcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcblxuXG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcFN0YXRlID0gZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuXG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuXG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQnJvd3Nlckhpc3Rvcnk7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcblxuICB2YXIgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IHByb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHVuZGVmaW5lZCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcblxuICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJyk7XG5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcblxuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJyk7XG5cbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVIYXNoSGlzdG9yeTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcblxudmFyIGNsYW1wID0gZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xudmFyIGNyZWF0ZU1lbW9yeUhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBwcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB1bmRlZmluZWQgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBwcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB1bmRlZmluZWQgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgY2FuR28gPSBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9O1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNZW1vcnlIaXN0b3J5OyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gJ2hpc3RvcnknO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciB1cGRhdGluZyB0aGUgbG9jYXRpb24gcHJvZ3JhbW1hdGljYWxseVxuICogd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUmVkaXJlY3QgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVkaXJlY3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJlZGlyZWN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWRpcmVjdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5pc1N0YXRpYyA9IGZ1bmN0aW9uIGlzU3RhdGljKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQucm91dGVyICYmIHRoaXMuY29udGV4dC5yb3V0ZXIuc3RhdGljQ29udGV4dDtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG5cbiAgICBpZiAodGhpcy5pc1N0YXRpYygpKSB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgcHJldlRvID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcbiAgICB2YXIgbmV4dFRvID0gY3JlYXRlTG9jYXRpb24odGhpcy5wcm9wcy50byk7XG5cbiAgICBpZiAobG9jYXRpb25zQXJlRXF1YWwocHJldlRvLCBuZXh0VG8pKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnWW91IHRyaWVkIHRvIHJlZGlyZWN0IHRvIHRoZSBzYW1lIHJvdXRlIHlvdVxcJ3JlIGN1cnJlbnRseSBvbjogJyArICgnXCInICsgbmV4dFRvLnBhdGhuYW1lICsgbmV4dFRvLnNlYXJjaCArICdcIicpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucGVyZm9ybSA9IGZ1bmN0aW9uIHBlcmZvcm0oKSB7XG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHB1c2ggPSBfcHJvcHMucHVzaCxcbiAgICAgICAgdG8gPSBfcHJvcHMudG87XG5cblxuICAgIGlmIChwdXNoKSB7XG4gICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgIH1cbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSZWRpcmVjdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG59O1xuUmVkaXJlY3QuZGVmYXVsdFByb3BzID0ge1xuICBwdXNoOiBmYWxzZVxufTtcblJlZGlyZWN0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0OyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUmVkaXJlY3QgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0JztcblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIGNyZWF0ZVBhdGgsIHBhcnNlUGF0aCB9IGZyb20gJ2hpc3RvcnkvUGF0aFV0aWxzJztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG52YXIgbm9ybWFsaXplTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVMb2NhdGlvbihvYmplY3QpIHtcbiAgdmFyIF9vYmplY3QkcGF0aG5hbWUgPSBvYmplY3QucGF0aG5hbWUsXG4gICAgICBwYXRobmFtZSA9IF9vYmplY3QkcGF0aG5hbWUgPT09IHVuZGVmaW5lZCA/ICcvJyA6IF9vYmplY3QkcGF0aG5hbWUsXG4gICAgICBfb2JqZWN0JHNlYXJjaCA9IG9iamVjdC5zZWFyY2gsXG4gICAgICBzZWFyY2ggPSBfb2JqZWN0JHNlYXJjaCA9PT0gdW5kZWZpbmVkID8gJycgOiBfb2JqZWN0JHNlYXJjaCxcbiAgICAgIF9vYmplY3QkaGFzaCA9IG9iamVjdC5oYXNoLFxuICAgICAgaGFzaCA9IF9vYmplY3QkaGFzaCA9PT0gdW5kZWZpbmVkID8gJycgOiBfb2JqZWN0JGhhc2g7XG5cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG52YXIgYWRkQmFzZW5hbWUgPSBmdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufTtcblxudmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuXG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufTtcblxudmFyIGNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24obG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgobG9jYXRpb24pIDogbm9ybWFsaXplTG9jYXRpb24obG9jYXRpb24pO1xufTtcblxudmFyIGNyZWF0ZVVSTCA9IGZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJyA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59O1xuXG52YXIgc3RhdGljSGFuZGxlciA9IGZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGludmFyaWFudChmYWxzZSwgJ1lvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPicsIG1ldGhvZE5hbWUpO1xuICB9O1xufTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG52YXIgU3RhdGljUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGljUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jcmVhdGVIcmVmID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goX3RoaXMucHJvcHMuYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgIH0sIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gJ1BVU0gnO1xuICAgICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjoge1xuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLmNvbnRleHRcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgJzxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksICcgKyAndXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC4nKTtcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYmFzZW5hbWUgPSBfcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGNvbnRleHQgPSBfcHJvcHMuY29udGV4dCxcbiAgICAgICAgbG9jYXRpb24gPSBfcHJvcHMubG9jYXRpb24sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydiYXNlbmFtZScsICdjb250ZXh0JywgJ2xvY2F0aW9uJ10pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiB0aGlzLmNyZWF0ZUhyZWYsXG4gICAgICBhY3Rpb246ICdQT1AnLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcignZ28nKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcignZ29CYWNrJyksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoJ2dvRm9yd2FyZCcpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHByb3BzLCB7IGhpc3Rvcnk6IGhpc3RvcnkgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbn07XG5TdGF0aWNSb3V0ZXIuZGVmYXVsdFByb3BzID0ge1xuICBiYXNlbmFtZTogJycsXG4gIGxvY2F0aW9uOiAnLydcbn07XG5TdGF0aWNSb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFN0YXRpY1JvdXRlciBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBtYXRjaFBhdGggZnJvbSAnLi9tYXRjaFBhdGgnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN3aXRjaCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgd2FybmluZyghKCFuZXh0UHJvcHMubG9jYXRpb24gJiYgdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHJvdXRlID0gdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcblxuICAgIHZhciBtYXRjaCA9IHZvaWQgMCxcbiAgICAgICAgY2hpbGQgPSB2b2lkIDA7XG4gICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHJldHVybjtcblxuICAgICAgdmFyIF9lbGVtZW50JHByb3BzID0gZWxlbWVudC5wcm9wcyxcbiAgICAgICAgICBwYXRoUHJvcCA9IF9lbGVtZW50JHByb3BzLnBhdGgsXG4gICAgICAgICAgZXhhY3QgPSBfZWxlbWVudCRwcm9wcy5leGFjdCxcbiAgICAgICAgICBzdHJpY3QgPSBfZWxlbWVudCRwcm9wcy5zdHJpY3QsXG4gICAgICAgICAgc2Vuc2l0aXZlID0gX2VsZW1lbnQkcHJvcHMuc2Vuc2l0aXZlLFxuICAgICAgICAgIGZyb20gPSBfZWxlbWVudCRwcm9wcy5mcm9tO1xuXG4gICAgICB2YXIgcGF0aCA9IHBhdGhQcm9wIHx8IGZyb207XG5cbiAgICAgIGlmIChtYXRjaCA9PSBudWxsKSB7XG4gICAgICAgIGNoaWxkID0gZWxlbWVudDtcbiAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIGV4YWN0OiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pIDogcm91dGUubWF0Y2g7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgbG9jYXRpb246IGxvY2F0aW9uLCBjb21wdXRlZE1hdGNoOiBtYXRjaCB9KSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3dpdGNoLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3dpdGNoIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Td2l0Y2gnO1xuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBtYXRjaFBhdGggZnJvbSAncmVhY3Qtcm91dGVyL2VzL21hdGNoUGF0aCc7XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUm91dGUgZnJvbSAnLi9Sb3V0ZSc7XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cbnZhciB3aXRoUm91dGVyID0gZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgWyd3cmFwcGVkQ29tcG9uZW50UmVmJ10pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHsgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocm91dGVDb21wb25lbnRQcm9wcykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgcm91dGVDb21wb25lbnRQcm9wcywgeyByZWY6IHdyYXBwZWRDb21wb25lbnRSZWYgfSkpO1xuICAgICAgfSB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gJ3dpdGhSb3V0ZXIoJyArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgJyknO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG4gIEMucHJvcFR5cGVzID0ge1xuICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5mdW5jXG4gIH07XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IHdpdGhSb3V0ZXIgZnJvbSAncmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRHJhZnRNb2RpZmllclxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2hhcmFjdGVyTWV0YWRhdGEgPSByZXF1aXJlKCcuL0NoYXJhY3Rlck1ldGFkYXRhJyk7XG52YXIgQ29udGVudFN0YXRlSW5saW5lU3R5bGUgPSByZXF1aXJlKCcuL0NvbnRlbnRTdGF0ZUlubGluZVN0eWxlJyk7XG52YXIgRHJhZnRGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuL0RyYWZ0RmVhdHVyZUZsYWdzJyk7XG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbnZhciBhcHBseUVudGl0eVRvQ29udGVudFN0YXRlID0gcmVxdWlyZSgnLi9hcHBseUVudGl0eVRvQ29udGVudFN0YXRlJyk7XG52YXIgZ2V0Q2hhcmFjdGVyUmVtb3ZhbFJhbmdlID0gcmVxdWlyZSgnLi9nZXRDaGFyYWN0ZXJSZW1vdmFsUmFuZ2UnKTtcbnZhciBnZXRDb250ZW50U3RhdGVGcmFnbWVudCA9IHJlcXVpcmUoJy4vZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQnKTtcbnZhciBpbnNlcnRGcmFnbWVudEludG9Db250ZW50U3RhdGUgPSByZXF1aXJlKCcuL2luc2VydEZyYWdtZW50SW50b0NvbnRlbnRTdGF0ZScpO1xudmFyIGluc2VydFRleHRJbnRvQ29udGVudFN0YXRlID0gcmVxdWlyZSgnLi9pbnNlcnRUZXh0SW50b0NvbnRlbnRTdGF0ZScpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIG1vZGlmeUJsb2NrRm9yQ29udGVudFN0YXRlID0gcmVxdWlyZSgnLi9tb2RpZnlCbG9ja0ZvckNvbnRlbnRTdGF0ZScpO1xudmFyIHJlbW92ZUVudGl0aWVzQXRFZGdlcyA9IHJlcXVpcmUoJy4vcmVtb3ZlRW50aXRpZXNBdEVkZ2VzJyk7XG52YXIgcmVtb3ZlUmFuZ2VGcm9tQ29udGVudFN0YXRlID0gcmVxdWlyZSgnLi9yZW1vdmVSYW5nZUZyb21Db250ZW50U3RhdGUnKTtcbnZhciBzcGxpdEJsb2NrSW5Db250ZW50U3RhdGUgPSByZXF1aXJlKCcuL3NwbGl0QmxvY2tJbkNvbnRlbnRTdGF0ZScpO1xuXG52YXIgT3JkZXJlZFNldCA9IEltbXV0YWJsZS5PcmRlcmVkU2V0O1xuXG4vKipcbiAqIGBEcmFmdE1vZGlmaWVyYCBwcm92aWRlcyBhIHNldCBvZiBjb252ZW5pZW5jZSBtZXRob2RzIHRoYXQgYXBwbHlcbiAqIG1vZGlmaWNhdGlvbnMgdG8gYSBgQ29udGVudFN0YXRlYCBvYmplY3QgYmFzZWQgb24gYSB0YXJnZXQgYFNlbGVjdGlvblN0YXRlYC5cbiAqXG4gKiBBbnkgY2hhbmdlIHRvIGEgYENvbnRlbnRTdGF0ZWAgc2hvdWxkIGJlIGRlY29tcG9zYWJsZSBpbnRvIGEgc2VyaWVzIG9mXG4gKiB0cmFuc2FjdGlvbiBmdW5jdGlvbnMgdGhhdCBhcHBseSB0aGUgcmVxdWlyZWQgY2hhbmdlcyBhbmQgcmV0dXJuIG91dHB1dFxuICogYENvbnRlbnRTdGF0ZWAgb2JqZWN0cy5cbiAqXG4gKiBUaGVzZSBmdW5jdGlvbnMgZW5jYXBzdWxhdGUgc29tZSBvZiB0aGUgbW9zdCBjb21tb24gdHJhbnNhY3Rpb24gc2VxdWVuY2VzLlxuICovXG5cbnZhciBEcmFmdE1vZGlmaWVyID0ge1xuICByZXBsYWNlVGV4dDogZnVuY3Rpb24gcmVwbGFjZVRleHQoY29udGVudFN0YXRlLCByYW5nZVRvUmVwbGFjZSwgdGV4dCwgaW5saW5lU3R5bGUsIGVudGl0eUtleSkge1xuICAgIHZhciB3aXRob3V0RW50aXRpZXMgPSByZW1vdmVFbnRpdGllc0F0RWRnZXMoY29udGVudFN0YXRlLCByYW5nZVRvUmVwbGFjZSk7XG4gICAgdmFyIHdpdGhvdXRUZXh0ID0gcmVtb3ZlUmFuZ2VGcm9tQ29udGVudFN0YXRlKHdpdGhvdXRFbnRpdGllcywgcmFuZ2VUb1JlcGxhY2UpO1xuXG4gICAgdmFyIGNoYXJhY3RlciA9IENoYXJhY3Rlck1ldGFkYXRhLmNyZWF0ZSh7XG4gICAgICBzdHlsZTogaW5saW5lU3R5bGUgfHwgT3JkZXJlZFNldCgpLFxuICAgICAgZW50aXR5OiBlbnRpdHlLZXkgfHwgbnVsbFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGluc2VydFRleHRJbnRvQ29udGVudFN0YXRlKHdpdGhvdXRUZXh0LCB3aXRob3V0VGV4dC5nZXRTZWxlY3Rpb25BZnRlcigpLCB0ZXh0LCBjaGFyYWN0ZXIpO1xuICB9LFxuXG4gIGluc2VydFRleHQ6IGZ1bmN0aW9uIGluc2VydFRleHQoY29udGVudFN0YXRlLCB0YXJnZXRSYW5nZSwgdGV4dCwgaW5saW5lU3R5bGUsIGVudGl0eUtleSkge1xuICAgICF0YXJnZXRSYW5nZS5pc0NvbGxhcHNlZCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RhcmdldCByYW5nZSBtdXN0IGJlIGNvbGxhcHNlZCBmb3IgYGluc2VydFRleHRgLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gRHJhZnRNb2RpZmllci5yZXBsYWNlVGV4dChjb250ZW50U3RhdGUsIHRhcmdldFJhbmdlLCB0ZXh0LCBpbmxpbmVTdHlsZSwgZW50aXR5S2V5KTtcbiAgfSxcblxuICBtb3ZlVGV4dDogZnVuY3Rpb24gbW92ZVRleHQoY29udGVudFN0YXRlLCByZW1vdmFsUmFuZ2UsIHRhcmdldFJhbmdlKSB7XG4gICAgdmFyIG1vdmVkRnJhZ21lbnQgPSBnZXRDb250ZW50U3RhdGVGcmFnbWVudChjb250ZW50U3RhdGUsIHJlbW92YWxSYW5nZSk7XG5cbiAgICB2YXIgYWZ0ZXJSZW1vdmFsID0gRHJhZnRNb2RpZmllci5yZW1vdmVSYW5nZShjb250ZW50U3RhdGUsIHJlbW92YWxSYW5nZSwgJ2JhY2t3YXJkJyk7XG5cbiAgICByZXR1cm4gRHJhZnRNb2RpZmllci5yZXBsYWNlV2l0aEZyYWdtZW50KGFmdGVyUmVtb3ZhbCwgdGFyZ2V0UmFuZ2UsIG1vdmVkRnJhZ21lbnQpO1xuICB9LFxuXG4gIHJlcGxhY2VXaXRoRnJhZ21lbnQ6IGZ1bmN0aW9uIHJlcGxhY2VXaXRoRnJhZ21lbnQoY29udGVudFN0YXRlLCB0YXJnZXRSYW5nZSwgZnJhZ21lbnQpIHtcbiAgICB2YXIgd2l0aG91dEVudGl0aWVzID0gcmVtb3ZlRW50aXRpZXNBdEVkZ2VzKGNvbnRlbnRTdGF0ZSwgdGFyZ2V0UmFuZ2UpO1xuICAgIHZhciB3aXRob3V0VGV4dCA9IHJlbW92ZVJhbmdlRnJvbUNvbnRlbnRTdGF0ZSh3aXRob3V0RW50aXRpZXMsIHRhcmdldFJhbmdlKTtcblxuICAgIHJldHVybiBpbnNlcnRGcmFnbWVudEludG9Db250ZW50U3RhdGUod2l0aG91dFRleHQsIHdpdGhvdXRUZXh0LmdldFNlbGVjdGlvbkFmdGVyKCksIGZyYWdtZW50KTtcbiAgfSxcblxuICByZW1vdmVSYW5nZTogZnVuY3Rpb24gcmVtb3ZlUmFuZ2UoY29udGVudFN0YXRlLCByYW5nZVRvUmVtb3ZlLCByZW1vdmFsRGlyZWN0aW9uKSB7XG4gICAgdmFyIHN0YXJ0S2V5ID0gdm9pZCAwLFxuICAgICAgICBlbmRLZXkgPSB2b2lkIDAsXG4gICAgICAgIHN0YXJ0QmxvY2sgPSB2b2lkIDAsXG4gICAgICAgIGVuZEJsb2NrID0gdm9pZCAwO1xuICAgIGlmIChyYW5nZVRvUmVtb3ZlLmdldElzQmFja3dhcmQoKSkge1xuICAgICAgcmFuZ2VUb1JlbW92ZSA9IHJhbmdlVG9SZW1vdmUubWVyZ2Uoe1xuICAgICAgICBhbmNob3JLZXk6IHJhbmdlVG9SZW1vdmUuZ2V0Rm9jdXNLZXkoKSxcbiAgICAgICAgYW5jaG9yT2Zmc2V0OiByYW5nZVRvUmVtb3ZlLmdldEZvY3VzT2Zmc2V0KCksXG4gICAgICAgIGZvY3VzS2V5OiByYW5nZVRvUmVtb3ZlLmdldEFuY2hvcktleSgpLFxuICAgICAgICBmb2N1c09mZnNldDogcmFuZ2VUb1JlbW92ZS5nZXRBbmNob3JPZmZzZXQoKSxcbiAgICAgICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICBzdGFydEtleSA9IHJhbmdlVG9SZW1vdmUuZ2V0QW5jaG9yS2V5KCk7XG4gICAgZW5kS2V5ID0gcmFuZ2VUb1JlbW92ZS5nZXRGb2N1c0tleSgpO1xuICAgIHN0YXJ0QmxvY2sgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tGb3JLZXkoc3RhcnRLZXkpO1xuICAgIGVuZEJsb2NrID0gY29udGVudFN0YXRlLmdldEJsb2NrRm9yS2V5KGVuZEtleSk7XG4gICAgdmFyIHN0YXJ0T2Zmc2V0ID0gcmFuZ2VUb1JlbW92ZS5nZXRTdGFydE9mZnNldCgpO1xuICAgIHZhciBlbmRPZmZzZXQgPSByYW5nZVRvUmVtb3ZlLmdldEVuZE9mZnNldCgpO1xuXG4gICAgdmFyIHN0YXJ0RW50aXR5S2V5ID0gc3RhcnRCbG9jay5nZXRFbnRpdHlBdChzdGFydE9mZnNldCk7XG4gICAgdmFyIGVuZEVudGl0eUtleSA9IGVuZEJsb2NrLmdldEVudGl0eUF0KGVuZE9mZnNldCAtIDEpO1xuXG4gICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgc2VsZWN0aW9uIHN0YXRlIG92ZXJsYXBzIHdpdGggYSBzaW5nbGUgZW50aXR5LlxuICAgIC8vIElmIHNvLCB0cnkgdG8gcmVtb3ZlIHRoZSBhcHByb3ByaWF0ZSBzdWJzdHJpbmcgb2YgdGhlIGVudGl0eSB0ZXh0LlxuICAgIGlmIChzdGFydEtleSA9PT0gZW5kS2V5KSB7XG4gICAgICBpZiAoc3RhcnRFbnRpdHlLZXkgJiYgc3RhcnRFbnRpdHlLZXkgPT09IGVuZEVudGl0eUtleSkge1xuICAgICAgICB2YXIgX2FkanVzdGVkUmVtb3ZhbFJhbmdlID0gZ2V0Q2hhcmFjdGVyUmVtb3ZhbFJhbmdlKGNvbnRlbnRTdGF0ZS5nZXRFbnRpdHlNYXAoKSwgc3RhcnRCbG9jaywgZW5kQmxvY2ssIHJhbmdlVG9SZW1vdmUsIHJlbW92YWxEaXJlY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVtb3ZlUmFuZ2VGcm9tQ29udGVudFN0YXRlKGNvbnRlbnRTdGF0ZSwgX2FkanVzdGVkUmVtb3ZhbFJhbmdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGFkanVzdGVkUmVtb3ZhbFJhbmdlID0gcmFuZ2VUb1JlbW92ZTtcbiAgICBpZiAoRHJhZnRGZWF0dXJlRmxhZ3MuZHJhZnRfc2VnbWVudGVkX2VudGl0aWVzX2JlaGF2aW9yKSB7XG4gICAgICAvLyBBZGp1c3QgdGhlIHNlbGVjdGlvbiB0byBwcm9wZXJseSBkZWxldGUgc2VnZW1lbnRlZCBhbmQgaW1tdXRhYmxlXG4gICAgICAvLyBlbnRpdGllc1xuICAgICAgYWRqdXN0ZWRSZW1vdmFsUmFuZ2UgPSBnZXRDaGFyYWN0ZXJSZW1vdmFsUmFuZ2UoY29udGVudFN0YXRlLmdldEVudGl0eU1hcCgpLCBzdGFydEJsb2NrLCBlbmRCbG9jaywgcmFuZ2VUb1JlbW92ZSwgcmVtb3ZhbERpcmVjdGlvbik7XG4gICAgfVxuXG4gICAgdmFyIHdpdGhvdXRFbnRpdGllcyA9IHJlbW92ZUVudGl0aWVzQXRFZGdlcyhjb250ZW50U3RhdGUsIGFkanVzdGVkUmVtb3ZhbFJhbmdlKTtcbiAgICByZXR1cm4gcmVtb3ZlUmFuZ2VGcm9tQ29udGVudFN0YXRlKHdpdGhvdXRFbnRpdGllcywgYWRqdXN0ZWRSZW1vdmFsUmFuZ2UpO1xuICB9LFxuXG4gIHNwbGl0QmxvY2s6IGZ1bmN0aW9uIHNwbGl0QmxvY2soY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSkge1xuICAgIHZhciB3aXRob3V0RW50aXRpZXMgPSByZW1vdmVFbnRpdGllc0F0RWRnZXMoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSk7XG4gICAgdmFyIHdpdGhvdXRUZXh0ID0gcmVtb3ZlUmFuZ2VGcm9tQ29udGVudFN0YXRlKHdpdGhvdXRFbnRpdGllcywgc2VsZWN0aW9uU3RhdGUpO1xuXG4gICAgcmV0dXJuIHNwbGl0QmxvY2tJbkNvbnRlbnRTdGF0ZSh3aXRob3V0VGV4dCwgd2l0aG91dFRleHQuZ2V0U2VsZWN0aW9uQWZ0ZXIoKSk7XG4gIH0sXG5cbiAgYXBwbHlJbmxpbmVTdHlsZTogZnVuY3Rpb24gYXBwbHlJbmxpbmVTdHlsZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBpbmxpbmVTdHlsZSkge1xuICAgIHJldHVybiBDb250ZW50U3RhdGVJbmxpbmVTdHlsZS5hZGQoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgaW5saW5lU3R5bGUpO1xuICB9LFxuXG4gIHJlbW92ZUlubGluZVN0eWxlOiBmdW5jdGlvbiByZW1vdmVJbmxpbmVTdHlsZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBpbmxpbmVTdHlsZSkge1xuICAgIHJldHVybiBDb250ZW50U3RhdGVJbmxpbmVTdHlsZS5yZW1vdmUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgaW5saW5lU3R5bGUpO1xuICB9LFxuXG4gIHNldEJsb2NrVHlwZTogZnVuY3Rpb24gc2V0QmxvY2tUeXBlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGJsb2NrVHlwZSkge1xuICAgIHJldHVybiBtb2RpZnlCbG9ja0ZvckNvbnRlbnRTdGF0ZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7IHR5cGU6IGJsb2NrVHlwZSwgZGVwdGg6IDAgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgc2V0QmxvY2tEYXRhOiBmdW5jdGlvbiBzZXRCbG9ja0RhdGEoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgYmxvY2tEYXRhKSB7XG4gICAgcmV0dXJuIG1vZGlmeUJsb2NrRm9yQ29udGVudFN0YXRlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHsgZGF0YTogYmxvY2tEYXRhIH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIG1lcmdlQmxvY2tEYXRhOiBmdW5jdGlvbiBtZXJnZUJsb2NrRGF0YShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBibG9ja0RhdGEpIHtcbiAgICByZXR1cm4gbW9kaWZ5QmxvY2tGb3JDb250ZW50U3RhdGUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2UoeyBkYXRhOiBibG9jay5nZXREYXRhKCkubWVyZ2UoYmxvY2tEYXRhKSB9KTtcbiAgICB9KTtcbiAgfSxcblxuICBhcHBseUVudGl0eTogZnVuY3Rpb24gYXBwbHlFbnRpdHkoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgZW50aXR5S2V5KSB7XG4gICAgdmFyIHdpdGhvdXRFbnRpdGllcyA9IHJlbW92ZUVudGl0aWVzQXRFZGdlcyhjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlKTtcbiAgICByZXR1cm4gYXBwbHlFbnRpdHlUb0NvbnRlbnRTdGF0ZSh3aXRob3V0RW50aXRpZXMsIHNlbGVjdGlvblN0YXRlLCBlbnRpdHlLZXkpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0TW9kaWZpZXI7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgQnJvd3NlclJvdXRlciwgUm91dGUsIFN3aXRjaCwgTGluaywgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5mdW5jdGlvbiBGb290ZXIocHJvcHMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8Zm9vdGVyPlxuICAgICAgICA8aDE+VGhlIE5leHQgU3RlcDwvaDE+XG4gICAgICAgIDxwPlRlY2ggSm9icyBGb3IgVGVjaCBQZW9wbGU8L3A+XG4gICAgICAgICAgICBcbiAgICAgICAgPC9mb290ZXI+XG4gICAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9vdGVyOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIsIFJvdXRlLCBTd2l0Y2gsIExpbmssIE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmNsYXNzIEhlYWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKTtcbiAgICAgICAgY29uc3QgdG9rZW5Jc1ZhbGlkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuSXNWYWxpZCcpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB0b2tlbjogdG9rZW4sXG4gICAgICAgICAgICB0b2tlbklzVmFsaWQ6IHRva2VuSXNWYWxpZFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuXG4gICAgICAgIGNvbnN0IGNoZWNrVG9rZW5FbmRwb2ludCA9ICcvYXV0aGVudGljYXRlL2N1cnJlbnRfdXNlci8nO1xuXG4gICAgICAgIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XG5cbiAgICAgICAgYXhpb3Moe1xuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgICAgIHVybDogY2hlY2tUb2tlbkVuZHBvaW50LFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0pXVCAnK2xvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpLFxuICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICByZXNwb25zZVR5cGU6ICdqc29uJ1xuICAgICAgICB9KVxuICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4geyBcbiAgIFxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuSXNWYWxpZCcsIHRydWUpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICAgICAgICAgICAgICAge3Rva2VuSXNWYWxpZDogdHJ1ZX1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9rZW5Jc1ZhbGlkJywgbnVsbClcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgICAgICAgICAgICAgICB7dG9rZW5Jc1ZhbGlkOiBudWxsfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRoaXMgaXMgYW4gZXJyb3IgeW9cIiwgZXJyb3IpO1xuICAgICAgICAgIH0pXG5cbiAgICB9XG4gICAgXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGhlYWRlcj5cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiaGVhZGVyLWlubmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJoZWFkZXItdGl0bGUtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz1cIi9cIj48aDE+VGhlIE5leHQgU3RlcDwvaDE+PC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPG5hdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPVwiL1wiIGFjdGl2ZUNsYXNzTmFtZT1cImlzLWFjdGl2ZVwiIGV4YWN0PXt0cnVlfT5Ib21lIDwvTmF2TGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPVwiL2NvbnRhY3RcIiBhY3RpdmVDbGFzc05hbWU9XCJpcy1hY3RpdmVcIiBleGFjdD17dHJ1ZX0+Q29udGFjdCA8L05hdkxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS50b2tlbklzVmFsaWQgPyA8TmF2TGluayB0bz1cIi9lbXBsb3llcl9kYXNoYm9hcmRcIiBhY3RpdmVDbGFzc05hbWU9XCJpcy1hY3RpdmVcIiBleGFjdD17dHJ1ZX0+RW1wbG95ZXIgRGFzaGJvYXJkIDwvTmF2TGluaz4gOiA8TmF2TGluayB0bz1cIi9teV9hY2NvdW50XCIgYWN0aXZlQ2xhc3NOYW1lPVwiaXMtYWN0aXZlXCIgZXhhY3Q9e3RydWV9PkxvZ2luL1JlZ2lzdGVyIDwvTmF2TGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDwvbmF2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9oZWFkZXI+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ2hhcmFjdGVyTWV0YWRhdGFcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdpbW11dGFibGUnKSxcbiAgICBNYXAgPSBfcmVxdWlyZS5NYXAsXG4gICAgT3JkZXJlZFNldCA9IF9yZXF1aXJlLk9yZGVyZWRTZXQsXG4gICAgUmVjb3JkID0gX3JlcXVpcmUuUmVjb3JkO1xuXG4vLyBJbW11dGFibGUubWFwIGlzIHR5cGVkIHN1Y2ggdGhhdCB0aGUgdmFsdWUgZm9yIGV2ZXJ5IGtleSBpbiB0aGUgbWFwXG4vLyBtdXN0IGJlIHRoZSBzYW1lIHR5cGVcblxuXG52YXIgRU1QVFlfU0VUID0gT3JkZXJlZFNldCgpO1xuXG52YXIgZGVmYXVsdFJlY29yZCA9IHtcbiAgc3R5bGU6IEVNUFRZX1NFVCxcbiAgZW50aXR5OiBudWxsXG59O1xuXG52YXIgQ2hhcmFjdGVyTWV0YWRhdGFSZWNvcmQgPSBSZWNvcmQoZGVmYXVsdFJlY29yZCk7XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IGZ1bmN0aW9uIChfQ2hhcmFjdGVyTWV0YWRhdGFSZWMpIHtcbiAgX2luaGVyaXRzKENoYXJhY3Rlck1ldGFkYXRhLCBfQ2hhcmFjdGVyTWV0YWRhdGFSZWMpO1xuXG4gIGZ1bmN0aW9uIENoYXJhY3Rlck1ldGFkYXRhKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDaGFyYWN0ZXJNZXRhZGF0YSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NoYXJhY3Rlck1ldGFkYXRhUmVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgQ2hhcmFjdGVyTWV0YWRhdGEucHJvdG90eXBlLmdldFN0eWxlID0gZnVuY3Rpb24gZ2V0U3R5bGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdzdHlsZScpO1xuICB9O1xuXG4gIENoYXJhY3Rlck1ldGFkYXRhLnByb3RvdHlwZS5nZXRFbnRpdHkgPSBmdW5jdGlvbiBnZXRFbnRpdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdlbnRpdHknKTtcbiAgfTtcblxuICBDaGFyYWN0ZXJNZXRhZGF0YS5wcm90b3R5cGUuaGFzU3R5bGUgPSBmdW5jdGlvbiBoYXNTdHlsZShzdHlsZSkge1xuICAgIHJldHVybiB0aGlzLmdldFN0eWxlKCkuaW5jbHVkZXMoc3R5bGUpO1xuICB9O1xuXG4gIENoYXJhY3Rlck1ldGFkYXRhLmFwcGx5U3R5bGUgPSBmdW5jdGlvbiBhcHBseVN0eWxlKHJlY29yZCwgc3R5bGUpIHtcbiAgICB2YXIgd2l0aFN0eWxlID0gcmVjb3JkLnNldCgnc3R5bGUnLCByZWNvcmQuZ2V0U3R5bGUoKS5hZGQoc3R5bGUpKTtcbiAgICByZXR1cm4gQ2hhcmFjdGVyTWV0YWRhdGEuY3JlYXRlKHdpdGhTdHlsZSk7XG4gIH07XG5cbiAgQ2hhcmFjdGVyTWV0YWRhdGEucmVtb3ZlU3R5bGUgPSBmdW5jdGlvbiByZW1vdmVTdHlsZShyZWNvcmQsIHN0eWxlKSB7XG4gICAgdmFyIHdpdGhvdXRTdHlsZSA9IHJlY29yZC5zZXQoJ3N0eWxlJywgcmVjb3JkLmdldFN0eWxlKCkucmVtb3ZlKHN0eWxlKSk7XG4gICAgcmV0dXJuIENoYXJhY3Rlck1ldGFkYXRhLmNyZWF0ZSh3aXRob3V0U3R5bGUpO1xuICB9O1xuXG4gIENoYXJhY3Rlck1ldGFkYXRhLmFwcGx5RW50aXR5ID0gZnVuY3Rpb24gYXBwbHlFbnRpdHkocmVjb3JkLCBlbnRpdHlLZXkpIHtcbiAgICB2YXIgd2l0aEVudGl0eSA9IHJlY29yZC5nZXRFbnRpdHkoKSA9PT0gZW50aXR5S2V5ID8gcmVjb3JkIDogcmVjb3JkLnNldCgnZW50aXR5JywgZW50aXR5S2V5KTtcbiAgICByZXR1cm4gQ2hhcmFjdGVyTWV0YWRhdGEuY3JlYXRlKHdpdGhFbnRpdHkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBVc2UgdGhpcyBmdW5jdGlvbiBpbnN0ZWFkIG9mIHRoZSBgQ2hhcmFjdGVyTWV0YWRhdGFgIGNvbnN0cnVjdG9yLlxuICAgKiBTaW5jZSBtb3N0IGNvbnRlbnQgZ2VuZXJhbGx5IHVzZXMgb25seSBhIHZlcnkgc21hbGwgbnVtYmVyIG9mXG4gICAqIHN0eWxlL2VudGl0eSBwZXJtdXRhdGlvbnMsIHdlIGNhbiByZXVzZSB0aGVzZSBvYmplY3RzIGFzIG9mdGVuIGFzXG4gICAqIHBvc3NpYmxlLlxuICAgKi9cblxuXG4gIENoYXJhY3Rlck1ldGFkYXRhLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShjb25maWcpIHtcbiAgICBpZiAoIWNvbmZpZykge1xuICAgICAgcmV0dXJuIEVNUFRZO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0Q29uZmlnID0ge1xuICAgICAgc3R5bGU6IEVNUFRZX1NFVCxcbiAgICAgIGVudGl0eTogbnVsbFxuICAgIH07XG5cbiAgICAvLyBGaWxsIGluIHVuc3BlY2lmaWVkIHByb3BlcnRpZXMsIGlmIG5lY2Vzc2FyeS5cbiAgICB2YXIgY29uZmlnTWFwID0gTWFwKGRlZmF1bHRDb25maWcpLm1lcmdlKGNvbmZpZyk7XG5cbiAgICB2YXIgZXhpc3RpbmcgPSBwb29sLmdldChjb25maWdNYXApO1xuICAgIGlmIChleGlzdGluZykge1xuICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH1cblxuICAgIHZhciBuZXdDaGFyYWN0ZXIgPSBuZXcgQ2hhcmFjdGVyTWV0YWRhdGEoY29uZmlnTWFwKTtcbiAgICBwb29sID0gcG9vbC5zZXQoY29uZmlnTWFwLCBuZXdDaGFyYWN0ZXIpO1xuICAgIHJldHVybiBuZXdDaGFyYWN0ZXI7XG4gIH07XG5cbiAgcmV0dXJuIENoYXJhY3Rlck1ldGFkYXRhO1xufShDaGFyYWN0ZXJNZXRhZGF0YVJlY29yZCk7XG5cbnZhciBFTVBUWSA9IG5ldyBDaGFyYWN0ZXJNZXRhZGF0YSgpO1xudmFyIHBvb2wgPSBNYXAoW1tNYXAoZGVmYXVsdFJlY29yZCksIEVNUFRZXV0pO1xuXG5DaGFyYWN0ZXJNZXRhZGF0YS5FTVBUWSA9IEVNUFRZO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENoYXJhY3Rlck1ldGFkYXRhOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ29udGVudEJsb2NrTm9kZVxuICogQGZvcm1hdFxuICogXG4gKlxuICogVGhpcyBmaWxlIGlzIGEgZm9yayBvZiBDb250ZW50QmxvY2sgYWRkaW5nIHN1cHBvcnQgZm9yIG5lc3RpbmcgcmVmZXJlbmNlcyBieVxuICogcHJvdmlkaW5nIGxpbmtzIHRvIGNoaWxkcmVuLCBwYXJlbnQsIHByZXZTaWJsaW5nLCBhbmQgbmV4dFNpYmxpbmcuXG4gKlxuICogVGhpcyBpcyB1bnN0YWJsZSBhbmQgbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBieVxuICogcHJvZHVjdGlvbiBzeXN0ZW1zLiBUaGlzIGZpbGUgbWF5IGJlIHVwZGF0ZS9yZW1vdmVkIHdpdGhvdXQgbm90aWNlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQ2hhcmFjdGVyTWV0YWRhdGEgPSByZXF1aXJlKCcuL0NoYXJhY3Rlck1ldGFkYXRhJyk7XG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbnZhciBmaW5kUmFuZ2VzSW1tdXRhYmxlID0gcmVxdWlyZSgnLi9maW5kUmFuZ2VzSW1tdXRhYmxlJyk7XG5cbnZhciBMaXN0ID0gSW1tdXRhYmxlLkxpc3QsXG4gICAgTWFwID0gSW1tdXRhYmxlLk1hcCxcbiAgICBPcmRlcmVkU2V0ID0gSW1tdXRhYmxlLk9yZGVyZWRTZXQsXG4gICAgUmVjb3JkID0gSW1tdXRhYmxlLlJlY29yZCxcbiAgICBSZXBlYXQgPSBJbW11dGFibGUuUmVwZWF0O1xuXG5cbnZhciBFTVBUWV9TRVQgPSBPcmRlcmVkU2V0KCk7XG5cbnZhciBkZWZhdWx0UmVjb3JkID0ge1xuICBwYXJlbnQ6IG51bGwsXG4gIGNoYXJhY3Rlckxpc3Q6IExpc3QoKSxcbiAgZGF0YTogTWFwKCksXG4gIGRlcHRoOiAwLFxuICBrZXk6ICcnLFxuICB0ZXh0OiAnJyxcbiAgdHlwZTogJ3Vuc3R5bGVkJyxcbiAgY2hpbGRyZW46IExpc3QoKSxcbiAgcHJldlNpYmxpbmc6IG51bGwsXG4gIG5leHRTaWJsaW5nOiBudWxsXG59O1xuXG52YXIgaGF2ZUVxdWFsU3R5bGUgPSBmdW5jdGlvbiBoYXZlRXF1YWxTdHlsZShjaGFyQSwgY2hhckIpIHtcbiAgcmV0dXJuIGNoYXJBLmdldFN0eWxlKCkgPT09IGNoYXJCLmdldFN0eWxlKCk7XG59O1xuXG52YXIgaGF2ZUVxdWFsRW50aXR5ID0gZnVuY3Rpb24gaGF2ZUVxdWFsRW50aXR5KGNoYXJBLCBjaGFyQikge1xuICByZXR1cm4gY2hhckEuZ2V0RW50aXR5KCkgPT09IGNoYXJCLmdldEVudGl0eSgpO1xufTtcblxudmFyIGRlY29yYXRlQ2hhcmFjdGVyTGlzdCA9IGZ1bmN0aW9uIGRlY29yYXRlQ2hhcmFjdGVyTGlzdChjb25maWcpIHtcbiAgaWYgKCFjb25maWcpIHtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgdmFyIGNoYXJhY3Rlckxpc3QgPSBjb25maWcuY2hhcmFjdGVyTGlzdCxcbiAgICAgIHRleHQgPSBjb25maWcudGV4dDtcblxuXG4gIGlmICh0ZXh0ICYmICFjaGFyYWN0ZXJMaXN0KSB7XG4gICAgY29uZmlnLmNoYXJhY3Rlckxpc3QgPSBMaXN0KFJlcGVhdChDaGFyYWN0ZXJNZXRhZGF0YS5FTVBUWSwgdGV4dC5sZW5ndGgpKTtcbiAgfVxuXG4gIHJldHVybiBjb25maWc7XG59O1xuXG52YXIgQ29udGVudEJsb2NrTm9kZSA9IGZ1bmN0aW9uIChfUmVjb3JkKSB7XG4gIF9pbmhlcml0cyhDb250ZW50QmxvY2tOb2RlLCBfUmVjb3JkKTtcblxuICBmdW5jdGlvbiBDb250ZW50QmxvY2tOb2RlKCkge1xuICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZGVmYXVsdFJlY29yZDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb250ZW50QmxvY2tOb2RlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVjb3JkLmNhbGwodGhpcywgZGVjb3JhdGVDaGFyYWN0ZXJMaXN0KHByb3BzKSkpO1xuICB9XG5cbiAgQ29udGVudEJsb2NrTm9kZS5wcm90b3R5cGUuZ2V0S2V5ID0gZnVuY3Rpb24gZ2V0S2V5KCkge1xuICAgIHJldHVybiB0aGlzLmdldCgna2V5Jyk7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrTm9kZS5wcm90b3R5cGUuZ2V0VHlwZSA9IGZ1bmN0aW9uIGdldFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCd0eXBlJyk7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrTm9kZS5wcm90b3R5cGUuZ2V0VGV4dCA9IGZ1bmN0aW9uIGdldFRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCd0ZXh0Jyk7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrTm9kZS5wcm90b3R5cGUuZ2V0Q2hhcmFjdGVyTGlzdCA9IGZ1bmN0aW9uIGdldENoYXJhY3Rlckxpc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdjaGFyYWN0ZXJMaXN0Jyk7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrTm9kZS5wcm90b3R5cGUuZ2V0TGVuZ3RoID0gZnVuY3Rpb24gZ2V0TGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRleHQoKS5sZW5ndGg7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrTm9kZS5wcm90b3R5cGUuZ2V0RGVwdGggPSBmdW5jdGlvbiBnZXREZXB0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2RlcHRoJyk7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrTm9kZS5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uIGdldERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdkYXRhJyk7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrTm9kZS5wcm90b3R5cGUuZ2V0SW5saW5lU3R5bGVBdCA9IGZ1bmN0aW9uIGdldElubGluZVN0eWxlQXQob2Zmc2V0KSB7XG4gICAgdmFyIGNoYXJhY3RlciA9IHRoaXMuZ2V0Q2hhcmFjdGVyTGlzdCgpLmdldChvZmZzZXQpO1xuICAgIHJldHVybiBjaGFyYWN0ZXIgPyBjaGFyYWN0ZXIuZ2V0U3R5bGUoKSA6IEVNUFRZX1NFVDtcbiAgfTtcblxuICBDb250ZW50QmxvY2tOb2RlLnByb3RvdHlwZS5nZXRFbnRpdHlBdCA9IGZ1bmN0aW9uIGdldEVudGl0eUF0KG9mZnNldCkge1xuICAgIHZhciBjaGFyYWN0ZXIgPSB0aGlzLmdldENoYXJhY3Rlckxpc3QoKS5nZXQob2Zmc2V0KTtcbiAgICByZXR1cm4gY2hhcmFjdGVyID8gY2hhcmFjdGVyLmdldEVudGl0eSgpIDogbnVsbDtcbiAgfTtcblxuICBDb250ZW50QmxvY2tOb2RlLnByb3RvdHlwZS5nZXRDaGlsZEtleXMgPSBmdW5jdGlvbiBnZXRDaGlsZEtleXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdjaGlsZHJlbicpO1xuICB9O1xuXG4gIENvbnRlbnRCbG9ja05vZGUucHJvdG90eXBlLmdldFBhcmVudEtleSA9IGZ1bmN0aW9uIGdldFBhcmVudEtleSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ3BhcmVudCcpO1xuICB9O1xuXG4gIENvbnRlbnRCbG9ja05vZGUucHJvdG90eXBlLmdldFByZXZTaWJsaW5nS2V5ID0gZnVuY3Rpb24gZ2V0UHJldlNpYmxpbmdLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdwcmV2U2libGluZycpO1xuICB9O1xuXG4gIENvbnRlbnRCbG9ja05vZGUucHJvdG90eXBlLmdldE5leHRTaWJsaW5nS2V5ID0gZnVuY3Rpb24gZ2V0TmV4dFNpYmxpbmdLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCduZXh0U2libGluZycpO1xuICB9O1xuXG4gIENvbnRlbnRCbG9ja05vZGUucHJvdG90eXBlLmZpbmRTdHlsZVJhbmdlcyA9IGZ1bmN0aW9uIGZpbmRTdHlsZVJhbmdlcyhmaWx0ZXJGbiwgY2FsbGJhY2spIHtcbiAgICBmaW5kUmFuZ2VzSW1tdXRhYmxlKHRoaXMuZ2V0Q2hhcmFjdGVyTGlzdCgpLCBoYXZlRXF1YWxTdHlsZSwgZmlsdGVyRm4sIGNhbGxiYWNrKTtcbiAgfTtcblxuICBDb250ZW50QmxvY2tOb2RlLnByb3RvdHlwZS5maW5kRW50aXR5UmFuZ2VzID0gZnVuY3Rpb24gZmluZEVudGl0eVJhbmdlcyhmaWx0ZXJGbiwgY2FsbGJhY2spIHtcbiAgICBmaW5kUmFuZ2VzSW1tdXRhYmxlKHRoaXMuZ2V0Q2hhcmFjdGVyTGlzdCgpLCBoYXZlRXF1YWxFbnRpdHksIGZpbHRlckZuLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgcmV0dXJuIENvbnRlbnRCbG9ja05vZGU7XG59KFJlY29yZChkZWZhdWx0UmVjb3JkKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udGVudEJsb2NrTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxudmFyIG51bGx0aHJvd3MgPSBmdW5jdGlvbiBudWxsdGhyb3dzKHgpIHtcbiAgaWYgKHggIT0gbnVsbCkge1xuICAgIHJldHVybiB4O1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcIkdvdCB1bmV4cGVjdGVkIG51bGwgb3IgdW5kZWZpbmVkXCIpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBudWxsdGhyb3dzOyIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVc2VyQWdlbnREYXRhID0gcmVxdWlyZSgnLi9Vc2VyQWdlbnREYXRhJyk7XG52YXIgVmVyc2lvblJhbmdlID0gcmVxdWlyZSgnLi9WZXJzaW9uUmFuZ2UnKTtcblxudmFyIG1hcE9iamVjdCA9IHJlcXVpcmUoJy4vbWFwT2JqZWN0Jyk7XG52YXIgbWVtb2l6ZVN0cmluZ09ubHkgPSByZXF1aXJlKCcuL21lbW9pemVTdHJpbmdPbmx5Jyk7XG5cbi8qKlxuICogQ2hlY2tzIHRvIHNlZSB3aGV0aGVyIGBuYW1lYCBhbmQgYHZlcnNpb25gIHNhdGlzZnkgYHF1ZXJ5YC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBicm93c2VyLCBkZXZpY2UsIGVuZ2luZSBvciBwbGF0Zm9ybVxuICogQHBhcmFtIHs/c3RyaW5nfSB2ZXJzaW9uIFZlcnNpb24gb2YgdGhlIGJyb3dzZXIsIGVuZ2luZSBvciBwbGF0Zm9ybVxuICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IFF1ZXJ5IG9mIGZvcm0gXCJOYW1lIFtyYW5nZSBleHByZXNzaW9uXVwiXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gbm9ybWFsaXplciBPcHRpb25hbCBwcmUtcHJvY2Vzc29yIGZvciByYW5nZSBleHByZXNzaW9uXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjb21wYXJlKG5hbWUsIHZlcnNpb24sIHF1ZXJ5LCBub3JtYWxpemVyKSB7XG4gIC8vIGNoZWNrIGZvciBleGFjdCBtYXRjaCB3aXRoIG5vIHZlcnNpb25cbiAgaWYgKG5hbWUgPT09IHF1ZXJ5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBjaGVjayBmb3Igbm9uLW1hdGNoaW5nIG5hbWVzXG4gIGlmICghcXVlcnkuc3RhcnRzV2l0aChuYW1lKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIGZ1bGwgY29tcGFyaXNvbiB3aXRoIHZlcnNpb25cbiAgdmFyIHJhbmdlID0gcXVlcnkuc2xpY2UobmFtZS5sZW5ndGgpO1xuICBpZiAodmVyc2lvbikge1xuICAgIHJhbmdlID0gbm9ybWFsaXplciA/IG5vcm1hbGl6ZXIocmFuZ2UpIDogcmFuZ2U7XG4gICAgcmV0dXJuIFZlcnNpb25SYW5nZS5jb250YWlucyhyYW5nZSwgdmVyc2lvbik7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogTm9ybWFsaXplcyBgdmVyc2lvbmAgYnkgc3RyaXBwaW5nIGFueSBcIk5UXCIgcHJlZml4LCBidXQgb25seSBvbiB0aGUgV2luZG93c1xuICogcGxhdGZvcm0uXG4gKlxuICogTWltaWNzIHRoZSBzdHJpcHBpbmcgcGVyZm9ybWVkIGJ5IHRoZSBgVXNlckFnZW50V2luZG93c1BsYXRmb3JtYCBQSFAgY2xhc3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZlcnNpb25cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplUGxhdGZvcm1WZXJzaW9uKHZlcnNpb24pIHtcbiAgaWYgKFVzZXJBZ2VudERhdGEucGxhdGZvcm1OYW1lID09PSAnV2luZG93cycpIHtcbiAgICByZXR1cm4gdmVyc2lvbi5yZXBsYWNlKC9eXFxzKk5ULywgJycpO1xuICB9XG5cbiAgcmV0dXJuIHZlcnNpb247XG59XG5cbi8qKlxuICogUHJvdmlkZXMgY2xpZW50LXNpZGUgYWNjZXNzIHRvIHRoZSBhdXRob3JpdGF0aXZlIFBIUC1nZW5lcmF0ZWQgVXNlciBBZ2VudFxuICogaW5mb3JtYXRpb24gc3VwcGxpZWQgYnkgdGhlIHNlcnZlci5cbiAqL1xudmFyIFVzZXJBZ2VudCA9IHtcbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBVc2VyIEFnZW50IGJyb3dzZXIgbWF0Y2hlcyBgcXVlcnlgLlxuICAgKlxuICAgKiBgcXVlcnlgIHNob3VsZCBiZSBhIHN0cmluZyBsaWtlIFwiQ2hyb21lXCIgb3IgXCJDaHJvbWUgPiAzM1wiLlxuICAgKlxuICAgKiBWYWxpZCBicm93c2VyIG5hbWVzIGluY2x1ZGU6XG4gICAqXG4gICAqIC0gQUNDRVNTIE5ldEZyb250XG4gICAqIC0gQU9MXG4gICAqIC0gQW1hem9uIFNpbGtcbiAgICogLSBBbmRyb2lkXG4gICAqIC0gQmxhY2tCZXJyeVxuICAgKiAtIEJsYWNrQmVycnkgUGxheUJvb2tcbiAgICogLSBDaHJvbWVcbiAgICogLSBDaHJvbWUgZm9yIGlPU1xuICAgKiAtIENocm9tZSBmcmFtZVxuICAgKiAtIEZhY2Vib29rIFBIUCBTREtcbiAgICogLSBGYWNlYm9vayBmb3IgaU9TXG4gICAqIC0gRmlyZWZveFxuICAgKiAtIElFXG4gICAqIC0gSUUgTW9iaWxlXG4gICAqIC0gTW9iaWxlIFNhZmFyaVxuICAgKiAtIE1vdG9yb2xhIEludGVybmV0IEJyb3dzZXJcbiAgICogLSBOb2tpYVxuICAgKiAtIE9wZW53YXZlIE1vYmlsZSBCcm93c2VyXG4gICAqIC0gT3BlcmFcbiAgICogLSBPcGVyYSBNaW5pXG4gICAqIC0gT3BlcmEgTW9iaWxlXG4gICAqIC0gU2FmYXJpXG4gICAqIC0gVUlXZWJWaWV3XG4gICAqIC0gVW5rbm93blxuICAgKiAtIHdlYk9TXG4gICAqIC0gZXRjLi4uXG4gICAqXG4gICAqIEFuIGF1dGhvcml0YXRpdmUgbGlzdCBjYW4gYmUgZm91bmQgaW4gdGhlIFBIUCBgQnJvd3NlckRldGVjdG9yYCBjbGFzcyBhbmRcbiAgICogcmVsYXRlZCBjbGFzc2VzIGluIHRoZSBzYW1lIGZpbGUgKHNlZSBjYWxscyB0byBgbmV3IFVzZXJBZ2VudEJyb3dzZXJgIGhlcmU6XG4gICAqIGh0dHBzOi8vZmJ1cmwuY29tLzUwNzI4MTA0KS5cbiAgICpcbiAgICogQG5vdGUgRnVuY3Rpb24gcmVzdWx0cyBhcmUgbWVtb2l6ZWRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IFF1ZXJ5IG9mIHRoZSBmb3JtIFwiTmFtZSBbcmFuZ2UgZXhwcmVzc2lvbl1cIlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNCcm93c2VyOiBmdW5jdGlvbiBpc0Jyb3dzZXIocXVlcnkpIHtcbiAgICByZXR1cm4gY29tcGFyZShVc2VyQWdlbnREYXRhLmJyb3dzZXJOYW1lLCBVc2VyQWdlbnREYXRhLmJyb3dzZXJGdWxsVmVyc2lvbiwgcXVlcnkpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBVc2VyIEFnZW50IGJyb3dzZXIgdXNlcyBhIDMyIG9yIDY0IGJpdCBhcmNoaXRlY3R1cmUuXG4gICAqXG4gICAqIEBub3RlIEZ1bmN0aW9uIHJlc3VsdHMgYXJlIG1lbW9pemVkXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSBRdWVyeSBvZiB0aGUgZm9ybSBcIjMyXCIgb3IgXCI2NFwiLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNCcm93c2VyQXJjaGl0ZWN0dXJlOiBmdW5jdGlvbiBpc0Jyb3dzZXJBcmNoaXRlY3R1cmUocXVlcnkpIHtcbiAgICByZXR1cm4gY29tcGFyZShVc2VyQWdlbnREYXRhLmJyb3dzZXJBcmNoaXRlY3R1cmUsIG51bGwsIHF1ZXJ5KTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgVXNlciBBZ2VudCBkZXZpY2UgbWF0Y2hlcyBgcXVlcnlgLlxuICAgKlxuICAgKiBgcXVlcnlgIHNob3VsZCBiZSBhIHN0cmluZyBsaWtlIFwiaVBob25lXCIgb3IgXCJpUGFkXCIuXG4gICAqXG4gICAqIFZhbGlkIGRldmljZSBuYW1lcyBpbmNsdWRlOlxuICAgKlxuICAgKiAtIEtpbmRsZVxuICAgKiAtIEtpbmRsZSBGaXJlXG4gICAqIC0gVW5rbm93blxuICAgKiAtIGlQYWRcbiAgICogLSBpUGhvbmVcbiAgICogLSBpUG9kXG4gICAqIC0gZXRjLi4uXG4gICAqXG4gICAqIEFuIGF1dGhvcml0YXRpdmUgbGlzdCBjYW4gYmUgZm91bmQgaW4gdGhlIFBIUCBgRGV2aWNlRGV0ZWN0b3JgIGNsYXNzIGFuZFxuICAgKiByZWxhdGVkIGNsYXNzZXMgaW4gdGhlIHNhbWUgZmlsZSAoc2VlIGNhbGxzIHRvIGBuZXcgVXNlckFnZW50RGV2aWNlYCBoZXJlOlxuICAgKiBodHRwczovL2ZidXJsLmNvbS81MDcyODMzMikuXG4gICAqXG4gICAqIEBub3RlIEZ1bmN0aW9uIHJlc3VsdHMgYXJlIG1lbW9pemVkXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSBRdWVyeSBvZiB0aGUgZm9ybSBcIk5hbWVcIlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNEZXZpY2U6IGZ1bmN0aW9uIGlzRGV2aWNlKHF1ZXJ5KSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoVXNlckFnZW50RGF0YS5kZXZpY2VOYW1lLCBudWxsLCBxdWVyeSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIFVzZXIgQWdlbnQgcmVuZGVyaW5nIGVuZ2luZSBtYXRjaGVzIGBxdWVyeWAuXG4gICAqXG4gICAqIGBxdWVyeWAgc2hvdWxkIGJlIGEgc3RyaW5nIGxpa2UgXCJXZWJLaXRcIiBvciBcIldlYktpdCA+PSA1MzdcIi5cbiAgICpcbiAgICogVmFsaWQgZW5naW5lIG5hbWVzIGluY2x1ZGU6XG4gICAqXG4gICAqIC0gR2Vja29cbiAgICogLSBQcmVzdG9cbiAgICogLSBUcmlkZW50XG4gICAqIC0gV2ViS2l0XG4gICAqIC0gZXRjLi4uXG4gICAqXG4gICAqIEFuIGF1dGhvcml0YXRpdmUgbGlzdCBjYW4gYmUgZm91bmQgaW4gdGhlIFBIUCBgUmVuZGVyaW5nRW5naW5lRGV0ZWN0b3JgXG4gICAqIGNsYXNzIHJlbGF0ZWQgY2xhc3NlcyBpbiB0aGUgc2FtZSBmaWxlIChzZWUgY2FsbHMgdG8gYG5ld1xuICAgKiBVc2VyQWdlbnRSZW5kZXJpbmdFbmdpbmVgIGhlcmU6IGh0dHBzOi8vZmJ1cmwuY29tLzUwNzI4NjE3KS5cbiAgICpcbiAgICogQG5vdGUgRnVuY3Rpb24gcmVzdWx0cyBhcmUgbWVtb2l6ZWRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IFF1ZXJ5IG9mIHRoZSBmb3JtIFwiTmFtZSBbcmFuZ2UgZXhwcmVzc2lvbl1cIlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNFbmdpbmU6IGZ1bmN0aW9uIGlzRW5naW5lKHF1ZXJ5KSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoVXNlckFnZW50RGF0YS5lbmdpbmVOYW1lLCBVc2VyQWdlbnREYXRhLmVuZ2luZVZlcnNpb24sIHF1ZXJ5KTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgVXNlciBBZ2VudCBwbGF0Zm9ybSBtYXRjaGVzIGBxdWVyeWAuXG4gICAqXG4gICAqIGBxdWVyeWAgc2hvdWxkIGJlIGEgc3RyaW5nIGxpa2UgXCJXaW5kb3dzXCIgb3IgXCJpT1MgNSAtIDZcIi5cbiAgICpcbiAgICogVmFsaWQgcGxhdGZvcm0gbmFtZXMgaW5jbHVkZTpcbiAgICpcbiAgICogLSBBbmRyb2lkXG4gICAqIC0gQmxhY2tCZXJyeSBPU1xuICAgKiAtIEphdmEgTUVcbiAgICogLSBMaW51eFxuICAgKiAtIE1hYyBPUyBYXG4gICAqIC0gTWFjIE9TIFggQ2FsZW5kYXJcbiAgICogLSBNYWMgT1MgWCBJbnRlcm5ldCBBY2NvdW50XG4gICAqIC0gU3ltYmlhblxuICAgKiAtIFN5bWJpYW5PU1xuICAgKiAtIFdpbmRvd3NcbiAgICogLSBXaW5kb3dzIE1vYmlsZVxuICAgKiAtIFdpbmRvd3MgUGhvbmVcbiAgICogLSBpT1NcbiAgICogLSBpT1MgRmFjZWJvb2sgSW50ZWdyYXRpb24gQWNjb3VudFxuICAgKiAtIGlPUyBGYWNlYm9vayBTb2NpYWwgU2hhcmluZyBVSVxuICAgKiAtIHdlYk9TXG4gICAqIC0gQ2hyb21lIE9TXG4gICAqIC0gZXRjLi4uXG4gICAqXG4gICAqIEFuIGF1dGhvcml0YXRpdmUgbGlzdCBjYW4gYmUgZm91bmQgaW4gdGhlIFBIUCBgUGxhdGZvcm1EZXRlY3RvcmAgY2xhc3MgYW5kXG4gICAqIHJlbGF0ZWQgY2xhc3NlcyBpbiB0aGUgc2FtZSBmaWxlIChzZWUgY2FsbHMgdG8gYG5ldyBVc2VyQWdlbnRQbGF0Zm9ybWBcbiAgICogaGVyZTogaHR0cHM6Ly9mYnVybC5jb20vNTA3MjkyMjYpLlxuICAgKlxuICAgKiBAbm90ZSBGdW5jdGlvbiByZXN1bHRzIGFyZSBtZW1vaXplZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkgUXVlcnkgb2YgdGhlIGZvcm0gXCJOYW1lIFtyYW5nZSBleHByZXNzaW9uXVwiXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc1BsYXRmb3JtOiBmdW5jdGlvbiBpc1BsYXRmb3JtKHF1ZXJ5KSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoVXNlckFnZW50RGF0YS5wbGF0Zm9ybU5hbWUsIFVzZXJBZ2VudERhdGEucGxhdGZvcm1GdWxsVmVyc2lvbiwgcXVlcnksIG5vcm1hbGl6ZVBsYXRmb3JtVmVyc2lvbik7XG4gIH0sXG5cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIFVzZXIgQWdlbnQgcGxhdGZvcm0gaXMgYSAzMiBvciA2NCBiaXQgYXJjaGl0ZWN0dXJlLlxuICAgKlxuICAgKiBAbm90ZSBGdW5jdGlvbiByZXN1bHRzIGFyZSBtZW1vaXplZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkgUXVlcnkgb2YgdGhlIGZvcm0gXCIzMlwiIG9yIFwiNjRcIi5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzUGxhdGZvcm1BcmNoaXRlY3R1cmU6IGZ1bmN0aW9uIGlzUGxhdGZvcm1BcmNoaXRlY3R1cmUocXVlcnkpIHtcbiAgICByZXR1cm4gY29tcGFyZShVc2VyQWdlbnREYXRhLnBsYXRmb3JtQXJjaGl0ZWN0dXJlLCBudWxsLCBxdWVyeSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwT2JqZWN0KFVzZXJBZ2VudCwgbWVtb2l6ZVN0cmluZ09ubHkpOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBhZGRMZWFkaW5nU2xhc2ggPSBleHBvcnRzLmFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59O1xuXG52YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBleHBvcnRzLnN0cmlwTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn07XG5cbnZhciBoYXNCYXNlbmFtZSA9IGV4cG9ydHMuaGFzQmFzZW5hbWUgPSBmdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcHJlZml4ICsgJyhcXFxcL3xcXFxcP3wjfCQpJywgJ2knKS50ZXN0KHBhdGgpO1xufTtcblxudmFyIHN0cmlwQmFzZW5hbWUgPSBleHBvcnRzLnN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbnZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBleHBvcnRzLnN0cmlwVHJhaWxpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59O1xuXG52YXIgcGFyc2VQYXRoID0gZXhwb3J0cy5wYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbnZhciBjcmVhdGVQYXRoID0gZXhwb3J0cy5jcmVhdGVQYXRoID0gZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcblxuICByZXR1cm4gcGF0aDtcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZW5lcmF0ZVJhbmRvbUtleVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2VlbktleXMgPSB7fTtcbnZhciBNVUxUSVBMSUVSID0gTWF0aC5wb3coMiwgMjQpO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUtleSgpIHtcbiAgdmFyIGtleSA9IHZvaWQgMDtcbiAgd2hpbGUgKGtleSA9PT0gdW5kZWZpbmVkIHx8IHNlZW5LZXlzLmhhc093blByb3BlcnR5KGtleSkgfHwgIWlzTmFOKCtrZXkpKSB7XG4gICAga2V5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTVVMVElQTElFUikudG9TdHJpbmcoMzIpO1xuICB9XG4gIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICByZXR1cm4ga2V5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdlbmVyYXRlUmFuZG9tS2V5OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdEZlYXR1cmVGbGFnc1xuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuL0RyYWZ0RmVhdHVyZUZsYWdzLWNvcmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEZlYXR1cmVGbGFnczsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgU2luZ2xlSm9iIGZyb20gJy4vU2luZ2xlSm9iLmpzJztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIsIFJvdXRlLCBTd2l0Y2gsIExpbmssIE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmNsYXNzIEpvYnNQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGpvYnM6IFtdLFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGNvbnN0IGpvYnNFbmRQb2ludCA9ICcvam9iL2FwaS9qb2JzLyc7XG5cbiAgICBheGlvcy5nZXQoam9ic0VuZFBvaW50KVxuICAgIC50aGVuKCAocmVzcG9uc2UpID0+IHtcblxuXG5cbiAgICAgIGlmIChyZXNwb25zZS5kYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInRoZXJlIGFyZSBubyB1c2VycyB0aGF0IG1hdGNoIHlvdXIgc2VhcmNoXCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGpvYnM6IHJlc3BvbnNlLmRhdGFcbiAgICAgIH0pO1xuXG4gICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcblxuICAgIH0pXG4gICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIH1cblxuKX1cblxuICAgICAgICBcblxuXG4gICAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgaWQ9XCJqb2JzLXBhZ2VcIj5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJqb2JzLXBhZ2UtdGl0bGVcIj48aDE+VEVDSCBKT0JTPC9oMT48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJhbGwtam9ic1wiPlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5qb2JzLm1hcCgoam9iKSA9PiA8TGluayB0bz17XCIvam9iX3Bvc3QvXCIgKyBqb2IuaWR9IGtleT17am9iLnRpdGxlfT48U2luZ2xlSm9iIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgam9iVGl0bGU9e2pvYi50aXRsZX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2JIb3Vycz17am9iLmhvdXJzfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvYkFyZWE9e2pvYi5hcmVhfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvYlNsdWc9e2pvYi5zbHVnfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvYkxvY2F0aW9uPXtqb2IubG9jYXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2JTYWxhcnk9e2pvYi5zYWxhcnl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2JDb21wYW55PXtqb2IucG9zdGVkX2J5X2NvbXBhbnl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2JJZD17am9iLmlkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgam9iRXhwZXJpZW5jZT17am9iLmV4cGVyaWVuY2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2JEYXRlPXtqb2IuY3JlYXRlZF9kYXRlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz48L0xpbms+KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO31cbn1cblxuZXhwb3J0IGRlZmF1bHQgSm9ic1BhZ2U7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogVW5pY29kZS1lbmFibGVkIHJlcGxhY2VzbWVudHMgZm9yIGJhc2ljIFN0cmluZyBmdW5jdGlvbnMuXG4gKlxuICogQWxsIHRoZSBmdW5jdGlvbnMgaW4gdGhpcyBtb2R1bGUgYXNzdW1lIHRoYXQgdGhlIGlucHV0IHN0cmluZyBpcyBhIHZhbGlkXG4gKiBVVEYtMTYgZW5jb2Rpbmcgb2YgYSBVbmljb2RlIHNlcXVlbmNlLiBJZiBpdCdzIG5vdCB0aGUgY2FzZSwgdGhlIGJlaGF2aW9yXG4gKiB3aWxsIGJlIHVuZGVmaW5lZC5cbiAqXG4gKiBXQVJOSU5HOiBTaW5jZSB0aGlzIG1vZHVsZSBpcyB0eXBlY2hlY2tzLWVuZm9yY2VkLCB5b3UgbWF5IGZpbmQgbmV3IGJ1Z3NcbiAqIHdoZW4gcmVwbGFjaW5nIG5vcm1hbCBTdHJpbmcgZnVuY3Rpb25zIHdpdGggb25lcyBwcm92aWRlZCBoZXJlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJy4vaW52YXJpYW50Jyk7XG5cbi8vIFRoZXNlIHR3byByYW5nZXMgYXJlIGNvbnNlY3V0aXZlIHNvIGFueXRoaW5nIGluIFtISUdIX1NUQVJULCBMT1dfRU5EXSBpcyBhXG4vLyBzdXJyb2dhdGUgY29kZSB1bml0LlxudmFyIFNVUlJPR0FURV9ISUdIX1NUQVJUID0gMHhEODAwO1xudmFyIFNVUlJPR0FURV9ISUdIX0VORCA9IDB4REJGRjtcbnZhciBTVVJST0dBVEVfTE9XX1NUQVJUID0gMHhEQzAwO1xudmFyIFNVUlJPR0FURV9MT1dfRU5EID0gMHhERkZGO1xudmFyIFNVUlJPR0FURV9VTklUU19SRUdFWCA9IC9bXFx1RDgwMC1cXHVERkZGXS87XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVVbml0ICAgQSBVbmljb2RlIGNvZGUtdW5pdCwgaW4gcmFuZ2UgWzAsIDB4MTBGRkZGXVxuICogQHJldHVybiB7Ym9vbGVhbn0gICAgICAgICAgV2hldGhlciBjb2RlLXVuaXQgaXMgaW4gYSBzdXJyb2dhdGUgKGhpL2xvdykgcmFuZ2VcbiAqL1xuZnVuY3Rpb24gaXNDb2RlVW5pdEluU3Vycm9nYXRlUmFuZ2UoY29kZVVuaXQpIHtcbiAgcmV0dXJuIFNVUlJPR0FURV9ISUdIX1NUQVJUIDw9IGNvZGVVbml0ICYmIGNvZGVVbml0IDw9IFNVUlJPR0FURV9MT1dfRU5EO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgdHdvIGNoYXJhY3RlcnMgc3RhcnRpbmcgYXQgYGluZGV4YCBmb3JtIGEgc3Vycm9nYXRlIHBhaXIuXG4gKiBGb3IgZXhhbXBsZSwgZ2l2ZW4gdGhlIHN0cmluZyBzID0gXCJcXHVEODNEXFx1REUwQVwiLCAocywgMCkgcmV0dXJucyB0cnVlIGFuZFxuICogKHMsIDEpIHJldHVybnMgZmFsc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1N1cnJvZ2F0ZVBhaXIoc3RyLCBpbmRleCkge1xuICAhKDAgPD0gaW5kZXggJiYgaW5kZXggPCBzdHIubGVuZ3RoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdpc1N1cnJvZ2F0ZVBhaXI6IEludmFsaWQgaW5kZXggJXMgZm9yIHN0cmluZyBsZW5ndGggJXMuJywgaW5kZXgsIHN0ci5sZW5ndGgpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgaWYgKGluZGV4ICsgMSA9PT0gc3RyLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgZmlyc3QgPSBzdHIuY2hhckNvZGVBdChpbmRleCk7XG4gIHZhciBzZWNvbmQgPSBzdHIuY2hhckNvZGVBdChpbmRleCArIDEpO1xuICByZXR1cm4gU1VSUk9HQVRFX0hJR0hfU1RBUlQgPD0gZmlyc3QgJiYgZmlyc3QgPD0gU1VSUk9HQVRFX0hJR0hfRU5EICYmIFNVUlJPR0FURV9MT1dfU1RBUlQgPD0gc2Vjb25kICYmIHNlY29uZCA8PSBTVVJST0dBVEVfTE9XX0VORDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyICBOb24tZW1wdHkgc3RyaW5nXG4gKiBAcmV0dXJuIHtib29sZWFufSAgICBUcnVlIGlmIHRoZSBpbnB1dCBpbmNsdWRlcyBhbnkgc3Vycm9nYXRlIGNvZGUgdW5pdHNcbiAqL1xuZnVuY3Rpb24gaGFzU3Vycm9nYXRlVW5pdChzdHIpIHtcbiAgcmV0dXJuIFNVUlJPR0FURV9VTklUU19SRUdFWC50ZXN0KHN0cik7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIG9yaWdpbmFsIFVuaWNvZGUgY2hhcmFjdGVyIGF0IGdpdmVuIHBvc2l0aW9uIGluIHRoZVxuICogU3RyaW5nIGJ5IGxvb2tpbmcgaW50byB0aGUgVVRGLTE2IGNvZGUgdW5pdDsgdGhhdCBpcyBlcXVhbCB0byAxIGZvciBhbnlcbiAqIG5vbi1zdXJyb2dhdGUgY2hhcmFjdGVycyBpbiBCTVAgKFtVKzAwMDAuLlUrRDdGRl0gYW5kIFtVK0UwMDAsIFUrRkZGRl0pOyBhbmRcbiAqIHJldHVybnMgMiBmb3IgdGhlIGhpL2xvdyBzdXJyb2dhdGVzIChbVStEODAwLi5VK0RGRkZdKSwgd2hpY2ggYXJlIGluIGZhY3RcbiAqIHJlcHJlc2VudGluZyBub24tQk1QIGNoYXJhY3RlcnMgKFtVKzEwMDAwLi5VKzEwRkZGRl0pLlxuICpcbiAqIEV4YW1wbGVzOlxuICogLSAnXFx1MDAyMCcgPT4gMVxuICogLSAnXFx1MzAyMCcgPT4gMVxuICogLSAnXFx1RDgzNScgPT4gMlxuICogLSAnXFx1RDgzNVxcdURERUYnID0+IDJcbiAqIC0gJ1xcdURERUYnID0+IDJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyICBOb24tZW1wdHkgc3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zICBQb3NpdGlvbiBpbiB0aGUgc3RyaW5nIHRvIGxvb2sgZm9yIG9uZSBjb2RlIHVuaXRcbiAqIEByZXR1cm4ge251bWJlcn0gICAgICBOdW1iZXIgMSBvciAyXG4gKi9cbmZ1bmN0aW9uIGdldFVURjE2TGVuZ3RoKHN0ciwgcG9zKSB7XG4gIHJldHVybiAxICsgaXNDb2RlVW5pdEluU3Vycm9nYXRlUmFuZ2Uoc3RyLmNoYXJDb2RlQXQocG9zKSk7XG59XG5cbi8qKlxuICogRnVsbHkgVW5pY29kZS1lbmFibGVkIHJlcGxhY2VtZW50IGZvciBTdHJpbmcjbGVuZ3RoXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAgVmFsaWQgVW5pY29kZSBzdHJpbmdcbiAqIEByZXR1cm4ge251bWJlcn0gICAgIFRoZSBudW1iZXIgb2YgVW5pY29kZSBjaGFyYWN0ZXJzIGluIHRoZSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gc3RybGVuKHN0cikge1xuICAvLyBDYWxsIHRoZSBuYXRpdmUgZnVuY3Rpb25zIGlmIHRoZXJlJ3Mgbm8gc3Vycm9nYXRlIGNoYXJcbiAgaWYgKCFoYXNTdXJyb2dhdGVVbml0KHN0cikpIHtcbiAgICByZXR1cm4gc3RyLmxlbmd0aDtcbiAgfVxuXG4gIHZhciBsZW4gPSAwO1xuICBmb3IgKHZhciBwb3MgPSAwOyBwb3MgPCBzdHIubGVuZ3RoOyBwb3MgKz0gZ2V0VVRGMTZMZW5ndGgoc3RyLCBwb3MpKSB7XG4gICAgbGVuKys7XG4gIH1cbiAgcmV0dXJuIGxlbjtcbn1cblxuLyoqXG4gKiBGdWxseSBVbmljb2RlLWVuYWJsZWQgcmVwbGFjZW1lbnQgZm9yIFN0cmluZyNzdWJzdHIoKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgICAgICBWYWxpZCBVbmljb2RlIHN0cmluZ1xuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0ICAgIExvY2F0aW9uIGluIFVuaWNvZGUgc2VxdWVuY2UgdG8gYmVnaW4gZXh0cmFjdGluZ1xuICogQHBhcmFtIHs/bnVtYmVyfSBsZW5ndGggIFRoZSBudW1iZXIgb2YgVW5pY29kZSBjaGFyYWN0ZXJzIHRvIGV4dHJhY3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdDogdG8gdGhlIGVuZCBvZiB0aGUgc3RyaW5nKVxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgIEV4dHJhY3RlZCBzdWItc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHN1YnN0cihzdHIsIHN0YXJ0LCBsZW5ndGgpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICBsZW5ndGggPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IEluZmluaXR5IDogbGVuZ3RoIHx8IDA7XG5cbiAgLy8gQ2FsbCB0aGUgbmF0aXZlIGZ1bmN0aW9ucyBpZiB0aGVyZSdzIG5vIHN1cnJvZ2F0ZSBjaGFyXG4gIGlmICghaGFzU3Vycm9nYXRlVW5pdChzdHIpKSB7XG4gICAgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbmd0aCk7XG4gIH1cblxuICAvLyBPYnZpb3VzIGNhc2VzXG4gIHZhciBzaXplID0gc3RyLmxlbmd0aDtcbiAgaWYgKHNpemUgPD0gMCB8fCBzdGFydCA+IHNpemUgfHwgbGVuZ3RoIDw9IDApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvLyBGaW5kIHRoZSBhY3R1YWwgc3RhcnRpbmcgcG9zaXRpb25cbiAgdmFyIHBvc0EgPSAwO1xuICBpZiAoc3RhcnQgPiAwKSB7XG4gICAgZm9yICg7IHN0YXJ0ID4gMCAmJiBwb3NBIDwgc2l6ZTsgc3RhcnQtLSkge1xuICAgICAgcG9zQSArPSBnZXRVVEYxNkxlbmd0aChzdHIsIHBvc0EpO1xuICAgIH1cbiAgICBpZiAocG9zQSA+PSBzaXplKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9IGVsc2UgaWYgKHN0YXJ0IDwgMCkge1xuICAgIGZvciAocG9zQSA9IHNpemU7IHN0YXJ0IDwgMCAmJiAwIDwgcG9zQTsgc3RhcnQrKykge1xuICAgICAgcG9zQSAtPSBnZXRVVEYxNkxlbmd0aChzdHIsIHBvc0EgLSAxKTtcbiAgICB9XG4gICAgaWYgKHBvc0EgPCAwKSB7XG4gICAgICBwb3NBID0gMDtcbiAgICB9XG4gIH1cblxuICAvLyBGaW5kIHRoZSBhY3R1YWwgZW5kaW5nIHBvc2l0aW9uXG4gIHZhciBwb3NCID0gc2l6ZTtcbiAgaWYgKGxlbmd0aCA8IHNpemUpIHtcbiAgICBmb3IgKHBvc0IgPSBwb3NBOyBsZW5ndGggPiAwICYmIHBvc0IgPCBzaXplOyBsZW5ndGgtLSkge1xuICAgICAgcG9zQiArPSBnZXRVVEYxNkxlbmd0aChzdHIsIHBvc0IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyaW5nKHBvc0EsIHBvc0IpO1xufVxuXG4vKipcbiAqIEZ1bGx5IFVuaWNvZGUtZW5hYmxlZCByZXBsYWNlbWVudCBmb3IgU3RyaW5nI3N1YnN0cmluZygpXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAgICBWYWxpZCBVbmljb2RlIHN0cmluZ1xuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0ICBMb2NhdGlvbiBpbiBVbmljb2RlIHNlcXVlbmNlIHRvIGJlZ2luIGV4dHJhY3RpbmdcbiAqIEBwYXJhbSB7P251bWJlcn0gZW5kICAgTG9jYXRpb24gaW4gVW5pY29kZSBzZXF1ZW5jZSB0byBlbmQgZXh0cmFjdGluZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdDogZW5kIG9mIHRoZSBzdHJpbmcpXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgIEV4dHJhY3RlZCBzdWItc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHN1YnN0cmluZyhzdHIsIHN0YXJ0LCBlbmQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IEluZmluaXR5IDogZW5kIHx8IDA7XG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCA9IDA7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gTWF0aC5hYnMoZW5kIC0gc3RhcnQpO1xuICBzdGFydCA9IHN0YXJ0IDwgZW5kID8gc3RhcnQgOiBlbmQ7XG4gIHJldHVybiBzdWJzdHIoc3RyLCBzdGFydCwgbGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBHZXQgYSBsaXN0IG9mIFVuaWNvZGUgY29kZS1wb2ludHMgZnJvbSBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgICAgICAgIFZhbGlkIFVuaWNvZGUgc3RyaW5nXG4gKiBAcmV0dXJuIHthcnJheTxudW1iZXI+fSAgICBBIGxpc3Qgb2YgY29kZS1wb2ludHMgaW4gWzAuLjB4MTBGRkZGXVxuICovXG5mdW5jdGlvbiBnZXRDb2RlUG9pbnRzKHN0cikge1xuICB2YXIgY29kZVBvaW50cyA9IFtdO1xuICBmb3IgKHZhciBwb3MgPSAwOyBwb3MgPCBzdHIubGVuZ3RoOyBwb3MgKz0gZ2V0VVRGMTZMZW5ndGgoc3RyLCBwb3MpKSB7XG4gICAgY29kZVBvaW50cy5wdXNoKHN0ci5jb2RlUG9pbnRBdChwb3MpKTtcbiAgfVxuICByZXR1cm4gY29kZVBvaW50cztcbn1cblxudmFyIFVuaWNvZGVVdGlscyA9IHtcbiAgZ2V0Q29kZVBvaW50czogZ2V0Q29kZVBvaW50cyxcbiAgZ2V0VVRGMTZMZW5ndGg6IGdldFVURjE2TGVuZ3RoLFxuICBoYXNTdXJyb2dhdGVVbml0OiBoYXNTdXJyb2dhdGVVbml0LFxuICBpc0NvZGVVbml0SW5TdXJyb2dhdGVSYW5nZTogaXNDb2RlVW5pdEluU3Vycm9nYXRlUmFuZ2UsXG4gIGlzU3Vycm9nYXRlUGFpcjogaXNTdXJyb2dhdGVQYWlyLFxuICBzdHJsZW46IHN0cmxlbixcbiAgc3Vic3RyaW5nOiBzdWJzdHJpbmcsXG4gIHN1YnN0cjogc3Vic3RyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVuaWNvZGVVdGlsczsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENvbnRlbnRCbG9ja1xuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyTWV0YWRhdGEnKTtcbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIGZpbmRSYW5nZXNJbW11dGFibGUgPSByZXF1aXJlKCcuL2ZpbmRSYW5nZXNJbW11dGFibGUnKTtcblxudmFyIExpc3QgPSBJbW11dGFibGUuTGlzdCxcbiAgICBNYXAgPSBJbW11dGFibGUuTWFwLFxuICAgIE9yZGVyZWRTZXQgPSBJbW11dGFibGUuT3JkZXJlZFNldCxcbiAgICBSZWNvcmQgPSBJbW11dGFibGUuUmVjb3JkLFxuICAgIFJlcGVhdCA9IEltbXV0YWJsZS5SZXBlYXQ7XG5cblxudmFyIEVNUFRZX1NFVCA9IE9yZGVyZWRTZXQoKTtcblxudmFyIGRlZmF1bHRSZWNvcmQgPSB7XG4gIGtleTogJycsXG4gIHR5cGU6ICd1bnN0eWxlZCcsXG4gIHRleHQ6ICcnLFxuICBjaGFyYWN0ZXJMaXN0OiBMaXN0KCksXG4gIGRlcHRoOiAwLFxuICBkYXRhOiBNYXAoKVxufTtcblxudmFyIENvbnRlbnRCbG9ja1JlY29yZCA9IFJlY29yZChkZWZhdWx0UmVjb3JkKTtcblxudmFyIGRlY29yYXRlQ2hhcmFjdGVyTGlzdCA9IGZ1bmN0aW9uIGRlY29yYXRlQ2hhcmFjdGVyTGlzdChjb25maWcpIHtcbiAgaWYgKCFjb25maWcpIHtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgdmFyIGNoYXJhY3Rlckxpc3QgPSBjb25maWcuY2hhcmFjdGVyTGlzdCxcbiAgICAgIHRleHQgPSBjb25maWcudGV4dDtcblxuXG4gIGlmICh0ZXh0ICYmICFjaGFyYWN0ZXJMaXN0KSB7XG4gICAgY29uZmlnLmNoYXJhY3Rlckxpc3QgPSBMaXN0KFJlcGVhdChDaGFyYWN0ZXJNZXRhZGF0YS5FTVBUWSwgdGV4dC5sZW5ndGgpKTtcbiAgfVxuXG4gIHJldHVybiBjb25maWc7XG59O1xuXG52YXIgQ29udGVudEJsb2NrID0gZnVuY3Rpb24gKF9Db250ZW50QmxvY2tSZWNvcmQpIHtcbiAgX2luaGVyaXRzKENvbnRlbnRCbG9jaywgX0NvbnRlbnRCbG9ja1JlY29yZCk7XG5cbiAgZnVuY3Rpb24gQ29udGVudEJsb2NrKGNvbmZpZykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb250ZW50QmxvY2spO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db250ZW50QmxvY2tSZWNvcmQuY2FsbCh0aGlzLCBkZWNvcmF0ZUNoYXJhY3Rlckxpc3QoY29uZmlnKSkpO1xuICB9XG5cbiAgQ29udGVudEJsb2NrLnByb3RvdHlwZS5nZXRLZXkgPSBmdW5jdGlvbiBnZXRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdrZXknKTtcbiAgfTtcblxuICBDb250ZW50QmxvY2sucHJvdG90eXBlLmdldFR5cGUgPSBmdW5jdGlvbiBnZXRUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLmdldCgndHlwZScpO1xuICB9O1xuXG4gIENvbnRlbnRCbG9jay5wcm90b3R5cGUuZ2V0VGV4dCA9IGZ1bmN0aW9uIGdldFRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCd0ZXh0Jyk7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrLnByb3RvdHlwZS5nZXRDaGFyYWN0ZXJMaXN0ID0gZnVuY3Rpb24gZ2V0Q2hhcmFjdGVyTGlzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2NoYXJhY3Rlckxpc3QnKTtcbiAgfTtcblxuICBDb250ZW50QmxvY2sucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIGdldExlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUZXh0KCkubGVuZ3RoO1xuICB9O1xuXG4gIENvbnRlbnRCbG9jay5wcm90b3R5cGUuZ2V0RGVwdGggPSBmdW5jdGlvbiBnZXREZXB0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2RlcHRoJyk7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrLnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2RhdGEnKTtcbiAgfTtcblxuICBDb250ZW50QmxvY2sucHJvdG90eXBlLmdldElubGluZVN0eWxlQXQgPSBmdW5jdGlvbiBnZXRJbmxpbmVTdHlsZUF0KG9mZnNldCkge1xuICAgIHZhciBjaGFyYWN0ZXIgPSB0aGlzLmdldENoYXJhY3Rlckxpc3QoKS5nZXQob2Zmc2V0KTtcbiAgICByZXR1cm4gY2hhcmFjdGVyID8gY2hhcmFjdGVyLmdldFN0eWxlKCkgOiBFTVBUWV9TRVQ7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrLnByb3RvdHlwZS5nZXRFbnRpdHlBdCA9IGZ1bmN0aW9uIGdldEVudGl0eUF0KG9mZnNldCkge1xuICAgIHZhciBjaGFyYWN0ZXIgPSB0aGlzLmdldENoYXJhY3Rlckxpc3QoKS5nZXQob2Zmc2V0KTtcbiAgICByZXR1cm4gY2hhcmFjdGVyID8gY2hhcmFjdGVyLmdldEVudGl0eSgpIDogbnVsbDtcbiAgfTtcblxuICAvKipcbiAgICogRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBjb250aWd1b3VzIHJhbmdlIG9mIHN0eWxlcyB3aXRoaW4gdGhlIGJsb2NrLlxuICAgKi9cblxuXG4gIENvbnRlbnRCbG9jay5wcm90b3R5cGUuZmluZFN0eWxlUmFuZ2VzID0gZnVuY3Rpb24gZmluZFN0eWxlUmFuZ2VzKGZpbHRlckZuLCBjYWxsYmFjaykge1xuICAgIGZpbmRSYW5nZXNJbW11dGFibGUodGhpcy5nZXRDaGFyYWN0ZXJMaXN0KCksIGhhdmVFcXVhbFN0eWxlLCBmaWx0ZXJGbiwgY2FsbGJhY2spO1xuICB9O1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGNvbnRpZ3VvdXMgcmFuZ2Ugb2YgZW50aXRpZXMgd2l0aGluIHRoZSBibG9jay5cbiAgICovXG5cblxuICBDb250ZW50QmxvY2sucHJvdG90eXBlLmZpbmRFbnRpdHlSYW5nZXMgPSBmdW5jdGlvbiBmaW5kRW50aXR5UmFuZ2VzKGZpbHRlckZuLCBjYWxsYmFjaykge1xuICAgIGZpbmRSYW5nZXNJbW11dGFibGUodGhpcy5nZXRDaGFyYWN0ZXJMaXN0KCksIGhhdmVFcXVhbEVudGl0eSwgZmlsdGVyRm4sIGNhbGxiYWNrKTtcbiAgfTtcblxuICByZXR1cm4gQ29udGVudEJsb2NrO1xufShDb250ZW50QmxvY2tSZWNvcmQpO1xuXG5mdW5jdGlvbiBoYXZlRXF1YWxTdHlsZShjaGFyQSwgY2hhckIpIHtcbiAgcmV0dXJuIGNoYXJBLmdldFN0eWxlKCkgPT09IGNoYXJCLmdldFN0eWxlKCk7XG59XG5cbmZ1bmN0aW9uIGhhdmVFcXVhbEVudGl0eShjaGFyQSwgY2hhckIpIHtcbiAgcmV0dXJuIGNoYXJBLmdldEVudGl0eSgpID09PSBjaGFyQi5nZXRFbnRpdHkoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb250ZW50QmxvY2s7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBtYXJrIHN0cmluZyBsaXRlcmFscyByZXByZXNlbnRpbmcgQ1NTIGNsYXNzIG5hbWVzXG4gKiBzbyB0aGF0IHRoZXkgY2FuIGJlIHRyYW5zZm9ybWVkIHN0YXRpY2FsbHkuIFRoaXMgYWxsb3dzIGZvciBtb2R1bGFyaXphdGlvblxuICogYW5kIG1pbmlmaWNhdGlvbiBvZiBDU1MgY2xhc3MgbmFtZXMuXG4gKlxuICogSW4gc3RhdGljX3Vwc3RyZWFtLCB0aGlzIGZ1bmN0aW9uIGlzIGFjdHVhbGx5IGltcGxlbWVudGVkLCBidXQgaXQgc2hvdWxkXG4gKiBldmVudHVhbGx5IGJlIHJlcGxhY2VkIHdpdGggc29tZXRoaW5nIG1vcmUgZGVzY3JpcHRpdmUsIGFuZCB0aGUgdHJhbnNmb3JtXG4gKiB0aGF0IGlzIHVzZWQgaW4gdGhlIG1haW4gc3RhY2sgc2hvdWxkIGJlIHBvcnRlZCBmb3IgdXNlIGVsc2V3aGVyZS5cbiAqXG4gKiBAcGFyYW0gc3RyaW5nfG9iamVjdCBjbGFzc05hbWUgdG8gbW9kdWxhcml6ZSwgb3IgYW4gb2JqZWN0IG9mIGtleS92YWx1ZXMuXG4gKiAgICAgICAgICAgICAgICAgICAgICBJbiB0aGUgb2JqZWN0IGNhc2UsIHRoZSB2YWx1ZXMgYXJlIGNvbmRpdGlvbnMgdGhhdFxuICogICAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5lIGlmIHRoZSBjbGFzc05hbWUga2V5cyBzaG91bGQgYmUgaW5jbHVkZWQuXG4gKiBAcGFyYW0gW3N0cmluZyAuLi5dICBWYXJpYWJsZSBsaXN0IG9mIGNsYXNzTmFtZXMgaW4gdGhlIHN0cmluZyBjYXNlLlxuICogQHJldHVybiBzdHJpbmcgICAgICAgUmVuZGVyYWJsZSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzTmFtZS5cbiAqL1xuZnVuY3Rpb24gY3goY2xhc3NOYW1lcykge1xuICBpZiAodHlwZW9mIGNsYXNzTmFtZXMgPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoY2xhc3NOYW1lcykuZmlsdGVyKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBjbGFzc05hbWVzW2NsYXNzTmFtZV07XG4gICAgfSkubWFwKHJlcGxhY2UpLmpvaW4oJyAnKTtcbiAgfVxuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGFyZ3VtZW50cywgcmVwbGFjZSkuam9pbignICcpO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1xcLy9nLCAnLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGN4OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU2VsZWN0aW9uU3RhdGVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbnZhciBSZWNvcmQgPSBJbW11dGFibGUuUmVjb3JkO1xuXG5cbnZhciBkZWZhdWx0UmVjb3JkID0ge1xuICBhbmNob3JLZXk6ICcnLFxuICBhbmNob3JPZmZzZXQ6IDAsXG4gIGZvY3VzS2V5OiAnJyxcbiAgZm9jdXNPZmZzZXQ6IDAsXG4gIGlzQmFja3dhcmQ6IGZhbHNlLFxuICBoYXNGb2N1czogZmFsc2Vcbn07XG5cbnZhciBTZWxlY3Rpb25TdGF0ZVJlY29yZCA9IFJlY29yZChkZWZhdWx0UmVjb3JkKTtcblxudmFyIFNlbGVjdGlvblN0YXRlID0gZnVuY3Rpb24gKF9TZWxlY3Rpb25TdGF0ZVJlY29yZCkge1xuICBfaW5oZXJpdHMoU2VsZWN0aW9uU3RhdGUsIF9TZWxlY3Rpb25TdGF0ZVJlY29yZCk7XG5cbiAgZnVuY3Rpb24gU2VsZWN0aW9uU3RhdGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlbGVjdGlvblN0YXRlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfU2VsZWN0aW9uU3RhdGVSZWNvcmQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBTZWxlY3Rpb25TdGF0ZS5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24gc2VyaWFsaXplKCkge1xuICAgIHJldHVybiAnQW5jaG9yOiAnICsgdGhpcy5nZXRBbmNob3JLZXkoKSArICc6JyArIHRoaXMuZ2V0QW5jaG9yT2Zmc2V0KCkgKyAnLCAnICsgJ0ZvY3VzOiAnICsgdGhpcy5nZXRGb2N1c0tleSgpICsgJzonICsgdGhpcy5nZXRGb2N1c09mZnNldCgpICsgJywgJyArICdJcyBCYWNrd2FyZDogJyArIFN0cmluZyh0aGlzLmdldElzQmFja3dhcmQoKSkgKyAnLCAnICsgJ0hhcyBGb2N1czogJyArIFN0cmluZyh0aGlzLmdldEhhc0ZvY3VzKCkpO1xuICB9O1xuXG4gIFNlbGVjdGlvblN0YXRlLnByb3RvdHlwZS5nZXRBbmNob3JLZXkgPSBmdW5jdGlvbiBnZXRBbmNob3JLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdhbmNob3JLZXknKTtcbiAgfTtcblxuICBTZWxlY3Rpb25TdGF0ZS5wcm90b3R5cGUuZ2V0QW5jaG9yT2Zmc2V0ID0gZnVuY3Rpb24gZ2V0QW5jaG9yT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLmdldCgnYW5jaG9yT2Zmc2V0Jyk7XG4gIH07XG5cbiAgU2VsZWN0aW9uU3RhdGUucHJvdG90eXBlLmdldEZvY3VzS2V5ID0gZnVuY3Rpb24gZ2V0Rm9jdXNLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdmb2N1c0tleScpO1xuICB9O1xuXG4gIFNlbGVjdGlvblN0YXRlLnByb3RvdHlwZS5nZXRGb2N1c09mZnNldCA9IGZ1bmN0aW9uIGdldEZvY3VzT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLmdldCgnZm9jdXNPZmZzZXQnKTtcbiAgfTtcblxuICBTZWxlY3Rpb25TdGF0ZS5wcm90b3R5cGUuZ2V0SXNCYWNrd2FyZCA9IGZ1bmN0aW9uIGdldElzQmFja3dhcmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdpc0JhY2t3YXJkJyk7XG4gIH07XG5cbiAgU2VsZWN0aW9uU3RhdGUucHJvdG90eXBlLmdldEhhc0ZvY3VzID0gZnVuY3Rpb24gZ2V0SGFzRm9jdXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdoYXNGb2N1cycpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGUgc3BlY2lmaWVkIHJhbmdlIG92ZXJsYXBzIHdpdGggYW4gZWRnZSBvZiB0aGVcbiAgICogU2VsZWN0aW9uU3RhdGUuXG4gICAqL1xuXG5cbiAgU2VsZWN0aW9uU3RhdGUucHJvdG90eXBlLmhhc0VkZ2VXaXRoaW4gPSBmdW5jdGlvbiBoYXNFZGdlV2l0aGluKGJsb2NrS2V5LCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIGFuY2hvcktleSA9IHRoaXMuZ2V0QW5jaG9yS2V5KCk7XG4gICAgdmFyIGZvY3VzS2V5ID0gdGhpcy5nZXRGb2N1c0tleSgpO1xuXG4gICAgaWYgKGFuY2hvcktleSA9PT0gZm9jdXNLZXkgJiYgYW5jaG9yS2V5ID09PSBibG9ja0tleSkge1xuICAgICAgdmFyIHNlbGVjdGlvblN0YXJ0ID0gdGhpcy5nZXRTdGFydE9mZnNldCgpO1xuICAgICAgdmFyIHNlbGVjdGlvbkVuZCA9IHRoaXMuZ2V0RW5kT2Zmc2V0KCk7XG4gICAgICByZXR1cm4gc3RhcnQgPD0gc2VsZWN0aW9uRW5kICYmIHNlbGVjdGlvblN0YXJ0IDw9IGVuZDtcbiAgICB9XG5cbiAgICBpZiAoYmxvY2tLZXkgIT09IGFuY2hvcktleSAmJiBibG9ja0tleSAhPT0gZm9jdXNLZXkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0VG9DaGVjayA9IGJsb2NrS2V5ID09PSBhbmNob3JLZXkgPyB0aGlzLmdldEFuY2hvck9mZnNldCgpIDogdGhpcy5nZXRGb2N1c09mZnNldCgpO1xuXG4gICAgcmV0dXJuIHN0YXJ0IDw9IG9mZnNldFRvQ2hlY2sgJiYgZW5kID49IG9mZnNldFRvQ2hlY2s7XG4gIH07XG5cbiAgU2VsZWN0aW9uU3RhdGUucHJvdG90eXBlLmlzQ29sbGFwc2VkID0gZnVuY3Rpb24gaXNDb2xsYXBzZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QW5jaG9yS2V5KCkgPT09IHRoaXMuZ2V0Rm9jdXNLZXkoKSAmJiB0aGlzLmdldEFuY2hvck9mZnNldCgpID09PSB0aGlzLmdldEZvY3VzT2Zmc2V0KCk7XG4gIH07XG5cbiAgU2VsZWN0aW9uU3RhdGUucHJvdG90eXBlLmdldFN0YXJ0S2V5ID0gZnVuY3Rpb24gZ2V0U3RhcnRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SXNCYWNrd2FyZCgpID8gdGhpcy5nZXRGb2N1c0tleSgpIDogdGhpcy5nZXRBbmNob3JLZXkoKTtcbiAgfTtcblxuICBTZWxlY3Rpb25TdGF0ZS5wcm90b3R5cGUuZ2V0U3RhcnRPZmZzZXQgPSBmdW5jdGlvbiBnZXRTdGFydE9mZnNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJc0JhY2t3YXJkKCkgPyB0aGlzLmdldEZvY3VzT2Zmc2V0KCkgOiB0aGlzLmdldEFuY2hvck9mZnNldCgpO1xuICB9O1xuXG4gIFNlbGVjdGlvblN0YXRlLnByb3RvdHlwZS5nZXRFbmRLZXkgPSBmdW5jdGlvbiBnZXRFbmRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SXNCYWNrd2FyZCgpID8gdGhpcy5nZXRBbmNob3JLZXkoKSA6IHRoaXMuZ2V0Rm9jdXNLZXkoKTtcbiAgfTtcblxuICBTZWxlY3Rpb25TdGF0ZS5wcm90b3R5cGUuZ2V0RW5kT2Zmc2V0ID0gZnVuY3Rpb24gZ2V0RW5kT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLmdldElzQmFja3dhcmQoKSA/IHRoaXMuZ2V0QW5jaG9yT2Zmc2V0KCkgOiB0aGlzLmdldEZvY3VzT2Zmc2V0KCk7XG4gIH07XG5cbiAgU2VsZWN0aW9uU3RhdGUuY3JlYXRlRW1wdHkgPSBmdW5jdGlvbiBjcmVhdGVFbXB0eShrZXkpIHtcbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvblN0YXRlKHtcbiAgICAgIGFuY2hvcktleToga2V5LFxuICAgICAgYW5jaG9yT2Zmc2V0OiAwLFxuICAgICAgZm9jdXNLZXk6IGtleSxcbiAgICAgIGZvY3VzT2Zmc2V0OiAwLFxuICAgICAgaXNCYWNrd2FyZDogZmFsc2UsXG4gICAgICBoYXNGb2N1czogZmFsc2VcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU2VsZWN0aW9uU3RhdGU7XG59KFNlbGVjdGlvblN0YXRlUmVjb3JkKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3Rpb25TdGF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBdG9taWNCbG9ja1V0aWxzID0gcmVxdWlyZSgnLi9BdG9taWNCbG9ja1V0aWxzJyk7XG52YXIgQmxvY2tNYXBCdWlsZGVyID0gcmVxdWlyZSgnLi9CbG9ja01hcEJ1aWxkZXInKTtcbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyTWV0YWRhdGEnKTtcbnZhciBDb21wb3NpdGVEcmFmdERlY29yYXRvciA9IHJlcXVpcmUoJy4vQ29tcG9zaXRlRHJhZnREZWNvcmF0b3InKTtcbnZhciBDb250ZW50QmxvY2sgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9jaycpO1xudmFyIENvbnRlbnRTdGF0ZSA9IHJlcXVpcmUoJy4vQ29udGVudFN0YXRlJyk7XG52YXIgRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXAgPSByZXF1aXJlKCcuL0RlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwJyk7XG52YXIgRGVmYXVsdERyYWZ0SW5saW5lU3R5bGUgPSByZXF1aXJlKCcuL0RlZmF1bHREcmFmdElubGluZVN0eWxlJyk7XG52YXIgRHJhZnRFZGl0b3IgPSByZXF1aXJlKCcuL0RyYWZ0RWRpdG9yLnJlYWN0Jyk7XG52YXIgRHJhZnRFZGl0b3JCbG9jayA9IHJlcXVpcmUoJy4vRHJhZnRFZGl0b3JCbG9jay5yZWFjdCcpO1xudmFyIERyYWZ0RW50aXR5ID0gcmVxdWlyZSgnLi9EcmFmdEVudGl0eScpO1xudmFyIERyYWZ0TW9kaWZpZXIgPSByZXF1aXJlKCcuL0RyYWZ0TW9kaWZpZXInKTtcbnZhciBEcmFmdEVudGl0eUluc3RhbmNlID0gcmVxdWlyZSgnLi9EcmFmdEVudGl0eUluc3RhbmNlJyk7XG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG52YXIgS2V5QmluZGluZ1V0aWwgPSByZXF1aXJlKCcuL0tleUJpbmRpbmdVdGlsJyk7XG52YXIgUmljaFRleHRFZGl0b3JVdGlsID0gcmVxdWlyZSgnLi9SaWNoVGV4dEVkaXRvclV0aWwnKTtcbnZhciBTZWxlY3Rpb25TdGF0ZSA9IHJlcXVpcmUoJy4vU2VsZWN0aW9uU3RhdGUnKTtcblxudmFyIGNvbnZlcnRGcm9tRHJhZnRTdGF0ZVRvUmF3ID0gcmVxdWlyZSgnLi9jb252ZXJ0RnJvbURyYWZ0U3RhdGVUb1JhdycpO1xudmFyIGNvbnZlcnRGcm9tSFRNTFRvQ29udGVudEJsb2NrcyA9IHJlcXVpcmUoJy4vY29udmVydEZyb21IVE1MVG9Db250ZW50QmxvY2tzJyk7XG52YXIgY29udmVydEZyb21SYXdUb0RyYWZ0U3RhdGUgPSByZXF1aXJlKCcuL2NvbnZlcnRGcm9tUmF3VG9EcmFmdFN0YXRlJyk7XG52YXIgZ2VuZXJhdGVSYW5kb21LZXkgPSByZXF1aXJlKCcuL2dlbmVyYXRlUmFuZG9tS2V5Jyk7XG52YXIgZ2V0RGVmYXVsdEtleUJpbmRpbmcgPSByZXF1aXJlKCcuL2dldERlZmF1bHRLZXlCaW5kaW5nJyk7XG52YXIgZ2V0VmlzaWJsZVNlbGVjdGlvblJlY3QgPSByZXF1aXJlKCcuL2dldFZpc2libGVTZWxlY3Rpb25SZWN0Jyk7XG5cbnZhciBEcmFmdFB1YmxpYyA9IHtcbiAgRWRpdG9yOiBEcmFmdEVkaXRvcixcbiAgRWRpdG9yQmxvY2s6IERyYWZ0RWRpdG9yQmxvY2ssXG4gIEVkaXRvclN0YXRlOiBFZGl0b3JTdGF0ZSxcblxuICBDb21wb3NpdGVEZWNvcmF0b3I6IENvbXBvc2l0ZURyYWZ0RGVjb3JhdG9yLFxuICBFbnRpdHk6IERyYWZ0RW50aXR5LFxuICBFbnRpdHlJbnN0YW5jZTogRHJhZnRFbnRpdHlJbnN0YW5jZSxcblxuICBCbG9ja01hcEJ1aWxkZXI6IEJsb2NrTWFwQnVpbGRlcixcbiAgQ2hhcmFjdGVyTWV0YWRhdGE6IENoYXJhY3Rlck1ldGFkYXRhLFxuICBDb250ZW50QmxvY2s6IENvbnRlbnRCbG9jayxcbiAgQ29udGVudFN0YXRlOiBDb250ZW50U3RhdGUsXG4gIFNlbGVjdGlvblN0YXRlOiBTZWxlY3Rpb25TdGF0ZSxcblxuICBBdG9taWNCbG9ja1V0aWxzOiBBdG9taWNCbG9ja1V0aWxzLFxuICBLZXlCaW5kaW5nVXRpbDogS2V5QmluZGluZ1V0aWwsXG4gIE1vZGlmaWVyOiBEcmFmdE1vZGlmaWVyLFxuICBSaWNoVXRpbHM6IFJpY2hUZXh0RWRpdG9yVXRpbCxcblxuICBEZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcDogRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXAsXG4gIERlZmF1bHREcmFmdElubGluZVN0eWxlOiBEZWZhdWx0RHJhZnRJbmxpbmVTdHlsZSxcblxuICBjb252ZXJ0RnJvbUhUTUw6IGNvbnZlcnRGcm9tSFRNTFRvQ29udGVudEJsb2NrcyxcbiAgY29udmVydEZyb21SYXc6IGNvbnZlcnRGcm9tUmF3VG9EcmFmdFN0YXRlLFxuICBjb252ZXJ0VG9SYXc6IGNvbnZlcnRGcm9tRHJhZnRTdGF0ZVRvUmF3LFxuICBnZW5LZXk6IGdlbmVyYXRlUmFuZG9tS2V5LFxuICBnZXREZWZhdWx0S2V5QmluZGluZzogZ2V0RGVmYXVsdEtleUJpbmRpbmcsXG4gIGdldFZpc2libGVTZWxlY3Rpb25SZWN0OiBnZXRWaXNpYmxlU2VsZWN0aW9uUmVjdFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdFB1YmxpYzsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHJlbW92ZVRleHRXaXRoU3RyYXRlZ3lcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0TW9kaWZpZXIgPSByZXF1aXJlKCcuL0RyYWZ0TW9kaWZpZXInKTtcblxuLyoqXG4gKiBGb3IgYSBjb2xsYXBzZWQgc2VsZWN0aW9uIHN0YXRlLCByZW1vdmUgdGV4dCBiYXNlZCBvbiB0aGUgc3BlY2lmaWVkIHN0cmF0ZWd5LlxuICogSWYgdGhlIHNlbGVjdGlvbiBzdGF0ZSBpcyBub3QgY29sbGFwc2VkLCByZW1vdmUgdGhlIGVudGlyZSBzZWxlY3RlZCByYW5nZS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlVGV4dFdpdGhTdHJhdGVneShlZGl0b3JTdGF0ZSwgc3RyYXRlZ3ksIGRpcmVjdGlvbikge1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgdmFyIHRhcmdldCA9IHNlbGVjdGlvbjtcbiAgaWYgKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpKSB7XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICBpZiAoZWRpdG9yU3RhdGUuaXNTZWxlY3Rpb25BdEVuZE9mQ29udGVudCgpKSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWRpdG9yU3RhdGUuaXNTZWxlY3Rpb25BdFN0YXJ0T2ZDb250ZW50KCkpIHtcbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cblxuICAgIHRhcmdldCA9IHN0cmF0ZWd5KGVkaXRvclN0YXRlKTtcbiAgICBpZiAodGFyZ2V0ID09PSBzZWxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gRHJhZnRNb2RpZmllci5yZW1vdmVSYW5nZShjb250ZW50LCB0YXJnZXQsIGRpcmVjdGlvbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVtb3ZlVGV4dFdpdGhTdHJhdGVneTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzRXZlbnRIYW5kbGVkXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXRpbGl0eSBtZXRob2QgZm9yIGRldGVybWluaW5nIHdoZXRoZXIgb3Igbm90IHRoZSB2YWx1ZSByZXR1cm5lZFxuICogZnJvbSBhIGhhbmRsZXIgaW5kaWNhdGVzIHRoYXQgaXQgd2FzIGhhbmRsZWQuXG4gKi9cbmZ1bmN0aW9uIGlzRXZlbnRIYW5kbGVkKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gJ2hhbmRsZWQnIHx8IHZhbHVlID09PSB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRIYW5kbGVkOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZmluZFJhbmdlc0ltbXV0YWJsZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNlYXJjaCB0aHJvdWdoIGFuIGFycmF5IHRvIGZpbmQgY29udGlndW91cyBzdHJldGNoZXMgb2YgZWxlbWVudHMgdGhhdFxuICogbWF0Y2ggYSBzcGVjaWZpZWQgZmlsdGVyIGZ1bmN0aW9uLlxuICpcbiAqIFdoZW4gcmFuZ2VzIGFyZSBmb3VuZCwgZXhlY3V0ZSBhIHNwZWNpZmllZCBgZm91bmRgIGZ1bmN0aW9uIHRvIHN1cHBseVxuICogdGhlIHZhbHVlcyB0byB0aGUgY2FsbGVyLlxuICovXG5mdW5jdGlvbiBmaW5kUmFuZ2VzSW1tdXRhYmxlKGhheXN0YWNrLCBhcmVFcXVhbEZuLCBmaWx0ZXJGbiwgZm91bmRGbikge1xuICBpZiAoIWhheXN0YWNrLnNpemUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY3Vyc29yID0gMDtcblxuICBoYXlzdGFjay5yZWR1Y2UoZnVuY3Rpb24gKHZhbHVlLCBuZXh0VmFsdWUsIG5leHRJbmRleCkge1xuICAgIGlmICghYXJlRXF1YWxGbih2YWx1ZSwgbmV4dFZhbHVlKSkge1xuICAgICAgaWYgKGZpbHRlckZuKHZhbHVlKSkge1xuICAgICAgICBmb3VuZEZuKGN1cnNvciwgbmV4dEluZGV4KTtcbiAgICAgIH1cbiAgICAgIGN1cnNvciA9IG5leHRJbmRleDtcbiAgICB9XG4gICAgcmV0dXJuIG5leHRWYWx1ZTtcbiAgfSk7XG5cbiAgZmlsdGVyRm4oaGF5c3RhY2subGFzdCgpKSAmJiBmb3VuZEZuKGN1cnNvciwgaGF5c3RhY2suY291bnQoKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZFJhbmdlc0ltbXV0YWJsZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEJsb2NrTWFwQnVpbGRlclxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbnZhciBPcmRlcmVkTWFwID0gSW1tdXRhYmxlLk9yZGVyZWRNYXA7XG5cblxudmFyIEJsb2NrTWFwQnVpbGRlciA9IHtcbiAgY3JlYXRlRnJvbUFycmF5OiBmdW5jdGlvbiBjcmVhdGVGcm9tQXJyYXkoYmxvY2tzKSB7XG4gICAgcmV0dXJuIE9yZGVyZWRNYXAoYmxvY2tzLm1hcChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBbYmxvY2suZ2V0S2V5KCksIGJsb2NrXTtcbiAgICB9KSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQmxvY2tNYXBCdWlsZGVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRHJhZnRPZmZzZXRLZXlcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEtFWV9ERUxJTUlURVIgPSAnLSc7XG5cbnZhciBEcmFmdE9mZnNldEtleSA9IHtcbiAgZW5jb2RlOiBmdW5jdGlvbiBlbmNvZGUoYmxvY2tLZXksIGRlY29yYXRvcktleSwgbGVhZktleSkge1xuICAgIHJldHVybiBibG9ja0tleSArIEtFWV9ERUxJTUlURVIgKyBkZWNvcmF0b3JLZXkgKyBLRVlfREVMSU1JVEVSICsgbGVhZktleTtcbiAgfSxcblxuICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZShvZmZzZXRLZXkpIHtcbiAgICB2YXIgX29mZnNldEtleSRzcGxpdCA9IG9mZnNldEtleS5zcGxpdChLRVlfREVMSU1JVEVSKSxcbiAgICAgICAgYmxvY2tLZXkgPSBfb2Zmc2V0S2V5JHNwbGl0WzBdLFxuICAgICAgICBkZWNvcmF0b3JLZXkgPSBfb2Zmc2V0S2V5JHNwbGl0WzFdLFxuICAgICAgICBsZWFmS2V5ID0gX29mZnNldEtleSRzcGxpdFsyXTtcblxuICAgIHJldHVybiB7XG4gICAgICBibG9ja0tleTogYmxvY2tLZXksXG4gICAgICBkZWNvcmF0b3JLZXk6IHBhcnNlSW50KGRlY29yYXRvcktleSwgMTApLFxuICAgICAgbGVhZktleTogcGFyc2VJbnQobGVhZktleSwgMTApXG4gICAgfTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdE9mZnNldEtleTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgX2V4dGVuZHMgPSBfYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0RW50aXR5XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG52YXIgRHJhZnRFbnRpdHlJbnN0YW5jZSA9IHJlcXVpcmUoJy4vRHJhZnRFbnRpdHlJbnN0YW5jZScpO1xudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBNYXAgPSBJbW11dGFibGUuTWFwO1xuXG5cbnZhciBpbnN0YW5jZXMgPSBNYXAoKTtcbnZhciBpbnN0YW5jZUtleSA9IDA7XG5cbi8qKlxuICogVGVtcG9yYXJ5IHV0aWxpdHkgZm9yIGdlbmVyYXRpbmcgdGhlIHdhcm5pbmdzXG4gKi9cbmZ1bmN0aW9uIGxvZ1dhcm5pbmcob2xkTWV0aG9kQ2FsbCwgbmV3TWV0aG9kQ2FsbCkge1xuICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6ICcgKyBvbGRNZXRob2RDYWxsICsgJyB3aWxsIGJlIGRlcHJlY2F0ZWQgc29vbiFcXG5QbGVhc2UgdXNlIFwiJyArIG5ld01ldGhvZENhbGwgKyAnXCIgaW5zdGVhZC4nKTtcbn1cblxuLyoqXG4gKiBBIFwiZG9jdW1lbnQgZW50aXR5XCIgaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgbWV0YWRhdGEgYXNzb2NpYXRlZCB3aXRoIGFcbiAqIHBpZWNlIG9mIHRleHQgaW4gYSBDb250ZW50QmxvY2suXG4gKlxuICogRm9yIGV4YW1wbGUsIGEgYGxpbmtgIGVudGl0eSBtaWdodCBpbmNsdWRlIGEgYHVyaWAgcHJvcGVydHkuIFdoZW4gYVxuICogQ29udGVudEJsb2NrIGlzIHJlbmRlcmVkIGluIHRoZSBicm93c2VyLCB0ZXh0IHRoYXQgcmVmZXJzIHRvIHRoYXQgbGlua1xuICogZW50aXR5IG1heSBiZSByZW5kZXJlZCBhcyBhbiBhbmNob3IsIHdpdGggdGhlIGB1cmlgIGFzIHRoZSBocmVmIHZhbHVlLlxuICpcbiAqIEluIGEgQ29udGVudEJsb2NrLCBldmVyeSBwb3NpdGlvbiBpbiB0aGUgdGV4dCBtYXkgY29ycmVzcG9uZCB0byB6ZXJvXG4gKiBvciBvbmUgZW50aXRpZXMuIFRoaXMgY29ycmVzcG9uZGVuY2UgaXMgdHJhY2tlZCB1c2luZyBhIGtleSBzdHJpbmcsXG4gKiBnZW5lcmF0ZWQgdmlhIERyYWZ0RW50aXR5LmNyZWF0ZSgpIGFuZCB1c2VkIHRvIG9idGFpbiBlbnRpdHkgbWV0YWRhdGFcbiAqIHZpYSBEcmFmdEVudGl0eS5nZXQoKS5cbiAqL1xudmFyIERyYWZ0RW50aXR5ID0ge1xuICAvKipcbiAgICogV0FSTklORzogVGhpcyBtZXRob2Qgd2lsbCBiZSBkZXByZWNhdGVkIHNvb24hXG4gICAqIFBsZWFzZSB1c2UgJ2NvbnRlbnRTdGF0ZS5nZXRMYXN0Q3JlYXRlZEVudGl0eUtleScgaW5zdGVhZC5cbiAgICogLS0tXG4gICAqIEdldCB0aGUgcmFuZG9tIGtleSBzdHJpbmcgZnJvbSB3aGF0ZXZlciBlbnRpdHkgd2FzIGxhc3QgY3JlYXRlZC5cbiAgICogV2UgbmVlZCB0aGlzIHRvIHN1cHBvcnQgdGhlIG5ldyBBUEksIGFzIHBhcnQgb2YgdHJhbnNpdGlvbmluZyB0byBwdXQgRW50aXR5XG4gICAqIHN0b3JhZ2UgaW4gY29udGVudFN0YXRlLlxuICAgKi9cbiAgZ2V0TGFzdENyZWF0ZWRFbnRpdHlLZXk6IGZ1bmN0aW9uIGdldExhc3RDcmVhdGVkRW50aXR5S2V5KCkge1xuICAgIGxvZ1dhcm5pbmcoJ0RyYWZ0RW50aXR5LmdldExhc3RDcmVhdGVkRW50aXR5S2V5JywgJ2NvbnRlbnRTdGF0ZS5nZXRMYXN0Q3JlYXRlZEVudGl0eUtleScpO1xuICAgIHJldHVybiBEcmFmdEVudGl0eS5fX2dldExhc3RDcmVhdGVkRW50aXR5S2V5KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdBUk5JTkc6IFRoaXMgbWV0aG9kIHdpbGwgYmUgZGVwcmVjYXRlZCBzb29uIVxuICAgKiBQbGVhc2UgdXNlICdjb250ZW50U3RhdGUuY3JlYXRlRW50aXR5JyBpbnN0ZWFkLlxuICAgKiAtLS1cbiAgICogQ3JlYXRlIGEgRHJhZnRFbnRpdHlJbnN0YW5jZSBhbmQgc3RvcmUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbC5cbiAgICpcbiAgICogQSByYW5kb20ga2V5IHN0cmluZyB3aWxsIGJlIGdlbmVyYXRlZCBhbmQgcmV0dXJuZWQuIFRoaXMga2V5IG1heVxuICAgKiBiZSB1c2VkIHRvIHRyYWNrIHRoZSBlbnRpdHkncyB1c2FnZSBpbiBhIENvbnRlbnRCbG9jaywgYW5kIGZvclxuICAgKiByZXRyaWV2aW5nIGRhdGEgYWJvdXQgdGhlIGVudGl0eSBhdCByZW5kZXIgdGltZS5cbiAgICovXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKHR5cGUsIG11dGFiaWxpdHksIGRhdGEpIHtcbiAgICBsb2dXYXJuaW5nKCdEcmFmdEVudGl0eS5jcmVhdGUnLCAnY29udGVudFN0YXRlLmNyZWF0ZUVudGl0eScpO1xuICAgIHJldHVybiBEcmFmdEVudGl0eS5fX2NyZWF0ZSh0eXBlLCBtdXRhYmlsaXR5LCBkYXRhKTtcbiAgfSxcblxuICAvKipcbiAgICogV0FSTklORzogVGhpcyBtZXRob2Qgd2lsbCBiZSBkZXByZWNhdGVkIHNvb24hXG4gICAqIFBsZWFzZSB1c2UgJ2NvbnRlbnRTdGF0ZS5hZGRFbnRpdHknIGluc3RlYWQuXG4gICAqIC0tLVxuICAgKiBBZGQgYW4gZXhpc3RpbmcgRHJhZnRFbnRpdHlJbnN0YW5jZSB0byB0aGUgRHJhZnRFbnRpdHkgbWFwLiBUaGlzIGlzXG4gICAqIHVzZWZ1bCB3aGVuIHJlc3RvcmluZyBpbnN0YW5jZXMgZnJvbSB0aGUgc2VydmVyLlxuICAgKi9cbiAgYWRkOiBmdW5jdGlvbiBhZGQoaW5zdGFuY2UpIHtcbiAgICBsb2dXYXJuaW5nKCdEcmFmdEVudGl0eS5hZGQnLCAnY29udGVudFN0YXRlLmFkZEVudGl0eScpO1xuICAgIHJldHVybiBEcmFmdEVudGl0eS5fX2FkZChpbnN0YW5jZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdBUk5JTkc6IFRoaXMgbWV0aG9kIHdpbGwgYmUgZGVwcmVjYXRlZCBzb29uIVxuICAgKiBQbGVhc2UgdXNlICdjb250ZW50U3RhdGUuZ2V0RW50aXR5JyBpbnN0ZWFkLlxuICAgKiAtLS1cbiAgICogUmV0cmlldmUgdGhlIGVudGl0eSBjb3JyZXNwb25kaW5nIHRvIHRoZSBzdXBwbGllZCBrZXkgc3RyaW5nLlxuICAgKi9cbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgbG9nV2FybmluZygnRHJhZnRFbnRpdHkuZ2V0JywgJ2NvbnRlbnRTdGF0ZS5nZXRFbnRpdHknKTtcbiAgICByZXR1cm4gRHJhZnRFbnRpdHkuX19nZXQoa2V5KTtcbiAgfSxcblxuICAvKipcbiAgICogV0FSTklORzogVGhpcyBtZXRob2Qgd2lsbCBiZSBkZXByZWNhdGVkIHNvb24hXG4gICAqIFBsZWFzZSB1c2UgJ2NvbnRlbnRTdGF0ZS5tZXJnZUVudGl0eURhdGEnIGluc3RlYWQuXG4gICAqIC0tLVxuICAgKiBFbnRpdHkgaW5zdGFuY2VzIGFyZSBpbW11dGFibGUuIElmIHlvdSBuZWVkIHRvIHVwZGF0ZSB0aGUgZGF0YSBmb3IgYW5cbiAgICogaW5zdGFuY2UsIHRoaXMgbWV0aG9kIHdpbGwgbWVyZ2UgeW91ciBkYXRhIHVwZGF0ZXMgYW5kIHJldHVybiBhIG5ld1xuICAgKiBpbnN0YW5jZS5cbiAgICovXG4gIG1lcmdlRGF0YTogZnVuY3Rpb24gbWVyZ2VEYXRhKGtleSwgdG9NZXJnZSkge1xuICAgIGxvZ1dhcm5pbmcoJ0RyYWZ0RW50aXR5Lm1lcmdlRGF0YScsICdjb250ZW50U3RhdGUubWVyZ2VFbnRpdHlEYXRhJyk7XG4gICAgcmV0dXJuIERyYWZ0RW50aXR5Ll9fbWVyZ2VEYXRhKGtleSwgdG9NZXJnZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdBUk5JTkc6IFRoaXMgbWV0aG9kIHdpbGwgYmUgZGVwcmVjYXRlZCBzb29uIVxuICAgKiBQbGVhc2UgdXNlICdjb250ZW50U3RhdGUucmVwbGFjZUVudGl0eURhdGEnIGluc3RlYWQuXG4gICAqIC0tLVxuICAgKiBDb21wbGV0ZWx5IHJlcGxhY2UgdGhlIGRhdGEgZm9yIGEgZ2l2ZW4gaW5zdGFuY2UuXG4gICAqL1xuICByZXBsYWNlRGF0YTogZnVuY3Rpb24gcmVwbGFjZURhdGEoa2V5LCBuZXdEYXRhKSB7XG4gICAgbG9nV2FybmluZygnRHJhZnRFbnRpdHkucmVwbGFjZURhdGEnLCAnY29udGVudFN0YXRlLnJlcGxhY2VFbnRpdHlEYXRhJyk7XG4gICAgcmV0dXJuIERyYWZ0RW50aXR5Ll9fcmVwbGFjZURhdGEoa2V5LCBuZXdEYXRhKTtcbiAgfSxcblxuICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKldBUk5JTkcqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgLy8gLS0tIHRoZSBhYm92ZSBwdWJsaWMgQVBJIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgbmV4dCB2ZXJzaW9uIG9mIERyYWZ0IVxuICAvLyBUaGUgbWV0aG9kcyBiZWxvdyB0aGlzIGxpbmUgYXJlIHByaXZhdGUgLSBkb24ndCBjYWxsIHRoZW0gZGlyZWN0bHkuXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcmFuZG9tIGtleSBzdHJpbmcgZnJvbSB3aGF0ZXZlciBlbnRpdHkgd2FzIGxhc3QgY3JlYXRlZC5cbiAgICogV2UgbmVlZCB0aGlzIHRvIHN1cHBvcnQgdGhlIG5ldyBBUEksIGFzIHBhcnQgb2YgdHJhbnNpdGlvbmluZyB0byBwdXQgRW50aXR5XG4gICAqIHN0b3JhZ2UgaW4gY29udGVudFN0YXRlLlxuICAgKi9cbiAgX19nZXRMYXN0Q3JlYXRlZEVudGl0eUtleTogZnVuY3Rpb24gX19nZXRMYXN0Q3JlYXRlZEVudGl0eUtleSgpIHtcbiAgICByZXR1cm4gJycgKyBpbnN0YW5jZUtleTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlIGEgRHJhZnRFbnRpdHlJbnN0YW5jZSBhbmQgc3RvcmUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbC5cbiAgICpcbiAgICogQSByYW5kb20ga2V5IHN0cmluZyB3aWxsIGJlIGdlbmVyYXRlZCBhbmQgcmV0dXJuZWQuIFRoaXMga2V5IG1heVxuICAgKiBiZSB1c2VkIHRvIHRyYWNrIHRoZSBlbnRpdHkncyB1c2FnZSBpbiBhIENvbnRlbnRCbG9jaywgYW5kIGZvclxuICAgKiByZXRyaWV2aW5nIGRhdGEgYWJvdXQgdGhlIGVudGl0eSBhdCByZW5kZXIgdGltZS5cbiAgICovXG4gIF9fY3JlYXRlOiBmdW5jdGlvbiBfX2NyZWF0ZSh0eXBlLCBtdXRhYmlsaXR5LCBkYXRhKSB7XG4gICAgcmV0dXJuIERyYWZ0RW50aXR5Ll9fYWRkKG5ldyBEcmFmdEVudGl0eUluc3RhbmNlKHsgdHlwZTogdHlwZSwgbXV0YWJpbGl0eTogbXV0YWJpbGl0eSwgZGF0YTogZGF0YSB8fCB7fSB9KSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhbiBleGlzdGluZyBEcmFmdEVudGl0eUluc3RhbmNlIHRvIHRoZSBEcmFmdEVudGl0eSBtYXAuIFRoaXMgaXNcbiAgICogdXNlZnVsIHdoZW4gcmVzdG9yaW5nIGluc3RhbmNlcyBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqL1xuICBfX2FkZDogZnVuY3Rpb24gX19hZGQoaW5zdGFuY2UpIHtcbiAgICB2YXIga2V5ID0gJycgKyArK2luc3RhbmNlS2V5O1xuICAgIGluc3RhbmNlcyA9IGluc3RhbmNlcy5zZXQoa2V5LCBpbnN0YW5jZSk7XG4gICAgcmV0dXJuIGtleTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIGVudGl0eSBjb3JyZXNwb25kaW5nIHRvIHRoZSBzdXBwbGllZCBrZXkgc3RyaW5nLlxuICAgKi9cbiAgX19nZXQ6IGZ1bmN0aW9uIF9fZ2V0KGtleSkge1xuICAgIHZhciBpbnN0YW5jZSA9IGluc3RhbmNlcy5nZXQoa2V5KTtcbiAgICAhISFpbnN0YW5jZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdVbmtub3duIERyYWZ0RW50aXR5IGtleTogJXMuJywga2V5KSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFbnRpdHkgaW5zdGFuY2VzIGFyZSBpbW11dGFibGUuIElmIHlvdSBuZWVkIHRvIHVwZGF0ZSB0aGUgZGF0YSBmb3IgYW5cbiAgICogaW5zdGFuY2UsIHRoaXMgbWV0aG9kIHdpbGwgbWVyZ2UgeW91ciBkYXRhIHVwZGF0ZXMgYW5kIHJldHVybiBhIG5ld1xuICAgKiBpbnN0YW5jZS5cbiAgICovXG4gIF9fbWVyZ2VEYXRhOiBmdW5jdGlvbiBfX21lcmdlRGF0YShrZXksIHRvTWVyZ2UpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBEcmFmdEVudGl0eS5fX2dldChrZXkpO1xuICAgIHZhciBuZXdEYXRhID0gX2V4dGVuZHMoe30sIGluc3RhbmNlLmdldERhdGEoKSwgdG9NZXJnZSk7XG4gICAgdmFyIG5ld0luc3RhbmNlID0gaW5zdGFuY2Uuc2V0KCdkYXRhJywgbmV3RGF0YSk7XG4gICAgaW5zdGFuY2VzID0gaW5zdGFuY2VzLnNldChrZXksIG5ld0luc3RhbmNlKTtcbiAgICByZXR1cm4gbmV3SW5zdGFuY2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXBsZXRlbHkgcmVwbGFjZSB0aGUgZGF0YSBmb3IgYSBnaXZlbiBpbnN0YW5jZS5cbiAgICovXG4gIF9fcmVwbGFjZURhdGE6IGZ1bmN0aW9uIF9fcmVwbGFjZURhdGEoa2V5LCBuZXdEYXRhKSB7XG4gICAgdmFyIGluc3RhbmNlID0gRHJhZnRFbnRpdHkuX19nZXQoa2V5KTtcbiAgICB2YXIgbmV3SW5zdGFuY2UgPSBpbnN0YW5jZS5zZXQoJ2RhdGEnLCBuZXdEYXRhKTtcbiAgICBpbnN0YW5jZXMgPSBpbnN0YW5jZXMuc2V0KGtleSwgbmV3SW5zdGFuY2UpO1xuICAgIHJldHVybiBuZXdJbnN0YW5jZTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVudGl0eTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldENvbnRlbnRTdGF0ZUZyYWdtZW50XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciByYW5kb21pemVCbG9ja01hcEtleXMgPSByZXF1aXJlKCcuL3JhbmRvbWl6ZUJsb2NrTWFwS2V5cycpO1xudmFyIHJlbW92ZUVudGl0aWVzQXRFZGdlcyA9IHJlcXVpcmUoJy4vcmVtb3ZlRW50aXRpZXNBdEVkZ2VzJyk7XG5cbnZhciBnZXRDb250ZW50U3RhdGVGcmFnbWVudCA9IGZ1bmN0aW9uIGdldENvbnRlbnRTdGF0ZUZyYWdtZW50KGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUpIHtcbiAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIGVuZEtleSA9IHNlbGVjdGlvblN0YXRlLmdldEVuZEtleSgpO1xuICB2YXIgZW5kT2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kT2Zmc2V0KCk7XG5cbiAgLy8gRWRnZSBlbnRpdGllcyBzaG91bGQgYmUgc3RyaXBwZWQgdG8gZW5zdXJlIHRoYXQgd2UgZG9uJ3QgcHJlc2VydmVcbiAgLy8gaW52YWxpZCBwYXJ0aWFsIGVudGl0aWVzIHdoZW4gdGhlIGZyYWdtZW50IGlzIHJldXNlZC4gV2UgZG8sIGhvd2V2ZXIsXG4gIC8vIHByZXNlcnZlIGVudGl0aWVzIHRoYXQgYXJlIGVudGlyZWx5IHdpdGhpbiB0aGUgc2VsZWN0aW9uIHJhbmdlLlxuICB2YXIgY29udGVudFdpdGhvdXRFZGdlRW50aXRpZXMgPSByZW1vdmVFbnRpdGllc0F0RWRnZXMoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSk7XG5cbiAgdmFyIGJsb2NrTWFwID0gY29udGVudFdpdGhvdXRFZGdlRW50aXRpZXMuZ2V0QmxvY2tNYXAoKTtcbiAgdmFyIGJsb2NrS2V5cyA9IGJsb2NrTWFwLmtleVNlcSgpO1xuICB2YXIgc3RhcnRJbmRleCA9IGJsb2NrS2V5cy5pbmRleE9mKHN0YXJ0S2V5KTtcbiAgdmFyIGVuZEluZGV4ID0gYmxvY2tLZXlzLmluZGV4T2YoZW5kS2V5KSArIDE7XG5cbiAgcmV0dXJuIHJhbmRvbWl6ZUJsb2NrTWFwS2V5cyhibG9ja01hcC5zbGljZShzdGFydEluZGV4LCBlbmRJbmRleCkubWFwKGZ1bmN0aW9uIChibG9jaywgYmxvY2tLZXkpIHtcbiAgICB2YXIgdGV4dCA9IGJsb2NrLmdldFRleHQoKTtcbiAgICB2YXIgY2hhcnMgPSBibG9jay5nZXRDaGFyYWN0ZXJMaXN0KCk7XG5cbiAgICBpZiAoc3RhcnRLZXkgPT09IGVuZEtleSkge1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgdGV4dDogdGV4dC5zbGljZShzdGFydE9mZnNldCwgZW5kT2Zmc2V0KSxcbiAgICAgICAgY2hhcmFjdGVyTGlzdDogY2hhcnMuc2xpY2Uoc3RhcnRPZmZzZXQsIGVuZE9mZnNldClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChibG9ja0tleSA9PT0gc3RhcnRLZXkpIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIHRleHQ6IHRleHQuc2xpY2Uoc3RhcnRPZmZzZXQpLFxuICAgICAgICBjaGFyYWN0ZXJMaXN0OiBjaGFycy5zbGljZShzdGFydE9mZnNldClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChibG9ja0tleSA9PT0gZW5kS2V5KSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICB0ZXh0OiB0ZXh0LnNsaWNlKDAsIGVuZE9mZnNldCksXG4gICAgICAgIGNoYXJhY3Rlckxpc3Q6IGNoYXJzLnNsaWNlKDAsIGVuZE9mZnNldClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBibG9jaztcbiAgfSkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRDb250ZW50U3RhdGVGcmFnbWVudDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxudmFyIGlzVGV4dE5vZGUgPSByZXF1aXJlKCcuL2lzVGV4dE5vZGUnKTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmICgnY29udGFpbnMnIGluIG91dGVyTm9kZSkge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgYWxsIGBDb250ZW50QmxvY2tgIGluc3RhbmNlcyB3aXRoaW4gdHdvIGJsb2NrIGtleXNcbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGNvbnRlbnRTdGF0ZSBBIGRyYWZ0LmpzIGBDb250ZW50U3RhdGVgIGluc3RhbmNlXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGFuY2hvcktleSAgICBUaGUgYmxvY2sga2V5IHRvIHN0YXJ0IHNlYXJjaGluZyBmcm9tXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGZvY3VzS2V5ICAgICBUaGUgYmxvY2sga2V5IHVudGlsIHdoaWNoIHRvIHNlYXJjaFxuICpcbiAqIEByZXR1cm4ge2FycmF5fSBBbiBhcnJheSBjb250YWluaW5nIHRoZSBmb3VuZCBjb250ZW50IGJsb2Nrc1xuICovXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoY29udGVudFN0YXRlLCBhbmNob3JLZXksIGZvY3VzS2V5KSB7XG4gIHZhciBpc1NhbWVCbG9jayA9IGFuY2hvcktleSA9PT0gZm9jdXNLZXk7XG4gIHZhciBzdGFydGluZ0Jsb2NrID0gY29udGVudFN0YXRlLmdldEJsb2NrRm9yS2V5KGFuY2hvcktleSk7XG5cbiAgaWYgKCFzdGFydGluZ0Jsb2NrKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIHNlbGVjdGVkQmxvY2tzID0gW3N0YXJ0aW5nQmxvY2tdO1xuXG4gIGlmICghaXNTYW1lQmxvY2spIHtcbiAgICB2YXIgYmxvY2tLZXkgPSBhbmNob3JLZXk7XG5cbiAgICB3aGlsZSAoYmxvY2tLZXkgIT09IGZvY3VzS2V5KSB7XG4gICAgICB2YXIgbmV4dEJsb2NrID0gY29udGVudFN0YXRlLmdldEJsb2NrQWZ0ZXIoYmxvY2tLZXkpO1xuXG4gICAgICBpZiAoIW5leHRCbG9jaykge1xuICAgICAgICBzZWxlY3RlZEJsb2NrcyA9IFtdO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgc2VsZWN0ZWRCbG9ja3MucHVzaChuZXh0QmxvY2spO1xuICAgICAgYmxvY2tLZXkgPSBuZXh0QmxvY2suZ2V0S2V5KCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlbGVjdGVkQmxvY2tzO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc3RhdGVUb0hUTUwgPSByZXF1aXJlKCcuL3N0YXRlVG9IVE1MJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnc3RhdGVUb0hUTUwnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdGF0ZVRvSFRNTCkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBtb3ZlU2VsZWN0aW9uQmFja3dhcmRcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHaXZlbiBhIGNvbGxhcHNlZCBzZWxlY3Rpb24sIG1vdmUgdGhlIGZvY3VzIGBtYXhEaXN0YW5jZWAgYmFja3dhcmQgd2l0aGluXG4gKiB0aGUgc2VsZWN0ZWQgYmxvY2suIElmIHRoZSBzZWxlY3Rpb24gd2lsbCBnbyBiZXlvbmQgdGhlIHN0YXJ0IG9mIHRoZSBibG9jayxcbiAqIG1vdmUgZm9jdXMgdG8gdGhlIGVuZCBvZiB0aGUgcHJldmlvdXMgYmxvY2ssIGJ1dCBubyBmdXJ0aGVyLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbm90IFVuaWNvZGUtYXdhcmUsIHNvIHN1cnJvZ2F0ZSBwYWlycyB3aWxsIGJlIHRyZWF0ZWRcbiAqIGFzIGhhdmluZyBsZW5ndGggMi5cbiAqL1xuZnVuY3Rpb24gbW92ZVNlbGVjdGlvbkJhY2t3YXJkKGVkaXRvclN0YXRlLCBtYXhEaXN0YW5jZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgdmFyIGtleSA9IHNlbGVjdGlvbi5nZXRTdGFydEtleSgpO1xuICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCk7XG5cbiAgdmFyIGZvY3VzS2V5ID0ga2V5O1xuICB2YXIgZm9jdXNPZmZzZXQgPSAwO1xuXG4gIGlmIChtYXhEaXN0YW5jZSA+IG9mZnNldCkge1xuICAgIHZhciBrZXlCZWZvcmUgPSBjb250ZW50LmdldEtleUJlZm9yZShrZXkpO1xuICAgIGlmIChrZXlCZWZvcmUgPT0gbnVsbCkge1xuICAgICAgZm9jdXNLZXkgPSBrZXk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvY3VzS2V5ID0ga2V5QmVmb3JlO1xuICAgICAgdmFyIGJsb2NrQmVmb3JlID0gY29udGVudC5nZXRCbG9ja0ZvcktleShrZXlCZWZvcmUpO1xuICAgICAgZm9jdXNPZmZzZXQgPSBibG9ja0JlZm9yZS5nZXRUZXh0KCkubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb2N1c09mZnNldCA9IG9mZnNldCAtIG1heERpc3RhbmNlO1xuICB9XG5cbiAgcmV0dXJuIHNlbGVjdGlvbi5tZXJnZSh7XG4gICAgZm9jdXNLZXk6IGZvY3VzS2V5LFxuICAgIGZvY3VzT2Zmc2V0OiBmb2N1c09mZnNldCxcbiAgICBpc0JhY2t3YXJkOiB0cnVlXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vdmVTZWxlY3Rpb25CYWNrd2FyZDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEtleUJpbmRpbmdVdGlsXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVc2VyQWdlbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9Vc2VyQWdlbnQnKTtcblxudmFyIGlzT1NYID0gVXNlckFnZW50LmlzUGxhdGZvcm0oJ01hYyBPUyBYJyk7XG5cbnZhciBLZXlCaW5kaW5nVXRpbCA9IHtcbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgdGhlIGN0cmxLZXkgbW9kaWZpZXIgaXMgKm5vdCogYmVpbmcgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoXG4gICAqIHRoZSBhbHRLZXkgbW9kaWZpZXIuIElmIHRoZXkgYXJlIGNvbWJpbmVkLCB0aGUgcmVzdWx0IGlzIGFuIGBhbHRHcmFwaGBcbiAgICoga2V5IG1vZGlmaWVyLCB3aGljaCBzaG91bGQgbm90IGJlIGhhbmRsZWQgYnkgdGhpcyBzZXQgb2Yga2V5IGJpbmRpbmdzLlxuICAgKi9cbiAgaXNDdHJsS2V5Q29tbWFuZDogZnVuY3Rpb24gaXNDdHJsS2V5Q29tbWFuZChlKSB7XG4gICAgcmV0dXJuICEhZS5jdHJsS2V5ICYmICFlLmFsdEtleTtcbiAgfSxcblxuICBpc09wdGlvbktleUNvbW1hbmQ6IGZ1bmN0aW9uIGlzT3B0aW9uS2V5Q29tbWFuZChlKSB7XG4gICAgcmV0dXJuIGlzT1NYICYmIGUuYWx0S2V5O1xuICB9LFxuXG4gIGhhc0NvbW1hbmRNb2RpZmllcjogZnVuY3Rpb24gaGFzQ29tbWFuZE1vZGlmaWVyKGUpIHtcbiAgICByZXR1cm4gaXNPU1ggPyAhIWUubWV0YUtleSAmJiAhZS5hbHRLZXkgOiBLZXlCaW5kaW5nVXRpbC5pc0N0cmxLZXlDb21tYW5kKGUpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtleUJpbmRpbmdVdGlsOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZmluZEFuY2VzdG9yT2Zmc2V0S2V5XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlID0gcmVxdWlyZSgnLi9nZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlJyk7XG5cbi8qKlxuICogR2V0IHRoZSBrZXkgZnJvbSB0aGUgbm9kZSdzIG5lYXJlc3Qgb2Zmc2V0LWF3YXJlIGFuY2VzdG9yLlxuICovXG5mdW5jdGlvbiBmaW5kQW5jZXN0b3JPZmZzZXRLZXkobm9kZSkge1xuICB2YXIgc2VhcmNoTm9kZSA9IG5vZGU7XG4gIHdoaWxlIChzZWFyY2hOb2RlICYmIHNlYXJjaE5vZGUgIT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHZhciBrZXkgPSBnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlKHNlYXJjaE5vZGUpO1xuICAgIGlmIChrZXkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgc2VhcmNoTm9kZSA9IHNlYXJjaE5vZGUucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaW5kQW5jZXN0b3JPZmZzZXRLZXk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGdldERvY3VtZW50U2Nyb2xsRWxlbWVudCA9IHJlcXVpcmUoJy4vZ2V0RG9jdW1lbnRTY3JvbGxFbGVtZW50Jyk7XG52YXIgZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24gPSByZXF1aXJlKCcuL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBzdXBwbGllZCBlbGVtZW50IG9yIHdpbmRvdy5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlcyBhcmUgYm91bmRlZC4gVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBzY3JvbGwgcG9zaXRpb24gaXNcbiAqIG5lZ2F0aXZlIG9yIGV4Y2VlZHMgdGhlIGVsZW1lbnQgYm91bmRhcmllcyAod2hpY2ggaXMgcG9zc2libGUgdXNpbmcgaW5lcnRpYWxcbiAqIHNjcm9sbGluZyksIHlvdSB3aWxsIGdldCB6ZXJvIG9yIHRoZSBtYXhpbXVtIHNjcm9sbCBwb3NpdGlvbiwgcmVzcGVjdGl2ZWx5LlxuICpcbiAqIElmIHlvdSBuZWVkIHRoZSB1bmJvdW5kIHNjcm9sbCBwb3NpdGlvbiwgdXNlIGBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbmAuXG4gKlxuICogQHBhcmFtIHtET01XaW5kb3d8RE9NRWxlbWVudH0gc2Nyb2xsYWJsZVxuICogQHJldHVybiB7b2JqZWN0fSBNYXAgd2l0aCBgeGAgYW5kIGB5YCBrZXlzLlxuICovXG5mdW5jdGlvbiBnZXRTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlKSB7XG4gIHZhciBkb2N1bWVudFNjcm9sbEVsZW1lbnQgPSBnZXREb2N1bWVudFNjcm9sbEVsZW1lbnQoc2Nyb2xsYWJsZS5vd25lckRvY3VtZW50IHx8IHNjcm9sbGFibGUuZG9jdW1lbnQpO1xuICBpZiAoc2Nyb2xsYWJsZS5XaW5kb3cgJiYgc2Nyb2xsYWJsZSBpbnN0YW5jZW9mIHNjcm9sbGFibGUuV2luZG93KSB7XG4gICAgc2Nyb2xsYWJsZSA9IGRvY3VtZW50U2Nyb2xsRWxlbWVudDtcbiAgfVxuICB2YXIgc2Nyb2xsUG9zaXRpb24gPSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlKTtcblxuICB2YXIgdmlld3BvcnQgPSBzY3JvbGxhYmxlID09PSBkb2N1bWVudFNjcm9sbEVsZW1lbnQgPyBzY3JvbGxhYmxlLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogc2Nyb2xsYWJsZTtcblxuICB2YXIgeE1heCA9IHNjcm9sbGFibGUuc2Nyb2xsV2lkdGggLSB2aWV3cG9ydC5jbGllbnRXaWR0aDtcbiAgdmFyIHlNYXggPSBzY3JvbGxhYmxlLnNjcm9sbEhlaWdodCAtIHZpZXdwb3J0LmNsaWVudEhlaWdodDtcblxuICBzY3JvbGxQb3NpdGlvbi54ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oc2Nyb2xsUG9zaXRpb24ueCwgeE1heCkpO1xuICBzY3JvbGxQb3NpdGlvbi55ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oc2Nyb2xsUG9zaXRpb24ueSwgeU1heCkpO1xuXG4gIHJldHVybiBzY3JvbGxQb3NpdGlvbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTY3JvbGxQb3NpdGlvbjsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgZ2V0U3R5bGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vZ2V0U3R5bGVQcm9wZXJ0eScpO1xuXG4vKipcbiAqIEBwYXJhbSB7RE9NTm9kZX0gZWxlbWVudCBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBPdmVyZmxvdyBzdHlsZSBwcm9wZXJ0eSBuYW1lLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3VwcGxpZWQgbmRvZSBpcyBzY3JvbGxhYmxlLlxuICovXG5mdW5jdGlvbiBfaXNOb2RlU2Nyb2xsYWJsZShlbGVtZW50LCBuYW1lKSB7XG4gIHZhciBvdmVyZmxvdyA9IFN0eWxlLmdldChlbGVtZW50LCBuYW1lKTtcbiAgcmV0dXJuIG92ZXJmbG93ID09PSAnYXV0bycgfHwgb3ZlcmZsb3cgPT09ICdzY3JvbGwnO1xufVxuXG4vKipcbiAqIFV0aWxpdGllcyBmb3IgcXVlcnlpbmcgYW5kIG11dGF0aW5nIHN0eWxlIHByb3BlcnRpZXMuXG4gKi9cbnZhciBTdHlsZSA9IHtcbiAgLyoqXG4gICAqIEdldHMgdGhlIHN0eWxlIHByb3BlcnR5IGZvciB0aGUgc3VwcGxpZWQgbm9kZS4gVGhpcyB3aWxsIHJldHVybiBlaXRoZXIgdGhlXG4gICAqIGNvbXB1dGVkIHN0eWxlLCBpZiBhdmFpbGFibGUsIG9yIHRoZSBkZWNsYXJlZCBzdHlsZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01Ob2RlfSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFN0eWxlIHByb3BlcnR5IG5hbWUuXG4gICAqIEByZXR1cm4gez9zdHJpbmd9IFN0eWxlIHByb3BlcnR5IHZhbHVlLlxuICAgKi9cbiAgZ2V0OiBnZXRTdHlsZVByb3BlcnR5LFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBuZWFyZXN0IGFuY2VzdG9yIG9mIGEgbm9kZSB0aGF0IGlzIHNjcm9sbGFibGUuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgY2FuIGJlIGV4cGVuc2l2ZSBpZiB1c2VkIHJlcGVhdGVkbHkgb3Igb24gYSBub2RlIG5lc3RlZCBkZWVwbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7P0RPTU5vZGV9IG5vZGUgTm9kZSBmcm9tIHdoaWNoIHRvIHN0YXJ0IHNlYXJjaGluZy5cbiAgICogQHJldHVybiB7P0RPTVdpbmRvd3xET01FbGVtZW50fSBTY3JvbGwgcGFyZW50IG9mIHRoZSBzdXBwbGllZCBub2RlLlxuICAgKi9cbiAgZ2V0U2Nyb2xsUGFyZW50OiBmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZSkge1xuICAgIGlmICghbm9kZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBvd25lckRvY3VtZW50ID0gbm9kZS5vd25lckRvY3VtZW50O1xuICAgIHdoaWxlIChub2RlICYmIG5vZGUgIT09IG93bmVyRG9jdW1lbnQuYm9keSkge1xuICAgICAgaWYgKF9pc05vZGVTY3JvbGxhYmxlKG5vZGUsICdvdmVyZmxvdycpIHx8IF9pc05vZGVTY3JvbGxhYmxlKG5vZGUsICdvdmVyZmxvd1knKSB8fCBfaXNOb2RlU2Nyb2xsYWJsZShub2RlLCAnb3ZlcmZsb3dYJykpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgICByZXR1cm4gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCBvd25lckRvY3VtZW50LnBhcmVudFdpbmRvdztcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0eWxlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmV0dXJuIHRoZSBlbnRpdHkga2V5IHRoYXQgc2hvdWxkIGJlIHVzZWQgd2hlbiBpbnNlcnRpbmcgdGV4dCBmb3IgdGhlXG4gKiBzcGVjaWZpZWQgdGFyZ2V0IHNlbGVjdGlvbiwgb25seSBpZiB0aGUgZW50aXR5IGlzIGBNVVRBQkxFYC4gYElNTVVUQUJMRWBcbiAqIGFuZCBgU0VHTUVOVEVEYCBlbnRpdGllcyBzaG91bGQgbm90IGJlIHVzZWQgZm9yIGluc2VydGlvbiBiZWhhdmlvci5cbiAqL1xuZnVuY3Rpb24gZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uKGNvbnRlbnRTdGF0ZSwgdGFyZ2V0U2VsZWN0aW9uKSB7XG4gIHZhciBlbnRpdHlLZXk7XG5cbiAgaWYgKHRhcmdldFNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpKSB7XG4gICAgdmFyIGtleSA9IHRhcmdldFNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKTtcbiAgICB2YXIgb2Zmc2V0ID0gdGFyZ2V0U2VsZWN0aW9uLmdldEFuY2hvck9mZnNldCgpO1xuICAgIGlmIChvZmZzZXQgPiAwKSB7XG4gICAgICBlbnRpdHlLZXkgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tGb3JLZXkoa2V5KS5nZXRFbnRpdHlBdChvZmZzZXQgLSAxKTtcbiAgICAgIGlmIChlbnRpdHlLZXkgIT09IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja0ZvcktleShrZXkpLmdldEVudGl0eUF0KG9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmlsdGVyS2V5KGNvbnRlbnRTdGF0ZS5nZXRFbnRpdHlNYXAoKSwgZW50aXR5S2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgc3RhcnRLZXkgPSB0YXJnZXRTZWxlY3Rpb24uZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gdGFyZ2V0U2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCk7XG4gIHZhciBzdGFydEJsb2NrID0gY29udGVudFN0YXRlLmdldEJsb2NrRm9yS2V5KHN0YXJ0S2V5KTtcblxuICBlbnRpdHlLZXkgPSBzdGFydE9mZnNldCA9PT0gc3RhcnRCbG9jay5nZXRMZW5ndGgoKSA/IG51bGwgOiBzdGFydEJsb2NrLmdldEVudGl0eUF0KHN0YXJ0T2Zmc2V0KTtcblxuICByZXR1cm4gZmlsdGVyS2V5KGNvbnRlbnRTdGF0ZS5nZXRFbnRpdHlNYXAoKSwgZW50aXR5S2V5KTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciBhbiBlbnRpdHkga2V5IGNvcnJlc3BvbmRzIHRvIGEgYE1VVEFCTEVgIGVudGl0eS4gSWYgc28sXG4gKiByZXR1cm4gaXQuIElmIG5vdCwgcmV0dXJuIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGZpbHRlcktleShlbnRpdHlNYXAsIGVudGl0eUtleSkge1xuICBpZiAoZW50aXR5S2V5KSB7XG4gICAgdmFyIGVudGl0eSA9IGVudGl0eU1hcC5fX2dldChlbnRpdHlLZXkpO1xuICAgIHJldHVybiBlbnRpdHkuZ2V0TXV0YWJpbGl0eSgpID09PSAnTVVUQUJMRScgPyBlbnRpdHlLZXkgOiBudWxsO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEVudGl0eUtleUZvclNlbGVjdGlvbjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJBQ0tTUEFDRTogOCxcbiAgVEFCOiA5LFxuICBSRVRVUk46IDEzLFxuICBBTFQ6IDE4LFxuICBFU0M6IDI3LFxuICBTUEFDRTogMzIsXG4gIFBBR0VfVVA6IDMzLFxuICBQQUdFX0RPV046IDM0LFxuICBFTkQ6IDM1LFxuICBIT01FOiAzNixcbiAgTEVGVDogMzcsXG4gIFVQOiAzOCxcbiAgUklHSFQ6IDM5LFxuICBET1dOOiA0MCxcbiAgREVMRVRFOiA0NixcbiAgQ09NTUE6IDE4OCxcbiAgUEVSSU9EOiAxOTAsXG4gIEE6IDY1LFxuICBaOiA5MCxcbiAgWkVSTzogNDgsXG4gIE5VTVBBRF8wOiA5NixcbiAgTlVNUEFEXzk6IDEwNVxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpLFxuICAgIE1hcCA9IF9yZXF1aXJlLk1hcDtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIGN4ID0gcmVxdWlyZSgnZmJqcy9saWIvY3gnKTtcblxudmFyIFVMX1dSQVAgPSBSZWFjdC5jcmVhdGVFbGVtZW50KCd1bCcsIHsgY2xhc3NOYW1lOiBjeCgncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L3VsJykgfSk7XG52YXIgT0xfV1JBUCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ29sJywgeyBjbGFzc05hbWU6IGN4KCdwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvb2wnKSB9KTtcbnZhciBQUkVfV1JBUCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3ByZScsIHsgY2xhc3NOYW1lOiBjeCgncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L3ByZScpIH0pO1xuXG52YXIgRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXAgPSBNYXAoe1xuICAnaGVhZGVyLW9uZSc6IHtcbiAgICBlbGVtZW50OiAnaDEnXG4gIH0sXG4gICdoZWFkZXItdHdvJzoge1xuICAgIGVsZW1lbnQ6ICdoMidcbiAgfSxcbiAgJ2hlYWRlci10aHJlZSc6IHtcbiAgICBlbGVtZW50OiAnaDMnXG4gIH0sXG4gICdoZWFkZXItZm91cic6IHtcbiAgICBlbGVtZW50OiAnaDQnXG4gIH0sXG4gICdoZWFkZXItZml2ZSc6IHtcbiAgICBlbGVtZW50OiAnaDUnXG4gIH0sXG4gICdoZWFkZXItc2l4Jzoge1xuICAgIGVsZW1lbnQ6ICdoNidcbiAgfSxcbiAgJ3Vub3JkZXJlZC1saXN0LWl0ZW0nOiB7XG4gICAgZWxlbWVudDogJ2xpJyxcbiAgICB3cmFwcGVyOiBVTF9XUkFQXG4gIH0sXG4gICdvcmRlcmVkLWxpc3QtaXRlbSc6IHtcbiAgICBlbGVtZW50OiAnbGknLFxuICAgIHdyYXBwZXI6IE9MX1dSQVBcbiAgfSxcbiAgYmxvY2txdW90ZToge1xuICAgIGVsZW1lbnQ6ICdibG9ja3F1b3RlJ1xuICB9LFxuICBhdG9taWM6IHtcbiAgICBlbGVtZW50OiAnZmlndXJlJ1xuICB9LFxuICAnY29kZS1ibG9jayc6IHtcbiAgICBlbGVtZW50OiAncHJlJyxcbiAgICB3cmFwcGVyOiBQUkVfV1JBUFxuICB9LFxuICB1bnN0eWxlZDoge1xuICAgIGVsZW1lbnQ6ICdkaXYnLFxuICAgIGFsaWFzZWRFbGVtZW50czogWydwJ11cbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXA7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogXG4gKi9cblxuLyoqXG4gKiBDb25zdGFudHMgdG8gcmVwcmVzZW50IHRleHQgZGlyZWN0aW9uYWxpdHlcbiAqXG4gKiBBbHNvIGRlZmluZXMgYSAqZ2xvYmFsKiBkaXJlY2l0b24sIHRvIGJlIHVzZWQgaW4gYmlkaSBhbGdvcml0aG1zIGFzIGFcbiAqIGRlZmF1bHQgZmFsbGJhY2sgZGlyZWNpdG9uLCB3aGVuIG5vIGJldHRlciBkaXJlY3Rpb24gaXMgZm91bmQgb3IgcHJvdmlkZWQuXG4gKlxuICogTk9URTogVXNlIGBzZXRHbG9iYWxEaXIoKWAsIG9yIHVwZGF0ZSBgaW5pdEdsb2JhbERpcigpYCwgdG8gc2V0IHRoZSBpbml0aWFsXG4gKiAgICAgICBnbG9iYWwgZGlyZWN0aW9uIHZhbHVlIGJhc2VkIG9uIHRoZSBhcHBsaWNhdGlvbi5cbiAqXG4gKiBQYXJ0IG9mIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiBVbmljb2RlIEJpZGlyZWN0aW9uYWwgQWxnb3JpdGhtIChVQkEpXG4gKiBVbmljb2RlIFN0YW5kYXJkIEFubmV4ICM5IChVQVg5KVxuICogaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyOS9cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG52YXIgTkVVVFJBTCA9ICdORVVUUkFMJzsgLy8gTm8gc3Ryb25nIGRpcmVjdGlvblxudmFyIExUUiA9ICdMVFInOyAvLyBMZWZ0LXRvLVJpZ2h0IGRpcmVjdGlvblxudmFyIFJUTCA9ICdSVEwnOyAvLyBSaWdodC10by1MZWZ0IGRpcmVjdGlvblxuXG52YXIgZ2xvYmFsRGlyID0gbnVsbDtcblxuLy8gPT0gSGVscGVycyA9PVxuXG4vKipcbiAqIENoZWNrIGlmIGEgZGlyZWN0aW9uYWxpdHkgdmFsdWUgaXMgYSBTdHJvbmcgb25lXG4gKi9cbmZ1bmN0aW9uIGlzU3Ryb25nKGRpcikge1xuICByZXR1cm4gZGlyID09PSBMVFIgfHwgZGlyID09PSBSVEw7XG59XG5cbi8qKlxuICogR2V0IHN0cmluZyB2YWx1ZSB0byBiZSB1c2VkIGZvciBgZGlyYCBIVE1MIGF0dHJpYnV0ZSBvciBgZGlyZWN0aW9uYCBDU1NcbiAqIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRIVE1MRGlyKGRpcikge1xuICAhaXNTdHJvbmcoZGlyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdgZGlyYCBtdXN0IGJlIGEgc3Ryb25nIGRpcmVjdGlvbiB0byBiZSBjb252ZXJ0ZWQgdG8gSFRNTCBEaXJlY3Rpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBkaXIgPT09IExUUiA/ICdsdHInIDogJ3J0bCc7XG59XG5cbi8qKlxuICogR2V0IHN0cmluZyB2YWx1ZSB0byBiZSB1c2VkIGZvciBgZGlyYCBIVE1MIGF0dHJpYnV0ZSBvciBgZGlyZWN0aW9uYCBDU1NcbiAqIHByb3BlcnR5LCBidXQgcmV0dXJucyBudWxsIGlmIGBkaXJgIGhhcyBzYW1lIHZhbHVlIGFzIGBvdGhlckRpcmAuXG4gKiBgbnVsbGAuXG4gKi9cbmZ1bmN0aW9uIGdldEhUTUxEaXJJZkRpZmZlcmVudChkaXIsIG90aGVyRGlyKSB7XG4gICFpc1N0cm9uZyhkaXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2BkaXJgIG11c3QgYmUgYSBzdHJvbmcgZGlyZWN0aW9uIHRvIGJlIGNvbnZlcnRlZCB0byBIVE1MIERpcmVjdGlvbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgIWlzU3Ryb25nKG90aGVyRGlyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdgb3RoZXJEaXJgIG11c3QgYmUgYSBzdHJvbmcgZGlyZWN0aW9uIHRvIGJlIGNvbnZlcnRlZCB0byBIVE1MIERpcmVjdGlvbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGRpciA9PT0gb3RoZXJEaXIgPyBudWxsIDogZ2V0SFRNTERpcihkaXIpO1xufVxuXG4vLyA9PSBHbG9iYWwgRGlyZWN0aW9uID09XG5cbi8qKlxuICogU2V0IHRoZSBnbG9iYWwgZGlyZWN0aW9uLlxuICovXG5mdW5jdGlvbiBzZXRHbG9iYWxEaXIoZGlyKSB7XG4gIGdsb2JhbERpciA9IGRpcjtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBnbG9iYWwgZGlyZWN0aW9uXG4gKi9cbmZ1bmN0aW9uIGluaXRHbG9iYWxEaXIoKSB7XG4gIHNldEdsb2JhbERpcihMVFIpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgZ2xvYmFsIGRpcmVjdGlvblxuICovXG5mdW5jdGlvbiBnZXRHbG9iYWxEaXIoKSB7XG4gIGlmICghZ2xvYmFsRGlyKSB7XG4gICAgdGhpcy5pbml0R2xvYmFsRGlyKCk7XG4gIH1cbiAgIWdsb2JhbERpciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdHbG9iYWwgZGlyZWN0aW9uIG5vdCBzZXQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gZ2xvYmFsRGlyO1xufVxuXG52YXIgVW5pY29kZUJpZGlEaXJlY3Rpb24gPSB7XG4gIC8vIFZhbHVlc1xuICBORVVUUkFMOiBORVVUUkFMLFxuICBMVFI6IExUUixcbiAgUlRMOiBSVEwsXG4gIC8vIEhlbHBlcnNcbiAgaXNTdHJvbmc6IGlzU3Ryb25nLFxuICBnZXRIVE1MRGlyOiBnZXRIVE1MRGlyLFxuICBnZXRIVE1MRGlySWZEaWZmZXJlbnQ6IGdldEhUTUxEaXJJZkRpZmZlcmVudCxcbiAgLy8gR2xvYmFsIERpcmVjdGlvblxuICBzZXRHbG9iYWxEaXI6IHNldEdsb2JhbERpcixcbiAgaW5pdEdsb2JhbERpcjogaW5pdEdsb2JhbERpcixcbiAgZ2V0R2xvYmFsRGlyOiBnZXRHbG9iYWxEaXJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVW5pY29kZUJpZGlEaXJlY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzYW5pdGl6ZURyYWZ0VGV4dFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUkVHRVhfQkxPQ0tfREVMSU1JVEVSID0gbmV3IFJlZ0V4cCgnXFxyJywgJ2cnKTtcblxuZnVuY3Rpb24gc2FuaXRpemVEcmFmdFRleHQoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoUkVHRVhfQkxPQ0tfREVMSU1JVEVSLCAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2FuaXRpemVEcmFmdFRleHQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDb250ZW50U3RhdGVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQmxvY2tNYXBCdWlsZGVyID0gcmVxdWlyZSgnLi9CbG9ja01hcEJ1aWxkZXInKTtcbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyTWV0YWRhdGEnKTtcbnZhciBDb250ZW50QmxvY2sgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9jaycpO1xudmFyIENvbnRlbnRCbG9ja05vZGUgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9ja05vZGUnKTtcbnZhciBEcmFmdEVudGl0eSA9IHJlcXVpcmUoJy4vRHJhZnRFbnRpdHknKTtcbnZhciBEcmFmdEZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vRHJhZnRGZWF0dXJlRmxhZ3MnKTtcbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcbnZhciBTZWxlY3Rpb25TdGF0ZSA9IHJlcXVpcmUoJy4vU2VsZWN0aW9uU3RhdGUnKTtcblxudmFyIGdlbmVyYXRlUmFuZG9tS2V5ID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVJhbmRvbUtleScpO1xudmFyIHNhbml0aXplRHJhZnRUZXh0ID0gcmVxdWlyZSgnLi9zYW5pdGl6ZURyYWZ0VGV4dCcpO1xuXG52YXIgTGlzdCA9IEltbXV0YWJsZS5MaXN0LFxuICAgIFJlY29yZCA9IEltbXV0YWJsZS5SZWNvcmQsXG4gICAgUmVwZWF0ID0gSW1tdXRhYmxlLlJlcGVhdDtcblxuXG52YXIgZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0ID0gRHJhZnRGZWF0dXJlRmxhZ3MuZHJhZnRfdHJlZV9kYXRhX3N1cHBvcnQ7XG5cbnZhciBkZWZhdWx0UmVjb3JkID0ge1xuICBlbnRpdHlNYXA6IG51bGwsXG4gIGJsb2NrTWFwOiBudWxsLFxuICBzZWxlY3Rpb25CZWZvcmU6IG51bGwsXG4gIHNlbGVjdGlvbkFmdGVyOiBudWxsXG59O1xuXG52YXIgQ29udGVudEJsb2NrTm9kZVJlY29yZCA9IGV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCA/IENvbnRlbnRCbG9ja05vZGUgOiBDb250ZW50QmxvY2s7XG5cbnZhciBDb250ZW50U3RhdGVSZWNvcmQgPSBSZWNvcmQoZGVmYXVsdFJlY29yZCk7XG5cbnZhciBDb250ZW50U3RhdGUgPSBmdW5jdGlvbiAoX0NvbnRlbnRTdGF0ZVJlY29yZCkge1xuICBfaW5oZXJpdHMoQ29udGVudFN0YXRlLCBfQ29udGVudFN0YXRlUmVjb3JkKTtcblxuICBmdW5jdGlvbiBDb250ZW50U3RhdGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRlbnRTdGF0ZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbnRlbnRTdGF0ZVJlY29yZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUuZ2V0RW50aXR5TWFwID0gZnVuY3Rpb24gZ2V0RW50aXR5TWFwKCkge1xuICAgIC8vIFRPRE86IHVwZGF0ZSB0aGlzIHdoZW4gd2UgZnVsbHkgcmVtb3ZlIERyYWZ0RW50aXR5XG4gICAgcmV0dXJuIERyYWZ0RW50aXR5O1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUuZ2V0QmxvY2tNYXAgPSBmdW5jdGlvbiBnZXRCbG9ja01hcCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2Jsb2NrTWFwJyk7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLnByb3RvdHlwZS5nZXRTZWxlY3Rpb25CZWZvcmUgPSBmdW5jdGlvbiBnZXRTZWxlY3Rpb25CZWZvcmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdzZWxlY3Rpb25CZWZvcmUnKTtcbiAgfTtcblxuICBDb250ZW50U3RhdGUucHJvdG90eXBlLmdldFNlbGVjdGlvbkFmdGVyID0gZnVuY3Rpb24gZ2V0U2VsZWN0aW9uQWZ0ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdzZWxlY3Rpb25BZnRlcicpO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUuZ2V0QmxvY2tGb3JLZXkgPSBmdW5jdGlvbiBnZXRCbG9ja0ZvcktleShrZXkpIHtcbiAgICB2YXIgYmxvY2sgPSB0aGlzLmdldEJsb2NrTWFwKCkuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGJsb2NrO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUuZ2V0S2V5QmVmb3JlID0gZnVuY3Rpb24gZ2V0S2V5QmVmb3JlKGtleSkge1xuICAgIHJldHVybiB0aGlzLmdldEJsb2NrTWFwKCkucmV2ZXJzZSgpLmtleVNlcSgpLnNraXBVbnRpbChmdW5jdGlvbiAodikge1xuICAgICAgcmV0dXJuIHYgPT09IGtleTtcbiAgICB9KS5za2lwKDEpLmZpcnN0KCk7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLnByb3RvdHlwZS5nZXRLZXlBZnRlciA9IGZ1bmN0aW9uIGdldEtleUFmdGVyKGtleSkge1xuICAgIHJldHVybiB0aGlzLmdldEJsb2NrTWFwKCkua2V5U2VxKCkuc2tpcFVudGlsKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gdiA9PT0ga2V5O1xuICAgIH0pLnNraXAoMSkuZmlyc3QoKTtcbiAgfTtcblxuICBDb250ZW50U3RhdGUucHJvdG90eXBlLmdldEJsb2NrQWZ0ZXIgPSBmdW5jdGlvbiBnZXRCbG9ja0FmdGVyKGtleSkge1xuICAgIHJldHVybiB0aGlzLmdldEJsb2NrTWFwKCkuc2tpcFVudGlsKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgICByZXR1cm4gayA9PT0ga2V5O1xuICAgIH0pLnNraXAoMSkuZmlyc3QoKTtcbiAgfTtcblxuICBDb250ZW50U3RhdGUucHJvdG90eXBlLmdldEJsb2NrQmVmb3JlID0gZnVuY3Rpb24gZ2V0QmxvY2tCZWZvcmUoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QmxvY2tNYXAoKS5yZXZlcnNlKCkuc2tpcFVudGlsKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgICByZXR1cm4gayA9PT0ga2V5O1xuICAgIH0pLnNraXAoMSkuZmlyc3QoKTtcbiAgfTtcblxuICBDb250ZW50U3RhdGUucHJvdG90eXBlLmdldEJsb2Nrc0FzQXJyYXkgPSBmdW5jdGlvbiBnZXRCbG9ja3NBc0FycmF5KCkge1xuICAgIHJldHVybiB0aGlzLmdldEJsb2NrTWFwKCkudG9BcnJheSgpO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUuZ2V0Rmlyc3RCbG9jayA9IGZ1bmN0aW9uIGdldEZpcnN0QmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QmxvY2tNYXAoKS5maXJzdCgpO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUuZ2V0TGFzdEJsb2NrID0gZnVuY3Rpb24gZ2V0TGFzdEJsb2NrKCkge1xuICAgIHJldHVybiB0aGlzLmdldEJsb2NrTWFwKCkubGFzdCgpO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUuZ2V0UGxhaW5UZXh0ID0gZnVuY3Rpb24gZ2V0UGxhaW5UZXh0KGRlbGltaXRlcikge1xuICAgIHJldHVybiB0aGlzLmdldEJsb2NrTWFwKCkubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgcmV0dXJuIGJsb2NrID8gYmxvY2suZ2V0VGV4dCgpIDogJyc7XG4gICAgfSkuam9pbihkZWxpbWl0ZXIgfHwgJ1xcbicpO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUuZ2V0TGFzdENyZWF0ZWRFbnRpdHlLZXkgPSBmdW5jdGlvbiBnZXRMYXN0Q3JlYXRlZEVudGl0eUtleSgpIHtcbiAgICAvLyBUT0RPOiB1cGRhdGUgdGhpcyB3aGVuIHdlIGZ1bGx5IHJlbW92ZSBEcmFmdEVudGl0eVxuICAgIHJldHVybiBEcmFmdEVudGl0eS5fX2dldExhc3RDcmVhdGVkRW50aXR5S2V5KCk7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLnByb3RvdHlwZS5oYXNUZXh0ID0gZnVuY3Rpb24gaGFzVGV4dCgpIHtcbiAgICB2YXIgYmxvY2tNYXAgPSB0aGlzLmdldEJsb2NrTWFwKCk7XG4gICAgcmV0dXJuIGJsb2NrTWFwLnNpemUgPiAxIHx8IGJsb2NrTWFwLmZpcnN0KCkuZ2V0TGVuZ3RoKCkgPiAwO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUuY3JlYXRlRW50aXR5ID0gZnVuY3Rpb24gY3JlYXRlRW50aXR5KHR5cGUsIG11dGFiaWxpdHksIGRhdGEpIHtcbiAgICAvLyBUT0RPOiB1cGRhdGUgdGhpcyB3aGVuIHdlIGZ1bGx5IHJlbW92ZSBEcmFmdEVudGl0eVxuICAgIERyYWZ0RW50aXR5Ll9fY3JlYXRlKHR5cGUsIG11dGFiaWxpdHksIGRhdGEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUubWVyZ2VFbnRpdHlEYXRhID0gZnVuY3Rpb24gbWVyZ2VFbnRpdHlEYXRhKGtleSwgdG9NZXJnZSkge1xuICAgIC8vIFRPRE86IHVwZGF0ZSB0aGlzIHdoZW4gd2UgZnVsbHkgcmVtb3ZlIERyYWZ0RW50aXR5XG4gICAgRHJhZnRFbnRpdHkuX19tZXJnZURhdGEoa2V5LCB0b01lcmdlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBDb250ZW50U3RhdGUucHJvdG90eXBlLnJlcGxhY2VFbnRpdHlEYXRhID0gZnVuY3Rpb24gcmVwbGFjZUVudGl0eURhdGEoa2V5LCBuZXdEYXRhKSB7XG4gICAgLy8gVE9ETzogdXBkYXRlIHRoaXMgd2hlbiB3ZSBmdWxseSByZW1vdmUgRHJhZnRFbnRpdHlcbiAgICBEcmFmdEVudGl0eS5fX3JlcGxhY2VEYXRhKGtleSwgbmV3RGF0YSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLnByb3RvdHlwZS5hZGRFbnRpdHkgPSBmdW5jdGlvbiBhZGRFbnRpdHkoaW5zdGFuY2UpIHtcbiAgICAvLyBUT0RPOiB1cGRhdGUgdGhpcyB3aGVuIHdlIGZ1bGx5IHJlbW92ZSBEcmFmdEVudGl0eVxuICAgIERyYWZ0RW50aXR5Ll9fYWRkKGluc3RhbmNlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBDb250ZW50U3RhdGUucHJvdG90eXBlLmdldEVudGl0eSA9IGZ1bmN0aW9uIGdldEVudGl0eShrZXkpIHtcbiAgICAvLyBUT0RPOiB1cGRhdGUgdGhpcyB3aGVuIHdlIGZ1bGx5IHJlbW92ZSBEcmFmdEVudGl0eVxuICAgIHJldHVybiBEcmFmdEVudGl0eS5fX2dldChrZXkpO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5jcmVhdGVGcm9tQmxvY2tBcnJheSA9IGZ1bmN0aW9uIGNyZWF0ZUZyb21CbG9ja0FycmF5KFxuICAvLyBUT0RPOiB1cGRhdGUgZmxvdyB0eXBlIHdoZW4gd2UgY29tcGxldGVseSBkZXByZWNhdGUgdGhlIG9sZCBlbnRpdHkgQVBJXG4gIGJsb2NrcywgZW50aXR5TWFwKSB7XG4gICAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgd2hlbiB3ZSBjb21wbGV0ZWx5IGRlcHJlY2F0ZSB0aGUgb2xkIGVudGl0eSBBUElcbiAgICB2YXIgdGhlQmxvY2tzID0gQXJyYXkuaXNBcnJheShibG9ja3MpID8gYmxvY2tzIDogYmxvY2tzLmNvbnRlbnRCbG9ja3M7XG4gICAgdmFyIGJsb2NrTWFwID0gQmxvY2tNYXBCdWlsZGVyLmNyZWF0ZUZyb21BcnJheSh0aGVCbG9ja3MpO1xuICAgIHZhciBzZWxlY3Rpb25TdGF0ZSA9IGJsb2NrTWFwLmlzRW1wdHkoKSA/IG5ldyBTZWxlY3Rpb25TdGF0ZSgpIDogU2VsZWN0aW9uU3RhdGUuY3JlYXRlRW1wdHkoYmxvY2tNYXAuZmlyc3QoKS5nZXRLZXkoKSk7XG4gICAgcmV0dXJuIG5ldyBDb250ZW50U3RhdGUoe1xuICAgICAgYmxvY2tNYXA6IGJsb2NrTWFwLFxuICAgICAgZW50aXR5TWFwOiBlbnRpdHlNYXAgfHwgRHJhZnRFbnRpdHksXG4gICAgICBzZWxlY3Rpb25CZWZvcmU6IHNlbGVjdGlvblN0YXRlLFxuICAgICAgc2VsZWN0aW9uQWZ0ZXI6IHNlbGVjdGlvblN0YXRlXG4gICAgfSk7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLmNyZWF0ZUZyb21UZXh0ID0gZnVuY3Rpb24gY3JlYXRlRnJvbVRleHQodGV4dCkge1xuICAgIHZhciBkZWxpbWl0ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IC9cXHJcXG4/fFxcbi9nO1xuXG4gICAgdmFyIHN0cmluZ3MgPSB0ZXh0LnNwbGl0KGRlbGltaXRlcik7XG4gICAgdmFyIGJsb2NrcyA9IHN0cmluZ3MubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgYmxvY2sgPSBzYW5pdGl6ZURyYWZ0VGV4dChibG9jayk7XG4gICAgICByZXR1cm4gbmV3IENvbnRlbnRCbG9ja05vZGVSZWNvcmQoe1xuICAgICAgICBrZXk6IGdlbmVyYXRlUmFuZG9tS2V5KCksXG4gICAgICAgIHRleHQ6IGJsb2NrLFxuICAgICAgICB0eXBlOiAndW5zdHlsZWQnLFxuICAgICAgICBjaGFyYWN0ZXJMaXN0OiBMaXN0KFJlcGVhdChDaGFyYWN0ZXJNZXRhZGF0YS5FTVBUWSwgYmxvY2subGVuZ3RoKSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBDb250ZW50U3RhdGUuY3JlYXRlRnJvbUJsb2NrQXJyYXkoYmxvY2tzKTtcbiAgfTtcblxuICByZXR1cm4gQ29udGVudFN0YXRlO1xufShDb250ZW50U3RhdGVSZWNvcmQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbnRlbnRTdGF0ZTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICB2YXIgc2V0UHJvbXB0ID0gZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKTtcblxuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjb25maXJtVHJhbnNpdGlvblRvID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpO1xuXG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgdmFyIGFwcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMubG9jYXRpb25zQXJlRXF1YWwgPSBleHBvcnRzLmNyZWF0ZUxvY2F0aW9uID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3Jlc29sdmVQYXRobmFtZSA9IHJlcXVpcmUoJ3Jlc29sdmUtcGF0aG5hbWUnKTtcblxudmFyIF9yZXNvbHZlUGF0aG5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVzb2x2ZVBhdGhuYW1lKTtcblxudmFyIF92YWx1ZUVxdWFsID0gcmVxdWlyZSgndmFsdWUtZXF1YWwnKTtcblxudmFyIF92YWx1ZUVxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbHVlRXF1YWwpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjcmVhdGVMb2NhdGlvbiA9IGV4cG9ydHMuY3JlYXRlTG9jYXRpb24gPSBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gKDAsIF9QYXRoVXRpbHMucGFyc2VQYXRoKShwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcblxuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAoMCwgX3Jlc29sdmVQYXRobmFtZTIuZGVmYXVsdCkobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn07XG5cbnZhciBsb2NhdGlvbnNBcmVFcXVhbCA9IGV4cG9ydHMubG9jYXRpb25zQXJlRXF1YWwgPSBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgKDAsIF92YWx1ZUVxdWFsMi5kZWZhdWx0KShhLnN0YXRlLCBiLnN0YXRlKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGIpICYmIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGFUeXBlID0gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGEpO1xuICB2YXIgYlR5cGUgPSB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYik7XG5cbiAgaWYgKGFUeXBlICE9PSBiVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gYS52YWx1ZU9mKCk7XG4gICAgdmFyIGJWYWx1ZSA9IGIudmFsdWVPZigpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWx1ZUVxdWFsOyIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8pIHtcbiAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gdG8gJiYgdG8uc3BsaXQoJy8nKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IGZyb20gJiYgZnJvbS5zcGxpdCgnLycpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkge1xuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuICB9aWYgKG11c3RFbmRBYnMgJiYgZnJvbVBhcnRzWzBdICE9PSAnJyAmJiAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSkgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lOyIsIlwidXNlIHN0cmljdFwiO1xuLy8gdHlwZW9mIGFueSBzbyB0aGF0IGl0IHdlIGRvbid0IGhhdmUgdG8gY2FzdCB3aGVuIGNvbXBhcmluZyBhIHJlc3VsdCB0byB0aGUgZXJyb3Igb2JqZWN0XG5leHBvcnRzLmVycm9yT2JqZWN0ID0geyBlOiB7fSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JPYmplY3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXAiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQnJvd3NlclJvdXRlciwgUm91dGUsIFN3aXRjaCwgTGluaywgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5jbGFzcyBTaW5nbGVEYXNoYm9hcmRKb2IgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaXNPcGVuOiBmYWxzZSxcbiAgICAgICAgICAgIGFyZWE6IHRoaXMucHJvcHMuYXJlYSxcbiAgICAgICAgICAgIGNyZWF0ZWRfZGF0ZTogdGhpcy5wcm9wcy5jcmVhdGVkX2RhdGUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5wcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGV4cGVyaWVuY2U6IHRoaXMucHJvcHMuZXhwZXJpZW5jZSxcbiAgICAgICAgICAgIGhvdXJzOiB0aGlzLnByb3BzLmhvdXJzLFxuICAgICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMubG9jYXRpb24sXG4gICAgICAgICAgICBwb3N0ZWRfYnlfY29tcGFueTogdGhpcy5wcm9wcy5wb3N0ZWRfYnlfY29tcGFueSxcbiAgICAgICAgICAgIGNvbXBhbnlOYW1lOiB0aGlzLnByb3BzLmNvbXBhbnlOYW1lLFxuICAgICAgICAgICAgc2FsYXJ5OiB0aGlzLnByb3BzLnNhbGFyeSxcbiAgICAgICAgICAgIHNsdWc6IHRoaXMucHJvcHMuc2x1ZyxcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLnByb3BzLnRpdGxlLFxuICAgICAgICAgICAgaWQ6IHRoaXMucHJvcHMuaWQsXG4gICAgICAgICAgICB1c2VyQ29tcGFuaWVzOiB0aGlzLnByb3BzLnVzZXJDb21wYW5pZXNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2luZ2xlLWNvbXBhbnktam9iXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaW5nbGUtam9iLXRpdGxlc1wiPlxuICAgICAgICAgICAgICAgICAgICA8aDE+e3RoaXMuc3RhdGUudGl0bGV9PC9oMT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpbmdsZS1qb2ItYnV0dG9uLWNvbnRhaW5lcnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPExpbmsgIHRvPXt7IHBhdGhuYW1lOiBcIi92aWV3X2pvYi9cIiArIHRoaXMuc3RhdGUuaWQsIHN0YXRlOiB7IHVzZXJDb21wYW5pZXM6IHRoaXMuc3RhdGUudXNlckNvbXBhbmllcywgY29tcGFueU5hbWU6IHRoaXMuc3RhdGUuY29tcGFueU5hbWUsIGNvbXBhbnlJZDogdGhpcy5zdGF0ZS5wb3N0ZWRfYnlfY29tcGFueX0gfX0+PGJ1dHRvbj5WaWV3IEpvYjwvYnV0dG9uPjwvTGluaz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaW5nbGVEYXNoYm9hcmRKb2I7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4vSGVhZGVyLmpzJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi9Gb290ZXIuanMnO1xuaW1wb3J0IEpvYnNQYWdlIGZyb20gJy4uL2pvYnMvSm9ic1BhZ2UuanMnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuY2xhc3MgTG9naW4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpXG4gICAgICAgIHRoaXMuc3VibWl0TG9naW5Gb3JtID0gdGhpcy5zdWJtaXRMb2dpbkZvcm0uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVFbWFpbENoYW5nZSA9IHRoaXMuaGFuZGxlRW1haWxDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVQYXNzd29yZENoYW5nZSA9IHRoaXMuaGFuZGxlUGFzc3dvcmRDaGFuZ2UuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZW1haWw6IFwiXCIsXG4gICAgICAgICAgICBwYXNzd29yZDogXCJcIixcbiAgICAgICAgICAgIHJlc3BvbnNlRGF0YToge30sXG4gICAgICAgICAgICByZWRpcmVjdFRvRGFzaGJvYXJkOiBudWxsXG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHN1Ym1pdExvZ2luRm9ybShlKSB7XG4gICAgICAgIGNvbnN0IGxvZ2luRW5kcG9pbnQgPSAnL3Rva2VuLWF1dGgvJztcblxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgYXhpb3Moe1xuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICB1cmw6IGxvZ2luRW5kcG9pbnQsIFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBlbWFpbDogdGhpcy5zdGF0ZS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuc3RhdGUucGFzc3dvcmRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbidcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IHsgXG4gICBcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlRGF0YTogcmVzcG9uc2UuZGF0YVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbicsIHJlc3BvbnNlLmRhdGEudG9rZW4pO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdlbWFpbCcsIHJlc3BvbnNlLmRhdGEudXNlci5lbWFpbCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXNwb25zZSBmcm9tIC90b2tlbi1hdXRoLyBpcyBcIiArIHRoaXMuc3RhdGUucmVzcG9uc2VEYXRhKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFRvRGFzaGJvYXJkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRoaXMgaXMgYW4gZXJyb3IgeW9cIiwgZXJyb3IpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KVxuICAgIH1cblxuICAgIGhhbmRsZUVtYWlsQ2hhbmdlKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGVtYWlsOiBlLnRhcmdldC52YWx1ZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoYW5kbGVQYXNzd29yZENoYW5nZShlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBwYXNzd29yZDogZS50YXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5yZWRpcmVjdFRvRGFzaGJvYXJkKSB7XG4gICAgICAgICAgICByZXR1cm4gPFJlZGlyZWN0IHRvPScvZW1wbG95ZXJfZGFzaGJvYXJkJy8+XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKCAgICAgICAgIFxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9J2xvZ2luLXdyYXBwZXInPlxuICAgICAgICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5zdWJtaXRMb2dpbkZvcm19IGlkPVwibG9naW4tZm9ybVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImxvZ2luLWhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5Mb2dpbjwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJsb2dpbi1ib2R5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmVycm9yICYmICAgPGRpdiBpZD1cImxvZ2luLWVycm9yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkVtYWlsIG9yIHBhc3N3b3JkIGluY29ycmVjdC4gUGxlYXNlIHRyeSBhZ2FpbiBvciBjb250YWN0IG1hcmlseW5AdGhlbmV4dHN0ZXAuaW8gaWYgeW91IGFyZSBoYXZpbmcgdHJvdWJsZSBsb2dnaW5nIGluPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2dpbi1sYWJlbC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkVtYWlsPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2dpbi1pbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZW1haWxcIiBpZD1cImVtYWlsX2ZpZWxkXCIgb25DaGFuZ2U9e3RoaXMuaGFuZGxlRW1haWxDaGFuZ2V9IGNsYXNzTmFtZT1cImxvZ2luLWlucHV0XCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9naW4tbGFiZWwtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QYXNzd29yZDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9naW4taW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgaWQ9XCJwYXNzd29yZF9maWVsZFwiIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZVBhc3N3b3JkQ2hhbmdlfSBjbGFzc05hbWU9XCJsb2dpbi1pbnB1dFwiLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgaWQ9XCJsb2dpbi1zdWJtaXRcIi8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICBcbiAgICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgTG9naW47IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9IZWFkZXIuanMnO1xuaW1wb3J0IEZvb3RlciBmcm9tICcuL0Zvb3Rlci5qcyc7XG5pbXBvcnQgSm9ic1BhZ2UgZnJvbSAnLi4vam9icy9Kb2JzUGFnZS5qcyc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5jbGFzcyBSZWdpc3RlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5oYW5kbGVSZWdpc3RlckZvcm0gPSB0aGlzLmhhbmRsZVJlZ2lzdGVyRm9ybS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnN1Ym1pdFJlZ2lzdGVyRm9ybSA9IHRoaXMuc3VibWl0UmVnaXN0ZXJGb3JtLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5oYW5kbGVGaXJzdE5hbWVDaGFuZ2UgPSAgIHRoaXMuaGFuZGxlRmlyc3ROYW1lQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlTGFzdE5hbWVDaGFuZ2UgPSB0aGlzLmhhbmRsZUxhc3ROYW1lQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlRW1haWxDaGFuZ2UgPSB0aGlzLmhhbmRsZUVtYWlsQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlUGFzc3dvcmRDaGFuZ2UgPSB0aGlzLmhhbmRsZVBhc3N3b3JkQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlVXNlclR5cGVFbXBsb3llZSA9IHRoaXMuaGFuZGxlVXNlclR5cGVFbXBsb3llZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZVVzZXJUeXBlRW1wbG95ZXIgPSB0aGlzLmhhbmRsZVVzZXJUeXBlRW1wbG95ZXIuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZmlyc3RfbmFtZTogXCJcIixcbiAgICAgICAgICAgIGxhc3RfbmFtZTogXCJcIixcbiAgICAgICAgICAgIGVtYWlsOiBcIlwiLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IFwiXCIsXG4gICAgICAgICAgICB1c2VyX3R5cGU6IFwiXCIsXG4gICAgICAgICAgICByZWRpcmVjdFRvRGFzaGJvYXJkOiBudWxsLFxuXG4gICAgICAgICAgICBmaXJzdF9uYW1lX2Vycm9yOiBudWxsLFxuICAgICAgICAgICAgZmlyc3RfbmFtZV9lcnJvcl9zdGF0ZTogbnVsbCxcblxuICAgICAgICAgICAgbGFzdF9uYW1lX2Vycm9yOiBudWxsLFxuICAgICAgICAgICAgbGFzdF9uYW1lX2Vycm9yX3N0YXRlOiBudWxsLFxuXG4gICAgICAgICAgICBlbWFpbF9lcnJvcjogbnVsbCxcbiAgICAgICAgICAgIGVtYWlsX2Vycm9yX3N0YXRlOiBudWxsLFxuXG4gICAgICAgICAgICBwYXNzd29yZF9lcnJvcjogbnVsbCxcbiAgICAgICAgICAgIHBhc3N3b3JkX2Vycm9yX3N0YXRlOiBudWxsLFxuXG4gICAgICAgICAgICB0eXBlX2Vycm9yOiBudWxsLFxuICAgICAgICAgICAgdHlwZV9lcnJvcl9zdGF0ZTogbnVsbCxcblxuICAgICAgICAgICAgYW55X2lucHV0X2Vycm9yOiBudWxsLFxuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVSZWdpc3RlckZvcm0oZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCdoYW5kbGluZyByZWdpc3RlciBmb3JtJylcblxuICAgICAgICBpZiAoICF0aGlzLnN0YXRlLmZpcnN0X25hbWUgKSB7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGFueV9pbnB1dF9lcnJvcjogXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgIGZpcnN0X25hbWVfZXJyb3I6IFwiZXJyb3JcIixcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSBlbHNlIGlmICggIXRoaXMuc3RhdGUubGFzdF9uYW1lKSB7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGFueV9pbnB1dF9lcnJvcjogXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgIGxhc3RfbmFtZV9lcnJvcjogXCJlcnJvclwiLFxuICAgICAgICAgICAgfSlcblxuICAgICAgICB9IGVsc2UgaWYgKCAhdGhpcy5zdGF0ZS5lbWFpbCApIHtcblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgYW55X2lucHV0X2Vycm9yOiBcImVycm9yXCIsXG4gICAgICAgICAgICAgICAgZW1haWxfZXJyb3I6IFwiZXJyb3JcIixcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5zdGF0ZS5wYXNzd29yZCkge1xuICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGFueV9pbnB1dF9lcnJvcjogXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkX2Vycm9yOiBcImVycm9yXCIsXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIH0gZWxzZSBpZiAoICF0aGlzLnN0YXRlLnVzZXJfdHlwZSApIHtcblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgYW55X2lucHV0X2Vycm9yOiBcImVycm9yXCIsXG4gICAgICAgICAgICAgICAgdHlwZV9lcnJvcjogXCJlcnJvclwiLFxuICAgICAgICAgICAgfSlcblxuICAgICAgICB9IGVsc2UgIHtcblxuICAgICAgICAgIHRoaXMuc3VibWl0UmVnaXN0ZXJGb3JtKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIFxuICAgIH1cblxuICAgIHN1Ym1pdFJlZ2lzdGVyRm9ybShlKSB7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ3N1Ym1pdHRpbmcgcmVnaXN0ZXIgZm9ybScpO1xuXG4gICAgICAgIGNvbnN0IGNyZWF0ZVVzZXJFbmRwb2ludCA9IFwiL2F1dGhlbnRpY2F0ZS91c2Vycy9cIjtcblxuICAgICAgICBheGlvcy5kZWZhdWx0cy54c3JmQ29va2llTmFtZSA9ICdjc3JmdG9rZW4nO1xuICAgICAgICBheGlvcy5kZWZhdWx0cy54c3JmSGVhZGVyTmFtZSA9ICdYLUNTUkZUb2tlbic7XG5cbiAgICAgICAgYXhpb3Moe1xuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICB1cmw6IGNyZWF0ZVVzZXJFbmRwb2ludCwgXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0X25hbWU6IHRoaXMuc3RhdGUuZmlyc3RfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdF9uYW1lOiB0aGlzLnN0YXRlLmxhc3RfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IHRoaXMuc3RhdGUuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLnN0YXRlLnBhc3N3b3JkLFxuICAgICAgICAgICAgICAgICAgICB1c2VyX3R5cGU6IHRoaXMuc3RhdGUudXNlcl90eXBlXG4gICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCByZXNwb25zZSA9PiB7IFxuICAgXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDEpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIjIwMSwgdXNlciBjcmVhdGVkXCIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZURhdGE6IHJlc3BvbnNlLmRhdGFcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2ZpcnN0X25hbWUnLCByZXNwb25zZS5kYXRhLmZpcnN0X25hbWUpO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsYXN0X25hbWUnLCByZXNwb25zZS5kYXRhLmxhc3RfbmFtZSk7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2VtYWlsJywgcmVzcG9uc2UuZGF0YS5lbWFpbCk7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuJywgcmVzcG9uc2UuZGF0YS50b2tlbik7XG4gICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHJlZGlyZWN0VG9EYXNoYm9hcmQ6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBhbiBlcnJvciB5b1wiLCBlcnJvcik7XG4gICAgICAgICAgfSlcbiAgICB9XG5cbiAgICBoYW5kbGVGaXJzdE5hbWVDaGFuZ2UoZSkge1xuICBcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGZpcnN0X25hbWU6IGUudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgICAgIGZpcnN0X25hbWVfZXJyb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgYW55X2lucHV0X2Vycm9yOiBudWxsXG4gICAgICAgICAgICB9KVxuICAgIH1cblxuICAgIGhhbmRsZUxhc3ROYW1lQ2hhbmdlKGUpIHtcbiBcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGxhc3RfbmFtZTogZS50YXJnZXQudmFsdWUsXG4gICAgICAgICAgICAgICAgbGFzdF9uYW1lX2Vycm9yOiBudWxsLFxuICAgICAgICAgICAgICAgIGFueV9pbnB1dF9lcnJvcjogbnVsbFxuICAgICAgICAgICAgfSlcbiAgICB9XG5cbiAgICBoYW5kbGVFbWFpbENoYW5nZShlKSB7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGVtYWlsOiBlLnRhcmdldC52YWx1ZSxcbiAgICAgICAgICAgICAgICBlbWFpbF9lcnJvcjogbnVsbCxcbiAgICAgICAgICAgICAgICBhbnlfaW5wdXRfZXJyb3I6IG51bGxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIFxuICAgIH1cblxuICAgIGhhbmRsZVBhc3N3b3JkQ2hhbmdlKGUpIHtcblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IGUudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkX2Vycm9yOiBudWxsLFxuICAgICAgICAgICAgICAgIGFueV9pbnB1dF9lcnJvcjogbnVsbCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIFxuICAgIH1cblxuICAgIGhhbmRsZVVzZXJUeXBlRW1wbG95ZWUoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHVzZXJfdHlwZTogXCJlbXBsb3llZVwiLFxuICAgICAgICAgICAgYW55X2lucHV0X2Vycm9yOiBudWxsLFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGhhbmRsZVVzZXJUeXBlRW1wbG95ZXIoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHVzZXJfdHlwZTogXCJlbW1wbG95ZXJcIixcbiAgICAgICAgICAgIGFueV9pbnB1dF9lcnJvcjogbnVsbCxcbiAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucmVkaXJlY3RUb0Rhc2hib2FyZCkge1xuICAgICAgICAgICAgcmV0dXJuIDxSZWRpcmVjdCB0bz0nL2VtcGxveWVyX2Rhc2hib2FyZCcvPlxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGlkPSdyZWdpc3Rlci13cmFwcGVyJz5cbiAgICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17IHRoaXMuaGFuZGxlUmVnaXN0ZXJGb3JtIH0gaWQ9XCJyZWdpc3Rlci1mb3JtXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJyZWdpc3Rlci1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5SZWdpc3RlcjwvaDE+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwicmVnaXN0ZXItYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwicmVnaXN0ZXItZmllbGRzZXRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWdpc3Rlci1sYWJlbC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkZpcnN0IE5hbWU8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlZ2lzdGVyLWlucHV0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImZpcnN0X25hbWVcIiBpZD1cImlkX2ZpcnN0X25hbWVcIiBjbGFzc05hbWU9eyBcInJlZ2lzdGVyLWlucHV0IFwiICsgdGhpcy5zdGF0ZS5maXJzdF9uYW1lX2Vycm9yX3N0YXRlIH0gbWF4bGVuZ3RoPVwiMzJcIiBvbkNoYW5nZT17dGhpcy5oYW5kbGVGaXJzdE5hbWVDaGFuZ2V9IHZhbHVlPXt0aGlzLnN0YXRlLmZpcnN0X25hbWV9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwicmVnaXN0ZXItZmllbGRzZXRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWdpc3Rlci1sYWJlbC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkxhc3QgTmFtZTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVnaXN0ZXItaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwibGFzdF9uYW1lXCIgaWQ9XCJpZF9sYXN0X25hbWVcIiBjbGFzc05hbWU9eyBcInJlZ2lzdGVyLWlucHV0IFwiICsgdGhpcy5zdGF0ZS5sYXN0X25hbWVfZXJyb3Jfc3RhdGUgfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVMYXN0TmFtZUNoYW5nZX0gdmFsdWU9e3RoaXMuc3RhdGUubGFzdF9uYW1lfSBtYXhsZW5ndGg9XCIzMlwiLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJyZWdpc3Rlci1maWVsZHNldFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlZ2lzdGVyLWxhYmVsLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RW1haWw6PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWdpc3Rlci1pbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZW1haWxcIiBpZD1cImVtYWlsX2ZpZWxkXCIgY2xhc3NOYW1lPXtcInJlZ2lzdGVyLWlucHV0IFwiICsgdGhpcy5zdGF0ZS5lbWFpbF9lcnJvcl9zdGF0ZSB9IG9uQ2hhbmdlPXsgdGhpcy5oYW5kbGVFbWFpbENoYW5nZSB9IHZhbHVlPXsgdGhpcy5zdGF0ZS5lbWFpbCB9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwicmVnaXN0ZXItZmllbGRzZXRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWdpc3Rlci1sYWJlbC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlBhc3N3b3JkOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVnaXN0ZXItaW5wdXQtY29udGFpbmVyXCI+ICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBpZD1cInBhc3N3b3JkX2ZpZWxkXCIgY2xhc3NOYW1lPXtcInJlZ2lzdGVyLWlucHV0IFwiICsgdGhpcy5zdGF0ZS5wYXNzd29yZF9lcnJvcl9zdGF0ZSB9IG9uQ2hhbmdlPXsgdGhpcy5oYW5kbGVQYXNzd29yZENoYW5nZSB9IHZhbHVlPXsgdGhpcy5zdGF0ZS5wYXNzd29yZCB9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+QXJlIHlvdSBhbjo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImVtcGxveWVlLWVtcGxveWVyLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVtcGxveWVlLWVtcGxveWVyLWNob2ljZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RW1wbG95ZWU8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInVzZXJfdHlwZVwiIHZhbHVlPVwiZW1wbG95ZWVcIiBpZD1cInR5cGVFbXBsb3llZVwiIG9uQ2hhbmdlPXsgdGhpcy5oYW5kbGVVc2VyVHlwZUVtcGxveWVlIH0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbXBsb3llZS1lbXBsb3llci1jaG9pY2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkVtcGxveWVyPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJ1c2VyX3R5cGVcIiB2YWx1ZT1cImVtcGxveWVyXCIgaWQ9XCJ0eXBlRW1wbG95ZXJcIiBvbkNoYW5nZT17IHRoaXMuaGFuZGxlVXNlclR5cGVFbXBsb3llciB9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgaWQ9XCJyZWdpc3Rlci1zdWJtaXRcIi8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PlxuICAgICAgICAgICAgICAgICAgICAgICAgeyB0aGlzLnN0YXRlLmFueV9pbnB1dF9lcnJvciAmJiBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJyZWdpc3Rlci1lcnJvcnMtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmZpcnN0X25hbWVfZXJyb3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QbGVhc2UgZW50ZXIgeW91ciBmaXJzdCBuYW1lPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUubGFzdF9uYW1lX2Vycm9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+UGxlYXNlIGVudGVyIHlvdXIgbGFzdCBuYW1lPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5lbWFpbF9lcnJvciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlBsZWFzZSBlbnRlciB5b3VyIGVtYWlsIGFkZHJlc3M8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnBhc3N3b3JkX2Vycm9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+UGxlYXNlIGVudGVyIGEgcGFzc3dvcmQ8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnR5cGVfZXJyb3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QbGVhc2Ugc2VsZWN0IHdoZXRoZXIgeW91J3JlIGFuIGVtcGxveWVlIG9yIGVtcGxveWVyPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVnaXN0ZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNhblVzZURPTSA9IHVuZGVmaW5lZDtcblxudmFyIF9leGVudiA9IHJlcXVpcmUoXCJleGVudlwiKTtcblxudmFyIF9leGVudjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVudik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBFRSA9IF9leGVudjIuZGVmYXVsdDtcblxudmFyIFNhZmVIVE1MRWxlbWVudCA9IEVFLmNhblVzZURPTSA/IHdpbmRvdy5IVE1MRWxlbWVudCA6IHt9O1xuXG52YXIgY2FuVXNlRE9NID0gZXhwb3J0cy5jYW5Vc2VET00gPSBFRS5jYW5Vc2VET007XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNhZmVIVE1MRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYXNzZXJ0Tm9kZUxpc3QgPSBhc3NlcnROb2RlTGlzdDtcbmV4cG9ydHMuc2V0RWxlbWVudCA9IHNldEVsZW1lbnQ7XG5leHBvcnRzLnZhbGlkYXRlRWxlbWVudCA9IHZhbGlkYXRlRWxlbWVudDtcbmV4cG9ydHMuaGlkZSA9IGhpZGU7XG5leHBvcnRzLnNob3cgPSBzaG93O1xuZXhwb3J0cy5kb2N1bWVudE5vdFJlYWR5T3JTU1JUZXN0aW5nID0gZG9jdW1lbnROb3RSZWFkeU9yU1NSVGVzdGluZztcbmV4cG9ydHMucmVzZXRGb3JUZXN0aW5nID0gcmVzZXRGb3JUZXN0aW5nO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKFwid2FybmluZ1wiKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZ2xvYmFsRWxlbWVudCA9IG51bGw7XG5cbmZ1bmN0aW9uIGFzc2VydE5vZGVMaXN0KG5vZGVMaXN0LCBzZWxlY3Rvcikge1xuICBpZiAoIW5vZGVMaXN0IHx8ICFub2RlTGlzdC5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZWFjdC1tb2RhbDogTm8gZWxlbWVudHMgd2VyZSBmb3VuZCBmb3Igc2VsZWN0b3IgXCIgKyBzZWxlY3RvciArIFwiLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRFbGVtZW50KGVsZW1lbnQpIHtcbiAgdmFyIHVzZUVsZW1lbnQgPSBlbGVtZW50O1xuICBpZiAodHlwZW9mIHVzZUVsZW1lbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHVzZUVsZW1lbnQpO1xuICAgIGFzc2VydE5vZGVMaXN0KGVsLCB1c2VFbGVtZW50KTtcbiAgICB1c2VFbGVtZW50ID0gXCJsZW5ndGhcIiBpbiBlbCA/IGVsWzBdIDogZWw7XG4gIH1cbiAgZ2xvYmFsRWxlbWVudCA9IHVzZUVsZW1lbnQgfHwgZ2xvYmFsRWxlbWVudDtcbiAgcmV0dXJuIGdsb2JhbEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRWxlbWVudChhcHBFbGVtZW50KSB7XG4gIGlmICghYXBwRWxlbWVudCAmJiAhZ2xvYmFsRWxlbWVudCkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsIFtcInJlYWN0LW1vZGFsOiBBcHAgZWxlbWVudCBpcyBub3QgZGVmaW5lZC5cIiwgXCJQbGVhc2UgdXNlIGBNb2RhbC5zZXRBcHBFbGVtZW50KGVsKWAgb3Igc2V0IGBhcHBFbGVtZW50PXtlbH1gLlwiLCBcIlRoaXMgaXMgbmVlZGVkIHNvIHNjcmVlbiByZWFkZXJzIGRvbid0IHNlZSBtYWluIGNvbnRlbnRcIiwgXCJ3aGVuIG1vZGFsIGlzIG9wZW5lZC4gSXQgaXMgbm90IHJlY29tbWVuZGVkLCBidXQgeW91IGNhbiBvcHQtb3V0XCIsIFwiYnkgc2V0dGluZyBgYXJpYUhpZGVBcHA9e2ZhbHNlfWAuXCJdLmpvaW4oXCIgXCIpKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBoaWRlKGFwcEVsZW1lbnQpIHtcbiAgaWYgKHZhbGlkYXRlRWxlbWVudChhcHBFbGVtZW50KSkge1xuICAgIChhcHBFbGVtZW50IHx8IGdsb2JhbEVsZW1lbnQpLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzaG93KGFwcEVsZW1lbnQpIHtcbiAgaWYgKHZhbGlkYXRlRWxlbWVudChhcHBFbGVtZW50KSkge1xuICAgIChhcHBFbGVtZW50IHx8IGdsb2JhbEVsZW1lbnQpLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRvY3VtZW50Tm90UmVhZHlPclNTUlRlc3RpbmcoKSB7XG4gIGdsb2JhbEVsZW1lbnQgPSBudWxsO1xufVxuXG5mdW5jdGlvbiByZXNldEZvclRlc3RpbmcoKSB7XG4gIGdsb2JhbEVsZW1lbnQgPSBudWxsO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmluZFRhYmJhYmxlRGVzY2VuZGFudHM7XG4vKiFcbiAqIEFkYXB0ZWQgZnJvbSBqUXVlcnkgVUkgY29yZVxuICpcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vY2F0ZWdvcnkvdWktY29yZS9cbiAqL1xuXG52YXIgdGFiYmFibGVOb2RlID0gL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0LztcblxuZnVuY3Rpb24gaGlkZXNDb250ZW50cyhlbGVtZW50KSB7XG4gIHZhciB6ZXJvU2l6ZSA9IGVsZW1lbnQub2Zmc2V0V2lkdGggPD0gMCAmJiBlbGVtZW50Lm9mZnNldEhlaWdodCA8PSAwO1xuXG4gIC8vIElmIHRoZSBub2RlIGlzIGVtcHR5LCB0aGlzIGlzIGdvb2QgZW5vdWdoXG4gIGlmICh6ZXJvU2l6ZSAmJiAhZWxlbWVudC5pbm5lckhUTUwpIHJldHVybiB0cnVlO1xuXG4gIC8vIE90aGVyd2lzZSB3ZSBuZWVkIHRvIGNoZWNrIHNvbWUgc3R5bGVzXG4gIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICByZXR1cm4gemVyb1NpemUgPyBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwib3ZlcmZsb3dcIikgIT09IFwidmlzaWJsZVwiIDogc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShcImRpc3BsYXlcIikgPT0gXCJub25lXCI7XG59XG5cbmZ1bmN0aW9uIHZpc2libGUoZWxlbWVudCkge1xuICB2YXIgcGFyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gIHdoaWxlIChwYXJlbnRFbGVtZW50KSB7XG4gICAgaWYgKHBhcmVudEVsZW1lbnQgPT09IGRvY3VtZW50LmJvZHkpIGJyZWFrO1xuICAgIGlmIChoaWRlc0NvbnRlbnRzKHBhcmVudEVsZW1lbnQpKSByZXR1cm4gZmFsc2U7XG4gICAgcGFyZW50RWxlbWVudCA9IHBhcmVudEVsZW1lbnQucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZm9jdXNhYmxlKGVsZW1lbnQsIGlzVGFiSW5kZXhOb3ROYU4pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICB2YXIgcmVzID0gdGFiYmFibGVOb2RlLnRlc3Qobm9kZU5hbWUpICYmICFlbGVtZW50LmRpc2FibGVkIHx8IChub2RlTmFtZSA9PT0gXCJhXCIgPyBlbGVtZW50LmhyZWYgfHwgaXNUYWJJbmRleE5vdE5hTiA6IGlzVGFiSW5kZXhOb3ROYU4pO1xuICByZXR1cm4gcmVzICYmIHZpc2libGUoZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIHRhYmJhYmxlKGVsZW1lbnQpIHtcbiAgdmFyIHRhYkluZGV4ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKTtcbiAgaWYgKHRhYkluZGV4ID09PSBudWxsKSB0YWJJbmRleCA9IHVuZGVmaW5lZDtcbiAgdmFyIGlzVGFiSW5kZXhOYU4gPSBpc05hTih0YWJJbmRleCk7XG4gIHJldHVybiAoaXNUYWJJbmRleE5hTiB8fCB0YWJJbmRleCA+PSAwKSAmJiBmb2N1c2FibGUoZWxlbWVudCwgIWlzVGFiSW5kZXhOYU4pO1xufVxuXG5mdW5jdGlvbiBmaW5kVGFiYmFibGVEZXNjZW5kYW50cyhlbGVtZW50KSB7XG4gIHJldHVybiBbXS5zbGljZS5jYWxsKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIipcIiksIDApLmZpbHRlcih0YWJiYWJsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX01vZGFsID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9Nb2RhbFwiKTtcblxudmFyIF9Nb2RhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Nb2RhbCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9Nb2RhbDIuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdFN0cmluZ0tleVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRTdHJpbmdLZXkgPSB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGtleSkge1xuICAgIHJldHVybiAnXycgKyBTdHJpbmcoa2V5KTtcbiAgfSxcblxuICB1bnN0cmluZ2lmeTogZnVuY3Rpb24gdW5zdHJpbmdpZnkoa2V5KSB7XG4gICAgcmV0dXJuIGtleS5zbGljZSgxKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdFN0cmluZ0tleTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldERlZmF1bHRLZXlCaW5kaW5nXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBLZXlCaW5kaW5nVXRpbCA9IHJlcXVpcmUoJy4vS2V5QmluZGluZ1V0aWwnKTtcbnZhciBLZXlzID0gcmVxdWlyZSgnZmJqcy9saWIvS2V5cycpO1xudmFyIFVzZXJBZ2VudCA9IHJlcXVpcmUoJ2ZianMvbGliL1VzZXJBZ2VudCcpO1xuXG52YXIgaXNPU1ggPSBVc2VyQWdlbnQuaXNQbGF0Zm9ybSgnTWFjIE9TIFgnKTtcbnZhciBpc1dpbmRvd3MgPSBVc2VyQWdlbnQuaXNQbGF0Zm9ybSgnV2luZG93cycpO1xuXG4vLyBGaXJlZm94IG9uIE9TWCBoYWQgYSBidWcgcmVzdWx0aW5nIGluIG5hdmlnYXRpb24gaW5zdGVhZCBvZiBjdXJzb3IgbW92ZW1lbnQuXG4vLyBUaGlzIGJ1ZyB3YXMgZml4ZWQgaW4gRmlyZWZveCAyOS4gRmVhdHVyZSBkZXRlY3Rpb24gaXMgdmlydHVhbGx5IGltcG9zc2libGVcbi8vIHNvIHdlIGp1c3QgY2hlY2sgdGhlIHZlcnNpb24gbnVtYmVyLiBTZWUgIzM0Mjc2NS5cbnZhciBzaG91bGRGaXhGaXJlZm94TW92ZW1lbnQgPSBpc09TWCAmJiBVc2VyQWdlbnQuaXNCcm93c2VyKCdGaXJlZm94IDwgMjknKTtcblxudmFyIGhhc0NvbW1hbmRNb2RpZmllciA9IEtleUJpbmRpbmdVdGlsLmhhc0NvbW1hbmRNb2RpZmllcixcbiAgICBpc0N0cmxLZXlDb21tYW5kID0gS2V5QmluZGluZ1V0aWwuaXNDdHJsS2V5Q29tbWFuZDtcblxuXG5mdW5jdGlvbiBzaG91bGRSZW1vdmVXb3JkKGUpIHtcbiAgcmV0dXJuIGlzT1NYICYmIGUuYWx0S2V5IHx8IGlzQ3RybEtleUNvbW1hbmQoZSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBhcHByb3ByaWF0ZSB1bmRvL3JlZG8gY29tbWFuZCBmb3IgYSBaIGtleSBjb21tYW5kLlxuICovXG5mdW5jdGlvbiBnZXRaQ29tbWFuZChlKSB7XG4gIGlmICghaGFzQ29tbWFuZE1vZGlmaWVyKGUpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGUuc2hpZnRLZXkgPyAncmVkbycgOiAndW5kbyc7XG59XG5cbmZ1bmN0aW9uIGdldERlbGV0ZUNvbW1hbmQoZSkge1xuICAvLyBBbGxvdyBkZWZhdWx0IFwiY3V0XCIgYmVoYXZpb3IgZm9yIFdpbmRvd3Mgb24gU2hpZnQgKyBEZWxldGUuXG4gIGlmIChpc1dpbmRvd3MgJiYgZS5zaGlmdEtleSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBzaG91bGRSZW1vdmVXb3JkKGUpID8gJ2RlbGV0ZS13b3JkJyA6ICdkZWxldGUnO1xufVxuXG5mdW5jdGlvbiBnZXRCYWNrc3BhY2VDb21tYW5kKGUpIHtcbiAgaWYgKGhhc0NvbW1hbmRNb2RpZmllcihlKSAmJiBpc09TWCkge1xuICAgIHJldHVybiAnYmFja3NwYWNlLXRvLXN0YXJ0LW9mLWxpbmUnO1xuICB9XG4gIHJldHVybiBzaG91bGRSZW1vdmVXb3JkKGUpID8gJ2JhY2tzcGFjZS13b3JkJyA6ICdiYWNrc3BhY2UnO1xufVxuXG4vKipcbiAqIFJldHJpZXZlIGEgYm91bmQga2V5IGNvbW1hbmQgZm9yIHRoZSBnaXZlbiBldmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdEtleUJpbmRpbmcoZSkge1xuICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgIGNhc2UgNjY6XG4gICAgICAvLyBCXG4gICAgICByZXR1cm4gaGFzQ29tbWFuZE1vZGlmaWVyKGUpID8gJ2JvbGQnIDogbnVsbDtcbiAgICBjYXNlIDY4OlxuICAgICAgLy8gRFxuICAgICAgcmV0dXJuIGlzQ3RybEtleUNvbW1hbmQoZSkgPyAnZGVsZXRlJyA6IG51bGw7XG4gICAgY2FzZSA3MjpcbiAgICAgIC8vIEhcbiAgICAgIHJldHVybiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ2JhY2tzcGFjZScgOiBudWxsO1xuICAgIGNhc2UgNzM6XG4gICAgICAvLyBJXG4gICAgICByZXR1cm4gaGFzQ29tbWFuZE1vZGlmaWVyKGUpID8gJ2l0YWxpYycgOiBudWxsO1xuICAgIGNhc2UgNzQ6XG4gICAgICAvLyBKXG4gICAgICByZXR1cm4gaGFzQ29tbWFuZE1vZGlmaWVyKGUpID8gJ2NvZGUnIDogbnVsbDtcbiAgICBjYXNlIDc1OlxuICAgICAgLy8gS1xuICAgICAgcmV0dXJuICFpc1dpbmRvd3MgJiYgaXNDdHJsS2V5Q29tbWFuZChlKSA/ICdzZWNvbmRhcnktY3V0JyA6IG51bGw7XG4gICAgY2FzZSA3NzpcbiAgICAgIC8vIE1cbiAgICAgIHJldHVybiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ3NwbGl0LWJsb2NrJyA6IG51bGw7XG4gICAgY2FzZSA3OTpcbiAgICAgIC8vIE9cbiAgICAgIHJldHVybiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ3NwbGl0LWJsb2NrJyA6IG51bGw7XG4gICAgY2FzZSA4NDpcbiAgICAgIC8vIFRcbiAgICAgIHJldHVybiBpc09TWCAmJiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ3RyYW5zcG9zZS1jaGFyYWN0ZXJzJyA6IG51bGw7XG4gICAgY2FzZSA4NTpcbiAgICAgIC8vIFVcbiAgICAgIHJldHVybiBoYXNDb21tYW5kTW9kaWZpZXIoZSkgPyAndW5kZXJsaW5lJyA6IG51bGw7XG4gICAgY2FzZSA4NzpcbiAgICAgIC8vIFdcbiAgICAgIHJldHVybiBpc09TWCAmJiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ2JhY2tzcGFjZS13b3JkJyA6IG51bGw7XG4gICAgY2FzZSA4OTpcbiAgICAgIC8vIFlcbiAgICAgIGlmIChpc0N0cmxLZXlDb21tYW5kKGUpKSB7XG4gICAgICAgIHJldHVybiBpc1dpbmRvd3MgPyAncmVkbycgOiAnc2Vjb25kYXJ5LXBhc3RlJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgOTA6XG4gICAgICAvLyBaXG4gICAgICByZXR1cm4gZ2V0WkNvbW1hbmQoZSkgfHwgbnVsbDtcbiAgICBjYXNlIEtleXMuUkVUVVJOOlxuICAgICAgcmV0dXJuICdzcGxpdC1ibG9jayc7XG4gICAgY2FzZSBLZXlzLkRFTEVURTpcbiAgICAgIHJldHVybiBnZXREZWxldGVDb21tYW5kKGUpO1xuICAgIGNhc2UgS2V5cy5CQUNLU1BBQ0U6XG4gICAgICByZXR1cm4gZ2V0QmFja3NwYWNlQ29tbWFuZChlKTtcbiAgICAvLyBMRUZUL1JJR0hUIGhhbmRsZXJzIHNlcnZlIGFzIGEgd29ya2Fyb3VuZCBmb3IgYSBGaXJlZm94IGJ1Zy5cbiAgICBjYXNlIEtleXMuTEVGVDpcbiAgICAgIHJldHVybiBzaG91bGRGaXhGaXJlZm94TW92ZW1lbnQgJiYgaGFzQ29tbWFuZE1vZGlmaWVyKGUpID8gJ21vdmUtc2VsZWN0aW9uLXRvLXN0YXJ0LW9mLWJsb2NrJyA6IG51bGw7XG4gICAgY2FzZSBLZXlzLlJJR0hUOlxuICAgICAgcmV0dXJuIHNob3VsZEZpeEZpcmVmb3hNb3ZlbWVudCAmJiBoYXNDb21tYW5kTW9kaWZpZXIoZSkgPyAnbW92ZS1zZWxlY3Rpb24tdG8tZW5kLW9mLWJsb2NrJyA6IG51bGw7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RGVmYXVsdEtleUJpbmRpbmc7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSaWNoVGV4dEVkaXRvclV0aWxcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0TW9kaWZpZXIgPSByZXF1aXJlKCcuL0RyYWZ0TW9kaWZpZXInKTtcbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcbnZhciBTZWxlY3Rpb25TdGF0ZSA9IHJlcXVpcmUoJy4vU2VsZWN0aW9uU3RhdGUnKTtcblxudmFyIGFkanVzdEJsb2NrRGVwdGhGb3JDb250ZW50U3RhdGUgPSByZXF1aXJlKCcuL2FkanVzdEJsb2NrRGVwdGhGb3JDb250ZW50U3RhdGUnKTtcbnZhciBudWxsdGhyb3dzID0gcmVxdWlyZSgnZmJqcy9saWIvbnVsbHRocm93cycpO1xuXG52YXIgUmljaFRleHRFZGl0b3JVdGlsID0ge1xuICBjdXJyZW50QmxvY2tDb250YWluc0xpbms6IGZ1bmN0aW9uIGN1cnJlbnRCbG9ja0NvbnRhaW5zTGluayhlZGl0b3JTdGF0ZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgY29udGVudFN0YXRlID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgZW50aXR5TWFwID0gY29udGVudFN0YXRlLmdldEVudGl0eU1hcCgpO1xuICAgIHJldHVybiBjb250ZW50U3RhdGUuZ2V0QmxvY2tGb3JLZXkoc2VsZWN0aW9uLmdldEFuY2hvcktleSgpKS5nZXRDaGFyYWN0ZXJMaXN0KCkuc2xpY2Uoc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCksIHNlbGVjdGlvbi5nZXRFbmRPZmZzZXQoKSkuc29tZShmdW5jdGlvbiAodikge1xuICAgICAgdmFyIGVudGl0eSA9IHYuZ2V0RW50aXR5KCk7XG4gICAgICByZXR1cm4gISFlbnRpdHkgJiYgZW50aXR5TWFwLl9fZ2V0KGVudGl0eSkuZ2V0VHlwZSgpID09PSAnTElOSyc7XG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0Q3VycmVudEJsb2NrVHlwZTogZnVuY3Rpb24gZ2V0Q3VycmVudEJsb2NrVHlwZShlZGl0b3JTdGF0ZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICByZXR1cm4gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKS5nZXRCbG9ja0ZvcktleShzZWxlY3Rpb24uZ2V0U3RhcnRLZXkoKSkuZ2V0VHlwZSgpO1xuICB9LFxuXG4gIGdldERhdGFPYmplY3RGb3JMaW5rVVJMOiBmdW5jdGlvbiBnZXREYXRhT2JqZWN0Rm9yTGlua1VSTCh1cmkpIHtcbiAgICByZXR1cm4geyB1cmw6IHVyaS50b1N0cmluZygpIH07XG4gIH0sXG5cbiAgaGFuZGxlS2V5Q29tbWFuZDogZnVuY3Rpb24gaGFuZGxlS2V5Q29tbWFuZChlZGl0b3JTdGF0ZSwgY29tbWFuZCkge1xuICAgIHN3aXRjaCAoY29tbWFuZCkge1xuICAgICAgY2FzZSAnYm9sZCc6XG4gICAgICAgIHJldHVybiBSaWNoVGV4dEVkaXRvclV0aWwudG9nZ2xlSW5saW5lU3R5bGUoZWRpdG9yU3RhdGUsICdCT0xEJyk7XG4gICAgICBjYXNlICdpdGFsaWMnOlxuICAgICAgICByZXR1cm4gUmljaFRleHRFZGl0b3JVdGlsLnRvZ2dsZUlubGluZVN0eWxlKGVkaXRvclN0YXRlLCAnSVRBTElDJyk7XG4gICAgICBjYXNlICd1bmRlcmxpbmUnOlxuICAgICAgICByZXR1cm4gUmljaFRleHRFZGl0b3JVdGlsLnRvZ2dsZUlubGluZVN0eWxlKGVkaXRvclN0YXRlLCAnVU5ERVJMSU5FJyk7XG4gICAgICBjYXNlICdjb2RlJzpcbiAgICAgICAgcmV0dXJuIFJpY2hUZXh0RWRpdG9yVXRpbC50b2dnbGVDb2RlKGVkaXRvclN0YXRlKTtcbiAgICAgIGNhc2UgJ2JhY2tzcGFjZSc6XG4gICAgICBjYXNlICdiYWNrc3BhY2Utd29yZCc6XG4gICAgICBjYXNlICdiYWNrc3BhY2UtdG8tc3RhcnQtb2YtbGluZSc6XG4gICAgICAgIHJldHVybiBSaWNoVGV4dEVkaXRvclV0aWwub25CYWNrc3BhY2UoZWRpdG9yU3RhdGUpO1xuICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgIGNhc2UgJ2RlbGV0ZS13b3JkJzpcbiAgICAgIGNhc2UgJ2RlbGV0ZS10by1lbmQtb2YtYmxvY2snOlxuICAgICAgICByZXR1cm4gUmljaFRleHRFZGl0b3JVdGlsLm9uRGVsZXRlKGVkaXRvclN0YXRlKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIHRoZXkgbWF5IGhhdmUgY3VzdG9tIGVkaXRvciBjb21tYW5kczsgaWdub3JlIHRob3NlXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcblxuICBpbnNlcnRTb2Z0TmV3bGluZTogZnVuY3Rpb24gaW5zZXJ0U29mdE5ld2xpbmUoZWRpdG9yU3RhdGUpIHtcbiAgICB2YXIgY29udGVudFN0YXRlID0gRHJhZnRNb2RpZmllci5pbnNlcnRUZXh0KGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCksIGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLCAnXFxuJywgZWRpdG9yU3RhdGUuZ2V0Q3VycmVudElubGluZVN0eWxlKCksIG51bGwpO1xuXG4gICAgdmFyIG5ld0VkaXRvclN0YXRlID0gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgY29udGVudFN0YXRlLCAnaW5zZXJ0LWNoYXJhY3RlcnMnKTtcblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5mb3JjZVNlbGVjdGlvbihuZXdFZGl0b3JTdGF0ZSwgY29udGVudFN0YXRlLmdldFNlbGVjdGlvbkFmdGVyKCkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGb3IgY29sbGFwc2VkIHNlbGVjdGlvbnMgYXQgdGhlIHN0YXJ0IG9mIHN0eWxlZCBibG9ja3MsIGJhY2tzcGFjZSBzaG91bGRcbiAgICoganVzdCByZW1vdmUgdGhlIGV4aXN0aW5nIHN0eWxlLlxuICAgKi9cbiAgb25CYWNrc3BhY2U6IGZ1bmN0aW9uIG9uQmFja3NwYWNlKGVkaXRvclN0YXRlKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIGlmICghc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgfHwgc2VsZWN0aW9uLmdldEFuY2hvck9mZnNldCgpIHx8IHNlbGVjdGlvbi5nZXRGb2N1c09mZnNldCgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBGaXJzdCwgdHJ5IHRvIHJlbW92ZSBhIHByZWNlZGluZyBhdG9taWMgYmxvY2suXG4gICAgdmFyIGNvbnRlbnQgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciBzdGFydEtleSA9IHNlbGVjdGlvbi5nZXRTdGFydEtleSgpO1xuICAgIHZhciBibG9ja0JlZm9yZSA9IGNvbnRlbnQuZ2V0QmxvY2tCZWZvcmUoc3RhcnRLZXkpO1xuXG4gICAgaWYgKGJsb2NrQmVmb3JlICYmIGJsb2NrQmVmb3JlLmdldFR5cGUoKSA9PT0gJ2F0b21pYycpIHtcbiAgICAgIHZhciBibG9ja01hcCA9IGNvbnRlbnQuZ2V0QmxvY2tNYXAoKVsnZGVsZXRlJ10oYmxvY2tCZWZvcmUuZ2V0S2V5KCkpO1xuICAgICAgdmFyIHdpdGhvdXRBdG9taWNCbG9jayA9IGNvbnRlbnQubWVyZ2Uoe1xuICAgICAgICBibG9ja01hcDogYmxvY2tNYXAsXG4gICAgICAgIHNlbGVjdGlvbkFmdGVyOiBzZWxlY3Rpb25cbiAgICAgIH0pO1xuICAgICAgaWYgKHdpdGhvdXRBdG9taWNCbG9jayAhPT0gY29udGVudCkge1xuICAgICAgICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgd2l0aG91dEF0b21pY0Jsb2NrLCAncmVtb3ZlLXJhbmdlJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgdGhhdCBkb2Vzbid0IHN1Y2NlZWQsIHRyeSB0byByZW1vdmUgdGhlIGN1cnJlbnQgYmxvY2sgc3R5bGUuXG4gICAgdmFyIHdpdGhvdXRCbG9ja1N0eWxlID0gUmljaFRleHRFZGl0b3JVdGlsLnRyeVRvUmVtb3ZlQmxvY2tTdHlsZShlZGl0b3JTdGF0ZSk7XG5cbiAgICBpZiAod2l0aG91dEJsb2NrU3R5bGUpIHtcbiAgICAgIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCB3aXRob3V0QmxvY2tTdHlsZSwgJ2NoYW5nZS1ibG9jay10eXBlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgb25EZWxldGU6IGZ1bmN0aW9uIG9uRGVsZXRlKGVkaXRvclN0YXRlKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIGlmICghc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgc3RhcnRLZXkgPSBzZWxlY3Rpb24uZ2V0U3RhcnRLZXkoKTtcbiAgICB2YXIgYmxvY2sgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KHN0YXJ0S2V5KTtcbiAgICB2YXIgbGVuZ3RoID0gYmxvY2suZ2V0TGVuZ3RoKCk7XG5cbiAgICAvLyBUaGUgY3Vyc29yIGlzIHNvbWV3aGVyZSB3aXRoaW4gdGhlIHRleHQuIEJlaGF2ZSBub3JtYWxseS5cbiAgICBpZiAoc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCkgPCBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBibG9ja0FmdGVyID0gY29udGVudC5nZXRCbG9ja0FmdGVyKHN0YXJ0S2V5KTtcblxuICAgIGlmICghYmxvY2tBZnRlciB8fCBibG9ja0FmdGVyLmdldFR5cGUoKSAhPT0gJ2F0b21pYycpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBhdG9taWNCbG9ja1RhcmdldCA9IHNlbGVjdGlvbi5tZXJnZSh7XG4gICAgICBmb2N1c0tleTogYmxvY2tBZnRlci5nZXRLZXkoKSxcbiAgICAgIGZvY3VzT2Zmc2V0OiBibG9ja0FmdGVyLmdldExlbmd0aCgpXG4gICAgfSk7XG5cbiAgICB2YXIgd2l0aG91dEF0b21pY0Jsb2NrID0gRHJhZnRNb2RpZmllci5yZW1vdmVSYW5nZShjb250ZW50LCBhdG9taWNCbG9ja1RhcmdldCwgJ2ZvcndhcmQnKTtcblxuICAgIGlmICh3aXRob3V0QXRvbWljQmxvY2sgIT09IGNvbnRlbnQpIHtcbiAgICAgIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCB3aXRob3V0QXRvbWljQmxvY2ssICdyZW1vdmUtcmFuZ2UnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICBvblRhYjogZnVuY3Rpb24gb25UYWIoZXZlbnQsIGVkaXRvclN0YXRlLCBtYXhEZXB0aCkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIga2V5ID0gc2VsZWN0aW9uLmdldEFuY2hvcktleSgpO1xuICAgIGlmIChrZXkgIT09IHNlbGVjdGlvbi5nZXRGb2N1c0tleSgpKSB7XG4gICAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRlbnQgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciBibG9jayA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoa2V5KTtcbiAgICB2YXIgdHlwZSA9IGJsb2NrLmdldFR5cGUoKTtcbiAgICBpZiAodHlwZSAhPT0gJ3Vub3JkZXJlZC1saXN0LWl0ZW0nICYmIHR5cGUgIT09ICdvcmRlcmVkLWxpc3QtaXRlbScpIHtcbiAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICB9XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgLy8gT25seSBhbGxvdyBpbmRlbnRpbmcgb25lIGxldmVsIGJleW9uZCB0aGUgYmxvY2sgYWJvdmUsIGFuZCBvbmx5IGlmXG4gICAgLy8gdGhlIGJsb2NrIGFib3ZlIGlzIGEgbGlzdCBpdGVtIGFzIHdlbGwuXG4gICAgdmFyIGJsb2NrQWJvdmUgPSBjb250ZW50LmdldEJsb2NrQmVmb3JlKGtleSk7XG4gICAgaWYgKCFibG9ja0Fib3ZlKSB7XG4gICAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIHR5cGVBYm92ZSA9IGJsb2NrQWJvdmUuZ2V0VHlwZSgpO1xuICAgIGlmICh0eXBlQWJvdmUgIT09ICd1bm9yZGVyZWQtbGlzdC1pdGVtJyAmJiB0eXBlQWJvdmUgIT09ICdvcmRlcmVkLWxpc3QtaXRlbScpIHtcbiAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgZGVwdGggPSBibG9jay5nZXREZXB0aCgpO1xuICAgIGlmICghZXZlbnQuc2hpZnRLZXkgJiYgZGVwdGggPT09IG1heERlcHRoKSB7XG4gICAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gICAgfVxuXG4gICAgbWF4RGVwdGggPSBNYXRoLm1pbihibG9ja0Fib3ZlLmdldERlcHRoKCkgKyAxLCBtYXhEZXB0aCk7XG5cbiAgICB2YXIgd2l0aEFkanVzdG1lbnQgPSBhZGp1c3RCbG9ja0RlcHRoRm9yQ29udGVudFN0YXRlKGNvbnRlbnQsIHNlbGVjdGlvbiwgZXZlbnQuc2hpZnRLZXkgPyAtMSA6IDEsIG1heERlcHRoKTtcblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCB3aXRoQWRqdXN0bWVudCwgJ2FkanVzdC1kZXB0aCcpO1xuICB9LFxuXG4gIHRvZ2dsZUJsb2NrVHlwZTogZnVuY3Rpb24gdG9nZ2xlQmxvY2tUeXBlKGVkaXRvclN0YXRlLCBibG9ja1R5cGUpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gICAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uLmdldFN0YXJ0S2V5KCk7XG4gICAgdmFyIGVuZEtleSA9IHNlbGVjdGlvbi5nZXRFbmRLZXkoKTtcbiAgICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIHRhcmdldCA9IHNlbGVjdGlvbjtcblxuICAgIC8vIFRyaXBsZS1jbGljayBjYW4gbGVhZCB0byBhIHNlbGVjdGlvbiB0aGF0IGluY2x1ZGVzIG9mZnNldCAwIG9mIHRoZVxuICAgIC8vIGZvbGxvd2luZyBibG9jay4gVGhlIGBTZWxlY3Rpb25TdGF0ZWAgZm9yIHRoaXMgY2FzZSBpcyBhY2N1cmF0ZSwgYnV0XG4gICAgLy8gd2Ugc2hvdWxkIGF2b2lkIHRvZ2dsaW5nIGJsb2NrIHR5cGUgZm9yIHRoZSB0cmFpbGluZyBibG9jayBiZWNhdXNlIGl0XG4gICAgLy8gaXMgYSBjb25mdXNpbmcgaW50ZXJhY3Rpb24uXG4gICAgaWYgKHN0YXJ0S2V5ICE9PSBlbmRLZXkgJiYgc2VsZWN0aW9uLmdldEVuZE9mZnNldCgpID09PSAwKSB7XG4gICAgICB2YXIgYmxvY2tCZWZvcmUgPSBudWxsdGhyb3dzKGNvbnRlbnQuZ2V0QmxvY2tCZWZvcmUoZW5kS2V5KSk7XG4gICAgICBlbmRLZXkgPSBibG9ja0JlZm9yZS5nZXRLZXkoKTtcbiAgICAgIHRhcmdldCA9IHRhcmdldC5tZXJnZSh7XG4gICAgICAgIGFuY2hvcktleTogc3RhcnRLZXksXG4gICAgICAgIGFuY2hvck9mZnNldDogc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCksXG4gICAgICAgIGZvY3VzS2V5OiBlbmRLZXksXG4gICAgICAgIGZvY3VzT2Zmc2V0OiBibG9ja0JlZm9yZS5nZXRMZW5ndGgoKSxcbiAgICAgICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBoYXNBdG9taWNCbG9jayA9IGNvbnRlbnQuZ2V0QmxvY2tNYXAoKS5za2lwV2hpbGUoZnVuY3Rpb24gKF8sIGspIHtcbiAgICAgIHJldHVybiBrICE9PSBzdGFydEtleTtcbiAgICB9KS5yZXZlcnNlKCkuc2tpcFdoaWxlKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgICByZXR1cm4gayAhPT0gZW5kS2V5O1xuICAgIH0pLnNvbWUoZnVuY3Rpb24gKHYpIHtcbiAgICAgIHJldHVybiB2LmdldFR5cGUoKSA9PT0gJ2F0b21pYyc7XG4gICAgfSk7XG5cbiAgICBpZiAoaGFzQXRvbWljQmxvY2spIHtcbiAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgdHlwZVRvU2V0ID0gY29udGVudC5nZXRCbG9ja0ZvcktleShzdGFydEtleSkuZ2V0VHlwZSgpID09PSBibG9ja1R5cGUgPyAndW5zdHlsZWQnIDogYmxvY2tUeXBlO1xuXG4gICAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIERyYWZ0TW9kaWZpZXIuc2V0QmxvY2tUeXBlKGNvbnRlbnQsIHRhcmdldCwgdHlwZVRvU2V0KSwgJ2NoYW5nZS1ibG9jay10eXBlJyk7XG4gIH0sXG5cbiAgdG9nZ2xlQ29kZTogZnVuY3Rpb24gdG9nZ2xlQ29kZShlZGl0b3JTdGF0ZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgYW5jaG9yS2V5ID0gc2VsZWN0aW9uLmdldEFuY2hvcktleSgpO1xuICAgIHZhciBmb2N1c0tleSA9IHNlbGVjdGlvbi5nZXRGb2N1c0tleSgpO1xuXG4gICAgaWYgKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpIHx8IGFuY2hvcktleSAhPT0gZm9jdXNLZXkpIHtcbiAgICAgIHJldHVybiBSaWNoVGV4dEVkaXRvclV0aWwudG9nZ2xlQmxvY2tUeXBlKGVkaXRvclN0YXRlLCAnY29kZS1ibG9jaycpO1xuICAgIH1cblxuICAgIHJldHVybiBSaWNoVGV4dEVkaXRvclV0aWwudG9nZ2xlSW5saW5lU3R5bGUoZWRpdG9yU3RhdGUsICdDT0RFJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRvZ2dsZSB0aGUgc3BlY2lmaWVkIGlubGluZSBzdHlsZSBmb3IgdGhlIHNlbGVjdGlvbi4gSWYgdGhlXG4gICAqIHVzZXIncyBzZWxlY3Rpb24gaXMgY29sbGFwc2VkLCBhcHBseSBvciByZW1vdmUgdGhlIHN0eWxlIGZvciB0aGVcbiAgICogaW50ZXJuYWwgc3RhdGUuIElmIGl0IGlzIG5vdCBjb2xsYXBzZWQsIGFwcGx5IHRoZSBjaGFuZ2UgZGlyZWN0bHlcbiAgICogdG8gdGhlIGRvY3VtZW50IHN0YXRlLlxuICAgKi9cbiAgdG9nZ2xlSW5saW5lU3R5bGU6IGZ1bmN0aW9uIHRvZ2dsZUlubGluZVN0eWxlKGVkaXRvclN0YXRlLCBpbmxpbmVTdHlsZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgY3VycmVudFN0eWxlID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudElubGluZVN0eWxlKCk7XG5cbiAgICAvLyBJZiB0aGUgc2VsZWN0aW9uIGlzIGNvbGxhcHNlZCwgdG9nZ2xlIHRoZSBzcGVjaWZpZWQgc3R5bGUgb24gb3Igb2ZmIGFuZFxuICAgIC8vIHNldCB0aGUgcmVzdWx0IGFzIHRoZSBuZXcgaW5saW5lIHN0eWxlIG92ZXJyaWRlLiBUaGlzIHdpbGwgdGhlbiBiZVxuICAgIC8vIHVzZWQgYXMgdGhlIGlubGluZSBzdHlsZSBmb3IgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGluc2VydGVkLlxuICAgIGlmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgICAgcmV0dXJuIEVkaXRvclN0YXRlLnNldElubGluZVN0eWxlT3ZlcnJpZGUoZWRpdG9yU3RhdGUsIGN1cnJlbnRTdHlsZS5oYXMoaW5saW5lU3R5bGUpID8gY3VycmVudFN0eWxlLnJlbW92ZShpbmxpbmVTdHlsZSkgOiBjdXJyZW50U3R5bGUuYWRkKGlubGluZVN0eWxlKSk7XG4gICAgfVxuXG4gICAgLy8gSWYgY2hhcmFjdGVycyBhcmUgc2VsZWN0ZWQsIGltbWVkaWF0ZWx5IGFwcGx5IG9yIHJlbW92ZSB0aGVcbiAgICAvLyBpbmxpbmUgc3R5bGUgb24gdGhlIGRvY3VtZW50IHN0YXRlIGl0c2VsZi5cbiAgICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIG5ld0NvbnRlbnQ7XG5cbiAgICAvLyBJZiB0aGUgc3R5bGUgaXMgYWxyZWFkeSBwcmVzZW50IGZvciB0aGUgc2VsZWN0aW9uIHJhbmdlLCByZW1vdmUgaXQuXG4gICAgLy8gT3RoZXJ3aXNlLCBhcHBseSBpdC5cbiAgICBpZiAoY3VycmVudFN0eWxlLmhhcyhpbmxpbmVTdHlsZSkpIHtcbiAgICAgIG5ld0NvbnRlbnQgPSBEcmFmdE1vZGlmaWVyLnJlbW92ZUlubGluZVN0eWxlKGNvbnRlbnQsIHNlbGVjdGlvbiwgaW5saW5lU3R5bGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdDb250ZW50ID0gRHJhZnRNb2RpZmllci5hcHBseUlubGluZVN0eWxlKGNvbnRlbnQsIHNlbGVjdGlvbiwgaW5saW5lU3R5bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBuZXdDb250ZW50LCAnY2hhbmdlLWlubGluZS1zdHlsZScpO1xuICB9LFxuXG4gIHRvZ2dsZUxpbms6IGZ1bmN0aW9uIHRvZ2dsZUxpbmsoZWRpdG9yU3RhdGUsIHRhcmdldFNlbGVjdGlvbiwgZW50aXR5S2V5KSB7XG4gICAgdmFyIHdpdGhvdXRMaW5rID0gRHJhZnRNb2RpZmllci5hcHBseUVudGl0eShlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCB0YXJnZXRTZWxlY3Rpb24sIGVudGl0eUtleSk7XG5cbiAgICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgd2l0aG91dExpbmssICdhcHBseS1lbnRpdHknKTtcbiAgfSxcblxuICAvKipcbiAgICogV2hlbiBhIGNvbGxhcHNlZCBjdXJzb3IgaXMgYXQgdGhlIHN0YXJ0IG9mIHRoZSBmaXJzdCBzdHlsZWQgYmxvY2ssIG9yXG4gICAqIGFuIGVtcHR5IHN0eWxlZCBibG9jaywgY2hhbmdlcyBibG9jayB0byAndW5zdHlsZWQnLiBSZXR1cm5zIG51bGwgaWZcbiAgICogYmxvY2sgb3Igc2VsZWN0aW9uIGRvZXMgbm90IG1lZXQgdGhhdCBjcml0ZXJpYS5cbiAgICovXG4gIHRyeVRvUmVtb3ZlQmxvY2tTdHlsZTogZnVuY3Rpb24gdHJ5VG9SZW1vdmVCbG9ja1N0eWxlKGVkaXRvclN0YXRlKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIHZhciBvZmZzZXQgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yT2Zmc2V0KCk7XG4gICAgaWYgKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpICYmIG9mZnNldCA9PT0gMCkge1xuICAgICAgdmFyIGtleSA9IHNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKTtcbiAgICAgIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICAgIHZhciBibG9jayA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoa2V5KTtcblxuICAgICAgdmFyIGZpcnN0QmxvY2sgPSBjb250ZW50LmdldEZpcnN0QmxvY2soKTtcbiAgICAgIGlmIChibG9jay5nZXRMZW5ndGgoKSA+IDAgJiYgYmxvY2sgIT09IGZpcnN0QmxvY2spIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciB0eXBlID0gYmxvY2suZ2V0VHlwZSgpO1xuICAgICAgdmFyIGJsb2NrQmVmb3JlID0gY29udGVudC5nZXRCbG9ja0JlZm9yZShrZXkpO1xuICAgICAgaWYgKHR5cGUgPT09ICdjb2RlLWJsb2NrJyAmJiBibG9ja0JlZm9yZSAmJiBibG9ja0JlZm9yZS5nZXRUeXBlKCkgPT09ICdjb2RlLWJsb2NrJyAmJiBibG9ja0JlZm9yZS5nZXRMZW5ndGgoKSAhPT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgIT09ICd1bnN0eWxlZCcpIHtcbiAgICAgICAgcmV0dXJuIERyYWZ0TW9kaWZpZXIuc2V0QmxvY2tUeXBlKGNvbnRlbnQsIHNlbGVjdGlvbiwgJ3Vuc3R5bGVkJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJpY2hUZXh0RWRpdG9yVXRpbDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldFNhZmVCb2R5RnJvbUhUTUxcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFVzZXJBZ2VudCA9IHJlcXVpcmUoJ2ZianMvbGliL1VzZXJBZ2VudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBpc09sZElFID0gVXNlckFnZW50LmlzQnJvd3NlcignSUUgPD0gOScpO1xuXG4vLyBQcm92aWRlcyBhIGRvbSBub2RlIHRoYXQgd2lsbCBub3QgZXhlY3V0ZSBzY3JpcHRzXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRE9NSW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9BZGQtb25zL0NvZGVfc25pcHBldHMvSFRNTF90b19ET01cblxuZnVuY3Rpb24gZ2V0U2FmZUJvZHlGcm9tSFRNTChodG1sKSB7XG4gIHZhciBkb2M7XG4gIHZhciByb290ID0gbnVsbDtcbiAgLy8gUHJvdmlkZXMgYSBzYWZlIGNvbnRleHRcbiAgaWYgKCFpc09sZElFICYmIGRvY3VtZW50LmltcGxlbWVudGF0aW9uICYmIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCkge1xuICAgIGRvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgnZm9vJyk7XG4gICAgIWRvYy5kb2N1bWVudEVsZW1lbnQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWlzc2luZyBkb2MuZG9jdW1lbnRFbGVtZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGRvYy5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbDtcbiAgICByb290ID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gIH1cbiAgcmV0dXJuIHJvb3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U2FmZUJvZHlGcm9tSFRNTDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNvbnZlcnRGcm9tSFRNTFRvQ29udGVudEJsb2Nrc1xuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBfYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2tub3duTGlzdEl0ZW1EZXB0aENsLFxuICAgIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyTWV0YWRhdGEnKTtcbnZhciBDb250ZW50QmxvY2sgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9jaycpO1xudmFyIENvbnRlbnRCbG9ja05vZGUgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9ja05vZGUnKTtcbnZhciBEZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcCA9IHJlcXVpcmUoJy4vRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXAnKTtcbnZhciBEcmFmdEVudGl0eSA9IHJlcXVpcmUoJy4vRHJhZnRFbnRpdHknKTtcbnZhciBEcmFmdEZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vRHJhZnRGZWF0dXJlRmxhZ3MnKTtcbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyksXG4gICAgU2V0ID0gX3JlcXVpcmUuU2V0O1xuXG52YXIgVVJJID0gcmVxdWlyZSgnZmJqcy9saWIvVVJJJyk7XG5cbnZhciBjeCA9IHJlcXVpcmUoJ2ZianMvbGliL2N4Jyk7XG52YXIgZ2VuZXJhdGVSYW5kb21LZXkgPSByZXF1aXJlKCcuL2dlbmVyYXRlUmFuZG9tS2V5Jyk7XG52YXIgZ2V0U2FmZUJvZHlGcm9tSFRNTCA9IHJlcXVpcmUoJy4vZ2V0U2FmZUJvZHlGcm9tSFRNTCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHNhbml0aXplRHJhZnRUZXh0ID0gcmVxdWlyZSgnLi9zYW5pdGl6ZURyYWZ0VGV4dCcpO1xuXG52YXIgZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0ID0gRHJhZnRGZWF0dXJlRmxhZ3MuZHJhZnRfdHJlZV9kYXRhX3N1cHBvcnQ7XG5cbnZhciBMaXN0ID0gSW1tdXRhYmxlLkxpc3QsXG4gICAgT3JkZXJlZFNldCA9IEltbXV0YWJsZS5PcmRlcmVkU2V0O1xuXG5cbnZhciBOQlNQID0gJyZuYnNwOyc7XG52YXIgU1BBQ0UgPSAnICc7XG5cbi8vIEFyYml0cmFyeSBtYXggaW5kZW50XG52YXIgTUFYX0RFUFRIID0gNDtcblxuLy8gdXNlZCBmb3IgcmVwbGFjaW5nIGNoYXJhY3RlcnMgaW4gSFRNTFxudmFyIFJFR0VYX0NSID0gbmV3IFJlZ0V4cCgnXFxyJywgJ2cnKTtcbnZhciBSRUdFWF9MRiA9IG5ldyBSZWdFeHAoJ1xcbicsICdnJyk7XG52YXIgUkVHRVhfTkJTUCA9IG5ldyBSZWdFeHAoTkJTUCwgJ2cnKTtcbnZhciBSRUdFWF9DQVJSSUFHRSA9IG5ldyBSZWdFeHAoJyYjMTM7PycsICdnJyk7XG52YXIgUkVHRVhfWldTID0gbmV3IFJlZ0V4cCgnJiM4MjAzOz8nLCAnZycpO1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udC13ZWlnaHRcbnZhciBib2xkVmFsdWVzID0gWydib2xkJywgJ2JvbGRlcicsICc1MDAnLCAnNjAwJywgJzcwMCcsICc4MDAnLCAnOTAwJ107XG52YXIgbm90Qm9sZFZhbHVlcyA9IFsnbGlnaHQnLCAnbGlnaHRlcicsICcxMDAnLCAnMjAwJywgJzMwMCcsICc0MDAnXTtcblxuLy8gQmxvY2sgdGFnIGZsb3cgaXMgZGlmZmVyZW50IGJlY2F1c2UgTElzIGRvIG5vdCBoYXZlXG4vLyBhIGRldGVybWluaXN0aWMgc3R5bGUgO187XG52YXIgaW5saW5lVGFncyA9IHtcbiAgYjogJ0JPTEQnLFxuICBjb2RlOiAnQ09ERScsXG4gIGRlbDogJ1NUUklLRVRIUk9VR0gnLFxuICBlbTogJ0lUQUxJQycsXG4gIGk6ICdJVEFMSUMnLFxuICBzOiAnU1RSSUtFVEhST1VHSCcsXG4gIHN0cmlrZTogJ1NUUklLRVRIUk9VR0gnLFxuICBzdHJvbmc6ICdCT0xEJyxcbiAgdTogJ1VOREVSTElORSdcbn07XG5cbnZhciBrbm93bkxpc3RJdGVtRGVwdGhDbGFzc2VzID0gKF9rbm93bkxpc3RJdGVtRGVwdGhDbCA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2tub3duTGlzdEl0ZW1EZXB0aENsLCBjeCgncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2RlcHRoMCcpLCAwKSwgX2RlZmluZVByb3BlcnR5KF9rbm93bkxpc3RJdGVtRGVwdGhDbCwgY3goJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9kZXB0aDEnKSwgMSksIF9kZWZpbmVQcm9wZXJ0eShfa25vd25MaXN0SXRlbURlcHRoQ2wsIGN4KCdwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvZGVwdGgyJyksIDIpLCBfZGVmaW5lUHJvcGVydHkoX2tub3duTGlzdEl0ZW1EZXB0aENsLCBjeCgncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2RlcHRoMycpLCAzKSwgX2RlZmluZVByb3BlcnR5KF9rbm93bkxpc3RJdGVtRGVwdGhDbCwgY3goJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9kZXB0aDQnKSwgNCksIF9rbm93bkxpc3RJdGVtRGVwdGhDbCk7XG5cbnZhciBhbmNob3JBdHRyID0gWydjbGFzc05hbWUnLCAnaHJlZicsICdyZWwnLCAndGFyZ2V0JywgJ3RpdGxlJ107XG5cbnZhciBpbWdBdHRyID0gWydhbHQnLCAnY2xhc3NOYW1lJywgJ2hlaWdodCcsICdzcmMnLCAnd2lkdGgnXTtcblxudmFyIGxhc3RCbG9jayA9IHZvaWQgMDtcblxudmFyIEVNUFRZX0NIVU5LID0ge1xuICB0ZXh0OiAnJyxcbiAgaW5saW5lczogW10sXG4gIGVudGl0aWVzOiBbXSxcbiAgYmxvY2tzOiBbXVxufTtcblxudmFyIEVNUFRZX0JMT0NLID0ge1xuICBjaGlsZHJlbjogTGlzdCgpLFxuICBkZXB0aDogMCxcbiAga2V5OiAnJyxcbiAgdHlwZTogJydcbn07XG5cbnZhciBnZXRMaXN0QmxvY2tUeXBlID0gZnVuY3Rpb24gZ2V0TGlzdEJsb2NrVHlwZSh0YWcsIGxhc3RMaXN0KSB7XG4gIGlmICh0YWcgPT09ICdsaScpIHtcbiAgICByZXR1cm4gbGFzdExpc3QgPT09ICdvbCcgPyAnb3JkZXJlZC1saXN0LWl0ZW0nIDogJ3Vub3JkZXJlZC1saXN0LWl0ZW0nO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIGdldEJsb2NrTWFwU3VwcG9ydGVkVGFncyA9IGZ1bmN0aW9uIGdldEJsb2NrTWFwU3VwcG9ydGVkVGFncyhibG9ja1JlbmRlck1hcCkge1xuICB2YXIgdW5zdHlsZWRFbGVtZW50ID0gYmxvY2tSZW5kZXJNYXAuZ2V0KCd1bnN0eWxlZCcpLmVsZW1lbnQ7XG4gIHZhciB0YWdzID0gU2V0KFtdKTtcblxuICBibG9ja1JlbmRlck1hcC5mb3JFYWNoKGZ1bmN0aW9uIChkcmFmdEJsb2NrKSB7XG4gICAgaWYgKGRyYWZ0QmxvY2suYWxpYXNlZEVsZW1lbnRzKSB7XG4gICAgICBkcmFmdEJsb2NrLmFsaWFzZWRFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgdGFncyA9IHRhZ3MuYWRkKHRhZyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0YWdzID0gdGFncy5hZGQoZHJhZnRCbG9jay5lbGVtZW50KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRhZ3MuZmlsdGVyKGZ1bmN0aW9uICh0YWcpIHtcbiAgICByZXR1cm4gdGFnICYmIHRhZyAhPT0gdW5zdHlsZWRFbGVtZW50O1xuICB9KS50b0FycmF5KCkuc29ydCgpO1xufTtcblxuLy8gY3VzdG9tIGVsZW1lbnQgY29udmVyc2lvbnNcbnZhciBnZXRNdWx0aU1hdGNoZWRUeXBlID0gZnVuY3Rpb24gZ2V0TXVsdGlNYXRjaGVkVHlwZSh0YWcsIGxhc3RMaXN0LCBtdWx0aU1hdGNoRXh0cmFjdG9yKSB7XG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCBtdWx0aU1hdGNoRXh0cmFjdG9yLmxlbmd0aDsgaWkrKykge1xuICAgIHZhciBtYXRjaFR5cGUgPSBtdWx0aU1hdGNoRXh0cmFjdG9yW2lpXSh0YWcsIGxhc3RMaXN0KTtcbiAgICBpZiAobWF0Y2hUeXBlKSB7XG4gICAgICByZXR1cm4gbWF0Y2hUeXBlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBnZXRCbG9ja1R5cGVGb3JUYWcgPSBmdW5jdGlvbiBnZXRCbG9ja1R5cGVGb3JUYWcodGFnLCBsYXN0TGlzdCwgYmxvY2tSZW5kZXJNYXApIHtcbiAgdmFyIG1hdGNoZWRUeXBlcyA9IGJsb2NrUmVuZGVyTWFwLmZpbHRlcihmdW5jdGlvbiAoZHJhZnRCbG9jaykge1xuICAgIHJldHVybiBkcmFmdEJsb2NrLmVsZW1lbnQgPT09IHRhZyB8fCBkcmFmdEJsb2NrLndyYXBwZXIgPT09IHRhZyB8fCBkcmFmdEJsb2NrLmFsaWFzZWRFbGVtZW50cyAmJiBkcmFmdEJsb2NrLmFsaWFzZWRFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgcmV0dXJuIGFsaWFzID09PSB0YWc7XG4gICAgfSk7XG4gIH0pLmtleVNlcSgpLnRvU2V0KCkudG9BcnJheSgpLnNvcnQoKTtcblxuICAvLyBpZiB3ZSBkb250IGhhdmUgYW55IG1hdGNoZWQgdHlwZSwgcmV0dXJuIHVuc3R5bGVkXG4gIC8vIGlmIHdlIGhhdmUgb25lIG1hdGNoZWQgdHlwZSByZXR1cm4gaXRcbiAgLy8gaWYgd2UgaGF2ZSBtdWx0aSBtYXRjaGVkIHR5cGVzIHVzZSB0aGUgbXVsdGktbWF0Y2ggZnVuY3Rpb24gdG8gZ2F0aGVyIHR5cGVcbiAgc3dpdGNoIChtYXRjaGVkVHlwZXMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuICd1bnN0eWxlZCc7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIG1hdGNoZWRUeXBlc1swXTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGdldE11bHRpTWF0Y2hlZFR5cGUodGFnLCBsYXN0TGlzdCwgW2dldExpc3RCbG9ja1R5cGVdKSB8fCAndW5zdHlsZWQnO1xuICB9XG59O1xuXG52YXIgcHJvY2Vzc0lubGluZVRhZyA9IGZ1bmN0aW9uIHByb2Nlc3NJbmxpbmVUYWcodGFnLCBub2RlLCBjdXJyZW50U3R5bGUpIHtcbiAgdmFyIHN0eWxlVG9DaGVjayA9IGlubGluZVRhZ3NbdGFnXTtcbiAgaWYgKHN0eWxlVG9DaGVjaykge1xuICAgIGN1cnJlbnRTdHlsZSA9IGN1cnJlbnRTdHlsZS5hZGQoc3R5bGVUb0NoZWNrKS50b09yZGVyZWRTZXQoKTtcbiAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICB2YXIgaHRtbEVsZW1lbnQgPSBub2RlO1xuICAgIGN1cnJlbnRTdHlsZSA9IGN1cnJlbnRTdHlsZS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgdmFyIGZvbnRXZWlnaHQgPSBodG1sRWxlbWVudC5zdHlsZS5mb250V2VpZ2h0O1xuICAgICAgdmFyIGZvbnRTdHlsZSA9IGh0bWxFbGVtZW50LnN0eWxlLmZvbnRTdHlsZTtcbiAgICAgIHZhciB0ZXh0RGVjb3JhdGlvbiA9IGh0bWxFbGVtZW50LnN0eWxlLnRleHREZWNvcmF0aW9uO1xuXG4gICAgICBpZiAoYm9sZFZhbHVlcy5pbmRleE9mKGZvbnRXZWlnaHQpID49IDApIHtcbiAgICAgICAgc3R5bGUuYWRkKCdCT0xEJyk7XG4gICAgICB9IGVsc2UgaWYgKG5vdEJvbGRWYWx1ZXMuaW5kZXhPZihmb250V2VpZ2h0KSA+PSAwKSB7XG4gICAgICAgIHN0eWxlLnJlbW92ZSgnQk9MRCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9udFN0eWxlID09PSAnaXRhbGljJykge1xuICAgICAgICBzdHlsZS5hZGQoJ0lUQUxJQycpO1xuICAgICAgfSBlbHNlIGlmIChmb250U3R5bGUgPT09ICdub3JtYWwnKSB7XG4gICAgICAgIHN0eWxlLnJlbW92ZSgnSVRBTElDJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0RGVjb3JhdGlvbiA9PT0gJ3VuZGVybGluZScpIHtcbiAgICAgICAgc3R5bGUuYWRkKCdVTkRFUkxJTkUnKTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZXh0RGVjb3JhdGlvbiA9PT0gJ2xpbmUtdGhyb3VnaCcpIHtcbiAgICAgICAgc3R5bGUuYWRkKCdTVFJJS0VUSFJPVUdIJyk7XG4gICAgICB9XG4gICAgICBpZiAodGV4dERlY29yYXRpb24gPT09ICdub25lJykge1xuICAgICAgICBzdHlsZS5yZW1vdmUoJ1VOREVSTElORScpO1xuICAgICAgICBzdHlsZS5yZW1vdmUoJ1NUUklLRVRIUk9VR0gnKTtcbiAgICAgIH1cbiAgICB9KS50b09yZGVyZWRTZXQoKTtcbiAgfVxuICByZXR1cm4gY3VycmVudFN0eWxlO1xufTtcblxudmFyIGpvaW5DaHVua3MgPSBmdW5jdGlvbiBqb2luQ2h1bmtzKEEsIEIsIGV4cGVyaW1lbnRhbEhhc05lc3RlZEJsb2Nrcykge1xuICAvLyBTb21ldGltZXMgdHdvIGJsb2NrcyB3aWxsIHRvdWNoIGluIHRoZSBET00gYW5kIHdlIG5lZWQgdG8gc3RyaXAgdGhlXG4gIC8vIGV4dHJhIGRlbGltaXRlciB0byBwcmVzZXJ2ZSBuaWNlbmVzcy5cbiAgdmFyIGxhc3RJbkEgPSBBLnRleHQuc2xpY2UoLTEpO1xuICB2YXIgZmlyc3RJbkIgPSBCLnRleHQuc2xpY2UoMCwgMSk7XG5cbiAgaWYgKGxhc3RJbkEgPT09ICdcXHInICYmIGZpcnN0SW5CID09PSAnXFxyJyAmJiAhZXhwZXJpbWVudGFsSGFzTmVzdGVkQmxvY2tzKSB7XG4gICAgQS50ZXh0ID0gQS50ZXh0LnNsaWNlKDAsIC0xKTtcbiAgICBBLmlubGluZXMucG9wKCk7XG4gICAgQS5lbnRpdGllcy5wb3AoKTtcbiAgICBBLmJsb2Nrcy5wb3AoKTtcbiAgfVxuXG4gIC8vIEtpbGwgd2hpdGVzcGFjZSBhZnRlciBibG9ja3NcbiAgaWYgKGxhc3RJbkEgPT09ICdcXHInKSB7XG4gICAgaWYgKEIudGV4dCA9PT0gU1BBQ0UgfHwgQi50ZXh0ID09PSAnXFxuJykge1xuICAgICAgcmV0dXJuIEE7XG4gICAgfSBlbHNlIGlmIChmaXJzdEluQiA9PT0gU1BBQ0UgfHwgZmlyc3RJbkIgPT09ICdcXG4nKSB7XG4gICAgICBCLnRleHQgPSBCLnRleHQuc2xpY2UoMSk7XG4gICAgICBCLmlubGluZXMuc2hpZnQoKTtcbiAgICAgIEIuZW50aXRpZXMuc2hpZnQoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRleHQ6IEEudGV4dCArIEIudGV4dCxcbiAgICBpbmxpbmVzOiBBLmlubGluZXMuY29uY2F0KEIuaW5saW5lcyksXG4gICAgZW50aXRpZXM6IEEuZW50aXRpZXMuY29uY2F0KEIuZW50aXRpZXMpLFxuICAgIGJsb2NrczogQS5ibG9ja3MuY29uY2F0KEIuYmxvY2tzKVxuICB9O1xufTtcblxuLyoqXG4gKiBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhbnl0aGluZyBsaWtlIDxwPiA8YmxvY2txdW90ZT4gPGgxPi4uLiB0byBjcmVhdGVcbiAqIGJsb2NrIHRhZ3MgZnJvbS4gSWYgd2UgZG8sIHdlIGNhbiB1c2UgdGhvc2UgYW5kIGlnbm9yZSA8ZGl2PiB0YWdzLiBJZiB3ZVxuICogZG9uJ3QsIHdlIGNhbiB0cmVhdCA8ZGl2PiB0YWdzIGFzIG1lYW5pbmdmdWwgKHVuc3R5bGVkKSBibG9ja3MuXG4gKi9cbnZhciBjb250YWluc1NlbWFudGljQmxvY2tNYXJrdXAgPSBmdW5jdGlvbiBjb250YWluc1NlbWFudGljQmxvY2tNYXJrdXAoaHRtbCwgYmxvY2tUYWdzKSB7XG4gIHJldHVybiBibG9ja1RhZ3Muc29tZShmdW5jdGlvbiAodGFnKSB7XG4gICAgcmV0dXJuIGh0bWwuaW5kZXhPZignPCcgKyB0YWcpICE9PSAtMTtcbiAgfSk7XG59O1xuXG52YXIgaGFzVmFsaWRMaW5rVGV4dCA9IGZ1bmN0aW9uIGhhc1ZhbGlkTGlua1RleHQobGluaykge1xuICAhKGxpbmsgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTGluayBtdXN0IGJlIGFuIEhUTUxBbmNob3JFbGVtZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIHByb3RvY29sID0gbGluay5wcm90b2NvbDtcbiAgcmV0dXJuIHByb3RvY29sID09PSAnaHR0cDonIHx8IHByb3RvY29sID09PSAnaHR0cHM6JyB8fCBwcm90b2NvbCA9PT0gJ21haWx0bzonO1xufTtcblxudmFyIGdldFdoaXRlc3BhY2VDaHVuayA9IGZ1bmN0aW9uIGdldFdoaXRlc3BhY2VDaHVuayhpbkVudGl0eSkge1xuICB2YXIgZW50aXRpZXMgPSBuZXcgQXJyYXkoMSk7XG4gIGlmIChpbkVudGl0eSkge1xuICAgIGVudGl0aWVzWzBdID0gaW5FbnRpdHk7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBFTVBUWV9DSFVOSywge1xuICAgIHRleHQ6IFNQQUNFLFxuICAgIGlubGluZXM6IFtPcmRlcmVkU2V0KCldLFxuICAgIGVudGl0aWVzOiBlbnRpdGllc1xuICB9KTtcbn07XG5cbnZhciBnZXRTb2Z0TmV3bGluZUNodW5rID0gZnVuY3Rpb24gZ2V0U29mdE5ld2xpbmVDaHVuaygpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBFTVBUWV9DSFVOSywge1xuICAgIHRleHQ6ICdcXG4nLFxuICAgIGlubGluZXM6IFtPcmRlcmVkU2V0KCldLFxuICAgIGVudGl0aWVzOiBuZXcgQXJyYXkoMSlcbiAgfSk7XG59O1xuXG52YXIgZ2V0Q2h1bmtlZEJsb2NrID0gZnVuY3Rpb24gZ2V0Q2h1bmtlZEJsb2NrKCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgRU1QVFlfQkxPQ0ssIHByb3BzKTtcbn07XG5cbnZhciBnZXRCbG9ja0RpdmlkZXJDaHVuayA9IGZ1bmN0aW9uIGdldEJsb2NrRGl2aWRlckNodW5rKGJsb2NrLCBkZXB0aCkge1xuICB2YXIgcGFyZW50S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuXG4gIHJldHVybiB7XG4gICAgdGV4dDogJ1xccicsXG4gICAgaW5saW5lczogW09yZGVyZWRTZXQoKV0sXG4gICAgZW50aXRpZXM6IG5ldyBBcnJheSgxKSxcbiAgICBibG9ja3M6IFtnZXRDaHVua2VkQmxvY2soe1xuICAgICAgcGFyZW50OiBwYXJlbnRLZXksXG4gICAgICBrZXk6IGdlbmVyYXRlUmFuZG9tS2V5KCksXG4gICAgICB0eXBlOiBibG9jayxcbiAgICAgIGRlcHRoOiBNYXRoLm1heCgwLCBNYXRoLm1pbihNQVhfREVQVEgsIGRlcHRoKSlcbiAgICB9KV1cbiAgfTtcbn07XG5cbi8qKlxuICogIElmIHdlJ3JlIHBhc3RpbmcgZnJvbSBvbmUgRHJhZnRFZGl0b3IgdG8gYW5vdGhlciB3ZSBjYW4gY2hlY2sgdG8gc2VlIGlmXG4gKiAgZXhpc3RpbmcgbGlzdCBpdGVtIGRlcHRoIGNsYXNzZXMgYXJlIGJlaW5nIHVzZWQgYW5kIHByZXNlcnZlIHRoaXMgc3R5bGVcbiAqL1xudmFyIGdldExpc3RJdGVtRGVwdGggPSBmdW5jdGlvbiBnZXRMaXN0SXRlbURlcHRoKG5vZGUpIHtcbiAgdmFyIGRlcHRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG4gIE9iamVjdC5rZXlzKGtub3duTGlzdEl0ZW1EZXB0aENsYXNzZXMpLnNvbWUoZnVuY3Rpb24gKGRlcHRoQ2xhc3MpIHtcbiAgICBpZiAobm9kZS5jbGFzc0xpc3QuY29udGFpbnMoZGVwdGhDbGFzcykpIHtcbiAgICAgIGRlcHRoID0ga25vd25MaXN0SXRlbURlcHRoQ2xhc3Nlc1tkZXB0aENsYXNzXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGVwdGg7XG59O1xuXG52YXIgZ2VuRnJhZ21lbnQgPSBmdW5jdGlvbiBnZW5GcmFnbWVudChlbnRpdHlNYXAsIG5vZGUsIGlubGluZVN0eWxlLCBsYXN0TGlzdCwgaW5CbG9jaywgYmxvY2tUYWdzLCBkZXB0aCwgYmxvY2tSZW5kZXJNYXAsIGluRW50aXR5LCBwYXJlbnRLZXkpIHtcbiAgdmFyIGxhc3RMYXN0QmxvY2sgPSBsYXN0QmxvY2s7XG4gIHZhciBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgdmFyIG5ld0VudGl0eU1hcCA9IGVudGl0eU1hcDtcbiAgdmFyIG5leHRCbG9ja1R5cGUgPSAndW5zdHlsZWQnO1xuICB2YXIgbmV3QmxvY2sgPSBmYWxzZTtcbiAgdmFyIGluQmxvY2tUeXBlID0gaW5CbG9jayAmJiBnZXRCbG9ja1R5cGVGb3JUYWcoaW5CbG9jaywgbGFzdExpc3QsIGJsb2NrUmVuZGVyTWFwKTtcbiAgdmFyIGNodW5rID0gX2V4dGVuZHMoe30sIEVNUFRZX0NIVU5LKTtcbiAgdmFyIG5ld0NodW5rID0gbnVsbDtcbiAgdmFyIGJsb2NrS2V5ID0gdm9pZCAwO1xuXG4gIC8vIEJhc2UgQ2FzZVxuICBpZiAobm9kZU5hbWUgPT09ICcjdGV4dCcpIHtcbiAgICB2YXIgX3RleHQgPSBub2RlLnRleHRDb250ZW50O1xuICAgIHZhciBub2RlVGV4dENvbnRlbnQgPSBfdGV4dC50cmltKCk7XG5cbiAgICAvLyBXZSBzaG91bGQgbm90IGNyZWF0ZSBibG9ja3MgZm9yIGxlYWRpbmcgc3BhY2VzIHRoYXQgYXJlXG4gICAgLy8gZXhpc3RpbmcgYXJvdW5kIG9sL3VsIGFuZCB0aGVpciBjaGlsZHJlbiBsaXN0IGl0ZW1zXG4gICAgaWYgKGxhc3RMaXN0ICYmIG5vZGVUZXh0Q29udGVudCA9PT0gJycgJiYgbm9kZS5wYXJlbnRFbGVtZW50KSB7XG4gICAgICB2YXIgcGFyZW50Tm9kZU5hbWUgPSBub2RlLnBhcmVudEVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChwYXJlbnROb2RlTmFtZSA9PT0gJ29sJyB8fCBwYXJlbnROb2RlTmFtZSA9PT0gJ3VsJykge1xuICAgICAgICByZXR1cm4geyBjaHVuazogX2V4dGVuZHMoe30sIEVNUFRZX0NIVU5LKSwgZW50aXR5TWFwOiBlbnRpdHlNYXAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobm9kZVRleHRDb250ZW50ID09PSAnJyAmJiBpbkJsb2NrICE9PSAncHJlJykge1xuICAgICAgcmV0dXJuIHsgY2h1bms6IGdldFdoaXRlc3BhY2VDaHVuayhpbkVudGl0eSksIGVudGl0eU1hcDogZW50aXR5TWFwIH07XG4gICAgfVxuICAgIGlmIChpbkJsb2NrICE9PSAncHJlJykge1xuICAgICAgLy8gQ2FuJ3QgdXNlIGVtcHR5IHN0cmluZyBiZWNhdXNlIE1TV29yZFxuICAgICAgX3RleHQgPSBfdGV4dC5yZXBsYWNlKFJFR0VYX0xGLCBTUEFDRSk7XG4gICAgfVxuXG4gICAgLy8gc2F2ZSB0aGUgbGFzdCBibG9jayBzbyB3ZSBjYW4gdXNlIGl0IGxhdGVyXG4gICAgbGFzdEJsb2NrID0gbm9kZU5hbWU7XG5cbiAgICByZXR1cm4ge1xuICAgICAgY2h1bms6IHtcbiAgICAgICAgdGV4dDogX3RleHQsXG4gICAgICAgIGlubGluZXM6IEFycmF5KF90ZXh0Lmxlbmd0aCkuZmlsbChpbmxpbmVTdHlsZSksXG4gICAgICAgIGVudGl0aWVzOiBBcnJheShfdGV4dC5sZW5ndGgpLmZpbGwoaW5FbnRpdHkpLFxuICAgICAgICBibG9ja3M6IFtdXG4gICAgICB9LFxuICAgICAgZW50aXR5TWFwOiBlbnRpdHlNYXBcbiAgICB9O1xuICB9XG5cbiAgLy8gc2F2ZSB0aGUgbGFzdCBibG9jayBzbyB3ZSBjYW4gdXNlIGl0IGxhdGVyXG4gIGxhc3RCbG9jayA9IG5vZGVOYW1lO1xuXG4gIC8vIEJSIHRhZ3NcbiAgaWYgKG5vZGVOYW1lID09PSAnYnInKSB7XG4gICAgaWYgKGxhc3RMYXN0QmxvY2sgPT09ICdicicgJiYgKCFpbkJsb2NrIHx8IGluQmxvY2tUeXBlID09PSAndW5zdHlsZWQnKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2h1bms6IGdldEJsb2NrRGl2aWRlckNodW5rKCd1bnN0eWxlZCcsIGRlcHRoLCBwYXJlbnRLZXkpLFxuICAgICAgICBlbnRpdHlNYXA6IGVudGl0eU1hcFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgY2h1bms6IGdldFNvZnROZXdsaW5lQ2h1bmsoKSwgZW50aXR5TWFwOiBlbnRpdHlNYXAgfTtcbiAgfVxuXG4gIC8vIElNRyB0YWdzXG4gIGlmIChub2RlTmFtZSA9PT0gJ2ltZycgJiYgbm9kZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgJiYgbm9kZS5hdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnc3JjJykgJiYgbm9kZS5hdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnc3JjJykudmFsdWUpIHtcbiAgICB2YXIgaW1hZ2UgPSBub2RlO1xuICAgIHZhciBlbnRpdHlDb25maWcgPSB7fTtcblxuICAgIGltZ0F0dHIuZm9yRWFjaChmdW5jdGlvbiAoYXR0cikge1xuICAgICAgdmFyIGltYWdlQXR0cmlidXRlID0gaW1hZ2UuZ2V0QXR0cmlidXRlKGF0dHIpO1xuICAgICAgaWYgKGltYWdlQXR0cmlidXRlKSB7XG4gICAgICAgIGVudGl0eUNvbmZpZ1thdHRyXSA9IGltYWdlQXR0cmlidXRlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEZvcmNpbmcgdGhpcyBub2RlIHRvIGhhdmUgY2hpbGRyZW4gYmVjYXVzZSBvdGhlcndpc2Ugbm8gZW50aXR5IHdpbGwgYmVcbiAgICAvLyBjcmVhdGVkIGZvciB0aGlzIG5vZGUuXG4gICAgLy8gVGhlIGNoaWxkIHRleHQgbm9kZSBjYW5ub3QganVzdCBoYXZlIGEgc3BhY2Ugb3IgcmV0dXJuIGFzIGNvbnRlbnQgLVxuICAgIC8vIHdlIHN0cmlwIHRob3NlIG91dC5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2RyYWZ0LWpzL2lzc3Vlcy8yMzEgZm9yIHNvbWUgY29udGV4dC5cbiAgICBub2RlLnRleHRDb250ZW50ID0gJ1xcdUQ4M0RcXHVEQ0Y3JztcblxuICAgIC8vIFRPRE86IHVwZGF0ZSB0aGlzIHdoZW4gd2UgcmVtb3ZlIERyYWZ0RW50aXR5IGVudGlyZWx5XG4gICAgaW5FbnRpdHkgPSBEcmFmdEVudGl0eS5fX2NyZWF0ZSgnSU1BR0UnLCAnTVVUQUJMRScsIGVudGl0eUNvbmZpZyB8fCB7fSk7XG4gIH1cblxuICAvLyBJbmxpbmUgdGFnc1xuICBpbmxpbmVTdHlsZSA9IHByb2Nlc3NJbmxpbmVUYWcobm9kZU5hbWUsIG5vZGUsIGlubGluZVN0eWxlKTtcblxuICAvLyBIYW5kbGUgbGlzdHNcbiAgaWYgKG5vZGVOYW1lID09PSAndWwnIHx8IG5vZGVOYW1lID09PSAnb2wnKSB7XG4gICAgaWYgKGxhc3RMaXN0KSB7XG4gICAgICBkZXB0aCArPSAxO1xuICAgIH1cbiAgICBsYXN0TGlzdCA9IG5vZGVOYW1lO1xuICB9XG5cbiAgaWYgKCFleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQgJiYgbm9kZU5hbWUgPT09ICdsaScgJiYgbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgZGVwdGggPSBnZXRMaXN0SXRlbURlcHRoKG5vZGUsIGRlcHRoKTtcbiAgfVxuXG4gIHZhciBibG9ja1R5cGUgPSBnZXRCbG9ja1R5cGVGb3JUYWcobm9kZU5hbWUsIGxhc3RMaXN0LCBibG9ja1JlbmRlck1hcCk7XG4gIHZhciBpbkxpc3RCbG9jayA9IGxhc3RMaXN0ICYmIGluQmxvY2sgPT09ICdsaScgJiYgbm9kZU5hbWUgPT09ICdsaSc7XG4gIHZhciBpbkJsb2NrT3JIYXNOZXN0ZWRCbG9ja3MgPSAoIWluQmxvY2sgfHwgZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0KSAmJiBibG9ja1RhZ3MuaW5kZXhPZihub2RlTmFtZSkgIT09IC0xO1xuXG4gIC8vIEJsb2NrIFRhZ3NcbiAgaWYgKGluTGlzdEJsb2NrIHx8IGluQmxvY2tPckhhc05lc3RlZEJsb2Nrcykge1xuICAgIGNodW5rID0gZ2V0QmxvY2tEaXZpZGVyQ2h1bmsoYmxvY2tUeXBlLCBkZXB0aCwgcGFyZW50S2V5KTtcbiAgICBibG9ja0tleSA9IGNodW5rLmJsb2Nrc1swXS5rZXk7XG4gICAgaW5CbG9jayA9IG5vZGVOYW1lO1xuICAgIG5ld0Jsb2NrID0gIWV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydDtcbiAgfVxuXG4gIC8vIHRoaXMgaXMgcmVxdWlyZWQgc28gdGhhdCB3ZSBjYW4gaGFuZGxlICd1bCcgYW5kICdvbCdcbiAgaWYgKGluTGlzdEJsb2NrKSB7XG4gICAgbmV4dEJsb2NrVHlwZSA9IGxhc3RMaXN0ID09PSAndWwnID8gJ3Vub3JkZXJlZC1saXN0LWl0ZW0nIDogJ29yZGVyZWQtbGlzdC1pdGVtJztcbiAgfVxuXG4gIC8vIFJlY3Vyc2UgdGhyb3VnaCBjaGlsZHJlblxuICB2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIGlmIChjaGlsZCAhPSBudWxsKSB7XG4gICAgbm9kZU5hbWUgPSBjaGlsZC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgdmFyIGVudGl0eUlkID0gbnVsbDtcblxuICB3aGlsZSAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCAmJiBjaGlsZC5ocmVmICYmIGhhc1ZhbGlkTGlua1RleHQoY2hpbGQpKSB7XG4gICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYW5jaG9yID0gY2hpbGQ7XG4gICAgICAgIHZhciBlbnRpdHlDb25maWcgPSB7fTtcblxuICAgICAgICBhbmNob3JBdHRyLmZvckVhY2goZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgICAgICB2YXIgYW5jaG9yQXR0cmlidXRlID0gYW5jaG9yLmdldEF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgICBpZiAoYW5jaG9yQXR0cmlidXRlKSB7XG4gICAgICAgICAgICBlbnRpdHlDb25maWdbYXR0cl0gPSBhbmNob3JBdHRyaWJ1dGU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBlbnRpdHlDb25maWcudXJsID0gbmV3IFVSSShhbmNob3IuaHJlZikudG9TdHJpbmcoKTtcbiAgICAgICAgLy8gVE9ETzogdXBkYXRlIHRoaXMgd2hlbiB3ZSByZW1vdmUgRHJhZnRFbnRpdHkgY29tcGxldGVseVxuICAgICAgICBlbnRpdHlJZCA9IERyYWZ0RW50aXR5Ll9fY3JlYXRlKCdMSU5LJywgJ01VVEFCTEUnLCBlbnRpdHlDb25maWcgfHwge30pO1xuICAgICAgfSkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50aXR5SWQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIF9nZW5GcmFnbWVudCA9IGdlbkZyYWdtZW50KG5ld0VudGl0eU1hcCwgY2hpbGQsIGlubGluZVN0eWxlLCBsYXN0TGlzdCwgaW5CbG9jaywgYmxvY2tUYWdzLCBkZXB0aCwgYmxvY2tSZW5kZXJNYXAsIGVudGl0eUlkIHx8IGluRW50aXR5LCBleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQgPyBibG9ja0tleSA6IG51bGwpLFxuICAgICAgICBnZW5lcmF0ZWRDaHVuayA9IF9nZW5GcmFnbWVudC5jaHVuayxcbiAgICAgICAgbWF5YmVVcGRhdGVkRW50aXR5TWFwID0gX2dlbkZyYWdtZW50LmVudGl0eU1hcDtcblxuICAgIG5ld0NodW5rID0gZ2VuZXJhdGVkQ2h1bms7XG4gICAgbmV3RW50aXR5TWFwID0gbWF5YmVVcGRhdGVkRW50aXR5TWFwO1xuXG4gICAgY2h1bmsgPSBqb2luQ2h1bmtzKGNodW5rLCBuZXdDaHVuaywgZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0KTtcbiAgICB2YXIgc2libGluZyA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXG4gICAgLy8gUHV0IGluIGEgbmV3bGluZSB0byBicmVhayB1cCBibG9ja3MgaW5zaWRlIGJsb2Nrc1xuICAgIGlmICghcGFyZW50S2V5ICYmIHNpYmxpbmcgJiYgYmxvY2tUYWdzLmluZGV4T2Yobm9kZU5hbWUpID49IDAgJiYgaW5CbG9jaykge1xuICAgICAgY2h1bmsgPSBqb2luQ2h1bmtzKGNodW5rLCBnZXRTb2Z0TmV3bGluZUNodW5rKCkpO1xuICAgIH1cbiAgICBpZiAoc2libGluZykge1xuICAgICAgbm9kZU5hbWUgPSBzaWJsaW5nLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIGNoaWxkID0gc2libGluZztcbiAgfVxuXG4gIGlmIChuZXdCbG9jaykge1xuICAgIGNodW5rID0gam9pbkNodW5rcyhjaHVuaywgZ2V0QmxvY2tEaXZpZGVyQ2h1bmsobmV4dEJsb2NrVHlwZSwgZGVwdGgsIHBhcmVudEtleSkpO1xuICB9XG5cbiAgcmV0dXJuIHsgY2h1bms6IGNodW5rLCBlbnRpdHlNYXA6IG5ld0VudGl0eU1hcCB9O1xufTtcblxudmFyIGdldENodW5rRm9ySFRNTCA9IGZ1bmN0aW9uIGdldENodW5rRm9ySFRNTChodG1sLCBET01CdWlsZGVyLCBibG9ja1JlbmRlck1hcCwgZW50aXR5TWFwKSB7XG4gIGh0bWwgPSBodG1sLnRyaW0oKS5yZXBsYWNlKFJFR0VYX0NSLCAnJykucmVwbGFjZShSRUdFWF9OQlNQLCBTUEFDRSkucmVwbGFjZShSRUdFWF9DQVJSSUFHRSwgJycpLnJlcGxhY2UoUkVHRVhfWldTLCAnJyk7XG5cbiAgdmFyIHN1cHBvcnRlZEJsb2NrVGFncyA9IGdldEJsb2NrTWFwU3VwcG9ydGVkVGFncyhibG9ja1JlbmRlck1hcCk7XG5cbiAgdmFyIHNhZmVCb2R5ID0gRE9NQnVpbGRlcihodG1sKTtcbiAgaWYgKCFzYWZlQm9keSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGxhc3RCbG9jayA9IG51bGw7XG5cbiAgLy8gU29tZXRpbWVzIHdlIGFyZW4ndCBkZWFsaW5nIHdpdGggY29udGVudCB0aGF0IGNvbnRhaW5zIG5pY2Ugc2VtYW50aWNcbiAgLy8gdGFncy4gSW4gdGhpcyBjYXNlLCB1c2UgZGl2cyB0byBzZXBhcmF0ZSBldmVyeXRoaW5nIG91dCBpbnRvIHBhcmFncmFwaHNcbiAgLy8gYW5kIGhvcGUgZm9yIHRoZSBiZXN0LlxuICB2YXIgd29ya2luZ0Jsb2NrcyA9IGNvbnRhaW5zU2VtYW50aWNCbG9ja01hcmt1cChodG1sLCBzdXBwb3J0ZWRCbG9ja1RhZ3MpID8gc3VwcG9ydGVkQmxvY2tUYWdzIDogWydkaXYnXTtcblxuICAvLyBTdGFydCB3aXRoIC0xIGJsb2NrIGRlcHRoIHRvIG9mZnNldCB0aGUgZmFjdCB0aGF0IHdlIGFyZSBwYXNzaW5nIGluIGEgZmFrZVxuICAvLyBVTCBibG9jayB0byBzdGFydCB3aXRoLlxuICB2YXIgZnJhZ21lbnQgPSBnZW5GcmFnbWVudChlbnRpdHlNYXAsIHNhZmVCb2R5LCBPcmRlcmVkU2V0KCksICd1bCcsIG51bGwsIHdvcmtpbmdCbG9ja3MsIC0xLCBibG9ja1JlbmRlck1hcCk7XG5cbiAgdmFyIGNodW5rID0gZnJhZ21lbnQuY2h1bms7XG4gIHZhciBuZXdFbnRpdHlNYXAgPSBmcmFnbWVudC5lbnRpdHlNYXA7XG5cbiAgLy8gam9pbiB3aXRoIHByZXZpb3VzIGJsb2NrIHRvIHByZXZlbnQgd2VpcmRuZXNzIG9uIHBhc3RlXG4gIGlmIChjaHVuay50ZXh0LmluZGV4T2YoJ1xccicpID09PSAwKSB7XG4gICAgY2h1bmsgPSB7XG4gICAgICB0ZXh0OiBjaHVuay50ZXh0LnNsaWNlKDEpLFxuICAgICAgaW5saW5lczogY2h1bmsuaW5saW5lcy5zbGljZSgxKSxcbiAgICAgIGVudGl0aWVzOiBjaHVuay5lbnRpdGllcy5zbGljZSgxKSxcbiAgICAgIGJsb2NrczogY2h1bmsuYmxvY2tzXG4gICAgfTtcbiAgfVxuXG4gIC8vIEtpbGwgYmxvY2sgZGVsaW1pdGVyIGF0IHRoZSBlbmRcbiAgaWYgKGNodW5rLnRleHQuc2xpY2UoLTEpID09PSAnXFxyJykge1xuICAgIGNodW5rLnRleHQgPSBjaHVuay50ZXh0LnNsaWNlKDAsIC0xKTtcbiAgICBjaHVuay5pbmxpbmVzID0gY2h1bmsuaW5saW5lcy5zbGljZSgwLCAtMSk7XG4gICAgY2h1bmsuZW50aXRpZXMgPSBjaHVuay5lbnRpdGllcy5zbGljZSgwLCAtMSk7XG4gICAgY2h1bmsuYmxvY2tzLnBvcCgpO1xuICB9XG5cbiAgLy8gSWYgd2Ugc2F3IG5vIGJsb2NrIHRhZ3MsIHB1dCBhbiB1bnN0eWxlZCBvbmUgaW5cbiAgaWYgKGNodW5rLmJsb2Nrcy5sZW5ndGggPT09IDApIHtcbiAgICBjaHVuay5ibG9ja3MucHVzaChfZXh0ZW5kcyh7fSwgRU1QVFlfQ0hVTkssIHtcbiAgICAgIHR5cGU6ICd1bnN0eWxlZCcsXG4gICAgICBkZXB0aDogMFxuICAgIH0pKTtcbiAgfVxuXG4gIC8vIFNvbWV0aW1lcyB3ZSBzdGFydCB3aXRoIHRleHQgdGhhdCBpc24ndCBpbiBhIGJsb2NrLCB3aGljaCBpcyB0aGVuXG4gIC8vIGZvbGxvd2VkIGJ5IGJsb2Nrcy4gTmVlZCB0byBmaXggdXAgdGhlIGJsb2NrcyB0byBhZGQgaW5cbiAgLy8gYW4gdW5zdHlsZWQgYmxvY2sgZm9yIHRoaXMgY29udGVudFxuICBpZiAoY2h1bmsudGV4dC5zcGxpdCgnXFxyJykubGVuZ3RoID09PSBjaHVuay5ibG9ja3MubGVuZ3RoICsgMSkge1xuICAgIGNodW5rLmJsb2Nrcy51bnNoaWZ0KHsgdHlwZTogJ3Vuc3R5bGVkJywgZGVwdGg6IDAgfSk7XG4gIH1cblxuICByZXR1cm4geyBjaHVuazogY2h1bmssIGVudGl0eU1hcDogbmV3RW50aXR5TWFwIH07XG59O1xuXG52YXIgY29udmVydENodW5rVG9Db250ZW50QmxvY2tzID0gZnVuY3Rpb24gY29udmVydENodW5rVG9Db250ZW50QmxvY2tzKGNodW5rKSB7XG4gIGlmICghY2h1bmsgfHwgIWNodW5rLnRleHQgfHwgIUFycmF5LmlzQXJyYXkoY2h1bmsuYmxvY2tzKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgICBjYWNoZVJlZjoge30sXG4gICAgY29udGVudEJsb2NrczogW11cbiAgfTtcblxuICB2YXIgc3RhcnQgPSAwO1xuXG4gIHZhciByYXdCbG9ja3MgPSBjaHVuay5ibG9ja3MsXG4gICAgICByYXdJbmxpbmVzID0gY2h1bmsuaW5saW5lcyxcbiAgICAgIHJhd0VudGl0aWVzID0gY2h1bmsuZW50aXRpZXM7XG5cblxuICB2YXIgQmxvY2tOb2RlUmVjb3JkID0gZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0ID8gQ29udGVudEJsb2NrTm9kZSA6IENvbnRlbnRCbG9jaztcblxuICByZXR1cm4gY2h1bmsudGV4dC5zcGxpdCgnXFxyJykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHRleHRCbG9jaywgaW5kZXgpIHtcbiAgICAvLyBNYWtlIGFic29sdXRlbHkgY2VydGFpbiB0aGF0IG91ciB0ZXh0IGlzIGFjY2VwdGFibGUuXG4gICAgdGV4dEJsb2NrID0gc2FuaXRpemVEcmFmdFRleHQodGV4dEJsb2NrKTtcblxuICAgIHZhciBibG9jayA9IHJhd0Jsb2Nrc1tpbmRleF07XG4gICAgdmFyIGVuZCA9IHN0YXJ0ICsgdGV4dEJsb2NrLmxlbmd0aDtcbiAgICB2YXIgaW5saW5lcyA9IHJhd0lubGluZXMuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgdmFyIGVudGl0aWVzID0gcmF3RW50aXRpZXMuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgdmFyIGNoYXJhY3Rlckxpc3QgPSBMaXN0KGlubGluZXMubWFwKGZ1bmN0aW9uIChzdHlsZSwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0geyBzdHlsZTogc3R5bGUsIGVudGl0eTogbnVsbCB9O1xuICAgICAgaWYgKGVudGl0aWVzW2luZGV4XSkge1xuICAgICAgICBkYXRhLmVudGl0eSA9IGVudGl0aWVzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBDaGFyYWN0ZXJNZXRhZGF0YS5jcmVhdGUoZGF0YSk7XG4gICAgfSkpO1xuICAgIHN0YXJ0ID0gZW5kICsgMTtcblxuICAgIHZhciBkZXB0aCA9IGJsb2NrLmRlcHRoLFxuICAgICAgICB0eXBlID0gYmxvY2sudHlwZSxcbiAgICAgICAgcGFyZW50ID0gYmxvY2sucGFyZW50O1xuXG5cbiAgICB2YXIga2V5ID0gYmxvY2sua2V5IHx8IGdlbmVyYXRlUmFuZG9tS2V5KCk7XG4gICAgdmFyIHBhcmVudFRleHROb2RlS2V5ID0gbnVsbDsgLy8gd2lsbCBiZSB1c2VkIHRvIHN0b3JlIGNvbnRhaW5lciB0ZXh0IG5vZGVzXG5cbiAgICAvLyBjaGlsZHJlbnMgYWRkIHRoZW1zZWx2ZXMgdG8gdGhlaXIgcGFyZW50cyBzaW5jZSB3ZSBhcmUgaXRlcmF0aW5nIGluIG9yZGVyXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgdmFyIHBhcmVudEluZGV4ID0gYWNjLmNhY2hlUmVmW3BhcmVudF07XG4gICAgICB2YXIgcGFyZW50UmVjb3JkID0gYWNjLmNvbnRlbnRCbG9ja3NbcGFyZW50SW5kZXhdO1xuXG4gICAgICAvLyBpZiBwYXJlbnQgaGFzIHRleHQgd2UgbmVlZCB0byBzcGxpdCBpdCBpbnRvIGEgc2VwYXJhdGUgdW5zdHlsZWQgZWxlbWVudFxuICAgICAgaWYgKHBhcmVudFJlY29yZC5nZXRDaGlsZEtleXMoKS5pc0VtcHR5KCkgJiYgcGFyZW50UmVjb3JkLmdldFRleHQoKSkge1xuICAgICAgICB2YXIgcGFyZW50Q2hhcmFjdGVyTGlzdCA9IHBhcmVudFJlY29yZC5nZXRDaGFyYWN0ZXJMaXN0KCk7XG4gICAgICAgIHZhciBwYXJlbnRUZXh0ID0gcGFyZW50UmVjb3JkLmdldFRleHQoKTtcbiAgICAgICAgcGFyZW50VGV4dE5vZGVLZXkgPSBnZW5lcmF0ZVJhbmRvbUtleSgpO1xuXG4gICAgICAgIHZhciB0ZXh0Tm9kZSA9IG5ldyBDb250ZW50QmxvY2tOb2RlKHtcbiAgICAgICAgICBrZXk6IHBhcmVudFRleHROb2RlS2V5LFxuICAgICAgICAgIHRleHQ6IHBhcmVudFRleHQsXG4gICAgICAgICAgY2hhcmFjdGVyTGlzdDogcGFyZW50Q2hhcmFjdGVyTGlzdCxcbiAgICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgICBuZXh0U2libGluZzoga2V5XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFjYy5jb250ZW50QmxvY2tzLnB1c2godGV4dE5vZGUpO1xuXG4gICAgICAgIHBhcmVudFJlY29yZCA9IHBhcmVudFJlY29yZC53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgICAgIGJsb2NrLnNldCgnY2hhcmFjdGVyTGlzdCcsIExpc3QoKSkuc2V0KCd0ZXh0JywgJycpLnNldCgnY2hpbGRyZW4nLCBwYXJlbnRSZWNvcmQuY2hpbGRyZW4ucHVzaCh0ZXh0Tm9kZS5nZXRLZXkoKSkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgYWNjLmNvbnRlbnRCbG9ja3NbcGFyZW50SW5kZXhdID0gcGFyZW50UmVjb3JkLnNldCgnY2hpbGRyZW4nLCBwYXJlbnRSZWNvcmQuY2hpbGRyZW4ucHVzaChrZXkpKTtcbiAgICB9XG5cbiAgICB2YXIgYmxvY2tOb2RlID0gbmV3IEJsb2NrTm9kZVJlY29yZCh7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGRlcHRoOiBkZXB0aCxcbiAgICAgIHRleHQ6IHRleHRCbG9jayxcbiAgICAgIGNoYXJhY3Rlckxpc3Q6IGNoYXJhY3Rlckxpc3QsXG4gICAgICBwcmV2U2libGluZzogcGFyZW50VGV4dE5vZGVLZXkgfHwgKGluZGV4ID09PSAwIHx8IHJhd0Jsb2Nrc1tpbmRleCAtIDFdLnBhcmVudCAhPT0gcGFyZW50ID8gbnVsbCA6IHJhd0Jsb2Nrc1tpbmRleCAtIDFdLmtleSksXG4gICAgICBuZXh0U2libGluZzogaW5kZXggPT09IHJhd0Jsb2Nrcy5sZW5ndGggLSAxIHx8IHJhd0Jsb2Nrc1tpbmRleCArIDFdLnBhcmVudCAhPT0gcGFyZW50ID8gbnVsbCA6IHJhd0Jsb2Nrc1tpbmRleCArIDFdLmtleVxuICAgIH0pO1xuXG4gICAgLy8gaW5zZXJ0IG5vZGVcbiAgICBhY2MuY29udGVudEJsb2Nrcy5wdXNoKGJsb2NrTm9kZSk7XG5cbiAgICAvLyBjYWNoZSByZWYgZm9yIGJ1aWxkaW5nIGxpbmtzXG4gICAgYWNjLmNhY2hlUmVmW2Jsb2NrTm9kZS5rZXldID0gaW5kZXg7XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBpbml0aWFsU3RhdGUpLmNvbnRlbnRCbG9ja3M7XG59O1xuXG52YXIgY29udmVydEZyb21IVE1MdG9Db250ZW50QmxvY2tzID0gZnVuY3Rpb24gY29udmVydEZyb21IVE1MdG9Db250ZW50QmxvY2tzKGh0bWwpIHtcbiAgdmFyIERPTUJ1aWxkZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGdldFNhZmVCb2R5RnJvbUhUTUw7XG4gIHZhciBibG9ja1JlbmRlck1hcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXA7XG5cbiAgLy8gQmUgQUJTT0xVVEVMWSBTVVJFIHRoYXQgdGhlIGRvbSBidWlsZGVyIHlvdSBwYXNzIGhlcmUgd29uJ3QgZXhlY3V0ZVxuICAvLyBhcmJpdHJhcnkgY29kZSBpbiB3aGF0ZXZlciBlbnZpcm9ubWVudCB5b3UncmUgcnVubmluZyB0aGlzIGluLiBGb3IgYW5cbiAgLy8gZXhhbXBsZSBvZiBob3cgd2UgdHJ5IHRvIGRvIHRoaXMgaW4tYnJvd3Nlciwgc2VlIGdldFNhZmVCb2R5RnJvbUhUTUwuXG5cbiAgLy8gVE9ETzogcmVwbGFjZSBEcmFmdEVudGl0eSB3aXRoIGFuIE9yZGVyZWRNYXAgaGVyZVxuICB2YXIgY2h1bmtEYXRhID0gZ2V0Q2h1bmtGb3JIVE1MKGh0bWwsIERPTUJ1aWxkZXIsIGJsb2NrUmVuZGVyTWFwLCBEcmFmdEVudGl0eSk7XG5cbiAgaWYgKGNodW5rRGF0YSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgY2h1bmsgPSBjaHVua0RhdGEuY2h1bmssXG4gICAgICBlbnRpdHlNYXAgPSBjaHVua0RhdGEuZW50aXR5TWFwO1xuXG4gIHZhciBjb250ZW50QmxvY2tzID0gY29udmVydENodW5rVG9Db250ZW50QmxvY2tzKGNodW5rKTtcblxuICByZXR1cm4ge1xuICAgIGNvbnRlbnRCbG9ja3M6IGNvbnRlbnRCbG9ja3MsXG4gICAgZW50aXR5TWFwOiBlbnRpdHlNYXBcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY29udmVydEZyb21IVE1MdG9Db250ZW50QmxvY2tzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgbW92ZVNlbGVjdGlvbkZvcndhcmRcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHaXZlbiBhIGNvbGxhcHNlZCBzZWxlY3Rpb24sIG1vdmUgdGhlIGZvY3VzIGBtYXhEaXN0YW5jZWAgZm9yd2FyZCB3aXRoaW5cbiAqIHRoZSBzZWxlY3RlZCBibG9jay4gSWYgdGhlIHNlbGVjdGlvbiB3aWxsIGdvIGJleW9uZCB0aGUgZW5kIG9mIHRoZSBibG9jayxcbiAqIG1vdmUgZm9jdXMgdG8gdGhlIHN0YXJ0IG9mIHRoZSBuZXh0IGJsb2NrLCBidXQgbm8gZnVydGhlci5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG5vdCBVbmljb2RlLWF3YXJlLCBzbyBzdXJyb2dhdGUgcGFpcnMgd2lsbCBiZSB0cmVhdGVkXG4gKiBhcyBoYXZpbmcgbGVuZ3RoIDIuXG4gKi9cbmZ1bmN0aW9uIG1vdmVTZWxlY3Rpb25Gb3J3YXJkKGVkaXRvclN0YXRlLCBtYXhEaXN0YW5jZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBrZXkgPSBzZWxlY3Rpb24uZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIG9mZnNldCA9IHNlbGVjdGlvbi5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG5cbiAgdmFyIGZvY3VzS2V5ID0ga2V5O1xuICB2YXIgZm9jdXNPZmZzZXQ7XG5cbiAgdmFyIGJsb2NrID0gY29udGVudC5nZXRCbG9ja0ZvcktleShrZXkpO1xuXG4gIGlmIChtYXhEaXN0YW5jZSA+IGJsb2NrLmdldFRleHQoKS5sZW5ndGggLSBvZmZzZXQpIHtcbiAgICBmb2N1c0tleSA9IGNvbnRlbnQuZ2V0S2V5QWZ0ZXIoa2V5KTtcbiAgICBmb2N1c09mZnNldCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgZm9jdXNPZmZzZXQgPSBvZmZzZXQgKyBtYXhEaXN0YW5jZTtcbiAgfVxuXG4gIHJldHVybiBzZWxlY3Rpb24ubWVyZ2UoeyBmb2N1c0tleTogZm9jdXNLZXksIGZvY3VzT2Zmc2V0OiBmb2N1c09mZnNldCB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb3ZlU2VsZWN0aW9uRm9yd2FyZDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0UmVtb3ZhYmxlV29yZFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVG9rZW5pemVVdGlsID0gcmVxdWlyZSgnZmJqcy9saWIvVG9rZW5pemVVdGlsJyk7XG5cbnZhciBwdW5jdHVhdGlvbiA9IFRva2VuaXplVXRpbC5nZXRQdW5jdHVhdGlvbigpO1xuXG4vLyBUaGUgYXBvc3Ryb3BoZSBhbmQgY3VybHkgc2luZ2xlIHF1b3RlcyBiZWhhdmUgaW4gYSBjdXJpb3VzIHdheTogd2hlblxuLy8gc3Vycm91bmRlZCBvbiBib3RoIHNpZGVzIGJ5IHdvcmQgY2hhcmFjdGVycywgdGhleSBiZWhhdmUgYXMgd29yZCBjaGFyczsgd2hlblxuLy8gZWl0aGVyIG5laWdoYm9yIGlzIHB1bmN0dWF0aW9uIG9yIGFuIGVuZCBvZiB0aGUgc3RyaW5nLCB0aGV5IGJlaGF2ZSBhc1xuLy8gcHVuY3R1YXRpb24uXG52YXIgQ0hBTUVMRU9OX0NIQVJTID0gJ1tcXCdcXHUyMDE4XFx1MjAxOV0nO1xuXG4vLyBSZW1vdmUgdGhlIHVuZGVyc2NvcmUsIHdoaWNoIHNob3VsZCBjb3VudCBhcyBwYXJ0IG9mIHRoZSByZW1vdmFibGUgd29yZC4gVGhlXG4vLyBcImNoYW1lbGVvbiBjaGFyc1wiIGFsc28gY291bnQgYXMgcHVuY3R1YXRpb24gaW4gdGhpcyByZWdleC5cbnZhciBXSElURVNQQUNFX0FORF9QVU5DVFVBVElPTiA9ICdcXFxcc3woPyFbX10pJyArIHB1bmN0dWF0aW9uO1xuXG52YXIgREVMRVRFX1NUUklORyA9ICdeJyArICcoPzonICsgV0hJVEVTUEFDRV9BTkRfUFVOQ1RVQVRJT04gKyAnKSonICsgJyg/OicgKyBDSEFNRUxFT05fQ0hBUlMgKyAnfCg/IScgKyBXSElURVNQQUNFX0FORF9QVU5DVFVBVElPTiArICcpLikqJyArICcoPzooPyEnICsgV0hJVEVTUEFDRV9BTkRfUFVOQ1RVQVRJT04gKyAnKS4pJztcbnZhciBERUxFVEVfUkVHRVggPSBuZXcgUmVnRXhwKERFTEVURV9TVFJJTkcpO1xuXG52YXIgQkFDS1NQQUNFX1NUUklORyA9ICcoPzooPyEnICsgV0hJVEVTUEFDRV9BTkRfUFVOQ1RVQVRJT04gKyAnKS4pJyArICcoPzonICsgQ0hBTUVMRU9OX0NIQVJTICsgJ3woPyEnICsgV0hJVEVTUEFDRV9BTkRfUFVOQ1RVQVRJT04gKyAnKS4pKicgKyAnKD86JyArIFdISVRFU1BBQ0VfQU5EX1BVTkNUVUFUSU9OICsgJykqJyArICckJztcbnZhciBCQUNLU1BBQ0VfUkVHRVggPSBuZXcgUmVnRXhwKEJBQ0tTUEFDRV9TVFJJTkcpO1xuXG5mdW5jdGlvbiBnZXRSZW1vdmFibGVXb3JkKHRleHQsIGlzQmFja3dhcmQpIHtcbiAgdmFyIG1hdGNoZXMgPSBpc0JhY2t3YXJkID8gQkFDS1NQQUNFX1JFR0VYLmV4ZWModGV4dCkgOiBERUxFVEVfUkVHRVguZXhlYyh0ZXh0KTtcbiAgcmV0dXJuIG1hdGNoZXMgPyBtYXRjaGVzWzBdIDogdGV4dDtcbn1cblxudmFyIERyYWZ0UmVtb3ZhYmxlV29yZCA9IHtcbiAgZ2V0QmFja3dhcmQ6IGZ1bmN0aW9uIGdldEJhY2t3YXJkKHRleHQpIHtcbiAgICByZXR1cm4gZ2V0UmVtb3ZhYmxlV29yZCh0ZXh0LCB0cnVlKTtcbiAgfSxcblxuICBnZXRGb3J3YXJkOiBmdW5jdGlvbiBnZXRGb3J3YXJkKHRleHQpIHtcbiAgICByZXR1cm4gZ2V0UmVtb3ZhYmxlV29yZCh0ZXh0LCBmYWxzZSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRSZW1vdmFibGVXb3JkOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25XaXRoTm9kZXNcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGZpbmRBbmNlc3Rvck9mZnNldEtleSA9IHJlcXVpcmUoJy4vZmluZEFuY2VzdG9yT2Zmc2V0S2V5Jyk7XG52YXIgZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZSA9IHJlcXVpcmUoJy4vZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZScpO1xudmFyIGdldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSA9IHJlcXVpcmUoJy4vZ2V0VXBkYXRlZFNlbGVjdGlvblN0YXRlJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgbnVsbHRocm93cyA9IHJlcXVpcmUoJ2ZianMvbGliL251bGx0aHJvd3MnKTtcblxuLyoqXG4gKiBDb252ZXJ0IHRoZSBjdXJyZW50IHNlbGVjdGlvbiByYW5nZSB0byBhbiBhbmNob3IvZm9jdXMgcGFpciBvZiBvZmZzZXQga2V5c1xuICogYW5kIHZhbHVlcyB0aGF0IGNhbiBiZSBpbnRlcnByZXRlZCBieSBjb21wb25lbnRzLlxuICovXG5mdW5jdGlvbiBnZXREcmFmdEVkaXRvclNlbGVjdGlvbldpdGhOb2RlcyhlZGl0b3JTdGF0ZSwgcm9vdCwgYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0LCBmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KSB7XG4gIHZhciBhbmNob3JJc1RleHROb2RlID0gYW5jaG9yTm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREU7XG4gIHZhciBmb2N1c0lzVGV4dE5vZGUgPSBmb2N1c05vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFO1xuXG4gIC8vIElmIHRoZSBzZWxlY3Rpb24gcmFuZ2UgbGllcyBvbmx5IG9uIHRleHQgbm9kZXMsIHRoZSB0YXNrIGlzIHNpbXBsZS5cbiAgLy8gRmluZCB0aGUgbmVhcmVzdCBvZmZzZXQtYXdhcmUgZWxlbWVudHMgYW5kIHVzZSB0aGVcbiAgLy8gb2Zmc2V0IHZhbHVlcyBzdXBwbGllZCBieSB0aGUgc2VsZWN0aW9uIHJhbmdlLlxuICBpZiAoYW5jaG9ySXNUZXh0Tm9kZSAmJiBmb2N1c0lzVGV4dE5vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0aW9uU3RhdGU6IGdldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZShlZGl0b3JTdGF0ZSwgbnVsbHRocm93cyhmaW5kQW5jZXN0b3JPZmZzZXRLZXkoYW5jaG9yTm9kZSkpLCBhbmNob3JPZmZzZXQsIG51bGx0aHJvd3MoZmluZEFuY2VzdG9yT2Zmc2V0S2V5KGZvY3VzTm9kZSkpLCBmb2N1c09mZnNldCksXG4gICAgICBuZWVkc1JlY292ZXJ5OiBmYWxzZVxuICAgIH07XG4gIH1cblxuICB2YXIgYW5jaG9yUG9pbnQgPSBudWxsO1xuICB2YXIgZm9jdXNQb2ludCA9IG51bGw7XG4gIHZhciBuZWVkc1JlY292ZXJ5ID0gdHJ1ZTtcblxuICAvLyBBbiBlbGVtZW50IGlzIHNlbGVjdGVkLiBDb252ZXJ0IHRoaXMgc2VsZWN0aW9uIHJhbmdlIGludG8gbGVhZiBvZmZzZXRcbiAgLy8ga2V5cyBhbmQgb2Zmc2V0IHZhbHVlcyBmb3IgY29uc3VtcHRpb24gYXQgdGhlIGNvbXBvbmVudCBsZXZlbC4gVGhpc1xuICAvLyBpcyBjb21tb24gaW4gRmlyZWZveCwgd2hlcmUgc2VsZWN0LWFsbCBhbmQgdHJpcGxlIGNsaWNrIGJlaGF2aW9yIGxlYWRzXG4gIC8vIHRvIGVudGlyZSBlbGVtZW50cyBiZWluZyBzZWxlY3RlZC5cbiAgLy9cbiAgLy8gTm90ZSB0aGF0IHdlIHVzZSB0aGUgYG5lZWRzUmVjb3ZlcnlgIHBhcmFtZXRlciBpbiB0aGUgY2FsbGJhY2sgaGVyZS4gVGhpc1xuICAvLyBpcyBiZWNhdXNlIHdoZW4gY2VydGFpbiBlbGVtZW50cyBhcmUgc2VsZWN0ZWQsIHRoZSBiZWhhdmlvciBmb3Igc3Vic2VxdWVudFxuICAvLyBjdXJzb3IgbW92ZW1lbnQgKGUuZy4gdmlhIGFycm93IGtleXMpIGlzIHVuY2VydGFpbiBhbmQgbWF5IG5vdCBtYXRjaFxuICAvLyBleHBlY3RhdGlvbnMgYXQgdGhlIGNvbXBvbmVudCBsZXZlbC4gRm9yIGV4YW1wbGUsIGlmIGFuIGVudGlyZSA8ZGl2PiBpc1xuICAvLyBzZWxlY3RlZCBhbmQgdGhlIHVzZXIgcHJlc3NlcyB0aGUgcmlnaHQgYXJyb3csIEZpcmVmb3gga2VlcHMgdGhlIHNlbGVjdGlvblxuICAvLyBvbiB0aGUgPGRpdj4uIElmIHdlIGFsbG93IHN1YnNlcXVlbnQga2V5cHJlc3NlcyB0byBpbnNlcnQgY2hhcmFjdGVyc1xuICAvLyBuYXRpdmVseSwgdGhleSB3aWxsIGJlIGluc2VydGVkIGludG8gYSBicm93c2VyLWNyZWF0ZWQgdGV4dCBub2RlIHRvIHRoZVxuICAvLyByaWdodCBvZiB0aGF0IDxkaXY+LiBUaGlzIGlzIG9idmlvdXNseSB1bmRlc2lyYWJsZS5cbiAgLy9cbiAgLy8gV2l0aCB0aGUgYG5lZWRzUmVjb3ZlcnlgIGZsYWcsIHdlIGluZm9ybSB0aGUgY2FsbGVyIHRoYXQgaXQgaXMgcmVzcG9uc2libGVcbiAgLy8gZm9yIG1hbnVhbGx5IHNldHRpbmcgdGhlIHNlbGVjdGlvbiBzdGF0ZSBvbiB0aGUgcmVuZGVyZWQgZG9jdW1lbnQgdG9cbiAgLy8gZW5zdXJlIHByb3BlciBzZWxlY3Rpb24gc3RhdGUgbWFpbnRlbmFuY2UuXG5cbiAgaWYgKGFuY2hvcklzVGV4dE5vZGUpIHtcbiAgICBhbmNob3JQb2ludCA9IHtcbiAgICAgIGtleTogbnVsbHRocm93cyhmaW5kQW5jZXN0b3JPZmZzZXRLZXkoYW5jaG9yTm9kZSkpLFxuICAgICAgb2Zmc2V0OiBhbmNob3JPZmZzZXRcbiAgICB9O1xuICAgIGZvY3VzUG9pbnQgPSBnZXRQb2ludEZvck5vblRleHROb2RlKHJvb3QsIGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpO1xuICB9IGVsc2UgaWYgKGZvY3VzSXNUZXh0Tm9kZSkge1xuICAgIGZvY3VzUG9pbnQgPSB7XG4gICAgICBrZXk6IG51bGx0aHJvd3MoZmluZEFuY2VzdG9yT2Zmc2V0S2V5KGZvY3VzTm9kZSkpLFxuICAgICAgb2Zmc2V0OiBmb2N1c09mZnNldFxuICAgIH07XG4gICAgYW5jaG9yUG9pbnQgPSBnZXRQb2ludEZvck5vblRleHROb2RlKHJvb3QsIGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCk7XG4gIH0gZWxzZSB7XG4gICAgYW5jaG9yUG9pbnQgPSBnZXRQb2ludEZvck5vblRleHROb2RlKHJvb3QsIGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCk7XG4gICAgZm9jdXNQb2ludCA9IGdldFBvaW50Rm9yTm9uVGV4dE5vZGUocm9vdCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCk7XG5cbiAgICAvLyBJZiB0aGUgc2VsZWN0aW9uIGlzIGNvbGxhcHNlZCBvbiBhbiBlbXB0eSBibG9jaywgZG9uJ3QgZm9yY2UgcmVjb3ZlcnkuXG4gICAgLy8gVGhpcyB3YXksIG9uIGFycm93IGtleSBzZWxlY3Rpb24gY2hhbmdlcywgdGhlIGJyb3dzZXIgY2FuIG1vdmUgdGhlXG4gICAgLy8gY3Vyc29yIGZyb20gYSBub24temVybyBvZmZzZXQgb24gb25lIGJsb2NrLCB0aHJvdWdoIGVtcHR5IGJsb2NrcyxcbiAgICAvLyB0byBhIG1hdGNoaW5nIG5vbi16ZXJvIG9mZnNldCBvbiBvdGhlciB0ZXh0IGJsb2Nrcy5cbiAgICBpZiAoYW5jaG9yTm9kZSA9PT0gZm9jdXNOb2RlICYmIGFuY2hvck9mZnNldCA9PT0gZm9jdXNPZmZzZXQpIHtcbiAgICAgIG5lZWRzUmVjb3ZlcnkgPSAhIWFuY2hvck5vZGUuZmlyc3RDaGlsZCAmJiBhbmNob3JOb2RlLmZpcnN0Q2hpbGQubm9kZU5hbWUgIT09ICdCUic7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZWxlY3Rpb25TdGF0ZTogZ2V0VXBkYXRlZFNlbGVjdGlvblN0YXRlKGVkaXRvclN0YXRlLCBhbmNob3JQb2ludC5rZXksIGFuY2hvclBvaW50Lm9mZnNldCwgZm9jdXNQb2ludC5rZXksIGZvY3VzUG9pbnQub2Zmc2V0KSxcbiAgICBuZWVkc1JlY292ZXJ5OiBuZWVkc1JlY292ZXJ5XG4gIH07XG59XG5cbi8qKlxuICogSWRlbnRpZnkgdGhlIGZpcnN0IGxlYWYgZGVzY2VuZGFudCBmb3IgdGhlIGdpdmVuIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldEZpcnN0TGVhZihub2RlKSB7XG4gIHdoaWxlIChub2RlLmZpcnN0Q2hpbGQgJiYgKFxuICAvLyBkYXRhLWJsb2NrcyBoYXMgbm8gb2Zmc2V0XG4gIG5vZGUuZmlyc3RDaGlsZCBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgbm9kZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgnZGF0YS1ibG9ja3MnKSA9PT0gJ3RydWUnIHx8IGdldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGUobm9kZS5maXJzdENoaWxkKSkpIHtcbiAgICBub2RlID0gbm9kZS5maXJzdENoaWxkO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIElkZW50aWZ5IHRoZSBsYXN0IGxlYWYgZGVzY2VuZGFudCBmb3IgdGhlIGdpdmVuIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldExhc3RMZWFmKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUubGFzdENoaWxkICYmIChcbiAgLy8gZGF0YS1ibG9ja3MgaGFzIG5vIG9mZnNldFxuICBub2RlLmxhc3RDaGlsZCBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgbm9kZS5sYXN0Q2hpbGQuZ2V0QXR0cmlidXRlKCdkYXRhLWJsb2NrcycpID09PSAndHJ1ZScgfHwgZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZShub2RlLmxhc3RDaGlsZCkpKSB7XG4gICAgbm9kZSA9IG5vZGUubGFzdENoaWxkO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBnZXRQb2ludEZvck5vblRleHROb2RlKGVkaXRvclJvb3QsIHN0YXJ0Tm9kZSwgY2hpbGRPZmZzZXQpIHtcbiAgdmFyIG5vZGUgPSBzdGFydE5vZGU7XG4gIHZhciBvZmZzZXRLZXkgPSBmaW5kQW5jZXN0b3JPZmZzZXRLZXkobm9kZSk7XG5cbiAgIShvZmZzZXRLZXkgIT0gbnVsbCB8fCBlZGl0b3JSb290ICYmIChlZGl0b3JSb290ID09PSBub2RlIHx8IGVkaXRvclJvb3QuZmlyc3RDaGlsZCA9PT0gbm9kZSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1Vua25vd24gbm9kZSBpbiBzZWxlY3Rpb24gcmFuZ2UuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIC8vIElmIHRoZSBlZGl0b3JSb290IGlzIHRoZSBzZWxlY3Rpb24sIHN0ZXAgZG93bndhcmQgaW50byB0aGUgY29udGVudFxuICAvLyB3cmFwcGVyLlxuICBpZiAoZWRpdG9yUm9vdCA9PT0gbm9kZSkge1xuICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgIShub2RlIGluc3RhbmNlb2YgRWxlbWVudCAmJiBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1jb250ZW50cycpID09PSAndHJ1ZScpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0ludmFsaWQgRHJhZnRFZGl0b3JDb250ZW50cyBzdHJ1Y3R1cmUuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmIChjaGlsZE9mZnNldCA+IDApIHtcbiAgICAgIGNoaWxkT2Zmc2V0ID0gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGUgY2hpbGQgb2Zmc2V0IGlzIHplcm8gYW5kIHdlIGhhdmUgYW4gb2Zmc2V0IGtleSwgd2UncmUgZG9uZS5cbiAgLy8gSWYgdGhlcmUncyBubyBvZmZzZXQga2V5IGJlY2F1c2UgdGhlIGVudGlyZSBlZGl0b3IgaXMgc2VsZWN0ZWQsXG4gIC8vIGZpbmQgdGhlIGxlZnRtb3N0IChcImZpcnN0XCIpIGxlYWYgaW4gdGhlIHRyZWUgYW5kIHVzZSB0aGF0IGFzIHRoZSBvZmZzZXRcbiAgLy8ga2V5LlxuICBpZiAoY2hpbGRPZmZzZXQgPT09IDApIHtcbiAgICB2YXIga2V5ID0gbnVsbDtcbiAgICBpZiAob2Zmc2V0S2V5ICE9IG51bGwpIHtcbiAgICAgIGtleSA9IG9mZnNldEtleTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGZpcnN0TGVhZiA9IGdldEZpcnN0TGVhZihub2RlKTtcbiAgICAgIGtleSA9IG51bGx0aHJvd3MoZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZShmaXJzdExlYWYpKTtcbiAgICB9XG4gICAgcmV0dXJuIHsga2V5OiBrZXksIG9mZnNldDogMCB9O1xuICB9XG5cbiAgdmFyIG5vZGVCZWZvcmVDdXJzb3IgPSBub2RlLmNoaWxkTm9kZXNbY2hpbGRPZmZzZXQgLSAxXTtcbiAgdmFyIGxlYWZLZXkgPSBudWxsO1xuICB2YXIgdGV4dExlbmd0aCA9IG51bGw7XG5cbiAgaWYgKCFnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlKG5vZGVCZWZvcmVDdXJzb3IpKSB7XG4gICAgLy8gT3VyIHRhcmdldCBub2RlIG1heSBiZSBhIGxlYWYgb3IgYSB0ZXh0IG5vZGUsIGluIHdoaWNoIGNhc2Ugd2UncmVcbiAgICAvLyBhbHJlYWR5IHdoZXJlIHdlIHdhbnQgdG8gYmUgYW5kIGNhbiBqdXN0IHVzZSB0aGUgY2hpbGQncyBsZW5ndGggYXNcbiAgICAvLyBvdXIgb2Zmc2V0LlxuICAgIGxlYWZLZXkgPSBudWxsdGhyb3dzKG9mZnNldEtleSk7XG4gICAgdGV4dExlbmd0aCA9IGdldFRleHRDb250ZW50TGVuZ3RoKG5vZGVCZWZvcmVDdXJzb3IpO1xuICB9IGVsc2Uge1xuICAgIC8vIE90aGVyd2lzZSwgd2UnbGwgbG9vayBhdCB0aGUgY2hpbGQgdG8gdGhlIGxlZnQgb2YgdGhlIGN1cnNvciBhbmQgZmluZFxuICAgIC8vIHRoZSBsYXN0IGxlYWYgbm9kZSBpbiBpdHMgc3VidHJlZS5cbiAgICB2YXIgbGFzdExlYWYgPSBnZXRMYXN0TGVhZihub2RlQmVmb3JlQ3Vyc29yKTtcbiAgICBsZWFmS2V5ID0gbnVsbHRocm93cyhnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlKGxhc3RMZWFmKSk7XG4gICAgdGV4dExlbmd0aCA9IGdldFRleHRDb250ZW50TGVuZ3RoKGxhc3RMZWFmKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAga2V5OiBsZWFmS2V5LFxuICAgIG9mZnNldDogdGV4dExlbmd0aFxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgbGVuZ3RoIG9mIGEgbm9kZSdzIHRleHRDb250ZW50LCByZWdhcmRpbmcgc2luZ2xlIG5ld2xpbmVcbiAqIGNoYXJhY3RlcnMgYXMgemVyby1sZW5ndGguIFRoaXMgYWxsb3dzIHVzIHRvIGF2b2lkIHByb2JsZW1zIHdpdGggaWRlbnRpZnlpbmdcbiAqIHRoZSBjb3JyZWN0IHNlbGVjdGlvbiBvZmZzZXQgZm9yIGVtcHR5IGJsb2NrcyBpbiBJRSwgaW4gd2hpY2ggd2VcbiAqIHJlbmRlciBuZXdsaW5lcyBpbnN0ZWFkIG9mIGJyZWFrIHRhZ3MuXG4gKi9cbmZ1bmN0aW9uIGdldFRleHRDb250ZW50TGVuZ3RoKG5vZGUpIHtcbiAgdmFyIHRleHRDb250ZW50ID0gbm9kZS50ZXh0Q29udGVudDtcbiAgcmV0dXJuIHRleHRDb250ZW50ID09PSAnXFxuJyA/IDAgOiB0ZXh0Q29udGVudC5sZW5ndGg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25XaXRoTm9kZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRSYW5nZUNsaWVudFJlY3RzXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVc2VyQWdlbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9Vc2VyQWdlbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgaXNDaHJvbWUgPSBVc2VyQWdlbnQuaXNCcm93c2VyKCdDaHJvbWUnKTtcblxuLy8gSW4gQ2hyb21lLCB0aGUgY2xpZW50IHJlY3RzIHdpbGwgaW5jbHVkZSB0aGUgZW50aXJlIGJvdW5kcyBvZiBhbGwgbm9kZXMgdGhhdFxuLy8gYmVnaW4gKGhhdmUgYSBzdGFydCB0YWcpIHdpdGhpbiB0aGUgc2VsZWN0aW9uLCBldmVuIGlmIHRoZSBzZWxlY3Rpb24gZG9lc1xuLy8gbm90IG92ZXJsYXAgdGhlIGVudGlyZSBub2RlLiBUbyByZXNvbHZlIHRoaXMsIHdlIHNwbGl0IHRoZSByYW5nZSBhdCBlYWNoXG4vLyBzdGFydCB0YWcgYW5kIGpvaW4gdGhlIGNsaWVudCByZWN0cyB0b2dldGhlci5cbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zMjQ0Mzdcbi8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG5mdW5jdGlvbiBnZXRSYW5nZUNsaWVudFJlY3RzQ2hyb21lKHJhbmdlKSB7XG4gIHZhciB0ZW1wUmFuZ2UgPSByYW5nZS5jbG9uZVJhbmdlKCk7XG4gIHZhciBjbGllbnRSZWN0cyA9IFtdO1xuXG4gIGZvciAodmFyIGFuY2VzdG9yID0gcmFuZ2UuZW5kQ29udGFpbmVyOyBhbmNlc3RvciAhPSBudWxsOyBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudE5vZGUpIHtcbiAgICAvLyBJZiB3ZSd2ZSBjbGltYmVkIHVwIHRvIHRoZSBjb21tb24gYW5jZXN0b3IsIHdlIGNhbiBub3cgdXNlIHRoZVxuICAgIC8vIG9yaWdpbmFsIHN0YXJ0IHBvaW50IGFuZCBzdG9wIGNsaW1iaW5nIHRoZSB0cmVlLlxuICAgIHZhciBhdENvbW1vbkFuY2VzdG9yID0gYW5jZXN0b3IgPT09IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIGlmIChhdENvbW1vbkFuY2VzdG9yKSB7XG4gICAgICB0ZW1wUmFuZ2Uuc2V0U3RhcnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGVtcFJhbmdlLnNldFN0YXJ0KHRlbXBSYW5nZS5lbmRDb250YWluZXIsIDApO1xuICAgIH1cbiAgICB2YXIgcmVjdHMgPSBBcnJheS5mcm9tKHRlbXBSYW5nZS5nZXRDbGllbnRSZWN0cygpKTtcbiAgICBjbGllbnRSZWN0cy5wdXNoKHJlY3RzKTtcbiAgICBpZiAoYXRDb21tb25BbmNlc3Rvcikge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIGNsaWVudFJlY3RzLnJldmVyc2UoKTtcbiAgICAgIHJldHVybiAoX3JlZiA9IFtdKS5jb25jYXQuYXBwbHkoX3JlZiwgY2xpZW50UmVjdHMpO1xuICAgIH1cbiAgICB0ZW1wUmFuZ2Uuc2V0RW5kQmVmb3JlKGFuY2VzdG9yKTtcbiAgfVxuXG4gICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdGb3VuZCBhbiB1bmV4cGVjdGVkIGRldGFjaGVkIHN1YnRyZWUgd2hlbiBnZXR0aW5nIHJhbmdlIGNsaWVudCByZWN0cy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG59XG4vKiBlc2xpbnQtZW5hYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG5cbi8qKlxuICogTGlrZSByYW5nZS5nZXRDbGllbnRSZWN0cygpIGJ1dCBub3JtYWxpemVzIGZvciBicm93c2VyIGJ1Z3MuXG4gKi9cbnZhciBnZXRSYW5nZUNsaWVudFJlY3RzID0gaXNDaHJvbWUgPyBnZXRSYW5nZUNsaWVudFJlY3RzQ2hyb21lIDogZnVuY3Rpb24gKHJhbmdlKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKHJhbmdlLmdldENsaWVudFJlY3RzKCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYW5nZUNsaWVudFJlY3RzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBnZXRDb250ZW50U3RhdGVGcmFnbWVudCA9IHJlcXVpcmUoJy4vZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQnKTtcblxuZnVuY3Rpb24gZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uKGVkaXRvclN0YXRlKSB7XG4gIHZhciBzZWxlY3Rpb25TdGF0ZSA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuXG4gIGlmIChzZWxlY3Rpb25TdGF0ZS5pc0NvbGxhcHNlZCgpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgc2VsZWN0aW9uU3RhdGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEZyYWdtZW50RnJvbVNlbGVjdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRPZmZzZXRLZXkgPSByZXF1aXJlKCcuL0RyYWZ0T2Zmc2V0S2V5Jyk7XG5cbnZhciBudWxsdGhyb3dzID0gcmVxdWlyZSgnZmJqcy9saWIvbnVsbHRocm93cycpO1xuXG5mdW5jdGlvbiBnZXRVcGRhdGVkU2VsZWN0aW9uU3RhdGUoZWRpdG9yU3RhdGUsIGFuY2hvcktleSwgYW5jaG9yT2Zmc2V0LCBmb2N1c0tleSwgZm9jdXNPZmZzZXQpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IG51bGx0aHJvd3MoZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghYW5jaG9yS2V5IHx8ICFmb2N1c0tleSkge1xuICAgICAgLyplc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgc2VsZWN0aW9uIHN0YXRlLicsIGFyZ3VtZW50cywgZWRpdG9yU3RhdGUudG9KUygpKTtcbiAgICAgIC8qZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gICAgICByZXR1cm4gc2VsZWN0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHZhciBhbmNob3JQYXRoID0gRHJhZnRPZmZzZXRLZXkuZGVjb2RlKGFuY2hvcktleSk7XG4gIHZhciBhbmNob3JCbG9ja0tleSA9IGFuY2hvclBhdGguYmxvY2tLZXk7XG4gIHZhciBhbmNob3JMZWFmID0gZWRpdG9yU3RhdGUuZ2V0QmxvY2tUcmVlKGFuY2hvckJsb2NrS2V5KS5nZXRJbihbYW5jaG9yUGF0aC5kZWNvcmF0b3JLZXksICdsZWF2ZXMnLCBhbmNob3JQYXRoLmxlYWZLZXldKTtcblxuICB2YXIgZm9jdXNQYXRoID0gRHJhZnRPZmZzZXRLZXkuZGVjb2RlKGZvY3VzS2V5KTtcbiAgdmFyIGZvY3VzQmxvY2tLZXkgPSBmb2N1c1BhdGguYmxvY2tLZXk7XG4gIHZhciBmb2N1c0xlYWYgPSBlZGl0b3JTdGF0ZS5nZXRCbG9ja1RyZWUoZm9jdXNCbG9ja0tleSkuZ2V0SW4oW2ZvY3VzUGF0aC5kZWNvcmF0b3JLZXksICdsZWF2ZXMnLCBmb2N1c1BhdGgubGVhZktleV0pO1xuXG4gIHZhciBhbmNob3JMZWFmU3RhcnQgPSBhbmNob3JMZWFmLmdldCgnc3RhcnQnKTtcbiAgdmFyIGZvY3VzTGVhZlN0YXJ0ID0gZm9jdXNMZWFmLmdldCgnc3RhcnQnKTtcblxuICB2YXIgYW5jaG9yQmxvY2tPZmZzZXQgPSBhbmNob3JMZWFmID8gYW5jaG9yTGVhZlN0YXJ0ICsgYW5jaG9yT2Zmc2V0IDogbnVsbDtcbiAgdmFyIGZvY3VzQmxvY2tPZmZzZXQgPSBmb2N1c0xlYWYgPyBmb2N1c0xlYWZTdGFydCArIGZvY3VzT2Zmc2V0IDogbnVsbDtcblxuICB2YXIgYXJlRXF1YWwgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yS2V5KCkgPT09IGFuY2hvckJsb2NrS2V5ICYmIHNlbGVjdGlvbi5nZXRBbmNob3JPZmZzZXQoKSA9PT0gYW5jaG9yQmxvY2tPZmZzZXQgJiYgc2VsZWN0aW9uLmdldEZvY3VzS2V5KCkgPT09IGZvY3VzQmxvY2tLZXkgJiYgc2VsZWN0aW9uLmdldEZvY3VzT2Zmc2V0KCkgPT09IGZvY3VzQmxvY2tPZmZzZXQ7XG5cbiAgaWYgKGFyZUVxdWFsKSB7XG4gICAgcmV0dXJuIHNlbGVjdGlvbjtcbiAgfVxuXG4gIHZhciBpc0JhY2t3YXJkID0gZmFsc2U7XG4gIGlmIChhbmNob3JCbG9ja0tleSA9PT0gZm9jdXNCbG9ja0tleSkge1xuICAgIHZhciBhbmNob3JMZWFmRW5kID0gYW5jaG9yTGVhZi5nZXQoJ2VuZCcpO1xuICAgIHZhciBmb2N1c0xlYWZFbmQgPSBmb2N1c0xlYWYuZ2V0KCdlbmQnKTtcbiAgICBpZiAoZm9jdXNMZWFmU3RhcnQgPT09IGFuY2hvckxlYWZTdGFydCAmJiBmb2N1c0xlYWZFbmQgPT09IGFuY2hvckxlYWZFbmQpIHtcbiAgICAgIGlzQmFja3dhcmQgPSBmb2N1c09mZnNldCA8IGFuY2hvck9mZnNldDtcbiAgICB9IGVsc2Uge1xuICAgICAgaXNCYWNrd2FyZCA9IGZvY3VzTGVhZlN0YXJ0IDwgYW5jaG9yTGVhZlN0YXJ0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgc3RhcnRLZXkgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLmdldEJsb2NrTWFwKCkua2V5U2VxKCkuc2tpcFVudGlsKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gdiA9PT0gYW5jaG9yQmxvY2tLZXkgfHwgdiA9PT0gZm9jdXNCbG9ja0tleTtcbiAgICB9KS5maXJzdCgpO1xuICAgIGlzQmFja3dhcmQgPSBzdGFydEtleSA9PT0gZm9jdXNCbG9ja0tleTtcbiAgfVxuXG4gIHJldHVybiBzZWxlY3Rpb24ubWVyZ2Uoe1xuICAgIGFuY2hvcktleTogYW5jaG9yQmxvY2tLZXksXG4gICAgYW5jaG9yT2Zmc2V0OiBhbmNob3JCbG9ja09mZnNldCxcbiAgICBmb2N1c0tleTogZm9jdXNCbG9ja0tleSxcbiAgICBmb2N1c09mZnNldDogZm9jdXNCbG9ja09mZnNldCxcbiAgICBpc0JhY2t3YXJkOiBpc0JhY2t3YXJkXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldFRleHRDb250ZW50RnJvbUZpbGVzXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIFRFWFRfQ0xJUFBJTkdfUkVHRVggPSAvXFwudGV4dENsaXBwaW5nJC87XG5cbnZhciBURVhUX1RZUEVTID0ge1xuICAndGV4dC9wbGFpbic6IHRydWUsXG4gICd0ZXh0L2h0bWwnOiB0cnVlLFxuICAndGV4dC9ydGYnOiB0cnVlXG59O1xuXG4vLyBTb21ld2hhdCBhcmJpdHJhcnkgdXBwZXIgYm91bmQgb24gdGV4dCBzaXplLiBMZXQncyBub3QgbG9jayB1cCB0aGUgYnJvd3Nlci5cbnZhciBURVhUX1NJWkVfVVBQRVJfQk9VTkQgPSA1MDAwO1xuXG4vKipcbiAqIEV4dHJhY3QgdGhlIHRleHQgY29udGVudCBmcm9tIGEgZmlsZSBsaXN0LlxuICovXG5mdW5jdGlvbiBnZXRUZXh0Q29udGVudEZyb21GaWxlcyhmaWxlcywgY2FsbGJhY2spIHtcbiAgdmFyIHJlYWRDb3VudCA9IDA7XG4gIHZhciByZXN1bHRzID0gW107XG4gIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKCAvKmJsb2IqL2ZpbGUpIHtcbiAgICByZWFkRmlsZShmaWxlLCBmdW5jdGlvbiAoIC8qc3RyaW5nKi90ZXh0KSB7XG4gICAgICByZWFkQ291bnQrKztcbiAgICAgIHRleHQgJiYgcmVzdWx0cy5wdXNoKHRleHQuc2xpY2UoMCwgVEVYVF9TSVpFX1VQUEVSX0JPVU5EKSk7XG4gICAgICBpZiAocmVhZENvdW50ID09IGZpbGVzLmxlbmd0aCkge1xuICAgICAgICBjYWxsYmFjayhyZXN1bHRzLmpvaW4oJ1xccicpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogdG9kbyBpc2FhYzogRG8gd29yayB0byB0dXJuIGh0bWwvcnRmIGludG8gYSBjb250ZW50IGZyYWdtZW50LlxuICovXG5mdW5jdGlvbiByZWFkRmlsZShmaWxlLCBjYWxsYmFjaykge1xuICBpZiAoIWdsb2JhbC5GaWxlUmVhZGVyIHx8IGZpbGUudHlwZSAmJiAhKGZpbGUudHlwZSBpbiBURVhUX1RZUEVTKSkge1xuICAgIGNhbGxiYWNrKCcnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZmlsZS50eXBlID09PSAnJykge1xuICAgIHZhciBjb250ZW50cyA9ICcnO1xuICAgIC8vIFNwZWNpYWwtY2FzZSB0ZXh0IGNsaXBwaW5ncywgd2hpY2ggaGF2ZSBhbiBlbXB0eSB0eXBlIGJ1dCBpbmNsdWRlXG4gICAgLy8gYC50ZXh0Q2xpcHBpbmdgIGluIHRoZSBmaWxlIG5hbWUuIGByZWFkQXNUZXh0YCByZXN1bHRzIGluIGFuIGVtcHR5XG4gICAgLy8gc3RyaW5nIGZvciB0ZXh0IGNsaXBwaW5ncywgc28gd2UgZm9yY2UgdGhlIGZpbGUgbmFtZSB0byBzZXJ2ZVxuICAgIC8vIGFzIHRoZSB0ZXh0IHZhbHVlIGZvciB0aGUgZmlsZS5cbiAgICBpZiAoVEVYVF9DTElQUElOR19SRUdFWC50ZXN0KGZpbGUubmFtZSkpIHtcbiAgICAgIGNvbnRlbnRzID0gZmlsZS5uYW1lLnJlcGxhY2UoVEVYVF9DTElQUElOR19SRUdFWCwgJycpO1xuICAgIH1cbiAgICBjYWxsYmFjayhjb250ZW50cyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlYWRlci5yZXN1bHQ7XG4gICAgISh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnV2Ugc2hvdWxkIGJlIGNhbGxpbmcgXCJGaWxlUmVhZGVyLnJlYWRBc1RleHRcIiB3aGljaCByZXR1cm5zIGEgc3RyaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gIH07XG4gIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgIGNhbGxiYWNrKCcnKTtcbiAgfTtcbiAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGV4dENvbnRlbnRGcm9tRmlsZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2V0IG9mZnNldCBrZXkgZnJvbSBhIG5vZGUgb3IgaXQncyBjaGlsZCBub2Rlcy4gUmV0dXJuIHRoZSBmaXJzdCBvZmZzZXQga2V5XG4gKiBmb3VuZCBvbiB0aGUgRE9NIHRyZWUgb2YgZ2l2ZW4gbm9kZS5cbiAqL1xuXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlKG5vZGUpIHtcbiAgaWYgKG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgdmFyIG9mZnNldEtleSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLW9mZnNldC1rZXknKTtcbiAgICBpZiAob2Zmc2V0S2V5KSB7XG4gICAgICByZXR1cm4gb2Zmc2V0S2V5O1xuICAgIH1cbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIGNoaWxkT2Zmc2V0S2V5ID0gZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZShub2RlLmNoaWxkTm9kZXNbaWldKTtcbiAgICAgIGlmIChjaGlsZE9mZnNldEtleSkge1xuICAgICAgICByZXR1cm4gY2hpbGRPZmZzZXRLZXk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIFBob3Rvc01pbWVUeXBlID0gcmVxdWlyZSgnLi9QaG90b3NNaW1lVHlwZScpO1xuXG52YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKCcuL2NyZWF0ZUFycmF5RnJvbU1peGVkJyk7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG52YXIgQ1JfTEZfUkVHRVggPSBuZXcgUmVnRXhwKCdcXHJcXG4nLCAnZycpO1xudmFyIExGX09OTFkgPSAnXFxuJztcblxudmFyIFJJQ0hfVEVYVF9UWVBFUyA9IHtcbiAgJ3RleHQvcnRmJzogMSxcbiAgJ3RleHQvaHRtbCc6IDFcbn07XG5cbi8qKlxuICogSWYgRGF0YVRyYW5zZmVySXRlbSBpcyBhIGZpbGUgdGhlbiByZXR1cm4gdGhlIEJsb2Igb2YgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gaXRlbVxuICogQHJldHVybiB7P2Jsb2J9XG4gKi9cbmZ1bmN0aW9uIGdldEZpbGVGcm9tRGF0YVRyYW5zZmVyKGl0ZW0pIHtcbiAgaWYgKGl0ZW0ua2luZCA9PSAnZmlsZScpIHtcbiAgICByZXR1cm4gaXRlbS5nZXRBc0ZpbGUoKTtcbiAgfVxufVxuXG52YXIgRGF0YVRyYW5zZmVyID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFcbiAgICovXG4gIGZ1bmN0aW9uIERhdGFUcmFuc2ZlcihkYXRhKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGFUcmFuc2Zlcik7XG5cbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgLy8gVHlwZXMgY291bGQgYmUgRE9NU3RyaW5nTGlzdCBvciBhcnJheVxuICAgIHRoaXMudHlwZXMgPSBkYXRhLnR5cGVzID8gY3JlYXRlQXJyYXlGcm9tTWl4ZWQoZGF0YS50eXBlcykgOiBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJcyB0aGlzIGxpa2VseSB0byBiZSBhIHJpY2ggdGV4dCBkYXRhIHRyYW5zZmVyP1xuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIERhdGFUcmFuc2Zlci5wcm90b3R5cGUuaXNSaWNoVGV4dCA9IGZ1bmN0aW9uIGlzUmljaFRleHQoKSB7XG4gICAgLy8gSWYgSFRNTCBpcyBhdmFpbGFibGUsIHRyZWF0IHRoaXMgZGF0YSBhcyByaWNoIHRleHQuIFRoaXMgd2F5LCB3ZSBhdm9pZFxuICAgIC8vIHVzaW5nIGEgcGFzdGVkIGltYWdlIGlmIGl0IGlzIHBhY2thZ2VkIHdpdGggSFRNTCAtLSB0aGlzIG1heSBvY2N1ciB3aXRoXG4gICAgLy8gcGFzdGVzIGZyb20gTVMgV29yZCwgZm9yIGV4YW1wbGUuICBIb3dldmVyIHRoaXMgaXMgb25seSByaWNoIHRleHQgaWZcbiAgICAvLyB0aGVyZSdzIGFjY29tcGFueWluZyB0ZXh0LlxuICAgIGlmICh0aGlzLmdldEhUTUwoKSAmJiB0aGlzLmdldFRleHQoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gV2hlbiBhbiBpbWFnZSBpcyBjb3BpZWQgZnJvbSBhIHByZXZpZXcgd2luZG93LCB5b3UgZW5kIHVwIHdpdGggdHdvXG4gICAgLy8gRGF0YVRyYW5zZmVySXRlbXMgb25lIG9mIHdoaWNoIGlzIGEgZmlsZSdzIG1ldGFkYXRhIGFzIHRleHQuICBTa2lwIHRob3NlLlxuICAgIGlmICh0aGlzLmlzSW1hZ2UoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnR5cGVzLnNvbWUoZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHJldHVybiBSSUNIX1RFWFRfVFlQRVNbdHlwZV07XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCByYXcgdGV4dC5cbiAgICpcbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICovXG5cblxuICBEYXRhVHJhbnNmZXIucHJvdG90eXBlLmdldFRleHQgPSBmdW5jdGlvbiBnZXRUZXh0KCkge1xuICAgIHZhciB0ZXh0O1xuICAgIGlmICh0aGlzLmRhdGEuZ2V0RGF0YSkge1xuICAgICAgaWYgKCF0aGlzLnR5cGVzLmxlbmd0aCkge1xuICAgICAgICB0ZXh0ID0gdGhpcy5kYXRhLmdldERhdGEoJ1RleHQnKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy50eXBlcy5pbmRleE9mKCd0ZXh0L3BsYWluJykgIT0gLTEpIHtcbiAgICAgICAgdGV4dCA9IHRoaXMuZGF0YS5nZXREYXRhKCd0ZXh0L3BsYWluJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXh0ID8gdGV4dC5yZXBsYWNlKENSX0xGX1JFR0VYLCBMRl9PTkxZKSA6IG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBIVE1MIHBhc3RlIGRhdGFcbiAgICpcbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICovXG5cblxuICBEYXRhVHJhbnNmZXIucHJvdG90eXBlLmdldEhUTUwgPSBmdW5jdGlvbiBnZXRIVE1MKCkge1xuICAgIGlmICh0aGlzLmRhdGEuZ2V0RGF0YSkge1xuICAgICAgaWYgKCF0aGlzLnR5cGVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmdldERhdGEoJ1RleHQnKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy50eXBlcy5pbmRleE9mKCd0ZXh0L2h0bWwnKSAhPSAtMSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmdldERhdGEoJ3RleHQvaHRtbCcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogSXMgdGhpcyBhIGxpbmsgZGF0YSB0cmFuc2Zlcj9cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBEYXRhVHJhbnNmZXIucHJvdG90eXBlLmlzTGluayA9IGZ1bmN0aW9uIGlzTGluaygpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlcy5zb21lKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICByZXR1cm4gdHlwZS5pbmRleE9mKCdVcmwnKSAhPSAtMSB8fCB0eXBlLmluZGV4T2YoJ3RleHQvdXJpLWxpc3QnKSAhPSAtMSB8fCB0eXBlLmluZGV4T2YoJ3RleHQveC1tb3otdXJsJyk7XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBhIGxpbmsgdXJsLlxuICAgKlxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuICAgKi9cblxuXG4gIERhdGFUcmFuc2Zlci5wcm90b3R5cGUuZ2V0TGluayA9IGZ1bmN0aW9uIGdldExpbmsoKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5nZXREYXRhKSB7XG4gICAgICBpZiAodGhpcy50eXBlcy5pbmRleE9mKCd0ZXh0L3gtbW96LXVybCcpICE9IC0xKSB7XG4gICAgICAgIHZhciB1cmwgPSB0aGlzLmRhdGEuZ2V0RGF0YSgndGV4dC94LW1vei11cmwnKS5zcGxpdCgnXFxuJyk7XG4gICAgICAgIHJldHVybiB1cmxbMF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50eXBlcy5pbmRleE9mKCd0ZXh0L3VyaS1saXN0JykgIT0gLTEgPyB0aGlzLmRhdGEuZ2V0RGF0YSgndGV4dC91cmktbGlzdCcpIDogdGhpcy5kYXRhLmdldERhdGEoJ3VybCcpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJcyB0aGlzIGFuIGltYWdlIGRhdGEgdHJhbnNmZXI/XG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgRGF0YVRyYW5zZmVyLnByb3RvdHlwZS5pc0ltYWdlID0gZnVuY3Rpb24gaXNJbWFnZSgpIHtcbiAgICB2YXIgaXNJbWFnZSA9IHRoaXMudHlwZXMuc29tZShmdW5jdGlvbiAodHlwZSkge1xuICAgICAgLy8gRmlyZWZveCB3aWxsIGhhdmUgYSB0eXBlIG9mIGFwcGxpY2F0aW9uL3gtbW96LWZpbGUgZm9yIGltYWdlcyBkdXJpbmdcbiAgICAgIC8vIGRyYWdnaW5nXG4gICAgICByZXR1cm4gdHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi94LW1vei1maWxlJykgIT0gLTE7XG4gICAgfSk7XG5cbiAgICBpZiAoaXNJbWFnZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGl0ZW1zID0gdGhpcy5nZXRGaWxlcygpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0eXBlID0gaXRlbXNbaV0udHlwZTtcbiAgICAgIGlmICghUGhvdG9zTWltZVR5cGUuaXNJbWFnZSh0eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgRGF0YVRyYW5zZmVyLnByb3RvdHlwZS5nZXRDb3VudCA9IGZ1bmN0aW9uIGdldENvdW50KCkge1xuICAgIGlmICh0aGlzLmRhdGEuaGFzT3duUHJvcGVydHkoJ2l0ZW1zJykpIHtcbiAgICAgIHJldHVybiB0aGlzLmRhdGEuaXRlbXMubGVuZ3RoO1xuICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLmhhc093blByb3BlcnR5KCdtb3pJdGVtQ291bnQnKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZGF0YS5tb3pJdGVtQ291bnQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLmRhdGEuZmlsZXMpIHtcbiAgICAgIHJldHVybiB0aGlzLmRhdGEuZmlsZXMubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IGZpbGVzLlxuICAgKlxuICAgKiBAcmV0dXJuIHthcnJheX1cbiAgICovXG5cblxuICBEYXRhVHJhbnNmZXIucHJvdG90eXBlLmdldEZpbGVzID0gZnVuY3Rpb24gZ2V0RmlsZXMoKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5pdGVtcykge1xuICAgICAgLy8gY3JlYXRlQXJyYXlGcm9tTWl4ZWQgZG9lc24ndCBwcm9wZXJseSBoYW5kbGUgRGF0YVRyYW5zZmVySXRlbUxpc3RzLlxuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuZGF0YS5pdGVtcykubWFwKGdldEZpbGVGcm9tRGF0YVRyYW5zZmVyKS5maWx0ZXIoZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5maWxlcykge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuZGF0YS5maWxlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEFyZSB0aGVyZSBhbnkgZmlsZXMgdG8gZmV0Y2g/XG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgRGF0YVRyYW5zZmVyLnByb3RvdHlwZS5oYXNGaWxlcyA9IGZ1bmN0aW9uIGhhc0ZpbGVzKCkge1xuICAgIHJldHVybiB0aGlzLmdldEZpbGVzKCkubGVuZ3RoID4gMDtcbiAgfTtcblxuICByZXR1cm4gRGF0YVRyYW5zZmVyO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFUcmFuc2ZlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7RE9NRG9jdW1lbnR9IGRvY1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gX2lzVmlld3BvcnRTY3JvbGxFbGVtZW50KGVsZW1lbnQsIGRvYykge1xuICByZXR1cm4gISFkb2MgJiYgKGVsZW1lbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgfHwgZWxlbWVudCA9PT0gZG9jLmJvZHkpO1xufVxuXG4vKipcbiAqIFNjcm9sbCBNb2R1bGUuIFRoaXMgY2xhc3MgY29udGFpbnMgNCBzaW1wbGUgc3RhdGljIGZ1bmN0aW9uc1xuICogdG8gYmUgdXNlZCB0byBhY2Nlc3MgRWxlbWVudC5zY3JvbGxUb3Avc2Nyb2xsTGVmdCBwcm9wZXJ0aWVzLlxuICogVG8gc29sdmUgdGhlIGluY29uc2lzdGVuY2llcyBiZXR3ZWVuIGJyb3dzZXJzIHdoZW4gZWl0aGVyXG4gKiBkb2N1bWVudC5ib2R5IG9yIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCBpcyBzdXBwbGllZCxcbiAqIGJlbG93IGxvZ2ljIHdpbGwgYmUgdXNlZCB0byBhbGxldmlhdGUgdGhlIGlzc3VlOlxuICpcbiAqIDEuIElmICdlbGVtZW50JyBpcyBlaXRoZXIgJ2RvY3VtZW50LmJvZHknIG9yICdkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gKiAgICBnZXQgd2hpY2hldmVyIGVsZW1lbnQncyAnc2Nyb2xse1RvcCxMZWZ0fScgaXMgbGFyZ2VyLlxuICogMi4gSWYgJ2VsZW1lbnQnIGlzIGVpdGhlciAnZG9jdW1lbnQuYm9keScgb3IgJ2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCcsXG4gKiAgICBzZXQgdGhlICdzY3JvbGx7VG9wLExlZnR9JyBvbiBib3RoIGVsZW1lbnRzLlxuICovXG5cbnZhciBTY3JvbGwgPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0VG9wOiBmdW5jdGlvbiBnZXRUb3AoZWxlbWVudCkge1xuICAgIHZhciBkb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgcmV0dXJuIF9pc1ZpZXdwb3J0U2Nyb2xsRWxlbWVudChlbGVtZW50LCBkb2MpID9cbiAgICAvLyBJbiBwcmFjdGljZSwgdGhleSB3aWxsIGVpdGhlciBib3RoIGhhdmUgdGhlIHNhbWUgdmFsdWUsXG4gICAgLy8gb3Igb25lIHdpbGwgYmUgemVybyBhbmQgdGhlIG90aGVyIHdpbGwgYmUgdGhlIHNjcm9sbCBwb3NpdGlvblxuICAgIC8vIG9mIHRoZSB2aWV3cG9ydC4gU28gd2UgY2FuIHVzZSBgWCB8fCBZYCBpbnN0ZWFkIG9mIGBNYXRoLm1heChYLCBZKWBcbiAgICBkb2MuYm9keS5zY3JvbGxUb3AgfHwgZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgOiBlbGVtZW50LnNjcm9sbFRvcDtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuZXdUb3BcbiAgICovXG4gIHNldFRvcDogZnVuY3Rpb24gc2V0VG9wKGVsZW1lbnQsIG5ld1RvcCkge1xuICAgIHZhciBkb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgaWYgKF9pc1ZpZXdwb3J0U2Nyb2xsRWxlbWVudChlbGVtZW50LCBkb2MpKSB7XG4gICAgICBkb2MuYm9keS5zY3JvbGxUb3AgPSBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA9IG5ld1RvcDtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5zY3JvbGxUb3AgPSBuZXdUb3A7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVmdDogZnVuY3Rpb24gZ2V0TGVmdChlbGVtZW50KSB7XG4gICAgdmFyIGRvYyA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gX2lzVmlld3BvcnRTY3JvbGxFbGVtZW50KGVsZW1lbnQsIGRvYykgPyBkb2MuYm9keS5zY3JvbGxMZWZ0IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCA6IGVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuZXdMZWZ0XG4gICAqL1xuICBzZXRMZWZ0OiBmdW5jdGlvbiBzZXRMZWZ0KGVsZW1lbnQsIG5ld0xlZnQpIHtcbiAgICB2YXIgZG9jID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICAgIGlmIChfaXNWaWV3cG9ydFNjcm9sbEVsZW1lbnQoZWxlbWVudCwgZG9jKSkge1xuICAgICAgZG9jLmJvZHkuc2Nyb2xsTGVmdCA9IGRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCA9IG5ld0xlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IG5ld0xlZnQ7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNjcm9sbDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0RWRpdG9yQmxvY2sucmVhY3RcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBfZXh0ZW5kcyA9IF9hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIERyYWZ0RWRpdG9yTGVhZiA9IHJlcXVpcmUoJy4vRHJhZnRFZGl0b3JMZWFmLnJlYWN0Jyk7XG52YXIgRHJhZnRPZmZzZXRLZXkgPSByZXF1aXJlKCcuL0RyYWZ0T2Zmc2V0S2V5Jyk7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG52YXIgU2Nyb2xsID0gcmVxdWlyZSgnZmJqcy9saWIvU2Nyb2xsJyk7XG52YXIgU3R5bGUgPSByZXF1aXJlKCdmYmpzL2xpYi9TdHlsZScpO1xudmFyIFVuaWNvZGVCaWRpID0gcmVxdWlyZSgnZmJqcy9saWIvVW5pY29kZUJpZGknKTtcbnZhciBVbmljb2RlQmlkaURpcmVjdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL1VuaWNvZGVCaWRpRGlyZWN0aW9uJyk7XG5cbnZhciBjeCA9IHJlcXVpcmUoJ2ZianMvbGliL2N4Jyk7XG52YXIgZ2V0RWxlbWVudFBvc2l0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZ2V0RWxlbWVudFBvc2l0aW9uJyk7XG52YXIgZ2V0U2Nyb2xsUG9zaXRpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRTY3JvbGxQb3NpdGlvbicpO1xudmFyIGdldFZpZXdwb3J0RGltZW5zaW9ucyA9IHJlcXVpcmUoJ2ZianMvbGliL2dldFZpZXdwb3J0RGltZW5zaW9ucycpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIG51bGx0aHJvd3MgPSByZXF1aXJlKCdmYmpzL2xpYi9udWxsdGhyb3dzJyk7XG5cbnZhciBTQ1JPTExfQlVGRkVSID0gMTA7XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgYSBibG9jayBvdmVybGFwcyB3aXRoIGVpdGhlciBlZGdlIG9mIHRoZSBgU2VsZWN0aW9uU3RhdGVgLlxuICovXG52YXIgaXNCbG9ja09uU2VsZWN0aW9uRWRnZSA9IGZ1bmN0aW9uIGlzQmxvY2tPblNlbGVjdGlvbkVkZ2Uoc2VsZWN0aW9uLCBrZXkpIHtcbiAgcmV0dXJuIHNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKSA9PT0ga2V5IHx8IHNlbGVjdGlvbi5nZXRGb2N1c0tleSgpID09PSBrZXk7XG59O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGJsb2NrIHJlbmRlcmVyIGZvciBhIGBEcmFmdEVkaXRvcmAgY29tcG9uZW50LlxuICpcbiAqIEEgYERyYWZ0RWRpdG9yQmxvY2tgIGlzIGFibGUgdG8gcmVuZGVyIGEgZ2l2ZW4gYENvbnRlbnRCbG9ja2AgdG8gaXRzXG4gKiBhcHByb3ByaWF0ZSBkZWNvcmF0b3IgYW5kIGlubGluZSBzdHlsZSBjb21wb25lbnRzLlxuICovXG5cbnZhciBEcmFmdEVkaXRvckJsb2NrID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERyYWZ0RWRpdG9yQmxvY2ssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERyYWZ0RWRpdG9yQmxvY2soKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyYWZ0RWRpdG9yQmxvY2spO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBEcmFmdEVkaXRvckJsb2NrLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuYmxvY2sgIT09IG5leHRQcm9wcy5ibG9jayB8fCB0aGlzLnByb3BzLnRyZWUgIT09IG5leHRQcm9wcy50cmVlIHx8IHRoaXMucHJvcHMuZGlyZWN0aW9uICE9PSBuZXh0UHJvcHMuZGlyZWN0aW9uIHx8IGlzQmxvY2tPblNlbGVjdGlvbkVkZ2UobmV4dFByb3BzLnNlbGVjdGlvbiwgbmV4dFByb3BzLmJsb2NrLmdldEtleSgpKSAmJiBuZXh0UHJvcHMuZm9yY2VTZWxlY3Rpb247XG4gIH07XG5cbiAgLyoqXG4gICAqIFdoZW4gYSBibG9jayBpcyBtb3VudGVkIGFuZCBvdmVybGFwcyB0aGUgc2VsZWN0aW9uIHN0YXRlLCB3ZSBuZWVkIHRvIG1ha2VcbiAgICogc3VyZSB0aGF0IHRoZSBjdXJzb3IgaXMgdmlzaWJsZSB0byBtYXRjaCBuYXRpdmUgYmVoYXZpb3IuIFRoaXMgbWF5IG5vdFxuICAgKiBiZSB0aGUgY2FzZSBpZiB0aGUgdXNlciBoYXMgcHJlc3NlZCBgUkVUVVJOYCBvciBwYXN0ZWQgc29tZSBjb250ZW50LCBzaW5jZVxuICAgKiBwcm9ncmFtYXRpY2FsbHkgY3JlYXRpbmcgdGhlc2UgbmV3IGJsb2NrcyBhbmQgc2V0dGluZyB0aGUgRE9NIHNlbGVjdGlvblxuICAgKiB3aWxsIG1pc3Mgb3V0IG9uIHRoZSBicm93c2VyIG5hdGl2ZWx5IHNjcm9sbGluZyB0byB0aGF0IHBvc2l0aW9uLlxuICAgKlxuICAgKiBUbyByZXBsaWNhdGUgbmF0aXZlIGJlaGF2aW9yLCBpZiB0aGUgYmxvY2sgb3ZlcmxhcHMgdGhlIHNlbGVjdGlvbiBzdGF0ZVxuICAgKiBvbiBtb3VudCwgZm9yY2UgdGhlIHNjcm9sbCBwb3NpdGlvbi4gQ2hlY2sgdGhlIHNjcm9sbCBzdGF0ZSBvZiB0aGUgc2Nyb2xsXG4gICAqIHBhcmVudCwgYW5kIGFkanVzdCBpdCB0byBhbGlnbiB0aGUgZW50aXJlIGJsb2NrIHRvIHRoZSBib3R0b20gb2YgdGhlXG4gICAqIHNjcm9sbCBwYXJlbnQuXG4gICAqL1xuXG5cbiAgRHJhZnRFZGl0b3JCbG9jay5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gdGhpcy5wcm9wcy5zZWxlY3Rpb247XG4gICAgdmFyIGVuZEtleSA9IHNlbGVjdGlvbi5nZXRFbmRLZXkoKTtcbiAgICBpZiAoIXNlbGVjdGlvbi5nZXRIYXNGb2N1cygpIHx8IGVuZEtleSAhPT0gdGhpcy5wcm9wcy5ibG9jay5nZXRLZXkoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBibG9ja05vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICB2YXIgc2Nyb2xsUGFyZW50ID0gU3R5bGUuZ2V0U2Nyb2xsUGFyZW50KGJsb2NrTm9kZSk7XG4gICAgdmFyIHNjcm9sbFBvc2l0aW9uID0gZ2V0U2Nyb2xsUG9zaXRpb24oc2Nyb2xsUGFyZW50KTtcbiAgICB2YXIgc2Nyb2xsRGVsdGEgPSB2b2lkIDA7XG5cbiAgICBpZiAoc2Nyb2xsUGFyZW50ID09PSB3aW5kb3cpIHtcbiAgICAgIHZhciBub2RlUG9zaXRpb24gPSBnZXRFbGVtZW50UG9zaXRpb24oYmxvY2tOb2RlKTtcbiAgICAgIHZhciBub2RlQm90dG9tID0gbm9kZVBvc2l0aW9uLnkgKyBub2RlUG9zaXRpb24uaGVpZ2h0O1xuICAgICAgdmFyIHZpZXdwb3J0SGVpZ2h0ID0gZ2V0Vmlld3BvcnREaW1lbnNpb25zKCkuaGVpZ2h0O1xuICAgICAgc2Nyb2xsRGVsdGEgPSBub2RlQm90dG9tIC0gdmlld3BvcnRIZWlnaHQ7XG4gICAgICBpZiAoc2Nyb2xsRGVsdGEgPiAwKSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyhzY3JvbGxQb3NpdGlvbi54LCBzY3JvbGxQb3NpdGlvbi55ICsgc2Nyb2xsRGVsdGEgKyBTQ1JPTExfQlVGRkVSKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgIShibG9ja05vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnYmxvY2tOb2RlIGlzIG5vdCBhbiBIVE1MRWxlbWVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBibG9ja0JvdHRvbSA9IGJsb2NrTm9kZS5vZmZzZXRIZWlnaHQgKyBibG9ja05vZGUub2Zmc2V0VG9wO1xuICAgICAgdmFyIHNjcm9sbEJvdHRvbSA9IHNjcm9sbFBhcmVudC5vZmZzZXRIZWlnaHQgKyBzY3JvbGxQb3NpdGlvbi55O1xuICAgICAgc2Nyb2xsRGVsdGEgPSBibG9ja0JvdHRvbSAtIHNjcm9sbEJvdHRvbTtcbiAgICAgIGlmIChzY3JvbGxEZWx0YSA+IDApIHtcbiAgICAgICAgU2Nyb2xsLnNldFRvcChzY3JvbGxQYXJlbnQsIFNjcm9sbC5nZXRUb3Aoc2Nyb2xsUGFyZW50KSArIHNjcm9sbERlbHRhICsgU0NST0xMX0JVRkZFUik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIERyYWZ0RWRpdG9yQmxvY2sucHJvdG90eXBlLl9yZW5kZXJDaGlsZHJlbiA9IGZ1bmN0aW9uIF9yZW5kZXJDaGlsZHJlbigpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBibG9jayA9IHRoaXMucHJvcHMuYmxvY2s7XG4gICAgdmFyIGJsb2NrS2V5ID0gYmxvY2suZ2V0S2V5KCk7XG4gICAgdmFyIHRleHQgPSBibG9jay5nZXRUZXh0KCk7XG4gICAgdmFyIGxhc3RMZWFmU2V0ID0gdGhpcy5wcm9wcy50cmVlLnNpemUgLSAxO1xuICAgIHZhciBoYXNTZWxlY3Rpb24gPSBpc0Jsb2NrT25TZWxlY3Rpb25FZGdlKHRoaXMucHJvcHMuc2VsZWN0aW9uLCBibG9ja0tleSk7XG5cbiAgICByZXR1cm4gdGhpcy5wcm9wcy50cmVlLm1hcChmdW5jdGlvbiAobGVhZlNldCwgaWkpIHtcbiAgICAgIHZhciBsZWF2ZXNGb3JMZWFmU2V0ID0gbGVhZlNldC5nZXQoJ2xlYXZlcycpO1xuICAgICAgdmFyIGxhc3RMZWFmID0gbGVhdmVzRm9yTGVhZlNldC5zaXplIC0gMTtcbiAgICAgIHZhciBsZWF2ZXMgPSBsZWF2ZXNGb3JMZWFmU2V0Lm1hcChmdW5jdGlvbiAobGVhZiwgamopIHtcbiAgICAgICAgdmFyIG9mZnNldEtleSA9IERyYWZ0T2Zmc2V0S2V5LmVuY29kZShibG9ja0tleSwgaWksIGpqKTtcbiAgICAgICAgdmFyIHN0YXJ0ID0gbGVhZi5nZXQoJ3N0YXJ0Jyk7XG4gICAgICAgIHZhciBlbmQgPSBsZWFmLmdldCgnZW5kJyk7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERyYWZ0RWRpdG9yTGVhZiwge1xuICAgICAgICAgIGtleTogb2Zmc2V0S2V5LFxuICAgICAgICAgIG9mZnNldEtleTogb2Zmc2V0S2V5LFxuICAgICAgICAgIGJsb2NrOiBibG9jayxcbiAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgc2VsZWN0aW9uOiBoYXNTZWxlY3Rpb24gPyBfdGhpczIucHJvcHMuc2VsZWN0aW9uIDogbnVsbCxcbiAgICAgICAgICBmb3JjZVNlbGVjdGlvbjogX3RoaXMyLnByb3BzLmZvcmNlU2VsZWN0aW9uLFxuICAgICAgICAgIHRleHQ6IHRleHQuc2xpY2Uoc3RhcnQsIGVuZCksXG4gICAgICAgICAgc3R5bGVTZXQ6IGJsb2NrLmdldElubGluZVN0eWxlQXQoc3RhcnQpLFxuICAgICAgICAgIGN1c3RvbVN0eWxlTWFwOiBfdGhpczIucHJvcHMuY3VzdG9tU3R5bGVNYXAsXG4gICAgICAgICAgY3VzdG9tU3R5bGVGbjogX3RoaXMyLnByb3BzLmN1c3RvbVN0eWxlRm4sXG4gICAgICAgICAgaXNMYXN0OiBpaSA9PT0gbGFzdExlYWZTZXQgJiYgamogPT09IGxhc3RMZWFmXG4gICAgICAgIH0pO1xuICAgICAgfSkudG9BcnJheSgpO1xuXG4gICAgICB2YXIgZGVjb3JhdG9yS2V5ID0gbGVhZlNldC5nZXQoJ2RlY29yYXRvcktleScpO1xuICAgICAgaWYgKGRlY29yYXRvcktleSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBsZWF2ZXM7XG4gICAgICB9XG5cbiAgICAgIGlmICghX3RoaXMyLnByb3BzLmRlY29yYXRvcikge1xuICAgICAgICByZXR1cm4gbGVhdmVzO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVjb3JhdG9yID0gbnVsbHRocm93cyhfdGhpczIucHJvcHMuZGVjb3JhdG9yKTtcblxuICAgICAgdmFyIERlY29yYXRvckNvbXBvbmVudCA9IGRlY29yYXRvci5nZXRDb21wb25lbnRGb3JLZXkoZGVjb3JhdG9yS2V5KTtcbiAgICAgIGlmICghRGVjb3JhdG9yQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiBsZWF2ZXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBkZWNvcmF0b3JQcm9wcyA9IGRlY29yYXRvci5nZXRQcm9wc0ZvcktleShkZWNvcmF0b3JLZXkpO1xuICAgICAgdmFyIGRlY29yYXRvck9mZnNldEtleSA9IERyYWZ0T2Zmc2V0S2V5LmVuY29kZShibG9ja0tleSwgaWksIDApO1xuICAgICAgdmFyIGRlY29yYXRlZFRleHQgPSB0ZXh0LnNsaWNlKGxlYXZlc0ZvckxlYWZTZXQuZmlyc3QoKS5nZXQoJ3N0YXJ0JyksIGxlYXZlc0ZvckxlYWZTZXQubGFzdCgpLmdldCgnZW5kJykpO1xuXG4gICAgICAvLyBSZXNldHRpbmcgZGlyIHRvIHRoZSBzYW1lIHZhbHVlIG9uIGEgY2hpbGQgbm9kZSBtYWtlcyBDaHJvbWUvRmlyZWZveFxuICAgICAgLy8gY29uZnVzZWQgb24gY3Vyc29yIG1vdmVtZW50LiBTZWUgaHR0cDovL2pzZmlkZGxlLm5ldC9kMTU3a0xjay8zL1xuICAgICAgdmFyIGRpciA9IFVuaWNvZGVCaWRpRGlyZWN0aW9uLmdldEhUTUxEaXJJZkRpZmZlcmVudChVbmljb2RlQmlkaS5nZXREaXJlY3Rpb24oZGVjb3JhdGVkVGV4dCksIF90aGlzMi5wcm9wcy5kaXJlY3Rpb24pO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgRGVjb3JhdG9yQ29tcG9uZW50LFxuICAgICAgICBfZXh0ZW5kcyh7fSwgZGVjb3JhdG9yUHJvcHMsIHtcbiAgICAgICAgICBjb250ZW50U3RhdGU6IF90aGlzMi5wcm9wcy5jb250ZW50U3RhdGUsXG4gICAgICAgICAgZGVjb3JhdGVkVGV4dDogZGVjb3JhdGVkVGV4dCxcbiAgICAgICAgICBkaXI6IGRpcixcbiAgICAgICAgICBrZXk6IGRlY29yYXRvck9mZnNldEtleSxcbiAgICAgICAgICBlbnRpdHlLZXk6IGJsb2NrLmdldEVudGl0eUF0KGxlYWZTZXQuZ2V0KCdzdGFydCcpKSxcbiAgICAgICAgICBvZmZzZXRLZXk6IGRlY29yYXRvck9mZnNldEtleSB9KSxcbiAgICAgICAgbGVhdmVzXG4gICAgICApO1xuICAgIH0pLnRvQXJyYXkoKTtcbiAgfTtcblxuICBEcmFmdEVkaXRvckJsb2NrLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRpcmVjdGlvbiA9IF9wcm9wcy5kaXJlY3Rpb24sXG4gICAgICAgIG9mZnNldEtleSA9IF9wcm9wcy5vZmZzZXRLZXk7XG5cbiAgICB2YXIgY2xhc3NOYW1lID0gY3goe1xuICAgICAgJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9ibG9jayc6IHRydWUsXG4gICAgICAncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2x0cic6IGRpcmVjdGlvbiA9PT0gJ0xUUicsXG4gICAgICAncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L3J0bCc6IGRpcmVjdGlvbiA9PT0gJ1JUTCdcbiAgICB9KTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7ICdkYXRhLW9mZnNldC1rZXknOiBvZmZzZXRLZXksIGNsYXNzTmFtZTogY2xhc3NOYW1lIH0sXG4gICAgICB0aGlzLl9yZW5kZXJDaGlsZHJlbigpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gRHJhZnRFZGl0b3JCbG9jaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVkaXRvckJsb2NrOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNTZWxlY3Rpb25BdExlYWZTdGFydFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBpc1NlbGVjdGlvbkF0TGVhZlN0YXJ0KGVkaXRvclN0YXRlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGFuY2hvcktleSA9IHNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKTtcbiAgdmFyIGJsb2NrVHJlZSA9IGVkaXRvclN0YXRlLmdldEJsb2NrVHJlZShhbmNob3JLZXkpO1xuICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCk7XG5cbiAgdmFyIGlzQXRTdGFydCA9IGZhbHNlO1xuXG4gIGJsb2NrVHJlZS5zb21lKGZ1bmN0aW9uIChsZWFmU2V0KSB7XG4gICAgaWYgKG9mZnNldCA9PT0gbGVhZlNldC5nZXQoJ3N0YXJ0JykpIHtcbiAgICAgIGlzQXRTdGFydCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0IDwgbGVhZlNldC5nZXQoJ2VuZCcpKSB7XG4gICAgICByZXR1cm4gbGVhZlNldC5nZXQoJ2xlYXZlcycpLnNvbWUoZnVuY3Rpb24gKGxlYWYpIHtcbiAgICAgICAgdmFyIGxlYWZTdGFydCA9IGxlYWYuZ2V0KCdzdGFydCcpO1xuICAgICAgICBpZiAob2Zmc2V0ID09PSBsZWFmU3RhcnQpIHtcbiAgICAgICAgICBpc0F0U3RhcnQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcblxuICByZXR1cm4gaXNBdFN0YXJ0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU2VsZWN0aW9uQXRMZWFmU3RhcnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEZWZhdWx0RHJhZnRJbmxpbmVTdHlsZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQk9MRDoge1xuICAgIGZvbnRXZWlnaHQ6ICdib2xkJ1xuICB9LFxuXG4gIENPREU6IHtcbiAgICBmb250RmFtaWx5OiAnbW9ub3NwYWNlJyxcbiAgICB3b3JkV3JhcDogJ2JyZWFrLXdvcmQnXG4gIH0sXG5cbiAgSVRBTElDOiB7XG4gICAgZm9udFN0eWxlOiAnaXRhbGljJ1xuICB9LFxuXG4gIFNUUklLRVRIUk9VR0g6IHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ2xpbmUtdGhyb3VnaCdcbiAgfSxcblxuICBVTkRFUkxJTkU6IHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZSdcbiAgfVxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4vKipcbiAqIEJhc2ljIChzdGF0ZWxlc3MpIEFQSSBmb3IgdGV4dCBkaXJlY3Rpb24gZGV0ZWN0aW9uXG4gKlxuICogUGFydCBvZiBvdXIgaW1wbGVtZW50YXRpb24gb2YgVW5pY29kZSBCaWRpcmVjdGlvbmFsIEFsZ29yaXRobSAoVUJBKVxuICogVW5pY29kZSBTdGFuZGFyZCBBbm5leCAjOSAoVUFYOSlcbiAqIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjkvXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVW5pY29kZUJpZGlEaXJlY3Rpb24gPSByZXF1aXJlKCcuL1VuaWNvZGVCaWRpRGlyZWN0aW9uJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFJlZ0V4cCByYW5nZXMgb2YgY2hhcmFjdGVycyB3aXRoIGEgKlN0cm9uZyogQmlkaV9DbGFzcyB2YWx1ZS5cbiAqXG4gKiBEYXRhIGlzIGJhc2VkIG9uIERlcml2ZWRCaWRpQ2xhc3MudHh0IGluIFVDRCB2ZXJzaW9uIDcuMC4wLlxuICpcbiAqIE5PVEU6IEZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBvbmx5IHN1cHBvcnQgVW5pY29kZSdzXG4gKiAgICAgICBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCkgZm9yIG5vdy5cbiAqL1xudmFyIFJBTkdFX0JZX0JJRElfVFlQRSA9IHtcblxuICBMOiAnQS1aYS16XFx4QUFcXHhCNVxceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAxQkFcXHUwMUJCJyArICdcXHUwMUJDLVxcdTAxQkZcXHUwMUMwLVxcdTAxQzNcXHUwMUM0LVxcdTAyOTNcXHUwMjk0XFx1MDI5NS1cXHUwMkFGXFx1MDJCMC1cXHUwMkI4JyArICdcXHUwMkJCLVxcdTAyQzFcXHUwMkQwLVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVFXFx1MDM3MC1cXHUwMzczXFx1MDM3Ni1cXHUwMzc3JyArICdcXHUwMzdBXFx1MDM3Qi1cXHUwMzdEXFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExJyArICdcXHUwM0EzLVxcdTAzRjVcXHUwM0Y3LVxcdTA0ODFcXHUwNDgyXFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OScgKyAnXFx1MDU1QS1cXHUwNTVGXFx1MDU2MS1cXHUwNTg3XFx1MDU4OVxcdTA5MDNcXHUwOTA0LVxcdTA5MzlcXHUwOTNCXFx1MDkzRCcgKyAnXFx1MDkzRS1cXHUwOTQwXFx1MDk0OS1cXHUwOTRDXFx1MDk0RS1cXHUwOTRGXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NjQtXFx1MDk2NScgKyAnXFx1MDk2Ni1cXHUwOTZGXFx1MDk3MFxcdTA5NzFcXHUwOTcyLVxcdTA5ODBcXHUwOTgyLVxcdTA5ODNcXHUwOTg1LVxcdTA5OEMnICsgJ1xcdTA5OEYtXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEJyArICdcXHUwOUJFLVxcdTA5QzBcXHUwOUM3LVxcdTA5QzhcXHUwOUNCLVxcdTA5Q0NcXHUwOUNFXFx1MDlEN1xcdTA5REMtXFx1MDlERCcgKyAnXFx1MDlERi1cXHUwOUUxXFx1MDlFNi1cXHUwOUVGXFx1MDlGMC1cXHUwOUYxXFx1MDlGNC1cXHUwOUY5XFx1MDlGQVxcdTBBMDMnICsgJ1xcdTBBMDUtXFx1MEEwQVxcdTBBMEYtXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzItXFx1MEEzMycgKyAnXFx1MEEzNS1cXHUwQTM2XFx1MEEzOC1cXHUwQTM5XFx1MEEzRS1cXHUwQTQwXFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNjYtXFx1MEE2RicgKyAnXFx1MEE3Mi1cXHUwQTc0XFx1MEE4M1xcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMCcgKyAnXFx1MEFCMi1cXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCRFxcdTBBQkUtXFx1MEFDMFxcdTBBQzlcXHUwQUNCLVxcdTBBQ0NcXHUwQUQwJyArICdcXHUwQUUwLVxcdTBBRTFcXHUwQUU2LVxcdTBBRUZcXHUwQUYwXFx1MEIwMi1cXHUwQjAzXFx1MEIwNS1cXHUwQjBDXFx1MEIwRi1cXHUwQjEwJyArICdcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyLVxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNEXFx1MEIzRVxcdTBCNDAnICsgJ1xcdTBCNDctXFx1MEI0OFxcdTBCNEItXFx1MEI0Q1xcdTBCNTdcXHUwQjVDLVxcdTBCNURcXHUwQjVGLVxcdTBCNjFcXHUwQjY2LVxcdTBCNkYnICsgJ1xcdTBCNzBcXHUwQjcxXFx1MEI3Mi1cXHUwQjc3XFx1MEI4M1xcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NScgKyAnXFx1MEI5OS1cXHUwQjlBXFx1MEI5Q1xcdTBCOUUtXFx1MEI5RlxcdTBCQTMtXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOScgKyAnXFx1MEJCRS1cXHUwQkJGXFx1MEJDMS1cXHUwQkMyXFx1MEJDNi1cXHUwQkM4XFx1MEJDQS1cXHUwQkNDXFx1MEJEMFxcdTBCRDcnICsgJ1xcdTBCRTYtXFx1MEJFRlxcdTBCRjAtXFx1MEJGMlxcdTBDMDEtXFx1MEMwM1xcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMCcgKyAnXFx1MEMxMi1cXHUwQzI4XFx1MEMyQS1cXHUwQzM5XFx1MEMzRFxcdTBDNDEtXFx1MEM0NFxcdTBDNTgtXFx1MEM1OVxcdTBDNjAtXFx1MEM2MScgKyAnXFx1MEM2Ni1cXHUwQzZGXFx1MEM3RlxcdTBDODItXFx1MEM4M1xcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOCcgKyAnXFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDQkVcXHUwQ0JGXFx1MENDMC1cXHUwQ0M0XFx1MENDNicgKyAnXFx1MENDNy1cXHUwQ0M4XFx1MENDQS1cXHUwQ0NCXFx1MENENS1cXHUwQ0Q2XFx1MENERVxcdTBDRTAtXFx1MENFMVxcdTBDRTYtXFx1MENFRicgKyAnXFx1MENGMS1cXHUwQ0YyXFx1MEQwMi1cXHUwRDAzXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRCcgKyAnXFx1MEQzRS1cXHUwRDQwXFx1MEQ0Ni1cXHUwRDQ4XFx1MEQ0QS1cXHUwRDRDXFx1MEQ0RVxcdTBENTdcXHUwRDYwLVxcdTBENjEnICsgJ1xcdTBENjYtXFx1MEQ2RlxcdTBENzAtXFx1MEQ3NVxcdTBENzlcXHUwRDdBLVxcdTBEN0ZcXHUwRDgyLVxcdTBEODNcXHUwRDg1LVxcdTBEOTYnICsgJ1xcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRENGLVxcdTBERDFcXHUwREQ4LVxcdTBEREYnICsgJ1xcdTBERTYtXFx1MERFRlxcdTBERjItXFx1MERGM1xcdTBERjRcXHUwRTAxLVxcdTBFMzBcXHUwRTMyLVxcdTBFMzNcXHUwRTQwLVxcdTBFNDUnICsgJ1xcdTBFNDZcXHUwRTRGXFx1MEU1MC1cXHUwRTU5XFx1MEU1QS1cXHUwRTVCXFx1MEU4MS1cXHUwRTgyXFx1MEU4NFxcdTBFODctXFx1MEU4OCcgKyAnXFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBNycgKyAnXFx1MEVBQS1cXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMi1cXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzYnICsgJ1xcdTBFRDAtXFx1MEVEOVxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjAxLVxcdTBGMDNcXHUwRjA0LVxcdTBGMTJcXHUwRjEzXFx1MEYxNCcgKyAnXFx1MEYxNS1cXHUwRjE3XFx1MEYxQS1cXHUwRjFGXFx1MEYyMC1cXHUwRjI5XFx1MEYyQS1cXHUwRjMzXFx1MEYzNFxcdTBGMzZcXHUwRjM4JyArICdcXHUwRjNFLVxcdTBGM0ZcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjdGXFx1MEY4NVxcdTBGODgtXFx1MEY4QycgKyAnXFx1MEZCRS1cXHUwRkM1XFx1MEZDNy1cXHUwRkNDXFx1MEZDRS1cXHUwRkNGXFx1MEZEMC1cXHUwRkQ0XFx1MEZENS1cXHUwRkQ4JyArICdcXHUwRkQ5LVxcdTBGREFcXHUxMDAwLVxcdTEwMkFcXHUxMDJCLVxcdTEwMkNcXHUxMDMxXFx1MTAzOFxcdTEwM0ItXFx1MTAzQ1xcdTEwM0YnICsgJ1xcdTEwNDAtXFx1MTA0OVxcdTEwNEEtXFx1MTA0RlxcdTEwNTAtXFx1MTA1NVxcdTEwNTYtXFx1MTA1N1xcdTEwNUEtXFx1MTA1RFxcdTEwNjEnICsgJ1xcdTEwNjItXFx1MTA2NFxcdTEwNjUtXFx1MTA2NlxcdTEwNjctXFx1MTA2RFxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MScgKyAnXFx1MTA4My1cXHUxMDg0XFx1MTA4Ny1cXHUxMDhDXFx1MTA4RVxcdTEwOEZcXHUxMDkwLVxcdTEwOTlcXHUxMDlBLVxcdTEwOUMnICsgJ1xcdTEwOUUtXFx1MTA5RlxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQlxcdTEwRkMnICsgJ1xcdTEwRkQtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODgnICsgJ1xcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzUnICsgJ1xcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzNjAtXFx1MTM2OCcgKyAnXFx1MTM2OS1cXHUxMzdDXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y0XFx1MTQwMS1cXHUxNjZDXFx1MTY2RC1cXHUxNjZFJyArICdcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkVCLVxcdTE2RURcXHUxNkVFLVxcdTE2RjAnICsgJ1xcdTE2RjEtXFx1MTZGOFxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxMVxcdTE3MjAtXFx1MTczMVxcdTE3MzUtXFx1MTczNicgKyAnXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdCNlxcdTE3QkUtXFx1MTdDNScgKyAnXFx1MTdDNy1cXHUxN0M4XFx1MTdENC1cXHUxN0Q2XFx1MTdEN1xcdTE3RDgtXFx1MTdEQVxcdTE3RENcXHUxN0UwLVxcdTE3RTknICsgJ1xcdTE4MTAtXFx1MTgxOVxcdTE4MjAtXFx1MTg0MlxcdTE4NDNcXHUxODQ0LVxcdTE4NzdcXHUxODgwLVxcdTE4QThcXHUxOEFBJyArICdcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTIzLVxcdTE5MjZcXHUxOTI5LVxcdTE5MkJcXHUxOTMwLVxcdTE5MzEnICsgJ1xcdTE5MzMtXFx1MTkzOFxcdTE5NDYtXFx1MTk0RlxcdTE5NTAtXFx1MTk2RFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlBQicgKyAnXFx1MTlCMC1cXHUxOUMwXFx1MTlDMS1cXHUxOUM3XFx1MTlDOC1cXHUxOUM5XFx1MTlEMC1cXHUxOUQ5XFx1MTlEQVxcdTFBMDAtXFx1MUExNicgKyAnXFx1MUExOS1cXHUxQTFBXFx1MUExRS1cXHUxQTFGXFx1MUEyMC1cXHUxQTU0XFx1MUE1NVxcdTFBNTdcXHUxQTYxXFx1MUE2My1cXHUxQTY0JyArICdcXHUxQTZELVxcdTFBNzJcXHUxQTgwLVxcdTFBODlcXHUxQTkwLVxcdTFBOTlcXHUxQUEwLVxcdTFBQTZcXHUxQUE3XFx1MUFBOC1cXHUxQUFEJyArICdcXHUxQjA0XFx1MUIwNS1cXHUxQjMzXFx1MUIzNVxcdTFCM0JcXHUxQjNELVxcdTFCNDFcXHUxQjQzLVxcdTFCNDRcXHUxQjQ1LVxcdTFCNEInICsgJ1xcdTFCNTAtXFx1MUI1OVxcdTFCNUEtXFx1MUI2MFxcdTFCNjEtXFx1MUI2QVxcdTFCNzQtXFx1MUI3Q1xcdTFCODJcXHUxQjgzLVxcdTFCQTAnICsgJ1xcdTFCQTFcXHUxQkE2LVxcdTFCQTdcXHUxQkFBXFx1MUJBRS1cXHUxQkFGXFx1MUJCMC1cXHUxQkI5XFx1MUJCQS1cXHUxQkU1XFx1MUJFNycgKyAnXFx1MUJFQS1cXHUxQkVDXFx1MUJFRVxcdTFCRjItXFx1MUJGM1xcdTFCRkMtXFx1MUJGRlxcdTFDMDAtXFx1MUMyM1xcdTFDMjQtXFx1MUMyQicgKyAnXFx1MUMzNC1cXHUxQzM1XFx1MUMzQi1cXHUxQzNGXFx1MUM0MC1cXHUxQzQ5XFx1MUM0RC1cXHUxQzRGXFx1MUM1MC1cXHUxQzU5JyArICdcXHUxQzVBLVxcdTFDNzdcXHUxQzc4LVxcdTFDN0RcXHUxQzdFLVxcdTFDN0ZcXHUxQ0MwLVxcdTFDQzdcXHUxQ0QzXFx1MUNFMScgKyAnXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGMi1cXHUxQ0YzXFx1MUNGNS1cXHUxQ0Y2XFx1MUQwMC1cXHUxRDJCJyArICdcXHUxRDJDLVxcdTFENkFcXHUxRDZCLVxcdTFENzdcXHUxRDc4XFx1MUQ3OS1cXHUxRDlBXFx1MUQ5Qi1cXHUxREJGXFx1MUUwMC1cXHUxRjE1JyArICdcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNUQnICsgJ1xcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0MnICsgJ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIwMEUnICsgJ1xcdTIwNzFcXHUyMDdGXFx1MjA5MC1cXHUyMDlDXFx1MjEwMlxcdTIxMDdcXHUyMTBBLVxcdTIxMTNcXHUyMTE1XFx1MjExOS1cXHUyMTFEJyArICdcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzRcXHUyMTM1LVxcdTIxMzhcXHUyMTM5JyArICdcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE0RlxcdTIxNjAtXFx1MjE4MlxcdTIxODMtXFx1MjE4NCcgKyAnXFx1MjE4NS1cXHUyMTg4XFx1MjMzNi1cXHUyMzdBXFx1MjM5NVxcdTI0OUMtXFx1MjRFOVxcdTI2QUNcXHUyODAwLVxcdTI4RkYnICsgJ1xcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkM3QlxcdTJDN0MtXFx1MkM3RFxcdTJDN0UtXFx1MkNFNCcgKyAnXFx1MkNFQi1cXHUyQ0VFXFx1MkNGMi1cXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGJyArICdcXHUyRDcwXFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFJyArICdcXHUyREMwLVxcdTJEQzZcXHUyREM4LVxcdTJEQ0VcXHUyREQwLVxcdTJERDZcXHUyREQ4LVxcdTJEREVcXHUzMDA1XFx1MzAwNlxcdTMwMDcnICsgJ1xcdTMwMjEtXFx1MzAyOVxcdTMwMkUtXFx1MzAyRlxcdTMwMzEtXFx1MzAzNVxcdTMwMzgtXFx1MzAzQVxcdTMwM0JcXHUzMDNDJyArICdcXHUzMDQxLVxcdTMwOTZcXHUzMDlELVxcdTMwOUVcXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZFXFx1MzBGRicgKyAnXFx1MzEwNS1cXHUzMTJEXFx1MzEzMS1cXHUzMThFXFx1MzE5MC1cXHUzMTkxXFx1MzE5Mi1cXHUzMTk1XFx1MzE5Ni1cXHUzMTlGJyArICdcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzMjAwLVxcdTMyMUNcXHUzMjIwLVxcdTMyMjlcXHUzMjJBLVxcdTMyNDcnICsgJ1xcdTMyNDgtXFx1MzI0RlxcdTMyNjAtXFx1MzI3QlxcdTMyN0ZcXHUzMjgwLVxcdTMyODlcXHUzMjhBLVxcdTMyQjBcXHUzMkMwLVxcdTMyQ0InICsgJ1xcdTMyRDAtXFx1MzJGRVxcdTMzMDAtXFx1MzM3NlxcdTMzN0ItXFx1MzNERFxcdTMzRTAtXFx1MzNGRVxcdTM0MDAtXFx1NERCNScgKyAnXFx1NEUwMC1cXHU5RkNDXFx1QTAwMC1cXHVBMDE0XFx1QTAxNVxcdUEwMTYtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGN1xcdUE0RjgtXFx1QTRGRCcgKyAnXFx1QTRGRS1cXHVBNEZGXFx1QTUwMC1cXHVBNjBCXFx1QTYwQ1xcdUE2MTAtXFx1QTYxRlxcdUE2MjAtXFx1QTYyOVxcdUE2MkEtXFx1QTYyQicgKyAnXFx1QTY0MC1cXHVBNjZEXFx1QTY2RVxcdUE2ODAtXFx1QTY5QlxcdUE2OUMtXFx1QTY5RFxcdUE2QTAtXFx1QTZFNVxcdUE2RTYtXFx1QTZFRicgKyAnXFx1QTZGMi1cXHVBNkY3XFx1QTcyMi1cXHVBNzZGXFx1QTc3MFxcdUE3NzEtXFx1QTc4N1xcdUE3ODktXFx1QTc4QVxcdUE3OEItXFx1QTc4RScgKyAnXFx1QTc5MC1cXHVBN0FEXFx1QTdCMC1cXHVBN0IxXFx1QTdGN1xcdUE3RjgtXFx1QTdGOVxcdUE3RkFcXHVBN0ZCLVxcdUE4MDEnICsgJ1xcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4MjMtXFx1QTgyNFxcdUE4MjdcXHVBODMwLVxcdUE4MzUnICsgJ1xcdUE4MzYtXFx1QTgzN1xcdUE4NDAtXFx1QTg3M1xcdUE4ODAtXFx1QTg4MVxcdUE4ODItXFx1QThCM1xcdUE4QjQtXFx1QThDMycgKyAnXFx1QThDRS1cXHVBOENGXFx1QThEMC1cXHVBOEQ5XFx1QThGMi1cXHVBOEY3XFx1QThGOC1cXHVBOEZBXFx1QThGQlxcdUE5MDAtXFx1QTkwOScgKyAnXFx1QTkwQS1cXHVBOTI1XFx1QTkyRS1cXHVBOTJGXFx1QTkzMC1cXHVBOTQ2XFx1QTk1Mi1cXHVBOTUzXFx1QTk1RlxcdUE5NjAtXFx1QTk3QycgKyAnXFx1QTk4M1xcdUE5ODQtXFx1QTlCMlxcdUE5QjQtXFx1QTlCNVxcdUE5QkEtXFx1QTlCQlxcdUE5QkQtXFx1QTlDMFxcdUE5QzEtXFx1QTlDRCcgKyAnXFx1QTlDRlxcdUE5RDAtXFx1QTlEOVxcdUE5REUtXFx1QTlERlxcdUE5RTAtXFx1QTlFNFxcdUE5RTZcXHVBOUU3LVxcdUE5RUYnICsgJ1xcdUE5RjAtXFx1QTlGOVxcdUE5RkEtXFx1QTlGRVxcdUFBMDAtXFx1QUEyOFxcdUFBMkYtXFx1QUEzMFxcdUFBMzMtXFx1QUEzNCcgKyAnXFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE0RFxcdUFBNTAtXFx1QUE1OVxcdUFBNUMtXFx1QUE1RlxcdUFBNjAtXFx1QUE2RicgKyAnXFx1QUE3MFxcdUFBNzEtXFx1QUE3NlxcdUFBNzctXFx1QUE3OVxcdUFBN0FcXHVBQTdCXFx1QUE3RFxcdUFBN0UtXFx1QUFBRlxcdUFBQjEnICsgJ1xcdUFBQjUtXFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQURDXFx1QUFERFxcdUFBREUtXFx1QUFERicgKyAnXFx1QUFFMC1cXHVBQUVBXFx1QUFFQlxcdUFBRUUtXFx1QUFFRlxcdUFBRjAtXFx1QUFGMVxcdUFBRjJcXHVBQUYzLVxcdUFBRjRcXHVBQUY1JyArICdcXHVBQjAxLVxcdUFCMDZcXHVBQjA5LVxcdUFCMEVcXHVBQjExLVxcdUFCMTZcXHVBQjIwLVxcdUFCMjZcXHVBQjI4LVxcdUFCMkUnICsgJ1xcdUFCMzAtXFx1QUI1QVxcdUFCNUJcXHVBQjVDLVxcdUFCNUZcXHVBQjY0LVxcdUFCNjVcXHVBQkMwLVxcdUFCRTJcXHVBQkUzLVxcdUFCRTQnICsgJ1xcdUFCRTYtXFx1QUJFN1xcdUFCRTktXFx1QUJFQVxcdUFCRUJcXHVBQkVDXFx1QUJGMC1cXHVBQkY5XFx1QUMwMC1cXHVEN0EzJyArICdcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVFMDAwLVxcdUY4RkZcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDknICsgJ1xcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkY2RlxcdUZGNzAnICsgJ1xcdUZGNzEtXFx1RkY5RFxcdUZGOUUtXFx1RkY5RlxcdUZGQTAtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRicgKyAnXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDJyxcblxuICBSOiAnXFx1MDU5MFxcdTA1QkVcXHUwNUMwXFx1MDVDM1xcdTA1QzZcXHUwNUM4LVxcdTA1Q0ZcXHUwNUQwLVxcdTA1RUFcXHUwNUVCLVxcdTA1RUYnICsgJ1xcdTA1RjAtXFx1MDVGMlxcdTA1RjMtXFx1MDVGNFxcdTA1RjUtXFx1MDVGRlxcdTA3QzAtXFx1MDdDOVxcdTA3Q0EtXFx1MDdFQScgKyAnXFx1MDdGNC1cXHUwN0Y1XFx1MDdGQVxcdTA3RkItXFx1MDdGRlxcdTA4MDAtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOCcgKyAnXFx1MDgyRS1cXHUwODJGXFx1MDgzMC1cXHUwODNFXFx1MDgzRlxcdTA4NDAtXFx1MDg1OFxcdTA4NUMtXFx1MDg1RFxcdTA4NUUnICsgJ1xcdTA4NUYtXFx1MDg5RlxcdTIwMEZcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzN1xcdUZCMzgtXFx1RkIzQycgKyAnXFx1RkIzRFxcdUZCM0VcXHVGQjNGXFx1RkI0MC1cXHVGQjQxXFx1RkI0MlxcdUZCNDMtXFx1RkI0NFxcdUZCNDVcXHVGQjQ2LVxcdUZCNEYnLFxuXG4gIEFMOiAnXFx1MDYwOFxcdTA2MEJcXHUwNjBEXFx1MDYxQlxcdTA2MUNcXHUwNjFEXFx1MDYxRS1cXHUwNjFGXFx1MDYyMC1cXHUwNjNGXFx1MDY0MCcgKyAnXFx1MDY0MS1cXHUwNjRBXFx1MDY2RFxcdTA2NkUtXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDRcXHUwNkQ1XFx1MDZFNS1cXHUwNkU2JyArICdcXHUwNkVFLVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZELVxcdTA2RkVcXHUwNkZGXFx1MDcwMC1cXHUwNzBEXFx1MDcwRVxcdTA3MEYnICsgJ1xcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRCLVxcdTA3NENcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdCMi1cXHUwN0JGJyArICdcXHUwOEEwLVxcdTA4QjJcXHUwOEIzLVxcdTA4RTNcXHVGQjUwLVxcdUZCQjFcXHVGQkIyLVxcdUZCQzFcXHVGQkMyLVxcdUZCRDInICsgJ1xcdUZCRDMtXFx1RkQzRFxcdUZENDAtXFx1RkQ0RlxcdUZENTAtXFx1RkQ4RlxcdUZEOTAtXFx1RkQ5MVxcdUZEOTItXFx1RkRDNycgKyAnXFx1RkRDOC1cXHVGRENGXFx1RkRGMC1cXHVGREZCXFx1RkRGQ1xcdUZERkUtXFx1RkRGRlxcdUZFNzAtXFx1RkU3NFxcdUZFNzUnICsgJ1xcdUZFNzYtXFx1RkVGQ1xcdUZFRkQtXFx1RkVGRSdcblxufTtcblxudmFyIFJFR0VYX1NUUk9ORyA9IG5ldyBSZWdFeHAoJ1snICsgUkFOR0VfQllfQklESV9UWVBFLkwgKyBSQU5HRV9CWV9CSURJX1RZUEUuUiArIFJBTkdFX0JZX0JJRElfVFlQRS5BTCArICddJyk7XG5cbnZhciBSRUdFWF9SVEwgPSBuZXcgUmVnRXhwKCdbJyArIFJBTkdFX0JZX0JJRElfVFlQRS5SICsgUkFOR0VfQllfQklESV9UWVBFLkFMICsgJ10nKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBzdHJvbmcgY2hhcmFjdGVyIChoYXMgQmlkaV9DbGFzcyB2YWx1ZSBvZiBMLCBSLCBvciBBTCkuXG4gKlxuICogQHBhcmFtIHN0ciAgQSB0ZXh0IGJsb2NrOyBlLmcuIHBhcmFncmFwaCwgdGFibGUgY2VsbCwgdGFnXG4gKiBAcmV0dXJuICAgICBBIGNoYXJhY3RlciB3aXRoIHN0cm9uZyBiaWRpIGRpcmVjdGlvbiwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAqL1xuZnVuY3Rpb24gZmlyc3RTdHJvbmdDaGFyKHN0cikge1xuICB2YXIgbWF0Y2ggPSBSRUdFWF9TVFJPTkcuZXhlYyhzdHIpO1xuICByZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaFswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkaXJlY3Rpb24gb2YgYSBibG9jayBvZiB0ZXh0LCBiYXNlZCBvbiB0aGUgZGlyZWN0aW9uIG9mIGl0c1xuICogZmlyc3Qgc3Ryb25nIGNoYXJhY3RlciAoaGFzIEJpZGlfQ2xhc3MgdmFsdWUgb2YgTCwgUiwgb3IgQUwpLlxuICpcbiAqIEBwYXJhbSBzdHIgIEEgdGV4dCBibG9jazsgZS5nLiBwYXJhZ3JhcGgsIHRhYmxlIGNlbGwsIHRhZ1xuICogQHJldHVybiAgICAgVGhlIHJlc29sdmVkIGRpcmVjdGlvblxuICovXG5mdW5jdGlvbiBmaXJzdFN0cm9uZ0NoYXJEaXIoc3RyKSB7XG4gIHZhciBzdHJvbmdDaGFyID0gZmlyc3RTdHJvbmdDaGFyKHN0cik7XG4gIGlmIChzdHJvbmdDaGFyID09IG51bGwpIHtcbiAgICByZXR1cm4gVW5pY29kZUJpZGlEaXJlY3Rpb24uTkVVVFJBTDtcbiAgfVxuICByZXR1cm4gUkVHRVhfUlRMLmV4ZWMoc3Ryb25nQ2hhcikgPyBVbmljb2RlQmlkaURpcmVjdGlvbi5SVEwgOiBVbmljb2RlQmlkaURpcmVjdGlvbi5MVFI7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGlyZWN0aW9uIG9mIGEgYmxvY2sgb2YgdGV4dCwgYmFzZWQgb24gdGhlIGRpcmVjdGlvbiBvZiBpdHNcbiAqIGZpcnN0IHN0cm9uZyBjaGFyYWN0ZXIgKGhhcyBCaWRpX0NsYXNzIHZhbHVlIG9mIEwsIFIsIG9yIEFMKSwgb3IgYSBmYWxsYmFja1xuICogZGlyZWN0aW9uLCBpZiBubyBzdHJvbmcgY2hhcmFjdGVyIGlzIGZvdW5kLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiByZXNwZWN0IHRvIEhpZ2hlci1MZXZlbCBQcm90b2NvbFxuICogcnVsZSBITDEuIChodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHI5LyNITDEpXG4gKlxuICogQHBhcmFtIHN0ciAgICAgICBBIHRleHQgYmxvY2s7IGUuZy4gcGFyYWdyYXBoLCB0YWJsZSBjZWxsLCB0YWdcbiAqIEBwYXJhbSBmYWxsYmFjayAgRmFsbGJhY2sgZGlyZWN0aW9uLCB1c2VkIGlmIG5vIHN0cm9uZyBkaXJlY3Rpb24gZGV0ZWN0ZWRcbiAqICAgICAgICAgICAgICAgICAgZm9yIHRoZSBibG9jayAoZGVmYXVsdCA9IE5FVVRSQUwpXG4gKiBAcmV0dXJuICAgICAgICAgIFRoZSByZXNvbHZlZCBkaXJlY3Rpb25cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUJsb2NrRGlyKHN0ciwgZmFsbGJhY2spIHtcbiAgZmFsbGJhY2sgPSBmYWxsYmFjayB8fCBVbmljb2RlQmlkaURpcmVjdGlvbi5ORVVUUkFMO1xuICBpZiAoIXN0ci5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH1cbiAgdmFyIGJsb2NrRGlyID0gZmlyc3RTdHJvbmdDaGFyRGlyKHN0cik7XG4gIHJldHVybiBibG9ja0RpciA9PT0gVW5pY29kZUJpZGlEaXJlY3Rpb24uTkVVVFJBTCA/IGZhbGxiYWNrIDogYmxvY2tEaXI7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGlyZWN0aW9uIG9mIGEgYmxvY2sgb2YgdGV4dCwgYmFzZWQgb24gdGhlIGRpcmVjdGlvbiBvZiBpdHNcbiAqIGZpcnN0IHN0cm9uZyBjaGFyYWN0ZXIgKGhhcyBCaWRpX0NsYXNzIHZhbHVlIG9mIEwsIFIsIG9yIEFMKSwgb3IgYSBmYWxsYmFja1xuICogZGlyZWN0aW9uLCBpZiBubyBzdHJvbmcgY2hhcmFjdGVyIGlzIGZvdW5kLlxuICpcbiAqIE5PVEU6IFRoaXMgZnVuY3Rpb24gaXMgc2ltaWxhciB0byByZXNvbHZlQmxvY2tEaXIoKSwgYnV0IHVzZXMgdGhlIGdsb2JhbFxuICogZGlyZWN0aW9uIGFzIHRoZSBmYWxsYmFjaywgc28gaXQgKmFsd2F5cyogcmV0dXJucyBhIFN0cm9uZyBkaXJlY3Rpb24sXG4gKiBtYWtpbmcgaXQgdXNlZnVsIGZvciBpbnRlZ3JhdGlvbiBpbiBwbGFjZXMgdGhhdCB5b3UgbmVlZCB0byBtYWtlIHRoZSBmaW5hbFxuICogZGVjaXNpb24sIGxpa2Ugc2V0dGluZyBzb21lIENTUyBjbGFzcy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gcmVzcGVjdCB0byBIaWdoZXItTGV2ZWwgUHJvdG9jb2xcbiAqIHJ1bGUgSEwxLiAoaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyOS8jSEwxKVxuICpcbiAqIEBwYXJhbSBzdHIgICAgICAgICAgICAgQSB0ZXh0IGJsb2NrOyBlLmcuIHBhcmFncmFwaCwgdGFibGUgY2VsbFxuICogQHBhcmFtIHN0cm9uZ0ZhbGxiYWNrICBGYWxsYmFjayBkaXJlY3Rpb24sIHVzZWQgaWYgbm8gc3Ryb25nIGRpcmVjdGlvblxuICogICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3RlZCBmb3IgdGhlIGJsb2NrIChkZWZhdWx0ID0gZ2xvYmFsIGRpcmVjdGlvbilcbiAqIEByZXR1cm4gICAgICAgICAgICAgICAgVGhlIHJlc29sdmVkIFN0cm9uZyBkaXJlY3Rpb25cbiAqL1xuZnVuY3Rpb24gZ2V0RGlyZWN0aW9uKHN0ciwgc3Ryb25nRmFsbGJhY2spIHtcbiAgaWYgKCFzdHJvbmdGYWxsYmFjaykge1xuICAgIHN0cm9uZ0ZhbGxiYWNrID0gVW5pY29kZUJpZGlEaXJlY3Rpb24uZ2V0R2xvYmFsRGlyKCk7XG4gIH1cbiAgIVVuaWNvZGVCaWRpRGlyZWN0aW9uLmlzU3Ryb25nKHN0cm9uZ0ZhbGxiYWNrKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdGYWxsYmFjayBkaXJlY3Rpb24gbXVzdCBiZSBhIHN0cm9uZyBkaXJlY3Rpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByZXNvbHZlQmxvY2tEaXIoc3RyLCBzdHJvbmdGYWxsYmFjayk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGdldERpcmVjdGlvbihhcmd1bWVudHMuLi4pIHJldHVybnMgTFRSLlxuICpcbiAqIEBwYXJhbSBzdHIgICAgICAgICAgICAgQSB0ZXh0IGJsb2NrOyBlLmcuIHBhcmFncmFwaCwgdGFibGUgY2VsbFxuICogQHBhcmFtIHN0cm9uZ0ZhbGxiYWNrICBGYWxsYmFjayBkaXJlY3Rpb24sIHVzZWQgaWYgbm8gc3Ryb25nIGRpcmVjdGlvblxuICogICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3RlZCBmb3IgdGhlIGJsb2NrIChkZWZhdWx0ID0gZ2xvYmFsIGRpcmVjdGlvbilcbiAqIEByZXR1cm4gICAgICAgICAgICAgICAgVHJ1ZSBpZiB0aGUgcmVzb2x2ZWQgZGlyZWN0aW9uIGlzIExUUlxuICovXG5mdW5jdGlvbiBpc0RpcmVjdGlvbkxUUihzdHIsIHN0cm9uZ0ZhbGxiYWNrKSB7XG4gIHJldHVybiBnZXREaXJlY3Rpb24oc3RyLCBzdHJvbmdGYWxsYmFjaykgPT09IFVuaWNvZGVCaWRpRGlyZWN0aW9uLkxUUjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgZ2V0RGlyZWN0aW9uKGFyZ3VtZW50cy4uLikgcmV0dXJucyBSVEwuXG4gKlxuICogQHBhcmFtIHN0ciAgICAgICAgICAgICBBIHRleHQgYmxvY2s7IGUuZy4gcGFyYWdyYXBoLCB0YWJsZSBjZWxsXG4gKiBAcGFyYW0gc3Ryb25nRmFsbGJhY2sgIEZhbGxiYWNrIGRpcmVjdGlvbiwgdXNlZCBpZiBubyBzdHJvbmcgZGlyZWN0aW9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIGRldGVjdGVkIGZvciB0aGUgYmxvY2sgKGRlZmF1bHQgPSBnbG9iYWwgZGlyZWN0aW9uKVxuICogQHJldHVybiAgICAgICAgICAgICAgICBUcnVlIGlmIHRoZSByZXNvbHZlZCBkaXJlY3Rpb24gaXMgUlRMXG4gKi9cbmZ1bmN0aW9uIGlzRGlyZWN0aW9uUlRMKHN0ciwgc3Ryb25nRmFsbGJhY2spIHtcbiAgcmV0dXJuIGdldERpcmVjdGlvbihzdHIsIHN0cm9uZ0ZhbGxiYWNrKSA9PT0gVW5pY29kZUJpZGlEaXJlY3Rpb24uUlRMO1xufVxuXG52YXIgVW5pY29kZUJpZGkgPSB7XG4gIGZpcnN0U3Ryb25nQ2hhcjogZmlyc3RTdHJvbmdDaGFyLFxuICBmaXJzdFN0cm9uZ0NoYXJEaXI6IGZpcnN0U3Ryb25nQ2hhckRpcixcbiAgcmVzb2x2ZUJsb2NrRGlyOiByZXNvbHZlQmxvY2tEaXIsXG4gIGdldERpcmVjdGlvbjogZ2V0RGlyZWN0aW9uLFxuICBpc0RpcmVjdGlvbkxUUjogaXNEaXJlY3Rpb25MVFIsXG4gIGlzRGlyZWN0aW9uUlRMOiBpc0RpcmVjdGlvblJUTFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBVbmljb2RlQmlkaTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0RW50aXR5SW5zdGFuY2VcbiAqIEBsZWdhY3lTZXJ2ZXJDYWxsYWJsZUluc3RhbmNlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG52YXIgUmVjb3JkID0gSW1tdXRhYmxlLlJlY29yZDtcblxuXG52YXIgRHJhZnRFbnRpdHlJbnN0YW5jZVJlY29yZCA9IFJlY29yZCh7XG4gIHR5cGU6ICdUT0tFTicsXG4gIG11dGFiaWxpdHk6ICdJTU1VVEFCTEUnLFxuICBkYXRhOiBPYmplY3Rcbn0pO1xuXG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIGEgZG9jdW1lbnQgZW50aXR5LCBjb25zaXN0aW5nIG9mIGEgYHR5cGVgIGFuZCByZWxldmFudFxuICogYGRhdGFgLCBtZXRhZGF0YSBhYm91dCB0aGUgZW50aXR5LlxuICpcbiAqIEZvciBpbnN0YW5jZSwgYSBcImxpbmtcIiBlbnRpdHkgbWlnaHQgcHJvdmlkZSBhIFVSSSwgYW5kIGEgXCJtZW50aW9uXCJcbiAqIGVudGl0eSBtaWdodCBwcm92aWRlIHRoZSBtZW50aW9uZWQgdXNlcidzIElELiBUaGVzZSBwaWVjZXMgb2YgZGF0YVxuICogbWF5IGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgdGhlIGVudGl0eSBhcyBwYXJ0IG9mIGEgQ29udGVudEJsb2NrIERPTVxuICogcmVwcmVzZW50YXRpb24uIEZvciBhIGxpbmssIHRoZSBkYXRhIHdvdWxkIGJlIHVzZWQgYXMgYW4gaHJlZiBmb3JcbiAqIHRoZSByZW5kZXJlZCBhbmNob3IuIEZvciBhIG1lbnRpb24sIHRoZSBJRCBjb3VsZCBiZSB1c2VkIHRvIHJldHJpZXZlXG4gKiBhIGhvdmVyY2FyZC5cbiAqL1xuXG52YXIgRHJhZnRFbnRpdHlJbnN0YW5jZSA9IGZ1bmN0aW9uIChfRHJhZnRFbnRpdHlJbnN0YW5jZVIpIHtcbiAgX2luaGVyaXRzKERyYWZ0RW50aXR5SW5zdGFuY2UsIF9EcmFmdEVudGl0eUluc3RhbmNlUik7XG5cbiAgZnVuY3Rpb24gRHJhZnRFbnRpdHlJbnN0YW5jZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJhZnRFbnRpdHlJbnN0YW5jZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0RyYWZ0RW50aXR5SW5zdGFuY2VSLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgRHJhZnRFbnRpdHlJbnN0YW5jZS5wcm90b3R5cGUuZ2V0VHlwZSA9IGZ1bmN0aW9uIGdldFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCd0eXBlJyk7XG4gIH07XG5cbiAgRHJhZnRFbnRpdHlJbnN0YW5jZS5wcm90b3R5cGUuZ2V0TXV0YWJpbGl0eSA9IGZ1bmN0aW9uIGdldE11dGFiaWxpdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdtdXRhYmlsaXR5Jyk7XG4gIH07XG5cbiAgRHJhZnRFbnRpdHlJbnN0YW5jZS5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uIGdldERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdkYXRhJyk7XG4gIH07XG5cbiAgcmV0dXJuIERyYWZ0RW50aXR5SW5zdGFuY2U7XG59KERyYWZ0RW50aXR5SW5zdGFuY2VSZWNvcmQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RW50aXR5SW5zdGFuY2U7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBCbG9ja1RyZWVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBmaW5kUmFuZ2VzSW1tdXRhYmxlID0gcmVxdWlyZSgnLi9maW5kUmFuZ2VzSW1tdXRhYmxlJyk7XG5cbnZhciBMaXN0ID0gSW1tdXRhYmxlLkxpc3QsXG4gICAgUmVwZWF0ID0gSW1tdXRhYmxlLlJlcGVhdCxcbiAgICBSZWNvcmQgPSBJbW11dGFibGUuUmVjb3JkO1xuXG5cbnZhciByZXR1cm5UcnVlID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG5cbnZhciBGSU5HRVJQUklOVF9ERUxJTUlURVIgPSAnLSc7XG5cbnZhciBkZWZhdWx0TGVhZlJhbmdlID0ge1xuICBzdGFydDogbnVsbCxcbiAgZW5kOiBudWxsXG59O1xuXG52YXIgTGVhZlJhbmdlID0gUmVjb3JkKGRlZmF1bHRMZWFmUmFuZ2UpO1xuXG52YXIgZGVmYXVsdERlY29yYXRvclJhbmdlID0ge1xuICBzdGFydDogbnVsbCxcbiAgZW5kOiBudWxsLFxuICBkZWNvcmF0b3JLZXk6IG51bGwsXG4gIGxlYXZlczogbnVsbFxufTtcblxudmFyIERlY29yYXRvclJhbmdlID0gUmVjb3JkKGRlZmF1bHREZWNvcmF0b3JSYW5nZSk7XG5cbnZhciBCbG9ja1RyZWUgPSB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIGJsb2NrIHRyZWUgZm9yIGEgZ2l2ZW4gQ29udGVudEJsb2NrL2RlY29yYXRvciBwYWlyLlxuICAgKi9cbiAgZ2VuZXJhdGU6IGZ1bmN0aW9uIGdlbmVyYXRlKGNvbnRlbnRTdGF0ZSwgYmxvY2ssIGRlY29yYXRvcikge1xuICAgIHZhciB0ZXh0TGVuZ3RoID0gYmxvY2suZ2V0TGVuZ3RoKCk7XG4gICAgaWYgKCF0ZXh0TGVuZ3RoKSB7XG4gICAgICByZXR1cm4gTGlzdC5vZihuZXcgRGVjb3JhdG9yUmFuZ2Uoe1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgZW5kOiAwLFxuICAgICAgICBkZWNvcmF0b3JLZXk6IG51bGwsXG4gICAgICAgIGxlYXZlczogTGlzdC5vZihuZXcgTGVhZlJhbmdlKHsgc3RhcnQ6IDAsIGVuZDogMCB9KSlcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICB2YXIgbGVhZlNldHMgPSBbXTtcbiAgICB2YXIgZGVjb3JhdGlvbnMgPSBkZWNvcmF0b3IgPyBkZWNvcmF0b3IuZ2V0RGVjb3JhdGlvbnMoYmxvY2ssIGNvbnRlbnRTdGF0ZSkgOiBMaXN0KFJlcGVhdChudWxsLCB0ZXh0TGVuZ3RoKSk7XG5cbiAgICB2YXIgY2hhcnMgPSBibG9jay5nZXRDaGFyYWN0ZXJMaXN0KCk7XG5cbiAgICBmaW5kUmFuZ2VzSW1tdXRhYmxlKGRlY29yYXRpb25zLCBhcmVFcXVhbCwgcmV0dXJuVHJ1ZSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgIGxlYWZTZXRzLnB1c2gobmV3IERlY29yYXRvclJhbmdlKHtcbiAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICBlbmQ6IGVuZCxcbiAgICAgICAgZGVjb3JhdG9yS2V5OiBkZWNvcmF0aW9ucy5nZXQoc3RhcnQpLFxuICAgICAgICBsZWF2ZXM6IGdlbmVyYXRlTGVhdmVzKGNoYXJzLnNsaWNlKHN0YXJ0LCBlbmQpLnRvTGlzdCgpLCBzdGFydClcbiAgICAgIH0pKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBMaXN0KGxlYWZTZXRzKTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiB0cmVlIG1hcC4gVGhpcyBhbGxvd3MgdXNcbiAgICogdG8gcmFwaWRseSBkZXRlcm1pbmUgd2hldGhlciBhIHRyZWUgaGFzIHVuZGVyZ29uZSBhIHNpZ25pZmljYW50XG4gICAqIHN0cnVjdHVyYWwgY2hhbmdlLlxuICAgKi9cbiAgZ2V0RmluZ2VycHJpbnQ6IGZ1bmN0aW9uIGdldEZpbmdlcnByaW50KHRyZWUpIHtcbiAgICByZXR1cm4gdHJlZS5tYXAoZnVuY3Rpb24gKGxlYWZTZXQpIHtcbiAgICAgIHZhciBkZWNvcmF0b3JLZXkgPSBsZWFmU2V0LmdldCgnZGVjb3JhdG9yS2V5Jyk7XG4gICAgICB2YXIgZmluZ2VycHJpbnRTdHJpbmcgPSBkZWNvcmF0b3JLZXkgIT09IG51bGwgPyBkZWNvcmF0b3JLZXkgKyAnLicgKyAobGVhZlNldC5nZXQoJ2VuZCcpIC0gbGVhZlNldC5nZXQoJ3N0YXJ0JykpIDogJyc7XG4gICAgICByZXR1cm4gJycgKyBmaW5nZXJwcmludFN0cmluZyArICcuJyArIGxlYWZTZXQuZ2V0KCdsZWF2ZXMnKS5zaXplO1xuICAgIH0pLmpvaW4oRklOR0VSUFJJTlRfREVMSU1JVEVSKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBMZWFmUmFuZ2UgcmVjb3JkcyBmb3IgYSBnaXZlbiBjaGFyYWN0ZXIgbGlzdC5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVMZWF2ZXMoY2hhcmFjdGVycywgb2Zmc2V0KSB7XG4gIHZhciBsZWF2ZXMgPSBbXTtcbiAgdmFyIGlubGluZVN0eWxlcyA9IGNoYXJhY3RlcnMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuZ2V0U3R5bGUoKTtcbiAgfSkudG9MaXN0KCk7XG4gIGZpbmRSYW5nZXNJbW11dGFibGUoaW5saW5lU3R5bGVzLCBhcmVFcXVhbCwgcmV0dXJuVHJ1ZSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICBsZWF2ZXMucHVzaChuZXcgTGVhZlJhbmdlKHtcbiAgICAgIHN0YXJ0OiBzdGFydCArIG9mZnNldCxcbiAgICAgIGVuZDogZW5kICsgb2Zmc2V0XG4gICAgfSkpO1xuICB9KTtcbiAgcmV0dXJuIExpc3QobGVhdmVzKTtcbn1cblxuZnVuY3Rpb24gYXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCbG9ja1RyZWU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldE5leHREZWxpbWl0ZXJCbG9ja0tleVxuICogQGZvcm1hdFxuICogXG4gKlxuICogVGhpcyBpcyB1bnN0YWJsZSBhbmQgbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBieVxuICogcHJvZHVjdGlvbiBzeXN0ZW1zLiBUaGlzIGZpbGUgbWF5IGJlIHVwZGF0ZS9yZW1vdmVkIHdpdGhvdXQgbm90aWNlLlxuICovXG5cbnZhciBDb250ZW50QmxvY2tOb2RlID0gcmVxdWlyZSgnLi9Db250ZW50QmxvY2tOb2RlJyk7XG5cbnZhciBnZXROZXh0RGVsaW1pdGVyQmxvY2tLZXkgPSBmdW5jdGlvbiBnZXROZXh0RGVsaW1pdGVyQmxvY2tLZXkoYmxvY2ssIGJsb2NrTWFwKSB7XG4gIHZhciBpc0V4cGVyaW1lbnRhbFRyZWVCbG9jayA9IGJsb2NrIGluc3RhbmNlb2YgQ29udGVudEJsb2NrTm9kZTtcblxuICBpZiAoIWlzRXhwZXJpbWVudGFsVHJlZUJsb2NrKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbmV4dFNpYmxpbmdLZXkgPSBibG9jay5nZXROZXh0U2libGluZ0tleSgpO1xuXG4gIGlmIChuZXh0U2libGluZ0tleSkge1xuICAgIHJldHVybiBuZXh0U2libGluZ0tleTtcbiAgfVxuXG4gIHZhciBwYXJlbnQgPSBibG9jay5nZXRQYXJlbnRLZXkoKTtcblxuICBpZiAoIXBhcmVudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIG5leHROb25EZXNjZW5kYW50QmxvY2sgPSBibG9ja01hcC5nZXQocGFyZW50KTtcbiAgd2hpbGUgKG5leHROb25EZXNjZW5kYW50QmxvY2sgJiYgIW5leHROb25EZXNjZW5kYW50QmxvY2suZ2V0TmV4dFNpYmxpbmdLZXkoKSkge1xuICAgIHZhciBwYXJlbnRLZXkgPSBuZXh0Tm9uRGVzY2VuZGFudEJsb2NrLmdldFBhcmVudEtleSgpO1xuICAgIG5leHROb25EZXNjZW5kYW50QmxvY2sgPSBwYXJlbnRLZXkgPyBibG9ja01hcC5nZXQocGFyZW50S2V5KSA6IG51bGw7XG4gIH1cblxuICBpZiAoIW5leHROb25EZXNjZW5kYW50QmxvY2spIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBuZXh0Tm9uRGVzY2VuZGFudEJsb2NrLmdldE5leHRTaWJsaW5nS2V5KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5leHREZWxpbWl0ZXJCbG9ja0tleTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGluc2VydEludG9MaXN0XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTWFpbnRhaW4gcGVyc2lzdGVuY2UgZm9yIHRhcmdldCBsaXN0IHdoZW4gYXBwZW5kaW5nIGFuZCBwcmVwZW5kaW5nLlxuICovXG5mdW5jdGlvbiBpbnNlcnRJbnRvTGlzdCh0YXJnZXRMaXN0LCB0b0luc2VydCwgb2Zmc2V0KSB7XG4gIGlmIChvZmZzZXQgPT09IHRhcmdldExpc3QuY291bnQoKSkge1xuICAgIHRvSW5zZXJ0LmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHRhcmdldExpc3QgPSB0YXJnZXRMaXN0LnB1c2goYyk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgdG9JbnNlcnQucmV2ZXJzZSgpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHRhcmdldExpc3QgPSB0YXJnZXRMaXN0LnVuc2hpZnQoYyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGhlYWQgPSB0YXJnZXRMaXN0LnNsaWNlKDAsIG9mZnNldCk7XG4gICAgdmFyIHRhaWwgPSB0YXJnZXRMaXN0LnNsaWNlKG9mZnNldCk7XG4gICAgdGFyZ2V0TGlzdCA9IGhlYWQuY29uY2F0KHRvSW5zZXJ0LCB0YWlsKS50b0xpc3QoKTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0TGlzdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRJbnRvTGlzdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHJlbW92ZUVudGl0aWVzQXRFZGdlc1xuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2hhcmFjdGVyTWV0YWRhdGEgPSByZXF1aXJlKCcuL0NoYXJhY3Rlck1ldGFkYXRhJyk7XG5cbnZhciBmaW5kUmFuZ2VzSW1tdXRhYmxlID0gcmVxdWlyZSgnLi9maW5kUmFuZ2VzSW1tdXRhYmxlJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbmZ1bmN0aW9uIHJlbW92ZUVudGl0aWVzQXRFZGdlcyhjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlKSB7XG4gIHZhciBibG9ja01hcCA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja01hcCgpO1xuICB2YXIgZW50aXR5TWFwID0gY29udGVudFN0YXRlLmdldEVudGl0eU1hcCgpO1xuXG4gIHZhciB1cGRhdGVkQmxvY2tzID0ge307XG5cbiAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIHN0YXJ0QmxvY2sgPSBibG9ja01hcC5nZXQoc3RhcnRLZXkpO1xuICB2YXIgdXBkYXRlZFN0YXJ0ID0gcmVtb3ZlRm9yQmxvY2soZW50aXR5TWFwLCBzdGFydEJsb2NrLCBzdGFydE9mZnNldCk7XG5cbiAgaWYgKHVwZGF0ZWRTdGFydCAhPT0gc3RhcnRCbG9jaykge1xuICAgIHVwZGF0ZWRCbG9ja3Nbc3RhcnRLZXldID0gdXBkYXRlZFN0YXJ0O1xuICB9XG5cbiAgdmFyIGVuZEtleSA9IHNlbGVjdGlvblN0YXRlLmdldEVuZEtleSgpO1xuICB2YXIgZW5kT2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kT2Zmc2V0KCk7XG4gIHZhciBlbmRCbG9jayA9IGJsb2NrTWFwLmdldChlbmRLZXkpO1xuICBpZiAoc3RhcnRLZXkgPT09IGVuZEtleSkge1xuICAgIGVuZEJsb2NrID0gdXBkYXRlZFN0YXJ0O1xuICB9XG5cbiAgdmFyIHVwZGF0ZWRFbmQgPSByZW1vdmVGb3JCbG9jayhlbnRpdHlNYXAsIGVuZEJsb2NrLCBlbmRPZmZzZXQpO1xuXG4gIGlmICh1cGRhdGVkRW5kICE9PSBlbmRCbG9jaykge1xuICAgIHVwZGF0ZWRCbG9ja3NbZW5kS2V5XSA9IHVwZGF0ZWRFbmQ7XG4gIH1cblxuICBpZiAoIU9iamVjdC5rZXlzKHVwZGF0ZWRCbG9ja3MpLmxlbmd0aCkge1xuICAgIHJldHVybiBjb250ZW50U3RhdGUuc2V0KCdzZWxlY3Rpb25BZnRlcicsIHNlbGVjdGlvblN0YXRlKTtcbiAgfVxuXG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiBibG9ja01hcC5tZXJnZSh1cGRhdGVkQmxvY2tzKSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFJlbW92YWxSYW5nZShjaGFyYWN0ZXJzLCBrZXksIG9mZnNldCkge1xuICB2YXIgcmVtb3ZhbFJhbmdlO1xuICBmaW5kUmFuZ2VzSW1tdXRhYmxlKGNoYXJhY3RlcnMsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEuZ2V0RW50aXR5KCkgPT09IGIuZ2V0RW50aXR5KCk7XG4gIH0sIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0RW50aXR5KCkgPT09IGtleTtcbiAgfSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoc3RhcnQgPD0gb2Zmc2V0ICYmIGVuZCA+PSBvZmZzZXQpIHtcbiAgICAgIHJlbW92YWxSYW5nZSA9IHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgIH1cbiAgfSk7XG4gICEodHlwZW9mIHJlbW92YWxSYW5nZSA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlbW92YWwgcmFuZ2UgbXVzdCBleGlzdCB3aXRoaW4gY2hhcmFjdGVyIGxpc3QuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcmVtb3ZhbFJhbmdlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGb3JCbG9jayhlbnRpdHlNYXAsIGJsb2NrLCBvZmZzZXQpIHtcbiAgdmFyIGNoYXJzID0gYmxvY2suZ2V0Q2hhcmFjdGVyTGlzdCgpO1xuICB2YXIgY2hhckJlZm9yZSA9IG9mZnNldCA+IDAgPyBjaGFycy5nZXQob2Zmc2V0IC0gMSkgOiB1bmRlZmluZWQ7XG4gIHZhciBjaGFyQWZ0ZXIgPSBvZmZzZXQgPCBjaGFycy5jb3VudCgpID8gY2hhcnMuZ2V0KG9mZnNldCkgOiB1bmRlZmluZWQ7XG4gIHZhciBlbnRpdHlCZWZvcmVDdXJzb3IgPSBjaGFyQmVmb3JlID8gY2hhckJlZm9yZS5nZXRFbnRpdHkoKSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVudGl0eUFmdGVyQ3Vyc29yID0gY2hhckFmdGVyID8gY2hhckFmdGVyLmdldEVudGl0eSgpIDogdW5kZWZpbmVkO1xuXG4gIGlmIChlbnRpdHlBZnRlckN1cnNvciAmJiBlbnRpdHlBZnRlckN1cnNvciA9PT0gZW50aXR5QmVmb3JlQ3Vyc29yKSB7XG4gICAgdmFyIGVudGl0eSA9IGVudGl0eU1hcC5fX2dldChlbnRpdHlBZnRlckN1cnNvcik7XG4gICAgaWYgKGVudGl0eS5nZXRNdXRhYmlsaXR5KCkgIT09ICdNVVRBQkxFJykge1xuICAgICAgdmFyIF9nZXRSZW1vdmFsUmFuZ2UgPSBnZXRSZW1vdmFsUmFuZ2UoY2hhcnMsIGVudGl0eUFmdGVyQ3Vyc29yLCBvZmZzZXQpLFxuICAgICAgICAgIHN0YXJ0ID0gX2dldFJlbW92YWxSYW5nZS5zdGFydCxcbiAgICAgICAgICBlbmQgPSBfZ2V0UmVtb3ZhbFJhbmdlLmVuZDtcblxuICAgICAgdmFyIGN1cnJlbnQ7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgY3VycmVudCA9IGNoYXJzLmdldChzdGFydCk7XG4gICAgICAgIGNoYXJzID0gY2hhcnMuc2V0KHN0YXJ0LCBDaGFyYWN0ZXJNZXRhZGF0YS5hcHBseUVudGl0eShjdXJyZW50LCBudWxsKSk7XG4gICAgICAgIHN0YXJ0Kys7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmxvY2suc2V0KCdjaGFyYWN0ZXJMaXN0JywgY2hhcnMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBibG9jaztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZW1vdmVFbnRpdGllc0F0RWRnZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSByYW5kb21pemVCbG9ja01hcEtleXNcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENvbnRlbnRCbG9ja05vZGUgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9ja05vZGUnKTtcbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIGdlbmVyYXRlUmFuZG9tS2V5ID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVJhbmRvbUtleScpO1xuXG52YXIgT3JkZXJlZE1hcCA9IEltbXV0YWJsZS5PcmRlcmVkTWFwO1xuXG5cbnZhciByYW5kb21pemVDb250ZW50QmxvY2tOb2RlS2V5cyA9IGZ1bmN0aW9uIHJhbmRvbWl6ZUNvbnRlbnRCbG9ja05vZGVLZXlzKGJsb2NrTWFwKSB7XG4gIHZhciBuZXdLZXlzUmVmID0ge307XG5cbiAgLy8gd2Uga2VlcCB0cmFjayBvZiByb290IGJsb2NrcyBpbiBvcmRlciB0byB1cGRhdGUgc3Vic2VxdWVudCBzaWJsaW5nIGxpbmtzXG4gIHZhciBsYXN0Um9vdEJsb2NrID0gdm9pZCAwO1xuXG4gIHJldHVybiBPcmRlcmVkTWFwKGJsb2NrTWFwLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKGJsb2NrTWFwU3RhdGUpIHtcbiAgICBibG9ja01hcFN0YXRlLmZvckVhY2goZnVuY3Rpb24gKGJsb2NrLCBpbmRleCkge1xuICAgICAgdmFyIG9sZEtleSA9IGJsb2NrLmdldEtleSgpO1xuICAgICAgdmFyIG5leHRLZXkgPSBibG9jay5nZXROZXh0U2libGluZ0tleSgpO1xuICAgICAgdmFyIHByZXZLZXkgPSBibG9jay5nZXRQcmV2U2libGluZ0tleSgpO1xuICAgICAgdmFyIGNoaWxkcmVuS2V5cyA9IGJsb2NrLmdldENoaWxkS2V5cygpO1xuICAgICAgdmFyIHBhcmVudEtleSA9IGJsb2NrLmdldFBhcmVudEtleSgpO1xuXG4gICAgICAvLyBuZXcga2V5IHRoYXQgd2Ugd2lsbCB1c2UgdG8gYnVpbGQgbGlua2luZ1xuICAgICAgdmFyIGtleSA9IGdlbmVyYXRlUmFuZG9tS2V5KCk7XG5cbiAgICAgIC8vIHdlIHdpbGwgYWRkIGl0IGhlcmUgdG8gcmUtdXNlIGl0IGxhdGVyXG4gICAgICBuZXdLZXlzUmVmW29sZEtleV0gPSBrZXk7XG5cbiAgICAgIGlmIChuZXh0S2V5KSB7XG4gICAgICAgIHZhciBuZXh0QmxvY2sgPSBibG9ja01hcFN0YXRlLmdldChuZXh0S2V5KTtcbiAgICAgICAgaWYgKG5leHRCbG9jaykge1xuICAgICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW25leHRLZXksICdwcmV2U2libGluZyddLCBrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHRoaXMgY2FuIGhhcHBlbiB3aGVuIGdlbmVyYXRpbmcgcmFuZG9tIGtleXMgZm9yIGZyYWdtZW50c1xuICAgICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW29sZEtleSwgJ25leHRTaWJsaW5nJ10sIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmV2S2V5KSB7XG4gICAgICAgIHZhciBwcmV2QmxvY2sgPSBibG9ja01hcFN0YXRlLmdldChwcmV2S2V5KTtcbiAgICAgICAgaWYgKHByZXZCbG9jaykge1xuICAgICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW3ByZXZLZXksICduZXh0U2libGluZyddLCBrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHRoaXMgY2FuIGhhcHBlbiB3aGVuIGdlbmVyYXRpbmcgcmFuZG9tIGtleXMgZm9yIGZyYWdtZW50c1xuICAgICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW29sZEtleSwgJ3ByZXZTaWJsaW5nJ10sIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnRLZXkgJiYgYmxvY2tNYXBTdGF0ZS5nZXQocGFyZW50S2V5KSkge1xuICAgICAgICB2YXIgcGFyZW50QmxvY2sgPSBibG9ja01hcFN0YXRlLmdldChwYXJlbnRLZXkpO1xuICAgICAgICB2YXIgcGFyZW50Q2hpbGRyZW5MaXN0ID0gcGFyZW50QmxvY2suZ2V0Q2hpbGRLZXlzKCk7XG4gICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW3BhcmVudEtleSwgJ2NoaWxkcmVuJ10sIHBhcmVudENoaWxkcmVuTGlzdC5zZXQocGFyZW50Q2hpbGRyZW5MaXN0LmluZGV4T2YoYmxvY2suZ2V0S2V5KCkpLCBrZXkpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGJsb2NrcyB3aWxsIHRoZW4gYmUgdHJlYXRlZCBhcyByb290IGJsb2NrIG5vZGVzXG4gICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW29sZEtleSwgJ3BhcmVudCddLCBudWxsKTtcblxuICAgICAgICBpZiAobGFzdFJvb3RCbG9jaykge1xuICAgICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW2xhc3RSb290QmxvY2suZ2V0S2V5KCksICduZXh0U2libGluZyddLCBrZXkpO1xuICAgICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW29sZEtleSwgJ3ByZXZTaWJsaW5nJ10sIG5ld0tleXNSZWZbbGFzdFJvb3RCbG9jay5nZXRLZXkoKV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdFJvb3RCbG9jayA9IGJsb2NrTWFwU3RhdGUuZ2V0KG9sZEtleSk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkcmVuS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZEtleSkge1xuICAgICAgICB2YXIgY2hpbGRCbG9jayA9IGJsb2NrTWFwU3RhdGUuZ2V0KGNoaWxkS2V5KTtcbiAgICAgICAgaWYgKGNoaWxkQmxvY2spIHtcbiAgICAgICAgICBibG9ja01hcFN0YXRlLnNldEluKFtjaGlsZEtleSwgJ3BhcmVudCddLCBrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW29sZEtleSwgJ2NoaWxkcmVuJ10sIGJsb2NrLmdldENoaWxkS2V5cygpLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZCAhPT0gY2hpbGRLZXk7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSkudG9BcnJheSgpLm1hcChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICByZXR1cm4gW25ld0tleXNSZWZbYmxvY2suZ2V0S2V5KCldLCBibG9jay5zZXQoJ2tleScsIG5ld0tleXNSZWZbYmxvY2suZ2V0S2V5KCldKV07XG4gIH0pKTtcbn07XG5cbnZhciByYW5kb21pemVDb250ZW50QmxvY2tLZXlzID0gZnVuY3Rpb24gcmFuZG9taXplQ29udGVudEJsb2NrS2V5cyhibG9ja01hcCkge1xuICByZXR1cm4gT3JkZXJlZE1hcChibG9ja01hcC50b0FycmF5KCkubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgIHZhciBrZXkgPSBnZW5lcmF0ZVJhbmRvbUtleSgpO1xuICAgIHJldHVybiBba2V5LCBibG9jay5zZXQoJ2tleScsIGtleSldO1xuICB9KSk7XG59O1xuXG52YXIgcmFuZG9taXplQmxvY2tNYXBLZXlzID0gZnVuY3Rpb24gcmFuZG9taXplQmxvY2tNYXBLZXlzKGJsb2NrTWFwKSB7XG4gIHZhciBpc1RyZWVCYXNlZEJsb2NrTWFwID0gYmxvY2tNYXAuZmlyc3QoKSBpbnN0YW5jZW9mIENvbnRlbnRCbG9ja05vZGU7XG5cbiAgaWYgKCFpc1RyZWVCYXNlZEJsb2NrTWFwKSB7XG4gICAgcmV0dXJuIHJhbmRvbWl6ZUNvbnRlbnRCbG9ja0tleXMoYmxvY2tNYXApO1xuICB9XG5cbiAgcmV0dXJuIHJhbmRvbWl6ZUNvbnRlbnRCbG9ja05vZGVLZXlzKGJsb2NrTWFwKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmFuZG9taXplQmxvY2tNYXBLZXlzOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmNsYXNzIFNpbmdsZUpvYiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBqb2JDb21wYW55SWQ6IHRoaXMucHJvcHMuam9iQ29tcGFueVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgY29uc3QgZXhpc3RpbmdDb21wYW55RW5kUG9pbnQgPSBgL2NvbXBhbnkvYXBpLyR7dGhpcy5wcm9wcy5qb2JDb21wYW55fS9gO1xuICAgICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9ICdCZWFyZXIgJytsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKVxuXG4gICAgICBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7XG5cbiAgICAgIGF4aW9zKHtcbiAgICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICAgIHVybDogZXhpc3RpbmdDb21wYW55RW5kUG9pbnQsIFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnSldUICcrbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyksXG4gICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgIH0sIFxuICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nXG4gICAgICB9KVxuICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IHsgXG4gXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY29tcGFueTogcmVzcG9uc2UuZGF0YVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJ0aGlzIGlzIGFuIGVycm9yIHlvXCIsIGVycm9yKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaW5nbGUtam9iLXdyYXBwZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2luZ2xlLWpvYlwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnJvbnQtbGlzdC10aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICA8aDI+e3RoaXMucHJvcHMuam9iVGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuY29tcGFueSAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3RoaXMuc3RhdGUuY29tcGFueS5uYW1lfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmcm9udC1saXN0LW1pZGRsZVwiPlxuICAgICAgICAgICAgICAgICAgICA8cD57dGhpcy5wcm9wcy5qb2JTbHVnfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmcm9udC1saXN0LWRldGFpbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnJvbnQtbGlzdC1kZXNjcmlwdGlvbi1ncm91cFwiPjxpIGNsYXNzTmFtZT1cImZhciBmYS1jbG9jayBmcm9udC1saXN0LWljb25cIj48L2k+PHA+e3RoaXMucHJvcHMuam9iSG91cnN9PC9wPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmcm9udC1saXN0LWRlc2NyaXB0aW9uLWdyb3VwXCI+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLWZsYXNrIGZyb250LWxpc3QtaWNvblwiPjwvaT48cD57dGhpcy5wcm9wcy5qb2JBcmVhfTwvcD48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnJvbnQtbGlzdC1kZXNjcmlwdGlvbi1ncm91cFwiPjxpIGNsYXNzTmFtZT1cImZhcyBmYS1tYXAtbWFya2VyLWFsdCBmcm9udC1saXN0LWljb25cIj48L2k+PHA+e3RoaXMucHJvcHMuam9iTG9jYXRpb259PC9wPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmcm9udC1saXN0LWRlc2NyaXB0aW9uLWdyb3VwXCI+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLWRvbGxhci1zaWduIGZyb250LWxpc3QtaWNvblwiPjwvaT48cD57dGhpcy5wcm9wcy5qb2JTYWxhcnl9PC9wPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZyb250LWxpc3RpbmctY29tcGFueS1sb2dvXCI+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmNvbXBhbnkgJiYgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3RoaXMuc3RhdGUuY29tcGFueS5zbWFsbF9sb2dvfSBhbHQ9XCJjb21wYW55IGxvZ29cIi8+XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpbmdsZS1qb2ItZGF0ZS1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8cD5Qb3N0ZWQ6IHt0aGlzLnByb3BzLmpvYkRhdGV9PC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaW5nbGVKb2I7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIGJ0b2EgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmJ0b2EgJiYgd2luZG93LmJ0b2EuYmluZCh3aW5kb3cpKSB8fCByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnRvYScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBsb2FkRXZlbnQgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbiAgICB2YXIgeERvbWFpbiA9IGZhbHNlO1xuXG4gICAgLy8gRm9yIElFIDgvOSBDT1JTIHN1cHBvcnRcbiAgICAvLyBPbmx5IHN1cHBvcnRzIFBPU1QgYW5kIEdFVCBjYWxscyBhbmQgZG9lc24ndCByZXR1cm5zIHRoZSByZXNwb25zZSBoZWFkZXJzLlxuICAgIC8vIERPTidUIGRvIHRoaXMgZm9yIHRlc3RpbmcgYi9jIFhNTEh0dHBSZXF1ZXN0IGlzIG1vY2tlZCwgbm90IFhEb21haW5SZXF1ZXN0LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHdpbmRvdy5YRG9tYWluUmVxdWVzdCAmJiAhKCd3aXRoQ3JlZGVudGlhbHMnIGluIHJlcXVlc3QpICYmXG4gICAgICAgICFpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpIHtcbiAgICAgIHJlcXVlc3QgPSBuZXcgd2luZG93LlhEb21haW5SZXF1ZXN0KCk7XG4gICAgICBsb2FkRXZlbnQgPSAnb25sb2FkJztcbiAgICAgIHhEb21haW4gPSB0cnVlO1xuICAgICAgcmVxdWVzdC5vbnByb2dyZXNzID0gZnVuY3Rpb24gaGFuZGxlUHJvZ3Jlc3MoKSB7fTtcbiAgICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHt9O1xuICAgIH1cblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3RbbG9hZEV2ZW50XSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCAmJiAheERvbWFpbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgLy8gSUUgc2VuZHMgMTIyMyBpbnN0ZWFkIG9mIDIwNCAoaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy8yMDEpXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgY2FuVXNlRE9NID0gZXhwb3J0cy5jYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG52YXIgYWRkRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPyBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBleHBvcnRzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID8gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbnZhciBnZXRDb25maXJtYXRpb24gPSBleHBvcnRzLmdldENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG52YXIgc3VwcG9ydHNIaXN0b3J5ID0gZXhwb3J0cy5zdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xudmFyIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBleHBvcnRzLnN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG52YXIgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBleHBvcnRzLnN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG52YXIgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGV4cG9ydHMuaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLmhvaXN0Tm9uUmVhY3RTdGF0aWNzID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgXG4gICAgdmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgICAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgICAgICBtaXhpbnM6IHRydWUsXG4gICAgICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICAgICAgdHlwZTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgIGxlbmd0aDogdHJ1ZSxcbiAgICAgICAgcHJvdG90eXBlOiB0cnVlLFxuICAgICAgICBjYWxsZXI6IHRydWUsXG4gICAgICAgIGNhbGxlZTogdHJ1ZSxcbiAgICAgICAgYXJndW1lbnRzOiB0cnVlLFxuICAgICAgICBhcml0eTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG4gICAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgdmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIHZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuICAgIFxuICAgIHJldHVybiBmdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAoIWJsYWNrbGlzdCB8fCAhYmxhY2tsaXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9O1xufSkpKTtcbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxudmFyIF9Mb2NhdGlvblV0aWxzID0gcmVxdWlyZSgnLi9Mb2NhdGlvblV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG52YXIgY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IHByb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHVuZGVmaW5lZCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IHByb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikoZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBfUGF0aFV0aWxzLmNyZWF0ZVBhdGg7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuXG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgY2FuR28gPSBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9O1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVNZW1vcnlIaXN0b3J5OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgKDAsIF9QYXRoVXRpbHMuc3RyaXBMZWFkaW5nU2xhc2gpKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBfUGF0aFV0aWxzLnN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShfRE9NVXRpbHMuY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2gpKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/ICgwLCBfUGF0aFV0aWxzLnN0cmlwVHJhaWxpbmdTbGFzaCkoKDAsIF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoKShwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIWJhc2VuYW1lIHx8ICgwLCBfUGF0aFV0aWxzLmhhc0Jhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmICgwLCBfTG9jYXRpb25VdGlscy5sb2NhdGlvbnNBcmVFcXVhbCkocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKSh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gWygwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG5cbiAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUhhc2hIaXN0b3J5OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9Mb2NhdGlvblV0aWxzID0gcmVxdWlyZSgnLi9Mb2NhdGlvblV0aWxzJyk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbnZhciBfRE9NVXRpbHMgPSByZXF1aXJlKCcuL0RPTVV0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBnZXRIaXN0b3J5U3RhdGUgPSBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cbnZhciBjcmVhdGVCcm93c2VySGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShfRE9NVXRpbHMuY2FuVXNlRE9NLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSAoMCwgX0RPTVV0aWxzLnN1cHBvcnRzSGlzdG9yeSkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gISgwLCBfRE9NVXRpbHMuc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSkoKTtcblxuICB2YXIgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gKDAsIF9QYXRoVXRpbHMuc3RyaXBUcmFpbGluZ1NsYXNoKSgoMCwgX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gpKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuXG5cbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcblxuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIWJhc2VuYW1lIHx8ICgwLCBfUGF0aFV0aWxzLmhhc0Jhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGtleSk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcFN0YXRlID0gZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmICgoMCwgX0RPTVV0aWxzLmlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQpKGV2ZW50KSkgcmV0dXJuO1xuXG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVCcm93c2VySGlzdG9yeTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBTaW5nbGVEYXNoYm9hcmRKb2IgZnJvbSAnLi9TaW5nbGVEYXNoYm9hcmRKb2IuanMnO1xuXG5jbGFzcyBDb21wYW5pZXNTZWN0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGFsbFVzZXJKb2JzOiBbXSxcblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICBjb25zdCBnZXRKb2JzRW5kcG9pbnQgPSAnL2pvYi9qb2IvJztcblxuICAgICAgICBheGlvcyh7XG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICAgICAgdXJsOiBnZXRKb2JzRW5kcG9pbnQsIFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnK2xvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpXG4gICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICByZXNwb25zZVR5cGU6ICdqc29uJ1xuICAgICAgICB9KVxuICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4geyBcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBhbGxVc2VySm9iczogcmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRoaXMgaXMgYW4gZXJyb3IgeW9cIiwgZXJyb3IpO1xuICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8aDE+QWxsIFVzZXIncyBKb2JzPC9oMT4gXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmFsbFVzZXJKb2JzID8gdGhpcy5zdGF0ZS5hbGxVc2VySm9icy5tYXAoKGpvYikgPT4gPFNpbmdsZURhc2hib2FyZEpvYiBcbiAgICAgICAgICAgICAgICAgICAgaWQ9e2pvYi5pZH1cbiAgICAgICAgICAgICAgICAgICAgYXJlYT17am9iLmFyZWF9IFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVkX2RhdGU9e2pvYi5jcmVhdGVkX2RhdGV9IFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbj17am9iLmRlc2NyaXB0aW9ufSBcbiAgICAgICAgICAgICAgICAgICAgZXhwZXJpZW5jZT17am9iLmV4cGVyaWVuY2V9IFxuICAgICAgICAgICAgICAgICAgICBob3Vycz17am9iLmhvdXJzfVxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbj17am9iLmxvY2F0aW9ufVxuICAgICAgICAgICAgICAgICAgICBwb3N0ZWRfYnlfY29tcGFueT17am9iLnBvc3RlZF9ieV9jb21wYW55fVxuICAgICAgICAgICAgICAgICAgICBzYWxhcnk9e2pvYi5zYWxhcnl9XG4gICAgICAgICAgICAgICAgICAgIHNsdWc9e2pvYi5zbHVnfVxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17am9iLnRpdGxlfSBcbiAgICAgICAgICAgICAgICAgICAgLz4pIDogPHA+bm88L3A+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICkgICAgXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb21wYW5pZXNTZWN0aW9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb21tb25KUyAvIE5vZGUgaGF2ZSBnbG9iYWwgY29udGV4dCBleHBvc2VkIGFzIFwiZ2xvYmFsXCIgdmFyaWFibGUuXG4vLyBXZSBkb24ndCB3YW50IHRvIGluY2x1ZGUgdGhlIHdob2xlIG5vZGUuZC50cyB0aGlzIHRoaXMgY29tcGlsYXRpb24gdW5pdCBzbyB3ZSdsbCBqdXN0IGZha2Vcbi8vIHRoZSBnbG9iYWwgXCJnbG9iYWxcIiB2YXIgZm9yIG5vdy5cbnZhciBfX3dpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdztcbnZhciBfX3NlbGYgPSB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJiBzZWxmO1xudmFyIF9fZ2xvYmFsID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsO1xudmFyIF9yb290ID0gX193aW5kb3cgfHwgX19nbG9iYWwgfHwgX19zZWxmO1xuZXhwb3J0cy5yb290ID0gX3Jvb3Q7XG4vLyBXb3JrYXJvdW5kIENsb3N1cmUgQ29tcGlsZXIgcmVzdHJpY3Rpb246IFRoZSBib2R5IG9mIGEgZ29vZy5tb2R1bGUgY2Fubm90IHVzZSB0aHJvdy5cbi8vIFRoaXMgaXMgbmVlZGVkIHdoZW4gdXNlZCB3aXRoIGFuZ3VsYXIvdHNpY2tsZSB3aGljaCBpbnNlcnRzIGEgZ29vZy5tb2R1bGUgc3RhdGVtZW50LlxuLy8gV3JhcCBpbiBJSUZFXG4oZnVuY3Rpb24gKCkge1xuICAgIGlmICghX3Jvb3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSeEpTIGNvdWxkIG5vdCBmaW5kIGFueSBnbG9iYWwgY29udGV4dCAod2luZG93LCBzZWxmLCBnbG9iYWwpJyk7XG4gICAgfVxufSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvb3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcm9vdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9yb290Jyk7XG52YXIgU3ltYm9sID0gcm9vdF8xLnJvb3QuU3ltYm9sO1xuZXhwb3J0cy5yeFN1YnNjcmliZXIgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLmZvciA9PT0gJ2Z1bmN0aW9uJykgP1xuICAgIFN5bWJvbC5mb3IoJ3J4U3Vic2NyaWJlcicpIDogJ0BAcnhTdWJzY3JpYmVyJztcbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIHJ4U3Vic2NyaWJlciBpbnN0ZWFkXG4gKi9cbmV4cG9ydHMuJCRyeFN1YnNjcmliZXIgPSBleHBvcnRzLnJ4U3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ4U3Vic2NyaWJlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuZW1wdHkgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB9LFxuICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7IHRocm93IGVycjsgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkgeyB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2ZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbi8qKlxuICogQW4gZXJyb3IgdGhyb3duIHdoZW4gb25lIG9yIG1vcmUgZXJyb3JzIGhhdmUgb2NjdXJyZWQgZHVyaW5nIHRoZVxuICogYHVuc3Vic2NyaWJlYCBvZiBhIHtAbGluayBTdWJzY3JpcHRpb259LlxuICovXG52YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFVuc3Vic2NyaXB0aW9uRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICB2YXIgZXJyID0gRXJyb3IuY2FsbCh0aGlzLCBlcnJvcnMgP1xuICAgICAgICAgICAgZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuICBcIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gKChpICsgMSkgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKSk7IH0pLmpvaW4oJ1xcbiAgJykgOiAnJyk7XG4gICAgICAgIHRoaXMubmFtZSA9IGVyci5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLnN0YWNrID0gZXJyLnN0YWNrO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICB9XG4gICAgcmV0dXJuIFVuc3Vic2NyaXB0aW9uRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLlVuc3Vic2NyaXB0aW9uRXJyb3IgPSBVbnN1YnNjcmlwdGlvbkVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBlcnJvck9iamVjdF8xID0gcmVxdWlyZSgnLi9lcnJvck9iamVjdCcpO1xudmFyIHRyeUNhdGNoVGFyZ2V0O1xuZnVuY3Rpb24gdHJ5Q2F0Y2hlcigpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdHJ5Q2F0Y2hUYXJnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lID0gZTtcbiAgICAgICAgcmV0dXJuIGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3Q7XG4gICAgfVxufVxuZnVuY3Rpb24gdHJ5Q2F0Y2goZm4pIHtcbiAgICB0cnlDYXRjaFRhcmdldCA9IGZuO1xuICAgIHJldHVybiB0cnlDYXRjaGVyO1xufVxuZXhwb3J0cy50cnlDYXRjaCA9IHRyeUNhdGNoO1xuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJ5Q2F0Y2guanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBpc09iamVjdCh4KSB7XG4gICAgcmV0dXJuIHggIT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCc7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc09iamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBpc0FycmF5XzEgPSByZXF1aXJlKCcuL3V0aWwvaXNBcnJheScpO1xudmFyIGlzT2JqZWN0XzEgPSByZXF1aXJlKCcuL3V0aWwvaXNPYmplY3QnKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKCcuL3V0aWwvaXNGdW5jdGlvbicpO1xudmFyIHRyeUNhdGNoXzEgPSByZXF1aXJlKCcuL3V0aWwvdHJ5Q2F0Y2gnKTtcbnZhciBlcnJvck9iamVjdF8xID0gcmVxdWlyZSgnLi91dGlsL2Vycm9yT2JqZWN0Jyk7XG52YXIgVW5zdWJzY3JpcHRpb25FcnJvcl8xID0gcmVxdWlyZSgnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InKTtcbi8qKlxuICogUmVwcmVzZW50cyBhIGRpc3Bvc2FibGUgcmVzb3VyY2UsIHN1Y2ggYXMgdGhlIGV4ZWN1dGlvbiBvZiBhbiBPYnNlcnZhYmxlLiBBXG4gKiBTdWJzY3JpcHRpb24gaGFzIG9uZSBpbXBvcnRhbnQgbWV0aG9kLCBgdW5zdWJzY3JpYmVgLCB0aGF0IHRha2VzIG5vIGFyZ3VtZW50XG4gKiBhbmQganVzdCBkaXNwb3NlcyB0aGUgcmVzb3VyY2UgaGVsZCBieSB0aGUgc3Vic2NyaXB0aW9uLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgc3Vic2NyaXB0aW9ucyBtYXkgYmUgZ3JvdXBlZCB0b2dldGhlciB0aHJvdWdoIHRoZSBgYWRkKClgXG4gKiBtZXRob2QsIHdoaWNoIHdpbGwgYXR0YWNoIGEgY2hpbGQgU3Vic2NyaXB0aW9uIHRvIHRoZSBjdXJyZW50IFN1YnNjcmlwdGlvbi5cbiAqIFdoZW4gYSBTdWJzY3JpcHRpb24gaXMgdW5zdWJzY3JpYmVkLCBhbGwgaXRzIGNoaWxkcmVuIChhbmQgaXRzIGdyYW5kY2hpbGRyZW4pXG4gKiB3aWxsIGJlIHVuc3Vic2NyaWJlZCBhcyB3ZWxsLlxuICpcbiAqIEBjbGFzcyBTdWJzY3JpcHRpb25cbiAqL1xudmFyIFN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigpOiB2b2lkfSBbdW5zdWJzY3JpYmVdIEEgZnVuY3Rpb24gZGVzY3JpYmluZyBob3cgdG9cbiAgICAgKiBwZXJmb3JtIHRoZSBkaXNwb3NhbCBvZiByZXNvdXJjZXMgd2hlbiB0aGUgYHVuc3Vic2NyaWJlYCBtZXRob2QgaXMgY2FsbGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbih1bnN1YnNjcmliZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgdGhpcyBTdWJzY3JpcHRpb24gaGFzIGFscmVhZHkgYmVlbiB1bnN1YnNjcmliZWQuXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcGFyZW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBudWxsO1xuICAgICAgICBpZiAodW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gdW5zdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzcG9zZXMgdGhlIHJlc291cmNlcyBoZWxkIGJ5IHRoZSBzdWJzY3JpcHRpb24uIE1heSwgZm9yIGluc3RhbmNlLCBjYW5jZWxcbiAgICAgKiBhbiBvbmdvaW5nIE9ic2VydmFibGUgZXhlY3V0aW9uIG9yIGNhbmNlbCBhbnkgb3RoZXIgdHlwZSBvZiB3b3JrIHRoYXRcbiAgICAgKiBzdGFydGVkIHdoZW4gdGhlIFN1YnNjcmlwdGlvbiB3YXMgY3JlYXRlZC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoYXNFcnJvcnMgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9ycztcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hID0gdGhpcywgX3BhcmVudCA9IF9hLl9wYXJlbnQsIF9wYXJlbnRzID0gX2EuX3BhcmVudHMsIF91bnN1YnNjcmliZSA9IF9hLl91bnN1YnNjcmliZSwgX3N1YnNjcmlwdGlvbnMgPSBfYS5fc3Vic2NyaXB0aW9ucztcbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wYXJlbnRzID0gbnVsbDtcbiAgICAgICAgLy8gbnVsbCBvdXQgX3N1YnNjcmlwdGlvbnMgZmlyc3Qgc28gYW55IGNoaWxkIHN1YnNjcmlwdGlvbnMgdGhhdCBhdHRlbXB0XG4gICAgICAgIC8vIHRvIHJlbW92ZSB0aGVtc2VsdmVzIGZyb20gdGhpcyBzdWJzY3JpcHRpb24gd2lsbCBub29wXG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBudWxsO1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIGxlbiA9IF9wYXJlbnRzID8gX3BhcmVudHMubGVuZ3RoIDogMDtcbiAgICAgICAgLy8gaWYgdGhpcy5fcGFyZW50IGlzIG51bGwsIHRoZW4gc28gaXMgdGhpcy5fcGFyZW50cywgYW5kIHdlXG4gICAgICAgIC8vIGRvbid0IGhhdmUgdG8gcmVtb3ZlIG91cnNlbHZlcyBmcm9tIGFueSBwYXJlbnQgc3Vic2NyaXB0aW9ucy5cbiAgICAgICAgd2hpbGUgKF9wYXJlbnQpIHtcbiAgICAgICAgICAgIF9wYXJlbnQucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgLy8gaWYgdGhpcy5fcGFyZW50cyBpcyBudWxsIG9yIGluZGV4ID49IGxlbixcbiAgICAgICAgICAgIC8vIHRoZW4gX3BhcmVudCBpcyBzZXQgdG8gbnVsbCwgYW5kIHRoZSBsb29wIGV4aXRzXG4gICAgICAgICAgICBfcGFyZW50ID0gKytpbmRleCA8IGxlbiAmJiBfcGFyZW50c1tpbmRleF0gfHwgbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oX3Vuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgdmFyIHRyaWFsID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaChfdW5zdWJzY3JpYmUpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICBpZiAodHJpYWwgPT09IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBoYXNFcnJvcnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyB8fCAoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcl8xLlVuc3Vic2NyaXB0aW9uRXJyb3IgP1xuICAgICAgICAgICAgICAgICAgICBmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lLmVycm9ycykgOiBbZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlfMS5pc0FycmF5KF9zdWJzY3JpcHRpb25zKSkge1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGxlbiA9IF9zdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YiA9IF9zdWJzY3JpcHRpb25zW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3RfMS5pc09iamVjdChzdWIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmlhbCA9IHRyeUNhdGNoXzEudHJ5Q2F0Y2goc3ViLnVuc3Vic2NyaWJlKS5jYWxsKHN1Yik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmlhbCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3JzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnIgPSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcl8xLlVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KGZsYXR0ZW5VbnN1YnNjcmlwdGlvbkVycm9ycyhlcnIuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNFcnJvcnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yXzEuVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGRzIGEgdGVhciBkb3duIHRvIGJlIGNhbGxlZCBkdXJpbmcgdGhlIHVuc3Vic2NyaWJlKCkgb2YgdGhpc1xuICAgICAqIFN1YnNjcmlwdGlvbi5cbiAgICAgKlxuICAgICAqIElmIHRoZSB0ZWFyIGRvd24gYmVpbmcgYWRkZWQgaXMgYSBzdWJzY3JpcHRpb24gdGhhdCBpcyBhbHJlYWR5XG4gICAgICogdW5zdWJzY3JpYmVkLCBpcyB0aGUgc2FtZSByZWZlcmVuY2UgYGFkZGAgaXMgYmVpbmcgY2FsbGVkIG9uLCBvciBpc1xuICAgICAqIGBTdWJzY3JpcHRpb24uRU1QVFlgLCBpdCB3aWxsIG5vdCBiZSBhZGRlZC5cbiAgICAgKlxuICAgICAqIElmIHRoaXMgc3Vic2NyaXB0aW9uIGlzIGFscmVhZHkgaW4gYW4gYGNsb3NlZGAgc3RhdGUsIHRoZSBwYXNzZWRcbiAgICAgKiB0ZWFyIGRvd24gbG9naWMgd2lsbCBiZSBleGVjdXRlZCBpbW1lZGlhdGVseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7VGVhcmRvd25Mb2dpY30gdGVhcmRvd24gVGhlIGFkZGl0aW9uYWwgbG9naWMgdG8gZXhlY3V0ZSBvblxuICAgICAqIHRlYXJkb3duLlxuICAgICAqIEByZXR1cm4ge1N1YnNjcmlwdGlvbn0gUmV0dXJucyB0aGUgU3Vic2NyaXB0aW9uIHVzZWQgb3IgY3JlYXRlZCB0byBiZVxuICAgICAqIGFkZGVkIHRvIHRoZSBpbm5lciBzdWJzY3JpcHRpb25zIGxpc3QuIFRoaXMgU3Vic2NyaXB0aW9uIGNhbiBiZSB1c2VkIHdpdGhcbiAgICAgKiBgcmVtb3ZlKClgIHRvIHJlbW92ZSB0aGUgcGFzc2VkIHRlYXJkb3duIGxvZ2ljIGZyb20gdGhlIGlubmVyIHN1YnNjcmlwdGlvbnNcbiAgICAgKiBsaXN0LlxuICAgICAqL1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIGlmICghdGVhcmRvd24gfHwgKHRlYXJkb3duID09PSBTdWJzY3JpcHRpb24uRU1QVFkpKSB7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZWFyZG93biA9PT0gdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRlYXJkb3duO1xuICAgICAgICBzd2l0Y2ggKHR5cGVvZiB0ZWFyZG93bikge1xuICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGVhcmRvd24pO1xuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLmNsb3NlZCB8fCB0eXBlb2Ygc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2Ygc3Vic2NyaXB0aW9uLl9hZGRQYXJlbnQgIT09ICdmdW5jdGlvbicgLyogcXVhY2sgcXVhY2sgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24uX3N1YnNjcmlwdGlvbnMgPSBbdG1wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkIHRlYXJkb3duICcgKyB0ZWFyZG93biArICcgYWRkZWQgdG8gU3Vic2NyaXB0aW9uLicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gdGhpcy5fc3Vic2NyaXB0aW9ucyB8fCAodGhpcy5fc3Vic2NyaXB0aW9ucyA9IFtdKTtcbiAgICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5fYWRkUGFyZW50KHRoaXMpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIFN1YnNjcmlwdGlvbiBmcm9tIHRoZSBpbnRlcm5hbCBsaXN0IG9mIHN1YnNjcmlwdGlvbnMgdGhhdCB3aWxsXG4gICAgICogdW5zdWJzY3JpYmUgZHVyaW5nIHRoZSB1bnN1YnNjcmliZSBwcm9jZXNzIG9mIHRoaXMgU3Vic2NyaXB0aW9uLlxuICAgICAqIEBwYXJhbSB7U3Vic2NyaXB0aW9ufSBzdWJzY3JpcHRpb24gVGhlIHN1YnNjcmlwdGlvbiB0byByZW1vdmUuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbkluZGV4ID0gc3Vic2NyaXB0aW9ucy5pbmRleE9mKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5zcGxpY2Uoc3Vic2NyaXB0aW9uSW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9hZGRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF9wYXJlbnQgPSBfYS5fcGFyZW50LCBfcGFyZW50cyA9IF9hLl9wYXJlbnRzO1xuICAgICAgICBpZiAoIV9wYXJlbnQgfHwgX3BhcmVudCA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgcGFyZW50LCBvciB0aGUgbmV3IHBhcmVudCBpcyB0aGUgc2FtZSBhcyB0aGVcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgcGFyZW50LCB0aGVuIHNldCB0aGlzLl9wYXJlbnQgdG8gdGhlIG5ldyBwYXJlbnQuXG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIV9wYXJlbnRzKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGFscmVhZHkgb25lIHBhcmVudCwgYnV0IG5vdCBtdWx0aXBsZSwgYWxsb2NhdGUgYW4gQXJyYXkgdG9cbiAgICAgICAgICAgIC8vIHN0b3JlIHRoZSByZXN0IG9mIHRoZSBwYXJlbnQgU3Vic2NyaXB0aW9ucy5cbiAgICAgICAgICAgIHRoaXMuX3BhcmVudHMgPSBbcGFyZW50XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfcGFyZW50cy5pbmRleE9mKHBhcmVudCkgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBPbmx5IGFkZCB0aGUgbmV3IHBhcmVudCB0byB0aGUgX3BhcmVudHMgbGlzdCBpZiBpdCdzIG5vdCBhbHJlYWR5IHRoZXJlLlxuICAgICAgICAgICAgX3BhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKGVtcHR5KSB7XG4gICAgICAgIGVtcHR5LmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9KG5ldyBTdWJzY3JpcHRpb24oKSkpO1xuICAgIHJldHVybiBTdWJzY3JpcHRpb247XG59KCkpO1xuZXhwb3J0cy5TdWJzY3JpcHRpb24gPSBTdWJzY3JpcHRpb247XG5mdW5jdGlvbiBmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZXJyb3JzKSB7XG4gICAgcmV0dXJuIGVycm9ycy5yZWR1Y2UoZnVuY3Rpb24gKGVycnMsIGVycikgeyByZXR1cm4gZXJycy5jb25jYXQoKGVyciBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3JfMS5VbnN1YnNjcmlwdGlvbkVycm9yKSA/IGVyci5lcnJvcnMgOiBlcnIpOyB9LCBbXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKCcuL3V0aWwvaXNGdW5jdGlvbicpO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZSgnLi9TdWJzY3JpcHRpb24nKTtcbnZhciBPYnNlcnZlcl8xID0gcmVxdWlyZSgnLi9PYnNlcnZlcicpO1xudmFyIHJ4U3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi9zeW1ib2wvcnhTdWJzY3JpYmVyJyk7XG4vKipcbiAqIEltcGxlbWVudHMgdGhlIHtAbGluayBPYnNlcnZlcn0gaW50ZXJmYWNlIGFuZCBleHRlbmRzIHRoZVxuICoge0BsaW5rIFN1YnNjcmlwdGlvbn0gY2xhc3MuIFdoaWxlIHRoZSB7QGxpbmsgT2JzZXJ2ZXJ9IGlzIHRoZSBwdWJsaWMgQVBJIGZvclxuICogY29uc3VtaW5nIHRoZSB2YWx1ZXMgb2YgYW4ge0BsaW5rIE9ic2VydmFibGV9LCBhbGwgT2JzZXJ2ZXJzIGdldCBjb252ZXJ0ZWQgdG9cbiAqIGEgU3Vic2NyaWJlciwgaW4gb3JkZXIgdG8gcHJvdmlkZSBTdWJzY3JpcHRpb24tbGlrZSBjYXBhYmlsaXRpZXMgc3VjaCBhc1xuICogYHVuc3Vic2NyaWJlYC4gU3Vic2NyaWJlciBpcyBhIGNvbW1vbiB0eXBlIGluIFJ4SlMsIGFuZCBjcnVjaWFsIGZvclxuICogaW1wbGVtZW50aW5nIG9wZXJhdG9ycywgYnV0IGl0IGlzIHJhcmVseSB1c2VkIGFzIGEgcHVibGljIEFQSS5cbiAqXG4gKiBAY2xhc3MgU3Vic2NyaWJlcjxUPlxuICovXG52YXIgU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYnNlcnZlcnxmdW5jdGlvbih2YWx1ZTogVCk6IHZvaWR9IFtkZXN0aW5hdGlvbk9yTmV4dF0gQSBwYXJ0aWFsbHlcbiAgICAgKiBkZWZpbmVkIE9ic2VydmVyIG9yIGEgYG5leHRgIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZTogP2FueSk6IHZvaWR9IFtlcnJvcl0gVGhlIGBlcnJvcmAgY2FsbGJhY2sgb2YgYW5cbiAgICAgKiBPYnNlcnZlci5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IHZvaWR9IFtjb21wbGV0ZV0gVGhlIGBjb21wbGV0ZWAgY2FsbGJhY2sgb2YgYW5cbiAgICAgKiBPYnNlcnZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuc3luY0Vycm9yVmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLnN5bmNFcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gT2JzZXJ2ZXJfMS5lbXB0eTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiAoIWRlc3RpbmF0aW9uT3JOZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBPYnNlcnZlcl8xLmVtcHR5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXN0aW5hdGlvbk9yTmV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSEFDSyhiZW5sZXNoKTogVG8gcmVzb2x2ZSBhbiBpc3N1ZSB3aGVyZSBOb2RlIHVzZXJzIG1heSBoYXZlIG11bHRpcGxlXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvcGllcyBvZiByeGpzIGluIHRoZWlyIG5vZGVfbW9kdWxlcyBkaXJlY3RvcnkuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1RydXN0ZWRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uT3JOZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRydXN0ZWRTdWJzY3JpYmVyID0gZGVzdGluYXRpb25Pck5leHRbcnhTdWJzY3JpYmVyXzEucnhTdWJzY3JpYmVyXSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSB0cnVzdGVkU3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gdHJ1c3RlZFN1YnNjcmliZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnVzdGVkU3Vic2NyaWJlci5hZGQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNhZmVTdWJzY3JpYmVyKHRoaXMsIGRlc3RpbmF0aW9uT3JOZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNhZmVTdWJzY3JpYmVyKHRoaXMsIGRlc3RpbmF0aW9uT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIFN1YnNjcmliZXIucHJvdG90eXBlW3J4U3Vic2NyaWJlcl8xLnJ4U3Vic2NyaWJlcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuICAgIC8qKlxuICAgICAqIEEgc3RhdGljIGZhY3RvcnkgZm9yIGEgU3Vic2NyaWJlciwgZ2l2ZW4gYSAocG90ZW50aWFsbHkgcGFydGlhbCkgZGVmaW5pdGlvblxuICAgICAqIG9mIGFuIE9ic2VydmVyLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oeDogP1QpOiB2b2lkfSBbbmV4dF0gVGhlIGBuZXh0YCBjYWxsYmFjayBvZiBhbiBPYnNlcnZlci5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGU6ID9hbnkpOiB2b2lkfSBbZXJyb3JdIFRoZSBgZXJyb3JgIGNhbGxiYWNrIG9mIGFuXG4gICAgICogT2JzZXJ2ZXIuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigpOiB2b2lkfSBbY29tcGxldGVdIFRoZSBgY29tcGxldGVgIGNhbGxiYWNrIG9mIGFuXG4gICAgICogT2JzZXJ2ZXIuXG4gICAgICogQHJldHVybiB7U3Vic2NyaWJlcjxUPn0gQSBTdWJzY3JpYmVyIHdyYXBwaW5nIHRoZSAocGFydGlhbGx5IGRlZmluZWQpXG4gICAgICogT2JzZXJ2ZXIgcmVwcmVzZW50ZWQgYnkgdGhlIGdpdmVuIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBuZXcgU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBzdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSB7QGxpbmsgT2JzZXJ2ZXJ9IGNhbGxiYWNrIHRvIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBvZiB0eXBlIGBuZXh0YCBmcm9tXG4gICAgICogdGhlIE9ic2VydmFibGUsIHdpdGggYSB2YWx1ZS4gVGhlIE9ic2VydmFibGUgbWF5IGNhbGwgdGhpcyBtZXRob2QgMCBvciBtb3JlXG4gICAgICogdGltZXMuXG4gICAgICogQHBhcmFtIHtUfSBbdmFsdWVdIFRoZSBgbmV4dGAgdmFsdWUuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUge0BsaW5rIE9ic2VydmVyfSBjYWxsYmFjayB0byByZWNlaXZlIG5vdGlmaWNhdGlvbnMgb2YgdHlwZSBgZXJyb3JgIGZyb21cbiAgICAgKiB0aGUgT2JzZXJ2YWJsZSwgd2l0aCBhbiBhdHRhY2hlZCB7QGxpbmsgRXJyb3J9LiBOb3RpZmllcyB0aGUgT2JzZXJ2ZXIgdGhhdFxuICAgICAqIHRoZSBPYnNlcnZhYmxlIGhhcyBleHBlcmllbmNlZCBhbiBlcnJvciBjb25kaXRpb24uXG4gICAgICogQHBhcmFtIHthbnl9IFtlcnJdIFRoZSBgZXJyb3JgIGV4Y2VwdGlvbi5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUge0BsaW5rIE9ic2VydmVyfSBjYWxsYmFjayB0byByZWNlaXZlIGEgdmFsdWVsZXNzIG5vdGlmaWNhdGlvbiBvZiB0eXBlXG4gICAgICogYGNvbXBsZXRlYCBmcm9tIHRoZSBPYnNlcnZhYmxlLiBOb3RpZmllcyB0aGUgT2JzZXJ2ZXIgdGhhdCB0aGUgT2JzZXJ2YWJsZVxuICAgICAqIGhhcyBmaW5pc2hlZCBzZW5kaW5nIHB1c2gtYmFzZWQgbm90aWZpY2F0aW9ucy5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICAvKiogQGRlcHJlY2F0ZWQgaW50ZXJuYWwgdXNlIG9ubHkgKi8gU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgX3BhcmVudCA9IF9hLl9wYXJlbnQsIF9wYXJlbnRzID0gX2EuX3BhcmVudHM7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BhcmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IF9wYXJlbnQ7XG4gICAgICAgIHRoaXMuX3BhcmVudHMgPSBfcGFyZW50cztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaWJlcjtcbn0oU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKSk7XG5leHBvcnRzLlN1YnNjcmliZXIgPSBTdWJzY3JpYmVyO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBTYWZlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKF9wYXJlbnRTdWJzY3JpYmVyLCBvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyID0gX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgIHZhciBuZXh0O1xuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkpIHtcbiAgICAgICAgICAgIG5leHQgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgbmV4dCA9IG9ic2VydmVyT3JOZXh0Lm5leHQ7XG4gICAgICAgICAgICBlcnJvciA9IG9ic2VydmVyT3JOZXh0LmVycm9yO1xuICAgICAgICAgICAgY29tcGxldGUgPSBvYnNlcnZlck9yTmV4dC5jb21wbGV0ZTtcbiAgICAgICAgICAgIGlmIChvYnNlcnZlck9yTmV4dCAhPT0gT2JzZXJ2ZXJfMS5lbXB0eSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oY29udGV4dC51bnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGQoY29udGV4dC51bnN1YnNjcmliZS5iaW5kKGNvbnRleHQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGV4dC51bnN1YnNjcmliZSA9IHRoaXMudW5zdWJzY3JpYmUuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5fbmV4dCA9IG5leHQ7XG4gICAgICAgIHRoaXMuX2Vycm9yID0gZXJyb3I7XG4gICAgICAgIHRoaXMuX2NvbXBsZXRlID0gY29tcGxldGU7XG4gICAgfVxuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQgJiYgdGhpcy5fbmV4dCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgICAgIGlmICghX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yVW5zdWIodGhpcy5fbmV4dCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudFN1YnNjcmliZXIsIHRoaXMuX25leHQsIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yVW5zdWIodGhpcy5fZXJyb3IsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclNldEVycm9yKF9wYXJlbnRTdWJzY3JpYmVyLCB0aGlzLl9lcnJvciwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVmFsdWUgPSBlcnI7XG4gICAgICAgICAgICAgICAgX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHZhciB3cmFwcGVkQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fY29tcGxldGUuY2FsbChfdGhpcy5fY29udGV4dCk7IH07XG4gICAgICAgICAgICAgICAgaWYgKCFfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yVW5zdWIod3JhcHBlZENvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudFN1YnNjcmliZXIsIHdyYXBwZWRDb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5fX3RyeU9yVW5zdWIgPSBmdW5jdGlvbiAoZm4sIHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMuX2NvbnRleHQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5fX3RyeU9yU2V0RXJyb3IgPSBmdW5jdGlvbiAocGFyZW50LCBmbiwgdmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcy5fY29udGV4dCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHBhcmVudC5zeW5jRXJyb3JWYWx1ZSA9IGVycjtcbiAgICAgICAgICAgIHBhcmVudC5zeW5jRXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgLyoqIEBkZXByZWNhdGVkIGludGVybmFsIHVzZSBvbmx5ICovIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgX3BhcmVudFN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZnVuY3Rpb24gaXNUcnVzdGVkU3Vic2NyaWJlcihvYmopIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgU3Vic2NyaWJlciB8fCAoJ3N5bmNFcnJvclRocm93YWJsZScgaW4gb2JqICYmIG9ialtyeFN1YnNjcmliZXJfMS5yeFN1YnNjcmliZXJdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG4vKiB0c2xpbnQ6ZW5hYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuLyoqXG4gKiBGaWx0ZXIgaXRlbXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgYnkgb25seSBlbWl0dGluZyB0aG9zZSB0aGF0XG4gKiBzYXRpc2Z5IGEgc3BlY2lmaWVkIHByZWRpY2F0ZS5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+TGlrZVxuICogW0FycmF5LnByb3RvdHlwZS5maWx0ZXIoKV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmlsdGVyKSxcbiAqIGl0IG9ubHkgZW1pdHMgYSB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgaWYgaXQgcGFzc2VzIGEgY3JpdGVyaW9uIGZ1bmN0aW9uLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL2ZpbHRlci5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBTaW1pbGFyIHRvIHRoZSB3ZWxsLWtub3duIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2QsIHRoaXMgb3BlcmF0b3JcbiAqIHRha2VzIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgcGFzc2VzIHRoZW0gdGhyb3VnaCBhIGBwcmVkaWNhdGVgXG4gKiBmdW5jdGlvbiBhbmQgb25seSBlbWl0cyB0aG9zZSB2YWx1ZXMgdGhhdCB5aWVsZGVkIGB0cnVlYC5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IG9ubHkgY2xpY2sgZXZlbnRzIHdob3NlIHRhcmdldCB3YXMgYSBESVYgZWxlbWVudDwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgY2xpY2tzT25EaXZzID0gY2xpY2tzLmZpbHRlcihldiA9PiBldi50YXJnZXQudGFnTmFtZSA9PT0gJ0RJVicpO1xuICogY2xpY2tzT25EaXZzLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBkaXN0aW5jdH1cbiAqIEBzZWUge0BsaW5rIGRpc3RpbmN0VW50aWxDaGFuZ2VkfVxuICogQHNlZSB7QGxpbmsgZGlzdGluY3RVbnRpbEtleUNoYW5nZWR9XG4gKiBAc2VlIHtAbGluayBpZ25vcmVFbGVtZW50c31cbiAqIEBzZWUge0BsaW5rIHBhcnRpdGlvbn1cbiAqIEBzZWUge0BsaW5rIHNraXB9XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgaW5kZXg6IG51bWJlcik6IGJvb2xlYW59IHByZWRpY2F0ZSBBIGZ1bmN0aW9uIHRoYXRcbiAqIGV2YWx1YXRlcyBlYWNoIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBJZiBpdCByZXR1cm5zIGB0cnVlYCxcbiAqIHRoZSB2YWx1ZSBpcyBlbWl0dGVkLCBpZiBgZmFsc2VgIHRoZSB2YWx1ZSBpcyBub3QgcGFzc2VkIHRvIHRoZSBvdXRwdXRcbiAqIE9ic2VydmFibGUuIFRoZSBgaW5kZXhgIHBhcmFtZXRlciBpcyB0aGUgbnVtYmVyIGBpYCBmb3IgdGhlIGktdGggc291cmNlXG4gKiBlbWlzc2lvbiB0aGF0IGhhcyBoYXBwZW5lZCBzaW5jZSB0aGUgc3Vic2NyaXB0aW9uLCBzdGFydGluZyBmcm9tIHRoZSBudW1iZXJcbiAqIGAwYC5cbiAqIEBwYXJhbSB7YW55fSBbdGhpc0FyZ10gQW4gb3B0aW9uYWwgYXJndW1lbnQgdG8gZGV0ZXJtaW5lIHRoZSB2YWx1ZSBvZiBgdGhpc2BcbiAqIGluIHRoZSBgcHJlZGljYXRlYCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgb2YgdmFsdWVzIGZyb20gdGhlIHNvdXJjZSB0aGF0IHdlcmVcbiAqIGFsbG93ZWQgYnkgdGhlIGBwcmVkaWNhdGVgIGZ1bmN0aW9uLlxuICogQG1ldGhvZCBmaWx0ZXJcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIGZpbHRlcihwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZmlsdGVyT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBGaWx0ZXJPcGVyYXRvcihwcmVkaWNhdGUsIHRoaXNBcmcpKTtcbiAgICB9O1xufVxuZXhwb3J0cy5maWx0ZXIgPSBmaWx0ZXI7XG52YXIgRmlsdGVyT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZpbHRlck9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICB9XG4gICAgRmlsdGVyT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBGaWx0ZXJTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJlZGljYXRlLCB0aGlzLnRoaXNBcmcpKTtcbiAgICB9O1xuICAgIHJldHVybiBGaWx0ZXJPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIEZpbHRlclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGaWx0ZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZpbHRlclN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICB9XG4gICAgLy8gdGhlIHRyeSBjYXRjaCBibG9jayBiZWxvdyBpcyBsZWZ0IHNwZWNpZmljYWxseSBmb3JcbiAgICAvLyBvcHRpbWl6YXRpb24gYW5kIHBlcmYgcmVhc29ucy4gYSB0cnlDYXRjaGVyIGlzIG5vdCBuZWNlc3NhcnkgaGVyZS5cbiAgICBGaWx0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUuY2FsbCh0aGlzLnRoaXNBcmcsIHZhbHVlLCB0aGlzLmNvdW50KyspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRmlsdGVyU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBmaWx0ZXJfMSA9IHJlcXVpcmUoJy4uL29wZXJhdG9ycy9maWx0ZXInKTtcbi8qIHRzbGludDplbmFibGU6bWF4LWxpbmUtbGVuZ3RoICovXG4vKipcbiAqIEZpbHRlciBpdGVtcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBieSBvbmx5IGVtaXR0aW5nIHRob3NlIHRoYXRcbiAqIHNhdGlzZnkgYSBzcGVjaWZpZWQgcHJlZGljYXRlLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5MaWtlXG4gKiBbQXJyYXkucHJvdG90eXBlLmZpbHRlcigpXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9maWx0ZXIpLFxuICogaXQgb25seSBlbWl0cyBhIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBpZiBpdCBwYXNzZXMgYSBjcml0ZXJpb24gZnVuY3Rpb24uPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvZmlsdGVyLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIFNpbWlsYXIgdG8gdGhlIHdlbGwta25vd24gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZCwgdGhpcyBvcGVyYXRvclxuICogdGFrZXMgdmFsdWVzIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCBwYXNzZXMgdGhlbSB0aHJvdWdoIGEgYHByZWRpY2F0ZWBcbiAqIGZ1bmN0aW9uIGFuZCBvbmx5IGVtaXRzIHRob3NlIHZhbHVlcyB0aGF0IHlpZWxkZWQgYHRydWVgLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXQgb25seSBjbGljayBldmVudHMgd2hvc2UgdGFyZ2V0IHdhcyBhIERJViBlbGVtZW50PC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciBjbGlja3NPbkRpdnMgPSBjbGlja3MuZmlsdGVyKGV2ID0+IGV2LnRhcmdldC50YWdOYW1lID09PSAnRElWJyk7XG4gKiBjbGlja3NPbkRpdnMuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGRpc3RpbmN0fVxuICogQHNlZSB7QGxpbmsgZGlzdGluY3RVbnRpbENoYW5nZWR9XG4gKiBAc2VlIHtAbGluayBkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZH1cbiAqIEBzZWUge0BsaW5rIGlnbm9yZUVsZW1lbnRzfVxuICogQHNlZSB7QGxpbmsgcGFydGl0aW9ufVxuICogQHNlZSB7QGxpbmsgc2tpcH1cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKTogYm9vbGVhbn0gcHJlZGljYXRlIEEgZnVuY3Rpb24gdGhhdFxuICogZXZhbHVhdGVzIGVhY2ggdmFsdWUgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuIElmIGl0IHJldHVybnMgYHRydWVgLFxuICogdGhlIHZhbHVlIGlzIGVtaXR0ZWQsIGlmIGBmYWxzZWAgdGhlIHZhbHVlIGlzIG5vdCBwYXNzZWQgdG8gdGhlIG91dHB1dFxuICogT2JzZXJ2YWJsZS4gVGhlIGBpbmRleGAgcGFyYW1ldGVyIGlzIHRoZSBudW1iZXIgYGlgIGZvciB0aGUgaS10aCBzb3VyY2VcbiAqIGVtaXNzaW9uIHRoYXQgaGFzIGhhcHBlbmVkIHNpbmNlIHRoZSBzdWJzY3JpcHRpb24sIHN0YXJ0aW5nIGZyb20gdGhlIG51bWJlclxuICogYDBgLlxuICogQHBhcmFtIHthbnl9IFt0aGlzQXJnXSBBbiBvcHRpb25hbCBhcmd1bWVudCB0byBkZXRlcm1pbmUgdGhlIHZhbHVlIG9mIGB0aGlzYFxuICogaW4gdGhlIGBwcmVkaWNhdGVgIGZ1bmN0aW9uLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSBvZiB2YWx1ZXMgZnJvbSB0aGUgc291cmNlIHRoYXQgd2VyZVxuICogYWxsb3dlZCBieSB0aGUgYHByZWRpY2F0ZWAgZnVuY3Rpb24uXG4gKiBAbWV0aG9kIGZpbHRlclxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBmaWx0ZXJfMS5maWx0ZXIocHJlZGljYXRlLCB0aGlzQXJnKSh0aGlzKTtcbn1cbmV4cG9ydHMuZmlsdGVyID0gZmlsdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLmpzLm1hcCIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IFNpbmdsZURhc2hib2FyZEpvYiBmcm9tICcuLi9qb2JzL1NpbmdsZURhc2hib2FyZEpvYi5qcyc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyLCBSb3V0ZSwgU3dpdGNoLCBMaW5rLCBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9yL2ZpbHRlcic7XG5cbmNsYXNzIENvbXBhbnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy52aWV3RXhpc3RpbmdDb21wYW55ID0gdGhpcy52aWV3RXhpc3RpbmdDb21wYW55LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZmlsdGVySm9icyA9IHRoaXMuZmlsdGVySm9icy5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB2aWV3Q29tcGFueU1vZGFsSXNPcGVuOiBmYWxzZSxcblxuICAgICAgICAgICAgY29tcGFueUluZm86IHRoaXMucHJvcHMuY29tcGFueUluZm8sXG4gICAgICAgICAgICBjb21wYW55RGVzY3JpcHRpb246IHRoaXMucHJvcHMuY29tcGFueURlc2NyaXB0aW9uLFxuICAgICAgICAgICAgY29tcGFueUlkOiB0aGlzLnByb3BzLmNvbXBhbnlJZCxcbiAgICAgICAgICAgIGFsbEpvYnM6IFtdLFxuICAgICAgICAgICAgZmlsdGVyZWRKb2JzOiBbXSxcbiAgICAgICAgICAgIHVzZXJDb21wYW5pZXM6IHRoaXMucHJvcHMudXNlckNvbXBhbmllcyxcbiAgICAgICAgICAgIGNvbXBhbnlOYW1lOiB0aGlzLnByb3BzLmNvbXBhbnlOYW1lXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgXG4gICAgICAgIFxuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgY29uc3QgZ2V0Sm9ic0VuZHBvaW50ID0gJy9qb2Ivam9iLyc7XG5cbiAgICAgICAgYXhpb3Moe1xuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgICAgIHVybDogZ2V0Sm9ic0VuZHBvaW50LCBcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdKV1QgJytsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKVxuICAgICAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbidcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IHsgXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgYWxsSm9iczogcmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRKb2JzID0gdGhpcy5zdGF0ZS5hbGxKb2JzLmZpbHRlcigoam9iKSA9PiBqb2IucG9zdGVkX2J5X2NvbXBhbnkgPT0gdGhpcy5zdGF0ZS5jb21wYW55SWQgKTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkSm9iczogZmlsdGVyZWRKb2JzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRoaXMgaXMgYW4gZXJyb3IgeW9cIiwgZXJyb3IpO1xuICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgdmlld0V4aXN0aW5nQ29tcGFueSgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB2aWV3Q29tcGFueU1vZGFsSXNPcGVuOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICAgIGNvbnNvbGUubG9nKCdvcGVuIGNvbXBhbnkgbW9kYWwnKTtcbiAgICB9XG5cbiAgICBmaWx0ZXJKb2JzKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZEpvYnMgPSB0aGlzLnN0YXRlLmFsbEpvYnMuZmlsdGVyKChqb2IpID0+IGpvYi5wb3N0ZWRfYnlfY29tcGFueSA9PSB0aGlzLnN0YXRlLmNvbXBhbnlJZCApO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGZpbHRlcmVkSm9iczogZmlsdGVyZWRKb2JzXG4gICAgICAgIH0pO1xuICAgIH1cblxuXG5cblxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaW5nbGUtY29tcGFueVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29tcGFueS1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21wYW55LWhlYWRlci10aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyPnt0aGlzLnN0YXRlLmNvbXBhbnlJbmZvLm5hbWV9PC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89e3sgcGF0aG5hbWU6IFwiL25ld19qb2JcIiwgc3RhdGU6IHtjb21wYW5pZXNGcm9tTGluazogdGhpcy5zdGF0ZS51c2VyQ29tcGFuaWVzfSB9fT48YnV0dG9uIGNsYXNzTmFtZT1cImFkZC1qb2ItdG8tY29tcGFueS1idXR0b25cIj5BZGQgbmV3IGpvYiBmb3IgdGhpcyBjb21wYW55PC9idXR0b24+PC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXR0b24tY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz17XCIvdmlld19jb21wYW55L1wiICsgdGhpcy5zdGF0ZS5jb21wYW55SWR9PjxidXR0b24gY2xhc3NOYW1lPVwidmlldy1jb21wYW55LWJ1dHRvblwiPlZpZXcgQ29tcGFueSBQYWdlPC9idXR0b24+PC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICBcbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21wYW55LXBvc3RpbmdzLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDE+Sm9iIFBvc3RpbmdzIGZvciB7dGhpcy5zdGF0ZS5jb21wYW55SW5mby5uYW1lfTwvaDE+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5maWx0ZXJlZEpvYnMgPyB0aGlzLnN0YXRlLmZpbHRlcmVkSm9icy5tYXAoKGpvYikgPT4gPFNpbmdsZURhc2hib2FyZEpvYiBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtqb2IudGl0bGV9IFxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFueU5hbWU9e3RoaXMuc3RhdGUuY29tcGFueU5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmVhPXtqb2IuYXJlYX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRfZGF0ZT17am9iLmNyZWF0ZWRfZGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtqb2IuZGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlcmllbmNlPXtqb2IuZXhwZXJpZW5jZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXJzPXtqb2IuaG91cnN9XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbj17am9iLmxvY2F0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGVkX2J5X2NvbXBhbnk9e2pvYi5wb3N0ZWRfYnlfY29tcGFueX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbGFyeT17am9iLnNhbGFyeX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNsdWc9e2pvYi5zbHVnfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e2pvYi5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJDb21wYW5pZXM9e3RoaXMuc3RhdGUudXNlckNvbXBhbmllc31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+KSA6IDxwPm5vPC9wPn1cbiAgICAgICAgICAgICAgICA8L3NlY3Rpb24+ICAgXG4gICAgICAgICBcbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb21wYW55OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ29tcGFueSBmcm9tICcuL0NvbXBhbnkuanMnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIsIFJvdXRlLCBTd2l0Y2gsIExpbmssIE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuY2xhc3MgQ29tcGFuaWVzU2VjdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGNvbXBhbmllczogW10sXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgIGNvbnN0IGFsbFVzZXJDb21wYW5pZXNFbmRQb2ludCA9ICcvY29tcGFueS9jb21wYW55Lyc7XG4gICAgICAgIGF4aW9zKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgICAgICB1cmw6IGFsbFVzZXJDb21wYW5pZXNFbmRQb2ludCwgXG4gICAgICAgICAgICBkYXRhOiB7ICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdKV1QgJytsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKVxuICAgICAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbidcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IHsgXG4gICBcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBhbmllczogcmVzcG9uc2UuZGF0YVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBhbiBlcnJvciB5b1wiLCBlcnJvcik7XG4gICAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8c2VjdGlvbiBpZD1cImNvbXBhbmllcy1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImNvbXBhbmllcy1zZWN0aW9uLWlubmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiY3JlYXRlLW5ldy1jb21wYW55LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImNyZWF0ZS1uZXctY29tcGFueS10aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5Zb3VyIENvbXBhbmllczwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJjcmVhdGUtbmV3LWNvbXBhbnktbGluay1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz1cIi9uZXdfY29tcGFueVwiPjxidXR0b24gaWQ9XCJjcmVhdGUtbmV3LWNvbXBhbnktYnV0dG9uXCI+Q3JlYXRlIGEgTmV3IENvbXBhbnk8L2J1dHRvbj48L0xpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5jb21wYW5pZXMgPyB0aGlzLnN0YXRlLmNvbXBhbmllcy5tYXAoKGNvbXBhbnkpID0+IDxDb21wYW55IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFueU5hbWU9e2NvbXBhbnkubmFtZX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYW55SWQ9e2NvbXBhbnkuaWR9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFueURlc2NyaXB0aW9uPXtjb21wYW55LmRlc2NyaXB0aW9ufSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhbnlJbmZvPXtjb21wYW55fSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJDb21wYW5pZXM9e3RoaXMuc3RhdGUuY29tcGFuaWVzfS8+KSA6IDxwPjwvcD59XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICApXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb21wYW5pZXNTZWN0aW9uOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi4vZ2xvYmFsL0hlYWRlci5qcyc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4uL2dsb2JhbC9Gb290ZXIuanMnO1xuaW1wb3J0IENvbXBhbmllc1NlY3Rpb24gZnJvbSAnLi9jb21wYW5pZXMvQ29tcGFuaWVzU2VjdGlvbi5qcyc7XG5pbXBvcnQgSm9ic1NlY3Rpb24gZnJvbSAnLi9qb2JzL0pvYnNTZWN0aW9uLmpzJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5jbGFzcyBFbXBsb3llckRhc2hib2FyZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7IFxuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlTG9nT3V0ID0gdGhpcy5oYW5kbGVMb2dPdXQuYmluZCh0aGlzKTtcblxuICAgICAgICBjb25zdCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpO1xuICAgICAgICBjb25zdCBlbWFpbCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdlbWFpbCcpO1xuXG4gICAgICAgIGNvbnN0IGZpcnN0X25hbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmlyc3RfbmFtZScpO1xuICAgICAgICBjb25zdCBsYXN0X25hbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFzdF9uYW1lJyk7XG5cbiAgICAgICAgdGhpcy5oYW5kbGVGaXJzdE5hbWVDaGFuZ2UgPSB0aGlzLmhhbmRsZUZpcnN0TmFtZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUxhc3ROYW1lQ2hhbmdlID0gdGhpcy5oYW5kbGVMYXN0TmFtZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUVtYWlsQ2hhbmdlID0gdGhpcy5oYW5kbGVFbWFpbENoYW5nZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnN1Ym1pdFByb2ZpbGVDaGFuZ2UgPSB0aGlzLnN1Ym1pdFByb2ZpbGVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlZGlyZWN0VG9Ib21lOiBmYWxzZSxcbiAgICAgICAgICAgIGZpcnN0X25hbWU6IGZpcnN0X25hbWUsXG4gICAgICAgICAgICBsYXN0X25hbWU6IGxhc3RfbmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgICAgICAgIHRva2VuOiB0b2tlbixcbiAgICAgICAgICAgIHJldHVybmVkUmVzcG9uc2U6IG51bGwsXG4gICAgICAgICAgICBzYXZlQ2hhbmdlczogZmFsc2UsXG4gICAgICAgICAgICBwazogbnVsbCxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcblxuICAgICAgICBjb25zdCBnZXRVc2VyRGF0YUVuZHBvaW50ID0gJy9hdXRoZW50aWNhdGUvY3VycmVudF91c2VyLyc7XG4gICAgICAgIGF4aW9zLmRlZmF1bHRzLnhzcmZDb29raWVOYW1lID0gJ2NzcmZ0b2tlbic7XG4gICAgICAgIGF4aW9zLmRlZmF1bHRzLnhzcmZIZWFkZXJOYW1lID0gJ1gtQ1NSRlRva2VuJztcbiAgICAgICAgY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKTtcbiAgICAgICAgYXhpb3Moe1xuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgICAgIHVybDogZ2V0VXNlckRhdGFFbmRwb2ludCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdKV1QgJysgdG9rZW5cbiAgICAgICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCByZXNwb25zZSA9PiB7IFxuICAgICAgICAgICAgY29uc29sZS5sb2coJyBjb21wb25lbnRXaWxsTW91bnQsIGF1dGhlbnRpY2F0ZS9jdXJyZW50X3VzZXIgcmVzcG9uc2U6JywgcmVzcG9uc2UuZGF0YSlcblxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybmVkUmVzcG9uc2U6IHJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0X25hbWU6IHJlc3BvbnNlLmRhdGEuZmlyc3RfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdF9uYW1lOiByZXNwb25zZS5kYXRhLmxhc3RfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW46IHJlc3BvbnNlLmRhdGEudG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIHBrOiByZXNwb25zZS5kYXRhLnBrLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdmaXJzdF9uYW1lJywgcmVzcG9uc2UuZGF0YS5maXJzdF9uYW1lKTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGFzdF9uYW1lJywgcmVzcG9uc2UuZGF0YS5sYXN0X25hbWUpO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbicsIHJlc3BvbnNlLmRhdGEudG9rZW4pO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwaycsIHJlc3BvbnNlLmRhdGEucGspO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbklzVmFsaWQnLCB0cnVlKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBhbiBlcnJvciB5b1wiLCBlcnJvcik7XG5cbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFRvSG9tZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICB9KVxuICAgIH1cblxuICAgIGhhbmRsZUZpcnN0TmFtZUNoYW5nZShlKSB7XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBmaXJzdF9uYW1lOiBlLnRhcmdldC52YWx1ZSxcbiAgICAgICAgICAgIHNhdmVDaGFuZ2VzOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgIH1cblxuICAgIGhhbmRsZUxhc3ROYW1lQ2hhbmdlKGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsYXN0X25hbWU6IGUudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgc2F2ZUNoYW5nZXM6IHRydWVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBoYW5kbGVFbWFpbENoYW5nZShlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZW1haWw6IGUudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgc2F2ZUNoYW5nZXM6IHRydWVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBoYW5kbGVMb2dPdXQoKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHJlZGlyZWN0VG9Ib21lOiB0cnVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3VibWl0UHJvZmlsZUNoYW5nZShlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBjb25zb2xlLmxvZygnc3VibWl0dGluZyBwcm9maWxlIGNoYW5nZXMnKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZVByb2ZpbGVVcmwgPSBgL2F1dGhlbnRpY2F0ZS91c2Vycy8ke3RoaXMuc3RhdGUucGt9L2A7XG5cbiAgICAgICAgYXhpb3Moe1xuICAgICAgICAgICAgbWV0aG9kOiAncHV0JyxcbiAgICAgICAgICAgIHVybDogdXBkYXRlUHJvZmlsZVVybCxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBmaXJzdF9uYW1lOiB0aGlzLnN0YXRlLmZpcnN0X25hbWUsXG4gICAgICAgICAgICAgICAgbGFzdF9uYW1lOiB0aGlzLnN0YXRlLmxhc3RfbmFtZSxcbiAgICAgICAgICAgICAgICBlbWFpbDogdGhpcy5zdGF0ZS5lbWFpbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdKV1QgJysgdG9rZW5cbiAgICAgICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCByZXNwb25zZSA9PiB7IFxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgcmV0dXJuZWRSZXNwb25zZTogcmVzcG9uc2VcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RfbmFtZTogcmVzcG9uc2UuZGF0YS5maXJzdF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICBsYXN0X25hbWU6IHJlc3BvbnNlLmRhdGEubGFzdF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogcmVzcG9uc2UuZGF0YS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW46IHJlc3BvbnNlLmRhdGEudG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIHBrOiByZXNwb25zZS5kYXRhLnBrLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdmaXJzdF9uYW1lJywgcmVzcG9uc2UuZGF0YS5maXJzdF9uYW1lKTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGFzdF9uYW1lJywgcmVzcG9uc2UuZGF0YS5sYXN0X25hbWUpO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdlbWFpbCcsIHJlc3BvbnNlLmRhdGEuZW1haWwpO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbicsIHJlc3BvbnNlLmRhdGEudG9rZW4pO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwaycsIHJlc3BvbnNlLmRhdGEucGspO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbklzVmFsaWQnLCB0cnVlKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBhbiBlcnJvciB5b1wiLCBlcnJvcik7XG5cbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFRvSG9tZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICB9KVxuXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5yZWRpcmVjdFRvSG9tZSkge1xuICAgICAgICAgICAgcmV0dXJuIDxSZWRpcmVjdCB0bz0nLycvPlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8SGVhZGVyLz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImVtcGxveWVyLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJlbXBsb3llci1pbm5lci13cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwibG9nb3V0XCI+PGJ1dHRvbiBpZD1cImxvZ291dC1idXR0b25cIiBvbkNsaWNrPXt0aGlzLmhhbmRsZUxvZ091dH0+TG9nb3V0PC9idXR0b24+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gaWQ9XCJwcm9maWxlLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cInByb2ZpbGUtc2VjdGlvbi1pbm5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPlByb2ZpbGU8L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuc3VibWl0UHJvZmlsZUNoYW5nZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwicHJvZmlsZS1hdHRyaWJ1dGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9maWxlLXNlY3Rpb24tbGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkZpcnN0IE5hbWU6PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9maWxlLXNlY3Rpb24tdmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB2YWx1ZT17IHRoaXMuc3RhdGUuZmlyc3RfbmFtZSB9IG9uQ2hhbmdlPXsgdGhpcy5oYW5kbGVGaXJzdE5hbWVDaGFuZ2UgIH0vPiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInByb2ZpbGUtYXR0cmlidXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvZmlsZS1zZWN0aW9uLWxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5TdXJuYW1lOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvZmlsZS1zZWN0aW9uLXZhbHVlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUubGFzdF9uYW1lfSBvbkNoYW5nZT17IHRoaXMuaGFuZGxlTGFzdE5hbWVDaGFuZ2UgfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJwcm9maWxlLWF0dHJpYnV0ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2ZpbGUtc2VjdGlvbi1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RW1haWw6PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9maWxlLXNlY3Rpb24tdmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB2YWx1ZT17dGhpcy5zdGF0ZS5lbWFpbH0gb25DaGFuZ2U9eyB0aGlzLmhhbmRsZUVtYWlsQ2hhbmdlIH0vPiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zYXZlQ2hhbmdlcyA9PSB0cnVlICYmIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGlkPVwicHJvZmlsZS1zYXZlLWNoYW5nZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdzdWJtaXQnLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q29tcGFuaWVzU2VjdGlvbi8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxGb290ZXIvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKVxuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxufVxuXG5cblxuZXhwb3J0IGRlZmF1bHQgRW1wbG95ZXJEYXNoYm9hcmQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuLi9nbG9iYWwvSGVhZGVyLmpzJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi4vZ2xvYmFsL0Zvb3Rlci5qcyc7XG5pbXBvcnQgSm9ic1BhZ2UgZnJvbSAnLi4vam9icy9Kb2JzUGFnZS5qcyc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5cbmNsYXNzIEVtcGxveWVlRGFzaGJvYXJkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHsgXG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncmVzcG9uc2VUb2tlbicpO1xuICAgICAgICBjb25zdCBlbWFpbCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdyZXNwb25zZUVtYWlsJyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZpcnN0TmFtZTogdGhpcy5wcm9wcy5maXJzdF9uYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IHRoaXMucHJvcHMubGFzdF9uYW1lLFxuICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxuICAgICAgICAgICAgdG9rZW46IHRva2VuLFxuXG4gICAgICAgIH1cbiAgICB9XG5cbiBcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPEhlYWRlci8+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImVtcGxveWVyLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxoMT5FbXBsb3llZSBEYXNoYm9hcmQ8L2gxPlxuICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5Qcm9maWxlOjwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5GaXJzdG5hbWU6IHt0aGlzLnN0YXRlLmZpcnN0TmFtZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5TdXJuYW1lOiB7dGhpcy5zdGF0ZS5sYXN0TmFtZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5FbWFpbDoge3RoaXMuc3RhdGUuZW1haWx9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+VG9rZW46IHt0aGlzLnN0YXRlLnRva2VufSA8L3A+XG5cbiAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPEZvb3Rlci8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRW1wbG95ZWVEYXNoYm9hcmQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuLi9nbG9iYWwvSGVhZGVyLmpzJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi4vZ2xvYmFsL0Zvb3Rlci5qcyc7XG5pbXBvcnQgSm9ic1BhZ2UgZnJvbSAnLi4vam9icy9Kb2JzUGFnZS5qcyc7XG5pbXBvcnQgTG9naW4gZnJvbSAnLi4vZ2xvYmFsL0xvZ2luLmpzJztcbmltcG9ydCBSZWdpc3RlciBmcm9tICcuLi9nbG9iYWwvUmVnaXN0ZXIuanMnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuY2xhc3MgTXlBY2NvdW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XG4gICAgICAgIHRoaXMuc2hvd0xvZ2luID0gdGhpcy5zaG93TG9naW4uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zaG93UmVnaXN0ZXIgPSB0aGlzLnNob3dSZWdpc3Rlci5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB0b2tlbjogdG9rZW4sXG4gICAgICAgICAgICBzaG93VGFiOiBcImxvZ2luXCIsXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaG93TG9naW4oKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHNob3dUYWI6ICdsb2dpbicsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2hvd2xvZ2luJyk7XG5cbiAgICB9XG5cbiAgICBzaG93UmVnaXN0ZXIoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2hvd1RhYjogJ3JlZ2lzdGVyJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zb2xlLmxvZygnc2hvd1JlZ2lzdGVyJyk7XG5cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxIZWFkZXIvPlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJteS1hY2NvdW50LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwibG9naW4tcmVnaXN0ZXItdGFic1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsgdGhpcy5zaG93TG9naW4gfSBjbGFzc05hbWU9XCJhY2NvdW50LXRhYlwiIGlkPVwibG9naW4tdGFiXCI+PGgyPkxvZ2luPC9oMj48L2Rpdj48ZGl2IG9uQ2xpY2s9eyB0aGlzLnNob3dSZWdpc3RlciB9IGNsYXNzTmFtZT1cImFjY291bnQtdGFiXCIgaWQ9XCJyZWdpc3Rlci10YWJcIj48aDI+UmVnaXN0ZXI8L2gyPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuc2hvd1RhYiA9PSBcImxvZ2luXCIgPyA8TG9naW4vPiA6IDxSZWdpc3Rlci8+fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIDxGb290ZXIvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcblxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTXlBY2NvdW50OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9IZWFkZXIuanMnO1xuaW1wb3J0IEZvb3RlciBmcm9tICcuL0Zvb3Rlci5qcyc7XG5pbXBvcnQgSm9ic1BhZ2UgZnJvbSAnLi4vam9icy9Kb2JzUGFnZS5qcyc7XG5cbmZ1bmN0aW9uIENvbnRhY3QocHJvcHMpIHtcblxuICAgIGNvbnNvbGUubG9nKHByb3BzKTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8SGVhZGVyPlxuICAgICAgICAgICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICAgICAgPC9IZWFkZXI+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImNvbnRhY3Qtb3V0ZXItd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiY29udGFjdC1pbm5lci13cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiY29udGFjdC10aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5Db250YWN0PC9oMT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+QWRkaW5nIGEgam9iIGxpc3Rpbmc8L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlRvIGFkZCBhIGpvYiBwb3N0IHRvIHRoZSBzaXRlLCBwbGVhc2UgcmVnaXN0ZXIgZm9yIGEgbmV3IGFjY291bnQgYnkgaGl0dGluZyB0aGUgcmVnaXN0ZXIvbG9naW4gYnV0dG9uPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkdldCBzdGFydGVkIGJ5IGNyZWF0aW5nIGEgbmV3IGNvbXBhbnkuIFRoaXMgYWxsb3dzIHlvdSB0byBjcmVhdGUgbXVsdGlwbGUgam9iIHBvc3RzIGZvciBlYWNoIGNvbXBhbnksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZS11c2luZyB0aGUgc2FtZSBjb21wYW55IGRldGFpbHM8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+QWxsIGZpZWxkcyBzaG91bGQgYmUgY29tcGxldGVkIGluY2x1ZGluZzo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHA+Um9sZSBiZWluZyBhZHZlcnRpc2VkPC9wPjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48cD5UYWdsaW5lICgxIHNob3J0IHNlbnRlbmNlIGRpc3BsYXllZCBvbiBqb2IgbGlzdGluZyBwYWdlKTwvcD48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHA+SG91cnM6IGZ1bGwtdGltZSBvciBwYXJ0LXRpbWU8L3A+PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxwPkFyZWE6IEZyb250LWVuZCwgRnVsbC1zdGFjaywgRGVzaWduZXIgZXRjPC9wPjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48cD5Mb2NhdGlvbjwvcD48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHA+U2FsYXJ5PC9wPjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48cD5GdWxsIGpvYiBkZXNjcmlwdGlvbiAtIHBsZWFzZSBtYWtlIHRoaXMgYXMgYWNjdXJhdGUgYXMgcG9zc2libGU8L3A+PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5BZGRpdGlvbmFsIG5vdGVzPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5XZSdyZSBoYXBweSB0byBwb3N0IGludGVybnNoaXBzLCBidXQgdGhlc2UgbXVzdCBiZSBwYWlkIGludGVybnNoaXBzLiBBbnkgdW5wYWlkIGludGVyc2hpcHMgd2lsbCBiZSByZW1vdmVkLjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Zb3UncmUgYWxzbyB3ZWxjb21lIHRvIHBvc3QgY29udHJhY3QvZnJlZWxhbmNlIHByb2plY3RzLjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QbGVhc2UgcmVtZW1iZXIgdG8gaW5jbHVkZSBkZXRhaWxzIG9mIGhvdyB0byBhcHBseSBmb3IgdGhlIHBvc3QuPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJjb250YWN0LWRldGFpbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+Q29udGFjdCBVczwvaDI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RmluZCB1cyBvbiB0d2l0dGVyOiA8YSBocmVmPVwiaHR0cHM6Ly90d2l0dGVyLmNvbS9uZXh0c3RlcF9vbmxpbmVcIj48aSBjbGFzcz1cImZhYiBmYS10d2l0dGVyIHR3aXR0ZXJcIj48L2k+QG5leHRzdGVwX29ubGluZTwvYT48L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+UmVhY2ggb3V0IGJ5IGVtYWlsOiBtYXJpbHluQHRoZW5leHRzdGVwLmlvPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxGb290ZXIvPlxuXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgXG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRhY3Q7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL0hlYWRlci5qcyc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vRm9vdGVyLmpzJztcbmltcG9ydCBKb2JzUGFnZSBmcm9tICcuLi9qb2JzL0pvYnNQYWdlLmpzJztcblxuY2xhc3MgQWJvdXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPEhlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICAgICAgPC9IZWFkZXI+XG4gICAgICAgICAgICAgICAgPGgxPkFib3V0PC9oMT5cblxuICAgICAgICAgICAgICAgIDxGb290ZXIvPlxuXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9ICAgICBcbn1cblxuZXhwb3J0IGRlZmF1bHQgQWJvdXQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL0hlYWRlci5qcyc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vRm9vdGVyLmpzJztcbmltcG9ydCBKb2JzUGFnZSBmcm9tICcuLi9qb2JzL0pvYnNQYWdlLmpzJztcblxuY2xhc3MgSG9tZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8SGVhZGVyPlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgICAgICA8L0hlYWRlcj5cbiAgICAgICAgICAgICAgICA8Sm9ic1BhZ2UvPlxuXG4gICAgICAgICAgICAgICAgPEZvb3Rlci8+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH0gICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCBIb21lOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgRWRpdG9yLCBFZGl0b3JTdGF0ZSwgUmljaFV0aWxzLCBjb252ZXJ0VG9SYXcsIGNvbnZlcnRGcm9tUmF3IH0gZnJvbSAnZHJhZnQtanMnO1xuaW1wb3J0IHtzdGF0ZVRvSFRNTH0gZnJvbSAnZHJhZnQtanMtZXhwb3J0LWh0bWwnO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuLi8uLi9nbG9iYWwvSGVhZGVyLmpzJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi4vLi4vZ2xvYmFsL0Zvb3Rlci5qcyc7XG5cbmF4aW9zLmRlZmF1bHRzLnhzcmZDb29raWVOYW1lID0gJ2NzcmZ0b2tlbidcbmF4aW9zLmRlZmF1bHRzLnhzcmZIZWFkZXJOYW1lID0gJ1gtQ1NSRlRva2VuJ1xuXG5jbGFzcyBWaWV3Sm9iUGFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKTtcblxuICAgICAgICB0aGlzLmVuYWJsZUVkaXRNb2RlID0gdGhpcy5lbmFibGVFZGl0TW9kZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmVuYWJsZVZpZXdNb2RlID0gdGhpcy5lbmFibGVWaWV3TW9kZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmRlbGV0ZUpvYiA9IHRoaXMuZGVsZXRlSm9iLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc3VibWl0Sm9iQ2hhbmdlcyA9IHRoaXMuc3VibWl0Sm9iQ2hhbmdlcy5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMudXBkYXRlSm9iQXJlYSA9IHRoaXMudXBkYXRlSm9iQXJlYS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnVwZGF0ZUpvYkV4cGVyaWVuY2UgPSAgdGhpcy51cGRhdGVKb2JFeHBlcmllbmNlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlSm9iSG91cnMgPSB0aGlzLnVwZGF0ZUpvYkhvdXJzLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlSm9iTG9jYXRpb24gPSB0aGlzLnVwZGF0ZUpvYkxvY2F0aW9uLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlSm9iU2FsYXJ5ID0gdGhpcy51cGRhdGVKb2JTYWxhcnkuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy51cGRhdGVKb2JTbHVnID0gdGhpcy51cGRhdGVKb2JTbHVnLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlSm9iVGl0bGUgPSB0aGlzLnVwZGF0ZUpvYlRpdGxlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlUG9zdGVkQnlDb21wYW55ID0gdGhpcy51cGRhdGVQb3N0ZWRCeUNvbXBhbnkuYmluZCh0aGlzKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlS2V5Q29tbWFuZCA9IHRoaXMuaGFuZGxlS2V5Q29tbWFuZC5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMub25VbmRlcmxpbmVDbGljayA9IHRoaXMub25VbmRlcmxpbmVDbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uQm9sZENsaWNrID0gdGhpcy5vbkJvbGRDbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uSXRhbGljQ2xpY2sgPSB0aGlzLm9uSXRhbGljQ2xpY2suYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLm9uTWVkaXVtQ2xpY2sgPSB0aGlzLm9uTWVkaXVtQ2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbkxhcmdlQ2xpY2sgPSB0aGlzLm9uTGFyZ2VDbGljay5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMub25MZWZ0QWxpZ25DbGljayA9IHRoaXMub25MZWZ0QWxpZ25DbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uUmlnaHRBbGlnbkNsaWNrID0gdGhpcy5vblJpZ2h0QWxpZ25DbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uSnVzdGlmeUNsaWNrID0gdGhpcy5vbkp1c3RpZnlDbGljay5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMub25PcmRlcmVkTGlzdENsaWNrID0gdGhpcy5vbk9yZGVyZWRMaXN0Q2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vblVub3JkZXJlZExpc3RDbGljayA9IHRoaXMub25PcmRlcmVkTGlzdENsaWNrLmJpbmQodGhpcyk7XG5cbiAgICAgICAgY29uc3QgdXNlckNvbXBhbmllcyA9IHRoaXMucHJvcHMubG9jYXRpb24uc3RhdGUudXNlckNvbXBhbmllcztcbiAgICAgICAgY29uc3QgY29tcGFueU5hbWUgPSB0aGlzLnByb3BzLmxvY2F0aW9uLnN0YXRlLmNvbXBhbnlOYW1lO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgaWQ6IHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLmlkLFxuICAgICAgICAgIHRva2VuOiB0b2tlbixcbiAgICAgICAgICB2aWV3TW9kZTogdHJ1ZSxcbiAgICAgICAgICBlZGl0TW9kZTogZmFsc2UsXG4gICAgICAgICAgam9iSW5mbzoge30sXG4gICAgICAgICAgam9iQXJlYTogXCJcIixcbiAgICAgICAgICBqb2JFeHBlcmllbmNlOiBcIlwiLFxuICAgICAgICAgIGpvYkhvdXJzOiBcIlwiLFxuICAgICAgICAgIGpvYkxvY2F0aW9uOiBcIlwiLFxuICAgICAgICAgIGpvYlNhbGFyeTogXCJcIixcbiAgICAgICAgICBqb2JTbHVnOiBcIlwiLFxuICAgICAgICAgIGpvYlRpdGxlOiBcIlwiLFxuICAgICAgICAgIHBvc3RlZF9ieV9jb21wYW55OiBcIlwiLFxuICAgICAgICAgIHVzZXJDb21wYW5pZXM6IHVzZXJDb21wYW5pZXMsXG4gICAgICAgICAgY29tcGFueU5hbWU6IGNvbXBhbnlOYW1lXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7IFxuICAgICAgICBcbiAgICAgICAgY29uc3QgZXhpc3RpbmdKb2JFbmRQb2ludCA9IGAvam9iL2pvYi8ke3RoaXMuc3RhdGUuaWR9L2A7XG4gICAgICAgIGF4aW9zLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydBdXRob3JpemF0aW9uJ10gPSAnSldUICcrbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XG4gICAgICAgIGF4aW9zLmRlZmF1bHRzLmhlYWRlcnMucG9zdFsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJztcblxuICAgICAgICBheGlvcyh7XG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICAgICAgdXJsOiBleGlzdGluZ0pvYkVuZFBvaW50LCBcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdKV1QgJytsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICAgIH0sICBcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCByZXNwb25zZSA9PiB7IFxuXG4gICAgICAgXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBnaXZlbkNvbnRlbnQgPSByZXNwb25zZS5kYXRhLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZENvbnRlbnQgPSBKU09OLnBhcnNlKGdpdmVuQ29udGVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW1tdXRhYmxlQ29udGVudCA9IGNvbnZlcnRGcm9tUmF3KHBhcnNlZENvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGpvYkluZm86IHJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvclN0YXRlOiBFZGl0b3JTdGF0ZS5jcmVhdGVXaXRoQ29udGVudChpbW11dGFibGVDb250ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgam9iQXJlYTogcmVzcG9uc2UuZGF0YS5hcmVhLFxuICAgICAgICAgICAgICAgICAgICBqb2JFeHBlcmllbmNlOiByZXNwb25zZS5kYXRhLmV4cGVyaWVuY2UsXG4gICAgICAgICAgICAgICAgICAgIGpvYkhvdXJzOiByZXNwb25zZS5kYXRhLmhvdXJzLFxuICAgICAgICAgICAgICAgICAgICBqb2JMb2NhdGlvbjogcmVzcG9uc2UuZGF0YS5sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgam9iU2FsYXJ5OiByZXNwb25zZS5kYXRhLnNhbGFyeSxcbiAgICAgICAgICAgICAgICAgICAgam9iU2x1ZzogcmVzcG9uc2UuZGF0YS5zbHVnLFxuICAgICAgICAgICAgICAgICAgICBqb2JUaXRsZTogcmVzcG9uc2UuZGF0YS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zdGVkX2J5X2NvbXBhbnk6IHJlc3BvbnNlLmRhdGEucG9zdGVkX2J5X2NvbXBhbnksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Jlc3BvbnNlIGZyb20gY29tcGFueScsIHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAudGhlbihcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50U3RhdGUgPSB0aGlzLnN0YXRlLmVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaHRtbCA9IHN0YXRlVG9IVE1MKGNvbnRlbnRTdGF0ZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0SHRtbCA9IHtfX2h0bWw6IGh0bWx9XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGh0bWw6IGh0bWwsXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dEh0bWw6IG91dHB1dEh0bWwsXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gIFxuICAgICAgICApXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRoaXMgaXMgYW4gZXJyb3IgeW9cIiwgZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uQ2hhbmdlKGVkaXRvclN0YXRlKSB7XG4gICAgXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZWRpdG9yU3RhdGU6IGVkaXRvclN0YXRlLFxuICAgICAgICAgICAgc3RyaW5naWZpZWRDb250ZW50OiBKU09OLnN0cmluZ2lmeShjb252ZXJ0VG9SYXcoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSkpXG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICBjb25zdCBjb250ZW50U3RhdGUgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgICAgICBjb25zb2xlLmxvZygnY29udGVudCBzdGF0ZScsIGNvbnZlcnRUb1Jhdyhjb250ZW50U3RhdGUpKTtcbiAgICAgIH1cblxuICAgICAgZW5hYmxlRWRpdE1vZGUoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAgICAge1xuICAgICAgICAgICAgdmlld01vZGU6IGZhbHNlLFxuICAgICAgICAgICAgZWRpdE1vZGU6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG4gIFxuICAgICAgZW5hYmxlVmlld01vZGUoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAgICAge1xuICAgICAgICAgICAgdmlld01vZGU6IHRydWUsXG4gICAgICAgICAgICBlZGl0TW9kZTogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZUpvYkFyZWEoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGpvYkFyZWE6IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgXG4gICAgdXBkYXRlSm9iRXhwZXJpZW5jZShlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgam9iRXhwZXJpZW5jZTogZS50YXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG4gICAgfVxuICBcbiAgICB1cGRhdGVKb2JIb3VycyhlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgam9iSG91cnM6IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgXG4gICAgdXBkYXRlSm9iTG9jYXRpb24oZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGpvYkxvY2F0aW9uOiBlLnRhcmdldC52YWx1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gIFxuICAgIHVwZGF0ZUpvYlNhbGFyeShlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgam9iU2FsYXJ5OiBlLnRhcmdldC52YWx1ZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVKb2JTbHVnKGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBqb2JTbHVnOiBlLnRhcmdldC52YWx1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gIFxuICAgIHVwZGF0ZUpvYlRpdGxlKGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBqb2JUaXRsZTogZS50YXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG4gICAgfVxuICBcbiAgICB1cGRhdGVQb3N0ZWRCeUNvbXBhbnkoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHBvc3RlZF9ieV9jb21wYW55OiBlLnRhcmdldC52YWx1ZVxuICAgICAgICB9KVxuICAgIH1cbiAgXG4gIFxuICAgIGhhbmRsZUtleUNvbW1hbmQoY29tbWFuZCkge1xuICAgICAgICBjb25zdCBuZXdTdGF0ZSA9IFJpY2hVdGlscy5oYW5kbGVLZXlDb21tYW5kKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsIGNvbW1hbmQpO1xuICBcbiAgICAgICAgaWYgKCBuZXdTdGF0ZSApIHtcbiAgICAgICAgICB0aGlzLm9uQ2hhbmdlKG5ld1N0YXRlKTtcbiAgICAgICAgICByZXR1cm4gJ2hhbmRsZWQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnbm90LWhhbmRsZWQnO1xuICAgIH1cbiAgXG4gICAgb25VbmRlcmxpbmVDbGljaygpIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZShSaWNoVXRpbHMudG9nZ2xlSW5saW5lU3R5bGUodGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZSwgJ1VOREVSTElORScpKTtcbiAgICB9XG4gIFxuICAgIG9uQm9sZENsaWNrKCkge1xuICAgICAgdGhpcy5vbkNoYW5nZShSaWNoVXRpbHMudG9nZ2xlSW5saW5lU3R5bGUodGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZSwgJ0JPTEQnKSk7IFxuICAgIH1cbiAgXG4gICAgb25JdGFsaWNDbGljaygpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdJVEFMSUMnKSk7IFxuICAgIH1cbiAgXG4gICAgb25NZWRpdW1DbGljaygpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdVTkRFUkxJTkUnKSk7XG4gICAgfVxuICBcbiAgICBvbkxhcmdlQ2xpY2soKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKFJpY2hVdGlscy50b2dnbGVJbmxpbmVTdHlsZSh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLCAnVU5ERVJMSU5FJykpO1xuICAgIH1cbiAgXG4gICAgb25MZWZ0QWxpZ25DbGljaygpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdVTkRFUkxJTkUnKSk7XG4gICAgfVxuICBcbiAgICBvblJpZ2h0QWxpZ25DbGljaygpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdVTkRFUkxJTkUnKSk7XG4gICAgfVxuICBcbiAgICBvbkp1c3RpZnlDbGljaygpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdVTkRFUkxJTkUnKSk7XG4gICAgfVxuICBcbiAgICBvbk9yZGVyZWRMaXN0Q2xpY2soKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKFJpY2hVdGlscy50b2dnbGVJbmxpbmVTdHlsZSh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLCAnVU5ERVJMSU5FJykpO1xuICAgIH1cbiAgXG4gICAgb25Vbm9yZGVyZWRMaXN0Q2xpY2soKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKFJpY2hVdGlscy50b2dnbGVJbmxpbmVTdHlsZSh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLCAnVU5ERVJMSU5FJykpO1xuICAgIH1cblxuICAgIGRlbGV0ZUpvYihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdKb2JFbmRQb2ludCA9IGAvam9iL2pvYi8ke3RoaXMuc3RhdGUuaWR9L2A7XG4gICAgICAgIGF4aW9zLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydBdXRob3JpemF0aW9uJ10gPSAnSldUICcrbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJylcbiAgICAgICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5wb3N0WydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuICAgIFxuICAgICAgICBheGlvcyh7XG4gICAgICAgICAgICBtZXRob2Q6ICdkZWxldGUnLFxuICAgICAgICAgICAgdXJsOiBleGlzdGluZ0pvYkVuZFBvaW50LFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0pXVCAnK2xvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpLFxuICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICByZXNwb25zZVR5cGU6ICdqc29uJ1xuICAgICAgICB9KVxuICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4geyBcbiAgICBcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4gKCAoKSA9PiB7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgIClcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBhbiBlcnJvciB5b1wiLCBlcnJvcik7XG4gICAgICAgICAgfSlcbiAgICB9XG4gICAgXG4gICAgICAgIHN1Ym1pdEpvYkNoYW5nZXMoZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBcbiAgICAgICAgICBjb25zdCBleGlzdGluZ0pvYkVuZFBvaW50ID0gYC9qb2Ivam9iLyR7dGhpcy5zdGF0ZS5pZH0vYDtcbiAgICAgICAgICBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnQXV0aG9yaXphdGlvbiddID0gJ0pXVCAnK2xvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpXG4gICAgICAgICAgY29uc29sZS5sb2coJ0JlYXJlciAnK2xvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpKVxuICAgICAgICAgIGF4aW9zLmRlZmF1bHRzLmhlYWRlcnMucG9zdFsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJztcblxuICAgICAgICAgIGNvbnN0IHN0cmluZ2lmaWVkQ29udGVudCA9IEpTT04uc3RyaW5naWZ5KGNvbnZlcnRUb1Jhdyh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkpKTtcbiAgICBcbiAgICAgICAgICBheGlvcyh7XG4gICAgICAgICAgICAgIG1ldGhvZDogJ3B1dCcsXG4gICAgICAgICAgICAgIHVybDogZXhpc3RpbmdKb2JFbmRQb2ludCwgXG4gICAgICAgICAgICAgIGRhdGE6IHsgIFxuICAgICAgICAgICAgICAgICAgYXJlYTogdGhpcy5zdGF0ZS5qb2JBcmVhLFxuICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZ2lmaWVkQ29udGVudCxcbiAgICAgICAgICAgICAgICAgIGV4cGVyaWVuY2U6IHRoaXMuc3RhdGUuam9iRXhwZXJpZW5jZSxcbiAgICAgICAgICAgICAgICAgIGhvdXJzOiB0aGlzLnN0YXRlLmpvYkhvdXJzLFxuICAgICAgICAgICAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUuam9iTG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICBzYWxhcnk6IHRoaXMuc3RhdGUuam9iU2FsYXJ5LFxuICAgICAgICAgICAgICAgICAgc2x1ZzogdGhpcy5zdGF0ZS5qb2JTbHVnLFxuICAgICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMuc3RhdGUuam9iVGl0bGUsXG4gICAgICAgICAgICAgICAgICBwb3N0ZWRfYnlfY29tcGFueTogcGFyc2VJbnQodGhpcy5zdGF0ZS5wb3N0ZWRfYnlfY29tcGFueSksXG5cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnSldUICcrbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyksXG4gICAgICAgICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nXG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4geyBcbiAgICAgXG4gICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMSkge1xuICAgIFxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInRoaXMgaXMgYW4gZXJyb3IgeW9cIiwgZXJyb3IpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICBcbiAgICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPEhlYWRlci8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJ2aWV3LWpvYi13cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IHRoaXMuc3RhdGUudmlld01vZGUgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImVkaXQtam9iLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItbGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Qb3N0ZWQgQnkgQ29tcGFueTo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItdmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57dGhpcy5zdGF0ZS5jb21wYW55TmFtZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJlZGl0LWpvYi1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtam9iLWxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+Sm9iIFRpdGxlOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWpvYi12YWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt0aGlzLnN0YXRlLmpvYlRpdGxlfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImVkaXQtam9iLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItbGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Kb2IgQXJlYTo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItdmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57dGhpcy5zdGF0ZS5qb2JBcmVhfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImVkaXQtam9iLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItbGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Kb2IgRXhwZXJpZW5jZTo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItdmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57dGhpcy5zdGF0ZS5qb2JFeHBlcmllbmNlfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImVkaXQtam9iLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItbGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Kb2IgSG91cnM6PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtam9iLXZhbHVlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3RoaXMuc3RhdGUuam9iSG91cnN9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZWRpdC1qb2Itc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWpvYi1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkpvYiBMb2NhdGlvbjo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItdmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57dGhpcy5zdGF0ZS5qb2JMb2NhdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJlZGl0LWpvYi1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtam9iLWxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+Sm9iIFNhbGFyeTo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItdmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57dGhpcy5zdGF0ZS5qb2JTYWxhcnl9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZWRpdC1qb2Itc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWpvYi1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkpvYiBTbHVnOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWpvYi12YWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt0aGlzLnN0YXRlLmpvYlNsdWd9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJqb2ItZGVzY3JpcHRpb24tdGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+Sm9iIERlc2NyaXB0aW9uPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYW5nZXJvdXNseVNldElubmVySFRNTD17dGhpcy5zdGF0ZS5vdXRwdXRIdG1sfT48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGlkPVwiZWRpdC1qb2ItYnV0dG9uLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5lbmFibGVFZGl0TW9kZX0gdHlwZT1cImJ1dHRvblwiPkVkaXQgSm9iPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmVkaXRNb2RlICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuc3VibWl0Sm9iQ2hhbmdlc30+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImVkaXQtam9iLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItbGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5DaG9vc2UgY29tcGFueSB0byBsaXN0IGpvYiBmb3I6PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtam9iLWlucHV0LXZhbHVlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD1cImNvbXBhbnktc2VsZWN0XCIgdmFsdWU9e3RoaXMuc3RhdGUucG9zdGVkX2J5X2NvbXBhbnl9IG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZVBvc3RlZEJ5Q29tcGFueX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdGhpcy5zdGF0ZS51c2VyQ29tcGFuaWVzLm1hcCgoY29tcGFueSkgPT4gPG9wdGlvbiB2YWx1ZT17Y29tcGFueS5pZH0+e2NvbXBhbnkubmFtZX0gPC9vcHRpb24+KSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZWRpdC1qb2Itc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWpvYi1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkpvYiBBcmVhOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWpvYi1pbnB1dC12YWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiZWRpdC1qb2ItbW9kYWwtam9iLWFyZWFcIiB2YWx1ZT17dGhpcy5zdGF0ZS5qb2JBcmVhfSBvbkNoYW5nZT17dGhpcy51cGRhdGVKb2JBcmVhfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJlZGl0LWpvYi1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtam9iLWxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RXhwZXJpZW5jZTo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItaW5wdXQtdmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVkaXQtam9iLW1vZGFsLWpvYi1leHBlcmllbmNlXCIgdmFsdWU9e3RoaXMuc3RhdGUuam9iRXhwZXJpZW5jZX0gb25DaGFuZ2U9e3RoaXMudXBkYXRlSm9iRXhwZXJpZW5jZX0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZWRpdC1qb2Itc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWpvYi1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkhvdXJzOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWpvYi1pbnB1dC12YWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlZGl0LWpvYi1tb2RhbC1qb2ItaG91cnNcIiB2YWx1ZT17dGhpcy5zdGF0ZS5qb2JIb3Vyc30gb25DaGFuZ2U9e3RoaXMudXBkYXRlSm9iSG91cnN9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImVkaXQtam9iLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItbGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Mb2NhdGlvbjo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItaW5wdXQtdmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVkaXQtam9iLW1vZGFsLWpvYi1sb2NhdGlvblwiIHZhbHVlPXt0aGlzLnN0YXRlLmpvYkxvY2F0aW9ufSBvbkNoYW5nZT17dGhpcy51cGRhdGVKb2JMb2NhdGlvbn0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZWRpdC1qb2Itc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWpvYi1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNhbGFyeTo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItaW5wdXQtdmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVkaXQtam9iLW1vZGFsLWpvYi1zYWxhcnlcIiB2YWx1ZT17dGhpcy5zdGF0ZS5qb2JTYWxhcnl9IG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZUpvYlNhbGFyeX0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZWRpdC1qb2Itc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWpvYi1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNsdWc6PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtam9iLWlucHV0LXZhbHVlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlZGl0LWpvYi1tb2RhbC1qb2Itc2x1Z1wiIHZhbHVlPXt0aGlzLnN0YXRlLmpvYlNsdWd9IG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZUpvYlNsdWd9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImVkaXQtam9iLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1qb2ItbGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Kb2IgVGl0bGU6PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtam9iLWlucHV0LXZhbHVlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlZGl0LWpvYi1tb2RhbC1qb2ItdGl0bGVcIiB2YWx1ZT17dGhpcy5zdGF0ZS5qb2JUaXRsZX0gb25DaGFuZ2U9e3RoaXMudXBkYXRlSm9iVGl0bGV9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiam9iLWRlc2NyaXB0aW9uLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPkpvYiBEZXNjcmlwdGlvbjwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gaWQ9XCJlZGl0b3ItYnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5vblVuZGVybGluZUNsaWNrfSB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiZWRpdG9yLWJ1dHRvblwiPjxpIGNsYXNzPVwiZmFzIGZhLXVuZGVybGluZVwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMub25Cb2xkQ2xpY2t9IHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJlZGl0b3ItYnV0dG9uXCI+PGkgY2xhc3M9XCJmYXMgZmEtYm9sZFwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMub25JdGFsaWNDbGlja30gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImVkaXRvci1idXR0b25cIj48aSBjbGFzcz1cImZhcyBmYS1pdGFsaWNcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBpZD1cImVkaXQtam9iLWVkaXRvclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxFZGl0b3IgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yU3RhdGU9e3RoaXMuc3RhdGUuZWRpdG9yU3RhdGV9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUtleUNvbW1hbmQ9e3RoaXMuaGFuZGxlS2V5Q29tbWFuZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBpZD1cImVkaXQtam9iLXN1Ym1pdC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGlkPVwiZWRpdC1jYW5jZWwtZGVsZXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5lbmFibGVWaWV3TW9kZX0gaWQ9XCJjYW5jZWwtZWRpdC1jaGFuZ2VzXCI+Q2FuY2VsIENoYW5nZXM8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLmRlbGV0ZUpvYn0gdHlwZT1cImJ1dHRvblwiIGlkPVwiZGVsZXRlLWVkaXRcIj5EZWxldGUgSm9iPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxGb290ZXIvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpZXdKb2JQYWdlOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAncmVhY3QtbW9kYWwnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IEVkaXRvciwgRWRpdG9yU3RhdGUsIFJpY2hVdGlscywgY29udmVydFRvUmF3IH0gZnJvbSAnZHJhZnQtanMnO1xuaW1wb3J0IHsgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi4vLi4vZ2xvYmFsL0hlYWRlci5qcyc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4uLy4uL2dsb2JhbC9Gb290ZXIuanMnO1xuXG5heGlvcy5kZWZhdWx0cy54c3JmQ29va2llTmFtZSA9ICdjc3JmdG9rZW4nXG5heGlvcy5kZWZhdWx0cy54c3JmSGVhZGVyTmFtZSA9ICdYLUNTUkZUb2tlbidcblxuY2xhc3MgTmV3Sm9iUGFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJylcblxuICAgICAgICB0aGlzLnVwZGF0ZUpvYkFyZWEgPSB0aGlzLnVwZGF0ZUpvYkFyZWEuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy51cGRhdGVKb2JFeHBlcmllbmNlID0gIHRoaXMudXBkYXRlSm9iRXhwZXJpZW5jZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnVwZGF0ZUpvYkhvdXJzID0gdGhpcy51cGRhdGVKb2JIb3Vycy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnVwZGF0ZUpvYkxvY2F0aW9uID0gdGhpcy51cGRhdGVKb2JMb2NhdGlvbi5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnVwZGF0ZUpvYlNhbGFyeSA9IHRoaXMudXBkYXRlSm9iU2FsYXJ5LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlSm9iU2x1ZyA9IHRoaXMudXBkYXRlSm9iU2x1Zy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnVwZGF0ZUpvYlRpdGxlID0gdGhpcy51cGRhdGVKb2JUaXRsZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnVwZGF0ZVBvc3RlZEJ5Q29tcGFueSA9IHRoaXMudXBkYXRlUG9zdGVkQnlDb21wYW55LmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5zdWJtaXROZXdKb2IgPSB0aGlzLnN1Ym1pdE5ld0pvYi5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlS2V5Q29tbWFuZCA9IHRoaXMuaGFuZGxlS2V5Q29tbWFuZC5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMub25VbmRlcmxpbmVDbGljayA9IHRoaXMub25VbmRlcmxpbmVDbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uQm9sZENsaWNrID0gdGhpcy5vbkJvbGRDbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uSXRhbGljQ2xpY2sgPSB0aGlzLm9uSXRhbGljQ2xpY2suYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLm9uTWVkaXVtQ2xpY2sgPSB0aGlzLm9uTWVkaXVtQ2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbkxhcmdlQ2xpY2sgPSB0aGlzLm9uTGFyZ2VDbGljay5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMub25MZWZ0QWxpZ25DbGljayA9IHRoaXMub25MZWZ0QWxpZ25DbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uUmlnaHRBbGlnbkNsaWNrID0gdGhpcy5vblJpZ2h0QWxpZ25DbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uSnVzdGlmeUNsaWNrID0gdGhpcy5vbkp1c3RpZnlDbGljay5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMub25PcmRlcmVkTGlzdENsaWNrID0gdGhpcy5vbk9yZGVyZWRMaXN0Q2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vblVub3JkZXJlZExpc3RDbGljayA9IHRoaXMub25PcmRlcmVkTGlzdENsaWNrLmJpbmQodGhpcyk7XG5cbiAgICAgICAgY29uc3QgbGlua3NJbmZvID0gdGhpcy5wcm9wcy5sb2NhdGlvbi5zdGF0ZS5jb21wYW5pZXNGcm9tTGluaztcbiAgICAgICAgY29uc3QgcG9zdGVkX2J5X2NvbXBhbnkgPSB0aGlzLnByb3BzLmxvY2F0aW9uLnN0YXRlLnBvc3RlZF9ieV9jb21wYW55O1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGpvYkFyZWE6IFwiXCIsXG4gICAgICAgICAgICBqb2JFeHBlcmllbmNlOiBcIlwiLFxuICAgICAgICAgICAgam9iSG91cnM6IFwiXCIsXG4gICAgICAgICAgICBqb2JMb2NhdGlvbjogXCJcIixcbiAgICAgICAgICAgIGpvYlNhbGFyeTogXCJcIixcbiAgICAgICAgICAgIGpvYlNsdWc6IFwiXCIsXG4gICAgICAgICAgICBqb2JUaXRsZTogXCJcIixcbiAgICAgICAgICAgIHRva2VuOiB0b2tlbixcbiAgICAgICAgICAgIGVkaXRvclN0YXRlOiBFZGl0b3JTdGF0ZS5jcmVhdGVFbXB0eSgpLFxuICAgICAgICAgICAgYXZhaWxhYmxlQ29tcGFuaWVzOiBsaW5rc0luZm8sXG4gICAgICAgICAgICBwb3N0ZWRfYnlfY29tcGFueTogbGlua3NJbmZvWzBdLmlkLFxuICAgICAgICAgICAgcmVkaXJlY3RUb0Rhc2hib2FyZDogZmFsc2UsXG4gICAgICAgICAgICBmb3JtRXJyb3I6IFwiXCJcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZUpvYkFyZWEoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGpvYkFyZWE6IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZUpvYkV4cGVyaWVuY2UoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGpvYkV4cGVyaWVuY2U6IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZUpvYkhvdXJzKGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBqb2JIb3VyczogZS50YXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlSm9iTG9jYXRpb24oZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGpvYkxvY2F0aW9uOiBlLnRhcmdldC52YWx1ZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVKb2JTYWxhcnkoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGpvYlNhbGFyeTogZS50YXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlSm9iU2x1ZyhlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgam9iU2x1ZzogZS50YXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlSm9iVGl0bGUoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGpvYlRpdGxlOiBlLnRhcmdldC52YWx1ZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVQb3N0ZWRCeUNvbXBhbnkoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHBvc3RlZF9ieV9jb21wYW55OiBlLnRhcmdldC52YWx1ZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIG9uQ2hhbmdlKGVkaXRvclN0YXRlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZWRpdG9yU3RhdGU6IGVkaXRvclN0YXRlLFxuICAgICAgICAgICAgc3RyaW5naWZpZWRDb250ZW50OiBKU09OLnN0cmluZ2lmeShjb252ZXJ0VG9SYXcoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSkpLFxuICAgICAgICAgICAgcGFyc2VkQ29udGVudDogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb252ZXJ0VG9SYXcoIGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkgKSkpXG5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgXG4gICAgICBoYW5kbGVLZXlDb21tYW5kKGNvbW1hbmQpIHtcbiAgICAgICAgICBjb25zdCBuZXdTdGF0ZSA9IFJpY2hVdGlscy5oYW5kbGVLZXlDb21tYW5kKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsIGNvbW1hbmQpO1xuICAgIFxuICAgICAgICAgIGlmICggbmV3U3RhdGUgKSB7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKG5ld1N0YXRlKTtcbiAgICAgICAgICAgIHJldHVybiAnaGFuZGxlZCc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAnbm90LWhhbmRsZWQnO1xuICAgICAgfVxuICAgIFxuICAgICAgb25VbmRlcmxpbmVDbGljaygpIHtcbiAgICAgICAgICB0aGlzLm9uQ2hhbmdlKFJpY2hVdGlscy50b2dnbGVJbmxpbmVTdHlsZSh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLCAnVU5ERVJMSU5FJykpO1xuICAgICAgfVxuICAgIFxuICAgICAgb25Cb2xkQ2xpY2soKSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdCT0xEJykpOyBcbiAgICAgIH1cbiAgICBcbiAgICAgIG9uSXRhbGljQ2xpY2soKSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdJVEFMSUMnKSk7IFxuICAgICAgfVxuICAgIFxuICAgICAgb25NZWRpdW1DbGljaygpIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZShSaWNoVXRpbHMudG9nZ2xlSW5saW5lU3R5bGUodGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZSwgJ1VOREVSTElORScpKTtcbiAgICAgIH1cbiAgICBcbiAgICAgIG9uTGFyZ2VDbGljaygpIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZShSaWNoVXRpbHMudG9nZ2xlSW5saW5lU3R5bGUodGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZSwgJ1VOREVSTElORScpKTtcbiAgICAgIH1cbiAgICBcbiAgICAgIG9uTGVmdEFsaWduQ2xpY2soKSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdVTkRFUkxJTkUnKSk7XG4gICAgICB9XG4gICAgXG4gICAgICBvblJpZ2h0QWxpZ25DbGljaygpIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZShSaWNoVXRpbHMudG9nZ2xlSW5saW5lU3R5bGUodGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZSwgJ1VOREVSTElORScpKTtcbiAgICAgIH1cbiAgICBcbiAgICAgIG9uSnVzdGlmeUNsaWNrKCkge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKFJpY2hVdGlscy50b2dnbGVJbmxpbmVTdHlsZSh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLCAnVU5ERVJMSU5FJykpO1xuICAgICAgfVxuICAgIFxuICAgICAgb25PcmRlcmVkTGlzdENsaWNrKCkge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKFJpY2hVdGlscy50b2dnbGVJbmxpbmVTdHlsZSh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLCAnVU5ERVJMSU5FJykpO1xuICAgICAgfVxuICAgIFxuICAgICAgb25Vbm9yZGVyZWRMaXN0Q2xpY2soKSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdVTkRFUkxJTkUnKSk7XG4gICAgICB9XG5cbiAgICBzdWJtaXROZXdKb2IoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3QgbmV3Sm9iRW5kUG9pbnQgPSAnL2pvYi9qb2IvJztcbiAgICAgICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9ICdKV1QgJytsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKVxuICAgICAgICBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7XG5cbiAgICAgICAgYXhpb3Moe1xuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICB1cmw6IG5ld0pvYkVuZFBvaW50LCBcbiAgICAgICAgICAgIGRhdGE6IHsgIFxuICAgICAgICAgICAgICAgIGFyZWE6IHRoaXMuc3RhdGUuam9iQXJlYSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5zdGF0ZS5zdHJpbmdpZmllZENvbnRlbnQsXG4gICAgICAgICAgICAgICAgZXhwZXJpZW5jZTogdGhpcy5zdGF0ZS5qb2JFeHBlcmllbmNlLFxuICAgICAgICAgICAgICAgIGhvdXJzOiB0aGlzLnN0YXRlLmpvYkhvdXJzLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmpvYkxvY2F0aW9uLFxuICAgICAgICAgICAgICAgIHNhbGFyeTogdGhpcy5zdGF0ZS5qb2JTYWxhcnksXG4gICAgICAgICAgICAgICAgc2x1ZzogdGhpcy5zdGF0ZS5qb2JTbHVnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLnN0YXRlLmpvYlRpdGxlLFxuICAgICAgICAgICAgICAgIHBvc3RlZF9ieV9jb21wYW55OiBwYXJzZUludCh0aGlzLnN0YXRlLnBvc3RlZF9ieV9jb21wYW55KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdKV1QgJytsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCByZXNwb25zZSA9PiB7IFxuICAgXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RUb0Rhc2hib2FyZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0aGlzIGlzIGFuIGVycm9yIHlvXCIsIGVycm9yKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGZvcm1FcnJvcjogZXJyb3JcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KVxuICAgICAgICBcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucmVkaXJlY3RUb0Rhc2hib2FyZCkge1xuICAgICAgICAgICAgcmV0dXJuIDxSZWRpcmVjdCB0bz0nL2VtcGxveWVyX2Rhc2hib2FyZCcvPlxuICAgICAgICB9IGVsc2UgeyBcbiAgXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxIZWFkZXIvPlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJuZXctam9iLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuc3VibWl0TmV3Sm9ifT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJwb3N0LW5ldy1qb2ItdGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+Q3JlYXRlIGEgbmV3IGpvYjwvaDI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm5ldy1qb2Itc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV3LWpvYi1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5DaG9vc2UgY29tcGFueSB0byBsaXN0IGpvYiBmb3I6PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV3LWpvYi1pbnB1dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPVwiY29tcGFueS1zZWxlY3RcIiB2YWx1ZT17dGhpcy5zdGF0ZS5wb3N0ZWRfYnlfY29tcGFueX0gb25DaGFuZ2U9e3RoaXMudXBkYXRlUG9zdGVkQnlDb21wYW55fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdGhpcy5zdGF0ZS5hdmFpbGFibGVDb21wYW5pZXMubWFwKChjb21wYW55KSA9PiA8b3B0aW9uIHZhbHVlPXtjb21wYW55LmlkfT57Y29tcGFueS5uYW1lfSA8L29wdGlvbj4pIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm5ldy1qb2Itc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV3LWpvYi1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Kb2IgQXJlYTo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZXctam9iLWlucHV0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzTmFtZT1cImpvYi10ZXh0LWlucHV0XCIgdmFsdWU9e3RoaXMuc3RhdGUuam9iQXJlYX0gb25DaGFuZ2U9e3RoaXMudXBkYXRlSm9iQXJlYX0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwibmV3LWpvYi1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZXctam9iLWxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkV4cGVyaWVuY2U6PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV3LWpvYi1pbnB1dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzc05hbWU9XCJqb2ItdGV4dC1pbnB1dFwiIHZhbHVlPXt0aGlzLnN0YXRlLmpvYkV4cGVyaWVuY2V9IG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZUpvYkV4cGVyaWVuY2V9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm5ldy1qb2Itc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV3LWpvYi1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Ib3Vyczo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZXctam9iLWlucHV0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzTmFtZT1cImpvYi10ZXh0LWlucHV0XCIgdmFsdWU9e3RoaXMuc3RhdGUuam9iSG91cnN9IG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZUpvYkhvdXJzfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJuZXctam9iLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5ldy1qb2ItbGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+TG9jYXRpb246PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV3LWpvYi1pbnB1dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzc05hbWU9XCJqb2ItdGV4dC1pbnB1dFwiIHZhbHVlPXt0aGlzLnN0YXRlLmpvYkxvY2F0aW9ufSBvbkNoYW5nZT17dGhpcy51cGRhdGVKb2JMb2NhdGlvbn0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwibmV3LWpvYi1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZXctam9iLWxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNhbGFyeTo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZXctam9iLWlucHV0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzTmFtZT1cImpvYi10ZXh0LWlucHV0XCIgdmFsdWU9e3RoaXMuc3RhdGUuam9iU2FsYXJ5fSBvbkNoYW5nZT17dGhpcy51cGRhdGVKb2JTYWxhcnl9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm5ldy1qb2Itc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV3LWpvYi1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5TbHVnOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5ldy1qb2ItaW5wdXRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3NOYW1lPVwiam9iLXRleHQtaW5wdXRcIiB2YWx1ZT17dGhpcy5zdGF0ZS5qb2JTbHVnfSBvbkNoYW5nZT17dGhpcy51cGRhdGVKb2JTbHVnfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJuZXctam9iLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5ldy1qb2ItbGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+Sm9iIFRpdGxlOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5ldy1qb2ItaW5wdXRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3NOYW1lPVwiam9iLXRleHQtaW5wdXRcIiB2YWx1ZT17dGhpcy5zdGF0ZS5qb2JUaXRsZX0gb25DaGFuZ2U9e3RoaXMudXBkYXRlSm9iVGl0bGV9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGlkPVwibmV3LWpvYi1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBpZD1cImpvYi1kZXNjcmlwdGlvbi10aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+Sm9iIERlc2NyaXB0aW9uOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBpZD1cImVkaXRvci1idXR0b25zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMub25VbmRlcmxpbmVDbGlja30gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImVkaXRvci1idXR0b25cIj48aSBjbGFzcz1cImZhcyBmYS11bmRlcmxpbmVcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMub25Cb2xkQ2xpY2t9IHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJlZGl0b3ItYnV0dG9uXCI+PGkgY2xhc3M9XCJmYXMgZmEtYm9sZFwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5vbkl0YWxpY0NsaWNrfSB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiZWRpdG9yLWJ1dHRvblwiPjxpIGNsYXNzPVwiZmFzIGZhLWl0YWxpY1wiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwibmV3LWpvYi1lZGl0b3JcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxFZGl0b3IgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3JTdGF0ZT17dGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVLZXlDb21tYW5kPXt0aGlzLmhhbmRsZUtleUNvbW1hbmR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBpZD1cIm5ldy1qb2Itc3VibWl0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuZm9ybUVycm9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiZm9ybS1lcnJvclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNvbWV0aGluZyB3ZW50IHdyb25nLCB5b3VyIG5ldyBqb2Igd2FzIG5vdCBjcmVhdGVkLjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QbGVhc2UgdHJ5IGFnYWluIG9yIGNvbnRhY3QgbWFyaWx5bkB0aGVuZXh0c2VwLmlvIGZvciBoZWxwPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxGb290ZXIvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgXG4gICAgKX1cbiAgICB9ICAgXG4gIFxufVxuXG5leHBvcnQgZGVmYXVsdCBOZXdKb2JQYWdlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAvLyBDYWxsIHRoaXMuY29uc3RydWN0b3IuZ0RTRlAgdG8gc3VwcG9ydCBzdWItY2xhc3Nlcy5cbiAgdmFyIHN0YXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHModGhpcy5wcm9wcywgdGhpcy5zdGF0ZSk7XG4gIGlmIChzdGF0ZSAhPT0gbnVsbCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgLy8gQ2FsbCB0aGlzLmNvbnN0cnVjdG9yLmdEU0ZQIHRvIHN1cHBvcnQgc3ViLWNsYXNzZXMuXG4gIC8vIFVzZSB0aGUgc2V0U3RhdGUoKSB1cGRhdGVyIHRvIGVuc3VyZSBzdGF0ZSBpc24ndCBzdGFsZSBpbiBjZXJ0YWluIGVkZ2UgY2FzZXMuXG4gIGZ1bmN0aW9uIHVwZGF0ZXIocHJldlN0YXRlKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpO1xuICAgIHJldHVybiBzdGF0ZSAhPT0gbnVsbCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkID8gc3RhdGUgOiBudWxsO1xuICB9XG4gIC8vIEJpbmRpbmcgXCJ0aGlzXCIgaXMgaW1wb3J0YW50IGZvciBzaGFsbG93IHJlbmRlcmVyIHN1cHBvcnQuXG4gIHRoaXMuc2V0U3RhdGUodXBkYXRlci5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICB0cnkge1xuICAgIHZhciBwcmV2UHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBwcmV2U3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHRoaXMucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgdGhpcy5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyA9IHRydWU7XG4gICAgdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdCA9IHRoaXMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoXG4gICAgICBwcmV2UHJvcHMsXG4gICAgICBwcmV2U3RhdGVcbiAgICApO1xuICB9IGZpbmFsbHkge1xuICAgIHRoaXMucHJvcHMgPSBwcmV2UHJvcHM7XG4gICAgdGhpcy5zdGF0ZSA9IHByZXZTdGF0ZTtcbiAgfVxufVxuXG4vLyBSZWFjdCBtYXkgd2FybiBhYm91dCBjV00vY1dSUC9jV1UgbWV0aG9kcyBiZWluZyBkZXByZWNhdGVkLlxuLy8gQWRkIGEgZmxhZyB0byBzdXBwcmVzcyB0aGVzZSB3YXJuaW5ncyBmb3IgdGhpcyBzcGVjaWFsIGNhc2UuXG5jb21wb25lbnRXaWxsTW91bnQuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuY29tcG9uZW50V2lsbFVwZGF0ZS5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcblxuZnVuY3Rpb24gcG9seWZpbGwoQ29tcG9uZW50KSB7XG4gIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuXG4gIGlmICghcHJvdG90eXBlIHx8ICFwcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG9ubHkgcG9seWZpbGwgY2xhc3MgY29tcG9uZW50cycpO1xuICB9XG5cbiAgaWYgKFxuICAgIHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICE9PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm4gQ29tcG9uZW50O1xuICB9XG5cbiAgLy8gSWYgbmV3IGNvbXBvbmVudCBBUElzIGFyZSBkZWZpbmVkLCBcInVuc2FmZVwiIGxpZmVjeWNsZXMgd29uJ3QgYmUgY2FsbGVkLlxuICAvLyBFcnJvciBpZiBhbnkgb2YgdGhlc2UgbGlmZWN5Y2xlcyBhcmUgcHJlc2VudCxcbiAgLy8gQmVjYXVzZSB0aGV5IHdvdWxkIHdvcmsgZGlmZmVyZW50bHkgYmV0d2VlbiBvbGRlciBhbmQgbmV3ZXIgKDE2LjMrKSB2ZXJzaW9ucyBvZiBSZWFjdC5cbiAgdmFyIGZvdW5kV2lsbE1vdW50TmFtZSA9IG51bGw7XG4gIHZhciBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gbnVsbDtcbiAgdmFyIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSBudWxsO1xuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnY29tcG9uZW50V2lsbE1vdW50JztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCc7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lID0gJ2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJztcbiAgfVxuICBpZiAoXG4gICAgZm91bmRXaWxsTW91bnROYW1lICE9PSBudWxsIHx8XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbCB8fFxuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGxcbiAgKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWU7XG4gICAgdmFyIG5ld0FwaU5hbWUgPVxuICAgICAgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKCknXG4gICAgICAgIDogJ2dldFNuYXBzaG90QmVmb3JlVXBkYXRlKCknO1xuXG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICAnVW5zYWZlIGxlZ2FjeSBsaWZlY3ljbGVzIHdpbGwgbm90IGJlIGNhbGxlZCBmb3IgY29tcG9uZW50cyB1c2luZyBuZXcgY29tcG9uZW50IEFQSXMuXFxuXFxuJyArXG4gICAgICAgIGNvbXBvbmVudE5hbWUgK1xuICAgICAgICAnIHVzZXMgJyArXG4gICAgICAgIG5ld0FwaU5hbWUgK1xuICAgICAgICAnIGJ1dCBhbHNvIGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgbGVnYWN5IGxpZmVjeWNsZXM6JyArXG4gICAgICAgIChmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsTW91bnROYW1lIDogJycpICtcbiAgICAgICAgKGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGxcbiAgICAgICAgICA/ICdcXG4gICcgKyBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lXG4gICAgICAgICAgOiAnJykgK1xuICAgICAgICAoZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxVcGRhdGVOYW1lIDogJycpICtcbiAgICAgICAgJ1xcblxcblRoZSBhYm92ZSBsaWZlY3ljbGVzIHNob3VsZCBiZSByZW1vdmVkLiBMZWFybiBtb3JlIGFib3V0IHRoaXMgd2FybmluZyBoZXJlOlxcbicgK1xuICAgICAgICAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1hc3luYy1jb21wb25lbnQtbGlmZWN5Y2xlLWhvb2tzJ1xuICAgICk7XG4gIH1cblxuICAvLyBSZWFjdCA8PSAxNi4yIGRvZXMgbm90IHN1cHBvcnQgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5cbiAgLy8gQXMgYSB3b3JrYXJvdW5kLCB1c2UgY1dNIGFuZCBjV1JQIHRvIGludm9rZSB0aGUgbmV3IHN0YXRpYyBsaWZlY3ljbGUuXG4gIC8vIE5ld2VyIHZlcnNpb25zIG9mIFJlYWN0IHdpbGwgaWdub3JlIHRoZXNlIGxpZmVjeWNsZXMgaWYgZ0RTRlAgZXhpc3RzLlxuICBpZiAodHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gY29tcG9uZW50V2lsbE1vdW50O1xuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcztcbiAgfVxuXG4gIC8vIFJlYWN0IDw9IDE2LjIgZG9lcyBub3Qgc3VwcG9ydCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZS5cbiAgLy8gQXMgYSB3b3JrYXJvdW5kLCB1c2UgY1dVIHRvIGludm9rZSB0aGUgbmV3IGxpZmVjeWNsZS5cbiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhhdCBsaWZlY3ljbGUgaWYgZ1NCVSBleGlzdHMuXG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgcG9seWZpbGwgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSBmb3IgY29tcG9uZW50cyB0aGF0IGRvIG5vdCBkZWZpbmUgY29tcG9uZW50RGlkVXBkYXRlKCkgb24gdGhlIHByb3RvdHlwZSdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBjb21wb25lbnRXaWxsVXBkYXRlO1xuXG4gICAgdmFyIGNvbXBvbmVudERpZFVwZGF0ZSA9IHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGU7XG5cbiAgICBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlUG9seWZpbGwoXG4gICAgICBwcmV2UHJvcHMsXG4gICAgICBwcmV2U3RhdGUsXG4gICAgICBtYXliZVNuYXBzaG90XG4gICAgKSB7XG4gICAgICAvLyAxNi4zKyB3aWxsIG5vdCBleGVjdXRlIG91ciB3aWxsLXVwZGF0ZSBtZXRob2Q7XG4gICAgICAvLyBJdCB3aWxsIHBhc3MgYSBzbmFwc2hvdCB2YWx1ZSB0byBkaWQtdXBkYXRlIHRob3VnaC5cbiAgICAgIC8vIE9sZGVyIHZlcnNpb25zIHdpbGwgcmVxdWlyZSBvdXIgcG9seWZpbGxlZCB3aWxsLXVwZGF0ZSB2YWx1ZS5cbiAgICAgIC8vIFdlIG5lZWQgdG8gaGFuZGxlIGJvdGggY2FzZXMsIGJ1dCBjYW4ndCBqdXN0IGNoZWNrIGZvciB0aGUgcHJlc2VuY2Ugb2YgXCJtYXliZVNuYXBzaG90XCIsXG4gICAgICAvLyBCZWNhdXNlIGZvciA8PSAxNS54IHZlcnNpb25zIHRoaXMgbWlnaHQgYmUgYSBcInByZXZDb250ZXh0XCIgb2JqZWN0LlxuICAgICAgLy8gV2UgYWxzbyBjYW4ndCBqdXN0IGNoZWNrIFwiX19yZWFjdEludGVybmFsU25hcHNob3RcIixcbiAgICAgIC8vIEJlY2F1c2UgZ2V0LXNuYXBzaG90IG1pZ2h0IHJldHVybiBhIGZhbHN5IHZhbHVlLlxuICAgICAgLy8gU28gY2hlY2sgZm9yIHRoZSBleHBsaWNpdCBfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWcgZmxhZyB0byBkZXRlcm1pbmUgYmVoYXZpb3IuXG4gICAgICB2YXIgc25hcHNob3QgPSB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZ1xuICAgICAgICA/IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RcbiAgICAgICAgOiBtYXliZVNuYXBzaG90O1xuXG4gICAgICBjb21wb25lbnREaWRVcGRhdGUuY2FsbCh0aGlzLCBwcmV2UHJvcHMsIHByZXZTdGF0ZSwgc25hcHNob3QpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gQ29tcG9uZW50O1xufVxuXG5leHBvcnQgeyBwb2x5ZmlsbCB9O1xuIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNSBKZWQgV2F0c29uLlxuICBCYXNlZCBvbiBjb2RlIHRoYXQgaXMgQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgY2FuVXNlRE9NID0gISEoXG5cdFx0dHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcblx0XHR3aW5kb3cuZG9jdW1lbnQgJiZcblx0XHR3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudFxuXHQpO1xuXG5cdHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuXHRcdGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG5cdFx0Y2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cblx0XHRjYW5Vc2VFdmVudExpc3RlbmVyczpcblx0XHRcdGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG5cdFx0Y2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW5cblxuXHR9O1xuXG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBFeGVjdXRpb25FbnZpcm9ubWVudDtcblx0XHR9KTtcblx0fSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LkV4ZWN1dGlvbkVudmlyb25tZW50ID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7XG5cdH1cblxufSgpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kdW1wQ2xhc3NMaXN0cyA9IGR1bXBDbGFzc0xpc3RzO1xudmFyIGh0bWxDbGFzc0xpc3QgPSB7fTtcbnZhciBkb2NCb2R5Q2xhc3NMaXN0ID0ge307XG5cbmZ1bmN0aW9uIGR1bXBDbGFzc0xpc3RzKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFyIGNsYXNzZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImh0bWxcIilbMF0uY2xhc3NOYW1lO1xuICAgIHZhciBidWZmZXIgPSBcIlNob3cgdHJhY2tlZCBjbGFzc2VzOlxcblxcblwiO1xuXG4gICAgYnVmZmVyICs9IFwiPGh0bWwgLz4gKFwiICsgY2xhc3NlcyArIFwiKTpcXG5cIjtcbiAgICBmb3IgKHZhciB4IGluIGh0bWxDbGFzc0xpc3QpIHtcbiAgICAgIGJ1ZmZlciArPSBcIiAgXCIgKyB4ICsgXCIgXCIgKyBodG1sQ2xhc3NMaXN0W3hdICsgXCJcXG5cIjtcbiAgICB9XG5cbiAgICBjbGFzc2VzID0gZG9jdW1lbnQuYm9keS5jbGFzc05hbWU7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgIGJ1ZmZlciArPSBcIlxcblxcbmRvYy5ib2R5IChcIiArIGNsYXNzZXMgKyBcIik6XFxuXCI7XG4gICAgZm9yICh2YXIgX3ggaW4gZG9jQm9keUNsYXNzTGlzdCkge1xuICAgICAgYnVmZmVyICs9IFwiICBcIiArIF94ICsgXCIgXCIgKyBkb2NCb2R5Q2xhc3NMaXN0W194XSArIFwiXFxuXCI7XG4gICAgfVxuXG4gICAgYnVmZmVyICs9IFwiXFxuXCI7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKGJ1ZmZlcik7XG4gIH1cbn1cblxuLyoqXG4gKiBUcmFjayB0aGUgbnVtYmVyIG9mIHJlZmVyZW5jZSBvZiBhIGNsYXNzLlxuICogQHBhcmFtIHtvYmplY3R9IHBvbGwgVGhlIHBvbGwgdG8gcmVjZWl2ZSB0aGUgcmVmZXJlbmNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSBUaGUgY2xhc3MgbmFtZS5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xudmFyIGluY3JlbWVudFJlZmVyZW5jZSA9IGZ1bmN0aW9uIGluY3JlbWVudFJlZmVyZW5jZShwb2xsLCBjbGFzc05hbWUpIHtcbiAgaWYgKCFwb2xsW2NsYXNzTmFtZV0pIHtcbiAgICBwb2xsW2NsYXNzTmFtZV0gPSAwO1xuICB9XG4gIHBvbGxbY2xhc3NOYW1lXSArPSAxO1xuICByZXR1cm4gY2xhc3NOYW1lO1xufTtcblxuLyoqXG4gKiBEcm9wIHRoZSByZWZlcmVuY2Ugb2YgYSBjbGFzcy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBwb2xsIFRoZSBwb2xsIHRvIHJlY2VpdmUgdGhlIHJlZmVyZW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgVGhlIGNsYXNzIG5hbWUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnZhciBkZWNyZW1lbnRSZWZlcmVuY2UgPSBmdW5jdGlvbiBkZWNyZW1lbnRSZWZlcmVuY2UocG9sbCwgY2xhc3NOYW1lKSB7XG4gIGlmIChwb2xsW2NsYXNzTmFtZV0pIHtcbiAgICBwb2xsW2NsYXNzTmFtZV0gLT0gMTtcbiAgfVxuICByZXR1cm4gY2xhc3NOYW1lO1xufTtcblxuLyoqXG4gKiBUcmFjayBhIGNsYXNzIGFuZCBhZGQgdG8gdGhlIGdpdmVuIGNsYXNzIGxpc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gY2xhc3NMaXN0UmVmIEEgY2xhc3MgbGlzdCBvZiBhbiBlbGVtZW50LlxuICogQHBhcmFtIHtPYmplY3R9IHBvbGwgICAgICAgICBUaGUgcG9sbCB0byBiZSB1c2VkLlxuICogQHBhcmFtIHtBcnJheX0gIGNsYXNzZXMgICAgICBUaGUgbGlzdCBvZiBjbGFzc2VzIHRvIGJlIHRyYWNrZWQuXG4gKi9cbnZhciB0cmFja0NsYXNzID0gZnVuY3Rpb24gdHJhY2tDbGFzcyhjbGFzc0xpc3RSZWYsIHBvbGwsIGNsYXNzZXMpIHtcbiAgY2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpbmNyZW1lbnRSZWZlcmVuY2UocG9sbCwgY2xhc3NOYW1lKTtcbiAgICBjbGFzc0xpc3RSZWYuYWRkKGNsYXNzTmFtZSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBVbnRyYWNrIGEgY2xhc3MgYW5kIHJlbW92ZSBmcm9tIHRoZSBnaXZlbiBjbGFzcyBsaXN0IGlmIHRoZSByZWZlcmVuY2VcbiAqIHJlYWNoZXMgMC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjbGFzc0xpc3RSZWYgQSBjbGFzcyBsaXN0IG9mIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge09iamVjdH0gcG9sbCAgICAgICAgIFRoZSBwb2xsIHRvIGJlIHVzZWQuXG4gKiBAcGFyYW0ge0FycmF5fSAgY2xhc3NlcyAgICAgIFRoZSBsaXN0IG9mIGNsYXNzZXMgdG8gYmUgdW50cmFja2VkLlxuICovXG52YXIgdW50cmFja0NsYXNzID0gZnVuY3Rpb24gdW50cmFja0NsYXNzKGNsYXNzTGlzdFJlZiwgcG9sbCwgY2xhc3Nlcykge1xuICBjbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIGRlY3JlbWVudFJlZmVyZW5jZShwb2xsLCBjbGFzc05hbWUpO1xuICAgIHBvbGxbY2xhc3NOYW1lXSA9PT0gMCAmJiBjbGFzc0xpc3RSZWYucmVtb3ZlKGNsYXNzTmFtZSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgaW5mZXJmYWNlIHRvIGFkZCBjbGFzc2VzIHRvIHRoZSBkb2N1bWVudC5ib2R5LlxuICogQHBhcmFtIHtzdHJpbmd9IGJvZHlDbGFzcyBUaGUgY2xhc3Mgc3RyaW5nIHRvIGJlIGFkZGVkLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBJdCBtYXkgY29udGFpbiBtb3JlIHRoZW4gb25lIGNsYXNzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggJyAnIGFzIHNlcGFyYXRvci5cbiAqL1xudmFyIGFkZCA9IGV4cG9ydHMuYWRkID0gZnVuY3Rpb24gYWRkKGVsZW1lbnQsIGNsYXNzU3RyaW5nKSB7XG4gIHJldHVybiB0cmFja0NsYXNzKGVsZW1lbnQuY2xhc3NMaXN0LCBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT0gXCJodG1sXCIgPyBodG1sQ2xhc3NMaXN0IDogZG9jQm9keUNsYXNzTGlzdCwgY2xhc3NTdHJpbmcuc3BsaXQoXCIgXCIpKTtcbn07XG5cbi8qKlxuICogUHVibGljIGluZmVyZmFjZSB0byByZW1vdmUgY2xhc3NlcyBmcm9tIHRoZSBkb2N1bWVudC5ib2R5LlxuICogQHBhcmFtIHtzdHJpbmd9IGJvZHlDbGFzcyBUaGUgY2xhc3Mgc3RyaW5nIHRvIGJlIGFkZGVkLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBJdCBtYXkgY29udGFpbiBtb3JlIHRoZW4gb25lIGNsYXNzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggJyAnIGFzIHNlcGFyYXRvci5cbiAqL1xudmFyIHJlbW92ZSA9IGV4cG9ydHMucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKGVsZW1lbnQsIGNsYXNzU3RyaW5nKSB7XG4gIHJldHVybiB1bnRyYWNrQ2xhc3MoZWxlbWVudC5jbGFzc0xpc3QsIGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PSBcImh0bWxcIiA/IGh0bWxDbGFzc0xpc3QgOiBkb2NCb2R5Q2xhc3NMaXN0LCBjbGFzc1N0cmluZy5zcGxpdChcIiBcIikpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNjb3BlVGFiO1xuXG52YXIgX3RhYmJhYmxlID0gcmVxdWlyZShcIi4vdGFiYmFibGVcIik7XG5cbnZhciBfdGFiYmFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGFiYmFibGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBzY29wZVRhYihub2RlLCBldmVudCkge1xuICB2YXIgdGFiYmFibGUgPSAoMCwgX3RhYmJhYmxlMi5kZWZhdWx0KShub2RlKTtcblxuICBpZiAoIXRhYmJhYmxlLmxlbmd0aCkge1xuICAgIC8vIERvIG5vdGhpbmcsIHNpbmNlIHRoZXJlIGFyZSBubyBlbGVtZW50cyB0aGF0IGNhbiByZWNlaXZlIGZvY3VzLlxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNoaWZ0S2V5ID0gZXZlbnQuc2hpZnRLZXk7XG4gIHZhciBoZWFkID0gdGFiYmFibGVbMF07XG4gIHZhciB0YWlsID0gdGFiYmFibGVbdGFiYmFibGUubGVuZ3RoIC0gMV07XG5cbiAgLy8gcHJvY2VlZCB3aXRoIGRlZmF1bHQgYnJvd3NlciBiZWhhdmlvciBvbiB0YWIuXG4gIC8vIEZvY3VzIG9uIGxhc3QgZWxlbWVudCBvbiBzaGlmdCArIHRhYi5cbiAgaWYgKG5vZGUgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoIXNoaWZ0S2V5KSByZXR1cm47XG4gICAgdGFyZ2V0ID0gdGFpbDtcbiAgfVxuXG4gIHZhciB0YXJnZXQ7XG4gIGlmICh0YWlsID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICFzaGlmdEtleSkge1xuICAgIHRhcmdldCA9IGhlYWQ7XG4gIH1cblxuICBpZiAoaGVhZCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBzaGlmdEtleSkge1xuICAgIHRhcmdldCA9IHRhaWw7XG4gIH1cblxuICBpZiAodGFyZ2V0KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0YXJnZXQuZm9jdXMoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBTYWZhcmkgcmFkaW8gaXNzdWUuXG4gIC8vXG4gIC8vIFNhZmFyaSBkb2VzIG5vdCBtb3ZlIHRoZSBmb2N1cyB0byB0aGUgcmFkaW8gYnV0dG9uLFxuICAvLyBzbyB3ZSBuZWVkIHRvIGZvcmNlIGl0IHRvIHJlYWxseSB3YWxrIHRocm91Z2ggYWxsIGVsZW1lbnRzLlxuICAvL1xuICAvLyBUaGlzIGlzIHZlcnkgZXJyb3IgcHJ1bmUsIHNpbmNlIHdlIGFyZSB0cnlpbmcgdG8gZ3Vlc3NcbiAgLy8gaWYgaXQgaXMgYSBzYWZhcmkgYnJvd3NlciBmcm9tIHRoZSBmaXJzdCBvY2N1cmVuY2UgYmV0d2VlblxuICAvLyBjaHJvbWUgb3Igc2FmYXJpLlxuICAvL1xuICAvLyBUaGUgY2hyb21lIHVzZXIgYWdlbnQgY29udGFpbnMgdGhlIGZpcnN0IG9jdXJyZW5jZVxuICAvLyBhcyB0aGUgJ2Nocm9tZS92ZXJzaW9uJyBhbmQgbGF0ZXIgdGhlICdzYWZhcmkvdmVyc2lvbicuXG4gIHZhciBjaGVja1NhZmFyaSA9IC8oXFxiQ2hyb21lXFxifFxcYlNhZmFyaVxcYilcXC8vLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIHZhciBpc1NhZmFyaURlc2t0b3AgPSBjaGVja1NhZmFyaSAhPSBudWxsICYmIGNoZWNrU2FmYXJpWzFdICE9IFwiQ2hyb21lXCIgJiYgL1xcYmlQb2RcXGJ8XFxiaVBhZFxcYi9nLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCkgPT0gbnVsbDtcblxuICAvLyBJZiB3ZSBhcmUgbm90IGluIHNhZmFyaSBkZXNrdG9wLCBsZXQgdGhlIGJyb3dzZXIgY29udHJvbFxuICAvLyB0aGUgZm9jdXNcbiAgaWYgKCFpc1NhZmFyaURlc2t0b3ApIHJldHVybjtcblxuICB2YXIgeCA9IHRhYmJhYmxlLmluZGV4T2YoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG5cbiAgaWYgKHggPiAtMSkge1xuICAgIHggKz0gc2hpZnRLZXkgPyAtMSA6IDE7XG4gIH1cblxuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gIHRhYmJhYmxlW3hdLmZvY3VzKCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5oYW5kbGVCbHVyID0gaGFuZGxlQmx1cjtcbmV4cG9ydHMuaGFuZGxlRm9jdXMgPSBoYW5kbGVGb2N1cztcbmV4cG9ydHMubWFya0ZvckZvY3VzTGF0ZXIgPSBtYXJrRm9yRm9jdXNMYXRlcjtcbmV4cG9ydHMucmV0dXJuRm9jdXMgPSByZXR1cm5Gb2N1cztcbmV4cG9ydHMucG9wV2l0aG91dEZvY3VzID0gcG9wV2l0aG91dEZvY3VzO1xuZXhwb3J0cy5zZXR1cFNjb3BlZEZvY3VzID0gc2V0dXBTY29wZWRGb2N1cztcbmV4cG9ydHMudGVhcmRvd25TY29wZWRGb2N1cyA9IHRlYXJkb3duU2NvcGVkRm9jdXM7XG5cbnZhciBfdGFiYmFibGUgPSByZXF1aXJlKFwiLi4vaGVscGVycy90YWJiYWJsZVwiKTtcblxudmFyIF90YWJiYWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90YWJiYWJsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBmb2N1c0xhdGVyRWxlbWVudHMgPSBbXTtcbnZhciBtb2RhbEVsZW1lbnQgPSBudWxsO1xudmFyIG5lZWRUb0ZvY3VzID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGhhbmRsZUJsdXIoKSB7XG4gIG5lZWRUb0ZvY3VzID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRm9jdXMoKSB7XG4gIGlmIChuZWVkVG9Gb2N1cykge1xuICAgIG5lZWRUb0ZvY3VzID0gZmFsc2U7XG4gICAgaWYgKCFtb2RhbEVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gbmVlZCB0byBzZWUgaG93IGpRdWVyeSBzaGltcyBkb2N1bWVudC5vbignZm9jdXNpbicpIHNvIHdlIGRvbid0IG5lZWQgdGhlXG4gICAgLy8gc2V0VGltZW91dCwgZmlyZWZveCBkb2Vzbid0IHN1cHBvcnQgZm9jdXNpbiwgaWYgaXQgZGlkLCB3ZSBjb3VsZCBmb2N1c1xuICAgIC8vIHRoZSBlbGVtZW50IG91dHNpZGUgb2YgYSBzZXRUaW1lb3V0LiBTaWRlLWVmZmVjdCBvZiB0aGlzIGltcGxlbWVudGF0aW9uXG4gICAgLy8gaXMgdGhhdCB0aGUgZG9jdW1lbnQuYm9keSBnZXRzIGZvY3VzLCBhbmQgdGhlbiB3ZSBmb2N1cyBvdXIgZWxlbWVudCByaWdodFxuICAgIC8vIGFmdGVyLCBzZWVtcyBmaW5lLlxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG1vZGFsRWxlbWVudC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgZWwgPSAoMCwgX3RhYmJhYmxlMi5kZWZhdWx0KShtb2RhbEVsZW1lbnQpWzBdIHx8IG1vZGFsRWxlbWVudDtcbiAgICAgIGVsLmZvY3VzKCk7XG4gICAgfSwgMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya0ZvckZvY3VzTGF0ZXIoKSB7XG4gIGZvY3VzTGF0ZXJFbGVtZW50cy5wdXNoKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5mdW5jdGlvbiByZXR1cm5Gb2N1cygpIHtcbiAgdmFyIHRvRm9jdXMgPSBudWxsO1xuICB0cnkge1xuICAgIGlmIChmb2N1c0xhdGVyRWxlbWVudHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICB0b0ZvY3VzID0gZm9jdXNMYXRlckVsZW1lbnRzLnBvcCgpO1xuICAgICAgdG9Gb2N1cy5mb2N1cygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLndhcm4oW1wiWW91IHRyaWVkIHRvIHJldHVybiBmb2N1cyB0b1wiLCB0b0ZvY3VzLCBcImJ1dCBpdCBpcyBub3QgaW4gdGhlIERPTSBhbnltb3JlXCJdLmpvaW4oXCIgXCIpKTtcbiAgfVxufVxuLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cbmZ1bmN0aW9uIHBvcFdpdGhvdXRGb2N1cygpIHtcbiAgZm9jdXNMYXRlckVsZW1lbnRzLmxlbmd0aCA+IDAgJiYgZm9jdXNMYXRlckVsZW1lbnRzLnBvcCgpO1xufVxuXG5mdW5jdGlvbiBzZXR1cFNjb3BlZEZvY3VzKGVsZW1lbnQpIHtcbiAgbW9kYWxFbGVtZW50ID0gZWxlbWVudDtcblxuICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgaGFuZGxlQmx1ciwgZmFsc2UpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBoYW5kbGVGb2N1cywgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmF0dGFjaEV2ZW50KFwib25CbHVyXCIsIGhhbmRsZUJsdXIpO1xuICAgIGRvY3VtZW50LmF0dGFjaEV2ZW50KFwib25Gb2N1c1wiLCBoYW5kbGVGb2N1cyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGVhcmRvd25TY29wZWRGb2N1cygpIHtcbiAgbW9kYWxFbGVtZW50ID0gbnVsbDtcblxuICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgaGFuZGxlQmx1cik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIGhhbmRsZUZvY3VzKTtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cuZGV0YWNoRXZlbnQoXCJvbkJsdXJcIiwgaGFuZGxlQmx1cik7XG4gICAgZG9jdW1lbnQuZGV0YWNoRXZlbnQoXCJvbkZvY3VzXCIsIGhhbmRsZUZvY3VzKTtcbiAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2ZvY3VzTWFuYWdlciA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL2ZvY3VzTWFuYWdlclwiKTtcblxudmFyIGZvY3VzTWFuYWdlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9mb2N1c01hbmFnZXIpO1xuXG52YXIgX3Njb3BlVGFiID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvc2NvcGVUYWJcIik7XG5cbnZhciBfc2NvcGVUYWIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2NvcGVUYWIpO1xuXG52YXIgX2FyaWFBcHBIaWRlciA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL2FyaWFBcHBIaWRlclwiKTtcblxudmFyIGFyaWFBcHBIaWRlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9hcmlhQXBwSGlkZXIpO1xuXG52YXIgX2NsYXNzTGlzdCA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL2NsYXNzTGlzdFwiKTtcblxudmFyIGNsYXNzTGlzdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9jbGFzc0xpc3QpO1xuXG52YXIgX3NhZmVIVE1MRWxlbWVudCA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3NhZmVIVE1MRWxlbWVudFwiKTtcblxudmFyIF9zYWZlSFRNTEVsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2FmZUhUTUxFbGVtZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vLyBzbyB0aGF0IG91ciBDU1MgaXMgc3RhdGljYWxseSBhbmFseXphYmxlXG52YXIgQ0xBU1NfTkFNRVMgPSB7XG4gIG92ZXJsYXk6IFwiUmVhY3RNb2RhbF9fT3ZlcmxheVwiLFxuICBjb250ZW50OiBcIlJlYWN0TW9kYWxfX0NvbnRlbnRcIlxufTtcblxudmFyIFRBQl9LRVkgPSA5O1xudmFyIEVTQ19LRVkgPSAyNztcblxudmFyIGFyaWFIaWRkZW5JbnN0YW5jZXMgPSAwO1xuXG52YXIgTW9kYWxQb3J0YWwgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTW9kYWxQb3J0YWwsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vZGFsUG9ydGFsKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsUG9ydGFsKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNb2RhbFBvcnRhbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1vZGFsUG9ydGFsKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuc2V0T3ZlcmxheVJlZiA9IGZ1bmN0aW9uIChvdmVybGF5KSB7XG4gICAgICBfdGhpcy5vdmVybGF5ID0gb3ZlcmxheTtcbiAgICAgIF90aGlzLnByb3BzLm92ZXJsYXlSZWYgJiYgX3RoaXMucHJvcHMub3ZlcmxheVJlZihvdmVybGF5KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0Q29udGVudFJlZiA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICBfdGhpcy5jb250ZW50ID0gY29udGVudDtcbiAgICAgIF90aGlzLnByb3BzLmNvbnRlbnRSZWYgJiYgX3RoaXMucHJvcHMuY29udGVudFJlZihjb250ZW50KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuYWZ0ZXJDbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGFwcEVsZW1lbnQgPSBfdGhpcyRwcm9wcy5hcHBFbGVtZW50LFxuICAgICAgICAgIGFyaWFIaWRlQXBwID0gX3RoaXMkcHJvcHMuYXJpYUhpZGVBcHAsXG4gICAgICAgICAgaHRtbE9wZW5DbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5odG1sT3BlbkNsYXNzTmFtZSxcbiAgICAgICAgICBib2R5T3BlbkNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmJvZHlPcGVuQ2xhc3NOYW1lO1xuXG4gICAgICAvLyBSZW1vdmUgY2xhc3Nlcy5cblxuICAgICAgY2xhc3NMaXN0LnJlbW92ZShkb2N1bWVudC5ib2R5LCBib2R5T3BlbkNsYXNzTmFtZSk7XG5cbiAgICAgIGh0bWxPcGVuQ2xhc3NOYW1lICYmIGNsYXNzTGlzdC5yZW1vdmUoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJodG1sXCIpWzBdLCBodG1sT3BlbkNsYXNzTmFtZSk7XG5cbiAgICAgIC8vIFJlc2V0IGFyaWEtaGlkZGVuIGF0dHJpYnV0ZSBpZiBhbGwgbW9kYWxzIGhhdmUgYmVlbiByZW1vdmVkXG4gICAgICBpZiAoYXJpYUhpZGVBcHAgJiYgYXJpYUhpZGRlbkluc3RhbmNlcyA+IDApIHtcbiAgICAgICAgYXJpYUhpZGRlbkluc3RhbmNlcyAtPSAxO1xuXG4gICAgICAgIGlmIChhcmlhSGlkZGVuSW5zdGFuY2VzID09PSAwKSB7XG4gICAgICAgICAgYXJpYUFwcEhpZGVyLnNob3coYXBwRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLnNob3VsZEZvY3VzQWZ0ZXJSZW5kZXIpIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLnNob3VsZFJldHVybkZvY3VzQWZ0ZXJDbG9zZSkge1xuICAgICAgICAgIGZvY3VzTWFuYWdlci5yZXR1cm5Gb2N1cygpO1xuICAgICAgICAgIGZvY3VzTWFuYWdlci50ZWFyZG93blNjb3BlZEZvY3VzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9jdXNNYW5hZ2VyLnBvcFdpdGhvdXRGb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5iZWZvcmVPcGVuKCk7XG4gICAgICBpZiAoX3RoaXMuc3RhdGUuYWZ0ZXJPcGVuICYmIF90aGlzLnN0YXRlLmJlZm9yZUNsb3NlKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5jbG9zZVRpbWVyKTtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBiZWZvcmVDbG9zZTogZmFsc2UgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMuc2hvdWxkRm9jdXNBZnRlclJlbmRlcikge1xuICAgICAgICAgIGZvY3VzTWFuYWdlci5zZXR1cFNjb3BlZEZvY3VzKF90aGlzLm5vZGUpO1xuICAgICAgICAgIGZvY3VzTWFuYWdlci5tYXJrRm9yRm9jdXNMYXRlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBpc09wZW46IHRydWUgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgYWZ0ZXJPcGVuOiB0cnVlIH0pO1xuXG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLmlzT3BlbiAmJiBfdGhpcy5wcm9wcy5vbkFmdGVyT3Blbikge1xuICAgICAgICAgICAgX3RoaXMucHJvcHMub25BZnRlck9wZW4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5jbG9zZVRpbWVvdXRNUyA+IDApIHtcbiAgICAgICAgX3RoaXMuY2xvc2VXaXRoVGltZW91dCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuY2xvc2VXaXRob3V0VGltZW91dCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5mb2N1c0NvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuY29udGVudCAmJiAhX3RoaXMuY29udGVudEhhc0ZvY3VzKCkgJiYgX3RoaXMuY29udGVudC5mb2N1cygpO1xuICAgIH07XG5cbiAgICBfdGhpcy5jbG9zZVdpdGhUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNsb3Nlc0F0ID0gRGF0ZS5ub3coKSArIF90aGlzLnByb3BzLmNsb3NlVGltZW91dE1TO1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBiZWZvcmVDbG9zZTogdHJ1ZSwgY2xvc2VzQXQ6IGNsb3Nlc0F0IH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuY2xvc2VUaW1lciA9IHNldFRpbWVvdXQoX3RoaXMuY2xvc2VXaXRob3V0VGltZW91dCwgX3RoaXMuc3RhdGUuY2xvc2VzQXQgLSBEYXRlLm5vdygpKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5jbG9zZVdpdGhvdXRUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBiZWZvcmVDbG9zZTogZmFsc2UsXG4gICAgICAgIGlzT3BlbjogZmFsc2UsXG4gICAgICAgIGFmdGVyT3BlbjogZmFsc2UsXG4gICAgICAgIGNsb3Nlc0F0OiBudWxsXG4gICAgICB9LCBfdGhpcy5hZnRlckNsb3NlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IFRBQl9LRVkpIHtcbiAgICAgICAgKDAsIF9zY29wZVRhYjIuZGVmYXVsdCkoX3RoaXMuY29udGVudCwgZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMuc2hvdWxkQ2xvc2VPbkVzYyAmJiBldmVudC5rZXlDb2RlID09PSBFU0NfS0VZKSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBfdGhpcy5yZXF1ZXN0Q2xvc2UoZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVPdmVybGF5T25DbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnNob3VsZENsb3NlID09PSBudWxsKSB7XG4gICAgICAgIF90aGlzLnNob3VsZENsb3NlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnNob3VsZENsb3NlICYmIF90aGlzLnByb3BzLnNob3VsZENsb3NlT25PdmVybGF5Q2xpY2spIHtcbiAgICAgICAgaWYgKF90aGlzLm93bmVySGFuZGxlc0Nsb3NlKCkpIHtcbiAgICAgICAgICBfdGhpcy5yZXF1ZXN0Q2xvc2UoZXZlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmZvY3VzQ29udGVudCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfdGhpcy5zaG91bGRDbG9zZSA9IG51bGw7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNvbnRlbnRPbk1vdXNlVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zaG91bGRDbG9zZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVPdmVybGF5T25Nb3VzZURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghX3RoaXMucHJvcHMuc2hvdWxkQ2xvc2VPbk92ZXJsYXlDbGljayAmJiBldmVudC50YXJnZXQgPT0gX3RoaXMub3ZlcmxheSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDb250ZW50T25DbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNob3VsZENsb3NlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNvbnRlbnRPbk1vdXNlRG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNob3VsZENsb3NlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIF90aGlzLnJlcXVlc3RDbG9zZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIF90aGlzLm93bmVySGFuZGxlc0Nsb3NlKCkgJiYgX3RoaXMucHJvcHMub25SZXF1ZXN0Q2xvc2UoZXZlbnQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5vd25lckhhbmRsZXNDbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5vblJlcXVlc3RDbG9zZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2hvdWxkQmVDbG9zZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gIV90aGlzLnN0YXRlLmlzT3BlbiAmJiAhX3RoaXMuc3RhdGUuYmVmb3JlQ2xvc2U7XG4gICAgfTtcblxuICAgIF90aGlzLmNvbnRlbnRIYXNGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBfdGhpcy5jb250ZW50IHx8IF90aGlzLmNvbnRlbnQuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG4gICAgfTtcblxuICAgIF90aGlzLmJ1aWxkQ2xhc3NOYW1lID0gZnVuY3Rpb24gKHdoaWNoLCBhZGRpdGlvbmFsKSB7XG4gICAgICB2YXIgY2xhc3NOYW1lcyA9ICh0eXBlb2YgYWRkaXRpb25hbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGFkZGl0aW9uYWwpKSA9PT0gXCJvYmplY3RcIiA/IGFkZGl0aW9uYWwgOiB7XG4gICAgICAgIGJhc2U6IENMQVNTX05BTUVTW3doaWNoXSxcbiAgICAgICAgYWZ0ZXJPcGVuOiBDTEFTU19OQU1FU1t3aGljaF0gKyBcIi0tYWZ0ZXItb3BlblwiLFxuICAgICAgICBiZWZvcmVDbG9zZTogQ0xBU1NfTkFNRVNbd2hpY2hdICsgXCItLWJlZm9yZS1jbG9zZVwiXG4gICAgICB9O1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXMuYmFzZTtcbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5hZnRlck9wZW4pIHtcbiAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lICsgXCIgXCIgKyBjbGFzc05hbWVzLmFmdGVyT3BlbjtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5iZWZvcmVDbG9zZSkge1xuICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgKyBcIiBcIiArIGNsYXNzTmFtZXMuYmVmb3JlQ2xvc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIGFkZGl0aW9uYWwgPT09IFwic3RyaW5nXCIgJiYgYWRkaXRpb25hbCA/IGNsYXNzTmFtZSArIFwiIFwiICsgYWRkaXRpb25hbCA6IGNsYXNzTmFtZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuYXJpYUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoaXRlbXMpIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhpdGVtcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG5hbWUpIHtcbiAgICAgICAgYWNjW1wiYXJpYS1cIiArIG5hbWVdID0gaXRlbXNbbmFtZV07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSk7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgYWZ0ZXJPcGVuOiBmYWxzZSxcbiAgICAgIGJlZm9yZUNsb3NlOiBmYWxzZVxuICAgIH07XG5cbiAgICBfdGhpcy5zaG91bGRDbG9zZSA9IG51bGw7XG4gICAgX3RoaXMubW92ZUZyb21Db250ZW50VG9PdmVybGF5ID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTW9kYWxQb3J0YWwsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuaXNPcGVuKSB7XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMuYm9keU9wZW5DbGFzc05hbWUgIT09IHRoaXMucHJvcHMuYm9keU9wZW5DbGFzc05hbWUpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybignUmVhY3QtTW9kYWw6IFwiYm9keU9wZW5DbGFzc05hbWVcIiBwcm9wIGhhcyBiZWVuIG1vZGlmaWVkLiAnICsgXCJUaGlzIG1heSBjYXVzZSB1bmV4cGVjdGVkIGJlaGF2aW9yIHdoZW4gbXVsdGlwbGUgbW9kYWxzIGFyZSBvcGVuLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldlByb3BzLmh0bWxPcGVuQ2xhc3NOYW1lICE9PSB0aGlzLnByb3BzLmh0bWxPcGVuQ2xhc3NOYW1lKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1JlYWN0LU1vZGFsOiBcImh0bWxPcGVuQ2xhc3NOYW1lXCIgcHJvcCBoYXMgYmVlbiBtb2RpZmllZC4gJyArIFwiVGhpcyBtYXkgY2F1c2UgdW5leHBlY3RlZCBiZWhhdmlvciB3aGVuIG11bHRpcGxlIG1vZGFscyBhcmUgb3Blbi5cIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHJvcHMuaXNPcGVuICYmICFwcmV2UHJvcHMuaXNPcGVuKSB7XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5wcm9wcy5pc09wZW4gJiYgcHJldlByb3BzLmlzT3Blbikge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEZvY3VzIG9ubHkgbmVlZHMgdG8gYmUgc2V0IG9uY2Ugd2hlbiB0aGUgbW9kYWwgaXMgYmVpbmcgb3BlbmVkXG4gICAgICBpZiAodGhpcy5wcm9wcy5zaG91bGRGb2N1c0FmdGVyUmVuZGVyICYmIHRoaXMuc3RhdGUuaXNPcGVuICYmICFwcmV2U3RhdGUuaXNPcGVuKSB7XG4gICAgICAgIHRoaXMuZm9jdXNDb250ZW50KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5hZnRlckNsb3NlKCk7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5jbG9zZVRpbWVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYmVmb3JlT3BlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBiZWZvcmVPcGVuKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYXBwRWxlbWVudCA9IF9wcm9wcy5hcHBFbGVtZW50LFxuICAgICAgICAgIGFyaWFIaWRlQXBwID0gX3Byb3BzLmFyaWFIaWRlQXBwLFxuICAgICAgICAgIGh0bWxPcGVuQ2xhc3NOYW1lID0gX3Byb3BzLmh0bWxPcGVuQ2xhc3NOYW1lLFxuICAgICAgICAgIGJvZHlPcGVuQ2xhc3NOYW1lID0gX3Byb3BzLmJvZHlPcGVuQ2xhc3NOYW1lO1xuXG4gICAgICAvLyBBZGQgY2xhc3Nlcy5cblxuICAgICAgY2xhc3NMaXN0LmFkZChkb2N1bWVudC5ib2R5LCBib2R5T3BlbkNsYXNzTmFtZSk7XG5cbiAgICAgIGh0bWxPcGVuQ2xhc3NOYW1lICYmIGNsYXNzTGlzdC5hZGQoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJodG1sXCIpWzBdLCBodG1sT3BlbkNsYXNzTmFtZSk7XG5cbiAgICAgIGlmIChhcmlhSGlkZUFwcCkge1xuICAgICAgICBhcmlhSGlkZGVuSW5zdGFuY2VzICs9IDE7XG4gICAgICAgIGFyaWFBcHBIaWRlci5oaWRlKGFwcEVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERvbid0IHN0ZWFsIGZvY3VzIGZyb20gaW5uZXIgZWxlbWVudHNcblxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzMi5jbGFzc05hbWUsXG4gICAgICAgICAgb3ZlcmxheUNsYXNzTmFtZSA9IF9wcm9wczIub3ZlcmxheUNsYXNzTmFtZSxcbiAgICAgICAgICBkZWZhdWx0U3R5bGVzID0gX3Byb3BzMi5kZWZhdWx0U3R5bGVzO1xuXG4gICAgICB2YXIgY29udGVudFN0eWxlcyA9IGNsYXNzTmFtZSA/IHt9IDogZGVmYXVsdFN0eWxlcy5jb250ZW50O1xuICAgICAgdmFyIG92ZXJsYXlTdHlsZXMgPSBvdmVybGF5Q2xhc3NOYW1lID8ge30gOiBkZWZhdWx0U3R5bGVzLm92ZXJsYXk7XG5cbiAgICAgIHJldHVybiB0aGlzLnNob3VsZEJlQ2xvc2VkKCkgPyBudWxsIDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHtcbiAgICAgICAgICByZWY6IHRoaXMuc2V0T3ZlcmxheVJlZixcbiAgICAgICAgICBjbGFzc05hbWU6IHRoaXMuYnVpbGRDbGFzc05hbWUoXCJvdmVybGF5XCIsIG92ZXJsYXlDbGFzc05hbWUpLFxuICAgICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgb3ZlcmxheVN0eWxlcywgdGhpcy5wcm9wcy5zdHlsZS5vdmVybGF5KSxcbiAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZU92ZXJsYXlPbkNsaWNrLFxuICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU92ZXJsYXlPbk1vdXNlRG93bixcbiAgICAgICAgICBcImFyaWEtbW9kYWxcIjogXCJ0cnVlXCJcbiAgICAgICAgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICBfZXh0ZW5kcyh7XG4gICAgICAgICAgICByZWY6IHRoaXMuc2V0Q29udGVudFJlZixcbiAgICAgICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgY29udGVudFN0eWxlcywgdGhpcy5wcm9wcy5zdHlsZS5jb250ZW50KSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogdGhpcy5idWlsZENsYXNzTmFtZShcImNvbnRlbnRcIiwgY2xhc3NOYW1lKSxcbiAgICAgICAgICAgIHRhYkluZGV4OiBcIi0xXCIsXG4gICAgICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZUNvbnRlbnRPbk1vdXNlRG93bixcbiAgICAgICAgICAgIG9uTW91c2VVcDogdGhpcy5oYW5kbGVDb250ZW50T25Nb3VzZVVwLFxuICAgICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDb250ZW50T25DbGljayxcbiAgICAgICAgICAgIHJvbGU6IHRoaXMucHJvcHMucm9sZSxcbiAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiB0aGlzLnByb3BzLmNvbnRlbnRMYWJlbFxuICAgICAgICAgIH0sIHRoaXMuYXJpYUF0dHJpYnV0ZXModGhpcy5wcm9wcy5hcmlhIHx8IHt9KSwge1xuICAgICAgICAgICAgXCJkYXRhLXRlc3RpZFwiOiB0aGlzLnByb3BzLnRlc3RJZFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTW9kYWxQb3J0YWw7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Nb2RhbFBvcnRhbC5kZWZhdWx0UHJvcHMgPSB7XG4gIHN0eWxlOiB7XG4gICAgb3ZlcmxheToge30sXG4gICAgY29udGVudDoge31cbiAgfSxcbiAgZGVmYXVsdFN0eWxlczoge31cbn07XG5Nb2RhbFBvcnRhbC5wcm9wVHlwZXMgPSB7XG4gIGlzT3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsXG4gIGRlZmF1bHRTdHlsZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuICAgIGNvbnRlbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAgIG92ZXJsYXk6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG4gIH0pLFxuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgY29udGVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gICAgb3ZlcmxheTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3RcbiAgfSksXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdF0pLFxuICBvdmVybGF5Q2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XSksXG4gIGJvZHlPcGVuQ2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgaHRtbE9wZW5DbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBhcmlhSGlkZUFwcDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBhcHBFbGVtZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lmluc3RhbmNlT2YoX3NhZmVIVE1MRWxlbWVudDIuZGVmYXVsdCksXG4gIG9uQWZ0ZXJPcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9uUmVxdWVzdENsb3NlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGNsb3NlVGltZW91dE1TOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgc2hvdWxkRm9jdXNBZnRlclJlbmRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHNob3VsZFJldHVybkZvY3VzQWZ0ZXJDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICByb2xlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgY29udGVudExhYmVsOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgYXJpYTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIHNob3VsZENsb3NlT25Fc2M6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgb3ZlcmxheVJlZjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBjb250ZW50UmVmOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIHRlc3RJZDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBNb2RhbFBvcnRhbDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmJvZHlPcGVuQ2xhc3NOYW1lID0gZXhwb3J0cy5wb3J0YWxDbGFzc05hbWUgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZShcInByb3AtdHlwZXNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfTW9kYWxQb3J0YWwgPSByZXF1aXJlKFwiLi9Nb2RhbFBvcnRhbFwiKTtcblxudmFyIF9Nb2RhbFBvcnRhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Nb2RhbFBvcnRhbCk7XG5cbnZhciBfYXJpYUFwcEhpZGVyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvYXJpYUFwcEhpZGVyXCIpO1xuXG52YXIgYXJpYUFwcEhpZGVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2FyaWFBcHBIaWRlcik7XG5cbnZhciBfc2FmZUhUTUxFbGVtZW50ID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvc2FmZUhUTUxFbGVtZW50XCIpO1xuXG52YXIgX3NhZmVIVE1MRWxlbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zYWZlSFRNTEVsZW1lbnQpO1xuXG52YXIgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCA9IHJlcXVpcmUoXCJyZWFjdC1saWZlY3ljbGVzLWNvbXBhdFwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgcG9ydGFsQ2xhc3NOYW1lID0gZXhwb3J0cy5wb3J0YWxDbGFzc05hbWUgPSBcIlJlYWN0TW9kYWxQb3J0YWxcIjtcbnZhciBib2R5T3BlbkNsYXNzTmFtZSA9IGV4cG9ydHMuYm9keU9wZW5DbGFzc05hbWUgPSBcIlJlYWN0TW9kYWxfX0JvZHktLW9wZW5cIjtcblxudmFyIGlzUmVhY3QxNiA9IF9yZWFjdERvbTIuZGVmYXVsdC5jcmVhdGVQb3J0YWwgIT09IHVuZGVmaW5lZDtcbnZhciBjcmVhdGVQb3J0YWwgPSBpc1JlYWN0MTYgPyBfcmVhY3REb20yLmRlZmF1bHQuY3JlYXRlUG9ydGFsIDogX3JlYWN0RG9tMi5kZWZhdWx0LnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyO1xuXG5mdW5jdGlvbiBnZXRQYXJlbnRFbGVtZW50KHBhcmVudFNlbGVjdG9yKSB7XG4gIHJldHVybiBwYXJlbnRTZWxlY3RvcigpO1xufVxuXG52YXIgTW9kYWwgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTW9kYWwsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1vZGFsKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2RhbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTW9kYWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNb2RhbCkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnJlbW92ZVBvcnRhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1JlYWN0MTYgJiYgX3JlYWN0RG9tMi5kZWZhdWx0LnVubW91bnRDb21wb25lbnRBdE5vZGUoX3RoaXMubm9kZSk7XG4gICAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50RWxlbWVudChfdGhpcy5wcm9wcy5wYXJlbnRTZWxlY3Rvcik7XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoX3RoaXMubm9kZSk7XG4gICAgfSwgX3RoaXMucG9ydGFsUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMucG9ydGFsID0gcmVmO1xuICAgIH0sIF90aGlzLnJlbmRlclBvcnRhbCA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgdmFyIHBvcnRhbCA9IGNyZWF0ZVBvcnRhbChfdGhpcywgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX01vZGFsUG9ydGFsMi5kZWZhdWx0LCBfZXh0ZW5kcyh7IGRlZmF1bHRTdHlsZXM6IE1vZGFsLmRlZmF1bHRTdHlsZXMgfSwgcHJvcHMpKSwgX3RoaXMubm9kZSk7XG4gICAgICBfdGhpcy5wb3J0YWxSZWYocG9ydGFsKTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNb2RhbCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAoIV9zYWZlSFRNTEVsZW1lbnQuY2FuVXNlRE9NKSByZXR1cm47XG5cbiAgICAgIGlmICghaXNSZWFjdDE2KSB7XG4gICAgICAgIHRoaXMubm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICB9XG4gICAgICB0aGlzLm5vZGUuY2xhc3NOYW1lID0gdGhpcy5wcm9wcy5wb3J0YWxDbGFzc05hbWU7XG5cbiAgICAgIHZhciBwYXJlbnQgPSBnZXRQYXJlbnRFbGVtZW50KHRoaXMucHJvcHMucGFyZW50U2VsZWN0b3IpO1xuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHRoaXMubm9kZSk7XG5cbiAgICAgICFpc1JlYWN0MTYgJiYgdGhpcy5yZW5kZXJQb3J0YWwodGhpcy5wcm9wcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFNuYXBzaG90QmVmb3JlVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdmFyIHByZXZQYXJlbnQgPSBnZXRQYXJlbnRFbGVtZW50KHByZXZQcm9wcy5wYXJlbnRTZWxlY3Rvcik7XG4gICAgICB2YXIgbmV4dFBhcmVudCA9IGdldFBhcmVudEVsZW1lbnQodGhpcy5wcm9wcy5wYXJlbnRTZWxlY3Rvcik7XG4gICAgICByZXR1cm4geyBwcmV2UGFyZW50OiBwcmV2UGFyZW50LCBuZXh0UGFyZW50OiBuZXh0UGFyZW50IH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBfLCBzbmFwc2hvdCkge1xuICAgICAgaWYgKCFfc2FmZUhUTUxFbGVtZW50LmNhblVzZURPTSkgcmV0dXJuO1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNPcGVuID0gX3Byb3BzLmlzT3BlbixcbiAgICAgICAgICBwb3J0YWxDbGFzc05hbWUgPSBfcHJvcHMucG9ydGFsQ2xhc3NOYW1lO1xuXG5cbiAgICAgIGlmIChwcmV2UHJvcHMucG9ydGFsQ2xhc3NOYW1lICE9PSBwb3J0YWxDbGFzc05hbWUpIHtcbiAgICAgICAgdGhpcy5ub2RlLmNsYXNzTmFtZSA9IHBvcnRhbENsYXNzTmFtZTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RvcCB1bm5lY2Vzc2FyeSByZW5kZXJzIGlmIG1vZGFsIGlzIHJlbWFpbmluZyBjbG9zZWRcbiAgICAgIGlmICghcHJldlByb3BzLmlzT3BlbiAmJiAhaXNPcGVuKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2UGFyZW50ID0gc25hcHNob3QucHJldlBhcmVudCxcbiAgICAgICAgICBuZXh0UGFyZW50ID0gc25hcHNob3QubmV4dFBhcmVudDtcblxuICAgICAgaWYgKG5leHRQYXJlbnQgIT09IHByZXZQYXJlbnQpIHtcbiAgICAgICAgcHJldlBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLm5vZGUpO1xuICAgICAgICBuZXh0UGFyZW50LmFwcGVuZENoaWxkKHRoaXMubm9kZSk7XG4gICAgICB9XG5cbiAgICAgICFpc1JlYWN0MTYgJiYgdGhpcy5yZW5kZXJQb3J0YWwodGhpcy5wcm9wcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKCFfc2FmZUhUTUxFbGVtZW50LmNhblVzZURPTSB8fCAhdGhpcy5ub2RlIHx8ICF0aGlzLnBvcnRhbCkgcmV0dXJuO1xuXG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLnBvcnRhbC5zdGF0ZTtcbiAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgdmFyIGNsb3Nlc0F0ID0gc3RhdGUuaXNPcGVuICYmIHRoaXMucHJvcHMuY2xvc2VUaW1lb3V0TVMgJiYgKHN0YXRlLmNsb3Nlc0F0IHx8IG5vdyArIHRoaXMucHJvcHMuY2xvc2VUaW1lb3V0TVMpO1xuXG4gICAgICBpZiAoY2xvc2VzQXQpIHtcbiAgICAgICAgaWYgKCFzdGF0ZS5iZWZvcmVDbG9zZSkge1xuICAgICAgICAgIHRoaXMucG9ydGFsLmNsb3NlV2l0aFRpbWVvdXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5yZW1vdmVQb3J0YWwsIGNsb3Nlc0F0IC0gbm93KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVtb3ZlUG9ydGFsKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICBpZiAoIV9zYWZlSFRNTEVsZW1lbnQuY2FuVXNlRE9NIHx8ICFpc1JlYWN0MTYpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5ub2RlICYmIGlzUmVhY3QxNikge1xuICAgICAgICB0aGlzLm5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY3JlYXRlUG9ydGFsKF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Nb2RhbFBvcnRhbDIuZGVmYXVsdCwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IHRoaXMucG9ydGFsUmVmLFxuICAgICAgICBkZWZhdWx0U3R5bGVzOiBNb2RhbC5kZWZhdWx0U3R5bGVzXG4gICAgICB9LCB0aGlzLnByb3BzKSksIHRoaXMubm9kZSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwic2V0QXBwRWxlbWVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRBcHBFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIGFyaWFBcHBIaWRlci5zZXRFbGVtZW50KGVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLXVudXNlZC1wcm9wLXR5cGVzICovXG5cbiAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0L25vLXVudXNlZC1wcm9wLXR5cGVzICovXG5cbiAgfV0pO1xuXG4gIHJldHVybiBNb2RhbDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbk1vZGFsLnByb3BUeXBlcyA9IHtcbiAgaXNPcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCxcbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuICAgIGNvbnRlbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAgIG92ZXJsYXk6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG4gIH0pLFxuICBwb3J0YWxDbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBib2R5T3BlbkNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGh0bWxPcGVuQ2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuICAgIGJhc2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgYWZ0ZXJPcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGJlZm9yZUNsb3NlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkXG4gIH0pXSksXG4gIG92ZXJsYXlDbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgYmFzZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBhZnRlck9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgYmVmb3JlQ2xvc2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWRcbiAgfSldKSxcbiAgYXBwRWxlbWVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5pbnN0YW5jZU9mKF9zYWZlSFRNTEVsZW1lbnQyLmRlZmF1bHQpLFxuICBvbkFmdGVyT3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvblJlcXVlc3RDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBjbG9zZVRpbWVvdXRNUzogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGFyaWFIaWRlQXBwOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHNob3VsZEZvY3VzQWZ0ZXJSZW5kZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgc2hvdWxkQ2xvc2VPbk92ZXJsYXlDbGljazogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzaG91bGRSZXR1cm5Gb2N1c0FmdGVyQ2xvc2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgcGFyZW50U2VsZWN0b3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgYXJpYTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIHJvbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBjb250ZW50TGFiZWw6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBzaG91bGRDbG9zZU9uRXNjOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIG92ZXJsYXlSZWY6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgY29udGVudFJlZjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59O1xuTW9kYWwuZGVmYXVsdFByb3BzID0ge1xuICBpc09wZW46IGZhbHNlLFxuICBwb3J0YWxDbGFzc05hbWU6IHBvcnRhbENsYXNzTmFtZSxcbiAgYm9keU9wZW5DbGFzc05hbWU6IGJvZHlPcGVuQ2xhc3NOYW1lLFxuICBhcmlhSGlkZUFwcDogdHJ1ZSxcbiAgY2xvc2VUaW1lb3V0TVM6IDAsXG4gIHNob3VsZEZvY3VzQWZ0ZXJSZW5kZXI6IHRydWUsXG4gIHNob3VsZENsb3NlT25Fc2M6IHRydWUsXG4gIHNob3VsZENsb3NlT25PdmVybGF5Q2xpY2s6IHRydWUsXG4gIHNob3VsZFJldHVybkZvY3VzQWZ0ZXJDbG9zZTogdHJ1ZSxcbiAgcGFyZW50U2VsZWN0b3I6IGZ1bmN0aW9uIHBhcmVudFNlbGVjdG9yKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG59O1xuTW9kYWwuZGVmYXVsdFN0eWxlcyA9IHtcbiAgb3ZlcmxheToge1xuICAgIHBvc2l0aW9uOiBcImZpeGVkXCIsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNzUpXCJcbiAgfSxcbiAgY29udGVudDoge1xuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgdG9wOiBcIjQwcHhcIixcbiAgICBsZWZ0OiBcIjQwcHhcIixcbiAgICByaWdodDogXCI0MHB4XCIsXG4gICAgYm90dG9tOiBcIjQwcHhcIixcbiAgICBib3JkZXI6IFwiMXB4IHNvbGlkICNjY2NcIixcbiAgICBiYWNrZ3JvdW5kOiBcIiNmZmZcIixcbiAgICBvdmVyZmxvdzogXCJhdXRvXCIsXG4gICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6IFwidG91Y2hcIixcbiAgICBib3JkZXJSYWRpdXM6IFwiNHB4XCIsXG4gICAgb3V0bGluZTogXCJub25lXCIsXG4gICAgcGFkZGluZzogXCIyMHB4XCJcbiAgfVxufTtcblxuXG4oMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoTW9kYWwpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBNb2RhbDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgTW9kYWwgZnJvbSAncmVhY3QtbW9kYWwnO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuLi8uLi9nbG9iYWwvSGVhZGVyLmpzJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi4vLi4vZ2xvYmFsL0Zvb3Rlci5qcyc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEVkaXRvciwgRWRpdG9yU3RhdGUsIFJpY2hVdGlscywgY29udmVydFRvUmF3LCBjb252ZXJ0RnJvbVJhdyB9IGZyb20gJ2RyYWZ0LWpzJztcbmltcG9ydCB7c3RhdGVUb0hUTUx9IGZyb20gJ2RyYWZ0LWpzLWV4cG9ydC1odG1sJztcblxuXG5heGlvcy5kZWZhdWx0cy54c3JmQ29va2llTmFtZSA9ICdjc3JmdG9rZW4nXG5heGlvcy5kZWZhdWx0cy54c3JmSGVhZGVyTmFtZSA9ICdYLUNTUkZUb2tlbidcblxuY2xhc3MgVmlld0NvbXBhbnlQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKTtcbiAgICAgICAgdGhpcy5lbmFibGVFZGl0TW9kZSA9IHRoaXMuZW5hYmxlRWRpdE1vZGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5lbmFibGVWaWV3TW9kZSA9IHRoaXMuZW5hYmxlVmlld01vZGUuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLnVwZGF0ZUNvbXBhbnlOYW1lID0gdGhpcy51cGRhdGVDb21wYW55TmFtZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnVwZGF0ZVNtYWxsTG9nbyA9IHRoaXMudXBkYXRlU21hbGxMb2dvLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlTGFyZ2VMb2dvID0gdGhpcy51cGRhdGVMYXJnZUxvZ28uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdWJtaXRDb21wYW55Q2hhbmdlcyA9IHRoaXMuc3VibWl0Q29tcGFueUNoYW5nZXMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZWxldGVDb21wYW55ID0gdGhpcy5kZWxldGVDb21wYW55LmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVLZXlDb21tYW5kID0gdGhpcy5oYW5kbGVLZXlDb21tYW5kLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5vblVuZGVybGluZUNsaWNrID0gdGhpcy5vblVuZGVybGluZUNsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25Cb2xkQ2xpY2sgPSB0aGlzLm9uQm9sZENsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25JdGFsaWNDbGljayA9IHRoaXMub25JdGFsaWNDbGljay5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMub25NZWRpdW1DbGljayA9IHRoaXMub25NZWRpdW1DbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uTGFyZ2VDbGljayA9IHRoaXMub25MYXJnZUNsaWNrLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5vbkxlZnRBbGlnbkNsaWNrID0gdGhpcy5vbkxlZnRBbGlnbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25SaWdodEFsaWduQ2xpY2sgPSB0aGlzLm9uUmlnaHRBbGlnbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25KdXN0aWZ5Q2xpY2sgPSB0aGlzLm9uSnVzdGlmeUNsaWNrLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5vbk9yZGVyZWRMaXN0Q2xpY2sgPSB0aGlzLm9uT3JkZXJlZExpc3RDbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uVW5vcmRlcmVkTGlzdENsaWNrID0gdGhpcy5vbk9yZGVyZWRMaXN0Q2xpY2suYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdG9rZW46IHRva2VuLFxuICAgICAgICAgICAgdmlld01vZGU6IHRydWUsXG4gICAgICAgICAgICBlZGl0TW9kZTogZmFsc2UsXG4gICAgICAgICAgICBjb21wYW55SWQ6IHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLmlkLFxuICAgICAgICAgICAgY29tcGFueUluZm86IHt9LFxuICAgICAgICAgICAgcmVkaXJlY3RUb0Rhc2hib2FyZDogZmFsc2UsXG4gICAgICAgICAgICBzbWFsbF9sb2dvOiBudWxsLFxuICAgICAgICAgICAgbGFyZ2VfbG9nbzogbnVsbCxcbiAgICAgICAgICAgIHByZXZpZXdTbWFsbDogbnVsbCxcbiAgICAgICAgICAgIHByZXZpZXdMYXJnZTogbnVsbCxcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ29tcGFueUVuZFBvaW50ID0gYC9jb21wYW55L2NvbXBhbnkvJHt0aGlzLnN0YXRlLmNvbXBhbnlJZH0vYDtcbiAgICAgICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9ICdCZWFyZXIgJytsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKVxuICAgICAgICBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7XG5cbiAgICAgICAgYXhpb3Moe1xuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgICAgIHVybDogZXhpc3RpbmdDb21wYW55RW5kUG9pbnQsIFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0pXVCAnK2xvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpLFxuICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgfSwgIFxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbidcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IHsgXG5cbiAgICAgICBcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdpdmVuQ29udGVudCA9IHJlc3BvbnNlLmRhdGEuZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkQ29udGVudCA9IEpTT04ucGFyc2UoZ2l2ZW5Db250ZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbW11dGFibGVDb250ZW50ID0gY29udmVydEZyb21SYXcocGFyc2VkQ29udGVudCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUluZm86IHJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvclN0YXRlOiBFZGl0b3JTdGF0ZS5jcmVhdGVXaXRoQ29udGVudChpbW11dGFibGVDb250ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcmVzcG9uc2UuZGF0YS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBwcmV2aWV3U21hbGw6ICByZXNwb25zZS5kYXRhLnNtYWxsX2xvZ28sXG4gICAgICAgICAgICAgICAgICAgIHByZXZpZXdMYXJnZTogcmVzcG9uc2UuZGF0YS5sYXJnZV9sb2dvLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXNwb25zZSBmcm9tIGNvbXBhbnknLCByZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudFN0YXRlID0gdGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGh0bWwgPSBzdGF0ZVRvSFRNTChjb250ZW50U3RhdGUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG91dHB1dEh0bWwgPSB7X19odG1sOiBodG1sfVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBodG1sOiBodG1sLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRIdG1sOiBvdXRwdXRIdG1sLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBhbiBlcnJvciB5b1wiLCBlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgIH1cblxuICAgICBvbkNoYW5nZShlZGl0b3JTdGF0ZSkge1xuICAgICBcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBlZGl0b3JTdGF0ZTogZWRpdG9yU3RhdGUsXG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICBjb25zdCBjb250ZW50U3RhdGUgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgICAgICBjb25zb2xlLmxvZygnY29udGVudCBzdGF0ZScsIGNvbnZlcnRUb1Jhdyhjb250ZW50U3RhdGUpKTtcbiAgICAgIH1cblxuXG4gICAgICBoYW5kbGVLZXlDb21tYW5kKGNvbW1hbmQpIHtcbiAgICAgICBjb25zdCBuZXdTdGF0ZSA9IFJpY2hVdGlscy5oYW5kbGVLZXlDb21tYW5kKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsIGNvbW1hbmQpO1xuIFxuICAgICAgIGlmICggbmV3U3RhdGUgKSB7XG4gICAgICAgICB0aGlzLm9uQ2hhbmdlKG5ld1N0YXRlKTtcbiAgICAgICAgIHJldHVybiAnaGFuZGxlZCc7XG4gICAgICAgfVxuICAgICAgIHJldHVybiAnbm90LWhhbmRsZWQnO1xuICAgfVxuXG4gICBvblVuZGVybGluZUNsaWNrKCkge1xuICAgIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdVTkRFUkxJTkUnKSk7XG59XG5cbm9uQm9sZENsaWNrKCkge1xuICB0aGlzLm9uQ2hhbmdlKFJpY2hVdGlscy50b2dnbGVJbmxpbmVTdHlsZSh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLCAnQk9MRCcpKTsgXG59XG5cbm9uSXRhbGljQ2xpY2soKSB7XG4gIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdJVEFMSUMnKSk7IFxufVxuXG5vbk1lZGl1bUNsaWNrKCkge1xuICB0aGlzLm9uQ2hhbmdlKFJpY2hVdGlscy50b2dnbGVJbmxpbmVTdHlsZSh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLCAnVU5ERVJMSU5FJykpO1xufVxuXG5vbkxhcmdlQ2xpY2soKSB7XG4gIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdVTkRFUkxJTkUnKSk7XG59XG5cbm9uTGVmdEFsaWduQ2xpY2soKSB7XG4gIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdVTkRFUkxJTkUnKSk7XG59XG5cbm9uUmlnaHRBbGlnbkNsaWNrKCkge1xuICB0aGlzLm9uQ2hhbmdlKFJpY2hVdGlscy50b2dnbGVJbmxpbmVTdHlsZSh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLCAnVU5ERVJMSU5FJykpO1xufVxuXG5vbkp1c3RpZnlDbGljaygpIHtcbiAgdGhpcy5vbkNoYW5nZShSaWNoVXRpbHMudG9nZ2xlSW5saW5lU3R5bGUodGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZSwgJ1VOREVSTElORScpKTtcbn1cblxub25PcmRlcmVkTGlzdENsaWNrKCkge1xuICB0aGlzLm9uQ2hhbmdlKFJpY2hVdGlscy50b2dnbGVJbmxpbmVTdHlsZSh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLCAnVU5ERVJMSU5FJykpO1xufVxuXG5vblVub3JkZXJlZExpc3RDbGljaygpIHtcbiAgdGhpcy5vbkNoYW5nZShSaWNoVXRpbHMudG9nZ2xlSW5saW5lU3R5bGUodGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZSwgJ1VOREVSTElORScpKTtcbn1cblxuZW5hYmxlVmlld01vZGUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgIHtcbiAgICAgICAgdmlld01vZGU6IHRydWUsXG4gICAgICAgIGVkaXRNb2RlOiBmYWxzZVxuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBlbmFibGVFZGl0TW9kZSgpIHtcbiAgICB0aGlzLnNldFN0YXRlKFxuICAgICAge1xuICAgICAgICB2aWV3TW9kZTogZmFsc2UsXG4gICAgICAgIGVkaXRNb2RlOiB0cnVlXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG51cGRhdGVDb21wYW55TmFtZShlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG5hbWU6IGUudGFyZ2V0LnZhbHVlXG4gICAgfSk7XG59XG5cbnVwZGF0ZVNtYWxsTG9nbyhlKSB7XG4gICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgbGV0IGZpbGUgPSBlLnRhcmdldC5maWxlc1swXTtcblxuICAgIHJlYWRlci5vbmxvYWRlbmQgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcHJldmlld1NtYWxsOiByZWFkZXIucmVzdWx0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKVxuXG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc21hbGxfbG9nbzogZS50YXJnZXQuZmlsZXNbMF1cbiAgICB9KVxufVxuXG51cGRhdGVMYXJnZUxvZ28oZSkge1xuICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGxldCBmaWxlID0gZS50YXJnZXQuZmlsZXNbMF07XG5cbiAgICByZWFkZXIub25sb2FkZW5kID0gKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHByZXZpZXdMYXJnZTogcmVhZGVyLnJlc3VsdFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSlcblxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxhcmdlX2xvZ286IGUudGFyZ2V0LmZpbGVzWzBdXG4gICAgfSlcbn1cblxuc3VibWl0Q29tcGFueUNoYW5nZXMoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IGV4aXN0aW5nQ29tcGFueUVuZFBvaW50ID0gYC9jb21wYW55L2NvbXBhbnkvJHt0aGlzLnN0YXRlLmNvbXBhbnlJZH0vYDtcbiAgICBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnQXV0aG9yaXphdGlvbiddID0gJ0pXVCAnK2xvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpXG4gICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5wb3N0WydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuXG4gICAgY29uc3Qgc3RyaW5naWZpZWRDb250ZW50ID0gSlNPTi5zdHJpbmdpZnkoY29udmVydFRvUmF3KHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSkpO1xuXG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ25hbWUnLCB0aGlzLnN0YXRlLm5hbWUpO1xuICAgIGZvcm1EYXRhLmFwcGVuZCgnZGVzY3JpcHRpb24nLCBzdHJpbmdpZmllZENvbnRlbnQpO1xuXG4gICAgaWYgKCB0aGlzLnN0YXRlLnNtYWxsX2xvZ28gKSB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnc21hbGxfbG9nbycsIHRoaXMuc3RhdGUuc21hbGxfbG9nbywpO1xuICAgIH1cblxuICAgIGlmICggdGhpcy5zdGF0ZS5sYXJnZV9sb2dvICkge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2xhcmdlX2xvZ28nLCB0aGlzLnN0YXRlLmxhcmdlX2xvZ28sKTtcbiAgICB9XG4gICAgXG4gICAgXG5cbiAgICBheGlvcyh7XG4gICAgICAgIG1ldGhvZDogJ3B1dCcsXG4gICAgICAgIHVybDogZXhpc3RpbmdDb21wYW55RW5kUG9pbnQsIFxuICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnSldUICcrbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyksXG4gICAgICAgICAgICAnY29udGVudC10eXBlJzogJ211bHRpcGFydC1mb3JtLWRhdGEnXG4gICAgICAgICAgICB9LCBcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbidcbiAgICB9KVxuICAgIC50aGVuKCByZXNwb25zZSA9PiB7IFxuXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgcmVkaXJlY3RUb0Rhc2hib2FyZDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgIFxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZm9ybUVycm9yOiBlcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBhbiBlcnJvciB5b1wiLCBlcnJvcik7XG4gICAgICB9KVxufVxuXG5kZWxldGVDb21wYW55KGUpIHtcblxuICAgIGNvbnN0IGV4aXN0aW5nQ29tcGFueUVuZFBvaW50ID0gYC9jb21wYW55L2NvbXBhbnkvJHt0aGlzLnN0YXRlLmNvbXBhbnlJZH0vYDtcbiAgICBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnQXV0aG9yaXphdGlvbiddID0gJ0pXVCAnK2xvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpXG4gICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5wb3N0WydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuXG4gICAgYXhpb3Moe1xuICAgICAgICBtZXRob2Q6ICdkZWxldGUnLFxuICAgICAgICB1cmw6IGV4aXN0aW5nQ29tcGFueUVuZFBvaW50LFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdKV1QgJytsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICAgIH0sIFxuICAgICAgICByZXNwb25zZVR5cGU6ICdqc29uJ1xuICAgIH0pXG4gICAgLnRoZW4oIHJlc3BvbnNlID0+IHsgXG5cbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjA0KSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICByZWRpcmVjdFRvRGFzaGJvYXJkOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICB9XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcInRoaXMgaXMgYW4gZXJyb3IgeW9cIiwgZXJyb3IpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGZvcm1FcnJvcjogZXJyb3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgfSlcbn1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucmVkaXJlY3RUb0Rhc2hib2FyZCkge1xuICAgICAgICAgICAgcmV0dXJuIDxSZWRpcmVjdCB0bz0nL2VtcGxveWVyX2Rhc2hib2FyZCcvPlxuICAgICAgICB9IGVsc2UgeyBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPEhlYWRlci8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJ2aWV3LWNvbXBhbnktd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUudmlld01vZGUgJiYgXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuY29tcGFueUluZm8uc21hbGxfbG9nbyAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWV3LWxvZ29cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9nby1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNtYWxsIExvZ288L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9nby1pbWFnZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt0aGlzLnN0YXRlLnByZXZpZXdTbWFsbH0gYWx0PVwiY29tcGFueSBsb2dvXCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuY29tcGFueUluZm8ubGFyZ2VfbG9nbyAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWV3LWxvZ29cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9nby1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkxhcmdlIExvZ288L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9nby1pbWFnZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt0aGlzLnN0YXRlLnByZXZpZXdMYXJnZX0gYWx0PVwiY29tcGFueSBsb2dvXCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBpZD1cInZpZXctbmFtZS1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwidmlldy1uYW1lLWxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5Db21wYW55IE5hbWU6PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwidmlldy1uYW1lLW5hbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3RoaXMuc3RhdGUubmFtZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwidmlldy1kZXNjcmlwdGlvbi10aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+Q29tcGFueSBEZXNjcmlwdGlvbjwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt0aGlzLnN0YXRlLm91dHB1dEh0bWx9PjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gaWQ9XCJlZGl0LWJ1dHRvbi1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuZW5hYmxlRWRpdE1vZGV9IHR5cGU9XCJidXR0b25cIj5FZGl0IENvbXBhbnk8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB7IHRoaXMuc3RhdGUuZWRpdE1vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuc3VibWl0Q29tcGFueUNoYW5nZXN9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBpZD1cImVkaXQtbmFtZS1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJlZGl0LW5hbWUtbGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Db21wYW55IE5hbWU6PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiZWRpdC1uYW1lLW5hbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB2YWx1ZT17dGhpcy5zdGF0ZS5uYW1lfSBvbkNoYW5nZT17dGhpcy51cGRhdGVDb21wYW55TmFtZX0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImNvbXBhbnktZWRpdC1sb2dvc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiY29tcGFueS11cGRhdGUtbG9nby1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21wYW55LXVwZGF0ZS1sb2dvLW5hbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+U21hbGwgTG9nbzo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUucHJldmlld1NtYWxsICYmIFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic21hbGwtbG9nby1wcmV2aWV3LWltYWdlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17dGhpcy5zdGF0ZS5wcmV2aWV3U21hbGx9IGFsdD1cImNvbXBhbnkgbG9nb1wiLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwZGF0ZS1sb2dvLWlucHV0LWZpbGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZmlsZVwiIG5hbWU9XCJzbWFsbF9sb2dvXCIgb25DaGFuZ2U9e3RoaXMudXBkYXRlU21hbGxMb2dvfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiY29tcGFueS11cGRhdGUtbG9nby1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21wYW55LXVwZGF0ZS1sb2dvLW5hbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+TGFyZ2UgTG9nbzo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5wcmV2aWV3TGFyZ2UgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxhcmdlLWxvZ28tcHJldmlldy1pbWFnZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt0aGlzLnN0YXRlLnByZXZpZXdMYXJnZX0gYWx0PVwiY29tcGFueSBsb2dvXCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBkYXRlLWxvZ28taW5wdXQtZmlsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgbmFtZT1cImxhcmdlX2xvZ29cIiBvbkNoYW5nZT17dGhpcy51cGRhdGVMYXJnZUxvZ299Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gaWQ9XCJlZGl0LWNvbXBhbnktZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGlkPVwiY29tcGFueS1kZXNjcmlwdGlvbi10aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5Db21wYW55IERlc2NyaXB0aW9uPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGlkPVwiZWRpdG9yLWJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMub25VbmRlcmxpbmVDbGlja30gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImVkaXRvci1idXR0b25cIj48aSBjbGFzcz1cImZhcyBmYS11bmRlcmxpbmVcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLm9uQm9sZENsaWNrfSB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiZWRpdG9yLWJ1dHRvblwiPjxpIGNsYXNzPVwiZmFzIGZhLWJvbGRcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLm9uSXRhbGljQ2xpY2t9IHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJlZGl0b3ItYnV0dG9uXCI+PGkgY2xhc3M9XCJmYXMgZmEtaXRhbGljXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gaWQ9XCJlZGl0LWNvbXBhbnktZWRpdG9yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEVkaXRvciBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3JTdGF0ZT17dGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlS2V5Q29tbWFuZD17dGhpcy5oYW5kbGVLZXlDb21tYW5kfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGlkPVwiZWRpdC1jb21wYW55LXN1Ym1pdC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiZWRpdC1jYW5jZWwtZGVsZXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5lbmFibGVWaWV3TW9kZX0gdHlwZT1cImJ1dHRvblwiIGlkPVwiY2FuY2VsLWVkaXQtY2hhbmdlc1wiPkNhbmNlbCBDaGFuZ2VzPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5kZWxldGVDb21wYW55fSB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJkZWxldGUtZWRpdFwiPkRlbGV0ZSBDb21wYW55PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuZm9ybUVycm9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImZvcm0tZXJyb3JcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+U29tZXRoaW5nIHdlbnQgd3JvbmcsIHlvdXIgY29tcGFueSB3YXMgbm90IHVwZGF0ZWQuPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QbGVhc2UgdHJ5IGFnYWluIG9yIGNvbnRhY3QgbWFyaWx5bkB0aGVuZXh0c2VwLmlvIGZvciBoZWxwPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8Rm9vdGVyLz5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgIH1cbn1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBWaWV3Q29tcGFueVBhZ2U7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuLi8uLi9nbG9iYWwvSGVhZGVyLmpzJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi4vLi4vZ2xvYmFsL0Zvb3Rlci5qcyc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEVkaXRvciwgRWRpdG9yU3RhdGUsIFJpY2hVdGlscywgY29udmVydFRvUmF3IH0gZnJvbSAnZHJhZnQtanMnO1xuXG5jbGFzcyBOZXdDb21wYW55UGFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Jlc3BvbnNlVG9rZW4nKVxuICAgICAgICB0aGlzLnVwZGF0ZUNvbXBhbnlOYW1lID0gdGhpcy51cGRhdGVDb21wYW55TmFtZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnVwZGF0ZVNtYWxsTG9nbyA9IHRoaXMudXBkYXRlU21hbGxMb2dvLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlTGFyZ2VMb2dvID0gdGhpcy51cGRhdGVMYXJnZUxvZ28uYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLnN1Ym1pdE5ld0NvbXBhbnkgPSB0aGlzLnN1Ym1pdE5ld0NvbXBhbnkuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVLZXlDb21tYW5kID0gdGhpcy5oYW5kbGVLZXlDb21tYW5kLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5vblVuZGVybGluZUNsaWNrID0gdGhpcy5vblVuZGVybGluZUNsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25Cb2xkQ2xpY2sgPSB0aGlzLm9uQm9sZENsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25JdGFsaWNDbGljayA9IHRoaXMub25JdGFsaWNDbGljay5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMub25NZWRpdW1DbGljayA9IHRoaXMub25NZWRpdW1DbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uTGFyZ2VDbGljayA9IHRoaXMub25MYXJnZUNsaWNrLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5vbkxlZnRBbGlnbkNsaWNrID0gdGhpcy5vbkxlZnRBbGlnbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25SaWdodEFsaWduQ2xpY2sgPSB0aGlzLm9uUmlnaHRBbGlnbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25KdXN0aWZ5Q2xpY2sgPSB0aGlzLm9uSnVzdGlmeUNsaWNrLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5vbk9yZGVyZWRMaXN0Q2xpY2sgPSB0aGlzLm9uT3JkZXJlZExpc3RDbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uVW5vcmRlcmVkTGlzdENsaWNrID0gdGhpcy5vbk9yZGVyZWRMaXN0Q2xpY2suYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29tcGFueU5hbWU6IFwiXCIsXG4gICAgICAgICAgICBjb21wYW55RGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICBzbWFsbF9sb2dvOiBudWxsLFxuICAgICAgICAgICAgbGFyZ2VfbG9nbzogbnVsbCxcbiAgICAgICAgICAgIHRva2VuOiB0b2tlbixcbiAgICAgICAgICAgIGVkaXRvclN0YXRlOiBFZGl0b3JTdGF0ZS5jcmVhdGVFbXB0eSgpLFxuICAgICAgICAgICAgcmVkaXJlY3RUb0Rhc2hib2FyZDogZmFsc2UsXG4gICAgICAgICAgICBmb3JtRXJyb3I6IFwiXCJcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZUNvbXBhbnlOYW1lKGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjb21wYW55TmFtZTogZS50YXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICB1cGRhdGVTbWFsbExvZ28oZSkge1xuXG4gICAgICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICBsZXQgZmlsZSA9IGUudGFyZ2V0LmZpbGVzWzBdO1xuICAgIFxuICAgICAgICByZWFkZXIub25sb2FkZW5kID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc21hbGxMb2dvUHJldmlldzogcmVhZGVyLnJlc3VsdFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpXG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzbWFsbF9sb2dvOiBlLnRhcmdldC5maWxlc1swXVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHVwZGF0ZUxhcmdlTG9nbyhlKSB7XG5cbiAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgIGxldCBmaWxlID0gZS50YXJnZXQuZmlsZXNbMF07XG4gICAgXG4gICAgICAgIHJlYWRlci5vbmxvYWRlbmQgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsYXJnZUxvZ29QcmV2aWV3OiByZWFkZXIucmVzdWx0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSlcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxhcmdlX2xvZ286IGUudGFyZ2V0LmZpbGVzWzBdXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgb25DaGFuZ2UoZWRpdG9yU3RhdGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBlZGl0b3JTdGF0ZTogZWRpdG9yU3RhdGUsXG4gICAgICAgICAgICBzdHJpbmdpZmllZENvbnRlbnQ6IEpTT04uc3RyaW5naWZ5KGNvbnZlcnRUb1JhdyhlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpKSksXG4gICAgICAgICAgICBwYXJzZWRDb250ZW50OiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbnZlcnRUb1JhdyggZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSApKSlcblxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlS2V5Q29tbWFuZChjb21tYW5kKSB7XG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0gUmljaFV0aWxzLmhhbmRsZUtleUNvbW1hbmQodGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZSwgY29tbWFuZCk7XG4gIFxuICAgICAgICBpZiAoIG5ld1N0YXRlICkge1xuICAgICAgICAgIHRoaXMub25DaGFuZ2UobmV3U3RhdGUpO1xuICAgICAgICAgIHJldHVybiAnaGFuZGxlZCc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdub3QtaGFuZGxlZCc7XG4gICAgfVxuICBcbiAgICBvblVuZGVybGluZUNsaWNrKCkge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKFJpY2hVdGlscy50b2dnbGVJbmxpbmVTdHlsZSh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLCAnVU5ERVJMSU5FJykpO1xuICAgIH1cbiAgXG4gICAgb25Cb2xkQ2xpY2soKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKFJpY2hVdGlscy50b2dnbGVJbmxpbmVTdHlsZSh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLCAnQk9MRCcpKTsgXG4gICAgfVxuICBcbiAgICBvbkl0YWxpY0NsaWNrKCkge1xuICAgICAgdGhpcy5vbkNoYW5nZShSaWNoVXRpbHMudG9nZ2xlSW5saW5lU3R5bGUodGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZSwgJ0lUQUxJQycpKTsgXG4gICAgfVxuICBcbiAgICBvbk1lZGl1bUNsaWNrKCkge1xuICAgICAgdGhpcy5vbkNoYW5nZShSaWNoVXRpbHMudG9nZ2xlSW5saW5lU3R5bGUodGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZSwgJ1VOREVSTElORScpKTtcbiAgICB9XG4gIFxuICAgIG9uTGFyZ2VDbGljaygpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdVTkRFUkxJTkUnKSk7XG4gICAgfVxuICBcbiAgICBvbkxlZnRBbGlnbkNsaWNrKCkge1xuICAgICAgdGhpcy5vbkNoYW5nZShSaWNoVXRpbHMudG9nZ2xlSW5saW5lU3R5bGUodGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZSwgJ1VOREVSTElORScpKTtcbiAgICB9XG4gIFxuICAgIG9uUmlnaHRBbGlnbkNsaWNrKCkge1xuICAgICAgdGhpcy5vbkNoYW5nZShSaWNoVXRpbHMudG9nZ2xlSW5saW5lU3R5bGUodGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZSwgJ1VOREVSTElORScpKTtcbiAgICB9XG4gIFxuICAgIG9uSnVzdGlmeUNsaWNrKCkge1xuICAgICAgdGhpcy5vbkNoYW5nZShSaWNoVXRpbHMudG9nZ2xlSW5saW5lU3R5bGUodGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZSwgJ1VOREVSTElORScpKTtcbiAgICB9XG4gIFxuICAgIG9uT3JkZXJlZExpc3RDbGljaygpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdVTkRFUkxJTkUnKSk7XG4gICAgfVxuICBcbiAgICBvblVub3JkZXJlZExpc3RDbGljaygpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoUmljaFV0aWxzLnRvZ2dsZUlubGluZVN0eWxlKHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUsICdVTkRFUkxJTkUnKSk7XG4gICAgfVxuXG4gIHN1Ym1pdE5ld0NvbXBhbnkoZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBjb25zdCBuZXdDb21wYW55RW5kUG9pbnQgPSAnL2NvbXBhbnkvY29tcGFueS8nO1xuICAgICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9ICdCZWFyZXIgJytsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKVxuICAgICAgY29uc29sZS5sb2coJ0JlYXJlciAnK2xvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpKVxuICAgICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5wb3N0WydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuXG4gICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgZm9ybURhdGEuYXBwZW5kKCduYW1lJywgdGhpcy5zdGF0ZS5jb21wYW55TmFtZSk7XG5cbiAgICAgIGlmICggdGhpcy5zdGF0ZS5zbWFsbF9sb2dvICkge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ3NtYWxsX2xvZ28nLCB0aGlzLnN0YXRlLnNtYWxsX2xvZ28sKTtcbiAgICB9XG5cbiAgICBpZiAoIHRoaXMuc3RhdGUubGFyZ2VfbG9nbyApIHtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdsYXJnZV9sb2dvJywgdGhpcy5zdGF0ZS5sYXJnZV9sb2dvLCk7XG4gICAgfVxuXG4gICAgaWYgKCB0aGlzLnN0YXRlLnN0cmluZ2lmaWVkQ29udGVudCApIHtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdkZXNjcmlwdGlvbicsIHRoaXMuc3RhdGUuc3RyaW5naWZpZWRDb250ZW50KTtcbiAgICB9XG5cblxuICAgICAgYXhpb3Moe1xuICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICAgIHVybDogbmV3Q29tcGFueUVuZFBvaW50LCBcbiAgICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0pXVCAnK2xvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpLFxuICAgICAgICAgICAgICAnY29udGVudC10eXBlJzogJ211bHRpcGFydC1mb3JtLWRhdGEnXG4gICAgICAgICAgICAgIH0sIFxuICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nXG4gICAgICB9KVxuICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IHsgXG4gXG4gICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAxKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICByZWRpcmVjdFRvRGFzaGJvYXJkOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBhbiBlcnJvciB5b1wiLCBlcnJvcik7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBmb3JtRXJyb3I6IGVycm9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgIFxuICB9XG5cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucmVkaXJlY3RUb0Rhc2hib2FyZCkge1xuICAgICAgICAgICAgcmV0dXJuIDxSZWRpcmVjdCB0bz0nL2VtcGxveWVyX2Rhc2hib2FyZCcvPlxuICAgICAgICB9IGVsc2UgeyBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPEhlYWRlci8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJuZXctY29tcGFueS13cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5zdWJtaXROZXdDb21wYW55fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+Q3JlYXRlIGEgbmV3IGNvbXBhbnk8L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm5ldy1jb21wYW55LXNlY3Rpb25cIj4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV3LWNvbXBhbnktbGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkNvbXBhbnkgTmFtZTo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5ldy1jb21wYW55LWlucHV0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB2YWx1ZT17dGhpcy5zdGF0ZS5jb21wYW55TmFtZX0gaWQ9XCJjb21wYW55LW5hbWUtaW5wdXRcIiBvbkNoYW5nZT17dGhpcy51cGRhdGVDb21wYW55TmFtZX0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwibmV3LWNvbXBhbnktdXBkYXRlLWxvZ28tc2VjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbXBhbnktdXBkYXRlLWxvZ28tbmFtZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+U21hbGwgTG9nbzo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNtYWxsTG9nb1ByZXZpZXcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJzbWFsbC1sb2dvLXByZXZpZXctaW1hZ2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17dGhpcy5zdGF0ZS5zbWFsbExvZ29QcmV2aWV3fSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZXctY29tcGFueS1pbnB1dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgbmFtZT1cInNtYWxsX2xvZ29cIiBvbkNoYW5nZT17dGhpcy51cGRhdGVTbWFsbExvZ299Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm5ldy1jb21wYW55LXVwZGF0ZS1sb2dvLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21wYW55LXVwZGF0ZS1sb2dvLW5hbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkxhcmdlIExvZ286PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5sYXJnZUxvZ29QcmV2aWV3ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwibGFyZ2UtbG9nby1wcmV2aWV3LWltYWdlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3RoaXMuc3RhdGUubGFyZ2VMb2dvUHJldmlld30gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZXctY29tcGFueS1pbnB1dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgbmFtZT1cImxhcmdlX2xvZ29cIiBvbkNoYW5nZT17dGhpcy51cGRhdGVMYXJnZUxvZ299Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGlkPVwibmV3LWNvbXBhbnktZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gaWQ9XCJjb21wYW55LWRlc2NyaXB0aW9uLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Db21wYW55IERlc2NyaXB0aW9uOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBpZD1cImVkaXRvci1idXR0b25zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMub25VbmRlcmxpbmVDbGlja30gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImVkaXRvci1idXR0b25cIj48aSBjbGFzcz1cImZhcyBmYS11bmRlcmxpbmVcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMub25Cb2xkQ2xpY2t9IHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJlZGl0b3ItYnV0dG9uXCI+PGkgY2xhc3M9XCJmYXMgZmEtYm9sZFwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5vbkl0YWxpY0NsaWNrfSB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiZWRpdG9yLWJ1dHRvblwiPjxpIGNsYXNzPVwiZmFzIGZhLWl0YWxpY1wiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwibmV3LWNvbXBhbnktZWRpdG9yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxFZGl0b3IgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3JTdGF0ZT17dGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVLZXlDb21tYW5kPXt0aGlzLmhhbmRsZUtleUNvbW1hbmR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGlkPVwibmV3LWNvbXBhbnktc3VibWl0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5mb3JtRXJyb3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiZm9ybS1lcnJvclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Tb21ldGhpbmcgd2VudCB3cm9uZywgeW91ciBuZXcgY29tcGFueSB3YXMgbm90IGNyZWF0ZWQuPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QbGVhc2UgdHJ5IGFnYWluIG9yIGNvbnRhY3QgbWFyaWx5bkB0aGVuZXh0c2VwLmlvIGZvciBoZWxwPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8Rm9vdGVyLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5ld0NvbXBhbnlQYWdlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9kcmFmdEpzID0gcmVxdWlyZSgnZHJhZnQtanMnKTtcblxudmFyIF9nZXRTZWxlY3RlZEJsb2NrcyA9IHJlcXVpcmUoJy4vZ2V0U2VsZWN0ZWRCbG9ja3MnKTtcblxudmFyIF9nZXRTZWxlY3RlZEJsb2NrczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRTZWxlY3RlZEJsb2Nrcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQ2FsbHMgYSBwcm92aWRlZCBgbW9kaWZpZXJgIGZ1bmN0aW9uIHdpdGggYSBzZWxlY3Rpb24gZm9yIGVhY2hcbiAqIHNlbGVjdGVkIGJsb2NrIGluIHRoZSBjdXJyZW50IGVkaXRvciBzZWxlY3Rpb24uIFBhc3NlcyB0aHJvdWdoIGFkZGl0aW9uYWxcbiAqIGFyZ3VtZW50cyB0byB0aGUgbW9kaWZpZXIuXG4gKlxuICogTm90ZTogQXQgdGhlIG1vbWVudCBpdCB3aWxsIHJldGFpbiB0aGUgb3JpZ2luYWwgc2VsZWN0aW9uIGFuZCBvdmVycmlkZVxuICogcG9zc2libGUgc2VsZWN0aW9uIGNoYW5nZXMgZnJvbSBtb2RpZmllcnNcbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGVkaXRvclN0YXRlIFRoZSBjdXJyZW50IGRyYWZ0LmpzIGVkaXRvciBzdGF0ZSBvYmplY3RcbiAqXG4gKiBAcGFyYW0gIHtmdW5jdGlvbn0gbW9kaWZpZXIgIEEgbW9kaWZpZXIgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE11c3QgaGF2ZSB0aGUgc2lnbmF0dXJlIChlZGl0b3JTdGF0ZSwgc2VsZWN0aW9uLCAuLi4pXG4gKlxuICogQHBhcmFtICB7bWl4ZWR9IC4uLmFyZ3MgICAgICBBZGRpdGlvbmFsIGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgdGhyb3VnaCB0byB0aGUgbW9kaWZpZXJcbiAqXG4gKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBuZXcgZWRpdG9yIHN0YXRlXG4gKi9cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChlZGl0b3JTdGF0ZSwgbW9kaWZpZXIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgY29udGVudFN0YXRlID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcblxuICB2YXIgc3RhcnRLZXkgPSBjdXJyZW50U2VsZWN0aW9uLmdldFN0YXJ0S2V5KCk7XG4gIHZhciBlbmRLZXkgPSBjdXJyZW50U2VsZWN0aW9uLmdldEVuZEtleSgpO1xuICB2YXIgc3RhcnRPZmZzZXQgPSBjdXJyZW50U2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCk7XG4gIHZhciBlbmRPZmZzZXQgPSBjdXJyZW50U2VsZWN0aW9uLmdldEVuZE9mZnNldCgpO1xuXG4gIHZhciBpc1NhbWVCbG9jayA9IHN0YXJ0S2V5ID09PSBlbmRLZXk7XG4gIHZhciBzZWxlY3RlZEJsb2NrcyA9ICgwLCBfZ2V0U2VsZWN0ZWRCbG9ja3MyLmRlZmF1bHQpKGNvbnRlbnRTdGF0ZSwgc3RhcnRLZXksIGVuZEtleSk7XG5cbiAgdmFyIGZpbmFsRWRpdG9yU3RhdGUgPSBlZGl0b3JTdGF0ZTtcbiAgc2VsZWN0ZWRCbG9ja3MuZm9yRWFjaChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICB2YXIgY3VycmVudEJsb2NrS2V5ID0gYmxvY2suZ2V0S2V5KCk7XG4gICAgdmFyIHNlbGVjdGlvblN0YXJ0ID0gc3RhcnRPZmZzZXQ7XG4gICAgdmFyIHNlbGVjdGlvbkVuZCA9IGVuZE9mZnNldDtcblxuICAgIGlmIChjdXJyZW50QmxvY2tLZXkgPT09IHN0YXJ0S2V5KSB7XG4gICAgICBzZWxlY3Rpb25TdGFydCA9IHN0YXJ0T2Zmc2V0O1xuICAgICAgc2VsZWN0aW9uRW5kID0gaXNTYW1lQmxvY2sgPyBlbmRPZmZzZXQgOiBibG9jay5nZXRUZXh0KCkubGVuZ3RoO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudEJsb2NrS2V5ID09PSBlbmRLZXkpIHtcbiAgICAgIHNlbGVjdGlvblN0YXJ0ID0gaXNTYW1lQmxvY2sgPyBzdGFydE9mZnNldCA6IDA7XG4gICAgICBzZWxlY3Rpb25FbmQgPSBlbmRPZmZzZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGlvblN0YXJ0ID0gMDtcbiAgICAgIHNlbGVjdGlvbkVuZCA9IGJsb2NrLmdldFRleHQoKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIHNlbGVjdGlvbiA9IG5ldyBfZHJhZnRKcy5TZWxlY3Rpb25TdGF0ZSh7XG4gICAgICBhbmNob3JLZXk6IGN1cnJlbnRCbG9ja0tleSxcbiAgICAgIGFuY2hvck9mZnNldDogc2VsZWN0aW9uU3RhcnQsXG4gICAgICBmb2N1c0tleTogY3VycmVudEJsb2NrS2V5LFxuICAgICAgZm9jdXNPZmZzZXQ6IHNlbGVjdGlvbkVuZFxuICAgIH0pO1xuXG4gICAgZmluYWxFZGl0b3JTdGF0ZSA9IG1vZGlmaWVyLmFwcGx5KHVuZGVmaW5lZCwgW2ZpbmFsRWRpdG9yU3RhdGUsIHNlbGVjdGlvbl0uY29uY2F0KGFyZ3MpKTtcbiAgfSk7XG5cbiAgcmV0dXJuIF9kcmFmdEpzLkVkaXRvclN0YXRlLmZvcmNlU2VsZWN0aW9uKGZpbmFsRWRpdG9yU3RhdGUsIGN1cnJlbnRTZWxlY3Rpb24pO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZ2V0U2VsZWN0ZWRCbG9ja3MgPSByZXF1aXJlKCcuL2dldFNlbGVjdGVkQmxvY2tzJyk7XG5cbnZhciBfZ2V0U2VsZWN0ZWRCbG9ja3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0U2VsZWN0ZWRCbG9ja3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3RyYXRlZ3kpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlZGl0b3JTdGF0ZSwgc2VsZWN0aW9uKSB7XG4gICAgdmFyIGNvbnRlbnRTdGF0ZSA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSBzZWxlY3Rpb24gfHwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gICAgdmFyIHN0YXJ0S2V5ID0gY3VycmVudFNlbGVjdGlvbi5nZXRTdGFydEtleSgpO1xuICAgIHZhciBlbmRLZXkgPSBjdXJyZW50U2VsZWN0aW9uLmdldEVuZEtleSgpO1xuICAgIHZhciBzdGFydE9mZnNldCA9IGN1cnJlbnRTZWxlY3Rpb24uZ2V0U3RhcnRPZmZzZXQoKTtcbiAgICB2YXIgZW5kT2Zmc2V0ID0gY3VycmVudFNlbGVjdGlvbi5nZXRFbmRPZmZzZXQoKTtcblxuICAgIHZhciBpc1NhbWVCbG9jayA9IHN0YXJ0S2V5ID09PSBlbmRLZXk7XG4gICAgdmFyIHNlbGVjdGVkQmxvY2tzID0gKDAsIF9nZXRTZWxlY3RlZEJsb2NrczIuZGVmYXVsdCkoY29udGVudFN0YXRlLCBzdGFydEtleSwgZW5kS2V5KTtcbiAgICB2YXIgZW50aXR5Rm91bmQgPSBmYWxzZTtcblxuICAgIC8vIFdlIGhhdmUgdG8gc2hpZnQgdGhlIG9mZnNldCB0byBub3QgZ2V0IGZhbHNlIHBvc2l0aXZlcyB3aGVuIHNlbGVjdGluZ1xuICAgIC8vIGEgY2hhcmFjdGVyIGp1c3QgYmVmb3JlIG9yIGFmdGVyIGFuIGVudGl0eVxuICAgIHZhciBmaW5hbFN0YXJ0T2Zmc2V0ID0gc3RhcnRPZmZzZXQgKyAxO1xuICAgIHZhciBmaW5hbEVuZE9mZnNldCA9IGVuZE9mZnNldCAtIDE7XG5cbiAgICBzZWxlY3RlZEJsb2Nrcy5mb3JFYWNoKGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgc3RyYXRlZ3koYmxvY2ssIGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIGlmIChlbnRpdHlGb3VuZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBibG9ja0tleSA9IGJsb2NrLmdldEtleSgpO1xuXG4gICAgICAgIGlmIChpc1NhbWVCbG9jayAmJiAoZW5kIDwgZmluYWxTdGFydE9mZnNldCB8fCBzdGFydCA+IGZpbmFsRW5kT2Zmc2V0KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChibG9ja0tleSA9PT0gc3RhcnRLZXkgJiYgZW5kIDwgZmluYWxTdGFydE9mZnNldCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChibG9ja0tleSA9PT0gZW5kS2V5ICYmIHN0YXJ0ID4gZmluYWxFbmRPZmZzZXQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBlbnRpdHlGb3VuZCA9IHRydWU7XG4gICAgICB9LCBjb250ZW50U3RhdGUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVudGl0eUZvdW5kO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkVNUFRZX1NFVCA9IHVuZGVmaW5lZDtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldEVudGl0eVJhbmdlcztcblxudmFyIF9pbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIEVNUFRZX1NFVCA9IGV4cG9ydHMuRU1QVFlfU0VUID0gbmV3IF9pbW11dGFibGUuT3JkZXJlZFNldCgpO1xuZnVuY3Rpb24gZ2V0RW50aXR5UmFuZ2VzKHRleHQsIGNoYXJNZXRhTGlzdCkge1xuICB2YXIgY2hhckVudGl0eSA9IG51bGw7XG4gIHZhciBwcmV2Q2hhckVudGl0eSA9IG51bGw7XG4gIHZhciByYW5nZXMgPSBbXTtcbiAgdmFyIHJhbmdlU3RhcnQgPSAwO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGV4dC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHByZXZDaGFyRW50aXR5ID0gY2hhckVudGl0eTtcbiAgICB2YXIgbWV0YSA9IGNoYXJNZXRhTGlzdC5nZXQoaSk7XG4gICAgY2hhckVudGl0eSA9IG1ldGEgPyBtZXRhLmdldEVudGl0eSgpIDogbnVsbDtcbiAgICBpZiAoaSA+IDAgJiYgY2hhckVudGl0eSAhPT0gcHJldkNoYXJFbnRpdHkpIHtcbiAgICAgIHJhbmdlcy5wdXNoKFtwcmV2Q2hhckVudGl0eSwgZ2V0U3R5bGVSYW5nZXModGV4dC5zbGljZShyYW5nZVN0YXJ0LCBpKSwgY2hhck1ldGFMaXN0LnNsaWNlKHJhbmdlU3RhcnQsIGkpKV0pO1xuICAgICAgcmFuZ2VTdGFydCA9IGk7XG4gICAgfVxuICB9XG4gIHJhbmdlcy5wdXNoKFtjaGFyRW50aXR5LCBnZXRTdHlsZVJhbmdlcyh0ZXh0LnNsaWNlKHJhbmdlU3RhcnQpLCBjaGFyTWV0YUxpc3Quc2xpY2UocmFuZ2VTdGFydCkpXSk7XG4gIHJldHVybiByYW5nZXM7XG59XG5cbmZ1bmN0aW9uIGdldFN0eWxlUmFuZ2VzKHRleHQsIGNoYXJNZXRhTGlzdCkge1xuICB2YXIgY2hhclN0eWxlID0gRU1QVFlfU0VUO1xuICB2YXIgcHJldkNoYXJTdHlsZSA9IEVNUFRZX1NFVDtcbiAgdmFyIHJhbmdlcyA9IFtdO1xuICB2YXIgcmFuZ2VTdGFydCA9IDA7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0ZXh0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgcHJldkNoYXJTdHlsZSA9IGNoYXJTdHlsZTtcbiAgICB2YXIgbWV0YSA9IGNoYXJNZXRhTGlzdC5nZXQoaSk7XG4gICAgY2hhclN0eWxlID0gbWV0YSA/IG1ldGEuZ2V0U3R5bGUoKSA6IEVNUFRZX1NFVDtcbiAgICBpZiAoaSA+IDAgJiYgISgwLCBfaW1tdXRhYmxlLmlzKShjaGFyU3R5bGUsIHByZXZDaGFyU3R5bGUpKSB7XG4gICAgICByYW5nZXMucHVzaChbdGV4dC5zbGljZShyYW5nZVN0YXJ0LCBpKSwgcHJldkNoYXJTdHlsZV0pO1xuICAgICAgcmFuZ2VTdGFydCA9IGk7XG4gICAgfVxuICB9XG4gIHJhbmdlcy5wdXNoKFt0ZXh0LnNsaWNlKHJhbmdlU3RhcnQpLCBjaGFyU3R5bGVdKTtcbiAgcmV0dXJuIHJhbmdlcztcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgQkxPQ0tfVFlQRSA9IGV4cG9ydHMuQkxPQ0tfVFlQRSA9IHtcbiAgLy8gVGhpcyBpcyB1c2VkIHRvIHJlcHJlc2VudCBhIG5vcm1hbCB0ZXh0IGJsb2NrIChwYXJhZ3JhcGgpLlxuICBVTlNUWUxFRDogJ3Vuc3R5bGVkJyxcbiAgSEVBREVSX09ORTogJ2hlYWRlci1vbmUnLFxuICBIRUFERVJfVFdPOiAnaGVhZGVyLXR3bycsXG4gIEhFQURFUl9USFJFRTogJ2hlYWRlci10aHJlZScsXG4gIEhFQURFUl9GT1VSOiAnaGVhZGVyLWZvdXInLFxuICBIRUFERVJfRklWRTogJ2hlYWRlci1maXZlJyxcbiAgSEVBREVSX1NJWDogJ2hlYWRlci1zaXgnLFxuICBVTk9SREVSRURfTElTVF9JVEVNOiAndW5vcmRlcmVkLWxpc3QtaXRlbScsXG4gIE9SREVSRURfTElTVF9JVEVNOiAnb3JkZXJlZC1saXN0LWl0ZW0nLFxuICBCTE9DS1FVT1RFOiAnYmxvY2txdW90ZScsXG4gIFBVTExRVU9URTogJ3B1bGxxdW90ZScsXG4gIENPREU6ICdjb2RlLWJsb2NrJyxcbiAgQVRPTUlDOiAnYXRvbWljJ1xufTtcblxudmFyIEVOVElUWV9UWVBFID0gZXhwb3J0cy5FTlRJVFlfVFlQRSA9IHtcbiAgTElOSzogJ0xJTksnLFxuICBJTUFHRTogJ0lNQUdFJ1xufTtcblxudmFyIElOTElORV9TVFlMRSA9IGV4cG9ydHMuSU5MSU5FX1NUWUxFID0ge1xuICBCT0xEOiAnQk9MRCcsXG4gIENPREU6ICdDT0RFJyxcbiAgSVRBTElDOiAnSVRBTElDJyxcbiAgU1RSSUtFVEhST1VHSDogJ1NUUklLRVRIUk9VR0gnLFxuICBVTkRFUkxJTkU6ICdVTkRFUkxJTkUnXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIEJMT0NLX1RZUEU6IEJMT0NLX1RZUEUsXG4gIEVOVElUWV9UWVBFOiBFTlRJVFlfVFlQRSxcbiAgSU5MSU5FX1NUWUxFOiBJTkxJTkVfU1RZTEVcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX0NvbnN0YW50cyA9IHJlcXVpcmUoJy4vQ29uc3RhbnRzJyk7XG5cbk9iamVjdC5rZXlzKF9Db25zdGFudHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9Db25zdGFudHNba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0NvbnN0YW50cycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbnN0YW50cykuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfZ2V0RW50aXR5UmFuZ2VzID0gcmVxdWlyZSgnLi9nZXRFbnRpdHlSYW5nZXMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdnZXRFbnRpdHlSYW5nZXMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRFbnRpdHlSYW5nZXMpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX2dldFNlbGVjdGVkQmxvY2tzID0gcmVxdWlyZSgnLi9nZXRTZWxlY3RlZEJsb2NrcycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2dldFNlbGVjdGVkQmxvY2tzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0U2VsZWN0ZWRCbG9ja3MpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX3NlbGVjdGlvbkNvbnRhaW5zRW50aXR5ID0gcmVxdWlyZSgnLi9zZWxlY3Rpb25Db250YWluc0VudGl0eScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3NlbGVjdGlvbkNvbnRhaW5zRW50aXR5Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0aW9uQ29udGFpbnNFbnRpdHkpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX2NhbGxNb2RpZmllckZvclNlbGVjdGVkQmxvY2tzID0gcmVxdWlyZSgnLi9jYWxsTW9kaWZpZXJGb3JTZWxlY3RlZEJsb2NrcycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NhbGxNb2RpZmllckZvclNlbGVjdGVkQmxvY2tzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FsbE1vZGlmaWVyRm9yU2VsZWN0ZWRCbG9ja3MpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuXG52YXIgVkVORE9SX1BSRUZJWCA9IC9eKG1venxtc3xvfHdlYmtpdCktLztcblxudmFyIE5VTUVSSUNfU1RSSU5HID0gL15cXGQrJC87XG52YXIgVVBQRVJDQVNFX1BBVFRFUk4gPSAvKFtBLVpdKS9nO1xuXG4vLyBMaWZ0ZWQgZnJvbTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2FiNGRkZjY0OTM5YWViYmJjOGQzMWJlMTAyMmVmZDU2ZTgzNGM5NWMvc3JjL3JlbmRlcmVycy9kb20vc2hhcmVkL0NTU1Byb3BlcnR5LmpzXG52YXIgaXNVbml0bGVzc051bWJlciA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IHRydWUsXG4gIGJvcmRlckltYWdlT3V0c2V0OiB0cnVlLFxuICBib3JkZXJJbWFnZVNsaWNlOiB0cnVlLFxuICBib3JkZXJJbWFnZVdpZHRoOiB0cnVlLFxuICBib3hGbGV4OiB0cnVlLFxuICBib3hGbGV4R3JvdXA6IHRydWUsXG4gIGJveE9yZGluYWxHcm91cDogdHJ1ZSxcbiAgY29sdW1uQ291bnQ6IHRydWUsXG4gIGZsZXg6IHRydWUsXG4gIGZsZXhHcm93OiB0cnVlLFxuICBmbGV4UG9zaXRpdmU6IHRydWUsXG4gIGZsZXhTaHJpbms6IHRydWUsXG4gIGZsZXhOZWdhdGl2ZTogdHJ1ZSxcbiAgZmxleE9yZGVyOiB0cnVlLFxuICBncmlkUm93OiB0cnVlLFxuICBncmlkUm93RW5kOiB0cnVlLFxuICBncmlkUm93U3BhbjogdHJ1ZSxcbiAgZ3JpZFJvd1N0YXJ0OiB0cnVlLFxuICBncmlkQ29sdW1uOiB0cnVlLFxuICBncmlkQ29sdW1uRW5kOiB0cnVlLFxuICBncmlkQ29sdW1uU3BhbjogdHJ1ZSxcbiAgZ3JpZENvbHVtblN0YXJ0OiB0cnVlLFxuICBmb250V2VpZ2h0OiB0cnVlLFxuICBsaW5lQ2xhbXA6IHRydWUsXG4gIGxpbmVIZWlnaHQ6IHRydWUsXG4gIG9wYWNpdHk6IHRydWUsXG4gIG9yZGVyOiB0cnVlLFxuICBvcnBoYW5zOiB0cnVlLFxuICB0YWJTaXplOiB0cnVlLFxuICB3aWRvd3M6IHRydWUsXG4gIHpJbmRleDogdHJ1ZSxcbiAgem9vbTogdHJ1ZSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogdHJ1ZSxcbiAgZmxvb2RPcGFjaXR5OiB0cnVlLFxuICBzdG9wT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaGFycmF5OiB0cnVlLFxuICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICBzdHJva2VNaXRlcmxpbWl0OiB0cnVlLFxuICBzdHJva2VPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VXaWR0aDogdHJ1ZVxufTtcblxuLy8gTGlmdGVkIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL21hc3Rlci9zcmMvcmVuZGVyZXJzL2RvbS9zaGFyZWQvQ1NTUHJvcGVydHlPcGVyYXRpb25zLmpzXG5mdW5jdGlvbiBwcm9jZXNzU3R5bGVOYW1lKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUucmVwbGFjZShVUFBFUkNBU0VfUEFUVEVSTiwgJy0kMScpLnRvTG93ZXJDYXNlKCkucmVwbGFjZShWRU5ET1JfUFJFRklYLCAnLSQxLScpO1xufVxuXG4vLyBMaWZ0ZWQgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvbWFzdGVyL3NyYy9yZW5kZXJlcnMvZG9tL3NoYXJlZC9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzXG5mdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShuYW1lLCB2YWx1ZSkge1xuICB2YXIgaXNOdW1lcmljID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIGlzTnVtZXJpYyA9IE5VTUVSSUNfU1RSSU5HLnRlc3QodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIGlzTnVtZXJpYyA9IHRydWU7XG4gICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICB9XG4gIGlmICghaXNOdW1lcmljIHx8IHZhbHVlID09PSAnMCcgfHwgaXNVbml0bGVzc051bWJlcltuYW1lXSA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0eWxlVG9DU1Moc3R5bGVEZXNjcikge1xuICByZXR1cm4gT2JqZWN0LmtleXMoc3R5bGVEZXNjcikubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHN0eWxlVmFsdWUgPSBwcm9jZXNzU3R5bGVWYWx1ZShuYW1lLCBzdHlsZURlc2NyW25hbWVdKTtcbiAgICB2YXIgc3R5bGVOYW1lID0gcHJvY2Vzc1N0eWxlTmFtZShuYW1lKTtcbiAgICByZXR1cm4gc3R5bGVOYW1lICsgJzogJyArIHN0eWxlVmFsdWU7XG4gIH0pLmpvaW4oJzsgJyk7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHN0eWxlVG9DU1M7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5cbi8vIExpZnRlZCBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9tYXN0ZXIvc3JjL3JlbmRlcmVycy9kb20vc2hhcmVkL0hUTUxET01Qcm9wZXJ0eUNvbmZpZy5qc1xudmFyIEFUVFJfTkFNRV9NQVAgPSB7XG4gIGFjY2VwdENoYXJzZXQ6ICdhY2NlcHQtY2hhcnNldCcsXG4gIGNsYXNzTmFtZTogJ2NsYXNzJyxcbiAgaHRtbEZvcjogJ2ZvcicsXG4gIGh0dHBFcXVpdjogJ2h0dHAtZXF1aXYnXG59O1xuXG5mdW5jdGlvbiBub3JtYWxpemVBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgaWYgKGF0dHJpYnV0ZXMgPT0gbnVsbCkge1xuICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICB9XG4gIHZhciBub3JtYWxpemVkID0ge307XG4gIHZhciBkaWROb3JtYWxpemUgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gT2JqZWN0LmtleXMoYXR0cmlidXRlcylbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICB2YXIgbmFtZSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICB2YXIgbmV3TmFtZSA9IG5hbWU7XG4gICAgICBpZiAoQVRUUl9OQU1FX01BUC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBuZXdOYW1lID0gQVRUUl9OQU1FX01BUFtuYW1lXTtcbiAgICAgICAgZGlkTm9ybWFsaXplID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIG5vcm1hbGl6ZWRbbmV3TmFtZV0gPSBhdHRyaWJ1dGVzW25hbWVdO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGlkTm9ybWFsaXplID8gbm9ybWFsaXplZCA6IGF0dHJpYnV0ZXM7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG5vcm1hbGl6ZUF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmZ1bmN0aW9uIGNvbWJpbmVPcmRlcmVkU3R5bGVzKGN1c3RvbU1hcCwgZGVmYXVsdHMpIHtcbiAgaWYgKGN1c3RvbU1hcCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRzO1xuICB9XG5cbiAgdmFyIF9kZWZhdWx0cyA9IF9zbGljZWRUb0FycmF5KGRlZmF1bHRzLCAyKSxcbiAgICAgIGRlZmF1bHRTdHlsZU1hcCA9IF9kZWZhdWx0c1swXSxcbiAgICAgIGRlZmF1bHRTdHlsZU9yZGVyID0gX2RlZmF1bHRzWzFdO1xuXG4gIHZhciBzdHlsZU1hcCA9IF9leHRlbmRzKHt9LCBkZWZhdWx0U3R5bGVNYXApO1xuICB2YXIgc3R5bGVPcmRlciA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoZGVmYXVsdFN0eWxlT3JkZXIpKTtcbiAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gT2JqZWN0LmtleXMoY3VzdG9tTWFwKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgIHZhciBfc3R5bGVOYW1lID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgIGlmIChkZWZhdWx0U3R5bGVNYXAuaGFzT3duUHJvcGVydHkoX3N0eWxlTmFtZSkpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRTdHlsZXMgPSBkZWZhdWx0U3R5bGVNYXBbX3N0eWxlTmFtZV07XG4gICAgICAgIHN0eWxlTWFwW19zdHlsZU5hbWVdID0gX2V4dGVuZHMoe30sIGRlZmF1bHRTdHlsZXMsIGN1c3RvbU1hcFtfc3R5bGVOYW1lXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZU1hcFtfc3R5bGVOYW1lXSA9IGN1c3RvbU1hcFtfc3R5bGVOYW1lXTtcbiAgICAgICAgc3R5bGVPcmRlci5wdXNoKF9zdHlsZU5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gW3N0eWxlTWFwLCBzdHlsZU9yZGVyXTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gY29tYmluZU9yZGVyZWRTdHlsZXM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfREVGQVVMVF9TVFlMRV9NQVAsIF9FTlRJVFlfQVRUUl9NQVAsIF9EQVRBX1RPX0FUVFI7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHN0YXRlVG9IVE1MO1xuXG52YXIgX2NvbWJpbmVPcmRlcmVkU3R5bGVzMyA9IHJlcXVpcmUoJy4vaGVscGVycy9jb21iaW5lT3JkZXJlZFN0eWxlcycpO1xuXG52YXIgX2NvbWJpbmVPcmRlcmVkU3R5bGVzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbWJpbmVPcmRlcmVkU3R5bGVzMyk7XG5cbnZhciBfbm9ybWFsaXplQXR0cmlidXRlcyA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVBdHRyaWJ1dGVzJyk7XG5cbnZhciBfbm9ybWFsaXplQXR0cmlidXRlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ub3JtYWxpemVBdHRyaWJ1dGVzKTtcblxudmFyIF9zdHlsZVRvQ1NTID0gcmVxdWlyZSgnLi9oZWxwZXJzL3N0eWxlVG9DU1MnKTtcblxudmFyIF9zdHlsZVRvQ1NTMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0eWxlVG9DU1MpO1xuXG52YXIgX2RyYWZ0SnNVdGlscyA9IHJlcXVpcmUoJ2RyYWZ0LWpzLXV0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBCT0xEID0gX2RyYWZ0SnNVdGlscy5JTkxJTkVfU1RZTEUuQk9MRCxcbiAgICBDT0RFID0gX2RyYWZ0SnNVdGlscy5JTkxJTkVfU1RZTEUuQ09ERSxcbiAgICBJVEFMSUMgPSBfZHJhZnRKc1V0aWxzLklOTElORV9TVFlMRS5JVEFMSUMsXG4gICAgU1RSSUtFVEhST1VHSCA9IF9kcmFmdEpzVXRpbHMuSU5MSU5FX1NUWUxFLlNUUklLRVRIUk9VR0gsXG4gICAgVU5ERVJMSU5FID0gX2RyYWZ0SnNVdGlscy5JTkxJTkVfU1RZTEUuVU5ERVJMSU5FO1xuXG5cbnZhciBJTkRFTlQgPSAnICAnO1xudmFyIEJSRUFLID0gJzxicj4nO1xudmFyIERBVEFfQVRUUklCVVRFID0gL15kYXRhLShbYS16MC05LV0rKSQvO1xuXG52YXIgREVGQVVMVF9TVFlMRV9NQVAgPSAoX0RFRkFVTFRfU1RZTEVfTUFQID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfREVGQVVMVF9TVFlMRV9NQVAsIEJPTEQsIHsgZWxlbWVudDogJ3N0cm9uZycgfSksIF9kZWZpbmVQcm9wZXJ0eShfREVGQVVMVF9TVFlMRV9NQVAsIENPREUsIHsgZWxlbWVudDogJ2NvZGUnIH0pLCBfZGVmaW5lUHJvcGVydHkoX0RFRkFVTFRfU1RZTEVfTUFQLCBJVEFMSUMsIHsgZWxlbWVudDogJ2VtJyB9KSwgX2RlZmluZVByb3BlcnR5KF9ERUZBVUxUX1NUWUxFX01BUCwgU1RSSUtFVEhST1VHSCwgeyBlbGVtZW50OiAnZGVsJyB9KSwgX2RlZmluZVByb3BlcnR5KF9ERUZBVUxUX1NUWUxFX01BUCwgVU5ERVJMSU5FLCB7IGVsZW1lbnQ6ICd1JyB9KSwgX0RFRkFVTFRfU1RZTEVfTUFQKTtcblxuLy8gT3JkZXI6IGlubmVyLW1vc3Qgc3R5bGUgdG8gb3V0ZXItbW9zdC5cbi8vIEV4YW1sZTogPGVtPjxzdHJvbmc+Zm9vPC9zdHJvbmc+PC9lbT5cbnZhciBERUZBVUxUX1NUWUxFX09SREVSID0gW0JPTEQsIElUQUxJQywgVU5ERVJMSU5FLCBTVFJJS0VUSFJPVUdILCBDT0RFXTtcblxuLy8gTWFwIGVudGl0eSBkYXRhIHRvIGVsZW1lbnQgYXR0cmlidXRlcy5cbnZhciBFTlRJVFlfQVRUUl9NQVAgPSAoX0VOVElUWV9BVFRSX01BUCA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX0VOVElUWV9BVFRSX01BUCwgX2RyYWZ0SnNVdGlscy5FTlRJVFlfVFlQRS5MSU5LLCB7XG4gIHVybDogJ2hyZWYnLFxuICBocmVmOiAnaHJlZicsXG4gIHJlbDogJ3JlbCcsXG4gIHRhcmdldDogJ3RhcmdldCcsXG4gIHRpdGxlOiAndGl0bGUnLFxuICBjbGFzc05hbWU6ICdjbGFzcydcbn0pLCBfZGVmaW5lUHJvcGVydHkoX0VOVElUWV9BVFRSX01BUCwgX2RyYWZ0SnNVdGlscy5FTlRJVFlfVFlQRS5JTUFHRSwge1xuICBzcmM6ICdzcmMnLFxuICBoZWlnaHQ6ICdoZWlnaHQnLFxuICB3aWR0aDogJ3dpZHRoJyxcbiAgYWx0OiAnYWx0JyxcbiAgY2xhc3NOYW1lOiAnY2xhc3MnXG59KSwgX0VOVElUWV9BVFRSX01BUCk7XG5cbi8vIE1hcCBlbnRpdHkgZGF0YSB0byBlbGVtZW50IGF0dHJpYnV0ZXMuXG52YXIgREFUQV9UT19BVFRSID0gKF9EQVRBX1RPX0FUVFIgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9EQVRBX1RPX0FUVFIsIF9kcmFmdEpzVXRpbHMuRU5USVRZX1RZUEUuTElOSywgZnVuY3Rpb24gKGVudGl0eVR5cGUsIGVudGl0eSkge1xuICB2YXIgYXR0ck1hcCA9IEVOVElUWV9BVFRSX01BUC5oYXNPd25Qcm9wZXJ0eShlbnRpdHlUeXBlKSA/IEVOVElUWV9BVFRSX01BUFtlbnRpdHlUeXBlXSA6IHt9O1xuICB2YXIgZGF0YSA9IGVudGl0eS5nZXREYXRhKCk7XG4gIHZhciBhdHRycyA9IHt9O1xuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBPYmplY3Qua2V5cyhkYXRhKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgIHZhciBkYXRhS2V5ID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgIHZhciBkYXRhVmFsdWUgPSBkYXRhW2RhdGFLZXldO1xuICAgICAgaWYgKGF0dHJNYXAuaGFzT3duUHJvcGVydHkoZGF0YUtleSkpIHtcbiAgICAgICAgdmFyIGF0dHJLZXkgPSBhdHRyTWFwW2RhdGFLZXldO1xuICAgICAgICBhdHRyc1thdHRyS2V5XSA9IGRhdGFWYWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoREFUQV9BVFRSSUJVVEUudGVzdChkYXRhS2V5KSkge1xuICAgICAgICBhdHRyc1tkYXRhS2V5XSA9IGRhdGFWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dHJzO1xufSksIF9kZWZpbmVQcm9wZXJ0eShfREFUQV9UT19BVFRSLCBfZHJhZnRKc1V0aWxzLkVOVElUWV9UWVBFLklNQUdFLCBmdW5jdGlvbiAoZW50aXR5VHlwZSwgZW50aXR5KSB7XG4gIHZhciBhdHRyTWFwID0gRU5USVRZX0FUVFJfTUFQLmhhc093blByb3BlcnR5KGVudGl0eVR5cGUpID8gRU5USVRZX0FUVFJfTUFQW2VudGl0eVR5cGVdIDoge307XG4gIHZhciBkYXRhID0gZW50aXR5LmdldERhdGEoKTtcbiAgdmFyIGF0dHJzID0ge307XG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBPYmplY3Qua2V5cyhkYXRhKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgdmFyIGRhdGFLZXkgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgIHZhciBkYXRhVmFsdWUgPSBkYXRhW2RhdGFLZXldO1xuICAgICAgaWYgKGF0dHJNYXAuaGFzT3duUHJvcGVydHkoZGF0YUtleSkpIHtcbiAgICAgICAgdmFyIGF0dHJLZXkgPSBhdHRyTWFwW2RhdGFLZXldO1xuICAgICAgICBhdHRyc1thdHRyS2V5XSA9IGRhdGFWYWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoREFUQV9BVFRSSUJVVEUudGVzdChkYXRhS2V5KSkge1xuICAgICAgICBhdHRyc1tkYXRhS2V5XSA9IGRhdGFWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRycztcbn0pLCBfREFUQV9UT19BVFRSKTtcblxuLy8gVGhlIHJlYXNvbiB0aGlzIHJldHVybnMgYW4gYXJyYXkgaXMgYmVjYXVzZSBhIHNpbmdsZSBibG9jayBtaWdodCBnZXQgd3JhcHBlZFxuLy8gaW4gdHdvIHRhZ3MuXG5mdW5jdGlvbiBnZXRUYWdzKGJsb2NrVHlwZSwgZGVmYXVsdEJsb2NrVGFnKSB7XG4gIHN3aXRjaCAoYmxvY2tUeXBlKSB7XG4gICAgY2FzZSBfZHJhZnRKc1V0aWxzLkJMT0NLX1RZUEUuSEVBREVSX09ORTpcbiAgICAgIHJldHVybiBbJ2gxJ107XG4gICAgY2FzZSBfZHJhZnRKc1V0aWxzLkJMT0NLX1RZUEUuSEVBREVSX1RXTzpcbiAgICAgIHJldHVybiBbJ2gyJ107XG4gICAgY2FzZSBfZHJhZnRKc1V0aWxzLkJMT0NLX1RZUEUuSEVBREVSX1RIUkVFOlxuICAgICAgcmV0dXJuIFsnaDMnXTtcbiAgICBjYXNlIF9kcmFmdEpzVXRpbHMuQkxPQ0tfVFlQRS5IRUFERVJfRk9VUjpcbiAgICAgIHJldHVybiBbJ2g0J107XG4gICAgY2FzZSBfZHJhZnRKc1V0aWxzLkJMT0NLX1RZUEUuSEVBREVSX0ZJVkU6XG4gICAgICByZXR1cm4gWydoNSddO1xuICAgIGNhc2UgX2RyYWZ0SnNVdGlscy5CTE9DS19UWVBFLkhFQURFUl9TSVg6XG4gICAgICByZXR1cm4gWydoNiddO1xuICAgIGNhc2UgX2RyYWZ0SnNVdGlscy5CTE9DS19UWVBFLlVOT1JERVJFRF9MSVNUX0lURU06XG4gICAgY2FzZSBfZHJhZnRKc1V0aWxzLkJMT0NLX1RZUEUuT1JERVJFRF9MSVNUX0lURU06XG4gICAgICByZXR1cm4gWydsaSddO1xuICAgIGNhc2UgX2RyYWZ0SnNVdGlscy5CTE9DS19UWVBFLkJMT0NLUVVPVEU6XG4gICAgICByZXR1cm4gWydibG9ja3F1b3RlJ107XG4gICAgY2FzZSBfZHJhZnRKc1V0aWxzLkJMT0NLX1RZUEUuQ09ERTpcbiAgICAgIHJldHVybiBbJ3ByZScsICdjb2RlJ107XG4gICAgY2FzZSBfZHJhZnRKc1V0aWxzLkJMT0NLX1RZUEUuQVRPTUlDOlxuICAgICAgcmV0dXJuIFsnZmlndXJlJ107XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBbZGVmYXVsdEJsb2NrVGFnIHx8ICdwJ107XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0V3JhcHBlclRhZyhibG9ja1R5cGUpIHtcbiAgc3dpdGNoIChibG9ja1R5cGUpIHtcbiAgICBjYXNlIF9kcmFmdEpzVXRpbHMuQkxPQ0tfVFlQRS5VTk9SREVSRURfTElTVF9JVEVNOlxuICAgICAgcmV0dXJuICd1bCc7XG4gICAgY2FzZSBfZHJhZnRKc1V0aWxzLkJMT0NLX1RZUEUuT1JERVJFRF9MSVNUX0lURU06XG4gICAgICByZXR1cm4gJ29sJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxudmFyIE1hcmt1cEdlbmVyYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhlc2UgYXJlIHJlbGF0ZWQgdG8gc3RhdGUuXG4gIGZ1bmN0aW9uIE1hcmt1cEdlbmVyYXRvcihjb250ZW50U3RhdGUsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFya3VwR2VuZXJhdG9yKTtcblxuICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgdGhpcy5jb250ZW50U3RhdGUgPSBjb250ZW50U3RhdGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIHZhciBfY29tYmluZU9yZGVyZWRTdHlsZXMgPSAoMCwgX2NvbWJpbmVPcmRlcmVkU3R5bGVzNC5kZWZhdWx0KShvcHRpb25zLmlubGluZVN0eWxlcywgW0RFRkFVTFRfU1RZTEVfTUFQLCBERUZBVUxUX1NUWUxFX09SREVSXSksXG4gICAgICAgIF9jb21iaW5lT3JkZXJlZFN0eWxlczIgPSBfc2xpY2VkVG9BcnJheShfY29tYmluZU9yZGVyZWRTdHlsZXMsIDIpLFxuICAgICAgICBpbmxpbmVTdHlsZXMgPSBfY29tYmluZU9yZGVyZWRTdHlsZXMyWzBdLFxuICAgICAgICBzdHlsZU9yZGVyID0gX2NvbWJpbmVPcmRlcmVkU3R5bGVzMlsxXTtcblxuICAgIHRoaXMuaW5saW5lU3R5bGVzID0gaW5saW5lU3R5bGVzO1xuICAgIHRoaXMuc3R5bGVPcmRlciA9IHN0eWxlT3JkZXI7XG4gIH1cbiAgLy8gVGhlc2UgYXJlIHJlbGF0ZWQgdG8gdXNlci1kZWZpbmVkIG9wdGlvbnMuXG5cblxuICBfY3JlYXRlQ2xhc3MoTWFya3VwR2VuZXJhdG9yLCBbe1xuICAgIGtleTogJ2dlbmVyYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGUoKSB7XG4gICAgICB0aGlzLm91dHB1dCA9IFtdO1xuICAgICAgdGhpcy5ibG9ja3MgPSB0aGlzLmNvbnRlbnRTdGF0ZS5nZXRCbG9ja3NBc0FycmF5KCk7XG4gICAgICB0aGlzLnRvdGFsQmxvY2tzID0gdGhpcy5ibG9ja3MubGVuZ3RoO1xuICAgICAgdGhpcy5jdXJyZW50QmxvY2sgPSAwO1xuICAgICAgdGhpcy5pbmRlbnRMZXZlbCA9IDA7XG4gICAgICB0aGlzLndyYXBwZXJUYWcgPSBudWxsO1xuICAgICAgd2hpbGUgKHRoaXMuY3VycmVudEJsb2NrIDwgdGhpcy50b3RhbEJsb2Nrcykge1xuICAgICAgICB0aGlzLnByb2Nlc3NCbG9jaygpO1xuICAgICAgfVxuICAgICAgdGhpcy5jbG9zZVdyYXBwZXJUYWcoKTtcbiAgICAgIHJldHVybiB0aGlzLm91dHB1dC5qb2luKCcnKS50cmltKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncHJvY2Vzc0Jsb2NrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc0Jsb2NrKCkge1xuICAgICAgdmFyIF9vcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGJsb2NrUmVuZGVyZXJzID0gX29wdGlvbnMuYmxvY2tSZW5kZXJlcnMsXG4gICAgICAgICAgZGVmYXVsdEJsb2NrVGFnID0gX29wdGlvbnMuZGVmYXVsdEJsb2NrVGFnO1xuXG4gICAgICB2YXIgYmxvY2sgPSB0aGlzLmJsb2Nrc1t0aGlzLmN1cnJlbnRCbG9ja107XG4gICAgICB2YXIgYmxvY2tUeXBlID0gYmxvY2suZ2V0VHlwZSgpO1xuICAgICAgdmFyIG5ld1dyYXBwZXJUYWcgPSBnZXRXcmFwcGVyVGFnKGJsb2NrVHlwZSk7XG4gICAgICBpZiAodGhpcy53cmFwcGVyVGFnICE9PSBuZXdXcmFwcGVyVGFnKSB7XG4gICAgICAgIGlmICh0aGlzLndyYXBwZXJUYWcpIHtcbiAgICAgICAgICB0aGlzLmNsb3NlV3JhcHBlclRhZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdXcmFwcGVyVGFnKSB7XG4gICAgICAgICAgdGhpcy5vcGVuV3JhcHBlclRhZyhuZXdXcmFwcGVyVGFnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5pbmRlbnQoKTtcbiAgICAgIC8vIEFsbG93IGJsb2NrcyB0byBiZSByZW5kZXJlZCB1c2luZyBhIGN1c3RvbSByZW5kZXJlci5cbiAgICAgIHZhciBjdXN0b21SZW5kZXJlciA9IGJsb2NrUmVuZGVyZXJzICE9IG51bGwgJiYgYmxvY2tSZW5kZXJlcnMuaGFzT3duUHJvcGVydHkoYmxvY2tUeXBlKSA/IGJsb2NrUmVuZGVyZXJzW2Jsb2NrVHlwZV0gOiBudWxsO1xuICAgICAgdmFyIGN1c3RvbVJlbmRlcmVyT3V0cHV0ID0gY3VzdG9tUmVuZGVyZXIgPyBjdXN0b21SZW5kZXJlcihibG9jaykgOiBudWxsO1xuICAgICAgLy8gUmVuZGVyZXIgY2FuIHJldHVybiBudWxsLCB3aGljaCB3aWxsIGNhdXNlIHByb2Nlc3NpbmcgdG8gY29udGludWUgYXMgbm9ybWFsLlxuICAgICAgaWYgKGN1c3RvbVJlbmRlcmVyT3V0cHV0ICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5vdXRwdXQucHVzaChjdXN0b21SZW5kZXJlck91dHB1dCk7XG4gICAgICAgIHRoaXMub3V0cHV0LnB1c2goJ1xcbicpO1xuICAgICAgICB0aGlzLmN1cnJlbnRCbG9jayArPSAxO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLndyaXRlU3RhcnRUYWcoYmxvY2ssIGRlZmF1bHRCbG9ja1RhZyk7XG4gICAgICB0aGlzLm91dHB1dC5wdXNoKHRoaXMucmVuZGVyQmxvY2tDb250ZW50KGJsb2NrKSk7XG4gICAgICAvLyBMb29rIGFoZWFkIGFuZCBzZWUgaWYgd2Ugd2lsbCBuZXN0IGxpc3QuXG4gICAgICB2YXIgbmV4dEJsb2NrID0gdGhpcy5nZXROZXh0QmxvY2soKTtcbiAgICAgIGlmIChjYW5IYXZlRGVwdGgoYmxvY2tUeXBlKSAmJiBuZXh0QmxvY2sgJiYgbmV4dEJsb2NrLmdldERlcHRoKCkgPT09IGJsb2NrLmdldERlcHRoKCkgKyAxKSB7XG4gICAgICAgIHRoaXMub3V0cHV0LnB1c2goJ1xcbicpO1xuICAgICAgICAvLyBUaGlzIGlzIGEgbGl0bGUgaGFja3k6IHRlbXBvcmFyaWx5IHN0YXNoIG91ciBjdXJyZW50IHdyYXBwZXJUYWcgYW5kXG4gICAgICAgIC8vIHJlbmRlciBjaGlsZCBsaXN0KHMpLlxuICAgICAgICB2YXIgdGhpc1dyYXBwZXJUYWcgPSB0aGlzLndyYXBwZXJUYWc7XG4gICAgICAgIHRoaXMud3JhcHBlclRhZyA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5kZW50TGV2ZWwgKz0gMTtcbiAgICAgICAgdGhpcy5jdXJyZW50QmxvY2sgKz0gMTtcbiAgICAgICAgdGhpcy5wcm9jZXNzQmxvY2tzQXREZXB0aChuZXh0QmxvY2suZ2V0RGVwdGgoKSk7XG4gICAgICAgIHRoaXMud3JhcHBlclRhZyA9IHRoaXNXcmFwcGVyVGFnO1xuICAgICAgICB0aGlzLmluZGVudExldmVsIC09IDE7XG4gICAgICAgIHRoaXMuaW5kZW50KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmN1cnJlbnRCbG9jayArPSAxO1xuICAgICAgfVxuICAgICAgdGhpcy53cml0ZUVuZFRhZyhibG9jaywgZGVmYXVsdEJsb2NrVGFnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwcm9jZXNzQmxvY2tzQXREZXB0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2Nlc3NCbG9ja3NBdERlcHRoKGRlcHRoKSB7XG4gICAgICB2YXIgYmxvY2sgPSB0aGlzLmJsb2Nrc1t0aGlzLmN1cnJlbnRCbG9ja107XG4gICAgICB3aGlsZSAoYmxvY2sgJiYgYmxvY2suZ2V0RGVwdGgoKSA9PT0gZGVwdGgpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzQmxvY2soKTtcbiAgICAgICAgYmxvY2sgPSB0aGlzLmJsb2Nrc1t0aGlzLmN1cnJlbnRCbG9ja107XG4gICAgICB9XG4gICAgICB0aGlzLmNsb3NlV3JhcHBlclRhZygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldE5leHRCbG9jaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE5leHRCbG9jaygpIHtcbiAgICAgIHJldHVybiB0aGlzLmJsb2Nrc1t0aGlzLmN1cnJlbnRCbG9jayArIDFdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3dyaXRlU3RhcnRUYWcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZVN0YXJ0VGFnKGJsb2NrLCBkZWZhdWx0QmxvY2tUYWcpIHtcbiAgICAgIHZhciB0YWdzID0gZ2V0VGFncyhibG9jay5nZXRUeXBlKCksIGRlZmF1bHRCbG9ja1RhZyk7XG5cbiAgICAgIHZhciBhdHRyU3RyaW5nID0gdm9pZCAwO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ibG9ja1N0eWxlRm4pIHtcbiAgICAgICAgdmFyIF9yZWYgPSB0aGlzLm9wdGlvbnMuYmxvY2tTdHlsZUZuKGJsb2NrKSB8fCB7fSxcbiAgICAgICAgICAgIF9hdHRyaWJ1dGVzID0gX3JlZi5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgX3N0eWxlID0gX3JlZi5zdHlsZTtcbiAgICAgICAgLy8gTm9ybWFsaXplIGBjbGFzc05hbWVgIC0+IGBjbGFzc2AsIGV0Yy5cblxuXG4gICAgICAgIF9hdHRyaWJ1dGVzID0gKDAsIF9ub3JtYWxpemVBdHRyaWJ1dGVzMi5kZWZhdWx0KShfYXR0cmlidXRlcyk7XG4gICAgICAgIGlmIChfc3R5bGUgIT0gbnVsbCkge1xuICAgICAgICAgIHZhciBzdHlsZUF0dHIgPSAoMCwgX3N0eWxlVG9DU1MyLmRlZmF1bHQpKF9zdHlsZSk7XG4gICAgICAgICAgX2F0dHJpYnV0ZXMgPSBfYXR0cmlidXRlcyA9PSBudWxsID8geyBzdHlsZTogc3R5bGVBdHRyIH0gOiBfZXh0ZW5kcyh7fSwgX2F0dHJpYnV0ZXMsIHsgc3R5bGU6IHN0eWxlQXR0ciB9KTtcbiAgICAgICAgfVxuICAgICAgICBhdHRyU3RyaW5nID0gc3RyaW5naWZ5QXR0cnMoX2F0dHJpYnV0ZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXR0clN0cmluZyA9ICcnO1xuICAgICAgfVxuXG4gICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlO1xuICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMyA9IGZhbHNlO1xuICAgICAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMyA9IHRhZ3NbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcbiAgICAgICAgICB2YXIgdGFnID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgdGhpcy5vdXRwdXQucHVzaCgnPCcgKyB0YWcgKyBhdHRyU3RyaW5nICsgJz4nKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9kaWRJdGVyYXRvckVycm9yMyA9IHRydWU7XG4gICAgICAgIF9pdGVyYXRvckVycm9yMyA9IGVycjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyAmJiBfaXRlcmF0b3IzLnJldHVybikge1xuICAgICAgICAgICAgX2l0ZXJhdG9yMy5yZXR1cm4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMykge1xuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3dyaXRlRW5kVGFnJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVFbmRUYWcoYmxvY2ssIGRlZmF1bHRCbG9ja1RhZykge1xuICAgICAgdmFyIHRhZ3MgPSBnZXRUYWdzKGJsb2NrLmdldFR5cGUoKSwgZGVmYXVsdEJsb2NrVGFnKTtcbiAgICAgIGlmICh0YWdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB0aGlzLm91dHB1dC5wdXNoKCc8LycgKyB0YWdzWzBdICsgJz5cXG4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZTtcbiAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNCA9IGZhbHNlO1xuICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNCA9IHRhZ3NbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDQ7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSAoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWUpIHtcbiAgICAgICAgICAgIHZhciB0YWcgPSBfc3RlcDQudmFsdWU7XG5cbiAgICAgICAgICAgIG91dHB1dC51bnNoaWZ0KCc8LycgKyB0YWcgKyAnPicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gdHJ1ZTtcbiAgICAgICAgICBfaXRlcmF0b3JFcnJvcjQgPSBlcnI7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgJiYgX2l0ZXJhdG9yNC5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgX2l0ZXJhdG9yNC5yZXR1cm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNCkge1xuICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vdXRwdXQucHVzaChvdXRwdXQuam9pbignJykgKyAnXFxuJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb3BlbldyYXBwZXJUYWcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuV3JhcHBlclRhZyh3cmFwcGVyVGFnKSB7XG4gICAgICB0aGlzLndyYXBwZXJUYWcgPSB3cmFwcGVyVGFnO1xuICAgICAgdGhpcy5pbmRlbnQoKTtcbiAgICAgIHRoaXMub3V0cHV0LnB1c2goJzwnICsgd3JhcHBlclRhZyArICc+XFxuJyk7XG4gICAgICB0aGlzLmluZGVudExldmVsICs9IDE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2xvc2VXcmFwcGVyVGFnJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VXcmFwcGVyVGFnKCkge1xuICAgICAgdmFyIHdyYXBwZXJUYWcgPSB0aGlzLndyYXBwZXJUYWc7XG5cbiAgICAgIGlmICh3cmFwcGVyVGFnKSB7XG4gICAgICAgIHRoaXMuaW5kZW50TGV2ZWwgLT0gMTtcbiAgICAgICAgdGhpcy5pbmRlbnQoKTtcbiAgICAgICAgdGhpcy5vdXRwdXQucHVzaCgnPC8nICsgd3JhcHBlclRhZyArICc+XFxuJyk7XG4gICAgICAgIHRoaXMud3JhcHBlclRhZyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5kZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5kZW50KCkge1xuICAgICAgdGhpcy5vdXRwdXQucHVzaChJTkRFTlQucmVwZWF0KHRoaXMuaW5kZW50TGV2ZWwpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJCbG9ja0NvbnRlbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJCbG9ja0NvbnRlbnQoYmxvY2spIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBibG9ja1R5cGUgPSBibG9jay5nZXRUeXBlKCk7XG4gICAgICB2YXIgdGV4dCA9IGJsb2NrLmdldFRleHQoKTtcbiAgICAgIGlmICh0ZXh0ID09PSAnJykge1xuICAgICAgICAvLyBQcmV2ZW50IGVsZW1lbnQgY29sbGFwc2UgaWYgY29tcGxldGVseSBlbXB0eS5cbiAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgfVxuICAgICAgdGV4dCA9IHRoaXMucHJlc2VydmVXaGl0ZXNwYWNlKHRleHQpO1xuICAgICAgdmFyIGNoYXJNZXRhTGlzdCA9IGJsb2NrLmdldENoYXJhY3Rlckxpc3QoKTtcbiAgICAgIHZhciBlbnRpdHlQaWVjZXMgPSAoMCwgX2RyYWZ0SnNVdGlscy5nZXRFbnRpdHlSYW5nZXMpKHRleHQsIGNoYXJNZXRhTGlzdCk7XG4gICAgICByZXR1cm4gZW50aXR5UGllY2VzLm1hcChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgdmFyIF9yZWYzID0gX3NsaWNlZFRvQXJyYXkoX3JlZjIsIDIpLFxuICAgICAgICAgICAgZW50aXR5S2V5ID0gX3JlZjNbMF0sXG4gICAgICAgICAgICBzdHlsZVBpZWNlcyA9IF9yZWYzWzFdO1xuXG4gICAgICAgIHZhciBjb250ZW50ID0gc3R5bGVQaWVjZXMubWFwKGZ1bmN0aW9uIChfcmVmNCkge1xuICAgICAgICAgIHZhciBfcmVmNSA9IF9zbGljZWRUb0FycmF5KF9yZWY0LCAyKSxcbiAgICAgICAgICAgICAgdGV4dCA9IF9yZWY1WzBdLFxuICAgICAgICAgICAgICBzdHlsZVNldCA9IF9yZWY1WzFdO1xuXG4gICAgICAgICAgdmFyIGNvbnRlbnQgPSBlbmNvZGVDb250ZW50KHRleHQpO1xuICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSA9IHRydWU7XG4gICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNSA9IGZhbHNlO1xuICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjUgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNSA9IF90aGlzLnN0eWxlT3JkZXJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDU7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSAoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSA9IHRydWUpIHtcbiAgICAgICAgICAgICAgdmFyIF9zdHlsZU5hbWUgPSBfc3RlcDUudmFsdWU7XG5cbiAgICAgICAgICAgICAgLy8gSWYgb3VyIGJsb2NrIHR5cGUgaXMgQ09ERSB0aGVuIGRvbid0IHdyYXAgaW5saW5lIGNvZGUgZWxlbWVudHMuXG4gICAgICAgICAgICAgIGlmIChfc3R5bGVOYW1lID09PSBDT0RFICYmIGJsb2NrVHlwZSA9PT0gX2RyYWZ0SnNVdGlscy5CTE9DS19UWVBFLkNPREUpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoc3R5bGVTZXQuaGFzKF9zdHlsZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9pbmxpbmVTdHlsZXMkX3N0eWxlTiA9IF90aGlzLmlubGluZVN0eWxlc1tfc3R5bGVOYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgX2VsZW1lbnQgPSBfaW5saW5lU3R5bGVzJF9zdHlsZU4uZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgX2F0dHJpYnV0ZXMyID0gX2lubGluZVN0eWxlcyRfc3R5bGVOLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgICAgIF9zdHlsZTIgPSBfaW5saW5lU3R5bGVzJF9zdHlsZU4uc3R5bGU7XG5cbiAgICAgICAgICAgICAgICBpZiAoX2VsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgX2VsZW1lbnQgPSAnc3Bhbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE5vcm1hbGl6ZSBgY2xhc3NOYW1lYCAtPiBgY2xhc3NgLCBldGMuXG4gICAgICAgICAgICAgICAgX2F0dHJpYnV0ZXMyID0gKDAsIF9ub3JtYWxpemVBdHRyaWJ1dGVzMi5kZWZhdWx0KShfYXR0cmlidXRlczIpO1xuICAgICAgICAgICAgICAgIGlmIChfc3R5bGUyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBzdHlsZUF0dHIgPSAoMCwgX3N0eWxlVG9DU1MyLmRlZmF1bHQpKF9zdHlsZTIpO1xuICAgICAgICAgICAgICAgICAgX2F0dHJpYnV0ZXMyID0gX2F0dHJpYnV0ZXMyID09IG51bGwgPyB7IHN0eWxlOiBzdHlsZUF0dHIgfSA6IF9leHRlbmRzKHt9LCBfYXR0cmlidXRlczIsIHsgc3R5bGU6IHN0eWxlQXR0ciB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJTdHJpbmcgPSBzdHJpbmdpZnlBdHRycyhfYXR0cmlidXRlczIpO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSAnPCcgKyBfZWxlbWVudCArIGF0dHJTdHJpbmcgKyAnPicgKyBjb250ZW50ICsgJzwvJyArIF9lbGVtZW50ICsgJz4nO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjUgPSB0cnVlO1xuICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I1ID0gZXJyO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ICYmIF9pdGVyYXRvcjUucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yNS5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNSkge1xuICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICB9KS5qb2luKCcnKTtcbiAgICAgICAgdmFyIGVudGl0eSA9IGVudGl0eUtleSA/IF90aGlzLmNvbnRlbnRTdGF0ZS5nZXRFbnRpdHkoZW50aXR5S2V5KSA6IG51bGw7XG4gICAgICAgIC8vIE5vdGU6IFRoZSBgdG9VcHBlckNhc2VgIGJlbG93IGlzIGZvciBjb21wYXRhYmlsaXR5IHdpdGggc29tZSBsaWJyYXJpZXMgdGhhdCB1c2UgbG93ZXItY2FzZSBmb3IgaW1hZ2UgYmxvY2tzLlxuICAgICAgICB2YXIgZW50aXR5VHlwZSA9IGVudGl0eSA9PSBudWxsID8gbnVsbCA6IGVudGl0eS5nZXRUeXBlKCkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgdmFyIGVudGl0eVN0eWxlID0gdm9pZCAwO1xuICAgICAgICBpZiAoZW50aXR5ICE9IG51bGwgJiYgX3RoaXMub3B0aW9ucy5lbnRpdHlTdHlsZUZuICYmIChlbnRpdHlTdHlsZSA9IF90aGlzLm9wdGlvbnMuZW50aXR5U3R5bGVGbihlbnRpdHkpKSkge1xuICAgICAgICAgIHZhciBfZW50aXR5U3R5bGUgPSBlbnRpdHlTdHlsZSxcbiAgICAgICAgICAgICAgX2VsZW1lbnQyID0gX2VudGl0eVN0eWxlLmVsZW1lbnQsXG4gICAgICAgICAgICAgIF9hdHRyaWJ1dGVzMyA9IF9lbnRpdHlTdHlsZS5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICBfc3R5bGUzID0gX2VudGl0eVN0eWxlLnN0eWxlO1xuXG4gICAgICAgICAgaWYgKF9lbGVtZW50MiA9PSBudWxsKSB7XG4gICAgICAgICAgICBfZWxlbWVudDIgPSAnc3Bhbic7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIE5vcm1hbGl6ZSBgY2xhc3NOYW1lYCAtPiBgY2xhc3NgLCBldGMuXG4gICAgICAgICAgX2F0dHJpYnV0ZXMzID0gKDAsIF9ub3JtYWxpemVBdHRyaWJ1dGVzMi5kZWZhdWx0KShfYXR0cmlidXRlczMpO1xuICAgICAgICAgIGlmIChfc3R5bGUzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBzdHlsZUF0dHIgPSAoMCwgX3N0eWxlVG9DU1MyLmRlZmF1bHQpKF9zdHlsZTMpO1xuICAgICAgICAgICAgX2F0dHJpYnV0ZXMzID0gX2F0dHJpYnV0ZXMzID09IG51bGwgPyB7IHN0eWxlOiBzdHlsZUF0dHIgfSA6IF9leHRlbmRzKHt9LCBfYXR0cmlidXRlczMsIHsgc3R5bGU6IHN0eWxlQXR0ciB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGF0dHJTdHJpbmcgPSBzdHJpbmdpZnlBdHRycyhfYXR0cmlidXRlczMpO1xuICAgICAgICAgIHJldHVybiAnPCcgKyBfZWxlbWVudDIgKyBhdHRyU3RyaW5nICsgJz4nICsgY29udGVudCArICc8LycgKyBfZWxlbWVudDIgKyAnPic7XG4gICAgICAgIH0gZWxzZSBpZiAoZW50aXR5VHlwZSAhPSBudWxsICYmIGVudGl0eVR5cGUgPT09IF9kcmFmdEpzVXRpbHMuRU5USVRZX1RZUEUuTElOSykge1xuICAgICAgICAgIHZhciBhdHRycyA9IERBVEFfVE9fQVRUUi5oYXNPd25Qcm9wZXJ0eShlbnRpdHlUeXBlKSA/IERBVEFfVE9fQVRUUltlbnRpdHlUeXBlXShlbnRpdHlUeXBlLCBlbnRpdHkpIDogbnVsbDtcbiAgICAgICAgICB2YXIgX2F0dHJTdHJpbmcgPSBzdHJpbmdpZnlBdHRycyhhdHRycyk7XG4gICAgICAgICAgcmV0dXJuICc8YScgKyBfYXR0clN0cmluZyArICc+JyArIGNvbnRlbnQgKyAnPC9hPic7XG4gICAgICAgIH0gZWxzZSBpZiAoZW50aXR5VHlwZSAhPSBudWxsICYmIGVudGl0eVR5cGUgPT09IF9kcmFmdEpzVXRpbHMuRU5USVRZX1RZUEUuSU1BR0UpIHtcbiAgICAgICAgICB2YXIgX2F0dHJzID0gREFUQV9UT19BVFRSLmhhc093blByb3BlcnR5KGVudGl0eVR5cGUpID8gREFUQV9UT19BVFRSW2VudGl0eVR5cGVdKGVudGl0eVR5cGUsIGVudGl0eSkgOiBudWxsO1xuICAgICAgICAgIHZhciBfYXR0clN0cmluZzIgPSBzdHJpbmdpZnlBdHRycyhfYXR0cnMpO1xuICAgICAgICAgIHJldHVybiAnPGltZycgKyBfYXR0clN0cmluZzIgKyAnLz4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICB9XG4gICAgICB9KS5qb2luKCcnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwcmVzZXJ2ZVdoaXRlc3BhY2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVzZXJ2ZVdoaXRlc3BhY2UodGV4dCkge1xuICAgICAgdmFyIGxlbmd0aCA9IHRleHQubGVuZ3RoO1xuICAgICAgLy8gUHJldmVudCBsZWFkaW5nL3RyYWlsaW5nL2NvbnNlY3V0aXZlIHdoaXRlc3BhY2UgY29sbGFwc2UuXG4gICAgICB2YXIgbmV3VGV4dCA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGV4dFtpXSA9PT0gJyAnICYmIChpID09PSAwIHx8IGkgPT09IGxlbmd0aCAtIDEgfHwgdGV4dFtpIC0gMV0gPT09ICcgJykpIHtcbiAgICAgICAgICBuZXdUZXh0W2ldID0gJ1xceEEwJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdUZXh0W2ldID0gdGV4dFtpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld1RleHQuam9pbignJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1hcmt1cEdlbmVyYXRvcjtcbn0oKTtcblxuZnVuY3Rpb24gc3RyaW5naWZ5QXR0cnMoYXR0cnMpIHtcbiAgaWYgKGF0dHJzID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgdmFyIHBhcnRzID0gW107XG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvcjYgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yNiA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvcjYgPSBPYmplY3Qua2V5cyhhdHRycylbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDY7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgPSAoX3N0ZXA2ID0gX2l0ZXJhdG9yNi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiA9IHRydWUpIHtcbiAgICAgIHZhciBuYW1lID0gX3N0ZXA2LnZhbHVlO1xuXG4gICAgICB2YXIgdmFsdWUgPSBhdHRyc1tuYW1lXTtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHBhcnRzLnB1c2goJyAnICsgbmFtZSArICc9XCInICsgZW5jb2RlQXR0cih2YWx1ZSArICcnKSArICdcIicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3I2ID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvcjYgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgJiYgX2l0ZXJhdG9yNi5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yNi5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjY7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiBjYW5IYXZlRGVwdGgoYmxvY2tUeXBlKSB7XG4gIHN3aXRjaCAoYmxvY2tUeXBlKSB7XG4gICAgY2FzZSBfZHJhZnRKc1V0aWxzLkJMT0NLX1RZUEUuVU5PUkRFUkVEX0xJU1RfSVRFTTpcbiAgICBjYXNlIF9kcmFmdEpzVXRpbHMuQkxPQ0tfVFlQRS5PUkRFUkVEX0xJU1RfSVRFTTpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ29udGVudCh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0LnNwbGl0KCcmJykuam9pbignJmFtcDsnKS5zcGxpdCgnPCcpLmpvaW4oJyZsdDsnKS5zcGxpdCgnPicpLmpvaW4oJyZndDsnKS5zcGxpdCgnXFx4QTAnKS5qb2luKCcmbmJzcDsnKS5zcGxpdCgnXFxuJykuam9pbihCUkVBSyArICdcXG4nKTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlQXR0cih0ZXh0KSB7XG4gIHJldHVybiB0ZXh0LnNwbGl0KCcmJykuam9pbignJmFtcDsnKS5zcGxpdCgnPCcpLmpvaW4oJyZsdDsnKS5zcGxpdCgnPicpLmpvaW4oJyZndDsnKS5zcGxpdCgnXCInKS5qb2luKCcmcXVvdDsnKTtcbn1cblxuZnVuY3Rpb24gc3RhdGVUb0hUTUwoY29udGVudCwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IE1hcmt1cEdlbmVyYXRvcihjb250ZW50LCBvcHRpb25zKS5nZW5lcmF0ZSgpO1xufSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0UmFuZ2VCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGdldFJhbmdlQ2xpZW50UmVjdHMgPSByZXF1aXJlKCcuL2dldFJhbmdlQ2xpZW50UmVjdHMnKTtcblxuLyoqXG4gKiBMaWtlIHJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIGJ1dCBub3JtYWxpemVzIGZvciBicm93c2VyIGJ1Z3MuXG4gKi9cbmZ1bmN0aW9uIGdldFJhbmdlQm91bmRpbmdDbGllbnRSZWN0KHJhbmdlKSB7XG4gIC8vIFwiUmV0dXJuIGEgRE9NUmVjdCBvYmplY3QgZGVzY3JpYmluZyB0aGUgc21hbGxlc3QgcmVjdGFuZ2xlIHRoYXQgaW5jbHVkZXNcbiAgLy8gdGhlIGZpcnN0IHJlY3RhbmdsZSBpbiBsaXN0IGFuZCBhbGwgb2YgdGhlIHJlbWFpbmluZyByZWN0YW5nbGVzIG9mIHdoaWNoXG4gIC8vIHRoZSBoZWlnaHQgb3Igd2lkdGggaXMgbm90IHplcm8uXCJcbiAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvY3Nzb20tdmlldy8jZG9tLXJhbmdlLWdldGJvdW5kaW5nY2xpZW50cmVjdFxuICB2YXIgcmVjdHMgPSBnZXRSYW5nZUNsaWVudFJlY3RzKHJhbmdlKTtcbiAgdmFyIHRvcCA9IDA7XG4gIHZhciByaWdodCA9IDA7XG4gIHZhciBib3R0b20gPSAwO1xuICB2YXIgbGVmdCA9IDA7XG5cbiAgaWYgKHJlY3RzLmxlbmd0aCkge1xuICAgIC8vIElmIHRoZSBmaXJzdCByZWN0YW5nbGUgaGFzIDAgd2lkdGgsIHdlIHVzZSB0aGUgc2Vjb25kLCB0aGlzIGlzIG5lZWRlZFxuICAgIC8vIGJlY2F1c2UgQ2hyb21lIHJlbmRlcnMgYSAwIHdpZHRoIHJlY3RhbmdsZSB3aGVuIHRoZSBzZWxlY3Rpb24gY29udGFpbnNcbiAgICAvLyBhIGxpbmUgYnJlYWsuXG4gICAgaWYgKHJlY3RzLmxlbmd0aCA+IDEgJiYgcmVjdHNbMF0ud2lkdGggPT09IDApIHtcbiAgICAgIHZhciBfcmVjdHMkID0gcmVjdHNbMV07XG4gICAgICB0b3AgPSBfcmVjdHMkLnRvcDtcbiAgICAgIHJpZ2h0ID0gX3JlY3RzJC5yaWdodDtcbiAgICAgIGJvdHRvbSA9IF9yZWN0cyQuYm90dG9tO1xuICAgICAgbGVmdCA9IF9yZWN0cyQubGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9yZWN0cyQyID0gcmVjdHNbMF07XG4gICAgICB0b3AgPSBfcmVjdHMkMi50b3A7XG4gICAgICByaWdodCA9IF9yZWN0cyQyLnJpZ2h0O1xuICAgICAgYm90dG9tID0gX3JlY3RzJDIuYm90dG9tO1xuICAgICAgbGVmdCA9IF9yZWN0cyQyLmxlZnQ7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaWkgPSAxOyBpaSA8IHJlY3RzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIHJlY3QgPSByZWN0c1tpaV07XG4gICAgICBpZiAocmVjdC5oZWlnaHQgIT09IDAgJiYgcmVjdC53aWR0aCAhPT0gMCkge1xuICAgICAgICB0b3AgPSBNYXRoLm1pbih0b3AsIHJlY3QudG9wKTtcbiAgICAgICAgcmlnaHQgPSBNYXRoLm1heChyaWdodCwgcmVjdC5yaWdodCk7XG4gICAgICAgIGJvdHRvbSA9IE1hdGgubWF4KGJvdHRvbSwgcmVjdC5ib3R0b20pO1xuICAgICAgICBsZWZ0ID0gTWF0aC5taW4obGVmdCwgcmVjdC5sZWZ0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogdG9wLFxuICAgIHJpZ2h0OiByaWdodCxcbiAgICBib3R0b206IGJvdHRvbSxcbiAgICBsZWZ0OiBsZWZ0LFxuICAgIHdpZHRoOiByaWdodCAtIGxlZnQsXG4gICAgaGVpZ2h0OiBib3R0b20gLSB0b3BcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYW5nZUJvdW5kaW5nQ2xpZW50UmVjdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldFZpc2libGVTZWxlY3Rpb25SZWN0XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBnZXRSYW5nZUJvdW5kaW5nQ2xpZW50UmVjdCA9IHJlcXVpcmUoJy4vZ2V0UmFuZ2VCb3VuZGluZ0NsaWVudFJlY3QnKTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGJvdW5kaW5nIENsaWVudFJlY3QgZm9yIHRoZSB2aXNpYmxlIERPTSBzZWxlY3Rpb24sIGlmIGFueS5cbiAqIEluIGNhc2VzIHdoZXJlIHRoZXJlIGFyZSBubyBzZWxlY3RlZCByYW5nZXMgb3IgdGhlIGJvdW5kaW5nIHJlY3QgaXNcbiAqIHRlbXBvcmFyaWx5IGludmFsaWQsIHJldHVybiBudWxsLlxuICovXG5mdW5jdGlvbiBnZXRWaXNpYmxlU2VsZWN0aW9uUmVjdChnbG9iYWwpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGdsb2JhbC5nZXRTZWxlY3Rpb24oKTtcbiAgaWYgKCFzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG4gIHZhciBib3VuZGluZ1JlY3QgPSBnZXRSYW5nZUJvdW5kaW5nQ2xpZW50UmVjdChyYW5nZSk7XG4gIHZhciB0b3AgPSBib3VuZGluZ1JlY3QudG9wLFxuICAgICAgcmlnaHQgPSBib3VuZGluZ1JlY3QucmlnaHQsXG4gICAgICBib3R0b20gPSBib3VuZGluZ1JlY3QuYm90dG9tLFxuICAgICAgbGVmdCA9IGJvdW5kaW5nUmVjdC5sZWZ0O1xuXG4gIC8vIFdoZW4gYSByZS1yZW5kZXIgbGVhZHMgdG8gYSBub2RlIGJlaW5nIHJlbW92ZWQsIHRoZSBET00gc2VsZWN0aW9uIHdpbGxcbiAgLy8gdGVtcG9yYXJpbHkgYmUgcGxhY2VkIG9uIGFuIGFuY2VzdG9yIG5vZGUsIHdoaWNoIGxlYWRzIHRvIGFuIGludmFsaWRcbiAgLy8gYm91bmRpbmcgcmVjdC4gRGlzY2FyZCB0aGlzIHN0YXRlLlxuXG4gIGlmICh0b3AgPT09IDAgJiYgcmlnaHQgPT09IDAgJiYgYm90dG9tID09PSAwICYmIGxlZnQgPT09IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBib3VuZGluZ1JlY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmlzaWJsZVNlbGVjdGlvblJlY3Q7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBkZWNvZGVJbmxpbmVTdHlsZVJhbmdlc1xuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdpbW11dGFibGUnKSxcbiAgICBPcmRlcmVkU2V0ID0gX3JlcXVpcmUuT3JkZXJlZFNldDtcblxudmFyIFVuaWNvZGVVdGlscyA9IHJlcXVpcmUoJ2ZianMvbGliL1VuaWNvZGVVdGlscycpO1xuXG52YXIgc3Vic3RyID0gVW5pY29kZVV0aWxzLnN1YnN0cjtcblxuXG52YXIgRU1QVFlfU0VUID0gT3JkZXJlZFNldCgpO1xuXG4vKipcbiAqIENvbnZlcnQgdG8gbmF0aXZlIEphdmFTY3JpcHQgc3RyaW5nIGxlbmd0aHMgdG8gZGV0ZXJtaW5lIHJhbmdlcy5cbiAqL1xuZnVuY3Rpb24gZGVjb2RlSW5saW5lU3R5bGVSYW5nZXModGV4dCwgcmFuZ2VzKSB7XG4gIHZhciBzdHlsZXMgPSBBcnJheSh0ZXh0Lmxlbmd0aCkuZmlsbChFTVBUWV9TRVQpO1xuICBpZiAocmFuZ2VzKSB7XG4gICAgcmFuZ2VzLmZvckVhY2goZnVuY3Rpb24gKCAvKm9iamVjdCovcmFuZ2UpIHtcbiAgICAgIHZhciBjdXJzb3IgPSBzdWJzdHIodGV4dCwgMCwgcmFuZ2Uub2Zmc2V0KS5sZW5ndGg7XG4gICAgICB2YXIgZW5kID0gY3Vyc29yICsgc3Vic3RyKHRleHQsIHJhbmdlLm9mZnNldCwgcmFuZ2UubGVuZ3RoKS5sZW5ndGg7XG4gICAgICB3aGlsZSAoY3Vyc29yIDwgZW5kKSB7XG4gICAgICAgIHN0eWxlc1tjdXJzb3JdID0gc3R5bGVzW2N1cnNvcl0uYWRkKHJhbmdlLnN0eWxlKTtcbiAgICAgICAgY3Vyc29yKys7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWNvZGVJbmxpbmVTdHlsZVJhbmdlczsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGRlY29kZUVudGl0eVJhbmdlc1xuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVW5pY29kZVV0aWxzID0gcmVxdWlyZSgnZmJqcy9saWIvVW5pY29kZVV0aWxzJyk7XG5cbnZhciBzdWJzdHIgPSBVbmljb2RlVXRpbHMuc3Vic3RyO1xuXG4vKipcbiAqIENvbnZlcnQgdG8gbmF0aXZlIEphdmFTY3JpcHQgc3RyaW5nIGxlbmd0aHMgdG8gZGV0ZXJtaW5lIHJhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBkZWNvZGVFbnRpdHlSYW5nZXModGV4dCwgcmFuZ2VzKSB7XG4gIHZhciBlbnRpdGllcyA9IEFycmF5KHRleHQubGVuZ3RoKS5maWxsKG51bGwpO1xuICBpZiAocmFuZ2VzKSB7XG4gICAgcmFuZ2VzLmZvckVhY2goZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgICAvLyBVc2luZyBVbmljb2RlLWVuYWJsZWQgc3Vic3RyaW5ncyBjb252ZXJ0ZWQgdG8gSmF2YVNjcmlwdCBsZW5ndGhzLFxuICAgICAgLy8gZmlsbCB0aGUgb3V0cHV0IGFycmF5IHdpdGggZW50aXR5IGtleXMuXG4gICAgICB2YXIgc3RhcnQgPSBzdWJzdHIodGV4dCwgMCwgcmFuZ2Uub2Zmc2V0KS5sZW5ndGg7XG4gICAgICB2YXIgZW5kID0gc3RhcnQgKyBzdWJzdHIodGV4dCwgcmFuZ2Uub2Zmc2V0LCByYW5nZS5sZW5ndGgpLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGlpID0gc3RhcnQ7IGlpIDwgZW5kOyBpaSsrKSB7XG4gICAgICAgIGVudGl0aWVzW2lpXSA9IHJhbmdlLmtleTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZW50aXRpZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVjb2RlRW50aXR5UmFuZ2VzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY3JlYXRlQ2hhcmFjdGVyTGlzdFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2hhcmFjdGVyTWV0YWRhdGEgPSByZXF1aXJlKCcuL0NoYXJhY3Rlck1ldGFkYXRhJyk7XG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbnZhciBMaXN0ID0gSW1tdXRhYmxlLkxpc3Q7XG5cblxuZnVuY3Rpb24gY3JlYXRlQ2hhcmFjdGVyTGlzdChpbmxpbmVTdHlsZXMsIGVudGl0aWVzKSB7XG4gIHZhciBjaGFyYWN0ZXJBcnJheSA9IGlubGluZVN0eWxlcy5tYXAoZnVuY3Rpb24gKHN0eWxlLCBpaSkge1xuICAgIHZhciBlbnRpdHkgPSBlbnRpdGllc1tpaV07XG4gICAgcmV0dXJuIENoYXJhY3Rlck1ldGFkYXRhLmNyZWF0ZSh7IHN0eWxlOiBzdHlsZSwgZW50aXR5OiBlbnRpdHkgfSk7XG4gIH0pO1xuICByZXR1cm4gTGlzdChjaGFyYWN0ZXJBcnJheSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQ2hhcmFjdGVyTGlzdDsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgX2V4dGVuZHMgPSBfYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0VHJlZUFkYXB0ZXJcbiAqIEBmb3JtYXRcbiAqIFxuICpcbiAqIFRoaXMgaXMgdW5zdGFibGUgYW5kIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIGFuZCBzaG91bGQgbm90IGJlIHVzZWQgYnlcbiAqIHByb2R1Y3Rpb24gc3lzdGVtcy4gVGhpcyBmaWxlIG1heSBiZSB1cGRhdGUvcmVtb3ZlZCB3aXRob3V0IG5vdGljZS5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciB0cmF2ZXJzZUluRGVwdGhPcmRlciA9IGZ1bmN0aW9uIHRyYXZlcnNlSW5EZXB0aE9yZGVyKGJsb2NrcywgZm4pIHtcbiAgdmFyIHN0YWNrID0gW10uY29uY2F0KGJsb2NrcykucmV2ZXJzZSgpO1xuICB3aGlsZSAoc3RhY2subGVuZ3RoKSB7XG4gICAgdmFyIF9ibG9jayA9IHN0YWNrLnBvcCgpO1xuXG4gICAgZm4oX2Jsb2NrKTtcblxuICAgIHZhciBjaGlsZHJlbiA9IF9ibG9jay5jaGlsZHJlbjtcblxuICAgICFBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdJbnZhbGlkIHRyZWUgcmF3IGJsb2NrJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgc3RhY2sgPSBzdGFjay5jb25jYXQoW10uY29uY2F0KGNoaWxkcmVuLnJldmVyc2UoKSkpO1xuICB9XG59O1xuXG52YXIgaXNMaXN0QmxvY2sgPSBmdW5jdGlvbiBpc0xpc3RCbG9jayhibG9jaykge1xuICBpZiAoIShibG9jayAmJiBibG9jay50eXBlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IGJsb2NrLnR5cGU7XG5cbiAgcmV0dXJuIHR5cGUgPT09ICd1bm9yZGVyZWQtbGlzdC1pdGVtJyB8fCB0eXBlID09PSAnb3JkZXJlZC1saXN0LWl0ZW0nO1xufTtcblxudmFyIGFkZERlcHRoVG9DaGlsZHJlbiA9IGZ1bmN0aW9uIGFkZERlcHRoVG9DaGlsZHJlbihibG9jaykge1xuICBpZiAoQXJyYXkuaXNBcnJheShibG9jay5jaGlsZHJlbikpIHtcbiAgICBibG9jay5jaGlsZHJlbiA9IGJsb2NrLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZC50eXBlID09PSBibG9jay50eXBlID8gX2V4dGVuZHMoe30sIGNoaWxkLCB7IGRlcHRoOiAoYmxvY2suZGVwdGggfHwgMCkgKyAxIH0pIDogY2hpbGQ7XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qKlxuICogVGhpcyBhZGFwdGVyIGlzIGludGVuZGVkIHRvIGJlIGJlIHVzZWQgYXMgYW4gYWRhcHRlciB0byBkcmFmdCB0cmVlIGRhdGFcbiAqXG4gKiBkcmFmdCBzdGF0ZSA8PT09PT0+IGRyYWZ0IHRyZWUgc3RhdGVcbiAqL1xudmFyIERyYWZ0VHJlZUFkYXB0ZXIgPSB7XG4gIC8qKlxuICAgKiBDb252ZXJ0cyBmcm9tIGEgdHJlZSByYXcgc3RhdGUgYmFjayB0byAgZHJhZnQgcmF3IHN0YXRlXG4gICAqL1xuICBmcm9tUmF3VHJlZVN0YXRlVG9SYXdTdGF0ZTogZnVuY3Rpb24gZnJvbVJhd1RyZWVTdGF0ZVRvUmF3U3RhdGUoZHJhZnRUcmVlU3RhdGUpIHtcbiAgICB2YXIgYmxvY2tzID0gZHJhZnRUcmVlU3RhdGUuYmxvY2tzO1xuXG4gICAgdmFyIHRyYW5zZm9ybWVkQmxvY2tzID0gW107XG5cbiAgICAhQXJyYXkuaXNBcnJheShibG9ja3MpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0ludmFsaWQgcmF3IHN0YXRlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGJsb2NrcykgfHwgIWJsb2Nrcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBkcmFmdFRyZWVTdGF0ZTtcbiAgICB9XG5cbiAgICB0cmF2ZXJzZUluRGVwdGhPcmRlcihibG9ja3MsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgdmFyIG5ld0Jsb2NrID0gX2V4dGVuZHMoe30sIGJsb2NrKTtcblxuICAgICAgaWYgKGlzTGlzdEJsb2NrKGJsb2NrKSkge1xuICAgICAgICBuZXdCbG9jay5kZXB0aCA9IG5ld0Jsb2NrLmRlcHRoIHx8IDA7XG4gICAgICAgIGFkZERlcHRoVG9DaGlsZHJlbihibG9jayk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBuZXdCbG9jay5jaGlsZHJlbjtcblxuICAgICAgdHJhbnNmb3JtZWRCbG9ja3MucHVzaChuZXdCbG9jayk7XG4gICAgfSk7XG5cbiAgICBkcmFmdFRyZWVTdGF0ZS5ibG9ja3MgPSB0cmFuc2Zvcm1lZEJsb2NrcztcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZHJhZnRUcmVlU3RhdGUsIHtcbiAgICAgIGJsb2NrczogdHJhbnNmb3JtZWRCbG9ja3NcbiAgICB9KTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBmcm9tIGRyYWZ0IHJhdyBzdGF0ZSB0byB0cmVlIGRyYWZ0IHN0YXRlXG4gICAqL1xuICBmcm9tUmF3U3RhdGVUb1Jhd1RyZWVTdGF0ZTogZnVuY3Rpb24gZnJvbVJhd1N0YXRlVG9SYXdUcmVlU3RhdGUoZHJhZnRTdGF0ZSkge1xuICAgIHZhciBsYXN0TGlzdERlcHRoQ2FjaGVSZWYgPSB7fTtcbiAgICB2YXIgdHJhbnNmb3JtZWRCbG9ja3MgPSBbXTtcblxuICAgIGRyYWZ0U3RhdGUuYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICB2YXIgaXNMaXN0ID0gaXNMaXN0QmxvY2soYmxvY2spO1xuICAgICAgdmFyIGRlcHRoID0gYmxvY2suZGVwdGggfHwgMDtcbiAgICAgIHZhciB0cmVlQmxvY2sgPSBfZXh0ZW5kcyh7fSwgYmxvY2ssIHtcbiAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFpc0xpc3QpIHtcbiAgICAgICAgLy8gcmVzZXQgdGhlIGNhY2hlIHBhdGhcbiAgICAgICAgbGFzdExpc3REZXB0aENhY2hlUmVmID0ge307XG4gICAgICAgIHRyYW5zZm9ybWVkQmxvY2tzLnB1c2godHJlZUJsb2NrKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyB1cGRhdGUgb3VyIGRlcHRoIGNhY2hlIHJlZmVyZW5jZSBwYXRoXG4gICAgICBsYXN0TGlzdERlcHRoQ2FjaGVSZWZbZGVwdGhdID0gdHJlZUJsb2NrO1xuXG4gICAgICAvLyBpZiB3ZSBhcmUgZ3JlYXRlciB0aGFuIHplcm8gd2UgbXVzdCBoYXZlIHNlZW4gYSBwYXJlbnQgYWxyZWFkeVxuICAgICAgaWYgKGRlcHRoID4gMCkge1xuICAgICAgICB2YXIgcGFyZW50ID0gbGFzdExpc3REZXB0aENhY2hlUmVmW2RlcHRoIC0gMV07XG5cbiAgICAgICAgIXBhcmVudCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdJbnZhbGlkIGRlcHRoIGZvciBSYXdEcmFmdENvbnRlbnRCbG9jaycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgICAgICAvLyBwdXNoIG5lc3RlZCBsaXN0IGJsb2Nrc1xuICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaCh0cmVlQmxvY2spO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIHB1c2ggcm9vdCBsaXN0IGJsb2Nrc1xuICAgICAgdHJhbnNmb3JtZWRCbG9ja3MucHVzaCh0cmVlQmxvY2spO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBkcmFmdFN0YXRlLCB7XG4gICAgICBibG9ja3M6IHRyYW5zZm9ybWVkQmxvY2tzXG4gICAgfSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRUcmVlQWRhcHRlcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNvbnZlcnRGcm9tUmF3VG9EcmFmdFN0YXRlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgX2V4dGVuZHMgPSBfYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgQ29udGVudEJsb2NrID0gcmVxdWlyZSgnLi9Db250ZW50QmxvY2snKTtcbnZhciBDb250ZW50QmxvY2tOb2RlID0gcmVxdWlyZSgnLi9Db250ZW50QmxvY2tOb2RlJyk7XG52YXIgQ29udGVudFN0YXRlID0gcmVxdWlyZSgnLi9Db250ZW50U3RhdGUnKTtcbnZhciBEcmFmdEVudGl0eSA9IHJlcXVpcmUoJy4vRHJhZnRFbnRpdHknKTtcbnZhciBEcmFmdEZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vRHJhZnRGZWF0dXJlRmxhZ3MnKTtcbnZhciBEcmFmdFRyZWVBZGFwdGVyID0gcmVxdWlyZSgnLi9EcmFmdFRyZWVBZGFwdGVyJyk7XG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG52YXIgU2VsZWN0aW9uU3RhdGUgPSByZXF1aXJlKCcuL1NlbGVjdGlvblN0YXRlJyk7XG5cbnZhciBjcmVhdGVDaGFyYWN0ZXJMaXN0ID0gcmVxdWlyZSgnLi9jcmVhdGVDaGFyYWN0ZXJMaXN0Jyk7XG52YXIgZGVjb2RlRW50aXR5UmFuZ2VzID0gcmVxdWlyZSgnLi9kZWNvZGVFbnRpdHlSYW5nZXMnKTtcbnZhciBkZWNvZGVJbmxpbmVTdHlsZVJhbmdlcyA9IHJlcXVpcmUoJy4vZGVjb2RlSW5saW5lU3R5bGVSYW5nZXMnKTtcbnZhciBnZW5lcmF0ZVJhbmRvbUtleSA9IHJlcXVpcmUoJy4vZ2VuZXJhdGVSYW5kb21LZXknKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIGV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCA9IERyYWZ0RmVhdHVyZUZsYWdzLmRyYWZ0X3RyZWVfZGF0YV9zdXBwb3J0O1xuXG52YXIgTGlzdCA9IEltbXV0YWJsZS5MaXN0LFxuICAgIE1hcCA9IEltbXV0YWJsZS5NYXAsXG4gICAgT3JkZXJlZE1hcCA9IEltbXV0YWJsZS5PcmRlcmVkTWFwO1xuXG5cbnZhciBkZWNvZGVCbG9ja05vZGVDb25maWcgPSBmdW5jdGlvbiBkZWNvZGVCbG9ja05vZGVDb25maWcoYmxvY2ssIGVudGl0eU1hcCkge1xuICB2YXIga2V5ID0gYmxvY2sua2V5LFxuICAgICAgdHlwZSA9IGJsb2NrLnR5cGUsXG4gICAgICBkYXRhID0gYmxvY2suZGF0YSxcbiAgICAgIHRleHQgPSBibG9jay50ZXh0LFxuICAgICAgZGVwdGggPSBibG9jay5kZXB0aDtcblxuXG4gIHZhciBibG9ja05vZGVDb25maWcgPSB7XG4gICAgdGV4dDogdGV4dCxcbiAgICBkZXB0aDogZGVwdGggfHwgMCxcbiAgICB0eXBlOiB0eXBlIHx8ICd1bnN0eWxlZCcsXG4gICAga2V5OiBrZXkgfHwgZ2VuZXJhdGVSYW5kb21LZXkoKSxcbiAgICBkYXRhOiBNYXAoZGF0YSksXG4gICAgY2hhcmFjdGVyTGlzdDogZGVjb2RlQ2hhcmFjdGVyTGlzdChibG9jaywgZW50aXR5TWFwKVxuICB9O1xuXG4gIHJldHVybiBibG9ja05vZGVDb25maWc7XG59O1xuXG52YXIgZGVjb2RlQ2hhcmFjdGVyTGlzdCA9IGZ1bmN0aW9uIGRlY29kZUNoYXJhY3Rlckxpc3QoYmxvY2ssIGVudGl0eU1hcCkge1xuICB2YXIgdGV4dCA9IGJsb2NrLnRleHQsXG4gICAgICByYXdFbnRpdHlSYW5nZXMgPSBibG9jay5lbnRpdHlSYW5nZXMsXG4gICAgICByYXdJbmxpbmVTdHlsZVJhbmdlcyA9IGJsb2NrLmlubGluZVN0eWxlUmFuZ2VzO1xuXG5cbiAgdmFyIGVudGl0eVJhbmdlcyA9IHJhd0VudGl0eVJhbmdlcyB8fCBbXTtcbiAgdmFyIGlubGluZVN0eWxlUmFuZ2VzID0gcmF3SW5saW5lU3R5bGVSYW5nZXMgfHwgW107XG5cbiAgLy8gVHJhbnNsYXRlIGVudGl0eSByYW5nZSBrZXlzIHRvIHRoZSBEcmFmdEVudGl0eSBtYXAuXG4gIHJldHVybiBjcmVhdGVDaGFyYWN0ZXJMaXN0KGRlY29kZUlubGluZVN0eWxlUmFuZ2VzKHRleHQsIGlubGluZVN0eWxlUmFuZ2VzKSwgZGVjb2RlRW50aXR5UmFuZ2VzKHRleHQsIGVudGl0eVJhbmdlcy5maWx0ZXIoZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgcmV0dXJuIGVudGl0eU1hcC5oYXNPd25Qcm9wZXJ0eShyYW5nZS5rZXkpO1xuICB9KS5tYXAoZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCByYW5nZSwgeyBrZXk6IGVudGl0eU1hcFtyYW5nZS5rZXldIH0pO1xuICB9KSkpO1xufTtcblxudmFyIGFkZEtleUlmTWlzc2luZyA9IGZ1bmN0aW9uIGFkZEtleUlmTWlzc2luZyhibG9jaykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGJsb2NrLCB7XG4gICAga2V5OiBibG9jay5rZXkgfHwgZ2VuZXJhdGVSYW5kb21LZXkoKVxuICB9KTtcbn07XG5cbi8qKlxuICogTm9kZSBzdGFjayBpcyByZXNwb25zaWJsZSB0byBlbnN1cmUgd2UgdHJhdmVyc2UgdGhlIHRyZWUgb25seSBvbmNlXG4gKiBpbiBkZXB0aCBvcmRlciwgd2hpbGUgYWxzbyBwcm92aWRpbmcgcGFyZW50IHJlZnMgdG8gaW5uZXIgbm9kZXMgdG9cbiAqIGNvbnN0cnVjdCB0aGVpciBsaW5rcy5cbiAqL1xudmFyIHVwZGF0ZU5vZGVTdGFjayA9IGZ1bmN0aW9uIHVwZGF0ZU5vZGVTdGFjayhzdGFjaywgbm9kZXMsIHBhcmVudFJlZikge1xuICB2YXIgbm9kZXNXaXRoUGFyZW50UmVmID0gbm9kZXMubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYmxvY2ssIHtcbiAgICAgIHBhcmVudFJlZjogcGFyZW50UmVmXG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIHNpbmNlIHdlIHBvcCBub2RlcyBmcm9tIHRoZSBzdGFjayB3ZSBuZWVkIHRvIGluc2VydCB0aGVtIGluIHJldmVyc2VcbiAgcmV0dXJuIHN0YWNrLmNvbmNhdChub2Rlc1dpdGhQYXJlbnRSZWYucmV2ZXJzZSgpKTtcbn07XG5cbi8qKlxuICogVGhpcyB3aWxsIGJ1aWxkIGEgdHJlZSBkcmFmdCBjb250ZW50IHN0YXRlIGJ5IGNyZWF0aW5nIHRoZSBub2RlXG4gKiByZWZlcmVuY2UgbGlua3MgaW50byBhIHNpbmdsZSB0cmVlIHdhbGsuIEVhY2ggbm9kZSBoYXMgYSBsaW5rXG4gKiByZWZlcmVuY2UgdG8gXCJwYXJlbnRcIiwgXCJjaGlsZHJlblwiLCBcIm5leHRTaWJsaW5nXCIgYW5kIFwicHJldlNpYmxpbmdcIlxuICogYmxvY2tNYXAgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIGRlcHRoIG9yZGVyaW5nLlxuICovXG52YXIgZGVjb2RlQ29udGVudEJsb2NrTm9kZXMgPSBmdW5jdGlvbiBkZWNvZGVDb250ZW50QmxvY2tOb2RlcyhibG9ja3MsIGVudGl0eU1hcCkge1xuICByZXR1cm4gYmxvY2tzXG4gIC8vIGVuc3VyZSBjaGlsZHJlbiBoYXZlIHZhbGlkIGtleXMgdG8gZW5hYmxlIHNpYmxpbmcgbGlua3NcbiAgLm1hcChhZGRLZXlJZk1pc3NpbmcpLnJlZHVjZShmdW5jdGlvbiAoYmxvY2tNYXAsIGJsb2NrLCBpbmRleCkge1xuICAgICFBcnJheS5pc0FycmF5KGJsb2NrLmNoaWxkcmVuKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdpbnZhbGlkIFJhd0RyYWZ0Q29udGVudEJsb2NrIGNhbiBub3QgYmUgY29udmVydGVkIHRvIENvbnRlbnRCbG9ja05vZGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICAvLyBlbnN1cmUgY2hpbGRyZW4gaGF2ZSB2YWxpZCBrZXlzIHRvIGVuYWJsZSBzaWJsaW5nIGxpbmtzXG4gICAgdmFyIGNoaWxkcmVuID0gYmxvY2suY2hpbGRyZW4ubWFwKGFkZEtleUlmTWlzc2luZyk7XG5cbiAgICAvLyByb290IGxldmVsIG5vZGVzXG4gICAgdmFyIGNvbnRlbnRCbG9ja05vZGUgPSBuZXcgQ29udGVudEJsb2NrTm9kZShfZXh0ZW5kcyh7fSwgZGVjb2RlQmxvY2tOb2RlQ29uZmlnKGJsb2NrLCBlbnRpdHlNYXApLCB7XG4gICAgICBwcmV2U2libGluZzogaW5kZXggPT09IDAgPyBudWxsIDogYmxvY2tzW2luZGV4IC0gMV0ua2V5LFxuICAgICAgbmV4dFNpYmxpbmc6IGluZGV4ID09PSBibG9ja3MubGVuZ3RoIC0gMSA/IG51bGwgOiBibG9ja3NbaW5kZXggKyAxXS5rZXksXG4gICAgICBjaGlsZHJlbjogTGlzdChjaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBjaGlsZC5rZXk7XG4gICAgICB9KSlcbiAgICB9KSk7XG5cbiAgICAvLyBwdXNoIHJvb3Qgbm9kZSB0byBibG9ja01hcFxuICAgIGJsb2NrTWFwID0gYmxvY2tNYXAuc2V0KGNvbnRlbnRCbG9ja05vZGUuZ2V0S2V5KCksIGNvbnRlbnRCbG9ja05vZGUpO1xuXG4gICAgLy8gdGhpcyBzdGFjayBpcyB1c2VkIHRvIGVuc3VyZSB3ZSB2aXNpdCBhbGwgbm9kZXMgcmVzcGVjdGluZyBkZXB0aCBvcmRlcmluZ1xuICAgIHZhciBzdGFjayA9IHVwZGF0ZU5vZGVTdGFjayhbXSwgY2hpbGRyZW4sIGNvbnRlbnRCbG9ja05vZGUpO1xuXG4gICAgLy8gc3RhcnQgY29tcHV0aW5nIGNoaWxkcmVuIG5vZGVzXG4gICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIHdlIHBvcCBmcm9tIHRoZSBzdGFjayBhbmQgc3RhcnQgcHJvY2Vzc2luZyB0aGlzIG5vZGVcbiAgICAgIHZhciBub2RlID0gc3RhY2sucG9wKCk7XG5cbiAgICAgIC8vIHBhcmVudFJlZiBhbHJlYWR5IHBvaW50cyB0byBhIGNvbnZlcnRlZCBDb250ZW50QmxvY2tOb2RlXG4gICAgICB2YXIgcGFyZW50UmVmID0gbm9kZS5wYXJlbnRSZWY7XG4gICAgICB2YXIgc2libGluZ3MgPSBwYXJlbnRSZWYuZ2V0Q2hpbGRLZXlzKCk7XG4gICAgICB2YXIgX2luZGV4ID0gc2libGluZ3MuaW5kZXhPZihub2RlLmtleSk7XG4gICAgICB2YXIgaXNWYWxpZEJsb2NrID0gQXJyYXkuaXNBcnJheShub2RlLmNoaWxkcmVuKTtcblxuICAgICAgaWYgKCFpc1ZhbGlkQmxvY2spIHtcbiAgICAgICAgIWlzVmFsaWRCbG9jayA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdpbnZhbGlkIFJhd0RyYWZ0Q29udGVudEJsb2NrIGNhbiBub3QgYmUgY29udmVydGVkIHRvIENvbnRlbnRCbG9ja05vZGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBlbnN1cmUgY2hpbGRyZW4gaGF2ZSB2YWxpZCBrZXlzIHRvIGVuYWJsZSBzaWJsaW5nIGxpbmtzXG4gICAgICB2YXIgX2NoaWxkcmVuID0gbm9kZS5jaGlsZHJlbi5tYXAoYWRkS2V5SWZNaXNzaW5nKTtcblxuICAgICAgdmFyIF9jb250ZW50QmxvY2tOb2RlID0gbmV3IENvbnRlbnRCbG9ja05vZGUoX2V4dGVuZHMoe30sIGRlY29kZUJsb2NrTm9kZUNvbmZpZyhub2RlLCBlbnRpdHlNYXApLCB7XG4gICAgICAgIHBhcmVudDogcGFyZW50UmVmLmdldEtleSgpLFxuICAgICAgICBjaGlsZHJlbjogTGlzdChfY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgIHJldHVybiBjaGlsZC5rZXk7XG4gICAgICAgIH0pKSxcbiAgICAgICAgcHJldlNpYmxpbmc6IF9pbmRleCA9PT0gMCA/IG51bGwgOiBzaWJsaW5ncy5nZXQoX2luZGV4IC0gMSksXG4gICAgICAgIG5leHRTaWJsaW5nOiBfaW5kZXggPT09IHNpYmxpbmdzLnNpemUgLSAxID8gbnVsbCA6IHNpYmxpbmdzLmdldChfaW5kZXggKyAxKVxuICAgICAgfSkpO1xuXG4gICAgICAvLyBwdXNoIG5vZGUgdG8gYmxvY2tNYXBcbiAgICAgIGJsb2NrTWFwID0gYmxvY2tNYXAuc2V0KF9jb250ZW50QmxvY2tOb2RlLmdldEtleSgpLCBfY29udGVudEJsb2NrTm9kZSk7XG5cbiAgICAgIC8vIHRoaXMgc3RhY2sgaXMgdXNlZCB0byBlbnN1cmUgd2UgdmlzaXQgYWxsIG5vZGVzIHJlc3BlY3RpbmcgZGVwdGggb3JkZXJpbmdcbiAgICAgIHN0YWNrID0gdXBkYXRlTm9kZVN0YWNrKHN0YWNrLCBfY2hpbGRyZW4sIF9jb250ZW50QmxvY2tOb2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmxvY2tNYXA7XG4gIH0sIE9yZGVyZWRNYXAoKSk7XG59O1xuXG52YXIgZGVjb2RlQ29udGVudEJsb2NrcyA9IGZ1bmN0aW9uIGRlY29kZUNvbnRlbnRCbG9ja3MoYmxvY2tzLCBlbnRpdHlNYXApIHtcbiAgcmV0dXJuIE9yZGVyZWRNYXAoYmxvY2tzLm1hcChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICB2YXIgY29udGVudEJsb2NrID0gbmV3IENvbnRlbnRCbG9jayhkZWNvZGVCbG9ja05vZGVDb25maWcoYmxvY2ssIGVudGl0eU1hcCkpO1xuICAgIHJldHVybiBbY29udGVudEJsb2NrLmdldEtleSgpLCBjb250ZW50QmxvY2tdO1xuICB9KSk7XG59O1xuXG52YXIgZGVjb2RlUmF3QmxvY2tzID0gZnVuY3Rpb24gZGVjb2RlUmF3QmxvY2tzKHJhd1N0YXRlLCBlbnRpdHlNYXApIHtcbiAgdmFyIGlzVHJlZVJhd0Jsb2NrID0gQXJyYXkuaXNBcnJheShyYXdTdGF0ZS5ibG9ja3NbMF0uY2hpbGRyZW4pO1xuICB2YXIgcmF3QmxvY2tzID0gZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0ICYmICFpc1RyZWVSYXdCbG9jayA/IERyYWZ0VHJlZUFkYXB0ZXIuZnJvbVJhd1N0YXRlVG9SYXdUcmVlU3RhdGUocmF3U3RhdGUpLmJsb2NrcyA6IHJhd1N0YXRlLmJsb2NrcztcblxuICBpZiAoIWV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCkge1xuICAgIHJldHVybiBkZWNvZGVDb250ZW50QmxvY2tzKGlzVHJlZVJhd0Jsb2NrID8gRHJhZnRUcmVlQWRhcHRlci5mcm9tUmF3VHJlZVN0YXRlVG9SYXdTdGF0ZShyYXdTdGF0ZSkuYmxvY2tzIDogcmF3QmxvY2tzLCBlbnRpdHlNYXApO1xuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvbnRlbnRCbG9ja05vZGVzKHJhd0Jsb2NrcywgZW50aXR5TWFwKTtcbn07XG5cbnZhciBkZWNvZGVSYXdFbnRpdHlNYXAgPSBmdW5jdGlvbiBkZWNvZGVSYXdFbnRpdHlNYXAocmF3U3RhdGUpIHtcbiAgdmFyIHJhd0VudGl0eU1hcCA9IHJhd1N0YXRlLmVudGl0eU1hcDtcblxuICB2YXIgZW50aXR5TWFwID0ge307XG5cbiAgLy8gVE9ETzogVXBkYXRlIHRoaXMgb25jZSB3ZSBjb21wbGV0ZWx5IHJlbW92ZSBEcmFmdEVudGl0eVxuICBPYmplY3Qua2V5cyhyYXdFbnRpdHlNYXApLmZvckVhY2goZnVuY3Rpb24gKHJhd0VudGl0eUtleSkge1xuICAgIHZhciBfcmF3RW50aXR5TWFwJHJhd0VudGkgPSByYXdFbnRpdHlNYXBbcmF3RW50aXR5S2V5XSxcbiAgICAgICAgdHlwZSA9IF9yYXdFbnRpdHlNYXAkcmF3RW50aS50eXBlLFxuICAgICAgICBtdXRhYmlsaXR5ID0gX3Jhd0VudGl0eU1hcCRyYXdFbnRpLm11dGFiaWxpdHksXG4gICAgICAgIGRhdGEgPSBfcmF3RW50aXR5TWFwJHJhd0VudGkuZGF0YTtcblxuICAgIC8vIGdldCB0aGUga2V5IHJlZmVyZW5jZSB0byBjcmVhdGVkIGVudGl0eVxuXG4gICAgZW50aXR5TWFwW3Jhd0VudGl0eUtleV0gPSBEcmFmdEVudGl0eS5fX2NyZWF0ZSh0eXBlLCBtdXRhYmlsaXR5LCBkYXRhIHx8IHt9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVudGl0eU1hcDtcbn07XG5cbnZhciBjb252ZXJ0RnJvbVJhd1RvRHJhZnRTdGF0ZSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tUmF3VG9EcmFmdFN0YXRlKHJhd1N0YXRlKSB7XG4gICFBcnJheS5pc0FycmF5KHJhd1N0YXRlLmJsb2NrcykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnaW52YWxpZCBSYXdEcmFmdENvbnRlbnRTdGF0ZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAvLyBkZWNvZGUgZW50aXRpZXNcbiAgdmFyIGVudGl0eU1hcCA9IGRlY29kZVJhd0VudGl0eU1hcChyYXdTdGF0ZSk7XG5cbiAgLy8gZGVjb2RlIGJsb2NrTWFwXG4gIHZhciBibG9ja01hcCA9IGRlY29kZVJhd0Jsb2NrcyhyYXdTdGF0ZSwgZW50aXR5TWFwKTtcblxuICAvLyBjcmVhdGUgaW5pdGlhbCBzZWxlY3Rpb25cbiAgdmFyIHNlbGVjdGlvblN0YXRlID0gYmxvY2tNYXAuaXNFbXB0eSgpID8gbmV3IFNlbGVjdGlvblN0YXRlKCkgOiBTZWxlY3Rpb25TdGF0ZS5jcmVhdGVFbXB0eShibG9ja01hcC5maXJzdCgpLmdldEtleSgpKTtcblxuICByZXR1cm4gbmV3IENvbnRlbnRTdGF0ZSh7XG4gICAgYmxvY2tNYXA6IGJsb2NrTWFwLFxuICAgIGVudGl0eU1hcDogZW50aXR5TWFwLFxuICAgIHNlbGVjdGlvbkJlZm9yZTogc2VsZWN0aW9uU3RhdGUsXG4gICAgc2VsZWN0aW9uQWZ0ZXI6IHNlbGVjdGlvblN0YXRlXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0RnJvbVJhd1RvRHJhZnRTdGF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVuY29kZUlubGluZVN0eWxlUmFuZ2VzXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVbmljb2RlVXRpbHMgPSByZXF1aXJlKCdmYmpzL2xpYi9Vbmljb2RlVXRpbHMnKTtcblxudmFyIGZpbmRSYW5nZXNJbW11dGFibGUgPSByZXF1aXJlKCcuL2ZpbmRSYW5nZXNJbW11dGFibGUnKTtcblxudmFyIGFyZUVxdWFsID0gZnVuY3Rpb24gYXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG52YXIgaXNUcnV0aHkgPSBmdW5jdGlvbiBpc1RydXRoeShhKSB7XG4gIHJldHVybiAhIWE7XG59O1xudmFyIEVNUFRZX0FSUkFZID0gW107XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIGZvciBnZXR0aW5nIGVuY29kZWQgc3R5bGVzIGZvciBlYWNoIGlubGluZSBzdHlsZS4gQ29udmVydFxuICogdG8gVVRGLTggY2hhcmFjdGVyIGNvdW50cyBmb3Igc3RvcmFnZS5cbiAqL1xuZnVuY3Rpb24gZ2V0RW5jb2RlZElubGluZXNGb3JUeXBlKGJsb2NrLCBzdHlsZUxpc3QsIHN0eWxlVG9FbmNvZGUpIHtcbiAgdmFyIHJhbmdlcyA9IFtdO1xuXG4gIC8vIE9idGFpbiBhbiBhcnJheSB3aXRoIHJhbmdlcyBmb3Igb25seSB0aGUgc3BlY2lmaWVkIHN0eWxlLlxuICB2YXIgZmlsdGVyZWRJbmxpbmVzID0gc3R5bGVMaXN0Lm1hcChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICByZXR1cm4gc3R5bGUuaGFzKHN0eWxlVG9FbmNvZGUpO1xuICB9KS50b0xpc3QoKTtcblxuICBmaW5kUmFuZ2VzSW1tdXRhYmxlKGZpbHRlcmVkSW5saW5lcywgYXJlRXF1YWwsXG4gIC8vIFdlIG9ubHkgd2FudCB0byBrZWVwIHJhbmdlcyB3aXRoIG5vbnplcm8gc3R5bGUgdmFsdWVzLlxuICBpc1RydXRoeSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgdGV4dCA9IGJsb2NrLmdldFRleHQoKTtcbiAgICByYW5nZXMucHVzaCh7XG4gICAgICBvZmZzZXQ6IFVuaWNvZGVVdGlscy5zdHJsZW4odGV4dC5zbGljZSgwLCBzdGFydCkpLFxuICAgICAgbGVuZ3RoOiBVbmljb2RlVXRpbHMuc3RybGVuKHRleHQuc2xpY2Uoc3RhcnQsIGVuZCkpLFxuICAgICAgc3R5bGU6IHN0eWxlVG9FbmNvZGVcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJhbmdlcztcbn1cblxuLypcbiAqIFJldHJpZXZlIHRoZSBlbmNvZGVkIGFycmF5cyBvZiBpbmxpbmUgc3R5bGVzLCB3aXRoIGVhY2ggaW5kaXZpZHVhbCBzdHlsZVxuICogdHJlYXRlZCBzZXBhcmF0ZWx5LlxuICovXG5mdW5jdGlvbiBlbmNvZGVJbmxpbmVTdHlsZVJhbmdlcyhibG9jaykge1xuICB2YXIgc3R5bGVMaXN0ID0gYmxvY2suZ2V0Q2hhcmFjdGVyTGlzdCgpLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjLmdldFN0eWxlKCk7XG4gIH0pLnRvTGlzdCgpO1xuICB2YXIgcmFuZ2VzID0gc3R5bGVMaXN0LmZsYXR0ZW4oKS50b1NldCgpLm1hcChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICByZXR1cm4gZ2V0RW5jb2RlZElubGluZXNGb3JUeXBlKGJsb2NrLCBzdHlsZUxpc3QsIHN0eWxlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoRU1QVFlfQVJSQVksIHJhbmdlcy50b0pTKCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVuY29kZUlubGluZVN0eWxlUmFuZ2VzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZW5jb2RlRW50aXR5UmFuZ2VzXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdFN0cmluZ0tleSA9IHJlcXVpcmUoJy4vRHJhZnRTdHJpbmdLZXknKTtcbnZhciBVbmljb2RlVXRpbHMgPSByZXF1aXJlKCdmYmpzL2xpYi9Vbmljb2RlVXRpbHMnKTtcblxudmFyIHN0cmxlbiA9IFVuaWNvZGVVdGlscy5zdHJsZW47XG5cbi8qKlxuICogQ29udmVydCB0byBVVEYtOCBjaGFyYWN0ZXIgY291bnRzIGZvciBzdG9yYWdlLlxuICovXG5cbmZ1bmN0aW9uIGVuY29kZUVudGl0eVJhbmdlcyhibG9jaywgc3RvcmFnZU1hcCkge1xuICB2YXIgZW5jb2RlZCA9IFtdO1xuICBibG9jay5maW5kRW50aXR5UmFuZ2VzKGZ1bmN0aW9uIChjaGFyYWN0ZXIpIHtcbiAgICByZXR1cm4gISFjaGFyYWN0ZXIuZ2V0RW50aXR5KCk7XG4gIH0sIGZ1bmN0aW9uICggLypudW1iZXIqL3N0YXJ0LCAvKm51bWJlciovZW5kKSB7XG4gICAgdmFyIHRleHQgPSBibG9jay5nZXRUZXh0KCk7XG4gICAgdmFyIGtleSA9IGJsb2NrLmdldEVudGl0eUF0KHN0YXJ0KTtcbiAgICBlbmNvZGVkLnB1c2goe1xuICAgICAgb2Zmc2V0OiBzdHJsZW4odGV4dC5zbGljZSgwLCBzdGFydCkpLFxuICAgICAgbGVuZ3RoOiBzdHJsZW4odGV4dC5zbGljZShzdGFydCwgZW5kKSksXG4gICAgICAvLyBFbmNvZGUgdGhlIGtleSBhcyBhIG51bWJlciBmb3IgcmFuZ2Ugc3RvcmFnZS5cbiAgICAgIGtleTogTnVtYmVyKHN0b3JhZ2VNYXBbRHJhZnRTdHJpbmdLZXkuc3RyaW5naWZ5KGtleSldKVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIGVuY29kZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW5jb2RlRW50aXR5UmFuZ2VzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY29udmVydEZyb21EcmFmdFN0YXRlVG9SYXdcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBfZXh0ZW5kcyA9IF9hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBDb250ZW50QmxvY2sgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9jaycpO1xudmFyIENvbnRlbnRCbG9ja05vZGUgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9ja05vZGUnKTtcbnZhciBEcmFmdFN0cmluZ0tleSA9IHJlcXVpcmUoJy4vRHJhZnRTdHJpbmdLZXknKTtcblxudmFyIGVuY29kZUVudGl0eVJhbmdlcyA9IHJlcXVpcmUoJy4vZW5jb2RlRW50aXR5UmFuZ2VzJyk7XG52YXIgZW5jb2RlSW5saW5lU3R5bGVSYW5nZXMgPSByZXF1aXJlKCcuL2VuY29kZUlubGluZVN0eWxlUmFuZ2VzJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBjcmVhdGVSYXdCbG9jayA9IGZ1bmN0aW9uIGNyZWF0ZVJhd0Jsb2NrKGJsb2NrLCBlbnRpdHlTdG9yYWdlTWFwKSB7XG4gIHJldHVybiB7XG4gICAga2V5OiBibG9jay5nZXRLZXkoKSxcbiAgICB0ZXh0OiBibG9jay5nZXRUZXh0KCksXG4gICAgdHlwZTogYmxvY2suZ2V0VHlwZSgpLFxuICAgIGRlcHRoOiBibG9jay5nZXREZXB0aCgpLFxuICAgIGlubGluZVN0eWxlUmFuZ2VzOiBlbmNvZGVJbmxpbmVTdHlsZVJhbmdlcyhibG9jayksXG4gICAgZW50aXR5UmFuZ2VzOiBlbmNvZGVFbnRpdHlSYW5nZXMoYmxvY2ssIGVudGl0eVN0b3JhZ2VNYXApLFxuICAgIGRhdGE6IGJsb2NrLmdldERhdGEoKS50b09iamVjdCgpXG4gIH07XG59O1xuXG52YXIgaW5zZXJ0UmF3QmxvY2sgPSBmdW5jdGlvbiBpbnNlcnRSYXdCbG9jayhibG9jaywgZW50aXR5TWFwLCByYXdCbG9ja3MsIGJsb2NrQ2FjaGVSZWYpIHtcbiAgaWYgKGJsb2NrIGluc3RhbmNlb2YgQ29udGVudEJsb2NrKSB7XG4gICAgcmF3QmxvY2tzLnB1c2goY3JlYXRlUmF3QmxvY2soYmxvY2ssIGVudGl0eU1hcCkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gICEoYmxvY2sgaW5zdGFuY2VvZiBDb250ZW50QmxvY2tOb2RlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdibG9jayBpcyBub3QgYSBCbG9ja05vZGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgdmFyIHBhcmVudEtleSA9IGJsb2NrLmdldFBhcmVudEtleSgpO1xuICB2YXIgcmF3QmxvY2sgPSBibG9ja0NhY2hlUmVmW2Jsb2NrLmdldEtleSgpXSA9IF9leHRlbmRzKHt9LCBjcmVhdGVSYXdCbG9jayhibG9jaywgZW50aXR5TWFwKSwge1xuICAgIGNoaWxkcmVuOiBbXVxuICB9KTtcblxuICBpZiAocGFyZW50S2V5KSB7XG4gICAgYmxvY2tDYWNoZVJlZltwYXJlbnRLZXldLmNoaWxkcmVuLnB1c2gocmF3QmxvY2spO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJhd0Jsb2Nrcy5wdXNoKHJhd0Jsb2NrKTtcbn07XG5cbnZhciBlbmNvZGVSYXdCbG9ja3MgPSBmdW5jdGlvbiBlbmNvZGVSYXdCbG9ja3MoY29udGVudFN0YXRlLCByYXdTdGF0ZSkge1xuICB2YXIgZW50aXR5TWFwID0gcmF3U3RhdGUuZW50aXR5TWFwO1xuXG5cbiAgdmFyIHJhd0Jsb2NrcyA9IFtdO1xuXG4gIHZhciBibG9ja0NhY2hlUmVmID0ge307XG4gIHZhciBlbnRpdHlDYWNoZVJlZiA9IHt9O1xuICB2YXIgZW50aXR5U3RvcmFnZUtleSA9IDA7XG5cbiAgY29udGVudFN0YXRlLmdldEJsb2NrTWFwKCkuZm9yRWFjaChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICBibG9jay5maW5kRW50aXR5UmFuZ2VzKGZ1bmN0aW9uIChjaGFyYWN0ZXIpIHtcbiAgICAgIHJldHVybiBjaGFyYWN0ZXIuZ2V0RW50aXR5KCkgIT09IG51bGw7XG4gICAgfSwgZnVuY3Rpb24gKHN0YXJ0KSB7XG4gICAgICB2YXIgZW50aXR5S2V5ID0gYmxvY2suZ2V0RW50aXR5QXQoc3RhcnQpO1xuICAgICAgLy8gU3RyaW5naWZ5IHRvIG1haW50YWluIG9yZGVyIG9mIG90aGVyd2lzZSBudW1lcmljIGtleXMuXG4gICAgICB2YXIgc3RyaW5naWZpZWRFbnRpdHlLZXkgPSBEcmFmdFN0cmluZ0tleS5zdHJpbmdpZnkoZW50aXR5S2V5KTtcbiAgICAgIC8vIFRoaXMgbWFrZXMgdGhpcyBmdW5jdGlvbiByZXNpbGllbnQgdG8gdHdvIGVudGl0aWVzXG4gICAgICAvLyBlcnJvbmVvdXNseSBoYXZpbmcgdGhlIHNhbWUga2V5XG4gICAgICBpZiAoZW50aXR5Q2FjaGVSZWZbc3RyaW5naWZpZWRFbnRpdHlLZXldKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVudGl0eUNhY2hlUmVmW3N0cmluZ2lmaWVkRW50aXR5S2V5XSA9IGVudGl0eUtleTtcbiAgICAgIC8vIHdlIG5lZWQgdGhlIGBhbnlgIGNhc3RpbmcgaGVyZSBzaW5jZSB0aGlzIGlzIGEgdGVtcG9yYXJ5IHN0YXRlXG4gICAgICAvLyB3aGVyZSB3ZSB3aWxsIGxhdGVyIG9uIGZsaXAgdGhlIGVudGl0eSBtYXAgYW5kIHBvcHVsYXRlIGl0IHdpdGhcbiAgICAgIC8vIHJlYWwgZW50aXR5LCBhdCB0aGlzIHN0YWdlIHdlIGp1c3QgbmVlZCB0byBtYXAgYmFjayB0aGUgZW50aXR5XG4gICAgICAvLyBrZXkgdXNlZCBieSB0aGUgQmxvY2tOb2RlXG4gICAgICBlbnRpdHlNYXBbc3RyaW5naWZpZWRFbnRpdHlLZXldID0gJycgKyBlbnRpdHlTdG9yYWdlS2V5O1xuICAgICAgZW50aXR5U3RvcmFnZUtleSsrO1xuICAgIH0pO1xuXG4gICAgaW5zZXJ0UmF3QmxvY2soYmxvY2ssIGVudGl0eU1hcCwgcmF3QmxvY2tzLCBibG9ja0NhY2hlUmVmKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBibG9ja3M6IHJhd0Jsb2NrcyxcbiAgICBlbnRpdHlNYXA6IGVudGl0eU1hcFxuICB9O1xufTtcblxuLy8gRmxpcCBzdG9yYWdlIG1hcCBzbyB0aGF0IG91ciBzdG9yYWdlIGtleXMgbWFwIHRvIGdsb2JhbFxuLy8gRHJhZnRFbnRpdHkga2V5cy5cbnZhciBlbmNvZGVSYXdFbnRpdHlNYXAgPSBmdW5jdGlvbiBlbmNvZGVSYXdFbnRpdHlNYXAoY29udGVudFN0YXRlLCByYXdTdGF0ZSkge1xuICB2YXIgYmxvY2tzID0gcmF3U3RhdGUuYmxvY2tzLFxuICAgICAgZW50aXR5TWFwID0gcmF3U3RhdGUuZW50aXR5TWFwO1xuXG5cbiAgdmFyIHJhd0VudGl0eU1hcCA9IHt9O1xuXG4gIE9iamVjdC5rZXlzKGVudGl0eU1hcCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCBpbmRleCkge1xuICAgIHZhciBlbnRpdHkgPSBjb250ZW50U3RhdGUuZ2V0RW50aXR5KERyYWZ0U3RyaW5nS2V5LnVuc3RyaW5naWZ5KGtleSkpO1xuICAgIHJhd0VudGl0eU1hcFtpbmRleF0gPSB7XG4gICAgICB0eXBlOiBlbnRpdHkuZ2V0VHlwZSgpLFxuICAgICAgbXV0YWJpbGl0eTogZW50aXR5LmdldE11dGFiaWxpdHkoKSxcbiAgICAgIGRhdGE6IGVudGl0eS5nZXREYXRhKClcbiAgICB9O1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGJsb2NrczogYmxvY2tzLFxuICAgIGVudGl0eU1hcDogcmF3RW50aXR5TWFwXG4gIH07XG59O1xuXG52YXIgY29udmVydEZyb21EcmFmdFN0YXRlVG9SYXcgPSBmdW5jdGlvbiBjb252ZXJ0RnJvbURyYWZ0U3RhdGVUb1Jhdyhjb250ZW50U3RhdGUpIHtcbiAgdmFyIHJhd0RyYWZ0Q29udGVudFN0YXRlID0ge1xuICAgIGVudGl0eU1hcDoge30sXG4gICAgYmxvY2tzOiBbXVxuICB9O1xuXG4gIC8vIGFkZCBibG9ja3NcbiAgcmF3RHJhZnRDb250ZW50U3RhdGUgPSBlbmNvZGVSYXdCbG9ja3MoY29udGVudFN0YXRlLCByYXdEcmFmdENvbnRlbnRTdGF0ZSk7XG5cbiAgLy8gYWRkIGVudGl0aWVzXG4gIHJhd0RyYWZ0Q29udGVudFN0YXRlID0gZW5jb2RlUmF3RW50aXR5TWFwKGNvbnRlbnRTdGF0ZSwgcmF3RHJhZnRDb250ZW50U3RhdGUpO1xuXG4gIHJldHVybiByYXdEcmFmdENvbnRlbnRTdGF0ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY29udmVydEZyb21EcmFmdFN0YXRlVG9SYXc7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdEVkaXRvclBsYWNlaG9sZGVyLnJlYWN0XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIGN4ID0gcmVxdWlyZSgnZmJqcy9saWIvY3gnKTtcblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCBpcyByZXNwb25zaWJsZSBmb3IgcmVuZGVyaW5nIHBsYWNlaG9sZGVyIHRleHQgZm9yIHRoZVxuICogYERyYWZ0RWRpdG9yYCBjb21wb25lbnQuXG4gKlxuICogT3ZlcnJpZGUgcGxhY2Vob2xkZXIgc3R5bGUgdmlhIENTUy5cbiAqL1xudmFyIERyYWZ0RWRpdG9yUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRHJhZnRFZGl0b3JQbGFjZWhvbGRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJhZnRFZGl0b3JQbGFjZWhvbGRlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJhZnRFZGl0b3JQbGFjZWhvbGRlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIERyYWZ0RWRpdG9yUGxhY2Vob2xkZXIucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy50ZXh0ICE9PSBuZXh0UHJvcHMudGV4dCB8fCB0aGlzLnByb3BzLmVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLmdldEhhc0ZvY3VzKCkgIT09IG5leHRQcm9wcy5lZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKS5nZXRIYXNGb2N1cygpO1xuICB9O1xuXG4gIERyYWZ0RWRpdG9yUGxhY2Vob2xkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgaGFzRm9jdXMgPSB0aGlzLnByb3BzLmVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLmdldEhhc0ZvY3VzKCk7XG5cbiAgICB2YXIgY2xhc3NOYW1lID0gY3goe1xuICAgICAgJ3B1YmxpYy9EcmFmdEVkaXRvclBsYWNlaG9sZGVyL3Jvb3QnOiB0cnVlLFxuICAgICAgJ3B1YmxpYy9EcmFmdEVkaXRvclBsYWNlaG9sZGVyL2hhc0ZvY3VzJzogaGFzRm9jdXNcbiAgICB9KTtcblxuICAgIHZhciBjb250ZW50U3R5bGUgPSB7XG4gICAgICB3aGl0ZVNwYWNlOiAncHJlLXdyYXAnXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IGNsYXNzTmFtZTogY2xhc3NOYW1lIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogY3goJ3B1YmxpYy9EcmFmdEVkaXRvclBsYWNlaG9sZGVyL2lubmVyJyksXG4gICAgICAgICAgaWQ6IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eUlELFxuICAgICAgICAgIHN0eWxlOiBjb250ZW50U3R5bGUgfSxcbiAgICAgICAgdGhpcy5wcm9wcy50ZXh0XG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gRHJhZnRFZGl0b3JQbGFjZWhvbGRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVkaXRvclBsYWNlaG9sZGVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25cbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGdldERyYWZ0RWRpdG9yU2VsZWN0aW9uV2l0aE5vZGVzID0gcmVxdWlyZSgnLi9nZXREcmFmdEVkaXRvclNlbGVjdGlvbldpdGhOb2RlcycpO1xuXG4vKipcbiAqIENvbnZlcnQgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIHJhbmdlIHRvIGFuIGFuY2hvci9mb2N1cyBwYWlyIG9mIG9mZnNldCBrZXlzXG4gKiBhbmQgdmFsdWVzIHRoYXQgY2FuIGJlIGludGVycHJldGVkIGJ5IGNvbXBvbmVudHMuXG4gKi9cbmZ1bmN0aW9uIGdldERyYWZ0RWRpdG9yU2VsZWN0aW9uKGVkaXRvclN0YXRlLCByb290KSB7XG4gIHZhciBzZWxlY3Rpb24gPSBnbG9iYWwuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgLy8gTm8gYWN0aXZlIHNlbGVjdGlvbi5cbiAgaWYgKHNlbGVjdGlvbi5yYW5nZUNvdW50ID09PSAwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbGVjdGlvblN0YXRlOiBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKS5zZXQoJ2hhc0ZvY3VzJywgZmFsc2UpLFxuICAgICAgbmVlZHNSZWNvdmVyeTogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGdldERyYWZ0RWRpdG9yU2VsZWN0aW9uV2l0aE5vZGVzKGVkaXRvclN0YXRlLCByb290LCBzZWxlY3Rpb24uYW5jaG9yTm9kZSwgc2VsZWN0aW9uLmFuY2hvck9mZnNldCwgc2VsZWN0aW9uLmZvY3VzTm9kZSwgc2VsZWN0aW9uLmZvY3VzT2Zmc2V0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXREcmFmdEVkaXRvclNlbGVjdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVkaXRPblNlbGVjdFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG52YXIgUmVhY3RET00gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIGdldERyYWZ0RWRpdG9yU2VsZWN0aW9uID0gcmVxdWlyZSgnLi9nZXREcmFmdEVkaXRvclNlbGVjdGlvbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG5mdW5jdGlvbiBlZGl0T25TZWxlY3QoZWRpdG9yKSB7XG4gIGlmIChlZGl0b3IuX2Jsb2NrU2VsZWN0RXZlbnRzIHx8IGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGUgIT09IGVkaXRvci5wcm9wcy5lZGl0b3JTdGF0ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBlZGl0b3JTdGF0ZSA9IGVkaXRvci5wcm9wcy5lZGl0b3JTdGF0ZTtcbiAgdmFyIGVkaXRvck5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZShlZGl0b3IuZWRpdG9yQ29udGFpbmVyKTtcbiAgIWVkaXRvck5vZGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWlzc2luZyBlZGl0b3JOb2RlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhKGVkaXRvck5vZGUuZmlyc3RDaGlsZCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdlZGl0b3JOb2RlLmZpcnN0Q2hpbGQgaXMgbm90IGFuIEhUTUxFbGVtZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZG9jdW1lbnRTZWxlY3Rpb24gPSBnZXREcmFmdEVkaXRvclNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgZWRpdG9yTm9kZS5maXJzdENoaWxkKTtcbiAgdmFyIHVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSA9IGRvY3VtZW50U2VsZWN0aW9uLnNlbGVjdGlvblN0YXRlO1xuXG4gIGlmICh1cGRhdGVkU2VsZWN0aW9uU3RhdGUgIT09IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpKSB7XG4gICAgaWYgKGRvY3VtZW50U2VsZWN0aW9uLm5lZWRzUmVjb3ZlcnkpIHtcbiAgICAgIGVkaXRvclN0YXRlID0gRWRpdG9yU3RhdGUuZm9yY2VTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIHVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVkaXRvclN0YXRlID0gRWRpdG9yU3RhdGUuYWNjZXB0U2VsZWN0aW9uKGVkaXRvclN0YXRlLCB1cGRhdGVkU2VsZWN0aW9uU3RhdGUpO1xuICAgIH1cbiAgICBlZGl0b3IudXBkYXRlKGVkaXRvclN0YXRlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRPblNlbGVjdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNwbGl0VGV4dEludG9UZXh0QmxvY2tzXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBORVdMSU5FX1JFR0VYID0gL1xcclxcbj98XFxuL2c7XG5cbmZ1bmN0aW9uIHNwbGl0VGV4dEludG9UZXh0QmxvY2tzKHRleHQpIHtcbiAgcmV0dXJuIHRleHQuc3BsaXQoTkVXTElORV9SRUdFWCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3BsaXRUZXh0SW50b1RleHRCbG9ja3M7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBhZGp1c3RCbG9ja0RlcHRoRm9yQ29udGVudFN0YXRlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGFkanVzdEJsb2NrRGVwdGhGb3JDb250ZW50U3RhdGUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgYWRqdXN0bWVudCwgbWF4RGVwdGgpIHtcbiAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIGVuZEtleSA9IHNlbGVjdGlvblN0YXRlLmdldEVuZEtleSgpO1xuICB2YXIgYmxvY2tNYXAgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tNYXAoKTtcbiAgdmFyIGJsb2NrcyA9IGJsb2NrTWFwLnRvU2VxKCkuc2tpcFVudGlsKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgcmV0dXJuIGsgPT09IHN0YXJ0S2V5O1xuICB9KS50YWtlVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gZW5kS2V5O1xuICB9KS5jb25jYXQoW1tlbmRLZXksIGJsb2NrTWFwLmdldChlbmRLZXkpXV0pLm1hcChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICB2YXIgZGVwdGggPSBibG9jay5nZXREZXB0aCgpICsgYWRqdXN0bWVudDtcbiAgICBkZXB0aCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGRlcHRoLCBtYXhEZXB0aCkpO1xuICAgIHJldHVybiBibG9jay5zZXQoJ2RlcHRoJywgZGVwdGgpO1xuICB9KTtcblxuICBibG9ja01hcCA9IGJsb2NrTWFwLm1lcmdlKGJsb2Nrcyk7XG5cbiAgcmV0dXJuIGNvbnRlbnRTdGF0ZS5tZXJnZSh7XG4gICAgYmxvY2tNYXA6IGJsb2NrTWFwLFxuICAgIHNlbGVjdGlvbkJlZm9yZTogc2VsZWN0aW9uU3RhdGUsXG4gICAgc2VsZWN0aW9uQWZ0ZXI6IHNlbGVjdGlvblN0YXRlXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkanVzdEJsb2NrRGVwdGhGb3JDb250ZW50U3RhdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBVUkkgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFVSSSh1cmkpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVVJJKTtcblxuICAgIHRoaXMuX3VyaSA9IHVyaTtcbiAgfVxuXG4gIFVSSS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdXJpO1xuICB9O1xuXG4gIHJldHVybiBVUkk7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gVVJJOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRHJhZnRQYXN0ZVByb2Nlc3NvclxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIF9leHRlbmRzID0gX2Fzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIENoYXJhY3Rlck1ldGFkYXRhID0gcmVxdWlyZSgnLi9DaGFyYWN0ZXJNZXRhZGF0YScpO1xudmFyIENvbnRlbnRCbG9jayA9IHJlcXVpcmUoJy4vQ29udGVudEJsb2NrJyk7XG52YXIgQ29udGVudEJsb2NrTm9kZSA9IHJlcXVpcmUoJy4vQ29udGVudEJsb2NrTm9kZScpO1xudmFyIERyYWZ0RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi9EcmFmdEZlYXR1cmVGbGFncycpO1xudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG52YXIgY29udmVydEZyb21IVE1MdG9Db250ZW50QmxvY2tzID0gcmVxdWlyZSgnLi9jb252ZXJ0RnJvbUhUTUxUb0NvbnRlbnRCbG9ja3MnKTtcbnZhciBnZW5lcmF0ZVJhbmRvbUtleSA9IHJlcXVpcmUoJy4vZ2VuZXJhdGVSYW5kb21LZXknKTtcbnZhciBnZXRTYWZlQm9keUZyb21IVE1MID0gcmVxdWlyZSgnLi9nZXRTYWZlQm9keUZyb21IVE1MJyk7XG52YXIgc2FuaXRpemVEcmFmdFRleHQgPSByZXF1aXJlKCcuL3Nhbml0aXplRHJhZnRUZXh0Jyk7XG5cbnZhciBMaXN0ID0gSW1tdXRhYmxlLkxpc3QsXG4gICAgUmVwZWF0ID0gSW1tdXRhYmxlLlJlcGVhdDtcblxuXG52YXIgZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0ID0gRHJhZnRGZWF0dXJlRmxhZ3MuZHJhZnRfdHJlZV9kYXRhX3N1cHBvcnQ7XG52YXIgQ29udGVudEJsb2NrUmVjb3JkID0gZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0ID8gQ29udGVudEJsb2NrTm9kZSA6IENvbnRlbnRCbG9jaztcblxudmFyIERyYWZ0UGFzdGVQcm9jZXNzb3IgPSB7XG4gIHByb2Nlc3NIVE1MOiBmdW5jdGlvbiBwcm9jZXNzSFRNTChodG1sLCBibG9ja1JlbmRlck1hcCkge1xuICAgIHJldHVybiBjb252ZXJ0RnJvbUhUTUx0b0NvbnRlbnRCbG9ja3MoaHRtbCwgZ2V0U2FmZUJvZHlGcm9tSFRNTCwgYmxvY2tSZW5kZXJNYXApO1xuICB9LFxuICBwcm9jZXNzVGV4dDogZnVuY3Rpb24gcHJvY2Vzc1RleHQodGV4dEJsb2NrcywgY2hhcmFjdGVyLCB0eXBlKSB7XG4gICAgcmV0dXJuIHRleHRCbG9ja3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHRleHRMaW5lLCBpbmRleCkge1xuICAgICAgdGV4dExpbmUgPSBzYW5pdGl6ZURyYWZ0VGV4dCh0ZXh0TGluZSk7XG4gICAgICB2YXIga2V5ID0gZ2VuZXJhdGVSYW5kb21LZXkoKTtcblxuICAgICAgdmFyIGJsb2NrTm9kZUNvbmZpZyA9IHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHRleHQ6IHRleHRMaW5lLFxuICAgICAgICBjaGFyYWN0ZXJMaXN0OiBMaXN0KFJlcGVhdChjaGFyYWN0ZXIsIHRleHRMaW5lLmxlbmd0aCkpXG4gICAgICB9O1xuXG4gICAgICAvLyBuZXh0IGJsb2NrIHVwZGF0ZXMgcHJldmlvdXMgYmxvY2tcbiAgICAgIGlmIChleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQgJiYgaW5kZXggIT09IDApIHtcbiAgICAgICAgdmFyIHByZXZTaWJsaW5nSW5kZXggPSBpbmRleCAtIDE7XG4gICAgICAgIC8vIHVwZGF0ZSBwcmV2aW91cyBibG9ja1xuICAgICAgICB2YXIgcHJldmlvdXNCbG9jayA9IGFjY1twcmV2U2libGluZ0luZGV4XSA9IGFjY1twcmV2U2libGluZ0luZGV4XS5tZXJnZSh7XG4gICAgICAgICAgbmV4dFNpYmxpbmc6IGtleVxuICAgICAgICB9KTtcbiAgICAgICAgYmxvY2tOb2RlQ29uZmlnID0gX2V4dGVuZHMoe30sIGJsb2NrTm9kZUNvbmZpZywge1xuICAgICAgICAgIHByZXZTaWJsaW5nOiBwcmV2aW91c0Jsb2NrLmdldEtleSgpXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBhY2MucHVzaChuZXcgQ29udGVudEJsb2NrUmVjb3JkKGJsb2NrTm9kZUNvbmZpZykpO1xuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdFBhc3RlUHJvY2Vzc29yOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZWRpdE9uUGFzdGVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEJsb2NrTWFwQnVpbGRlciA9IHJlcXVpcmUoJy4vQmxvY2tNYXBCdWlsZGVyJyk7XG52YXIgQ2hhcmFjdGVyTWV0YWRhdGEgPSByZXF1aXJlKCcuL0NoYXJhY3Rlck1ldGFkYXRhJyk7XG52YXIgRGF0YVRyYW5zZmVyID0gcmVxdWlyZSgnZmJqcy9saWIvRGF0YVRyYW5zZmVyJyk7XG52YXIgRHJhZnRNb2RpZmllciA9IHJlcXVpcmUoJy4vRHJhZnRNb2RpZmllcicpO1xudmFyIERyYWZ0UGFzdGVQcm9jZXNzb3IgPSByZXF1aXJlKCcuL0RyYWZ0UGFzdGVQcm9jZXNzb3InKTtcbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcbnZhciBSaWNoVGV4dEVkaXRvclV0aWwgPSByZXF1aXJlKCcuL1JpY2hUZXh0RWRpdG9yVXRpbCcpO1xuXG52YXIgZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uID0gcmVxdWlyZSgnLi9nZXRFbnRpdHlLZXlGb3JTZWxlY3Rpb24nKTtcbnZhciBnZXRUZXh0Q29udGVudEZyb21GaWxlcyA9IHJlcXVpcmUoJy4vZ2V0VGV4dENvbnRlbnRGcm9tRmlsZXMnKTtcbnZhciBpc0V2ZW50SGFuZGxlZCA9IHJlcXVpcmUoJy4vaXNFdmVudEhhbmRsZWQnKTtcbnZhciBzcGxpdFRleHRJbnRvVGV4dEJsb2NrcyA9IHJlcXVpcmUoJy4vc3BsaXRUZXh0SW50b1RleHRCbG9ja3MnKTtcblxuLyoqXG4gKiBQYXN0ZSBjb250ZW50LlxuICovXG5mdW5jdGlvbiBlZGl0T25QYXN0ZShlZGl0b3IsIGUpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB2YXIgZGF0YSA9IG5ldyBEYXRhVHJhbnNmZXIoZS5jbGlwYm9hcmREYXRhKTtcblxuICAvLyBHZXQgZmlsZXMsIHVubGVzcyB0aGlzIGlzIGxpa2VseSB0byBiZSBhIHN0cmluZyB0aGUgdXNlciB3YW50cyBpbmxpbmUuXG4gIGlmICghZGF0YS5pc1JpY2hUZXh0KCkpIHtcbiAgICB2YXIgZmlsZXMgPSBkYXRhLmdldEZpbGVzKCk7XG4gICAgdmFyIGRlZmF1bHRGaWxlVGV4dCA9IGRhdGEuZ2V0VGV4dCgpO1xuICAgIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBBbGxvdyBjdXN0b21pemVkIHBhc3RlIGhhbmRsaW5nIGZvciBpbWFnZXMsIGV0Yy4gT3RoZXJ3aXNlLCBmYWxsXG4gICAgICAvLyB0aHJvdWdoIHRvIGluc2VydCB0ZXh0IGNvbnRlbnRzIGludG8gdGhlIGVkaXRvci5cbiAgICAgIGlmIChlZGl0b3IucHJvcHMuaGFuZGxlUGFzdGVkRmlsZXMgJiYgaXNFdmVudEhhbmRsZWQoZWRpdG9yLnByb3BzLmhhbmRsZVBhc3RlZEZpbGVzKGZpbGVzKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBnZXRUZXh0Q29udGVudEZyb21GaWxlcyhmaWxlcywgZnVuY3Rpb24gKCAvKnN0cmluZyovZmlsZVRleHQpIHtcbiAgICAgICAgZmlsZVRleHQgPSBmaWxlVGV4dCB8fCBkZWZhdWx0RmlsZVRleHQ7XG4gICAgICAgIGlmICghZmlsZVRleHQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWRpdG9yU3RhdGUgPSBlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlO1xuICAgICAgICB2YXIgYmxvY2tzID0gc3BsaXRUZXh0SW50b1RleHRCbG9ja3MoZmlsZVRleHQpO1xuICAgICAgICB2YXIgY2hhcmFjdGVyID0gQ2hhcmFjdGVyTWV0YWRhdGEuY3JlYXRlKHtcbiAgICAgICAgICBzdHlsZTogZWRpdG9yU3RhdGUuZ2V0Q3VycmVudElubGluZVN0eWxlKCksXG4gICAgICAgICAgZW50aXR5OiBnZXRFbnRpdHlLZXlGb3JTZWxlY3Rpb24oZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkpXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgY3VycmVudEJsb2NrVHlwZSA9IFJpY2hUZXh0RWRpdG9yVXRpbC5nZXRDdXJyZW50QmxvY2tUeXBlKGVkaXRvclN0YXRlKTtcblxuICAgICAgICB2YXIgdGV4dCA9IERyYWZ0UGFzdGVQcm9jZXNzb3IucHJvY2Vzc1RleHQoYmxvY2tzLCBjaGFyYWN0ZXIsIGN1cnJlbnRCbG9ja1R5cGUpO1xuICAgICAgICB2YXIgZnJhZ21lbnQgPSBCbG9ja01hcEJ1aWxkZXIuY3JlYXRlRnJvbUFycmF5KHRleHQpO1xuXG4gICAgICAgIHZhciB3aXRoSW5zZXJ0ZWRUZXh0ID0gRHJhZnRNb2RpZmllci5yZXBsYWNlV2l0aEZyYWdtZW50KGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCksIGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLCBmcmFnbWVudCk7XG5cbiAgICAgICAgZWRpdG9yLnVwZGF0ZShFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCB3aXRoSW5zZXJ0ZWRUZXh0LCAnaW5zZXJ0LWZyYWdtZW50JykpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICB2YXIgdGV4dEJsb2NrcyA9IFtdO1xuICB2YXIgdGV4dCA9IGRhdGEuZ2V0VGV4dCgpO1xuICB2YXIgaHRtbCA9IGRhdGEuZ2V0SFRNTCgpO1xuICB2YXIgZWRpdG9yU3RhdGUgPSBlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlO1xuXG4gIGlmIChlZGl0b3IucHJvcHMuaGFuZGxlUGFzdGVkVGV4dCAmJiBpc0V2ZW50SGFuZGxlZChlZGl0b3IucHJvcHMuaGFuZGxlUGFzdGVkVGV4dCh0ZXh0LCBodG1sLCBlZGl0b3JTdGF0ZSkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRleHQpIHtcbiAgICB0ZXh0QmxvY2tzID0gc3BsaXRUZXh0SW50b1RleHRCbG9ja3ModGV4dCk7XG4gIH1cblxuICBpZiAoIWVkaXRvci5wcm9wcy5zdHJpcFBhc3RlZFN0eWxlcykge1xuICAgIC8vIElmIHRoZSB0ZXh0IGZyb20gdGhlIHBhc3RlIGV2ZW50IGlzIHJpY2ggY29udGVudCB0aGF0IG1hdGNoZXMgd2hhdCB3ZVxuICAgIC8vIGFscmVhZHkgaGF2ZSBvbiB0aGUgaW50ZXJuYWwgY2xpcGJvYXJkLCBhc3N1bWUgdGhhdCB3ZSBzaG91bGQganVzdCB1c2VcbiAgICAvLyB0aGUgY2xpcGJvYXJkIGZyYWdtZW50IGZvciB0aGUgcGFzdGUuIFRoaXMgd2lsbCBhbGxvdyB1cyB0byBwcmVzZXJ2ZVxuICAgIC8vIHN0eWxpbmcgYW5kIGVudGl0aWVzLCBpZiBhbnkgYXJlIHByZXNlbnQuIE5vdGUgdGhhdCBuZXdsaW5lcyBhcmVcbiAgICAvLyBzdHJpcHBlZCBkdXJpbmcgY29tcGFyaXNvbiAtLSB0aGlzIGlzIGJlY2F1c2UgY29weS9wYXN0ZSB3aXRoaW4gdGhlXG4gICAgLy8gZWRpdG9yIGluIEZpcmVmb3ggYW5kIElFIHdpbGwgbm90IGluY2x1ZGUgZW1wdHkgbGluZXMuIFRoZSByZXN1bHRpbmdcbiAgICAvLyBwYXN0ZSB3aWxsIHByZXNlcnZlIHRoZSBuZXdsaW5lcyBjb3JyZWN0bHkuXG4gICAgdmFyIGludGVybmFsQ2xpcGJvYXJkID0gZWRpdG9yLmdldENsaXBib2FyZCgpO1xuICAgIGlmIChkYXRhLmlzUmljaFRleHQoKSAmJiBpbnRlcm5hbENsaXBib2FyZCkge1xuICAgICAgaWYgKFxuICAgICAgLy8gSWYgdGhlIGVkaXRvcktleSBpcyBwcmVzZW50IGluIHRoZSBwYXN0ZWQgSFRNTCwgaXQgc2hvdWxkIGJlIHNhZmUgdG9cbiAgICAgIC8vIGFzc3VtZSB0aGlzIGlzIGFuIGludGVybmFsIHBhc3RlLlxuICAgICAgaHRtbC5pbmRleE9mKGVkaXRvci5nZXRFZGl0b3JLZXkoKSkgIT09IC0xIHx8XG4gICAgICAvLyBUaGUgY29weSBtYXkgaGF2ZSBiZWVuIG1hZGUgd2l0aGluIGEgc2luZ2xlIGJsb2NrLCBpbiB3aGljaCBjYXNlIHRoZVxuICAgICAgLy8gZWRpdG9yIGtleSB3b24ndCBiZSBwYXJ0IG9mIHRoZSBwYXN0ZS4gSW4gdGhpcyBjYXNlLCBqdXN0IGNoZWNrXG4gICAgICAvLyB3aGV0aGVyIHRoZSBwYXN0ZWQgdGV4dCBtYXRjaGVzIHRoZSBpbnRlcm5hbCBjbGlwYm9hcmQuXG4gICAgICB0ZXh0QmxvY2tzLmxlbmd0aCA9PT0gMSAmJiBpbnRlcm5hbENsaXBib2FyZC5zaXplID09PSAxICYmIGludGVybmFsQ2xpcGJvYXJkLmZpcnN0KCkuZ2V0VGV4dCgpID09PSB0ZXh0KSB7XG4gICAgICAgIGVkaXRvci51cGRhdGUoaW5zZXJ0RnJhZ21lbnQoZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZSwgaW50ZXJuYWxDbGlwYm9hcmQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW50ZXJuYWxDbGlwYm9hcmQgJiYgZGF0YS50eXBlcy5pbmNsdWRlcygnY29tLmFwcGxlLndlYmFyY2hpdmUnKSAmJiAhZGF0YS50eXBlcy5pbmNsdWRlcygndGV4dC9odG1sJykgJiYgYXJlVGV4dEJsb2Nrc0FuZENsaXBib2FyZEVxdWFsKHRleHRCbG9ja3MsIGludGVybmFsQ2xpcGJvYXJkKSkge1xuICAgICAgLy8gU2FmYXJpIGRvZXMgbm90IHByb3Blcmx5IHN0b3JlIHRleHQvaHRtbCBpbiBzb21lIGNhc2VzLlxuICAgICAgLy8gVXNlIHRoZSBpbnRlcm5hbENsaXBib2FyZCBpZiBwcmVzZW50IGFuZCBlcXVhbCB0byB3aGF0IGlzIG9uXG4gICAgICAvLyB0aGUgY2xpcGJvYXJkLiBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE5ODkzLlxuICAgICAgZWRpdG9yLnVwZGF0ZShpbnNlcnRGcmFnbWVudChlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlLCBpbnRlcm5hbENsaXBib2FyZCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIGlzIGh0bWwgcGFzdGUgZGF0YSwgdHJ5IHRvIHBhcnNlIHRoYXQuXG4gICAgaWYgKGh0bWwpIHtcbiAgICAgIHZhciBodG1sRnJhZ21lbnQgPSBEcmFmdFBhc3RlUHJvY2Vzc29yLnByb2Nlc3NIVE1MKGh0bWwsIGVkaXRvci5wcm9wcy5ibG9ja1JlbmRlck1hcCk7XG4gICAgICBpZiAoaHRtbEZyYWdtZW50KSB7XG4gICAgICAgIHZhciBjb250ZW50QmxvY2tzID0gaHRtbEZyYWdtZW50LmNvbnRlbnRCbG9ja3MsXG4gICAgICAgICAgICBlbnRpdHlNYXAgPSBodG1sRnJhZ21lbnQuZW50aXR5TWFwO1xuXG4gICAgICAgIGlmIChjb250ZW50QmxvY2tzKSB7XG4gICAgICAgICAgdmFyIGh0bWxNYXAgPSBCbG9ja01hcEJ1aWxkZXIuY3JlYXRlRnJvbUFycmF5KGNvbnRlbnRCbG9ja3MpO1xuICAgICAgICAgIGVkaXRvci51cGRhdGUoaW5zZXJ0RnJhZ21lbnQoZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZSwgaHRtbE1hcCwgZW50aXR5TWFwKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBjcmVhdGUgYSBuZXcgZnJhZ21lbnQgZnJvbSBvdXIgcGFzdGVkIHRleHQuIEFsc29cbiAgICAvLyBlbXB0eSB0aGUgaW50ZXJuYWwgY2xpcGJvYXJkLCBzaW5jZSBpdCdzIG5vIGxvbmdlciB2YWxpZC5cbiAgICBlZGl0b3Iuc2V0Q2xpcGJvYXJkKG51bGwpO1xuICB9XG5cbiAgaWYgKHRleHRCbG9ja3MubGVuZ3RoKSB7XG4gICAgdmFyIGNoYXJhY3RlciA9IENoYXJhY3Rlck1ldGFkYXRhLmNyZWF0ZSh7XG4gICAgICBzdHlsZTogZWRpdG9yU3RhdGUuZ2V0Q3VycmVudElubGluZVN0eWxlKCksXG4gICAgICBlbnRpdHk6IGdldEVudGl0eUtleUZvclNlbGVjdGlvbihlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSlcbiAgICB9KTtcblxuICAgIHZhciBjdXJyZW50QmxvY2tUeXBlID0gUmljaFRleHRFZGl0b3JVdGlsLmdldEN1cnJlbnRCbG9ja1R5cGUoZWRpdG9yU3RhdGUpO1xuXG4gICAgdmFyIHRleHRGcmFnbWVudCA9IERyYWZ0UGFzdGVQcm9jZXNzb3IucHJvY2Vzc1RleHQodGV4dEJsb2NrcywgY2hhcmFjdGVyLCBjdXJyZW50QmxvY2tUeXBlKTtcblxuICAgIHZhciB0ZXh0TWFwID0gQmxvY2tNYXBCdWlsZGVyLmNyZWF0ZUZyb21BcnJheSh0ZXh0RnJhZ21lbnQpO1xuICAgIGVkaXRvci51cGRhdGUoaW5zZXJ0RnJhZ21lbnQoZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZSwgdGV4dE1hcCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydEZyYWdtZW50KGVkaXRvclN0YXRlLCBmcmFnbWVudCwgZW50aXR5TWFwKSB7XG4gIHZhciBuZXdDb250ZW50ID0gRHJhZnRNb2RpZmllci5yZXBsYWNlV2l0aEZyYWdtZW50KGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCksIGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLCBmcmFnbWVudCk7XG4gIC8vIFRPRE86IG1lcmdlIHRoZSBlbnRpdHkgbWFwIG9uY2Ugd2Ugc3RvcCB1c2luZyBEcmFmdEVudGl0eVxuICAvLyBsaWtlIHRoaXM6XG4gIC8vIGNvbnN0IG1lcmdlZEVudGl0eU1hcCA9IG5ld0NvbnRlbnQuZ2V0RW50aXR5TWFwKCkubWVyZ2UoZW50aXR5TWFwKTtcblxuICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgbmV3Q29udGVudC5zZXQoJ2VudGl0eU1hcCcsIGVudGl0eU1hcCksICdpbnNlcnQtZnJhZ21lbnQnKTtcbn1cblxuZnVuY3Rpb24gYXJlVGV4dEJsb2Nrc0FuZENsaXBib2FyZEVxdWFsKHRleHRCbG9ja3MsIGJsb2NrTWFwKSB7XG4gIHJldHVybiB0ZXh0QmxvY2tzLmxlbmd0aCA9PT0gYmxvY2tNYXAuc2l6ZSAmJiBibG9ja01hcC52YWx1ZVNlcSgpLmV2ZXJ5KGZ1bmN0aW9uIChibG9jaywgaWkpIHtcbiAgICByZXR1cm4gYmxvY2suZ2V0VGV4dCgpID09PSB0ZXh0QmxvY2tzW2lpXTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWRpdE9uUGFzdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBrZXlDb21tYW5kVW5kb1xuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG5cbmZ1bmN0aW9uIGtleUNvbW1hbmRVbmRvKGUsIGVkaXRvclN0YXRlLCB1cGRhdGVGbikge1xuICB2YXIgdW5kb25lU3RhdGUgPSBFZGl0b3JTdGF0ZS51bmRvKGVkaXRvclN0YXRlKTtcblxuICAvLyBJZiB0aGUgbGFzdCBjaGFuZ2UgdG8gb2NjdXIgd2FzIGEgc3BlbGxjaGVjayBjaGFuZ2UsIGFsbG93IHRoZSB1bmRvXG4gIC8vIGV2ZW50IHRvIGZhbGwgdGhyb3VnaCB0byB0aGUgYnJvd3Nlci4gVGhpcyBhbGxvd3MgdGhlIGJyb3dzZXIgdG8gcmVjb3JkXG4gIC8vIHRoZSB1bndhbnRlZCBjaGFuZ2UsIHdoaWNoIHNob3VsZCBzb29uIGxlYWQgaXQgdG8gbGVhcm4gbm90IHRvIHN1Z2dlc3RcbiAgLy8gdGhlIGNvcnJlY3Rpb24gYWdhaW4uXG4gIGlmIChlZGl0b3JTdGF0ZS5nZXRMYXN0Q2hhbmdlVHlwZSgpID09PSAnc3BlbGxjaGVjay1jaGFuZ2UnKSB7XG4gICAgdmFyIG5hdGl2ZWx5UmVuZGVyZWRDb250ZW50ID0gdW5kb25lU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB1cGRhdGVGbihFZGl0b3JTdGF0ZS5zZXQodW5kb25lU3RhdGUsIHsgbmF0aXZlbHlSZW5kZXJlZENvbnRlbnQ6IG5hdGl2ZWx5UmVuZGVyZWRDb250ZW50IH0pKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBPdGhlcml3c2UsIG1hbmFnZSB0aGUgdW5kbyBiZWhhdmlvciBtYW51YWxseS5cbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBpZiAoIWVkaXRvclN0YXRlLmdldE5hdGl2ZWx5UmVuZGVyZWRDb250ZW50KCkpIHtcbiAgICB1cGRhdGVGbih1bmRvbmVTdGF0ZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVHJpZ2dlciBhIHJlLXJlbmRlciB3aXRoIHRoZSBjdXJyZW50IGNvbnRlbnQgc3RhdGUgdG8gZW5zdXJlIHRoYXQgdGhlXG4gIC8vIGNvbXBvbmVudCB0cmVlIGhhcyB1cC10by1kYXRlIHByb3BzIGZvciBjb21wYXJpc29uLlxuICB1cGRhdGVGbihFZGl0b3JTdGF0ZS5zZXQoZWRpdG9yU3RhdGUsIHsgbmF0aXZlbHlSZW5kZXJlZENvbnRlbnQ6IG51bGwgfSkpO1xuXG4gIC8vIFdhaXQgdG8gZW5zdXJlIHRoYXQgdGhlIHJlLXJlbmRlciBoYXMgb2NjdXJyZWQgYmVmb3JlIHBlcmZvcm1pbmdcbiAgLy8gdGhlIHVuZG8gYWN0aW9uLlxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICB1cGRhdGVGbih1bmRvbmVTdGF0ZSk7XG4gIH0sIDApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmRVbmRvOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUga2V5Q29tbWFuZFRyYW5zcG9zZUNoYXJhY3RlcnNcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0TW9kaWZpZXIgPSByZXF1aXJlKCcuL0RyYWZ0TW9kaWZpZXInKTtcbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcblxudmFyIGdldENvbnRlbnRTdGF0ZUZyYWdtZW50ID0gcmVxdWlyZSgnLi9nZXRDb250ZW50U3RhdGVGcmFnbWVudCcpO1xuXG4vKipcbiAqIFRyYW5zcG9zZSB0aGUgY2hhcmFjdGVycyBvbiBlaXRoZXIgc2lkZSBvZiBhIGNvbGxhcHNlZCBjdXJzb3IsIG9yXG4gKiBpZiB0aGUgY3Vyc29yIGlzIGF0IHRoZSBlbmQgb2YgdGhlIGJsb2NrLCB0cmFuc3Bvc2UgdGhlIGxhc3QgdHdvXG4gKiBjaGFyYWN0ZXJzLlxuICovXG5mdW5jdGlvbiBrZXlDb21tYW5kVHJhbnNwb3NlQ2hhcmFjdGVycyhlZGl0b3JTdGF0ZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIGlmICghc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkpIHtcbiAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gIH1cblxuICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uLmdldEFuY2hvck9mZnNldCgpO1xuICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICB9XG5cbiAgdmFyIGJsb2NrS2V5ID0gc2VsZWN0aW9uLmdldEFuY2hvcktleSgpO1xuICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gIHZhciBibG9jayA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoYmxvY2tLZXkpO1xuICB2YXIgbGVuZ3RoID0gYmxvY2suZ2V0TGVuZ3RoKCk7XG5cbiAgLy8gTm90aGluZyB0byB0cmFuc3Bvc2UgaWYgdGhlcmUgYXJlbid0IHR3byBjaGFyYWN0ZXJzLlxuICBpZiAobGVuZ3RoIDw9IDEpIHtcbiAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gIH1cblxuICB2YXIgcmVtb3ZhbFJhbmdlO1xuICB2YXIgZmluYWxTZWxlY3Rpb247XG5cbiAgaWYgKG9mZnNldCA9PT0gbGVuZ3RoKSB7XG4gICAgLy8gVGhlIGN1cnNvciBpcyBhdCB0aGUgZW5kIG9mIHRoZSBibG9jay4gU3dhcCB0aGUgbGFzdCB0d28gY2hhcmFjdGVycy5cbiAgICByZW1vdmFsUmFuZ2UgPSBzZWxlY3Rpb24uc2V0KCdhbmNob3JPZmZzZXQnLCBvZmZzZXQgLSAxKTtcbiAgICBmaW5hbFNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbiAgfSBlbHNlIHtcbiAgICByZW1vdmFsUmFuZ2UgPSBzZWxlY3Rpb24uc2V0KCdmb2N1c09mZnNldCcsIG9mZnNldCArIDEpO1xuICAgIGZpbmFsU2VsZWN0aW9uID0gcmVtb3ZhbFJhbmdlLnNldCgnYW5jaG9yT2Zmc2V0Jywgb2Zmc2V0ICsgMSk7XG4gIH1cblxuICAvLyBFeHRyYWN0IHRoZSBjaGFyYWN0ZXIgdG8gbW92ZSBhcyBhIGZyYWdtZW50LiBUaGlzIHByZXNlcnZlcyBpdHNcbiAgLy8gc3R5bGluZyBhbmQgZW50aXR5LCBpZiBhbnkuXG4gIHZhciBtb3ZlZEZyYWdtZW50ID0gZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQoY29udGVudCwgcmVtb3ZhbFJhbmdlKTtcbiAgdmFyIGFmdGVyUmVtb3ZhbCA9IERyYWZ0TW9kaWZpZXIucmVtb3ZlUmFuZ2UoY29udGVudCwgcmVtb3ZhbFJhbmdlLCAnYmFja3dhcmQnKTtcblxuICAvLyBBZnRlciB0aGUgcmVtb3ZhbCwgdGhlIGluc2VydGlvbiB0YXJnZXQgaXMgb25lIGNoYXJhY3RlciBiYWNrLlxuICB2YXIgc2VsZWN0aW9uQWZ0ZXIgPSBhZnRlclJlbW92YWwuZ2V0U2VsZWN0aW9uQWZ0ZXIoKTtcbiAgdmFyIHRhcmdldE9mZnNldCA9IHNlbGVjdGlvbkFmdGVyLmdldEFuY2hvck9mZnNldCgpIC0gMTtcbiAgdmFyIHRhcmdldFJhbmdlID0gc2VsZWN0aW9uQWZ0ZXIubWVyZ2Uoe1xuICAgIGFuY2hvck9mZnNldDogdGFyZ2V0T2Zmc2V0LFxuICAgIGZvY3VzT2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSk7XG5cbiAgdmFyIGFmdGVySW5zZXJ0ID0gRHJhZnRNb2RpZmllci5yZXBsYWNlV2l0aEZyYWdtZW50KGFmdGVyUmVtb3ZhbCwgdGFyZ2V0UmFuZ2UsIG1vdmVkRnJhZ21lbnQpO1xuXG4gIHZhciBuZXdFZGl0b3JTdGF0ZSA9IEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIGFmdGVySW5zZXJ0LCAnaW5zZXJ0LWZyYWdtZW50Jyk7XG5cbiAgcmV0dXJuIEVkaXRvclN0YXRlLmFjY2VwdFNlbGVjdGlvbihuZXdFZGl0b3JTdGF0ZSwgZmluYWxTZWxlY3Rpb24pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmRUcmFuc3Bvc2VDaGFyYWN0ZXJzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUga2V5Q29tbWFuZFBsYWluRGVsZXRlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcbnZhciBVbmljb2RlVXRpbHMgPSByZXF1aXJlKCdmYmpzL2xpYi9Vbmljb2RlVXRpbHMnKTtcblxudmFyIG1vdmVTZWxlY3Rpb25Gb3J3YXJkID0gcmVxdWlyZSgnLi9tb3ZlU2VsZWN0aW9uRm9yd2FyZCcpO1xudmFyIHJlbW92ZVRleHRXaXRoU3RyYXRlZ3kgPSByZXF1aXJlKCcuL3JlbW92ZVRleHRXaXRoU3RyYXRlZ3knKTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIHNlbGVjdGVkIHJhbmdlLiBJZiB0aGUgY3Vyc29yIGlzIGNvbGxhcHNlZCwgcmVtb3ZlIHRoZSBmb2xsb3dpbmdcbiAqIGNoYXJhY3Rlci4gVGhpcyBvcGVyYXRpb24gaXMgVW5pY29kZS1hd2FyZSwgc28gcmVtb3ZpbmcgYSBzaW5nbGUgY2hhcmFjdGVyXG4gKiB3aWxsIHJlbW92ZSBhIHN1cnJvZ2F0ZSBwYWlyIHByb3Blcmx5IGFzIHdlbGwuXG4gKi9cbmZ1bmN0aW9uIGtleUNvbW1hbmRQbGFpbkRlbGV0ZShlZGl0b3JTdGF0ZSkge1xuICB2YXIgYWZ0ZXJSZW1vdmFsID0gcmVtb3ZlVGV4dFdpdGhTdHJhdGVneShlZGl0b3JTdGF0ZSwgZnVuY3Rpb24gKHN0cmF0ZWd5U3RhdGUpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gc3RyYXRlZ3lTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgY29udGVudCA9IHN0cmF0ZWd5U3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIga2V5ID0gc2VsZWN0aW9uLmdldEFuY2hvcktleSgpO1xuICAgIHZhciBvZmZzZXQgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yT2Zmc2V0KCk7XG4gICAgdmFyIGNoYXJBaGVhZCA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoa2V5KS5nZXRUZXh0KClbb2Zmc2V0XTtcbiAgICByZXR1cm4gbW92ZVNlbGVjdGlvbkZvcndhcmQoc3RyYXRlZ3lTdGF0ZSwgY2hhckFoZWFkID8gVW5pY29kZVV0aWxzLmdldFVURjE2TGVuZ3RoKGNoYXJBaGVhZCwgMCkgOiAxKTtcbiAgfSwgJ2ZvcndhcmQnKTtcblxuICBpZiAoYWZ0ZXJSZW1vdmFsID09PSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpKSB7XG4gICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuXG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBhZnRlclJlbW92YWwuc2V0KCdzZWxlY3Rpb25CZWZvcmUnLCBzZWxlY3Rpb24pLCBzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSA/ICdkZWxldGUtY2hhcmFjdGVyJyA6ICdyZW1vdmUtcmFuZ2UnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlDb21tYW5kUGxhaW5EZWxldGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBrZXlDb21tYW5kUGxhaW5CYWNrc3BhY2VcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xudmFyIFVuaWNvZGVVdGlscyA9IHJlcXVpcmUoJ2ZianMvbGliL1VuaWNvZGVVdGlscycpO1xuXG52YXIgbW92ZVNlbGVjdGlvbkJhY2t3YXJkID0gcmVxdWlyZSgnLi9tb3ZlU2VsZWN0aW9uQmFja3dhcmQnKTtcbnZhciByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5ID0gcmVxdWlyZSgnLi9yZW1vdmVUZXh0V2l0aFN0cmF0ZWd5Jyk7XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBzZWxlY3RlZCByYW5nZS4gSWYgdGhlIGN1cnNvciBpcyBjb2xsYXBzZWQsIHJlbW92ZSB0aGUgcHJlY2VkaW5nXG4gKiBjaGFyYWN0ZXIuIFRoaXMgb3BlcmF0aW9uIGlzIFVuaWNvZGUtYXdhcmUsIHNvIHJlbW92aW5nIGEgc2luZ2xlIGNoYXJhY3RlclxuICogd2lsbCByZW1vdmUgYSBzdXJyb2dhdGUgcGFpciBwcm9wZXJseSBhcyB3ZWxsLlxuICovXG5mdW5jdGlvbiBrZXlDb21tYW5kUGxhaW5CYWNrc3BhY2UoZWRpdG9yU3RhdGUpIHtcbiAgdmFyIGFmdGVyUmVtb3ZhbCA9IHJlbW92ZVRleHRXaXRoU3RyYXRlZ3koZWRpdG9yU3RhdGUsIGZ1bmN0aW9uIChzdHJhdGVneVN0YXRlKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IHN0cmF0ZWd5U3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gICAgdmFyIGNvbnRlbnQgPSBzdHJhdGVneVN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIGtleSA9IHNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKTtcbiAgICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uLmdldEFuY2hvck9mZnNldCgpO1xuICAgIHZhciBjaGFyQmVoaW5kID0gY29udGVudC5nZXRCbG9ja0ZvcktleShrZXkpLmdldFRleHQoKVtvZmZzZXQgLSAxXTtcbiAgICByZXR1cm4gbW92ZVNlbGVjdGlvbkJhY2t3YXJkKHN0cmF0ZWd5U3RhdGUsIGNoYXJCZWhpbmQgPyBVbmljb2RlVXRpbHMuZ2V0VVRGMTZMZW5ndGgoY2hhckJlaGluZCwgMCkgOiAxKTtcbiAgfSwgJ2JhY2t3YXJkJyk7XG5cbiAgaWYgKGFmdGVyUmVtb3ZhbCA9PT0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSkge1xuICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIGFmdGVyUmVtb3ZhbC5zZXQoJ3NlbGVjdGlvbkJlZm9yZScsIHNlbGVjdGlvbiksIHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpID8gJ2JhY2tzcGFjZS1jaGFyYWN0ZXInIDogJ3JlbW92ZS1yYW5nZScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmRQbGFpbkJhY2tzcGFjZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGtleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9TdGFydE9mQmxvY2tcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xuXG4vKipcbiAqIENvbGxhcHNlIHNlbGVjdGlvbiBhdCB0aGUgc3RhcnQgb2YgdGhlIGZpcnN0IHNlbGVjdGVkIGJsb2NrLiBUaGlzIGlzIHVzZWRcbiAqIGZvciBGaXJlZm94IHZlcnNpb25zIHRoYXQgYXR0ZW1wdCB0byBuYXZpZ2F0ZSBmb3J3YXJkL2JhY2t3YXJkIGluc3RlYWQgb2ZcbiAqIG1vdmluZyB0aGUgY3Vyc29yLiBPdGhlciBicm93c2VycyBhcmUgYWJsZSB0byBtb3ZlIHRoZSBjdXJzb3IgbmF0aXZlbHkuXG4gKi9cbmZ1bmN0aW9uIGtleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9TdGFydE9mQmxvY2soZWRpdG9yU3RhdGUpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICB2YXIgc3RhcnRLZXkgPSBzZWxlY3Rpb24uZ2V0U3RhcnRLZXkoKTtcbiAgcmV0dXJuIEVkaXRvclN0YXRlLnNldChlZGl0b3JTdGF0ZSwge1xuICAgIHNlbGVjdGlvbjogc2VsZWN0aW9uLm1lcmdlKHtcbiAgICAgIGFuY2hvcktleTogc3RhcnRLZXksXG4gICAgICBhbmNob3JPZmZzZXQ6IDAsXG4gICAgICBmb2N1c0tleTogc3RhcnRLZXksXG4gICAgICBmb2N1c09mZnNldDogMCxcbiAgICAgIGlzQmFja3dhcmQ6IGZhbHNlXG4gICAgfSksXG4gICAgZm9yY2VTZWxlY3Rpb246IHRydWVcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub1N0YXJ0T2ZCbG9jazsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGtleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9FbmRPZkJsb2NrXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcblxuLyoqXG4gKiBTZWUgY29tbWVudCBmb3IgYG1vdmVTZWxlY3Rpb25Ub1N0YXJ0T2ZCbG9ja2AuXG4gKi9cbmZ1bmN0aW9uIGtleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9FbmRPZkJsb2NrKGVkaXRvclN0YXRlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGVuZEtleSA9IHNlbGVjdGlvbi5nZXRFbmRLZXkoKTtcbiAgdmFyIGNvbnRlbnQgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICB2YXIgdGV4dExlbmd0aCA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoZW5kS2V5KS5nZXRMZW5ndGgoKTtcbiAgcmV0dXJuIEVkaXRvclN0YXRlLnNldChlZGl0b3JTdGF0ZSwge1xuICAgIHNlbGVjdGlvbjogc2VsZWN0aW9uLm1lcmdlKHtcbiAgICAgIGFuY2hvcktleTogZW5kS2V5LFxuICAgICAgYW5jaG9yT2Zmc2V0OiB0ZXh0TGVuZ3RoLFxuICAgICAgZm9jdXNLZXk6IGVuZEtleSxcbiAgICAgIGZvY3VzT2Zmc2V0OiB0ZXh0TGVuZ3RoLFxuICAgICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgICB9KSxcbiAgICBmb3JjZVNlbGVjdGlvbjogdHJ1ZVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlDb21tYW5kTW92ZVNlbGVjdGlvblRvRW5kT2ZCbG9jazsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGtleUNvbW1hbmRJbnNlcnROZXdsaW5lXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZSgnLi9EcmFmdE1vZGlmaWVyJyk7XG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG5cbmZ1bmN0aW9uIGtleUNvbW1hbmRJbnNlcnROZXdsaW5lKGVkaXRvclN0YXRlKSB7XG4gIHZhciBjb250ZW50U3RhdGUgPSBEcmFmdE1vZGlmaWVyLnNwbGl0QmxvY2soZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkpO1xuICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgY29udGVudFN0YXRlLCAnc3BsaXQtYmxvY2snKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlDb21tYW5kSW5zZXJ0TmV3bGluZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGtleUNvbW1hbmREZWxldGVXb3JkXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdFJlbW92YWJsZVdvcmQgPSByZXF1aXJlKCcuL0RyYWZ0UmVtb3ZhYmxlV29yZCcpO1xudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xuXG52YXIgbW92ZVNlbGVjdGlvbkZvcndhcmQgPSByZXF1aXJlKCcuL21vdmVTZWxlY3Rpb25Gb3J3YXJkJyk7XG52YXIgcmVtb3ZlVGV4dFdpdGhTdHJhdGVneSA9IHJlcXVpcmUoJy4vcmVtb3ZlVGV4dFdpdGhTdHJhdGVneScpO1xuXG4vKipcbiAqIERlbGV0ZSB0aGUgd29yZCB0aGF0IGlzIHJpZ2h0IG9mIHRoZSBjdXJzb3IsIGFzIHdlbGwgYXMgYW55IHNwYWNlcyBvclxuICogcHVuY3R1YXRpb24gYmVmb3JlIHRoZSB3b3JkLlxuICovXG5mdW5jdGlvbiBrZXlDb21tYW5kRGVsZXRlV29yZChlZGl0b3JTdGF0ZSkge1xuICB2YXIgYWZ0ZXJSZW1vdmFsID0gcmVtb3ZlVGV4dFdpdGhTdHJhdGVneShlZGl0b3JTdGF0ZSwgZnVuY3Rpb24gKHN0cmF0ZWd5U3RhdGUpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gc3RyYXRlZ3lTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCk7XG4gICAgdmFyIGtleSA9IHNlbGVjdGlvbi5nZXRTdGFydEtleSgpO1xuICAgIHZhciBjb250ZW50ID0gc3RyYXRlZ3lTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciB0ZXh0ID0gY29udGVudC5nZXRCbG9ja0ZvcktleShrZXkpLmdldFRleHQoKS5zbGljZShvZmZzZXQpO1xuICAgIHZhciB0b1JlbW92ZSA9IERyYWZ0UmVtb3ZhYmxlV29yZC5nZXRGb3J3YXJkKHRleHQpO1xuXG4gICAgLy8gSWYgdGhlcmUgYXJlIG5vIHdvcmRzIGluIGZyb250IG9mIHRoZSBjdXJzb3IsIHJlbW92ZSB0aGUgbmV3bGluZS5cbiAgICByZXR1cm4gbW92ZVNlbGVjdGlvbkZvcndhcmQoc3RyYXRlZ3lTdGF0ZSwgdG9SZW1vdmUubGVuZ3RoIHx8IDEpO1xuICB9LCAnZm9yd2FyZCcpO1xuXG4gIGlmIChhZnRlclJlbW92YWwgPT09IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkpIHtcbiAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gIH1cblxuICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgYWZ0ZXJSZW1vdmFsLCAncmVtb3ZlLXJhbmdlJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Q29tbWFuZERlbGV0ZVdvcmQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogQHN0dWJcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gXFx1MDBhMS1cXHUwMGIxXFx1MDBiNC1cXHUwMGI4XFx1MDBiYVxcdTAwYmJcXHUwMGJmXG4vLyAgICAgICAgICAgICBpcyBsYXRpbiBzdXBwbGVtZW50IHB1bmN0dWF0aW9uIGV4Y2VwdCBmcmFjdGlvbnMgYW5kIHN1cGVyc2NyaXB0XG4vLyAgICAgICAgICAgICBudW1iZXJzXG4vLyBcXHUyMDEwLVxcdTIwMjdcXHUyMDMwLVxcdTIwNWVcbi8vICAgICAgICAgICAgIGlzIHB1bmN0dWF0aW9uIGZyb20gdGhlIGdlbmVyYWwgcHVuY3R1YXRpb24gYmxvY2s6XG4vLyAgICAgICAgICAgICB3ZWlyZCBxdW90ZXMsIGNvbW1hcywgYnVsbGV0cywgZGFzaGVzLCBldGMuXG4vLyBcXHUzMGZiXFx1MzAwMVxcdTMwMDJcXHUzMDA4LVxcdTMwMTFcXHUzMDE0LVxcdTMwMWZcbi8vICAgICAgICAgICAgIGlzIENKSyBwdW5jdHVhdGlvblxuLy8gXFx1ZmYxYS1cXHVmZjFmXFx1ZmYwMS1cXHVmZjBmXFx1ZmYzYi1cXHVmZjQwXFx1ZmY1Yi1cXHVmZjY1XG4vLyAgICAgICAgICAgICBpcyBzb21lIGZ1bGwtd2lkdGgvaGFsZi13aWR0aCBwdW5jdHVhdGlvblxuLy8gXFx1MkUyRVxcdTA2MWZcXHUwNjZhLVxcdTA2NmNcXHUwNjFiXFx1MDYwY1xcdTA2MGRcXHVGRDNlXFx1RkQzRlxuLy8gICAgICAgICAgICAgaXMgc29tZSBBcmFiaWMgcHVuY3R1YXRpb24gbWFya3Ncbi8vIFxcdTE4MDFcXHUwOTY0XFx1MTA0YVxcdTEwNGJcbi8vICAgICAgICAgICAgIGlzIG1pc2MuIG90aGVyIGxhbmd1YWdlIHB1bmN0dWF0aW9uIG1hcmtzXG5cbnZhciBQVU5DVFVBVElPTiA9ICdbLiwrKj8kfCN7fSgpXFwnXFxcXF5cXFxcLVxcXFxbXFxcXF1cXFxcXFxcXFxcXFwvIUAlXCJ+PTw+Xzo7JyArICdcXHUzMEZCXFx1MzAwMVxcdTMwMDJcXHUzMDA4LVxcdTMwMTFcXHUzMDE0LVxcdTMwMUZcXHVGRjFBLVxcdUZGMUZcXHVGRjAxLVxcdUZGMEYnICsgJ1xcdUZGM0ItXFx1RkY0MFxcdUZGNUItXFx1RkY2NVxcdTJFMkVcXHUwNjFGXFx1MDY2QS1cXHUwNjZDXFx1MDYxQlxcdTA2MENcXHUwNjBEJyArICdcXHVGRDNFXFx1RkQzRlxcdTE4MDFcXHUwOTY0XFx1MTA0QVxcdTEwNEJcXHUyMDEwLVxcdTIwMjdcXHUyMDMwLVxcdTIwNUUnICsgJ1xceEExLVxceEIxXFx4QjQtXFx4QjhcXHhCQVxceEJCXFx4QkZdJztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldFB1bmN0dWF0aW9uOiBmdW5jdGlvbiBnZXRQdW5jdHVhdGlvbigpIHtcbiAgICByZXR1cm4gUFVOQ1RVQVRJT047XG4gIH1cbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBrZXlDb21tYW5kQmFja3NwYWNlV29yZFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRSZW1vdmFibGVXb3JkID0gcmVxdWlyZSgnLi9EcmFmdFJlbW92YWJsZVdvcmQnKTtcbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcblxudmFyIG1vdmVTZWxlY3Rpb25CYWNrd2FyZCA9IHJlcXVpcmUoJy4vbW92ZVNlbGVjdGlvbkJhY2t3YXJkJyk7XG52YXIgcmVtb3ZlVGV4dFdpdGhTdHJhdGVneSA9IHJlcXVpcmUoJy4vcmVtb3ZlVGV4dFdpdGhTdHJhdGVneScpO1xuXG4vKipcbiAqIERlbGV0ZSB0aGUgd29yZCB0aGF0IGlzIGxlZnQgb2YgdGhlIGN1cnNvciwgYXMgd2VsbCBhcyBhbnkgc3BhY2VzIG9yXG4gKiBwdW5jdHVhdGlvbiBhZnRlciB0aGUgd29yZC5cbiAqL1xuZnVuY3Rpb24ga2V5Q29tbWFuZEJhY2tzcGFjZVdvcmQoZWRpdG9yU3RhdGUpIHtcbiAgdmFyIGFmdGVyUmVtb3ZhbCA9IHJlbW92ZVRleHRXaXRoU3RyYXRlZ3koZWRpdG9yU3RhdGUsIGZ1bmN0aW9uIChzdHJhdGVneVN0YXRlKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IHN0cmF0ZWd5U3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gICAgdmFyIG9mZnNldCA9IHNlbGVjdGlvbi5nZXRTdGFydE9mZnNldCgpO1xuICAgIC8vIElmIHRoZXJlIGFyZSBubyB3b3JkcyBiZWZvcmUgdGhlIGN1cnNvciwgcmVtb3ZlIHRoZSBwcmVjZWRpbmcgbmV3bGluZS5cbiAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gbW92ZVNlbGVjdGlvbkJhY2t3YXJkKHN0cmF0ZWd5U3RhdGUsIDEpO1xuICAgIH1cbiAgICB2YXIga2V5ID0gc2VsZWN0aW9uLmdldFN0YXJ0S2V5KCk7XG4gICAgdmFyIGNvbnRlbnQgPSBzdHJhdGVneVN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIHRleHQgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGtleSkuZ2V0VGV4dCgpLnNsaWNlKDAsIG9mZnNldCk7XG4gICAgdmFyIHRvUmVtb3ZlID0gRHJhZnRSZW1vdmFibGVXb3JkLmdldEJhY2t3YXJkKHRleHQpO1xuICAgIHJldHVybiBtb3ZlU2VsZWN0aW9uQmFja3dhcmQoc3RyYXRlZ3lTdGF0ZSwgdG9SZW1vdmUubGVuZ3RoIHx8IDEpO1xuICB9LCAnYmFja3dhcmQnKTtcblxuICBpZiAoYWZ0ZXJSZW1vdmFsID09PSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpKSB7XG4gICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICB9XG5cbiAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIGFmdGVyUmVtb3ZhbCwgJ3JlbW92ZS1yYW5nZScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmRCYWNrc3BhY2VXb3JkOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBleHBhbmRSYW5nZVRvU3RhcnRPZkxpbmVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbnZhciBVbmljb2RlVXRpbHMgPSByZXF1aXJlKCdmYmpzL2xpYi9Vbmljb2RlVXRpbHMnKTtcblxudmFyIGdldFJhbmdlQ2xpZW50UmVjdHMgPSByZXF1aXJlKCcuL2dldFJhbmdlQ2xpZW50UmVjdHMnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGNvbXB1dGVkIGxpbmUgaGVpZ2h0LCBpbiBwaXhlbHMsIGZvciB0aGUgcHJvdmlkZWQgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0TGluZUhlaWdodFB4KGVsZW1lbnQpIHtcbiAgdmFyIGNvbXB1dGVkID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuc3R5bGUuZm9udEZhbWlseSA9IGNvbXB1dGVkLmZvbnRGYW1pbHk7XG4gIGRpdi5zdHlsZS5mb250U2l6ZSA9IGNvbXB1dGVkLmZvbnRTaXplO1xuICBkaXYuc3R5bGUuZm9udFN0eWxlID0gY29tcHV0ZWQuZm9udFN0eWxlO1xuICBkaXYuc3R5bGUuZm9udFdlaWdodCA9IGNvbXB1dGVkLmZvbnRXZWlnaHQ7XG4gIGRpdi5zdHlsZS5saW5lSGVpZ2h0ID0gY29tcHV0ZWQubGluZUhlaWdodDtcbiAgZGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgZGl2LnRleHRDb250ZW50ID0gJ00nO1xuXG4gIHZhciBkb2N1bWVudEJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAhZG9jdW1lbnRCb2R5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01pc3NpbmcgZG9jdW1lbnQuYm9keScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAvLyBmb3JjZWQgbGF5b3V0IGhlcmVcbiAgZG9jdW1lbnRCb2R5LmFwcGVuZENoaWxkKGRpdik7XG4gIHZhciByZWN0ID0gZGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBkb2N1bWVudEJvZHkucmVtb3ZlQ2hpbGQoZGl2KTtcblxuICByZXR1cm4gcmVjdC5oZWlnaHQ7XG59XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgZXZlcnkgQ2xpZW50UmVjdCBpbiB0aGUgcHJvdmlkZWQgbGlzdCBsaWVzIG9uIHRoZSBzYW1lIGxpbmUuXG4gKlxuICogV2UgYXNzdW1lIHRoYXQgdGhlIHJlY3RzIG9uIHRoZSBzYW1lIGxpbmUgYWxsIGNvbnRhaW4gdGhlIGJhc2VsaW5lLCBzbyB0aGVcbiAqIGxvd2VzdCB0b3AgbGluZSBuZWVkcyB0byBiZSBhYm92ZSB0aGUgaGlnaGVzdCBib3R0b20gbGluZSAoaS5lLiwgaWYgeW91IHdlcmVcbiAqIHRvIHByb2plY3QgdGhlIHJlY3RzIG9udG8gdGhlIHktYXhpcywgdGhlaXIgaW50ZXJzZWN0aW9uIHdvdWxkIGJlIG5vbmVtcHR5KS5cbiAqXG4gKiBJbiBhZGRpdGlvbiwgd2UgcmVxdWlyZSB0aGF0IG5vIHR3byBib3hlcyBhcmUgbGluZUhlaWdodCAob3IgbW9yZSkgYXBhcnQgYXRcbiAqIGVpdGhlciB0b3Agb3IgYm90dG9tLCB3aGljaCBoZWxwcyBwcm90ZWN0IGFnYWluc3QgZmFsc2UgcG9zaXRpdmVzIGZvciBmb250c1xuICogd2l0aCBleHRyZW1lbHkgbGFyZ2UgZ2x5cGggaGVpZ2h0cyAoZS5nLiwgd2l0aCBhIGZvbnQgc2l6ZSBvZiAxN3B4LCBaYXBmaW5vXG4gKiBwcm9kdWNlcyByZWN0cyBvZiBoZWlnaHQgNThweCEpLlxuICovXG5mdW5jdGlvbiBhcmVSZWN0c09uT25lTGluZShyZWN0cywgbGluZUhlaWdodCkge1xuICB2YXIgbWluVG9wID0gSW5maW5pdHk7XG4gIHZhciBtaW5Cb3R0b20gPSBJbmZpbml0eTtcbiAgdmFyIG1heFRvcCA9IC1JbmZpbml0eTtcbiAgdmFyIG1heEJvdHRvbSA9IC1JbmZpbml0eTtcblxuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgcmVjdHMubGVuZ3RoOyBpaSsrKSB7XG4gICAgdmFyIHJlY3QgPSByZWN0c1tpaV07XG4gICAgaWYgKHJlY3Qud2lkdGggPT09IDAgfHwgcmVjdC53aWR0aCA9PT0gMSkge1xuICAgICAgLy8gV2hlbiBhIHJhbmdlIHN0YXJ0cyBvciBlbmRzIGEgc29mdCB3cmFwLCBtYW55IGJyb3dzZXJzIChDaHJvbWUsIElFLFxuICAgICAgLy8gU2FmYXJpKSBpbmNsdWRlIGFuIGVtcHR5IHJlY3Qgb24gdGhlIHByZXZpb3VzIG9yIG5leHQgbGluZS4gV2hlbiB0aGVcbiAgICAgIC8vIHRleHQgbGllcyBpbiBhIGNvbnRhaW5lciB3aG9zZSBwb3NpdGlvbiBpcyBub3QgaW50ZWdyYWwgKGUuZy4sIGZyb21cbiAgICAgIC8vIG1hcmdpbjogYXV0byksIFNhZmFyaSBtYWtlcyB0aGVzZSBlbXB0eSByZWN0cyBoYXZlIHdpZHRoIDEgKGluc3RlYWQgb2ZcbiAgICAgIC8vIDApLiBIYXZpbmcgb25lLXBpeGVsLXdpZGUgY2hhcmFjdGVycyBzZWVtcyB1bmxpa2VseSAoYW5kIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHJlcG9ydCB3aWR0aHMgaW4gc3VicGl4ZWwgcHJlY2lzaW9uIGFueXdheSkgc28gaXQncyByZWxhdGl2ZWx5IHNhZmUgdG9cbiAgICAgIC8vIHNraXAgb3ZlciB0aGVtLlxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIG1pblRvcCA9IE1hdGgubWluKG1pblRvcCwgcmVjdC50b3ApO1xuICAgIG1pbkJvdHRvbSA9IE1hdGgubWluKG1pbkJvdHRvbSwgcmVjdC5ib3R0b20pO1xuICAgIG1heFRvcCA9IE1hdGgubWF4KG1heFRvcCwgcmVjdC50b3ApO1xuICAgIG1heEJvdHRvbSA9IE1hdGgubWF4KG1heEJvdHRvbSwgcmVjdC5ib3R0b20pO1xuICB9XG5cbiAgcmV0dXJuIG1heFRvcCA8PSBtaW5Cb3R0b20gJiYgbWF4VG9wIC0gbWluVG9wIDwgbGluZUhlaWdodCAmJiBtYXhCb3R0b20gLSBtaW5Cb3R0b20gPCBsaW5lSGVpZ2h0O1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgbGVuZ3RoIG9mIGEgbm9kZSwgYXMgdXNlZCBieSBSYW5nZSBvZmZzZXRzLlxuICovXG5mdW5jdGlvbiBnZXROb2RlTGVuZ3RoKG5vZGUpIHtcbiAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvZG9tLyNjb25jZXB0LW5vZGUtbGVuZ3RoXG4gIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgIGNhc2UgTm9kZS5ET0NVTUVOVF9UWVBFX05PREU6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlIE5vZGUuVEVYVF9OT0RFOlxuICAgIGNhc2UgTm9kZS5QUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREU6XG4gICAgY2FzZSBOb2RlLkNPTU1FTlRfTk9ERTpcbiAgICAgIHJldHVybiBub2RlLmxlbmd0aDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7XG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhIGNvbGxhcHNlZCByYW5nZSwgbW92ZSB0aGUgc3RhcnQgcG9zaXRpb24gYmFja3dhcmRzIGFzIGZhciBhc1xuICogcG9zc2libGUgd2hpbGUgdGhlIHJhbmdlIHN0aWxsIHNwYW5zIG9ubHkgYSBzaW5nbGUgbGluZS5cbiAqL1xuZnVuY3Rpb24gZXhwYW5kUmFuZ2VUb1N0YXJ0T2ZMaW5lKHJhbmdlKSB7XG4gICFyYW5nZS5jb2xsYXBzZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZXhwYW5kUmFuZ2VUb1N0YXJ0T2ZMaW5lOiBQcm92aWRlZCByYW5nZSBpcyBub3QgY29sbGFwc2VkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmFuZ2UgPSByYW5nZS5jbG9uZVJhbmdlKCk7XG5cbiAgdmFyIGNvbnRhaW5pbmdFbGVtZW50ID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XG4gIGlmIChjb250YWluaW5nRWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIGNvbnRhaW5pbmdFbGVtZW50ID0gY29udGFpbmluZ0VsZW1lbnQucGFyZW50Tm9kZTtcbiAgfVxuICB2YXIgbGluZUhlaWdodCA9IGdldExpbmVIZWlnaHRQeChjb250YWluaW5nRWxlbWVudCk7XG5cbiAgLy8gSW1hZ2luZSBvdXIgdGV4dCBsb29rcyBsaWtlOlxuICAvLyAgIDxkaXY+PHNwYW4+b25jZSB1cG9uIGEgdGltZSwgdGhlcmUgd2FzIGEgPGVtPmJveVxuICAvLyAgIHdobyBsaXZlZDwvZW0+IDwvc3Bhbj48cT48c3Ryb25nPnVuZGVyXiB0aGVcbiAgLy8gICBzdGFpcnM8L3N0cm9uZz4gaW4gYSBzbWFsbCBjbG9zZXQuPC9xPjwvZGl2PlxuICAvLyB3aGVyZSB0aGUgY2FyZXQgcmVwcmVzZW50cyB0aGUgY3Vyc29yLiBGaXJzdCwgd2UgY3Jhd2wgdXAgdGhlIHRyZWUgdW50aWxcbiAgLy8gdGhlIHJhbmdlIHNwYW5zIG11bHRpcGxlIGxpbmVzIChzZXR0aW5nIHRoZSBzdGFydCBwb2ludCB0byBiZWZvcmVcbiAgLy8gXCI8c3Ryb25nPlwiLCB0aGVuIGJlZm9yZSBcIjxkaXY+XCIpLCB0aGVuIGF0IGVhY2ggbGV2ZWwgd2UgZG8gYSBzZWFyY2ggdG9cbiAgLy8gZmluZCB0aGUgbGF0ZXN0IHBvaW50IHdoaWNoIGlzIHN0aWxsIG9uIGEgcHJldmlvdXMgbGluZS4gV2UnbGwgZmluZCB0aGF0XG4gIC8vIHRoZSBicmVhayBwb2ludCBpcyBpbnNpZGUgdGhlIHNwYW4sIHRoZW4gaW5zaWRlIHRoZSA8ZW0+LCB0aGVuIGluIGl0cyB0ZXh0XG4gIC8vIG5vZGUgY2hpbGQsIHRoZSBhY3R1YWwgYnJlYWsgcG9pbnQgYmVmb3JlIFwid2hvXCIuXG5cbiAgdmFyIGJlc3RDb250YWluZXIgPSByYW5nZS5lbmRDb250YWluZXI7XG4gIHZhciBiZXN0T2Zmc2V0ID0gcmFuZ2UuZW5kT2Zmc2V0O1xuICByYW5nZS5zZXRTdGFydChyYW5nZS5zdGFydENvbnRhaW5lciwgMCk7XG5cbiAgd2hpbGUgKGFyZVJlY3RzT25PbmVMaW5lKGdldFJhbmdlQ2xpZW50UmVjdHMocmFuZ2UpLCBsaW5lSGVpZ2h0KSkge1xuICAgIGJlc3RDb250YWluZXIgPSByYW5nZS5zdGFydENvbnRhaW5lcjtcbiAgICBiZXN0T2Zmc2V0ID0gcmFuZ2Uuc3RhcnRPZmZzZXQ7XG4gICAgIWJlc3RDb250YWluZXIucGFyZW50Tm9kZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdGb3VuZCB1bmV4cGVjdGVkIGRldGFjaGVkIHN1YnRyZWUgd2hlbiB0cmF2ZXJzaW5nLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByYW5nZS5zZXRTdGFydEJlZm9yZShiZXN0Q29udGFpbmVyKTtcbiAgICBpZiAoYmVzdENvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSAmJiBnZXRDb21wdXRlZFN0eWxlKGJlc3RDb250YWluZXIpLmRpc3BsYXkgIT09ICdpbmxpbmUnKSB7XG4gICAgICAvLyBUaGUgc3RhcnQgb2YgdGhlIGxpbmUgaXMgbmV2ZXIgaW4gYSBkaWZmZXJlbnQgYmxvY2stbGV2ZWwgY29udGFpbmVyLlxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLy8gSW4gdGhlIGFib3ZlIGV4YW1wbGUsIHJhbmdlIG5vdyBzcGFucyBmcm9tIFwiPGRpdj5cIiB0byBcInVuZGVyXCIsXG4gIC8vIGJlc3RDb250YWluZXIgaXMgPGRpdj4sIGFuZCBiZXN0T2Zmc2V0IGlzIDEgKGluZGV4IG9mIDxxPiBpbnNpZGUgPGRpdj4pXS5cbiAgLy8gUGlja2luZyBvdXQgd2hpY2ggY2hpbGQgdG8gcmVjdXJzZSBpbnRvIGhlcmUgaXMgYSBzcGVjaWFsIGNhc2Ugc2luY2Ugd2VcbiAgLy8gZG9uJ3Qgd2FudCB0byBjaGVjayBwYXN0IDxxPiAtLSBvbmNlIHdlIGZpbmQgdGhhdCB0aGUgZmluYWwgcmFuZ2Ugc3RhcnRzXG4gIC8vIGluIDxzcGFuPiwgd2UgY2FuIGxvb2sgYXQgYWxsIG9mIGl0cyBjaGlsZHJlbiAoYW5kIGFsbCBvZiB0aGVpciBjaGlsZHJlbilcbiAgLy8gdG8gZmluZCB0aGUgYnJlYWsgcG9pbnQuXG5cbiAgLy8gQXQgYWxsIHRpbWVzLCAoYmVzdENvbnRhaW5lciwgYmVzdE9mZnNldCkgaXMgdGhlIGxhdGVzdCBzaW5nbGUtbGluZSBzdGFydFxuICAvLyBwb2ludCB0aGF0IHdlIGtub3cgb2YuXG4gIHZhciBjdXJyZW50Q29udGFpbmVyID0gYmVzdENvbnRhaW5lcjtcbiAgdmFyIG1heEluZGV4VG9Db25zaWRlciA9IGJlc3RPZmZzZXQgLSAxO1xuXG4gIGRvIHtcbiAgICB2YXIgbm9kZVZhbHVlID0gY3VycmVudENvbnRhaW5lci5ub2RlVmFsdWU7XG5cbiAgICBmb3IgKHZhciBpaSA9IG1heEluZGV4VG9Db25zaWRlcjsgaWkgPj0gMDsgaWktLSkge1xuICAgICAgaWYgKG5vZGVWYWx1ZSAhPSBudWxsICYmIGlpID4gMCAmJiBVbmljb2RlVXRpbHMuaXNTdXJyb2dhdGVQYWlyKG5vZGVWYWx1ZSwgaWkgLSAxKSkge1xuICAgICAgICAvLyBXZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc3Vycm9nYXRlIHBhaXIgLS0gc2tpcCBvdmVyIHNvIHdlIG5ldmVyXG4gICAgICAgIC8vIHJldHVybiBhIHJhbmdlIHdpdGggYW4gZW5kcG9pbnQgaW4gdGhlIG1pZGRsZSBvZiBhIGNvZGUgcG9pbnQuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICByYW5nZS5zZXRTdGFydChjdXJyZW50Q29udGFpbmVyLCBpaSk7XG4gICAgICBpZiAoYXJlUmVjdHNPbk9uZUxpbmUoZ2V0UmFuZ2VDbGllbnRSZWN0cyhyYW5nZSksIGxpbmVIZWlnaHQpKSB7XG4gICAgICAgIGJlc3RDb250YWluZXIgPSBjdXJyZW50Q29udGFpbmVyO1xuICAgICAgICBiZXN0T2Zmc2V0ID0gaWk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaWkgPT09IC0xIHx8IGN1cnJlbnRDb250YWluZXIuY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIElmIGlpID09PSAtMSwgdGhlbiAoYmVzdENvbnRhaW5lciwgYmVzdE9mZnNldCksIHdoaWNoIGlzIGVxdWFsIHRvXG4gICAgICAvLyAoY3VycmVudENvbnRhaW5lciwgMCksIHdhcyBhIHNpbmdsZS1saW5lIHN0YXJ0IHBvaW50IGJ1dCBhIHN0YXJ0XG4gICAgICAvLyBwb2ludCBiZWZvcmUgY3VycmVudENvbnRhaW5lciB3YXNuJ3QsIHNvIHRoZSBsaW5lIGJyZWFrIHNlZW1zIHRvXG4gICAgICAvLyBoYXZlIG9jY3VycmVkIGltbWVkaWF0ZWx5IGFmdGVyIGN1cnJlbnRDb250YWluZXIncyBzdGFydCB0YWdcbiAgICAgIC8vXG4gICAgICAvLyBJZiBjdXJyZW50Q29udGFpbmVyLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwLCB3ZSdyZSBhbHJlYWR5IGF0IGFcbiAgICAgIC8vIHRlcm1pbmFsIG5vZGUgKGUuZy4sIHRleHQgbm9kZSkgYW5kIHNob3VsZCByZXR1cm4gb3VyIGN1cnJlbnQgYmVzdC5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGN1cnJlbnRDb250YWluZXIgPSBjdXJyZW50Q29udGFpbmVyLmNoaWxkTm9kZXNbaWldO1xuICAgIG1heEluZGV4VG9Db25zaWRlciA9IGdldE5vZGVMZW5ndGgoY3VycmVudENvbnRhaW5lcik7XG4gIH0gd2hpbGUgKHRydWUpO1xuXG4gIHJhbmdlLnNldFN0YXJ0KGJlc3RDb250YWluZXIsIGJlc3RPZmZzZXQpO1xuICByZXR1cm4gcmFuZ2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwYW5kUmFuZ2VUb1N0YXJ0T2ZMaW5lOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUga2V5Q29tbWFuZEJhY2tzcGFjZVRvU3RhcnRPZkxpbmVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xuXG52YXIgZXhwYW5kUmFuZ2VUb1N0YXJ0T2ZMaW5lID0gcmVxdWlyZSgnLi9leHBhbmRSYW5nZVRvU3RhcnRPZkxpbmUnKTtcbnZhciBnZXREcmFmdEVkaXRvclNlbGVjdGlvbldpdGhOb2RlcyA9IHJlcXVpcmUoJy4vZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25XaXRoTm9kZXMnKTtcbnZhciBtb3ZlU2VsZWN0aW9uQmFja3dhcmQgPSByZXF1aXJlKCcuL21vdmVTZWxlY3Rpb25CYWNrd2FyZCcpO1xudmFyIHJlbW92ZVRleHRXaXRoU3RyYXRlZ3kgPSByZXF1aXJlKCcuL3JlbW92ZVRleHRXaXRoU3RyYXRlZ3knKTtcblxuZnVuY3Rpb24ga2V5Q29tbWFuZEJhY2tzcGFjZVRvU3RhcnRPZkxpbmUoZWRpdG9yU3RhdGUpIHtcbiAgdmFyIGFmdGVyUmVtb3ZhbCA9IHJlbW92ZVRleHRXaXRoU3RyYXRlZ3koZWRpdG9yU3RhdGUsIGZ1bmN0aW9uIChzdHJhdGVneVN0YXRlKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IHN0cmF0ZWd5U3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gICAgaWYgKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpICYmIHNlbGVjdGlvbi5nZXRBbmNob3JPZmZzZXQoKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIG1vdmVTZWxlY3Rpb25CYWNrd2FyZChzdHJhdGVneVN0YXRlLCAxKTtcbiAgICB9XG5cbiAgICB2YXIgZG9tU2VsZWN0aW9uID0gZ2xvYmFsLmdldFNlbGVjdGlvbigpO1xuICAgIHZhciByYW5nZSA9IGRvbVNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuICAgIHJhbmdlID0gZXhwYW5kUmFuZ2VUb1N0YXJ0T2ZMaW5lKHJhbmdlKTtcblxuICAgIHJldHVybiBnZXREcmFmdEVkaXRvclNlbGVjdGlvbldpdGhOb2RlcyhzdHJhdGVneVN0YXRlLCBudWxsLCByYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCwgcmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KS5zZWxlY3Rpb25TdGF0ZTtcbiAgfSwgJ2JhY2t3YXJkJyk7XG5cbiAgaWYgKGFmdGVyUmVtb3ZhbCA9PT0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSkge1xuICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgfVxuXG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBhZnRlclJlbW92YWwsICdyZW1vdmUtcmFuZ2UnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlDb21tYW5kQmFja3NwYWNlVG9TdGFydE9mTGluZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFNlY29uZGFyeUNsaXBib2FyZFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRNb2RpZmllciA9IHJlcXVpcmUoJy4vRHJhZnRNb2RpZmllcicpO1xudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xuXG52YXIgZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQgPSByZXF1aXJlKCcuL2dldENvbnRlbnRTdGF0ZUZyYWdtZW50Jyk7XG52YXIgbnVsbHRocm93cyA9IHJlcXVpcmUoJ2ZianMvbGliL251bGx0aHJvd3MnKTtcblxudmFyIGNsaXBib2FyZCA9IG51bGw7XG5cbi8qKlxuICogU29tZSBzeXN0ZW1zIG9mZmVyIGEgXCJzZWNvbmRhcnlcIiBjbGlwYm9hcmQgdG8gYWxsb3cgcXVpY2sgaW50ZXJuYWwgY3V0XG4gKiBhbmQgcGFzdGUgYmVoYXZpb3IuIEZvciBpbnN0YW5jZSwgQ3RybCtLIChjdXQpIGFuZCBDdHJsK1kgKHBhc3RlKS5cbiAqL1xudmFyIFNlY29uZGFyeUNsaXBib2FyZCA9IHtcbiAgY3V0OiBmdW5jdGlvbiBjdXQoZWRpdG9yU3RhdGUpIHtcbiAgICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIHZhciB0YXJnZXRSYW5nZSA9IG51bGw7XG5cbiAgICBpZiAoc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkpIHtcbiAgICAgIHZhciBhbmNob3JLZXkgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yS2V5KCk7XG4gICAgICB2YXIgYmxvY2tFbmQgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGFuY2hvcktleSkuZ2V0TGVuZ3RoKCk7XG5cbiAgICAgIGlmIChibG9ja0VuZCA9PT0gc2VsZWN0aW9uLmdldEFuY2hvck9mZnNldCgpKSB7XG4gICAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0UmFuZ2UgPSBzZWxlY3Rpb24uc2V0KCdmb2N1c09mZnNldCcsIGJsb2NrRW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0UmFuZ2UgPSBzZWxlY3Rpb247XG4gICAgfVxuXG4gICAgdGFyZ2V0UmFuZ2UgPSBudWxsdGhyb3dzKHRhcmdldFJhbmdlKTtcbiAgICBjbGlwYm9hcmQgPSBnZXRDb250ZW50U3RhdGVGcmFnbWVudChjb250ZW50LCB0YXJnZXRSYW5nZSk7XG5cbiAgICB2YXIgYWZ0ZXJSZW1vdmFsID0gRHJhZnRNb2RpZmllci5yZW1vdmVSYW5nZShjb250ZW50LCB0YXJnZXRSYW5nZSwgJ2ZvcndhcmQnKTtcblxuICAgIGlmIChhZnRlclJlbW92YWwgPT09IGNvbnRlbnQpIHtcbiAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgYWZ0ZXJSZW1vdmFsLCAncmVtb3ZlLXJhbmdlJyk7XG4gIH0sXG5cbiAgcGFzdGU6IGZ1bmN0aW9uIHBhc3RlKGVkaXRvclN0YXRlKSB7XG4gICAgaWYgKCFjbGlwYm9hcmQpIHtcbiAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgbmV3Q29udGVudCA9IERyYWZ0TW9kaWZpZXIucmVwbGFjZVdpdGhGcmFnbWVudChlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSwgY2xpcGJvYXJkKTtcblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBuZXdDb250ZW50LCAnaW5zZXJ0LWZyYWdtZW50Jyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2Vjb25kYXJ5Q2xpcGJvYXJkOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZWRpdE9uS2V5RG93blxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRNb2RpZmllciA9IHJlcXVpcmUoJy4vRHJhZnRNb2RpZmllcicpO1xudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xudmFyIEtleUJpbmRpbmdVdGlsID0gcmVxdWlyZSgnLi9LZXlCaW5kaW5nVXRpbCcpO1xudmFyIEtleXMgPSByZXF1aXJlKCdmYmpzL2xpYi9LZXlzJyk7XG52YXIgU2Vjb25kYXJ5Q2xpcGJvYXJkID0gcmVxdWlyZSgnLi9TZWNvbmRhcnlDbGlwYm9hcmQnKTtcbnZhciBVc2VyQWdlbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9Vc2VyQWdlbnQnKTtcblxudmFyIGlzRXZlbnRIYW5kbGVkID0gcmVxdWlyZSgnLi9pc0V2ZW50SGFuZGxlZCcpO1xudmFyIGtleUNvbW1hbmRCYWNrc3BhY2VUb1N0YXJ0T2ZMaW5lID0gcmVxdWlyZSgnLi9rZXlDb21tYW5kQmFja3NwYWNlVG9TdGFydE9mTGluZScpO1xudmFyIGtleUNvbW1hbmRCYWNrc3BhY2VXb3JkID0gcmVxdWlyZSgnLi9rZXlDb21tYW5kQmFja3NwYWNlV29yZCcpO1xudmFyIGtleUNvbW1hbmREZWxldGVXb3JkID0gcmVxdWlyZSgnLi9rZXlDb21tYW5kRGVsZXRlV29yZCcpO1xudmFyIGtleUNvbW1hbmRJbnNlcnROZXdsaW5lID0gcmVxdWlyZSgnLi9rZXlDb21tYW5kSW5zZXJ0TmV3bGluZScpO1xudmFyIGtleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9FbmRPZkJsb2NrID0gcmVxdWlyZSgnLi9rZXlDb21tYW5kTW92ZVNlbGVjdGlvblRvRW5kT2ZCbG9jaycpO1xudmFyIGtleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9TdGFydE9mQmxvY2sgPSByZXF1aXJlKCcuL2tleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9TdGFydE9mQmxvY2snKTtcbnZhciBrZXlDb21tYW5kUGxhaW5CYWNrc3BhY2UgPSByZXF1aXJlKCcuL2tleUNvbW1hbmRQbGFpbkJhY2tzcGFjZScpO1xudmFyIGtleUNvbW1hbmRQbGFpbkRlbGV0ZSA9IHJlcXVpcmUoJy4va2V5Q29tbWFuZFBsYWluRGVsZXRlJyk7XG52YXIga2V5Q29tbWFuZFRyYW5zcG9zZUNoYXJhY3RlcnMgPSByZXF1aXJlKCcuL2tleUNvbW1hbmRUcmFuc3Bvc2VDaGFyYWN0ZXJzJyk7XG52YXIga2V5Q29tbWFuZFVuZG8gPSByZXF1aXJlKCcuL2tleUNvbW1hbmRVbmRvJyk7XG5cbnZhciBpc09wdGlvbktleUNvbW1hbmQgPSBLZXlCaW5kaW5nVXRpbC5pc09wdGlvbktleUNvbW1hbmQ7XG5cbnZhciBpc0Nocm9tZSA9IFVzZXJBZ2VudC5pc0Jyb3dzZXIoJ0Nocm9tZScpO1xuXG4vKipcbiAqIE1hcCBhIGBEcmFmdEVkaXRvckNvbW1hbmRgIGNvbW1hbmQgdmFsdWUgdG8gYSBjb3JyZXNwb25kaW5nIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvbktleUNvbW1hbmQoY29tbWFuZCwgZWRpdG9yU3RhdGUpIHtcbiAgc3dpdGNoIChjb21tYW5kKSB7XG4gICAgY2FzZSAncmVkbyc6XG4gICAgICByZXR1cm4gRWRpdG9yU3RhdGUucmVkbyhlZGl0b3JTdGF0ZSk7XG4gICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgIHJldHVybiBrZXlDb21tYW5kUGxhaW5EZWxldGUoZWRpdG9yU3RhdGUpO1xuICAgIGNhc2UgJ2RlbGV0ZS13b3JkJzpcbiAgICAgIHJldHVybiBrZXlDb21tYW5kRGVsZXRlV29yZChlZGl0b3JTdGF0ZSk7XG4gICAgY2FzZSAnYmFja3NwYWNlJzpcbiAgICAgIHJldHVybiBrZXlDb21tYW5kUGxhaW5CYWNrc3BhY2UoZWRpdG9yU3RhdGUpO1xuICAgIGNhc2UgJ2JhY2tzcGFjZS13b3JkJzpcbiAgICAgIHJldHVybiBrZXlDb21tYW5kQmFja3NwYWNlV29yZChlZGl0b3JTdGF0ZSk7XG4gICAgY2FzZSAnYmFja3NwYWNlLXRvLXN0YXJ0LW9mLWxpbmUnOlxuICAgICAgcmV0dXJuIGtleUNvbW1hbmRCYWNrc3BhY2VUb1N0YXJ0T2ZMaW5lKGVkaXRvclN0YXRlKTtcbiAgICBjYXNlICdzcGxpdC1ibG9jayc6XG4gICAgICByZXR1cm4ga2V5Q29tbWFuZEluc2VydE5ld2xpbmUoZWRpdG9yU3RhdGUpO1xuICAgIGNhc2UgJ3RyYW5zcG9zZS1jaGFyYWN0ZXJzJzpcbiAgICAgIHJldHVybiBrZXlDb21tYW5kVHJhbnNwb3NlQ2hhcmFjdGVycyhlZGl0b3JTdGF0ZSk7XG4gICAgY2FzZSAnbW92ZS1zZWxlY3Rpb24tdG8tc3RhcnQtb2YtYmxvY2snOlxuICAgICAgcmV0dXJuIGtleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9TdGFydE9mQmxvY2soZWRpdG9yU3RhdGUpO1xuICAgIGNhc2UgJ21vdmUtc2VsZWN0aW9uLXRvLWVuZC1vZi1ibG9jayc6XG4gICAgICByZXR1cm4ga2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub0VuZE9mQmxvY2soZWRpdG9yU3RhdGUpO1xuICAgIGNhc2UgJ3NlY29uZGFyeS1jdXQnOlxuICAgICAgcmV0dXJuIFNlY29uZGFyeUNsaXBib2FyZC5jdXQoZWRpdG9yU3RhdGUpO1xuICAgIGNhc2UgJ3NlY29uZGFyeS1wYXN0ZSc6XG4gICAgICByZXR1cm4gU2Vjb25kYXJ5Q2xpcGJvYXJkLnBhc3RlKGVkaXRvclN0YXRlKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICB9XG59XG5cbi8qKlxuICogSW50ZXJjZXB0IGtleWRvd24gYmVoYXZpb3IgdG8gaGFuZGxlIGtleXMgYW5kIGNvbW1hbmRzIG1hbnVhbGx5LCBpZiBkZXNpcmVkLlxuICpcbiAqIEtleWRvd24gY29tYmluYXRpb25zIG1heSBiZSBtYXBwZWQgdG8gYERyYWZ0Q29tbWFuZGAgdmFsdWVzLCB3aGljaCBtYXlcbiAqIGNvcnJlc3BvbmQgdG8gY29tbWFuZCBmdW5jdGlvbnMgdGhhdCBtb2RpZnkgdGhlIGVkaXRvciBvciBpdHMgY29udGVudHMuXG4gKlxuICogU2VlIGBnZXREZWZhdWx0S2V5QmluZGluZ2AgZm9yIGRlZmF1bHRzLiBBbHRlcm5hdGl2ZWx5LCB0aGUgdG9wLWxldmVsXG4gKiBjb21wb25lbnQgbWF5IHByb3ZpZGUgYSBjdXN0b20gbWFwcGluZyB2aWEgdGhlIGBrZXlCaW5kaW5nRm5gIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGVkaXRPbktleURvd24oZWRpdG9yLCBlKSB7XG4gIHZhciBrZXlDb2RlID0gZS53aGljaDtcbiAgdmFyIGVkaXRvclN0YXRlID0gZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZTtcblxuICBzd2l0Y2ggKGtleUNvZGUpIHtcbiAgICBjYXNlIEtleXMuUkVUVVJOOlxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gVGhlIHRvcC1sZXZlbCBjb21wb25lbnQgbWF5IG1hbnVhbGx5IGhhbmRsZSBuZXdsaW5lIGluc2VydGlvbi4gSWZcbiAgICAgIC8vIG5vIHNwZWNpYWwgaGFuZGxpbmcgaXMgcGVyZm9ybWVkLCBmYWxsIHRocm91Z2ggdG8gY29tbWFuZCBoYW5kbGluZy5cbiAgICAgIGlmIChlZGl0b3IucHJvcHMuaGFuZGxlUmV0dXJuICYmIGlzRXZlbnRIYW5kbGVkKGVkaXRvci5wcm9wcy5oYW5kbGVSZXR1cm4oZSwgZWRpdG9yU3RhdGUpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIEtleXMuRVNDOlxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZWRpdG9yLnByb3BzLm9uRXNjYXBlICYmIGVkaXRvci5wcm9wcy5vbkVzY2FwZShlKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIEtleXMuVEFCOlxuICAgICAgZWRpdG9yLnByb3BzLm9uVGFiICYmIGVkaXRvci5wcm9wcy5vblRhYihlKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIEtleXMuVVA6XG4gICAgICBlZGl0b3IucHJvcHMub25VcEFycm93ICYmIGVkaXRvci5wcm9wcy5vblVwQXJyb3coZSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBLZXlzLlJJR0hUOlxuICAgICAgZWRpdG9yLnByb3BzLm9uUmlnaHRBcnJvdyAmJiBlZGl0b3IucHJvcHMub25SaWdodEFycm93KGUpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgS2V5cy5ET1dOOlxuICAgICAgZWRpdG9yLnByb3BzLm9uRG93bkFycm93ICYmIGVkaXRvci5wcm9wcy5vbkRvd25BcnJvdyhlKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIEtleXMuTEVGVDpcbiAgICAgIGVkaXRvci5wcm9wcy5vbkxlZnRBcnJvdyAmJiBlZGl0b3IucHJvcHMub25MZWZ0QXJyb3coZSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBLZXlzLlNQQUNFOlxuICAgICAgLy8gSGFuZGxpbmcgZm9yIE9TWCB3aGVyZSBvcHRpb24gKyBzcGFjZSBzY3JvbGxzLlxuICAgICAgaWYgKGlzQ2hyb21lICYmIGlzT3B0aW9uS2V5Q29tbWFuZChlKSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIEluc2VydCBhIG5ic3AgaW50byB0aGUgZWRpdG9yLlxuICAgICAgICB2YXIgY29udGVudFN0YXRlID0gRHJhZnRNb2RpZmllci5yZXBsYWNlVGV4dChlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSwgJ1xceEEwJyk7XG4gICAgICAgIGVkaXRvci51cGRhdGUoRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgY29udGVudFN0YXRlLCAnaW5zZXJ0LWNoYXJhY3RlcnMnKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgfVxuXG4gIHZhciBjb21tYW5kID0gZWRpdG9yLnByb3BzLmtleUJpbmRpbmdGbihlKTtcblxuICAvLyBJZiBubyBjb21tYW5kIGlzIHNwZWNpZmllZCwgYWxsb3cga2V5ZG93biBldmVudCB0byBjb250aW51ZS5cbiAgaWYgKCFjb21tYW5kKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNvbW1hbmQgPT09ICd1bmRvJykge1xuICAgIC8vIFNpbmNlIHVuZG8gcmVxdWlyZXMgc29tZSBzcGVjaWFsIHVwZGF0aW5nIGJlaGF2aW9yIHRvIGtlZXAgdGhlIGVkaXRvclxuICAgIC8vIGluIHN5bmMsIGhhbmRsZSBpdCBzZXBhcmF0ZWx5LlxuICAgIGtleUNvbW1hbmRVbmRvKGUsIGVkaXRvclN0YXRlLCBlZGl0b3IudXBkYXRlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBrbm93IHRoYXQgd2UncmUgaGFuZGxpbmcgYSBjb21tYW5kIG9mIHNvbWUga2luZCwgc29cbiAgLy8gd2UgZG9uJ3Qgd2FudCB0byBpbnNlcnQgYSBjaGFyYWN0ZXIgZm9sbG93aW5nIHRoZSBrZXlkb3duLlxuICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgLy8gQWxsb3cgY29tcG9uZW50cyBoaWdoZXIgdXAgdGhlIHRyZWUgdG8gaGFuZGxlIHRoZSBjb21tYW5kIGZpcnN0LlxuICBpZiAoZWRpdG9yLnByb3BzLmhhbmRsZUtleUNvbW1hbmQgJiYgaXNFdmVudEhhbmRsZWQoZWRpdG9yLnByb3BzLmhhbmRsZUtleUNvbW1hbmQoY29tbWFuZCwgZWRpdG9yU3RhdGUpKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBuZXdTdGF0ZSA9IG9uS2V5Q29tbWFuZChjb21tYW5kLCBlZGl0b3JTdGF0ZSk7XG4gIGlmIChuZXdTdGF0ZSAhPT0gZWRpdG9yU3RhdGUpIHtcbiAgICBlZGl0b3IudXBkYXRlKG5ld1N0YXRlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRPbktleURvd247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlZGl0T25JbnB1dFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuL0RyYWZ0RmVhdHVyZUZsYWdzJyk7XG52YXIgRHJhZnRNb2RpZmllciA9IHJlcXVpcmUoJy4vRHJhZnRNb2RpZmllcicpO1xudmFyIERyYWZ0T2Zmc2V0S2V5ID0gcmVxdWlyZSgnLi9EcmFmdE9mZnNldEtleScpO1xudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xudmFyIFVzZXJBZ2VudCA9IHJlcXVpcmUoJ2ZianMvbGliL1VzZXJBZ2VudCcpO1xuXG52YXIgZmluZEFuY2VzdG9yT2Zmc2V0S2V5ID0gcmVxdWlyZSgnLi9maW5kQW5jZXN0b3JPZmZzZXRLZXknKTtcbnZhciBudWxsdGhyb3dzID0gcmVxdWlyZSgnZmJqcy9saWIvbnVsbHRocm93cycpO1xuXG52YXIgaXNHZWNrbyA9IFVzZXJBZ2VudC5pc0VuZ2luZSgnR2Vja28nKTtcblxudmFyIERPVUJMRV9ORVdMSU5FID0gJ1xcblxcbic7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBpbnRlbmRlZCB0byBoYW5kbGUgc3BlbGxjaGVjayBhbmQgYXV0b2NvcnJlY3QgY2hhbmdlcyxcbiAqIHdoaWNoIG9jY3VyIGluIHRoZSBET00gbmF0aXZlbHkgd2l0aG91dCBhbnkgb3Bwb3J0dW5pdHkgdG8gb2JzZXJ2ZSBvclxuICogaW50ZXJwcmV0IHRoZSBjaGFuZ2VzIGJlZm9yZSB0aGV5IG9jY3VyLlxuICpcbiAqIFRoZSBgaW5wdXRgIGV2ZW50IGZpcmVzIGluIGNvbnRlbnRFZGl0YWJsZSBlbGVtZW50cyByZWxpYWJseSBmb3Igbm9uLUlFXG4gKiBicm93c2VycywgaW1tZWRpYXRlbHkgYWZ0ZXIgY2hhbmdlcyBvY2N1ciB0byB0aGUgZWRpdG9yIERPTS4gU2luY2Ugb3VyIG90aGVyXG4gKiBoYW5kbGVycyBvdmVycmlkZSBvciBvdGhlcndpc2UgaGFuZGxlIGNvdmVyIG90aGVyIHZhcmlldGllcyBvZiB0ZXh0IGlucHV0LFxuICogdGhlIERPTSBzdGF0ZSBzaG91bGQgbWF0Y2ggdGhlIG1vZGVsIGluIGFsbCBjb250cm9sbGVkIGlucHV0IGNhc2VzLiBUaHVzLFxuICogd2hlbiBhbiBgaW5wdXRgIGNoYW5nZSBsZWFkcyB0byBhIERPTS9tb2RlbCBtaXNtYXRjaCwgdGhlIGNoYW5nZSBzaG91bGQgYmVcbiAqIGR1ZSB0byBhIHNwZWxsY2hlY2sgY2hhbmdlLCBhbmQgd2UgY2FuIGluY29ycG9yYXRlIGl0IGludG8gb3VyIG1vZGVsLlxuICovXG5mdW5jdGlvbiBlZGl0T25JbnB1dChlZGl0b3IpIHtcbiAgaWYgKGVkaXRvci5fcGVuZGluZ1N0YXRlRnJvbUJlZm9yZUlucHV0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBlZGl0b3IudXBkYXRlKGVkaXRvci5fcGVuZGluZ1N0YXRlRnJvbUJlZm9yZUlucHV0KTtcbiAgICBlZGl0b3IuX3BlbmRpbmdTdGF0ZUZyb21CZWZvcmVJbnB1dCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHZhciBkb21TZWxlY3Rpb24gPSBnbG9iYWwuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgdmFyIGFuY2hvck5vZGUgPSBkb21TZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICAgIGlzQ29sbGFwc2VkID0gZG9tU2VsZWN0aW9uLmlzQ29sbGFwc2VkO1xuXG4gIHZhciBpc05vdFRleHROb2RlID0gYW5jaG9yTm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5URVhUX05PREU7XG4gIHZhciBpc05vdFRleHRPckVsZW1lbnROb2RlID0gYW5jaG9yTm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5URVhUX05PREUgJiYgYW5jaG9yTm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREU7XG5cbiAgaWYgKERyYWZ0RmVhdHVyZUZsYWdzLmRyYWZ0X2tpbGxzd2l0Y2hfYWxsb3dfbm9udGV4dG5vZGVzKSB7XG4gICAgaWYgKGlzTm90VGV4dE5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzTm90VGV4dE9yRWxlbWVudE5vZGUpIHtcbiAgICAgIC8vIFRPRE86ICh0MTYxNDkyNzIpIGZpZ3VyZSBvdXQgY29udGV4dCBmb3IgdGhpcyBjaGFuZ2VcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAoYW5jaG9yTm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUgJiYgKGFuY2hvck5vZGUucHJldmlvdXNTaWJsaW5nICE9PSBudWxsIHx8IGFuY2hvck5vZGUubmV4dFNpYmxpbmcgIT09IG51bGwpKSB7XG4gICAgLy8gV2hlbiB0eXBpbmcgYXQgdGhlIGJlZ2lubmluZyBvZiBhIHZpc3VhbCBsaW5lLCBDaHJvbWUgc3BsaXRzIHRoZSB0ZXh0XG4gICAgLy8gbm9kZXMgaW50byB0d28uIFdoeT8gTm8gb25lIGtub3dzLiBUaGlzIGNvbW1pdCBpcyBzdXNwaWNpb3VzOlxuICAgIC8vIGh0dHBzOi8vY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMvKy9hM2I2MDA5ODEyODZiMTM1NjMyMzcxNDc3ZjkwMjIxNGM1NWExNzI0XG4gICAgLy8gVG8gd29yayBhcm91bmQsIHdlJ2xsIG1lcmdlIHRoZSBzaWJsaW5nIHRleHQgbm9kZXMgYmFjayBpbnRvIHRoaXMgb25lLlxuICAgIHZhciBzcGFuID0gYW5jaG9yTm9kZS5wYXJlbnROb2RlO1xuICAgIGFuY2hvck5vZGUubm9kZVZhbHVlID0gc3Bhbi50ZXh0Q29udGVudDtcbiAgICBmb3IgKHZhciBjaGlsZCA9IHNwYW4uZmlyc3RDaGlsZDsgY2hpbGQgIT09IG51bGw7IGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmcpIHtcbiAgICAgIGlmIChjaGlsZCAhPT0gYW5jaG9yTm9kZSkge1xuICAgICAgICBzcGFuLnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgZG9tVGV4dCA9IGFuY2hvck5vZGUudGV4dENvbnRlbnQ7XG4gIHZhciBlZGl0b3JTdGF0ZSA9IGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGU7XG4gIHZhciBvZmZzZXRLZXkgPSBudWxsdGhyb3dzKGZpbmRBbmNlc3Rvck9mZnNldEtleShhbmNob3JOb2RlKSk7XG5cbiAgdmFyIF9EcmFmdE9mZnNldEtleSRkZWNvZCA9IERyYWZ0T2Zmc2V0S2V5LmRlY29kZShvZmZzZXRLZXkpLFxuICAgICAgYmxvY2tLZXkgPSBfRHJhZnRPZmZzZXRLZXkkZGVjb2QuYmxvY2tLZXksXG4gICAgICBkZWNvcmF0b3JLZXkgPSBfRHJhZnRPZmZzZXRLZXkkZGVjb2QuZGVjb3JhdG9yS2V5LFxuICAgICAgbGVhZktleSA9IF9EcmFmdE9mZnNldEtleSRkZWNvZC5sZWFmS2V5O1xuXG4gIHZhciBfZWRpdG9yU3RhdGUkZ2V0QmxvY2sgPSBlZGl0b3JTdGF0ZS5nZXRCbG9ja1RyZWUoYmxvY2tLZXkpLmdldEluKFtkZWNvcmF0b3JLZXksICdsZWF2ZXMnLCBsZWFmS2V5XSksXG4gICAgICBzdGFydCA9IF9lZGl0b3JTdGF0ZSRnZXRCbG9jay5zdGFydCxcbiAgICAgIGVuZCA9IF9lZGl0b3JTdGF0ZSRnZXRCbG9jay5lbmQ7XG5cbiAgdmFyIGNvbnRlbnQgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICB2YXIgYmxvY2sgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGJsb2NrS2V5KTtcbiAgdmFyIG1vZGVsVGV4dCA9IGJsb2NrLmdldFRleHQoKS5zbGljZShzdGFydCwgZW5kKTtcblxuICAvLyBTcGVjaWFsLWNhc2Ugc29mdCBuZXdsaW5lcyBoZXJlLiBJZiB0aGUgRE9NIHRleHQgZW5kcyBpbiBhIHNvZnQgbmV3bGluZSxcbiAgLy8gd2Ugd2lsbCBoYXZlIG1hbnVhbGx5IGluc2VydGVkIGFuIGV4dHJhIHNvZnQgbmV3bGluZSBpbiBEcmFmdEVkaXRvckxlYWYuXG4gIC8vIFdlIHdhbnQgdG8gcmVtb3ZlIHRoaXMgZXh0cmEgbmV3bGluZSBmb3IgdGhlIHB1cnBvc2Ugb2Ygb3VyIGNvbXBhcmlzb25cbiAgLy8gb2YgRE9NIGFuZCBtb2RlbCB0ZXh0LlxuICBpZiAoZG9tVGV4dC5lbmRzV2l0aChET1VCTEVfTkVXTElORSkpIHtcbiAgICBkb21UZXh0ID0gZG9tVGV4dC5zbGljZSgwLCAtMSk7XG4gIH1cblxuICAvLyBObyBjaGFuZ2UgLS0gdGhlIERPTSBpcyB1cCB0byBkYXRlLiBOb3RoaW5nIHRvIGRvIGhlcmUuXG4gIGlmIChkb21UZXh0ID09PSBtb2RlbFRleHQpIHtcbiAgICAvLyBUaGlzIGNhbiBiZSBidWdneSBmb3Igc29tZSBBbmRyb2lkIGtleWJvYXJkcyBiZWNhdXNlIHRoZXkgZG9uJ3QgZmlyZVxuICAgIC8vIHN0YW5kYXJkIG9ua2V5ZG93bi9wcmVzc2VkIGV2ZW50cyBhbmQgb25seSBmaXJlZCBlZGl0T25JbnB1dFxuICAgIC8vIHNvIGRvbVRleHQgaXMgYWxyZWFkeSBjaGFuZ2VkIGJ5IHRoZSBicm93c2VyIGFuZCBlbmRzIHVwIGJlaW5nIGVxdWFsXG4gICAgLy8gdG8gbW9kZWxUZXh0IHVuZXhwZWN0ZWRseVxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcblxuICAvLyBXZSdsbCByZXBsYWNlIHRoZSBlbnRpcmUgbGVhZiB3aXRoIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIHRhcmdldC5cbiAgdmFyIHRhcmdldFJhbmdlID0gc2VsZWN0aW9uLm1lcmdlKHtcbiAgICBhbmNob3JPZmZzZXQ6IHN0YXJ0LFxuICAgIGZvY3VzT2Zmc2V0OiBlbmQsXG4gICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgfSk7XG5cbiAgdmFyIGVudGl0eUtleSA9IGJsb2NrLmdldEVudGl0eUF0KHN0YXJ0KTtcbiAgdmFyIGVudGl0eSA9IGVudGl0eUtleSAmJiBjb250ZW50LmdldEVudGl0eShlbnRpdHlLZXkpO1xuICB2YXIgZW50aXR5VHlwZSA9IGVudGl0eSAmJiBlbnRpdHkuZ2V0TXV0YWJpbGl0eSgpO1xuICB2YXIgcHJlc2VydmVFbnRpdHkgPSBlbnRpdHlUeXBlID09PSAnTVVUQUJMRSc7XG5cbiAgLy8gSW1tdXRhYmxlIG9yIHNlZ21lbnRlZCBlbnRpdGllcyBjYW5ub3QgcHJvcGVybHkgYmUgaGFuZGxlZCBieSB0aGVcbiAgLy8gZGVmYXVsdCBicm93c2VyIHVuZG8sIHNvIHdlIGhhdmUgdG8gdXNlIGEgZGlmZmVyZW50IGNoYW5nZSB0eXBlIHRvXG4gIC8vIGZvcmNlIHVzaW5nIG91ciBpbnRlcm5hbCB1bmRvIG1ldGhvZCBpbnN0ZWFkIG9mIGZhbGxpbmcgdGhyb3VnaCB0byB0aGVcbiAgLy8gbmF0aXZlIGJyb3dzZXIgdW5kby5cbiAgdmFyIGNoYW5nZVR5cGUgPSBwcmVzZXJ2ZUVudGl0eSA/ICdzcGVsbGNoZWNrLWNoYW5nZScgOiAnYXBwbHktZW50aXR5JztcblxuICB2YXIgbmV3Q29udGVudCA9IERyYWZ0TW9kaWZpZXIucmVwbGFjZVRleHQoY29udGVudCwgdGFyZ2V0UmFuZ2UsIGRvbVRleHQsIGJsb2NrLmdldElubGluZVN0eWxlQXQoc3RhcnQpLCBwcmVzZXJ2ZUVudGl0eSA/IGJsb2NrLmdldEVudGl0eUF0KHN0YXJ0KSA6IG51bGwpO1xuXG4gIHZhciBhbmNob3JPZmZzZXQsIGZvY3VzT2Zmc2V0LCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0O1xuXG4gIGlmIChpc0dlY2tvKSB7XG4gICAgLy8gRmlyZWZveCBzZWxlY3Rpb24gZG9lcyBub3QgY2hhbmdlIHdoaWxlIHRoZSBjb250ZXh0IG1lbnUgaXMgb3Blbiwgc29cbiAgICAvLyB3ZSBwcmVzZXJ2ZSB0aGUgYW5jaG9yIGFuZCBmb2N1cyB2YWx1ZXMgb2YgdGhlIERPTSBzZWxlY3Rpb24uXG4gICAgYW5jaG9yT2Zmc2V0ID0gZG9tU2VsZWN0aW9uLmFuY2hvck9mZnNldDtcbiAgICBmb2N1c09mZnNldCA9IGRvbVNlbGVjdGlvbi5mb2N1c09mZnNldDtcbiAgICBzdGFydE9mZnNldCA9IHN0YXJ0ICsgTWF0aC5taW4oYW5jaG9yT2Zmc2V0LCBmb2N1c09mZnNldCk7XG4gICAgZW5kT2Zmc2V0ID0gc3RhcnRPZmZzZXQgKyBNYXRoLmFicyhhbmNob3JPZmZzZXQgLSBmb2N1c09mZnNldCk7XG4gICAgYW5jaG9yT2Zmc2V0ID0gc3RhcnRPZmZzZXQ7XG4gICAgZm9jdXNPZmZzZXQgPSBlbmRPZmZzZXQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlcnMgb3RoZXIgdGhhbiBGaXJlZm94IG1heSBhZGp1c3QgRE9NIHNlbGVjdGlvbiB3aGlsZSB0aGUgY29udGV4dFxuICAgIC8vIG1lbnUgaXMgb3BlbiwgYW5kIFNhZmFyaSBhdXRvY29ycmVjdCBpcyBwcm9uZSB0byBwcm92aWRpbmcgYW4gaW5hY2N1cmF0ZVxuICAgIC8vIERPTSBzZWxlY3Rpb24uIERvbid0IHRydXN0IGl0LiBJbnN0ZWFkLCB1c2Ugb3VyIGV4aXN0aW5nIFNlbGVjdGlvblN0YXRlXG4gICAgLy8gYW5kIGFkanVzdCBpdCBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgY2hhbmdlZCBkdXJpbmcgdGhlXG4gICAgLy8gbXV0YXRpb24uXG4gICAgdmFyIGNoYXJEZWx0YSA9IGRvbVRleHQubGVuZ3RoIC0gbW9kZWxUZXh0Lmxlbmd0aDtcbiAgICBzdGFydE9mZnNldCA9IHNlbGVjdGlvbi5nZXRTdGFydE9mZnNldCgpO1xuICAgIGVuZE9mZnNldCA9IHNlbGVjdGlvbi5nZXRFbmRPZmZzZXQoKTtcblxuICAgIGFuY2hvck9mZnNldCA9IGlzQ29sbGFwc2VkID8gZW5kT2Zmc2V0ICsgY2hhckRlbHRhIDogc3RhcnRPZmZzZXQ7XG4gICAgZm9jdXNPZmZzZXQgPSBlbmRPZmZzZXQgKyBjaGFyRGVsdGE7XG4gIH1cblxuICAvLyBTZWdtZW50ZWQgZW50aXRpZXMgYXJlIGNvbXBsZXRlbHkgb3IgcGFydGlhbGx5IHJlbW92ZWQgd2hlbiB0aGVpclxuICAvLyB0ZXh0IGNvbnRlbnQgY2hhbmdlcy4gRm9yIHRoaXMgY2FzZSB3ZSBkbyBub3Qgd2FudCBhbnkgdGV4dCB0byBiZSBzZWxlY3RlZFxuICAvLyBhZnRlciB0aGUgY2hhbmdlLCBzbyB3ZSBhcmUgbm90IG1lcmdpbmcgdGhlIHNlbGVjdGlvbi5cbiAgdmFyIGNvbnRlbnRXaXRoQWRqdXN0ZWRET01TZWxlY3Rpb24gPSBuZXdDb250ZW50Lm1lcmdlKHtcbiAgICBzZWxlY3Rpb25CZWZvcmU6IGNvbnRlbnQuZ2V0U2VsZWN0aW9uQWZ0ZXIoKSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uLm1lcmdlKHsgYW5jaG9yT2Zmc2V0OiBhbmNob3JPZmZzZXQsIGZvY3VzT2Zmc2V0OiBmb2N1c09mZnNldCB9KVxuICB9KTtcblxuICBlZGl0b3IudXBkYXRlKEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIGNvbnRlbnRXaXRoQWRqdXN0ZWRET01TZWxlY3Rpb24sIGNoYW5nZVR5cGUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25JbnB1dDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVkaXRPbkZvY3VzXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcbnZhciBVc2VyQWdlbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9Vc2VyQWdlbnQnKTtcblxuZnVuY3Rpb24gZWRpdE9uRm9jdXMoZWRpdG9yLCBlKSB7XG4gIHZhciBlZGl0b3JTdGF0ZSA9IGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGU7XG4gIHZhciBjdXJyZW50U2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIGlmIChjdXJyZW50U2VsZWN0aW9uLmdldEhhc0ZvY3VzKCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uID0gY3VycmVudFNlbGVjdGlvbi5zZXQoJ2hhc0ZvY3VzJywgdHJ1ZSk7XG4gIGVkaXRvci5wcm9wcy5vbkZvY3VzICYmIGVkaXRvci5wcm9wcy5vbkZvY3VzKGUpO1xuXG4gIC8vIFdoZW4gdGhlIHRhYiBjb250YWluaW5nIHRoaXMgdGV4dCBlZGl0b3IgaXMgaGlkZGVuIGFuZCB0aGUgdXNlciBkb2VzIGFcbiAgLy8gZmluZC1pbi1wYWdlIGluIGEgX2RpZmZlcmVudF8gdGFiLCBDaHJvbWUgb24gTWFjIGxpa2VzIHRvIGZvcmdldCB3aGF0IHRoZVxuICAvLyBzZWxlY3Rpb24gd2FzIHJpZ2h0IGFmdGVyIHNlbmRpbmcgdGhpcyBmb2N1cyBldmVudCBhbmQgKGlmIHlvdSBsZXQgaXQpXG4gIC8vIG1vdmVzIHRoZSBjdXJzb3IgYmFjayB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBlZGl0b3IsIHNvIHdlIGZvcmNlIHRoZVxuICAvLyBzZWxlY3Rpb24gaGVyZSBpbnN0ZWFkIG9mIHNpbXBseSBhY2NlcHRpbmcgaXQgaW4gb3JkZXIgdG8gcHJlc2VydmUgdGhlXG4gIC8vIG9sZCBjdXJzb3IgcG9zaXRpb24uIFNlZSBodHRwczovL2NyYnVnLmNvbS81NDAwMDQuXG4gIC8vIEJ1dCBpdCBsb29rcyBsaWtlIHRoaXMgaXMgZml4ZWQgaW4gQ2hyb21lIDYwLjAuMzA4MS4wLlxuICAvLyBPdGhlciBicm93c2VycyBhbHNvIGRvbid0IGhhdmUgdGhpcyBidWcsIHNvIHdlIHByZWZlciB0byBhY2NlcHRTZWxlY3Rpb25cbiAgLy8gd2hlbiBwb3NzaWJsZSwgdG8gZW5zdXJlIHRoYXQgdW5mb2N1c2luZyBhbmQgcmVmb2N1c2luZyBhIERyYWZ0IGVkaXRvclxuICAvLyBkb2Vzbid0IHByZXNlcnZlIHRoZSBzZWxlY3Rpb24sIG1hdGNoaW5nIGhvdyB0ZXh0YXJlYXMgd29yay5cbiAgaWYgKFVzZXJBZ2VudC5pc0Jyb3dzZXIoJ0Nocm9tZSA8IDYwLjAuMzA4MS4wJykpIHtcbiAgICBlZGl0b3IudXBkYXRlKEVkaXRvclN0YXRlLmZvcmNlU2VsZWN0aW9uKGVkaXRvclN0YXRlLCBzZWxlY3Rpb24pKTtcbiAgfSBlbHNlIHtcbiAgICBlZGl0b3IudXBkYXRlKEVkaXRvclN0YXRlLmFjY2VwdFNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgc2VsZWN0aW9uKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25Gb2N1czsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVkaXRPbkRyYWdTdGFydFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYGRyYWdzdGFydGAgZXZlbnQgaGFzIGJlZ3VuIHdpdGhpbiB0aGUgdGV4dCBlZGl0b3IgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiBlZGl0T25EcmFnU3RhcnQoZWRpdG9yKSB7XG4gIGVkaXRvci5faW50ZXJuYWxEcmFnID0gdHJ1ZTtcbiAgZWRpdG9yLnNldE1vZGUoJ2RyYWcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25EcmFnU3RhcnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlZGl0T25EcmFnT3ZlclxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERyYWcgYmVoYXZpb3IgaGFzIGJlZ3VuIGZyb20gb3V0c2lkZSB0aGUgZWRpdG9yIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGVkaXRPbkRyYWdPdmVyKGVkaXRvciwgZSkge1xuICBlZGl0b3IuX2ludGVybmFsRHJhZyA9IGZhbHNlO1xuICBlZGl0b3Iuc2V0TW9kZSgnZHJhZycpO1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWRpdE9uRHJhZ092ZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlZGl0T25DdXRcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0TW9kaWZpZXIgPSByZXF1aXJlKCcuL0RyYWZ0TW9kaWZpZXInKTtcbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcbnZhciBTdHlsZSA9IHJlcXVpcmUoJ2ZianMvbGliL1N0eWxlJyk7XG5cbnZhciBnZXRGcmFnbWVudEZyb21TZWxlY3Rpb24gPSByZXF1aXJlKCcuL2dldEZyYWdtZW50RnJvbVNlbGVjdGlvbicpO1xudmFyIGdldFNjcm9sbFBvc2l0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZ2V0U2Nyb2xsUG9zaXRpb24nKTtcblxuLyoqXG4gKiBPbiBgY3V0YCBldmVudHMsIG5hdGl2ZSBiZWhhdmlvciBpcyBhbGxvd2VkIHRvIG9jY3VyIHNvIHRoYXQgdGhlIHN5c3RlbVxuICogY2xpcGJvYXJkIGlzIHNldCBwcm9wZXJseS4gVGhpcyBtZWFucyB0aGF0IHdlIG5lZWQgdG8gdGFrZSBzdGVwcyB0byByZWNvdmVyXG4gKiB0aGUgZWRpdG9yIERPTSBzdGF0ZSBhZnRlciB0aGUgYGN1dGAgaGFzIG9jY3VycmVkIGluIG9yZGVyIHRvIG1haW50YWluXG4gKiBjb250cm9sIG9mIHRoZSBjb21wb25lbnQuXG4gKlxuICogSW4gYWRkaXRpb24sIHdlIGNhbiBrZWVwIGEgY29weSBvZiB0aGUgcmVtb3ZlZCBmcmFnbWVudCwgaW5jbHVkaW5nIGFsbFxuICogc3R5bGVzIGFuZCBlbnRpdGllcywgZm9yIHVzZSBhcyBhbiBpbnRlcm5hbCBwYXN0ZS5cbiAqL1xuZnVuY3Rpb24gZWRpdE9uQ3V0KGVkaXRvciwgZSkge1xuICB2YXIgZWRpdG9yU3RhdGUgPSBlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlO1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBlbGVtZW50ID0gZS50YXJnZXQ7XG4gIHZhciBzY3JvbGxQb3NpdGlvbiA9IHZvaWQgMDtcblxuICAvLyBObyBzZWxlY3Rpb24sIHNvIHRoZXJlJ3Mgbm90aGluZyB0byBjdXQuXG4gIGlmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBUcmFjayB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gc28gdGhhdCBpdCBjYW4gYmUgZm9yY2VkIGJhY2sgaW4gcGxhY2VcbiAgLy8gYWZ0ZXIgdGhlIGVkaXRvciByZWdhaW5zIGNvbnRyb2wgb2YgdGhlIERPTS5cbiAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBOb2RlKSB7XG4gICAgc2Nyb2xsUG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbihTdHlsZS5nZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkpO1xuICB9XG5cbiAgdmFyIGZyYWdtZW50ID0gZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uKGVkaXRvclN0YXRlKTtcbiAgZWRpdG9yLnNldENsaXBib2FyZChmcmFnbWVudCk7XG5cbiAgLy8gU2V0IGBjdXRgIG1vZGUgdG8gZGlzYWJsZSBhbGwgZXZlbnQgaGFuZGxpbmcgdGVtcG9yYXJpbHkuXG4gIGVkaXRvci5zZXRNb2RlKCdjdXQnKTtcblxuICAvLyBMZXQgbmF0aXZlIGBjdXRgIGJlaGF2aW9yIG9jY3VyLCB0aGVuIHJlY292ZXIgY29udHJvbC5cbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgZWRpdG9yLnJlc3RvcmVFZGl0b3JET00oc2Nyb2xsUG9zaXRpb24pO1xuICAgIGVkaXRvci5leGl0Q3VycmVudE1vZGUoKTtcbiAgICBlZGl0b3IudXBkYXRlKHJlbW92ZUZyYWdtZW50KGVkaXRvclN0YXRlKSk7XG4gIH0sIDApO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGcmFnbWVudChlZGl0b3JTdGF0ZSkge1xuICB2YXIgbmV3Q29udGVudCA9IERyYWZ0TW9kaWZpZXIucmVtb3ZlUmFuZ2UoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCksICdmb3J3YXJkJyk7XG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBuZXdDb250ZW50LCAncmVtb3ZlLXJhbmdlJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWRpdE9uQ3V0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZWRpdE9uQ29weVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uID0gcmVxdWlyZSgnLi9nZXRGcmFnbWVudEZyb21TZWxlY3Rpb24nKTtcblxuLyoqXG4gKiBJZiB3ZSBoYXZlIGEgc2VsZWN0aW9uLCBjcmVhdGUgYSBDb250ZW50U3RhdGUgZnJhZ21lbnQgYW5kIHN0b3JlXG4gKiBpdCBpbiBvdXIgaW50ZXJuYWwgY2xpcGJvYXJkLiBTdWJzZXF1ZW50IHBhc3RlIGV2ZW50cyB3aWxsIHVzZSB0aGlzXG4gKiBmcmFnbWVudCBpZiBubyBleHRlcm5hbCBjbGlwYm9hcmQgZGF0YSBpcyBzdXBwbGllZC5cbiAqL1xuZnVuY3Rpb24gZWRpdE9uQ29weShlZGl0b3IsIGUpIHtcbiAgdmFyIGVkaXRvclN0YXRlID0gZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZTtcbiAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuXG4gIC8vIE5vIHNlbGVjdGlvbiwgc28gdGhlcmUncyBub3RoaW5nIHRvIGNvcHkuXG4gIGlmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBlZGl0b3Iuc2V0Q2xpcGJvYXJkKGdldEZyYWdtZW50RnJvbVNlbGVjdGlvbihlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWRpdE9uQ29weTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVkaXRPbkNvbXBvc2l0aW9uU3RhcnRcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xuXG4vKipcbiAqIFRoZSB1c2VyIGhhcyBiZWd1biB1c2luZyBhbiBJTUUgaW5wdXQgc3lzdGVtLiBTd2l0Y2hpbmcgdG8gYGNvbXBvc2l0ZWAgbW9kZVxuICogYWxsb3dzIGhhbmRsaW5nIGNvbXBvc2l0aW9uIGlucHV0IGFuZCBkaXNhYmxlcyBvdGhlciBlZGl0IGJlaGF2aW9yLlxuICovXG5mdW5jdGlvbiBlZGl0T25Db21wb3NpdGlvblN0YXJ0KGVkaXRvciwgZSkge1xuICBlZGl0b3Iuc2V0TW9kZSgnY29tcG9zaXRlJyk7XG4gIGVkaXRvci51cGRhdGUoRWRpdG9yU3RhdGUuc2V0KGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGUsIHsgaW5Db21wb3NpdGlvbk1vZGU6IHRydWUgfSkpO1xuICAvLyBBbGxvdyBjb21wb3NpdGlvbiBoYW5kbGVyIHRvIGludGVycHJldCB0aGUgY29tcG9zaXRpb25zdGFydCBldmVudFxuICBlZGl0b3IuX29uQ29tcG9zaXRpb25TdGFydChlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25Db21wb3NpdGlvblN0YXJ0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZWRpdE9uQmx1clxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG5cbnZhciBjb250YWluc05vZGUgPSByZXF1aXJlKCdmYmpzL2xpYi9jb250YWluc05vZGUnKTtcbnZhciBnZXRBY3RpdmVFbGVtZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudCcpO1xuXG5mdW5jdGlvbiBlZGl0T25CbHVyKGVkaXRvciwgZSkge1xuICAvLyBJbiBhIGNvbnRlbnRFZGl0YWJsZSBlbGVtZW50LCB3aGVuIHlvdSBzZWxlY3QgYSByYW5nZSBhbmQgdGhlbiBjbGlja1xuICAvLyBhbm90aGVyIGFjdGl2ZSBlbGVtZW50LCB0aGlzIGRvZXMgdHJpZ2dlciBhIGBibHVyYCBldmVudCBidXQgd2lsbCBub3RcbiAgLy8gcmVtb3ZlIHRoZSBET00gc2VsZWN0aW9uIGZyb20gdGhlIGNvbnRlbnRlZGl0YWJsZS5cbiAgLy8gVGhpcyBpcyBjb25zaXN0ZW50IGFjcm9zcyBhbGwgYnJvd3NlcnMsIGJ1dCB3ZSBwcmVmZXIgdGhhdCB0aGUgZWRpdG9yXG4gIC8vIGJlaGF2ZSBsaWtlIGEgdGV4dGFyZWEsIHdoZXJlIGEgYGJsdXJgIGV2ZW50IGNsZWFycyB0aGUgRE9NIHNlbGVjdGlvbi5cbiAgLy8gV2UgdGhlcmVmb3JlIGZvcmNlIHRoZSBpc3N1ZSB0byBiZSBjZXJ0YWluLCBjaGVja2luZyB3aGV0aGVyIHRoZSBhY3RpdmVcbiAgLy8gZWxlbWVudCBpcyBgYm9keWAgdG8gZm9yY2UgaXQgd2hlbiBibHVycmluZyBvY2N1cnMgd2l0aGluIHRoZSB3aW5kb3cgKGFzXG4gIC8vIG9wcG9zZWQgdG8gY2xpY2tpbmcgdG8gYW5vdGhlciB0YWIgb3Igd2luZG93KS5cbiAgaWYgKGdldEFjdGl2ZUVsZW1lbnQoKSA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgIHZhciBfc2VsZWN0aW9uID0gZ2xvYmFsLmdldFNlbGVjdGlvbigpO1xuICAgIHZhciBlZGl0b3JOb2RlID0gZWRpdG9yLmVkaXRvcjtcbiAgICBpZiAoX3NlbGVjdGlvbi5yYW5nZUNvdW50ID09PSAxICYmIGNvbnRhaW5zTm9kZShlZGl0b3JOb2RlLCBfc2VsZWN0aW9uLmFuY2hvck5vZGUpICYmIGNvbnRhaW5zTm9kZShlZGl0b3JOb2RlLCBfc2VsZWN0aW9uLmZvY3VzTm9kZSkpIHtcbiAgICAgIF9zZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGVkaXRvclN0YXRlID0gZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZTtcbiAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgaWYgKCFjdXJyZW50U2VsZWN0aW9uLmdldEhhc0ZvY3VzKCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uID0gY3VycmVudFNlbGVjdGlvbi5zZXQoJ2hhc0ZvY3VzJywgZmFsc2UpO1xuICBlZGl0b3IucHJvcHMub25CbHVyICYmIGVkaXRvci5wcm9wcy5vbkJsdXIoZSk7XG4gIGVkaXRvci51cGRhdGUoRWRpdG9yU3RhdGUuYWNjZXB0U2VsZWN0aW9uKGVkaXRvclN0YXRlLCBzZWxlY3Rpb24pKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25CbHVyOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gc2V0aW1tZWRpYXRlIGFkZHMgc2V0SW1tZWRpYXRlIHRvIHRoZSBnbG9iYWwuIFdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGV4cG9ydFxuLy8gdGhlIGFjdHVhbCBmdW5jdGlvbi5cblxucmVxdWlyZSgnc2V0aW1tZWRpYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlZGl0T25CZWZvcmVJbnB1dFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQmxvY2tUcmVlID0gcmVxdWlyZSgnLi9CbG9ja1RyZWUnKTtcbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZSgnLi9EcmFmdE1vZGlmaWVyJyk7XG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG52YXIgVXNlckFnZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvVXNlckFnZW50Jyk7XG5cbnZhciBnZXRFbnRpdHlLZXlGb3JTZWxlY3Rpb24gPSByZXF1aXJlKCcuL2dldEVudGl0eUtleUZvclNlbGVjdGlvbicpO1xudmFyIGlzRXZlbnRIYW5kbGVkID0gcmVxdWlyZSgnLi9pc0V2ZW50SGFuZGxlZCcpO1xudmFyIGlzU2VsZWN0aW9uQXRMZWFmU3RhcnQgPSByZXF1aXJlKCcuL2lzU2VsZWN0aW9uQXRMZWFmU3RhcnQnKTtcbnZhciBudWxsdGhyb3dzID0gcmVxdWlyZSgnZmJqcy9saWIvbnVsbHRocm93cycpO1xudmFyIHNldEltbWVkaWF0ZSA9IHJlcXVpcmUoJ2ZianMvbGliL3NldEltbWVkaWF0ZScpO1xuXG4vLyBXaGVuIG5vdGhpbmcgaXMgZm9jdXNlZCwgRmlyZWZveCByZWdhcmRzIHR3byBjaGFyYWN0ZXJzLCBgJ2AgYW5kIGAvYCwgYXNcbi8vIGNvbW1hbmRzIHRoYXQgc2hvdWxkIG9wZW4gYW5kIGZvY3VzIHRoZSBcInF1aWNrZmluZFwiIHNlYXJjaCBiYXIuIFRoaXMgc2hvdWxkXG4vLyAqbmV2ZXIqIGhhcHBlbiB3aGlsZSBhIGNvbnRlbnRlZGl0YWJsZSBpcyBmb2N1c2VkLCBidXQgYXMgb2YgdjI4LCBpdFxuLy8gc29tZXRpbWVzIGRvZXMsIGV2ZW4gd2hlbiB0aGUga2V5cHJlc3MgZXZlbnQgdGFyZ2V0IGlzIHRoZSBjb250ZW50ZWRpdGFibGUuXG4vLyBUaGlzIGJyZWFrcyB0aGUgaW5wdXQuIFNwZWNpYWwgY2FzZSB0aGVzZSBjaGFyYWN0ZXJzIHRvIGVuc3VyZSB0aGF0IHdoZW5cbi8vIHRoZXkgYXJlIHR5cGVkLCB3ZSBwcmV2ZW50IGRlZmF1bHQgb24gdGhlIGV2ZW50IHRvIG1ha2Ugc3VyZSBub3QgdG9cbi8vIHRyaWdnZXIgcXVpY2tmaW5kLlxudmFyIEZGX1FVSUNLRklORF9DSEFSID0gXCInXCI7XG52YXIgRkZfUVVJQ0tGSU5EX0xJTktfQ0hBUiA9ICcvJztcbnZhciBpc0ZpcmVmb3ggPSBVc2VyQWdlbnQuaXNCcm93c2VyKCdGaXJlZm94Jyk7XG5cbmZ1bmN0aW9uIG11c3RQcmV2ZW50RGVmYXVsdEZvckNoYXJhY3RlcihjaGFyYWN0ZXIpIHtcbiAgcmV0dXJuIGlzRmlyZWZveCAmJiAoY2hhcmFjdGVyID09IEZGX1FVSUNLRklORF9DSEFSIHx8IGNoYXJhY3RlciA9PSBGRl9RVUlDS0ZJTkRfTElOS19DSEFSKTtcbn1cblxuLyoqXG4gKiBSZXBsYWNlIHRoZSBjdXJyZW50IHNlbGVjdGlvbiB3aXRoIHRoZSBzcGVjaWZpZWQgdGV4dCBzdHJpbmcsIHdpdGggdGhlXG4gKiBpbmxpbmUgc3R5bGUgYW5kIGVudGl0eSBrZXkgYXBwbGllZCB0byB0aGUgbmV3bHkgaW5zZXJ0ZWQgdGV4dC5cbiAqL1xuZnVuY3Rpb24gcmVwbGFjZVRleHQoZWRpdG9yU3RhdGUsIHRleHQsIGlubGluZVN0eWxlLCBlbnRpdHlLZXkpIHtcbiAgdmFyIGNvbnRlbnRTdGF0ZSA9IERyYWZ0TW9kaWZpZXIucmVwbGFjZVRleHQoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCksIHRleHQsIGlubGluZVN0eWxlLCBlbnRpdHlLZXkpO1xuICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgY29udGVudFN0YXRlLCAnaW5zZXJ0LWNoYXJhY3RlcnMnKTtcbn1cblxuLyoqXG4gKiBXaGVuIGBvbkJlZm9yZUlucHV0YCBleGVjdXRlcywgdGhlIGJyb3dzZXIgaXMgYXR0ZW1wdGluZyB0byBpbnNlcnQgYVxuICogY2hhcmFjdGVyIGludG8gdGhlIGVkaXRvci4gQXBwbHkgdGhpcyBjaGFyYWN0ZXIgZGF0YSB0byB0aGUgZG9jdW1lbnQsXG4gKiBhbGxvd2luZyBuYXRpdmUgaW5zZXJ0aW9uIGlmIHBvc3NpYmxlLlxuICpcbiAqIE5hdGl2ZSBpbnNlcnRpb24gaXMgZW5jb3VyYWdlZCBpbiBvcmRlciB0byBsaW1pdCByZS1yZW5kZXJpbmcgYW5kIHRvXG4gKiBwcmVzZXJ2ZSBzcGVsbGNoZWNrIGhpZ2hsaWdodGluZywgd2hpY2ggZGlzYXBwZWFycyBvciBmbGFzaGVzIGlmIHJlLXJlbmRlclxuICogb2NjdXJzIG9uIHRoZSByZWxldmFudCB0ZXh0IG5vZGVzLlxuICovXG5mdW5jdGlvbiBlZGl0T25CZWZvcmVJbnB1dChlZGl0b3IsIGUpIHtcbiAgaWYgKGVkaXRvci5fcGVuZGluZ1N0YXRlRnJvbUJlZm9yZUlucHV0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBlZGl0b3IudXBkYXRlKGVkaXRvci5fcGVuZGluZ1N0YXRlRnJvbUJlZm9yZUlucHV0KTtcbiAgICBlZGl0b3IuX3BlbmRpbmdTdGF0ZUZyb21CZWZvcmVJbnB1dCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHZhciBlZGl0b3JTdGF0ZSA9IGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGU7XG5cbiAgdmFyIGNoYXJzID0gZS5kYXRhO1xuXG4gIC8vIEluIHNvbWUgY2FzZXMgKGV4OiBJRSBpZGVvZ3JhcGhpYyBzcGFjZSBpbnNlcnRpb24pIG5vIGNoYXJhY3RlciBkYXRhXG4gIC8vIGlzIHByb3ZpZGVkLiBUaGVyZSdzIG5vdGhpbmcgdG8gZG8gd2hlbiB0aGlzIGhhcHBlbnMuXG4gIGlmICghY2hhcnMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBBbGxvdyB0aGUgdG9wLWxldmVsIGNvbXBvbmVudCB0byBoYW5kbGUgdGhlIGluc2VydGlvbiBtYW51YWxseS4gVGhpcyBpc1xuICAvLyB1c2VmdWwgd2hlbiB0cmlnZ2VyaW5nIGludGVyZXN0aW5nIGJlaGF2aW9ycyBmb3IgYSBjaGFyYWN0ZXIgaW5zZXJ0aW9uLFxuICAvLyBTaW1wbGUgZXhhbXBsZXM6IHJlcGxhY2luZyBhIHJhdyB0ZXh0ICc6KScgd2l0aCBhIHNtaWxlIGVtb2ppIG9yIGltYWdlXG4gIC8vIGRlY29yYXRvciwgb3Igc2V0dGluZyBhIGJsb2NrIHRvIGJlIGEgbGlzdCBpdGVtIGFmdGVyIHR5cGluZyAnLSAnIGF0IHRoZVxuICAvLyBzdGFydCBvZiB0aGUgYmxvY2suXG4gIGlmIChlZGl0b3IucHJvcHMuaGFuZGxlQmVmb3JlSW5wdXQgJiYgaXNFdmVudEhhbmRsZWQoZWRpdG9yLnByb3BzLmhhbmRsZUJlZm9yZUlucHV0KGNoYXJzLCBlZGl0b3JTdGF0ZSkpKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIElmIHNlbGVjdGlvbiBpcyBjb2xsYXBzZWQsIGNvbmRpdGlvbmFsbHkgYWxsb3cgbmF0aXZlIGJlaGF2aW9yLiBUaGlzXG4gIC8vIHJlZHVjZXMgcmUtcmVuZGVycyBhbmQgcHJlc2VydmVzIHNwZWxsY2hlY2sgaGlnaGxpZ2h0aW5nLiBJZiB0aGUgc2VsZWN0aW9uXG4gIC8vIGlzIG5vdCBjb2xsYXBzZWQsIHdlIHdpbGwgcmUtcmVuZGVyLlxuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBzZWxlY3Rpb25TdGFydCA9IHNlbGVjdGlvbi5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgc2VsZWN0aW9uRW5kID0gc2VsZWN0aW9uLmdldEVuZE9mZnNldCgpO1xuICB2YXIgYW5jaG9yS2V5ID0gc2VsZWN0aW9uLmdldEFuY2hvcktleSgpO1xuXG4gIGlmICghc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAvLyBJZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHRleHQgbWF0Y2hlcyB3aGF0IHRoZSB1c2VyIGlzIHRyeWluZyB0b1xuICAgIC8vIHJlcGxhY2UgaXQgd2l0aCwgbGV0J3MganVzdCB1cGRhdGUgdGhlIGBTZWxlY3Rpb25TdGF0ZWAuIElmIG5vdCwgdXBkYXRlXG4gICAgLy8gdGhlIGBDb250ZW50U3RhdGVgIHdpdGggdGhlIG5ldyB0ZXh0LlxuICAgIHZhciBjdXJyZW50bHlTZWxlY3RlZENoYXJzID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKS5nZXRQbGFpblRleHQoKS5zbGljZShzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKTtcbiAgICBpZiAoY2hhcnMgPT09IGN1cnJlbnRseVNlbGVjdGVkQ2hhcnMpIHtcbiAgICAgIGVkaXRvci51cGRhdGUoRWRpdG9yU3RhdGUuZm9yY2VTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIHNlbGVjdGlvbi5tZXJnZSh7XG4gICAgICAgIGZvY3VzT2Zmc2V0OiBzZWxlY3Rpb25FbmRcbiAgICAgIH0pKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVkaXRvci51cGRhdGUocmVwbGFjZVRleHQoZWRpdG9yU3RhdGUsIGNoYXJzLCBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50SW5saW5lU3R5bGUoKSwgZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uKGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCksIGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpKSkpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbmV3RWRpdG9yU3RhdGUgPSByZXBsYWNlVGV4dChlZGl0b3JTdGF0ZSwgY2hhcnMsIGVkaXRvclN0YXRlLmdldEN1cnJlbnRJbmxpbmVTdHlsZSgpLCBnZXRFbnRpdHlLZXlGb3JTZWxlY3Rpb24oZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkpKTtcblxuICAvLyBCdW5jaCBvZiBkaWZmZXJlbnQgY2FzZXMgZm9sbG93IHdoZXJlIHdlIG5lZWQgdG8gcHJldmVudCBuYXRpdmUgaW5zZXJ0aW9uLlxuICB2YXIgbXVzdFByZXZlbnROYXRpdmUgPSBmYWxzZTtcbiAgaWYgKCFtdXN0UHJldmVudE5hdGl2ZSkge1xuICAgIC8vIEJyb3dzZXJzIHRlbmQgdG8gaW5zZXJ0IHRleHQgaW4gd2VpcmQgcGxhY2VzIGluIHRoZSBET00gd2hlbiB0eXBpbmcgYXRcbiAgICAvLyB0aGUgc3RhcnQgb2YgYSBsZWFmLCBzbyB3ZSdsbCBoYW5kbGUgaXQgb3Vyc2VsdmVzLlxuICAgIG11c3RQcmV2ZW50TmF0aXZlID0gaXNTZWxlY3Rpb25BdExlYWZTdGFydChlZGl0b3IuX2xhdGVzdENvbW1pdHRlZEVkaXRvclN0YXRlKTtcbiAgfVxuICBpZiAoIW11c3RQcmV2ZW50TmF0aXZlKSB7XG4gICAgLy8gQ2hyb21lIHdpbGwgYWxzbyBzcGxpdCB1cCBhIG5vZGUgaW50byB0d28gcGllY2VzIGlmIGl0IGNvbnRhaW5zIGEgVGFiXG4gICAgLy8gY2hhciwgZm9yIG5vIGV4cGxpY2FibGUgcmVhc29uLiBTZWVtaW5nbHkgY2F1c2VkIGJ5IHRoaXMgY29tbWl0OlxuICAgIC8vIGh0dHBzOi8vY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9jaHJvbWl1bS9zcmMvKy8wMTNhYzVlYWYzJTVFJTIxL1xuICAgIHZhciBuYXRpdmVTZWxlY3Rpb24gPSBnbG9iYWwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgLy8gU2VsZWN0aW9uIGlzIG5lY2Vzc2FyaWx5IGNvbGxhcHNlZCBhdCB0aGlzIHBvaW50IGR1ZSB0byBlYXJsaWVyIGNoZWNrLlxuICAgIGlmIChuYXRpdmVTZWxlY3Rpb24uYW5jaG9yTm9kZSAmJiBuYXRpdmVTZWxlY3Rpb24uYW5jaG9yTm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgIC8vIFNlZSBpc1RhYkhUTUxTcGFuRWxlbWVudCBpbiBjaHJvbWl1bSBFZGl0aW5nVXRpbGl0aWVzLmNwcC5cbiAgICAgIHZhciBwYXJlbnROb2RlID0gbmF0aXZlU2VsZWN0aW9uLmFuY2hvck5vZGUucGFyZW50Tm9kZTtcbiAgICAgIG11c3RQcmV2ZW50TmF0aXZlID0gcGFyZW50Tm9kZS5ub2RlTmFtZSA9PT0gJ1NQQU4nICYmIHBhcmVudE5vZGUuZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUgJiYgcGFyZW50Tm9kZS5maXJzdENoaWxkLm5vZGVWYWx1ZS5pbmRleE9mKCdcXHQnKSAhPT0gLTE7XG4gICAgfVxuICB9XG4gIGlmICghbXVzdFByZXZlbnROYXRpdmUpIHtcbiAgICAvLyBDaGVjayB0aGUgb2xkIGFuZCBuZXcgXCJmaW5nZXJwcmludHNcIiBvZiB0aGUgY3VycmVudCBibG9jayB0byBkZXRlcm1pbmVcbiAgICAvLyB3aGV0aGVyIHRoaXMgaW5zZXJ0aW9uIHJlcXVpcmVzIGFueSBhZGRpdGlvbiBvciByZW1vdmFsIG9mIHRleHQgbm9kZXMsXG4gICAgLy8gaW4gd2hpY2ggY2FzZSB3ZSB3b3VsZCBwcmV2ZW50IHRoZSBuYXRpdmUgY2hhcmFjdGVyIGluc2VydGlvbi5cbiAgICB2YXIgb3JpZ2luYWxGaW5nZXJwcmludCA9IEJsb2NrVHJlZS5nZXRGaW5nZXJwcmludChlZGl0b3JTdGF0ZS5nZXRCbG9ja1RyZWUoYW5jaG9yS2V5KSk7XG4gICAgdmFyIG5ld0ZpbmdlcnByaW50ID0gQmxvY2tUcmVlLmdldEZpbmdlcnByaW50KG5ld0VkaXRvclN0YXRlLmdldEJsb2NrVHJlZShhbmNob3JLZXkpKTtcbiAgICBtdXN0UHJldmVudE5hdGl2ZSA9IG9yaWdpbmFsRmluZ2VycHJpbnQgIT09IG5ld0ZpbmdlcnByaW50O1xuICB9XG4gIGlmICghbXVzdFByZXZlbnROYXRpdmUpIHtcbiAgICBtdXN0UHJldmVudE5hdGl2ZSA9IG11c3RQcmV2ZW50RGVmYXVsdEZvckNoYXJhY3RlcihjaGFycyk7XG4gIH1cbiAgaWYgKCFtdXN0UHJldmVudE5hdGl2ZSkge1xuICAgIG11c3RQcmV2ZW50TmF0aXZlID0gbnVsbHRocm93cyhuZXdFZGl0b3JTdGF0ZS5nZXREaXJlY3Rpb25NYXAoKSkuZ2V0KGFuY2hvcktleSkgIT09IG51bGx0aHJvd3MoZWRpdG9yU3RhdGUuZ2V0RGlyZWN0aW9uTWFwKCkpLmdldChhbmNob3JLZXkpO1xuICB9XG5cbiAgaWYgKG11c3RQcmV2ZW50TmF0aXZlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGVkaXRvci51cGRhdGUobmV3RWRpdG9yU3RhdGUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFdlIG1hZGUgaXQgYWxsIHRoZSB3YXkhIExldCB0aGUgYnJvd3NlciBkbyBpdHMgdGhpbmcgYW5kIGluc2VydCB0aGUgY2hhci5cbiAgbmV3RWRpdG9yU3RhdGUgPSBFZGl0b3JTdGF0ZS5zZXQobmV3RWRpdG9yU3RhdGUsIHtcbiAgICBuYXRpdmVseVJlbmRlcmVkQ29udGVudDogbmV3RWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKVxuICB9KTtcbiAgLy8gVGhlIG5hdGl2ZSBldmVudCBpcyBhbGxvd2VkIHRvIG9jY3VyLiBUbyBhbGxvdyB1c2VyIG9uQ2hhbmdlIGhhbmRsZXJzIHRvXG4gIC8vIGNoYW5nZSB0aGUgaW5zZXJ0ZWQgdGV4dCwgd2Ugd2FpdCB1bnRpbCB0aGUgdGV4dCBpcyBhY3R1YWxseSBpbnNlcnRlZFxuICAvLyBiZWZvcmUgd2UgYWN0dWFsbHkgdXBkYXRlIG91ciBzdGF0ZS4gVGhhdCB3YXkgd2hlbiB3ZSByZXJlbmRlciwgdGhlIHRleHRcbiAgLy8gd2Ugc2VlIGluIHRoZSBET00gd2lsbCBhbHJlYWR5IGhhdmUgYmVlbiBpbnNlcnRlZCBwcm9wZXJseS5cbiAgZWRpdG9yLl9wZW5kaW5nU3RhdGVGcm9tQmVmb3JlSW5wdXQgPSBuZXdFZGl0b3JTdGF0ZTtcbiAgc2V0SW1tZWRpYXRlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWRpdG9yLl9wZW5kaW5nU3RhdGVGcm9tQmVmb3JlSW5wdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZWRpdG9yLnVwZGF0ZShlZGl0b3IuX3BlbmRpbmdTdGF0ZUZyb21CZWZvcmVJbnB1dCk7XG4gICAgICBlZGl0b3IuX3BlbmRpbmdTdGF0ZUZyb21CZWZvcmVJbnB1dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRPbkJlZm9yZUlucHV0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRHJhZnRFZGl0b3JFZGl0SGFuZGxlclxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgb25CZWZvcmVJbnB1dCA9IHJlcXVpcmUoJy4vZWRpdE9uQmVmb3JlSW5wdXQnKTtcbnZhciBvbkJsdXIgPSByZXF1aXJlKCcuL2VkaXRPbkJsdXInKTtcbnZhciBvbkNvbXBvc2l0aW9uU3RhcnQgPSByZXF1aXJlKCcuL2VkaXRPbkNvbXBvc2l0aW9uU3RhcnQnKTtcbnZhciBvbkNvcHkgPSByZXF1aXJlKCcuL2VkaXRPbkNvcHknKTtcbnZhciBvbkN1dCA9IHJlcXVpcmUoJy4vZWRpdE9uQ3V0Jyk7XG52YXIgb25EcmFnT3ZlciA9IHJlcXVpcmUoJy4vZWRpdE9uRHJhZ092ZXInKTtcbnZhciBvbkRyYWdTdGFydCA9IHJlcXVpcmUoJy4vZWRpdE9uRHJhZ1N0YXJ0Jyk7XG52YXIgb25Gb2N1cyA9IHJlcXVpcmUoJy4vZWRpdE9uRm9jdXMnKTtcbnZhciBvbklucHV0ID0gcmVxdWlyZSgnLi9lZGl0T25JbnB1dCcpO1xudmFyIG9uS2V5RG93biA9IHJlcXVpcmUoJy4vZWRpdE9uS2V5RG93bicpO1xudmFyIG9uUGFzdGUgPSByZXF1aXJlKCcuL2VkaXRPblBhc3RlJyk7XG52YXIgb25TZWxlY3QgPSByZXF1aXJlKCcuL2VkaXRPblNlbGVjdCcpO1xuXG52YXIgRHJhZnRFZGl0b3JFZGl0SGFuZGxlciA9IHtcbiAgb25CZWZvcmVJbnB1dDogb25CZWZvcmVJbnB1dCxcbiAgb25CbHVyOiBvbkJsdXIsXG4gIG9uQ29tcG9zaXRpb25TdGFydDogb25Db21wb3NpdGlvblN0YXJ0LFxuICBvbkNvcHk6IG9uQ29weSxcbiAgb25DdXQ6IG9uQ3V0LFxuICBvbkRyYWdPdmVyOiBvbkRyYWdPdmVyLFxuICBvbkRyYWdTdGFydDogb25EcmFnU3RhcnQsXG4gIG9uRm9jdXM6IG9uRm9jdXMsXG4gIG9uSW5wdXQ6IG9uSW5wdXQsXG4gIG9uS2V5RG93bjogb25LZXlEb3duLFxuICBvblBhc3RlOiBvblBhc3RlLFxuICBvblNlbGVjdDogb25TZWxlY3Rcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRFZGl0b3JFZGl0SGFuZGxlcjsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBDb252ZXJ0IGFycmF5LWxpa2Ugb2JqZWN0cyB0byBhcnJheXMuXG4gKlxuICogVGhpcyBBUEkgYXNzdW1lcyB0aGUgY2FsbGVyIGtub3dzIHRoZSBjb250ZW50cyBvZiB0aGUgZGF0YSB0eXBlLiBGb3IgbGVzc1xuICogd2VsbCBkZWZpbmVkIGlucHV0cyB1c2UgY3JlYXRlQXJyYXlGcm9tTWl4ZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb258ZmlsZWxpc3R9IG9ialxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG4gIHZhciBsZW5ndGggPSBvYmoubGVuZ3RoO1xuXG4gIC8vIFNvbWUgYnJvd3NlcnMgYnVpbHRpbiBvYmplY3RzIGNhbiByZXBvcnQgdHlwZW9mICdmdW5jdGlvbicgKGUuZy4gTm9kZUxpc3RcbiAgLy8gaW4gb2xkIHZlcnNpb25zIG9mIFNhZmFyaSkuXG4gICEoIUFycmF5LmlzQXJyYXkob2JqKSAmJiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RvQXJyYXk6IEFycmF5LWxpa2Ugb2JqZWN0IGV4cGVjdGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICEodHlwZW9mIGxlbmd0aCA9PT0gJ251bWJlcicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RvQXJyYXk6IE9iamVjdCBuZWVkcyBhIGxlbmd0aCBwcm9wZXJ0eScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAhKGxlbmd0aCA9PT0gMCB8fCBsZW5ndGggLSAxIGluIG9iaikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogT2JqZWN0IHNob3VsZCBoYXZlIGtleXMgZm9yIGluZGljZXMnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgISh0eXBlb2Ygb2JqLmNhbGxlZSAhPT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogT2JqZWN0IGNhblxcJ3QgYmUgYGFyZ3VtZW50c2AuIFVzZSByZXN0IHBhcmFtcyAnICsgJyhmdW5jdGlvbiguLi5hcmdzKSB7fSkgb3IgQXJyYXkuZnJvbSgpIGluc3RlYWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIC8vIE9sZCBJRSBkb2Vzbid0IGdpdmUgY29sbGVjdGlvbnMgYWNjZXNzIHRvIGhhc093blByb3BlcnR5LiBBc3N1bWUgaW5wdXRzXG4gIC8vIHdpdGhvdXQgbWV0aG9kIHdpbGwgdGhyb3cgZHVyaW5nIHRoZSBzbGljZSBjYWxsIGFuZCBza2lwIHN0cmFpZ2h0IHRvIHRoZVxuICAvLyBmYWxsYmFjay5cbiAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJRSA8IDkgZG9lcyBub3Qgc3VwcG9ydCBBcnJheSNzbGljZSBvbiBjb2xsZWN0aW9ucyBvYmplY3RzXG4gICAgfVxuICB9XG5cbiAgLy8gRmFsbCBiYWNrIHRvIGNvcHlpbmcga2V5IGJ5IGtleS4gVGhpcyBhc3N1bWVzIGFsbCBrZXlzIGhhdmUgYSB2YWx1ZSxcbiAgLy8gc28gd2lsbCBub3QgcHJlc2VydmUgc3BhcnNlbHkgcG9wdWxhdGVkIGlucHV0cy5cbiAgdmFyIHJldCA9IEFycmF5KGxlbmd0aCk7XG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCBsZW5ndGg7IGlpKyspIHtcbiAgICByZXRbaWldID0gb2JqW2lpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIFBlcmZvcm0gYSBoZXVyaXN0aWMgdGVzdCB0byBkZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIFwiYXJyYXktbGlrZVwiLlxuICpcbiAqICAgQSBtb25rIGFza2VkIEpvc2h1LCBhIFplbiBtYXN0ZXIsIFwiSGFzIGEgZG9nIEJ1ZGRoYSBuYXR1cmU/XCJcbiAqICAgSm9zaHUgcmVwbGllZDogXCJNdS5cIlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZGV0ZXJtaW5lcyBpZiBpdHMgYXJndW1lbnQgaGFzIFwiYXJyYXkgbmF0dXJlXCI6IGl0IHJldHVybnNcbiAqIHRydWUgaWYgdGhlIGFyZ3VtZW50IGlzIGFuIGFjdHVhbCBhcnJheSwgYW4gYGFyZ3VtZW50cycgb2JqZWN0LCBvciBhblxuICogSFRNTENvbGxlY3Rpb24gKGUuZy4gbm9kZS5jaGlsZE5vZGVzIG9yIG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSkuXG4gKlxuICogSXQgd2lsbCByZXR1cm4gZmFsc2UgZm9yIG90aGVyIGFycmF5LWxpa2Ugb2JqZWN0cyBsaWtlIEZpbGVsaXN0LlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBoYXNBcnJheU5hdHVyZShvYmopIHtcbiAgcmV0dXJuIChcbiAgICAvLyBub3QgbnVsbC9mYWxzZVxuICAgICEhb2JqICYmIChcbiAgICAvLyBhcnJheXMgYXJlIG9iamVjdHMsIE5vZGVMaXN0cyBhcmUgZnVuY3Rpb25zIGluIFNhZmFyaVxuICAgIHR5cGVvZiBvYmogPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nKSAmJlxuICAgIC8vIHF1YWNrcyBsaWtlIGFuIGFycmF5XG4gICAgJ2xlbmd0aCcgaW4gb2JqICYmXG4gICAgLy8gbm90IHdpbmRvd1xuICAgICEoJ3NldEludGVydmFsJyBpbiBvYmopICYmXG4gICAgLy8gbm8gRE9NIG5vZGUgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYW4gYXJyYXktbGlrZVxuICAgIC8vIGEgJ3NlbGVjdCcgZWxlbWVudCBoYXMgJ2xlbmd0aCcgYW5kICdpdGVtJyBwcm9wZXJ0aWVzIG9uIElFOFxuICAgIHR5cGVvZiBvYmoubm9kZVR5cGUgIT0gJ251bWJlcicgJiYgKFxuICAgIC8vIGEgcmVhbCBhcnJheVxuICAgIEFycmF5LmlzQXJyYXkob2JqKSB8fFxuICAgIC8vIGFyZ3VtZW50c1xuICAgICdjYWxsZWUnIGluIG9iaiB8fFxuICAgIC8vIEhUTUxDb2xsZWN0aW9uL05vZGVMaXN0XG4gICAgJ2l0ZW0nIGluIG9iailcbiAgKTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgdGhhdCB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXkgYnkgd3JhcHBpbmcgaXQgaW4gYW4gYXJyYXkgaWYgaXQgaXMgbm90LlxuICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhlIGFyZ3VtZW50IGlmIGl0IGlzIGFscmVhZHkgYW4gYXJyYXkuXG4gKlxuICogVGhpcyBpcyBtb3N0bHkgdXNlZnVsIGlkaW9tYXRpY2FsbHk6XG4gKlxuICogICB2YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKCdjcmVhdGVBcnJheUZyb21NaXhlZCcpO1xuICpcbiAqICAgZnVuY3Rpb24gdGFrZXNPbmVPck1vcmVUaGluZ3ModGhpbmdzKSB7XG4gKiAgICAgdGhpbmdzID0gY3JlYXRlQXJyYXlGcm9tTWl4ZWQodGhpbmdzKTtcbiAqICAgICAuLi5cbiAqICAgfVxuICpcbiAqIFRoaXMgYWxsb3dzIHlvdSB0byB0cmVhdCBgdGhpbmdzJyBhcyBhbiBhcnJheSwgYnV0IGFjY2VwdCBzY2FsYXJzIGluIHRoZSBBUEkuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gY29udmVydCBhbiBhcnJheS1saWtlIG9iamVjdCwgbGlrZSBgYXJndW1lbnRzYCwgaW50byBhbiBhcnJheVxuICogdXNlIHRvQXJyYXkgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5RnJvbU1peGVkKG9iaikge1xuICBpZiAoIWhhc0FycmF5TmF0dXJlKG9iaikpIHtcbiAgICByZXR1cm4gW29ial07XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5zbGljZSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b0FycmF5KG9iaik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBcnJheUZyb21NaXhlZDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG52YXIgUGhvdG9zTWltZVR5cGUgPSB7XG4gIGlzSW1hZ2U6IGZ1bmN0aW9uIGlzSW1hZ2UobWltZVN0cmluZykge1xuICAgIHJldHVybiBnZXRQYXJ0cyhtaW1lU3RyaW5nKVswXSA9PT0gJ2ltYWdlJztcbiAgfSxcbiAgaXNKcGVnOiBmdW5jdGlvbiBpc0pwZWcobWltZVN0cmluZykge1xuICAgIHZhciBwYXJ0cyA9IGdldFBhcnRzKG1pbWVTdHJpbmcpO1xuICAgIHJldHVybiBQaG90b3NNaW1lVHlwZS5pc0ltYWdlKG1pbWVTdHJpbmcpICYmIChcbiAgICAvLyBzZWUgaHR0cDovL2ZidXJsLmNvbS8xMDk3MjE5NFxuICAgIHBhcnRzWzFdID09PSAnanBlZycgfHwgcGFydHNbMV0gPT09ICdwanBlZycpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRQYXJ0cyhtaW1lU3RyaW5nKSB7XG4gIHJldHVybiBtaW1lU3RyaW5nLnNwbGl0KCcvJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGhvdG9zTWltZVR5cGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdEVkaXRvckRyYWdIYW5kbGVyXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEYXRhVHJhbnNmZXIgPSByZXF1aXJlKCdmYmpzL2xpYi9EYXRhVHJhbnNmZXInKTtcbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZSgnLi9EcmFmdE1vZGlmaWVyJyk7XG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG5cbnZhciBmaW5kQW5jZXN0b3JPZmZzZXRLZXkgPSByZXF1aXJlKCcuL2ZpbmRBbmNlc3Rvck9mZnNldEtleScpO1xudmFyIGdldFRleHRDb250ZW50RnJvbUZpbGVzID0gcmVxdWlyZSgnLi9nZXRUZXh0Q29udGVudEZyb21GaWxlcycpO1xudmFyIGdldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSA9IHJlcXVpcmUoJy4vZ2V0VXBkYXRlZFNlbGVjdGlvblN0YXRlJyk7XG52YXIgaXNFdmVudEhhbmRsZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRIYW5kbGVkJyk7XG52YXIgbnVsbHRocm93cyA9IHJlcXVpcmUoJ2ZianMvbGliL251bGx0aHJvd3MnKTtcblxuLyoqXG4gKiBHZXQgYSBTZWxlY3Rpb25TdGF0ZSBmb3IgdGhlIHN1cHBsaWVkIG1vdXNlIGV2ZW50LlxuICovXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb25Gb3JFdmVudChldmVudCwgZWRpdG9yU3RhdGUpIHtcbiAgdmFyIG5vZGUgPSBudWxsO1xuICB2YXIgb2Zmc2V0ID0gbnVsbDtcblxuICBpZiAodHlwZW9mIGRvY3VtZW50LmNhcmV0UmFuZ2VGcm9tUG9pbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZHJvcFJhbmdlID0gZG9jdW1lbnQuY2FyZXRSYW5nZUZyb21Qb2ludChldmVudC54LCBldmVudC55KTtcbiAgICBub2RlID0gZHJvcFJhbmdlLnN0YXJ0Q29udGFpbmVyO1xuICAgIG9mZnNldCA9IGRyb3BSYW5nZS5zdGFydE9mZnNldDtcbiAgfSBlbHNlIGlmIChldmVudC5yYW5nZVBhcmVudCkge1xuICAgIG5vZGUgPSBldmVudC5yYW5nZVBhcmVudDtcbiAgICBvZmZzZXQgPSBldmVudC5yYW5nZU9mZnNldDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG5vZGUgPSBudWxsdGhyb3dzKG5vZGUpO1xuICBvZmZzZXQgPSBudWxsdGhyb3dzKG9mZnNldCk7XG4gIHZhciBvZmZzZXRLZXkgPSBudWxsdGhyb3dzKGZpbmRBbmNlc3Rvck9mZnNldEtleShub2RlKSk7XG5cbiAgcmV0dXJuIGdldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZShlZGl0b3JTdGF0ZSwgb2Zmc2V0S2V5LCBvZmZzZXQsIG9mZnNldEtleSwgb2Zmc2V0KTtcbn1cblxudmFyIERyYWZ0RWRpdG9yRHJhZ0hhbmRsZXIgPSB7XG4gIC8qKlxuICAgKiBEcmFnIG9yaWdpbmF0aW5nIGZyb20gaW5wdXQgdGVybWluYXRlZC5cbiAgICovXG4gIG9uRHJhZ0VuZDogZnVuY3Rpb24gb25EcmFnRW5kKGVkaXRvcikge1xuICAgIGVkaXRvci5leGl0Q3VycmVudE1vZGUoKTtcbiAgfSxcblxuICAvKipcbiAgICogSGFuZGxlIGRhdGEgYmVpbmcgZHJvcHBlZC5cbiAgICovXG4gIG9uRHJvcDogZnVuY3Rpb24gb25Ecm9wKGVkaXRvciwgZSkge1xuICAgIHZhciBkYXRhID0gbmV3IERhdGFUcmFuc2ZlcihlLm5hdGl2ZUV2ZW50LmRhdGFUcmFuc2Zlcik7XG5cbiAgICB2YXIgZWRpdG9yU3RhdGUgPSBlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlO1xuICAgIHZhciBkcm9wU2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uRm9yRXZlbnQoZS5uYXRpdmVFdmVudCwgZWRpdG9yU3RhdGUpO1xuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGVkaXRvci5leGl0Q3VycmVudE1vZGUoKTtcblxuICAgIGlmIChkcm9wU2VsZWN0aW9uID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZmlsZXMgPSBkYXRhLmdldEZpbGVzKCk7XG4gICAgaWYgKGZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChlZGl0b3IucHJvcHMuaGFuZGxlRHJvcHBlZEZpbGVzICYmIGlzRXZlbnRIYW5kbGVkKGVkaXRvci5wcm9wcy5oYW5kbGVEcm9wcGVkRmlsZXMoZHJvcFNlbGVjdGlvbiwgZmlsZXMpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGdldFRleHRDb250ZW50RnJvbUZpbGVzKGZpbGVzLCBmdW5jdGlvbiAoZmlsZVRleHQpIHtcbiAgICAgICAgZmlsZVRleHQgJiYgZWRpdG9yLnVwZGF0ZShpbnNlcnRUZXh0QXRTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIGRyb3BTZWxlY3Rpb24sIGZpbGVUZXh0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZHJhZ1R5cGUgPSBlZGl0b3IuX2ludGVybmFsRHJhZyA/ICdpbnRlcm5hbCcgOiAnZXh0ZXJuYWwnO1xuICAgIGlmIChlZGl0b3IucHJvcHMuaGFuZGxlRHJvcCAmJiBpc0V2ZW50SGFuZGxlZChlZGl0b3IucHJvcHMuaGFuZGxlRHJvcChkcm9wU2VsZWN0aW9uLCBkYXRhLCBkcmFnVHlwZSkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVkaXRvci5faW50ZXJuYWxEcmFnKSB7XG4gICAgICBlZGl0b3IudXBkYXRlKG1vdmVUZXh0KGVkaXRvclN0YXRlLCBkcm9wU2VsZWN0aW9uKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZWRpdG9yLnVwZGF0ZShpbnNlcnRUZXh0QXRTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIGRyb3BTZWxlY3Rpb24sIGRhdGEuZ2V0VGV4dCgpKSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1vdmVUZXh0KGVkaXRvclN0YXRlLCB0YXJnZXRTZWxlY3Rpb24pIHtcbiAgdmFyIG5ld0NvbnRlbnRTdGF0ZSA9IERyYWZ0TW9kaWZpZXIubW92ZVRleHQoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCksIHRhcmdldFNlbGVjdGlvbik7XG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBuZXdDb250ZW50U3RhdGUsICdpbnNlcnQtZnJhZ21lbnQnKTtcbn1cblxuLyoqXG4gKiBJbnNlcnQgdGV4dCBhdCBhIHNwZWNpZmllZCBzZWxlY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGluc2VydFRleHRBdFNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgc2VsZWN0aW9uLCB0ZXh0KSB7XG4gIHZhciBuZXdDb250ZW50U3RhdGUgPSBEcmFmdE1vZGlmaWVyLmluc2VydFRleHQoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgc2VsZWN0aW9uLCB0ZXh0LCBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50SW5saW5lU3R5bGUoKSk7XG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBuZXdDb250ZW50U3RhdGUsICdpbnNlcnQtZnJhZ21lbnQnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVkaXRvckRyYWdIYW5kbGVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29tYmluZXMgbXVsdGlwbGUgY2xhc3NOYW1lIHN0cmluZ3MgaW50byBvbmUuXG4gKiBodHRwOi8vanNwZXJmLmNvbS9qb2luY2xhc3Nlcy1hcmdzLXZzLWFycmF5XG4gKlxuICogQHBhcmFtIHsuLi4/c3RyaW5nfSBjbGFzc05hbWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBqb2luQ2xhc3NlcyhjbGFzc05hbWUgLyosIC4uLiAqLykge1xuICBpZiAoIWNsYXNzTmFtZSkge1xuICAgIGNsYXNzTmFtZSA9ICcnO1xuICB9XG4gIHZhciBuZXh0Q2xhc3MgPSB2b2lkIDA7XG4gIHZhciBhcmdMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICBpZiAoYXJnTGVuZ3RoID4gMSkge1xuICAgIGZvciAodmFyIGlpID0gMTsgaWkgPCBhcmdMZW5ndGg7IGlpKyspIHtcbiAgICAgIG5leHRDbGFzcyA9IGFyZ3VtZW50c1tpaV07XG4gICAgICBpZiAobmV4dENsYXNzKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IChjbGFzc05hbWUgPyBjbGFzc05hbWUgKyAnICcgOiAnJykgKyBuZXh0Q2xhc3M7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjbGFzc05hbWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gam9pbkNsYXNzZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0V2lkdGgoKSB7XG4gIHZhciB3aWR0aCA9IHZvaWQgMDtcbiAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHdpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICB9XG5cbiAgaWYgKCF3aWR0aCAmJiBkb2N1bWVudC5ib2R5KSB7XG4gICAgd2lkdGggPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIHdpZHRoIHx8IDA7XG59IC8qKlxuICAgKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAgICpcbiAgICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gICAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAgICpcbiAgICogXG4gICAqIEB0eXBlY2hlY2tzXG4gICAqL1xuXG5mdW5jdGlvbiBnZXRWaWV3cG9ydEhlaWdodCgpIHtcbiAgdmFyIGhlaWdodCA9IHZvaWQgMDtcbiAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIGhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIH1cblxuICBpZiAoIWhlaWdodCAmJiBkb2N1bWVudC5ib2R5KSB7XG4gICAgaGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQ7XG4gIH1cblxuICByZXR1cm4gaGVpZ2h0IHx8IDA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmlld3BvcnQgZGltZW5zaW9ucyBpbmNsdWRpbmcgYW55IHNjcm9sbGJhcnMuXG4gKi9cbmZ1bmN0aW9uIGdldFZpZXdwb3J0RGltZW5zaW9ucygpIHtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGggfHwgZ2V0Vmlld3BvcnRXaWR0aCgpLFxuICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0IHx8IGdldFZpZXdwb3J0SGVpZ2h0KClcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2aWV3cG9ydCBkaW1lbnNpb25zIGV4Y2x1ZGluZyBhbnkgc2Nyb2xsYmFycy5cbiAqL1xuZ2V0Vmlld3BvcnREaW1lbnNpb25zLndpdGhvdXRTY3JvbGxiYXJzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiBnZXRWaWV3cG9ydFdpZHRoKCksXG4gICAgaGVpZ2h0OiBnZXRWaWV3cG9ydEhlaWdodCgpXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZpZXdwb3J0RGltZW5zaW9uczsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgc3VwcGxpZWQgZWxlbWVudCBvciB3aW5kb3cuXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZXMgYXJlIHVuYm91bmRlZCwgdW5saWtlIGBnZXRTY3JvbGxQb3NpdGlvbmAuIFRoaXMgbWVhbnMgdGhleVxuICogbWF5IGJlIG5lZ2F0aXZlIG9yIGV4Y2VlZCB0aGUgZWxlbWVudCBib3VuZGFyaWVzICh3aGljaCBpcyBwb3NzaWJsZSB1c2luZ1xuICogaW5lcnRpYWwgc2Nyb2xsaW5nKS5cbiAqXG4gKiBAcGFyYW0ge0RPTVdpbmRvd3xET01FbGVtZW50fSBzY3JvbGxhYmxlXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcCB3aXRoIGB4YCBhbmQgYHlgIGtleXMuXG4gKi9cblxuZnVuY3Rpb24gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24oc2Nyb2xsYWJsZSkge1xuICBpZiAoc2Nyb2xsYWJsZS5XaW5kb3cgJiYgc2Nyb2xsYWJsZSBpbnN0YW5jZW9mIHNjcm9sbGFibGUuV2luZG93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHNjcm9sbGFibGUucGFnZVhPZmZzZXQgfHwgc2Nyb2xsYWJsZS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICAgIHk6IHNjcm9sbGFibGUucGFnZVlPZmZzZXQgfHwgc2Nyb2xsYWJsZS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHg6IHNjcm9sbGFibGUuc2Nyb2xsTGVmdCxcbiAgICB5OiBzY3JvbGxhYmxlLnNjcm9sbFRvcFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc1dlYmtpdCA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQXBwbGVXZWJLaXQnKSA+IC0xO1xuXG4vKipcbiAqIEdldHMgdGhlIGVsZW1lbnQgd2l0aCB0aGUgZG9jdW1lbnQgc2Nyb2xsIHByb3BlcnRpZXMgc3VjaCBhcyBgc2Nyb2xsTGVmdGAgYW5kXG4gKiBgc2Nyb2xsSGVpZ2h0YC4gVGhpcyBtYXkgZGlmZmVyIGFjcm9zcyBkaWZmZXJlbnQgYnJvd3NlcnMuXG4gKlxuICogTk9URTogVGhlIHJldHVybiB2YWx1ZSBjYW4gYmUgbnVsbCBpZiB0aGUgRE9NIGlzIG5vdCB5ZXQgcmVhZHkuXG4gKlxuICogQHBhcmFtIHs/RE9NRG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldERvY3VtZW50U2Nyb2xsRWxlbWVudChkb2MpIHtcbiAgZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuICBpZiAoZG9jLnNjcm9sbGluZ0VsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jLnNjcm9sbGluZ0VsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuICFpc1dlYmtpdCAmJiBkb2MuY29tcGF0TW9kZSA9PT0gJ0NTUzFDb21wYXQnID8gZG9jLmRvY3VtZW50RWxlbWVudCA6IGRvYy5ib2R5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldERvY3VtZW50U2Nyb2xsRWxlbWVudDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgY29udGFpbnNOb2RlID0gcmVxdWlyZSgnLi9jb250YWluc05vZGUnKTtcblxuLyoqXG4gKiBHZXRzIGFuIGVsZW1lbnQncyBib3VuZGluZyByZWN0IGluIHBpeGVscyByZWxhdGl2ZSB0byB0aGUgdmlld3BvcnQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldEVsZW1lbnRSZWN0KGVsZW0pIHtcbiAgdmFyIGRvY0VsZW0gPSBlbGVtLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4gIC8vIEZGIDIsIFNhZmFyaSAzIGFuZCBPcGVyYSA5LjUtIGRvIG5vdCBzdXBwb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLlxuICAvLyBJRTktIHdpbGwgdGhyb3cgaWYgdGhlIGVsZW1lbnQgaXMgbm90IGluIHRoZSBkb2N1bWVudC5cbiAgaWYgKCEoJ2dldEJvdW5kaW5nQ2xpZW50UmVjdCcgaW4gZWxlbSkgfHwgIWNvbnRhaW5zTm9kZShkb2NFbGVtLCBlbGVtKSkge1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBib3R0b206IDBcbiAgICB9O1xuICB9XG5cbiAgLy8gU3VidHJhY3RzIGNsaWVudFRvcC9MZWZ0IGJlY2F1c2UgSUU4LSBhZGRlZCBhIDJweCBib3JkZXIgdG8gdGhlXG4gIC8vIDxodG1sPiBlbGVtZW50IChzZWUgaHR0cDovL2ZidXJsLmNvbS8xNDkzMjEzKS4gSUUgNyBpblxuICAvLyBRdWlja3Ntb2RlIGRvZXMgbm90IHJlcG9ydCBjbGllbnRMZWZ0L2NsaWVudFRvcCBzbyB0aGVyZVxuICAvLyB3aWxsIGJlIGFuIHVuYWNjb3VudGVkIG9mZnNldCBvZiAycHggd2hlbiBpbiBxdWlya3Ntb2RlXG4gIHZhciByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICByZXR1cm4ge1xuICAgIGxlZnQ6IE1hdGgucm91bmQocmVjdC5sZWZ0KSAtIGRvY0VsZW0uY2xpZW50TGVmdCxcbiAgICByaWdodDogTWF0aC5yb3VuZChyZWN0LnJpZ2h0KSAtIGRvY0VsZW0uY2xpZW50TGVmdCxcbiAgICB0b3A6IE1hdGgucm91bmQocmVjdC50b3ApIC0gZG9jRWxlbS5jbGllbnRUb3AsXG4gICAgYm90dG9tOiBNYXRoLnJvdW5kKHJlY3QuYm90dG9tKSAtIGRvY0VsZW0uY2xpZW50VG9wXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RWxlbWVudFJlY3Q7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGdldEVsZW1lbnRSZWN0ID0gcmVxdWlyZSgnLi9nZXRFbGVtZW50UmVjdCcpO1xuXG4vKipcbiAqIEdldHMgYW4gZWxlbWVudCdzIHBvc2l0aW9uIGluIHBpeGVscyByZWxhdGl2ZSB0byB0aGUgdmlld3BvcnQuIFRoZSByZXR1cm5lZFxuICogb2JqZWN0IHJlcHJlc2VudHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50J3MgdG9wIGxlZnQgY29ybmVyLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRFbGVtZW50UG9zaXRpb24oZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGdldEVsZW1lbnRSZWN0KGVsZW1lbnQpO1xuICByZXR1cm4ge1xuICAgIHg6IHJlY3QubGVmdCxcbiAgICB5OiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3BcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFbGVtZW50UG9zaXRpb247IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIF91cHBlcmNhc2VQYXR0ZXJuID0gLyhbQS1aXSkvZztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBzdHJpbmcsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBoeXBoZW5hdGUoJ2JhY2tncm91bmRDb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcbiAqXG4gKiBGb3IgQ1NTIHN0eWxlIG5hbWVzLCB1c2UgYGh5cGhlbmF0ZVN0eWxlTmFtZWAgaW5zdGVhZCB3aGljaCB3b3JrcyBwcm9wZXJseVxuICogd2l0aCBhbGwgdmVuZG9yIHByZWZpeGVzLCBpbmNsdWRpbmcgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKF91cHBlcmNhc2VQYXR0ZXJuLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgX2h5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuXG4vKipcbiAqIENhbWVsY2FzZXMgYSBoeXBoZW5hdGVkIHN0cmluZywgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGNhbWVsaXplKCdiYWNrZ3JvdW5kLWNvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmRDb2xvclwiXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKF9oeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoXywgY2hhcmFjdGVyKSB7XG4gICAgcmV0dXJuIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgY2FtZWxpemUgPSByZXF1aXJlKCcuL2NhbWVsaXplJyk7XG52YXIgaHlwaGVuYXRlID0gcmVxdWlyZSgnLi9oeXBoZW5hdGUnKTtcblxuZnVuY3Rpb24gYXNTdHJpbmcodmFsdWUpIC8qP3N0cmluZyove1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZhbHVlIDogU3RyaW5nKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGVQcm9wZXJ0eSggLypET01Ob2RlKi9ub2RlLCAvKnN0cmluZyovbmFtZSkgLyo/c3RyaW5nKi97XG4gIHZhciBjb21wdXRlZFN0eWxlID0gdm9pZCAwO1xuXG4gIC8vIFczQyBTdGFuZGFyZFxuICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICAvLyBJbiBjZXJ0YWluIGNhc2VzIHN1Y2ggYXMgd2l0aGluIGFuIGlmcmFtZSBpbiBGRjMsIHRoaXMgcmV0dXJucyBudWxsLlxuICAgIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKTtcbiAgICBpZiAoY29tcHV0ZWRTdHlsZSkge1xuICAgICAgcmV0dXJuIGFzU3RyaW5nKGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShoeXBoZW5hdGUobmFtZSkpKTtcbiAgICB9XG4gIH1cbiAgLy8gU2FmYXJpXG4gIGlmIChkb2N1bWVudC5kZWZhdWx0VmlldyAmJiBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgY29tcHV0ZWRTdHlsZSA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCk7XG4gICAgLy8gQSBTYWZhcmkgYnVnIGNhdXNlcyB0aGlzIHRvIHJldHVybiBudWxsIGZvciBgZGlzcGxheTogbm9uZWAgZWxlbWVudHMuXG4gICAgaWYgKGNvbXB1dGVkU3R5bGUpIHtcbiAgICAgIHJldHVybiBhc1N0cmluZyhjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoaHlwaGVuYXRlKG5hbWUpKSk7XG4gICAgfVxuICAgIGlmIChuYW1lID09PSAnZGlzcGxheScpIHtcbiAgICAgIHJldHVybiAnbm9uZSc7XG4gICAgfVxuICB9XG4gIC8vIEludGVybmV0IEV4cGxvcmVyXG4gIGlmIChub2RlLmN1cnJlbnRTdHlsZSkge1xuICAgIGlmIChuYW1lID09PSAnZmxvYXQnKSB7XG4gICAgICByZXR1cm4gYXNTdHJpbmcobm9kZS5jdXJyZW50U3R5bGUuY3NzRmxvYXQgfHwgbm9kZS5jdXJyZW50U3R5bGUuc3R5bGVGbG9hdCk7XG4gICAgfVxuICAgIHJldHVybiBhc1N0cmluZyhub2RlLmN1cnJlbnRTdHlsZVtjYW1lbGl6ZShuYW1lKV0pO1xuICB9XG4gIHJldHVybiBhc1N0cmluZyhub2RlLnN0eWxlICYmIG5vZGUuc3R5bGVbY2FtZWxpemUobmFtZSldKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTdHlsZVByb3BlcnR5OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRHJhZnRKc0RlYnVnTG9nZ2luZ1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvZ1NlbGVjdGlvblN0YXRlRmFpbHVyZTogZnVuY3Rpb24gbG9nU2VsZWN0aW9uU3RhdGVGYWlsdXJlKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgc2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25cbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0SnNEZWJ1Z0xvZ2dpbmcgPSByZXF1aXJlKCcuL0RyYWZ0SnNEZWJ1Z0xvZ2dpbmcnKTtcblxudmFyIGNvbnRhaW5zTm9kZSA9IHJlcXVpcmUoJ2ZianMvbGliL2NvbnRhaW5zTm9kZScpO1xudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbmZ1bmN0aW9uIGdldEFub255bWl6ZWRET00obm9kZSwgZ2V0Tm9kZUxhYmVscykge1xuICBpZiAoIW5vZGUpIHtcbiAgICByZXR1cm4gJ1tlbXB0eV0nO1xuICB9XG5cbiAgdmFyIGFub255bWl6ZWQgPSBhbm9ueW1pemVUZXh0V2l0aGluKG5vZGUsIGdldE5vZGVMYWJlbHMpO1xuICBpZiAoYW5vbnltaXplZC5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICByZXR1cm4gYW5vbnltaXplZC50ZXh0Q29udGVudDtcbiAgfVxuXG4gICEoYW5vbnltaXplZCBpbnN0YW5jZW9mIEVsZW1lbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ05vZGUgbXVzdCBiZSBhbiBFbGVtZW50IGlmIGl0IGlzIG5vdCBhIHRleHQgbm9kZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBhbm9ueW1pemVkLm91dGVySFRNTDtcbn1cblxuZnVuY3Rpb24gYW5vbnltaXplVGV4dFdpdGhpbihub2RlLCBnZXROb2RlTGFiZWxzKSB7XG4gIHZhciBsYWJlbHMgPSBnZXROb2RlTGFiZWxzICE9PSB1bmRlZmluZWQgPyBnZXROb2RlTGFiZWxzKG5vZGUpIDogW107XG5cbiAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgdmFyIGxlbmd0aCA9IG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnW3RleHQgJyArIGxlbmd0aCArIChsYWJlbHMubGVuZ3RoID8gJyB8ICcgKyBsYWJlbHMuam9pbignLCAnKSA6ICcnKSArICddJyk7XG4gIH1cblxuICB2YXIgY2xvbmUgPSBub2RlLmNsb25lTm9kZSgpO1xuICBpZiAoY2xvbmUubm9kZVR5cGUgPT09IDEgJiYgbGFiZWxzLmxlbmd0aCkge1xuICAgIGNsb25lLnNldEF0dHJpYnV0ZSgnZGF0YS1sYWJlbHMnLCBsYWJlbHMuam9pbignLCAnKSk7XG4gIH1cbiAgdmFyIGNoaWxkTm9kZXMgPSBub2RlLmNoaWxkTm9kZXM7XG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCBjaGlsZE5vZGVzLmxlbmd0aDsgaWkrKykge1xuICAgIGNsb25lLmFwcGVuZENoaWxkKGFub255bWl6ZVRleHRXaXRoaW4oY2hpbGROb2Rlc1tpaV0sIGdldE5vZGVMYWJlbHMpKTtcbiAgfVxuXG4gIHJldHVybiBjbG9uZTtcbn1cblxuZnVuY3Rpb24gZ2V0QW5vbnltaXplZEVkaXRvckRPTShub2RlLCBnZXROb2RlTGFiZWxzKSB7XG4gIC8vIGdyYWJiaW5nIHRoZSBET00gY29udGVudCBvZiB0aGUgRHJhZnQgZWRpdG9yXG4gIHZhciBjdXJyZW50Tm9kZSA9IG5vZGU7XG4gIHdoaWxlIChjdXJyZW50Tm9kZSkge1xuICAgIGlmIChjdXJyZW50Tm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgY3VycmVudE5vZGUuaGFzQXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnKSkge1xuICAgICAgLy8gZm91bmQgdGhlIERyYWZ0IGVkaXRvciBjb250YWluZXJcbiAgICAgIHJldHVybiBnZXRBbm9ueW1pemVkRE9NKGN1cnJlbnROb2RlLCBnZXROb2RlTGFiZWxzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJ0NvdWxkIG5vdCBmaW5kIGNvbnRlbnRFZGl0YWJsZSBwYXJlbnQgb2Ygbm9kZSc7XG59XG5cbmZ1bmN0aW9uIGdldE5vZGVMZW5ndGgobm9kZSkge1xuICByZXR1cm4gbm9kZS5ub2RlVmFsdWUgPT09IG51bGwgPyBub2RlLmNoaWxkTm9kZXMubGVuZ3RoIDogbm9kZS5ub2RlVmFsdWUubGVuZ3RoO1xufVxuXG4vKipcbiAqIEluIG1vZGVybiBub24tSUUgYnJvd3NlcnMsIHdlIGNhbiBzdXBwb3J0IGJvdGggZm9yd2FyZCBhbmQgYmFja3dhcmRcbiAqIHNlbGVjdGlvbnMuXG4gKlxuICogTm90ZTogSUUxMCsgc3VwcG9ydHMgdGhlIFNlbGVjdGlvbiBvYmplY3QsIGJ1dCBpdCBkb2VzIG5vdCBzdXBwb3J0XG4gKiB0aGUgYGV4dGVuZGAgbWV0aG9kLCB3aGljaCBtZWFucyB0aGF0IGV2ZW4gaW4gbW9kZXJuIElFLCBpdCdzIG5vdCBwb3NzaWJsZVxuICogdG8gcHJvZ3JhbWF0aWNhbGx5IGNyZWF0ZSBhIGJhY2t3YXJkIHNlbGVjdGlvbi4gVGh1cywgZm9yIGFsbCBJRVxuICogdmVyc2lvbnMsIHdlIHVzZSB0aGUgb2xkIElFIEFQSSB0byBjcmVhdGUgb3VyIHNlbGVjdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHNldERyYWZ0RWRpdG9yU2VsZWN0aW9uKHNlbGVjdGlvblN0YXRlLCBub2RlLCBibG9ja0tleSwgbm9kZVN0YXJ0LCBub2RlRW5kKSB7XG4gIC8vIEl0J3MgcG9zc2libGUgdGhhdCB0aGUgZWRpdG9yIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgRE9NIGJ1dFxuICAvLyBvdXIgc2VsZWN0aW9uIGNvZGUgZG9lc24ndCBrbm93IGl0IHlldC4gRm9yY2luZyBzZWxlY3Rpb24gaW5cbiAgLy8gdGhpcyBjYXNlIG1heSBsZWFkIHRvIGVycm9ycywgc28ganVzdCBiYWlsIG5vdy5cbiAgaWYgKCFjb250YWluc05vZGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBub2RlKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb24gPSBnbG9iYWwuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBhbmNob3JLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRBbmNob3JLZXkoKTtcbiAgdmFyIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvblN0YXRlLmdldEFuY2hvck9mZnNldCgpO1xuICB2YXIgZm9jdXNLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRGb2N1c0tleSgpO1xuICB2YXIgZm9jdXNPZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRGb2N1c09mZnNldCgpO1xuICB2YXIgaXNCYWNrd2FyZCA9IHNlbGVjdGlvblN0YXRlLmdldElzQmFja3dhcmQoKTtcblxuICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgYmFja3dhcmQgc2VsZWN0aW9uLiBTd2FwIGtleS9vZmZzZXQgcGFpcnMuXG4gIGlmICghc2VsZWN0aW9uLmV4dGVuZCAmJiBpc0JhY2t3YXJkKSB7XG4gICAgdmFyIHRlbXBLZXkgPSBhbmNob3JLZXk7XG4gICAgdmFyIHRlbXBPZmZzZXQgPSBhbmNob3JPZmZzZXQ7XG4gICAgYW5jaG9yS2V5ID0gZm9jdXNLZXk7XG4gICAgYW5jaG9yT2Zmc2V0ID0gZm9jdXNPZmZzZXQ7XG4gICAgZm9jdXNLZXkgPSB0ZW1wS2V5O1xuICAgIGZvY3VzT2Zmc2V0ID0gdGVtcE9mZnNldDtcbiAgICBpc0JhY2t3YXJkID0gZmFsc2U7XG4gIH1cblxuICB2YXIgaGFzQW5jaG9yID0gYW5jaG9yS2V5ID09PSBibG9ja0tleSAmJiBub2RlU3RhcnQgPD0gYW5jaG9yT2Zmc2V0ICYmIG5vZGVFbmQgPj0gYW5jaG9yT2Zmc2V0O1xuXG4gIHZhciBoYXNGb2N1cyA9IGZvY3VzS2V5ID09PSBibG9ja0tleSAmJiBub2RlU3RhcnQgPD0gZm9jdXNPZmZzZXQgJiYgbm9kZUVuZCA+PSBmb2N1c09mZnNldDtcblxuICAvLyBJZiB0aGUgc2VsZWN0aW9uIGlzIGVudGlyZWx5IGJvdW5kIHdpdGhpbiB0aGlzIG5vZGUsIHNldCB0aGUgc2VsZWN0aW9uXG4gIC8vIGFuZCBiZSBkb25lLlxuICBpZiAoaGFzQW5jaG9yICYmIGhhc0ZvY3VzKSB7XG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgIGFkZFBvaW50VG9TZWxlY3Rpb24oc2VsZWN0aW9uLCBub2RlLCBhbmNob3JPZmZzZXQgLSBub2RlU3RhcnQsIHNlbGVjdGlvblN0YXRlKTtcbiAgICBhZGRGb2N1c1RvU2VsZWN0aW9uKHNlbGVjdGlvbiwgbm9kZSwgZm9jdXNPZmZzZXQgLSBub2RlU3RhcnQsIHNlbGVjdGlvblN0YXRlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWlzQmFja3dhcmQpIHtcbiAgICAvLyBJZiB0aGUgYW5jaG9yIGlzIHdpdGhpbiB0aGlzIG5vZGUsIHNldCB0aGUgcmFuZ2Ugc3RhcnQuXG4gICAgaWYgKGhhc0FuY2hvcikge1xuICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgYWRkUG9pbnRUb1NlbGVjdGlvbihzZWxlY3Rpb24sIG5vZGUsIGFuY2hvck9mZnNldCAtIG5vZGVTdGFydCwgc2VsZWN0aW9uU3RhdGUpO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBmb2N1cyBpcyB3aXRoaW4gdGhpcyBub2RlLCB3ZSBjYW4gYXNzdW1lIHRoYXQgd2UgaGF2ZVxuICAgIC8vIGFscmVhZHkgc2V0IHRoZSBhcHByb3ByaWF0ZSBzdGFydCByYW5nZSBvbiB0aGUgc2VsZWN0aW9uLCBhbmRcbiAgICAvLyBjYW4gc2ltcGx5IGV4dGVuZCB0aGUgc2VsZWN0aW9uLlxuICAgIGlmIChoYXNGb2N1cykge1xuICAgICAgYWRkRm9jdXNUb1NlbGVjdGlvbihzZWxlY3Rpb24sIG5vZGUsIGZvY3VzT2Zmc2V0IC0gbm9kZVN0YXJ0LCBzZWxlY3Rpb25TdGF0ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElmIHRoaXMgbm9kZSBoYXMgdGhlIGZvY3VzLCBzZXQgdGhlIHNlbGVjdGlvbiByYW5nZSB0byBiZSBhXG4gICAgLy8gY29sbGFwc2VkIHJhbmdlIGJlZ2lubmluZyBoZXJlLiBMYXRlciwgd2hlbiB3ZSBlbmNvdW50ZXIgdGhlIGFuY2hvcixcbiAgICAvLyB3ZSdsbCB1c2UgdGhpcyBpbmZvcm1hdGlvbiB0byBleHRlbmQgdGhlIHNlbGVjdGlvbi5cbiAgICBpZiAoaGFzRm9jdXMpIHtcbiAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgIGFkZFBvaW50VG9TZWxlY3Rpb24oc2VsZWN0aW9uLCBub2RlLCBmb2N1c09mZnNldCAtIG5vZGVTdGFydCwgc2VsZWN0aW9uU3RhdGUpO1xuICAgIH1cblxuICAgIC8vIElmIHRoaXMgbm9kZSBoYXMgdGhlIGFuY2hvciwgd2UgbWF5IGFzc3VtZSB0aGF0IHRoZSBjb3JyZWN0XG4gICAgLy8gZm9jdXMgaW5mb3JtYXRpb24gaXMgYWxyZWFkeSBzdG9yZWQgb24gdGhlIHNlbGVjdGlvbiBvYmplY3QuXG4gICAgLy8gV2Uga2VlcCB0cmFjayBvZiBpdCwgcmVzZXQgdGhlIHNlbGVjdGlvbiByYW5nZSwgYW5kIGV4dGVuZCBpdFxuICAgIC8vIGJhY2sgdG8gdGhlIGZvY3VzIHBvaW50LlxuICAgIGlmIChoYXNBbmNob3IpIHtcbiAgICAgIHZhciBzdG9yZWRGb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICAgICAgdmFyIHN0b3JlZEZvY3VzT2Zmc2V0ID0gc2VsZWN0aW9uLmZvY3VzT2Zmc2V0O1xuXG4gICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICBhZGRQb2ludFRvU2VsZWN0aW9uKHNlbGVjdGlvbiwgbm9kZSwgYW5jaG9yT2Zmc2V0IC0gbm9kZVN0YXJ0LCBzZWxlY3Rpb25TdGF0ZSk7XG4gICAgICBhZGRGb2N1c1RvU2VsZWN0aW9uKHNlbGVjdGlvbiwgc3RvcmVkRm9jdXNOb2RlLCBzdG9yZWRGb2N1c09mZnNldCwgc2VsZWN0aW9uU3RhdGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEV4dGVuZCBzZWxlY3Rpb24gdG93YXJkcyBmb2N1cyBwb2ludC5cbiAqL1xuZnVuY3Rpb24gYWRkRm9jdXNUb1NlbGVjdGlvbihzZWxlY3Rpb24sIG5vZGUsIG9mZnNldCwgc2VsZWN0aW9uU3RhdGUpIHtcbiAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gIGlmIChzZWxlY3Rpb24uZXh0ZW5kICYmIGNvbnRhaW5zTm9kZShhY3RpdmVFbGVtZW50LCBub2RlKSkge1xuICAgIC8vIElmIGBleHRlbmRgIGlzIGNhbGxlZCB3aGlsZSBhbm90aGVyIGVsZW1lbnQgaGFzIGZvY3VzLCBhbiBlcnJvciBpc1xuICAgIC8vIHRocm93bi4gV2UgdGhlcmVmb3JlIGRpc2FibGUgYGV4dGVuZGAgaWYgdGhlIGFjdGl2ZSBlbGVtZW50IGlzIHNvbWV3aGVyZVxuICAgIC8vIG90aGVyIHRoYW4gdGhlIG5vZGUgd2UgYXJlIHNlbGVjdGluZy4gVGhpcyBzaG91bGQgb25seSBvY2N1ciBpbiBGaXJlZm94LFxuICAgIC8vIHNpbmNlIGl0IGlzIHRoZSBvbmx5IGJyb3dzZXIgdG8gc3VwcG9ydCBtdWx0aXBsZSBzZWxlY3Rpb25zLlxuICAgIC8vIFNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD05MjE0NDQuXG5cbiAgICAvLyBsb2dnaW5nIHRvIGNhdGNoIGJ1ZyB0aGF0IGlzIGJlaW5nIHJlcG9ydGVkIGluIHQxNjI1MDc5NVxuICAgIGlmIChvZmZzZXQgPiBnZXROb2RlTGVuZ3RoKG5vZGUpKSB7XG4gICAgICAvLyB0aGUgY2FsbCB0byAnc2VsZWN0aW9uLmV4dGVuZCcgaXMgYWJvdXQgdG8gdGhyb3dcbiAgICAgIERyYWZ0SnNEZWJ1Z0xvZ2dpbmcubG9nU2VsZWN0aW9uU3RhdGVGYWlsdXJlKHtcbiAgICAgICAgYW5vbnltaXplZERvbTogZ2V0QW5vbnltaXplZEVkaXRvckRPTShub2RlKSxcbiAgICAgICAgZXh0cmFQYXJhbXM6IEpTT04uc3RyaW5naWZ5KHsgb2Zmc2V0OiBvZmZzZXQgfSksXG4gICAgICAgIHNlbGVjdGlvblN0YXRlOiBKU09OLnN0cmluZ2lmeShzZWxlY3Rpb25TdGF0ZS50b0pTKCkpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBsb2dnaW5nIHRvIGNhdGNoIGJ1ZyB0aGF0IGlzIGJlaW5nIHJlcG9ydGVkIGluIHQxODExMDYzMlxuICAgIHZhciBub2RlV2FzRm9jdXMgPSBub2RlID09PSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICAgIHRyeSB7XG4gICAgICBzZWxlY3Rpb24uZXh0ZW5kKG5vZGUsIG9mZnNldCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgRHJhZnRKc0RlYnVnTG9nZ2luZy5sb2dTZWxlY3Rpb25TdGF0ZUZhaWx1cmUoe1xuICAgICAgICBhbm9ueW1pemVkRG9tOiBnZXRBbm9ueW1pemVkRWRpdG9yRE9NKG5vZGUsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgdmFyIGxhYmVscyA9IFtdO1xuICAgICAgICAgIGlmIChuID09PSBhY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICBsYWJlbHMucHVzaCgnYWN0aXZlIGVsZW1lbnQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG4gPT09IHNlbGVjdGlvbi5hbmNob3JOb2RlKSB7XG4gICAgICAgICAgICBsYWJlbHMucHVzaCgnc2VsZWN0aW9uIGFuY2hvciBub2RlJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChuID09PSBzZWxlY3Rpb24uZm9jdXNOb2RlKSB7XG4gICAgICAgICAgICBsYWJlbHMucHVzaCgnc2VsZWN0aW9uIGZvY3VzIG5vZGUnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGxhYmVscztcbiAgICAgICAgfSksXG4gICAgICAgIGV4dHJhUGFyYW1zOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudE5hbWU6IGFjdGl2ZUVsZW1lbnQgPyBhY3RpdmVFbGVtZW50Lm5vZGVOYW1lIDogbnVsbCxcbiAgICAgICAgICBub2RlSXNGb2N1czogbm9kZSA9PT0gc2VsZWN0aW9uLmZvY3VzTm9kZSxcbiAgICAgICAgICBub2RlV2FzRm9jdXM6IG5vZGVXYXNGb2N1cyxcbiAgICAgICAgICBzZWxlY3Rpb25SYW5nZUNvdW50OiBzZWxlY3Rpb24ucmFuZ2VDb3VudCxcbiAgICAgICAgICBzZWxlY3Rpb25BbmNob3JOb2RlTmFtZTogc2VsZWN0aW9uLmFuY2hvck5vZGUgPyBzZWxlY3Rpb24uYW5jaG9yTm9kZS5ub2RlTmFtZSA6IG51bGwsXG4gICAgICAgICAgc2VsZWN0aW9uQW5jaG9yT2Zmc2V0OiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgIHNlbGVjdGlvbkZvY3VzTm9kZU5hbWU6IHNlbGVjdGlvbi5mb2N1c05vZGUgPyBzZWxlY3Rpb24uZm9jdXNOb2RlLm5vZGVOYW1lIDogbnVsbCxcbiAgICAgICAgICBzZWxlY3Rpb25Gb2N1c09mZnNldDogc2VsZWN0aW9uLmZvY3VzT2Zmc2V0LFxuICAgICAgICAgIG1lc3NhZ2U6IGUgPyAnJyArIGUgOiBudWxsLFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0XG4gICAgICAgIH0sIG51bGwsIDIpLFxuICAgICAgICBzZWxlY3Rpb25TdGF0ZTogSlNPTi5zdHJpbmdpZnkoc2VsZWN0aW9uU3RhdGUudG9KUygpLCBudWxsLCAyKVxuICAgICAgfSk7XG4gICAgICAvLyBhbGxvdyB0aGUgZXJyb3IgdG8gYmUgdGhyb3duIC1cbiAgICAgIC8vIGJldHRlciB0aGFuIGNvbnRpbnVpbmcgaW4gYSBicm9rZW4gc3RhdGVcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBleHRlbmQuIFRoaXMgd2lsbCBtZWFuIG5vIGJhY2t3YXJkIHNlbGVjdGlvbi5cbiAgICAvLyBFeHRyYWN0IHRoZSBleGlzdGluZyBzZWxlY3Rpb24gcmFuZ2UgYW5kIGFkZCBmb2N1cyB0byBpdC5cbiAgICAvLyBBZGRpdGlvbmFsbHksIGNsb25lIHRoZSBzZWxlY3Rpb24gcmFuZ2UuIElFMTEgdGhyb3dzIGFuXG4gICAgLy8gSW52YWxpZFN0YXRlRXJyb3Igd2hlbiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBzZWxlY3Rpb24gcHJvcGVydGllc1xuICAgIC8vIGFmdGVyIHRoZSByYW5nZSBpcyBkZXRhY2hlZC5cbiAgICB2YXIgcmFuZ2UgPSBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcbiAgICByYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UuY2xvbmVSYW5nZSgpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRQb2ludFRvU2VsZWN0aW9uKHNlbGVjdGlvbiwgbm9kZSwgb2Zmc2V0LCBzZWxlY3Rpb25TdGF0ZSkge1xuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAvLyBsb2dnaW5nIHRvIGNhdGNoIGJ1ZyB0aGF0IGlzIGJlaW5nIHJlcG9ydGVkIGluIHQxNjI1MDc5NVxuICBpZiAob2Zmc2V0ID4gZ2V0Tm9kZUxlbmd0aChub2RlKSkge1xuICAgIC8vIGluIHRoaXMgY2FzZSB3ZSBrbm93IHRoYXQgdGhlIGNhbGwgdG8gJ3JhbmdlLnNldFN0YXJ0JyBpcyBhYm91dCB0byB0aHJvd1xuICAgIERyYWZ0SnNEZWJ1Z0xvZ2dpbmcubG9nU2VsZWN0aW9uU3RhdGVGYWlsdXJlKHtcbiAgICAgIGFub255bWl6ZWREb206IGdldEFub255bWl6ZWRFZGl0b3JET00obm9kZSksXG4gICAgICBleHRyYVBhcmFtczogSlNPTi5zdHJpbmdpZnkoeyBvZmZzZXQ6IG9mZnNldCB9KSxcbiAgICAgIHNlbGVjdGlvblN0YXRlOiBKU09OLnN0cmluZ2lmeShzZWxlY3Rpb25TdGF0ZS50b0pTKCkpXG4gICAgfSk7XG4gIH1cbiAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTtcbiAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXREcmFmdEVkaXRvclNlbGVjdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTWVtb2l6ZXMgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBvbmUgc3RyaW5nIGFyZ3VtZW50LlxuICovXG5cbmZ1bmN0aW9uIG1lbW9pemVTdHJpbmdPbmx5KGNhbGxiYWNrKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIGlmICghY2FjaGUuaGFzT3duUHJvcGVydHkoc3RyaW5nKSkge1xuICAgICAgY2FjaGVbc3RyaW5nXSA9IGNhbGxiYWNrLmNhbGwodGhpcywgc3RyaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlW3N0cmluZ107XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZVN0cmluZ09ubHk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEV4ZWN1dGVzIHRoZSBwcm92aWRlZCBgY2FsbGJhY2tgIG9uY2UgZm9yIGVhY2ggZW51bWVyYWJsZSBvd24gcHJvcGVydHkgaW4gdGhlXG4gKiBvYmplY3QgYW5kIGNvbnN0cnVjdHMgYSBuZXcgb2JqZWN0IGZyb20gdGhlIHJlc3VsdHMuIFRoZSBgY2FsbGJhY2tgIGlzXG4gKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICpcbiAqICAtIHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICogIC0gdGhlIHByb3BlcnR5IG5hbWVcbiAqICAtIHRoZSBvYmplY3QgYmVpbmcgdHJhdmVyc2VkXG4gKlxuICogUHJvcGVydGllcyB0aGF0IGFyZSBhZGRlZCBhZnRlciB0aGUgY2FsbCB0byBgbWFwT2JqZWN0YCB3aWxsIG5vdCBiZSB2aXNpdGVkXG4gKiBieSBgY2FsbGJhY2tgLiBJZiB0aGUgdmFsdWVzIG9mIGV4aXN0aW5nIHByb3BlcnRpZXMgYXJlIGNoYW5nZWQsIHRoZSB2YWx1ZVxuICogcGFzc2VkIHRvIGBjYWxsYmFja2Agd2lsbCBiZSB0aGUgdmFsdWUgYXQgdGhlIHRpbWUgYG1hcE9iamVjdGAgdmlzaXRzIHRoZW0uXG4gKiBQcm9wZXJ0aWVzIHRoYXQgYXJlIGRlbGV0ZWQgYmVmb3JlIGJlaW5nIHZpc2l0ZWQgYXJlIG5vdCB2aXNpdGVkLlxuICpcbiAqIEBncmVwIGZ1bmN0aW9uIG9iamVjdE1hcCgpXG4gKiBAZ3JlcCBmdW5jdGlvbiBvYmpNYXAoKVxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHsqfSBjb250ZXh0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBtYXBPYmplY3Qob2JqZWN0LCBjYWxsYmFjaywgY29udGV4dCkge1xuICBpZiAoIW9iamVjdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIG5hbWUpKSB7XG4gICAgICByZXN1bHRbbmFtZV0gPSBjYWxsYmFjay5jYWxsKGNvbnRleHQsIG9iamVjdFtuYW1lXSwgbmFtZSwgb2JqZWN0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBPYmplY3Q7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcblxudmFyIGNvbXBvbmVudFJlZ2V4ID0gL1xcLi87XG52YXIgb3JSZWdleCA9IC9cXHxcXHwvO1xudmFyIHJhbmdlUmVnZXggPSAvXFxzK1xcLVxccysvO1xudmFyIG1vZGlmaWVyUmVnZXggPSAvXig8PXw8fD18Pj18fj58fnw+fCk/XFxzKiguKykvO1xudmFyIG51bWVyaWNSZWdleCA9IC9eKFxcZCopKC4qKS87XG5cbi8qKlxuICogU3BsaXRzIGlucHV0IGByYW5nZWAgb24gXCJ8fFwiIGFuZCByZXR1cm5zIHRydWUgaWYgYW55IHN1YnJhbmdlIG1hdGNoZXNcbiAqIGB2ZXJzaW9uYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmFuZ2VcbiAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJzaW9uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY2hlY2tPckV4cHJlc3Npb24ocmFuZ2UsIHZlcnNpb24pIHtcbiAgdmFyIGV4cHJlc3Npb25zID0gcmFuZ2Uuc3BsaXQob3JSZWdleCk7XG5cbiAgaWYgKGV4cHJlc3Npb25zLmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm4gZXhwcmVzc2lvbnMuc29tZShmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgIHJldHVybiBWZXJzaW9uUmFuZ2UuY29udGFpbnMocmFuZ2UsIHZlcnNpb24pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJhbmdlID0gZXhwcmVzc2lvbnNbMF0udHJpbSgpO1xuICAgIHJldHVybiBjaGVja1JhbmdlRXhwcmVzc2lvbihyYW5nZSwgdmVyc2lvbik7XG4gIH1cbn1cblxuLyoqXG4gKiBTcGxpdHMgaW5wdXQgYHJhbmdlYCBvbiBcIiAtIFwiICh0aGUgc3Vycm91bmRpbmcgd2hpdGVzcGFjZSBpcyByZXF1aXJlZCkgYW5kXG4gKiByZXR1cm5zIHRydWUgaWYgdmVyc2lvbiBmYWxscyBiZXR3ZWVuIHRoZSB0d28gb3BlcmFuZHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJhbmdlXG4gKiBAcGFyYW0ge3N0cmluZ30gdmVyc2lvblxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNoZWNrUmFuZ2VFeHByZXNzaW9uKHJhbmdlLCB2ZXJzaW9uKSB7XG4gIHZhciBleHByZXNzaW9ucyA9IHJhbmdlLnNwbGl0KHJhbmdlUmVnZXgpO1xuXG4gICEoZXhwcmVzc2lvbnMubGVuZ3RoID4gMCAmJiBleHByZXNzaW9ucy5sZW5ndGggPD0gMikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndGhlIFwiLVwiIG9wZXJhdG9yIGV4cGVjdHMgZXhhY3RseSAyIG9wZXJhbmRzJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIGlmIChleHByZXNzaW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gY2hlY2tTaW1wbGVFeHByZXNzaW9uKGV4cHJlc3Npb25zWzBdLCB2ZXJzaW9uKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc3RhcnRWZXJzaW9uID0gZXhwcmVzc2lvbnNbMF0sXG4gICAgICAgIGVuZFZlcnNpb24gPSBleHByZXNzaW9uc1sxXTtcblxuICAgICEoaXNTaW1wbGVWZXJzaW9uKHN0YXJ0VmVyc2lvbikgJiYgaXNTaW1wbGVWZXJzaW9uKGVuZFZlcnNpb24pKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdvcGVyYW5kcyB0byB0aGUgXCItXCIgb3BlcmF0b3IgbXVzdCBiZSBzaW1wbGUgKG5vIG1vZGlmaWVycyknKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICByZXR1cm4gY2hlY2tTaW1wbGVFeHByZXNzaW9uKCc+PScgKyBzdGFydFZlcnNpb24sIHZlcnNpb24pICYmIGNoZWNrU2ltcGxlRXhwcmVzc2lvbignPD0nICsgZW5kVmVyc2lvbiwgdmVyc2lvbik7XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHJhbmdlYCBtYXRjaGVzIGB2ZXJzaW9uYC4gYHJhbmdlYCBzaG91bGQgYmUgYSBcInNpbXBsZVwiIHJhbmdlIChpZS5cbiAqIG5vdCBhIGNvbXBvdW5kIHJhbmdlIHVzaW5nIHRoZSBcIiAtIFwiIG9yIFwifHxcIiBvcGVyYXRvcnMpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByYW5nZVxuICogQHBhcmFtIHtzdHJpbmd9IHZlcnNpb25cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjaGVja1NpbXBsZUV4cHJlc3Npb24ocmFuZ2UsIHZlcnNpb24pIHtcbiAgcmFuZ2UgPSByYW5nZS50cmltKCk7XG4gIGlmIChyYW5nZSA9PT0gJycpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciB2ZXJzaW9uQ29tcG9uZW50cyA9IHZlcnNpb24uc3BsaXQoY29tcG9uZW50UmVnZXgpO1xuXG4gIHZhciBfZ2V0TW9kaWZpZXJBbmRDb21wb24gPSBnZXRNb2RpZmllckFuZENvbXBvbmVudHMocmFuZ2UpLFxuICAgICAgbW9kaWZpZXIgPSBfZ2V0TW9kaWZpZXJBbmRDb21wb24ubW9kaWZpZXIsXG4gICAgICByYW5nZUNvbXBvbmVudHMgPSBfZ2V0TW9kaWZpZXJBbmRDb21wb24ucmFuZ2VDb21wb25lbnRzO1xuXG4gIHN3aXRjaCAobW9kaWZpZXIpIHtcbiAgICBjYXNlICc8JzpcbiAgICAgIHJldHVybiBjaGVja0xlc3NUaGFuKHZlcnNpb25Db21wb25lbnRzLCByYW5nZUNvbXBvbmVudHMpO1xuICAgIGNhc2UgJzw9JzpcbiAgICAgIHJldHVybiBjaGVja0xlc3NUaGFuT3JFcXVhbCh2ZXJzaW9uQ29tcG9uZW50cywgcmFuZ2VDb21wb25lbnRzKTtcbiAgICBjYXNlICc+PSc6XG4gICAgICByZXR1cm4gY2hlY2tHcmVhdGVyVGhhbk9yRXF1YWwodmVyc2lvbkNvbXBvbmVudHMsIHJhbmdlQ29tcG9uZW50cyk7XG4gICAgY2FzZSAnPic6XG4gICAgICByZXR1cm4gY2hlY2tHcmVhdGVyVGhhbih2ZXJzaW9uQ29tcG9uZW50cywgcmFuZ2VDb21wb25lbnRzKTtcbiAgICBjYXNlICd+JzpcbiAgICBjYXNlICd+Pic6XG4gICAgICByZXR1cm4gY2hlY2tBcHByb3hpbWF0ZVZlcnNpb24odmVyc2lvbkNvbXBvbmVudHMsIHJhbmdlQ29tcG9uZW50cyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBjaGVja0VxdWFsKHZlcnNpb25Db21wb25lbnRzLCByYW5nZUNvbXBvbmVudHMpO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYGFgIGlzIGxlc3MgdGhhbiBgYmAuXG4gKlxuICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBhXG4gKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IGJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjaGVja0xlc3NUaGFuKGEsIGIpIHtcbiAgcmV0dXJuIGNvbXBhcmVDb21wb25lbnRzKGEsIGIpID09PSAtMTtcbn1cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBgYWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBiYC5cbiAqXG4gKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IGFcbiAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNoZWNrTGVzc1RoYW5PckVxdWFsKGEsIGIpIHtcbiAgdmFyIHJlc3VsdCA9IGNvbXBhcmVDb21wb25lbnRzKGEsIGIpO1xuICByZXR1cm4gcmVzdWx0ID09PSAtMSB8fCByZXN1bHQgPT09IDA7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYGFgIGlzIGVxdWFsIHRvIGBiYC5cbiAqXG4gKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IGFcbiAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNoZWNrRXF1YWwoYSwgYikge1xuICByZXR1cm4gY29tcGFyZUNvbXBvbmVudHMoYSwgYikgPT09IDA7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYGFgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgYmAuXG4gKlxuICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBhXG4gKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IGJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjaGVja0dyZWF0ZXJUaGFuT3JFcXVhbChhLCBiKSB7XG4gIHZhciByZXN1bHQgPSBjb21wYXJlQ29tcG9uZW50cyhhLCBiKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMSB8fCByZXN1bHQgPT09IDA7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYGFgIGlzIGdyZWF0ZXIgdGhhbiBgYmAuXG4gKlxuICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBhXG4gKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IGJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjaGVja0dyZWF0ZXJUaGFuKGEsIGIpIHtcbiAgcmV0dXJuIGNvbXBhcmVDb21wb25lbnRzKGEsIGIpID09PSAxO1xufVxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGBhYCBpcyBcInJlYXNvbmFibHkgY2xvc2VcIiB0byBgYmAgKGFzIGRlc2NyaWJlZCBpblxuICogaHR0cHM6Ly93d3cubnBtanMub3JnL2RvYy9taXNjL3NlbXZlci5odG1sKS4gRm9yIGV4YW1wbGUsIGlmIGBiYCBpcyBcIjEuMy4xXCJcbiAqIHRoZW4gXCJyZWFzb25hYmx5IGNsb3NlXCIgaXMgZGVmaW5lZCBhcyBcIj49IDEuMy4xIGFuZCA8IDEuNFwiLlxuICpcbiAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gYVxuICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBiXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY2hlY2tBcHByb3hpbWF0ZVZlcnNpb24oYSwgYikge1xuICB2YXIgbG93ZXJCb3VuZCA9IGIuc2xpY2UoKTtcbiAgdmFyIHVwcGVyQm91bmQgPSBiLnNsaWNlKCk7XG5cbiAgaWYgKHVwcGVyQm91bmQubGVuZ3RoID4gMSkge1xuICAgIHVwcGVyQm91bmQucG9wKCk7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IHVwcGVyQm91bmQubGVuZ3RoIC0gMTtcbiAgdmFyIG51bWVyaWMgPSBwYXJzZUludCh1cHBlckJvdW5kW2xhc3RJbmRleF0sIDEwKTtcbiAgaWYgKGlzTnVtYmVyKG51bWVyaWMpKSB7XG4gICAgdXBwZXJCb3VuZFtsYXN0SW5kZXhdID0gbnVtZXJpYyArIDEgKyAnJztcbiAgfVxuXG4gIHJldHVybiBjaGVja0dyZWF0ZXJUaGFuT3JFcXVhbChhLCBsb3dlckJvdW5kKSAmJiBjaGVja0xlc3NUaGFuKGEsIHVwcGVyQm91bmQpO1xufVxuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBvcHRpb25hbCBtb2RpZmllciAoPCwgPD0sID0sID49LCA+LCB+LCB+PikgYW5kIHZlcnNpb25cbiAqIGNvbXBvbmVudHMgZnJvbSBgcmFuZ2VgLlxuICpcbiAqIEZvciBleGFtcGxlLCBnaXZlbiBgcmFuZ2VgIFwiPj0gMS4yLjNcIiByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGEgYG1vZGlmaWVyYCBvZlxuICogYFwiPj1cImAgYW5kIGBjb21wb25lbnRzYCBvZiBgWzEsIDIsIDNdYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmFuZ2VcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE1vZGlmaWVyQW5kQ29tcG9uZW50cyhyYW5nZSkge1xuICB2YXIgcmFuZ2VDb21wb25lbnRzID0gcmFuZ2Uuc3BsaXQoY29tcG9uZW50UmVnZXgpO1xuICB2YXIgbWF0Y2hlcyA9IHJhbmdlQ29tcG9uZW50c1swXS5tYXRjaChtb2RpZmllclJlZ2V4KTtcbiAgIW1hdGNoZXMgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZXhwZWN0ZWQgcmVnZXggdG8gbWF0Y2ggYnV0IGl0IGRpZCBub3QnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgcmV0dXJuIHtcbiAgICBtb2RpZmllcjogbWF0Y2hlc1sxXSxcbiAgICByYW5nZUNvbXBvbmVudHM6IFttYXRjaGVzWzJdXS5jb25jYXQocmFuZ2VDb21wb25lbnRzLnNsaWNlKDEpKVxuICB9O1xufVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgYG51bWJlcmAgaXMgYSBudW1iZXIuXG4gKlxuICogQHBhcmFtIHttaXhlZH0gbnVtYmVyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIobnVtYmVyKSB7XG4gIHJldHVybiAhaXNOYU4obnVtYmVyKSAmJiBpc0Zpbml0ZShudW1iZXIpO1xufVxuXG4vKipcbiAqIFRlc3RzIHdoZXRoZXIgYHJhbmdlYCBpcyBhIFwic2ltcGxlXCIgdmVyc2lvbiBudW1iZXIgd2l0aG91dCBhbnkgbW9kaWZpZXJzXG4gKiAoXCI+XCIsIFwiflwiIGV0YykuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJhbmdlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNTaW1wbGVWZXJzaW9uKHJhbmdlKSB7XG4gIHJldHVybiAhZ2V0TW9kaWZpZXJBbmRDb21wb25lbnRzKHJhbmdlKS5tb2RpZmllcjtcbn1cblxuLyoqXG4gKiBaZXJvLXBhZHMgYXJyYXkgYGFycmF5YCB1bnRpbCBpdCBpcyBhdCBsZWFzdCBgbGVuZ3RoYCBsb25nLlxuICpcbiAqIEBwYXJhbSB7YXJyYXl9IGFycmF5XG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKi9cbmZ1bmN0aW9uIHplcm9QYWQoYXJyYXksIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBhcnJheVtpXSA9ICcwJztcbiAgfVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZXMgYGFgIGFuZCBgYmAgaW4gcHJlcGFyYXRpb24gZm9yIGNvbXBhcmlzb24gYnkgZG9pbmcgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAtIHplcm8tcGFkcyBgYWAgYW5kIGBiYFxuICogLSBtYXJrcyBhbnkgXCJ4XCIsIFwiWFwiIG9yIFwiKlwiIGNvbXBvbmVudCBpbiBgYmAgYXMgZXF1aXZhbGVudCBieSB6ZXJvLWluZyBpdCBvdXRcbiAqICAgaW4gYm90aCBgYWAgYW5kIGBiYFxuICogLSBtYXJrcyBhbnkgZmluYWwgXCIqXCIgY29tcG9uZW50IGluIGBiYCBhcyBhIGdyZWVkeSB3aWxkY2FyZCBieSB6ZXJvLWluZyBpdFxuICogICBhbmQgYWxsIG9mIGl0cyBzdWNjZXNzb3JzIGluIGBhYFxuICpcbiAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gYVxuICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBiXG4gKiBAcmV0dXJucyB7YXJyYXk8YXJyYXk8c3RyaW5nPj59XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZlcnNpb25zKGEsIGIpIHtcbiAgYSA9IGEuc2xpY2UoKTtcbiAgYiA9IGIuc2xpY2UoKTtcblxuICB6ZXJvUGFkKGEsIGIubGVuZ3RoKTtcblxuICAvLyBtYXJrIFwieFwiIGFuZCBcIipcIiBjb21wb25lbnRzIGFzIGVxdWFsXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtYXRjaGVzID0gYltpXS5tYXRjaCgvXlt4Kl0kL2kpO1xuICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICBiW2ldID0gYVtpXSA9ICcwJztcblxuICAgICAgLy8gZmluYWwgXCIqXCIgZ3JlZWRpbHkgemVyb3MgYWxsIHJlbWFpbmluZyBjb21wb25lbnRzXG4gICAgICBpZiAobWF0Y2hlc1swXSA9PT0gJyonICYmIGkgPT09IGIubGVuZ3RoIC0gMSkge1xuICAgICAgICBmb3IgKHZhciBqID0gaTsgaiA8IGEubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBhW2pdID0gJzAnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgemVyb1BhZChiLCBhLmxlbmd0aCk7XG5cbiAgcmV0dXJuIFthLCBiXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBudW1lcmljYWwgLS0gbm90IHRoZSBsZXhpY29ncmFwaGljYWwgLS0gb3JkZXJpbmcgb2YgYGFgIGFuZCBgYmAuXG4gKlxuICogRm9yIGV4YW1wbGUsIGAxMC1hbHBoYWAgaXMgZ3JlYXRlciB0aGFuIGAyLWJldGFgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhXG4gKiBAcGFyYW0ge3N0cmluZ30gYlxuICogQHJldHVybnMge251bWJlcn0gLTEsIDAgb3IgMSB0byBpbmRpY2F0ZSB3aGV0aGVyIGBhYCBpcyBsZXNzIHRoYW4sIGVxdWFsIHRvLFxuICogb3IgZ3JlYXRlciB0aGFuIGBiYCwgcmVzcGVjdGl2ZWx5XG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVOdW1lcmljKGEsIGIpIHtcbiAgdmFyIGFQcmVmaXggPSBhLm1hdGNoKG51bWVyaWNSZWdleClbMV07XG4gIHZhciBiUHJlZml4ID0gYi5tYXRjaChudW1lcmljUmVnZXgpWzFdO1xuICB2YXIgYU51bWVyaWMgPSBwYXJzZUludChhUHJlZml4LCAxMCk7XG4gIHZhciBiTnVtZXJpYyA9IHBhcnNlSW50KGJQcmVmaXgsIDEwKTtcblxuICBpZiAoaXNOdW1iZXIoYU51bWVyaWMpICYmIGlzTnVtYmVyKGJOdW1lcmljKSAmJiBhTnVtZXJpYyAhPT0gYk51bWVyaWMpIHtcbiAgICByZXR1cm4gY29tcGFyZShhTnVtZXJpYywgYk51bWVyaWMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb21wYXJlKGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JkZXJpbmcgb2YgYGFgIGFuZCBgYmAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBhXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0xLCAwIG9yIDEgdG8gaW5kaWNhdGUgd2hldGhlciBgYWAgaXMgbGVzcyB0aGFuLCBlcXVhbCB0byxcbiAqIG9yIGdyZWF0ZXIgdGhhbiBgYmAsIHJlc3BlY3RpdmVseVxuICovXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgISh0eXBlb2YgYSA9PT0gdHlwZW9mIGIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1wiYVwiIGFuZCBcImJcIiBtdXN0IGJlIG9mIHRoZSBzYW1lIHR5cGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgaWYgKGEgPiBiKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSBpZiAoYSA8IGIpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuLyoqXG4gKiBDb21wYXJlcyBhcnJheXMgb2YgdmVyc2lvbiBjb21wb25lbnRzLlxuICpcbiAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gYVxuICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBiXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtMSwgMCBvciAxIHRvIGluZGljYXRlIHdoZXRoZXIgYGFgIGlzIGxlc3MgdGhhbiwgZXF1YWwgdG8sXG4gKiBvciBncmVhdGVyIHRoYW4gYGJgLCByZXNwZWN0aXZlbHlcbiAqL1xuZnVuY3Rpb24gY29tcGFyZUNvbXBvbmVudHMoYSwgYikge1xuICB2YXIgX25vcm1hbGl6ZVZlcnNpb25zID0gbm9ybWFsaXplVmVyc2lvbnMoYSwgYiksXG4gICAgICBhTm9ybWFsaXplZCA9IF9ub3JtYWxpemVWZXJzaW9uc1swXSxcbiAgICAgIGJOb3JtYWxpemVkID0gX25vcm1hbGl6ZVZlcnNpb25zWzFdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYk5vcm1hbGl6ZWQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcmVzdWx0ID0gY29tcGFyZU51bWVyaWMoYU5vcm1hbGl6ZWRbaV0sIGJOb3JtYWxpemVkW2ldKTtcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG52YXIgVmVyc2lvblJhbmdlID0ge1xuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgYHZlcnNpb25gIHNhdGlzZmllcyB0aGUgYHJhbmdlYCBzcGVjaWZpY2F0aW9uLlxuICAgKlxuICAgKiBXZSBzdXBwb3J0IGEgc3Vic2V0IG9mIHRoZSBleHByZXNzaW9ucyBkZWZpbmVkIGluXG4gICAqIGh0dHBzOi8vd3d3Lm5wbWpzLm9yZy9kb2MvbWlzYy9zZW12ZXIuaHRtbDpcbiAgICpcbiAgICogICAgdmVyc2lvbiAgIE11c3QgbWF0Y2ggdmVyc2lvbiBleGFjdGx5XG4gICAqICAgID12ZXJzaW9uICBTYW1lIGFzIGp1c3QgdmVyc2lvblxuICAgKiAgICA+dmVyc2lvbiAgTXVzdCBiZSBncmVhdGVyIHRoYW4gdmVyc2lvblxuICAgKiAgICA+PXZlcnNpb24gTXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdmVyc2lvblxuICAgKiAgICA8dmVyc2lvbiAgTXVzdCBiZSBsZXNzIHRoYW4gdmVyc2lvblxuICAgKiAgICA8PXZlcnNpb24gTXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdmVyc2lvblxuICAgKiAgICB+dmVyc2lvbiAgTXVzdCBiZSBhdCBsZWFzdCB2ZXJzaW9uLCBidXQgbGVzcyB0aGFuIHRoZSBuZXh0IHNpZ25pZmljYW50XG4gICAqICAgICAgICAgICAgICByZXZpc2lvbiBhYm92ZSB2ZXJzaW9uOlxuICAgKiAgICAgICAgICAgICAgXCJ+MS4yLjNcIiBpcyBlcXVpdmFsZW50IHRvIFwiPj0gMS4yLjMgYW5kIDwgMS4zXCJcbiAgICogICAgfj52ZXJzaW9uIEVxdWl2YWxlbnQgdG8gfnZlcnNpb25cbiAgICogICAgMS4yLnggICAgIE11c3QgbWF0Y2ggXCIxLjIueFwiLCB3aGVyZSBcInhcIiBpcyBhIHdpbGRjYXJkIHRoYXQgbWF0Y2hlc1xuICAgKiAgICAgICAgICAgICAgYW55dGhpbmdcbiAgICogICAgMS4yLiogICAgIFNpbWlsYXIgdG8gXCIxLjIueFwiLCBidXQgXCIqXCIgaW4gdGhlIHRyYWlsaW5nIHBvc2l0aW9uIGlzIGFcbiAgICogICAgICAgICAgICAgIFwiZ3JlZWR5XCIgd2lsZGNhcmQsIHNvIHdpbGwgbWF0Y2ggYW55IG51bWJlciBvZiBhZGRpdGlvbmFsXG4gICAqICAgICAgICAgICAgICBjb21wb25lbnRzOlxuICAgKiAgICAgICAgICAgICAgXCIxLjIuKlwiIHdpbGwgbWF0Y2ggXCIxLjIuMVwiLCBcIjEuMi4xLjFcIiwgXCIxLjIuMS4xLjFcIiBldGNcbiAgICogICAgKiAgICAgICAgIEFueSB2ZXJzaW9uXG4gICAqICAgIFwiXCIgICAgICAgIChFbXB0eSBzdHJpbmcpIFNhbWUgYXMgKlxuICAgKiAgICB2MSAtIHYyICAgRXF1aXZhbGVudCB0byBcIj49IHYxIGFuZCA8PSB2MlwiXG4gICAqICAgIHIxIHx8IHIyICBQYXNzZXMgaWYgZWl0aGVyIHIxIG9yIHIyIGFyZSBzYXRpc2ZpZWRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJhbmdlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJzaW9uXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgY29udGFpbnM6IGZ1bmN0aW9uIGNvbnRhaW5zKHJhbmdlLCB2ZXJzaW9uKSB7XG4gICAgcmV0dXJuIGNoZWNrT3JFeHByZXNzaW9uKHJhbmdlLnRyaW0oKSwgdmVyc2lvbi50cmltKCkpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZlcnNpb25SYW5nZTsiLCIvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXHJcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XHJcbiIsIi8qIVxuICogVUFQYXJzZXIuanMgdjAuNy4xOFxuICogTGlnaHR3ZWlnaHQgSmF2YVNjcmlwdC1iYXNlZCBVc2VyLUFnZW50IHN0cmluZyBwYXJzZXJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWlzYWxtYW4vdWEtcGFyc2VyLWpzXG4gKlxuICogQ29weXJpZ2h0IMKpIDIwMTItMjAxNiBGYWlzYWwgU2FsbWFuIDxmeXpsbWFuQGdtYWlsLmNvbT5cbiAqIER1YWwgbGljZW5zZWQgdW5kZXIgR1BMdjIgb3IgTUlUXG4gKi9cblxuKGZ1bmN0aW9uICh3aW5kb3csIHVuZGVmaW5lZCkge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBDb25zdGFudHNcbiAgICAvLy8vLy8vLy8vLy8vXG5cblxuICAgIHZhciBMSUJWRVJTSU9OICA9ICcwLjcuMTgnLFxuICAgICAgICBFTVBUWSAgICAgICA9ICcnLFxuICAgICAgICBVTktOT1dOICAgICA9ICc/JyxcbiAgICAgICAgRlVOQ19UWVBFICAgPSAnZnVuY3Rpb24nLFxuICAgICAgICBVTkRFRl9UWVBFICA9ICd1bmRlZmluZWQnLFxuICAgICAgICBPQkpfVFlQRSAgICA9ICdvYmplY3QnLFxuICAgICAgICBTVFJfVFlQRSAgICA9ICdzdHJpbmcnLFxuICAgICAgICBNQUpPUiAgICAgICA9ICdtYWpvcicsIC8vIGRlcHJlY2F0ZWRcbiAgICAgICAgTU9ERUwgICAgICAgPSAnbW9kZWwnLFxuICAgICAgICBOQU1FICAgICAgICA9ICduYW1lJyxcbiAgICAgICAgVFlQRSAgICAgICAgPSAndHlwZScsXG4gICAgICAgIFZFTkRPUiAgICAgID0gJ3ZlbmRvcicsXG4gICAgICAgIFZFUlNJT04gICAgID0gJ3ZlcnNpb24nLFxuICAgICAgICBBUkNISVRFQ1RVUkU9ICdhcmNoaXRlY3R1cmUnLFxuICAgICAgICBDT05TT0xFICAgICA9ICdjb25zb2xlJyxcbiAgICAgICAgTU9CSUxFICAgICAgPSAnbW9iaWxlJyxcbiAgICAgICAgVEFCTEVUICAgICAgPSAndGFibGV0JyxcbiAgICAgICAgU01BUlRUViAgICAgPSAnc21hcnR0dicsXG4gICAgICAgIFdFQVJBQkxFICAgID0gJ3dlYXJhYmxlJyxcbiAgICAgICAgRU1CRURERUQgICAgPSAnZW1iZWRkZWQnO1xuXG5cbiAgICAvLy8vLy8vLy8vL1xuICAgIC8vIEhlbHBlclxuICAgIC8vLy8vLy8vLy9cblxuXG4gICAgdmFyIHV0aWwgPSB7XG4gICAgICAgIGV4dGVuZCA6IGZ1bmN0aW9uIChyZWdleGVzLCBleHRlbnNpb25zKSB7XG4gICAgICAgICAgICB2YXIgbWFyZ2VkUmVnZXhlcyA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiByZWdleGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4dGVuc2lvbnNbaV0gJiYgZXh0ZW5zaW9uc1tpXS5sZW5ndGggJSAyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdlZFJlZ2V4ZXNbaV0gPSBleHRlbnNpb25zW2ldLmNvbmNhdChyZWdleGVzW2ldKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtYXJnZWRSZWdleGVzW2ldID0gcmVnZXhlc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWFyZ2VkUmVnZXhlcztcbiAgICAgICAgfSxcbiAgICAgICAgaGFzIDogZnVuY3Rpb24gKHN0cjEsIHN0cjIpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHN0cjEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIyLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzdHIxLnRvTG93ZXJDYXNlKCkpICE9PSAtMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbG93ZXJpemUgOiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1ham9yIDogZnVuY3Rpb24gKHZlcnNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YodmVyc2lvbikgPT09IFNUUl9UWVBFID8gdmVyc2lvbi5yZXBsYWNlKC9bXlxcZFxcLl0vZywnJykuc3BsaXQoXCIuXCIpWzBdIDogdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICB0cmltIDogZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcbiAgICAgICAgfVxuICAgIH07XG5cblxuICAgIC8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIE1hcCBoZWxwZXJcbiAgICAvLy8vLy8vLy8vLy8vL1xuXG5cbiAgICB2YXIgbWFwcGVyID0ge1xuXG4gICAgICAgIHJneCA6IGZ1bmN0aW9uICh1YSwgYXJyYXlzKSB7XG5cbiAgICAgICAgICAgIC8vdmFyIHJlc3VsdCA9IHt9LFxuICAgICAgICAgICAgdmFyIGkgPSAwLCBqLCBrLCBwLCBxLCBtYXRjaGVzLCBtYXRjaDsvLywgYXJncyA9IGFyZ3VtZW50cztcblxuICAgICAgICAgICAgLyovLyBjb25zdHJ1Y3Qgb2JqZWN0IGJhcmVib25lc1xuICAgICAgICAgICAgZm9yIChwID0gMDsgcCA8IGFyZ3NbMV0ubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgICAgICBxID0gYXJnc1sxXVtwXTtcbiAgICAgICAgICAgICAgICByZXN1bHRbdHlwZW9mIHEgPT09IE9CSl9UWVBFID8gcVswXSA6IHFdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSovXG5cbiAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCBhbGwgcmVnZXhlcyBtYXBzXG4gICAgICAgICAgICB3aGlsZSAoaSA8IGFycmF5cy5sZW5ndGggJiYgIW1hdGNoZXMpIHtcblxuICAgICAgICAgICAgICAgIHZhciByZWdleCA9IGFycmF5c1tpXSwgICAgICAgLy8gZXZlbiBzZXF1ZW5jZSAoMCwyLDQsLi4pXG4gICAgICAgICAgICAgICAgICAgIHByb3BzID0gYXJyYXlzW2kgKyAxXTsgICAvLyBvZGQgc2VxdWVuY2UgKDEsMyw1LC4uKVxuICAgICAgICAgICAgICAgIGogPSBrID0gMDtcblxuICAgICAgICAgICAgICAgIC8vIHRyeSBtYXRjaGluZyB1YXN0cmluZyB3aXRoIHJlZ2V4ZXNcbiAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IHJlZ2V4Lmxlbmd0aCAmJiAhbWF0Y2hlcykge1xuXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSByZWdleFtqKytdLmV4ZWModWEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghIW1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocCA9IDA7IHAgPCBwcm9wcy5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gbWF0Y2hlc1srK2tdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEgPSBwcm9wc1twXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBnaXZlbiBwcm9wZXJ0eSBpcyBhY3R1YWxseSBhcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcSA9PT0gT0JKX1RZUEUgJiYgcS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLmxlbmd0aCA9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHFbMV0gPT0gRlVOQ19UWVBFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXNzaWduIG1vZGlmaWVkIG1hdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1txWzBdXSA9IHFbMV0uY2FsbCh0aGlzLCBtYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFzc2lnbiBnaXZlbiB2YWx1ZSwgaWdub3JlIHJlZ2V4IG1hdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1txWzBdXSA9IHFbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocS5sZW5ndGggPT0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgd2hldGhlciBmdW5jdGlvbiBvciByZWdleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBxWzFdID09PSBGVU5DX1RZUEUgJiYgIShxWzFdLmV4ZWMgJiYgcVsxXS50ZXN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgZnVuY3Rpb24gKHVzdWFsbHkgc3RyaW5nIG1hcHBlcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3FbMF1dID0gbWF0Y2ggPyBxWzFdLmNhbGwodGhpcywgbWF0Y2gsIHFbMl0pIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzYW5pdGl6ZSBtYXRjaCB1c2luZyBnaXZlbiByZWdleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcVswXV0gPSBtYXRjaCA/IG1hdGNoLnJlcGxhY2UocVsxXSwgcVsyXSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocS5sZW5ndGggPT0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcVswXV0gPSBtYXRjaCA/IHFbM10uY2FsbCh0aGlzLCBtYXRjaC5yZXBsYWNlKHFbMV0sIHFbMl0pKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcV0gPSBtYXRjaCA/IG1hdGNoIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzKTtcbiAgICAgICAgICAgIC8vcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RyIDogZnVuY3Rpb24gKHN0ciwgbWFwKSB7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gbWFwKSB7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgYXJyYXlcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1hcFtpXSA9PT0gT0JKX1RZUEUgJiYgbWFwW2ldLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtYXBbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmhhcyhtYXBbaV1bal0sIHN0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGkgPT09IFVOS05PV04pID8gdW5kZWZpbmVkIDogaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodXRpbC5oYXMobWFwW2ldLCBzdHIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoaSA9PT0gVU5LTk9XTikgPyB1bmRlZmluZWQgOiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBTdHJpbmcgbWFwXG4gICAgLy8vLy8vLy8vLy8vLy9cblxuXG4gICAgdmFyIG1hcHMgPSB7XG5cbiAgICAgICAgYnJvd3NlciA6IHtcbiAgICAgICAgICAgIG9sZHNhZmFyaSA6IHtcbiAgICAgICAgICAgICAgICB2ZXJzaW9uIDoge1xuICAgICAgICAgICAgICAgICAgICAnMS4wJyAgIDogJy84JyxcbiAgICAgICAgICAgICAgICAgICAgJzEuMicgICA6ICcvMScsXG4gICAgICAgICAgICAgICAgICAgICcxLjMnICAgOiAnLzMnLFxuICAgICAgICAgICAgICAgICAgICAnMi4wJyAgIDogJy80MTInLFxuICAgICAgICAgICAgICAgICAgICAnMi4wLjInIDogJy80MTYnLFxuICAgICAgICAgICAgICAgICAgICAnMi4wLjMnIDogJy80MTcnLFxuICAgICAgICAgICAgICAgICAgICAnMi4wLjQnIDogJy80MTknLFxuICAgICAgICAgICAgICAgICAgICAnPycgICAgIDogJy8nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGRldmljZSA6IHtcbiAgICAgICAgICAgIGFtYXpvbiA6IHtcbiAgICAgICAgICAgICAgICBtb2RlbCA6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0ZpcmUgUGhvbmUnIDogWydTRCcsICdLRiddXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNwcmludCA6IHtcbiAgICAgICAgICAgICAgICBtb2RlbCA6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0V2byBTaGlmdCA0RycgOiAnNzM3M0tUJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdmVuZG9yIDoge1xuICAgICAgICAgICAgICAgICAgICAnSFRDJyAgICAgICA6ICdBUEEnLFxuICAgICAgICAgICAgICAgICAgICAnU3ByaW50JyAgICA6ICdTcHJpbnQnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG9zIDoge1xuICAgICAgICAgICAgd2luZG93cyA6IHtcbiAgICAgICAgICAgICAgICB2ZXJzaW9uIDoge1xuICAgICAgICAgICAgICAgICAgICAnTUUnICAgICAgICA6ICc0LjkwJyxcbiAgICAgICAgICAgICAgICAgICAgJ05UIDMuMTEnICAgOiAnTlQzLjUxJyxcbiAgICAgICAgICAgICAgICAgICAgJ05UIDQuMCcgICAgOiAnTlQ0LjAnLFxuICAgICAgICAgICAgICAgICAgICAnMjAwMCcgICAgICA6ICdOVCA1LjAnLFxuICAgICAgICAgICAgICAgICAgICAnWFAnICAgICAgICA6IFsnTlQgNS4xJywgJ05UIDUuMiddLFxuICAgICAgICAgICAgICAgICAgICAnVmlzdGEnICAgICA6ICdOVCA2LjAnLFxuICAgICAgICAgICAgICAgICAgICAnNycgICAgICAgICA6ICdOVCA2LjEnLFxuICAgICAgICAgICAgICAgICAgICAnOCcgICAgICAgICA6ICdOVCA2LjInLFxuICAgICAgICAgICAgICAgICAgICAnOC4xJyAgICAgICA6ICdOVCA2LjMnLFxuICAgICAgICAgICAgICAgICAgICAnMTAnICAgICAgICA6IFsnTlQgNi40JywgJ05UIDEwLjAnXSxcbiAgICAgICAgICAgICAgICAgICAgJ1JUJyAgICAgICAgOiAnQVJNJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cblxuICAgIC8vLy8vLy8vLy8vLy8vXG4gICAgLy8gUmVnZXggbWFwXG4gICAgLy8vLy8vLy8vLy8vL1xuXG5cbiAgICB2YXIgcmVnZXhlcyA9IHtcblxuICAgICAgICBicm93c2VyIDogW1tcblxuICAgICAgICAgICAgLy8gUHJlc3RvIGJhc2VkXG4gICAgICAgICAgICAvKG9wZXJhXFxzbWluaSlcXC8oW1xcd1xcLi1dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPcGVyYSBNaW5pXG4gICAgICAgICAgICAvKG9wZXJhXFxzW21vYmlsZXRhYl0rKS4rdmVyc2lvblxcLyhbXFx3XFwuLV0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAvLyBPcGVyYSBNb2JpL1RhYmxldFxuICAgICAgICAgICAgLyhvcGVyYSkuK3ZlcnNpb25cXC8oW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPcGVyYSA+IDkuODBcbiAgICAgICAgICAgIC8ob3BlcmEpW1xcL1xcc10rKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZXJhIDwgOS44MFxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8ob3Bpb3MpW1xcL1xcc10rKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZXJhIG1pbmkgb24gaXBob25lID49IDguMFxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnT3BlcmEgTWluaSddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvXFxzKG9wcilcXC8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPcGVyYSBXZWJraXRcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ09wZXJhJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8vIE1peGVkXG4gICAgICAgICAgICAvKGtpbmRsZSlcXC8oW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtpbmRsZVxuICAgICAgICAgICAgLyhsdW5hc2NhcGV8bWF4dGhvbnxuZXRmcm9udHxqYXNtaW5lfGJsYXplcilbXFwvXFxzXT8oW1xcd1xcLl0qKS9pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMdW5hc2NhcGUvTWF4dGhvbi9OZXRmcm9udC9KYXNtaW5lL0JsYXplclxuXG4gICAgICAgICAgICAvLyBUcmlkZW50IGJhc2VkXG4gICAgICAgICAgICAvKGF2YW50XFxzfGllbW9iaWxlfHNsaW18YmFpZHUpKD86YnJvd3Nlcik/W1xcL1xcc10/KFtcXHdcXC5dKikvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXZhbnQvSUVNb2JpbGUvU2xpbUJyb3dzZXIvQmFpZHVcbiAgICAgICAgICAgIC8oPzptc3xcXCgpKGllKVxccyhbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEludGVybmV0IEV4cGxvcmVyXG5cbiAgICAgICAgICAgIC8vIFdlYmtpdC9LSFRNTCBiYXNlZFxuICAgICAgICAgICAgLyhyZWtvbnEpXFwvKFtcXHdcXC5dKikvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWtvbnFcbiAgICAgICAgICAgIC8oY2hyb21pdW18ZmxvY2t8cm9ja21lbHR8bWlkb3JpfGVwaXBoYW55fHNpbGt8c2t5ZmlyZXxvdmlicm93c2VyfGJvbHR8aXJvbnx2aXZhbGRpfGlyaWRpdW18cGhhbnRvbWpzfGJvd3NlcnxxdWFyaylcXC8oW1xcd1xcLi1dKykvaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaHJvbWl1bS9GbG9jay9Sb2NrTWVsdC9NaWRvcmkvRXBpcGhhbnkvU2lsay9Ta3lmaXJlL0JvbHQvSXJvbi9JcmlkaXVtL1BoYW50b21KUy9Cb3dzZXJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKHRyaWRlbnQpLitydls6XFxzXShbXFx3XFwuXSspLitsaWtlXFxzZ2Vja28vaSAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJRTExXG4gICAgICAgICAgICBdLCBbW05BTUUsICdJRSddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGVkZ2V8ZWRnaW9zfGVkZ2VhKVxcLygoXFxkKyk/W1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaWNyb3NvZnQgRWRnZVxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnRWRnZSddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKHlhYnJvd3NlcilcXC8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFlhbmRleFxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnWWFuZGV4J10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8ocHVmZmluKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHVmZmluXG4gICAgICAgICAgICBdLCBbW05BTUUsICdQdWZmaW4nXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLygoPzpbXFxzXFwvXSl1Yz9cXHM/YnJvd3NlcnwoPzpqdWMuKyl1Y3dlYilbXFwvXFxzXT8oW1xcd1xcLl0rKS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVDQnJvd3NlclxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnVUNCcm93c2VyJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oY29tb2RvX2RyYWdvbilcXC8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tb2RvIERyYWdvblxuICAgICAgICAgICAgXSwgW1tOQU1FLCAvXy9nLCAnICddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKG1pY3JvbWVzc2VuZ2VyKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlQ2hhdFxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnV2VDaGF0J10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8ocXFicm93c2VybGl0ZSlcXC8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUVFCcm93c2VyTGl0ZVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oUVEpXFwvKFtcXGRcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUVEsIGFrYSBTaG91UVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC9tPyhxcWJyb3dzZXIpW1xcL1xcc10/KFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFFRQnJvd3NlclxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oQklEVUJyb3dzZXIpW1xcL1xcc10/KFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhaWR1IEJyb3dzZXJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKDIzNDVFeHBsb3JlcilbXFwvXFxzXT8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAyMzQ1IEJyb3dzZXJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKE1ldGFTcilbXFwvXFxzXT8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTb3VHb3VCcm93c2VyXG4gICAgICAgICAgICBdLCBbTkFNRV0sIFtcblxuICAgICAgICAgICAgLyhMQkJST1dTRVIpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpZUJhbyBCcm93c2VyXG4gICAgICAgICAgICBdLCBbTkFNRV0sIFtcblxuICAgICAgICAgICAgL3hpYW9taVxcL21pdWlicm93c2VyXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTUlVSSBCcm93c2VyXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsICdNSVVJIEJyb3dzZXInXV0sIFtcblxuICAgICAgICAgICAgLztmYmF2XFwvKFtcXHdcXC5dKyk7L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGYWNlYm9vayBBcHAgZm9yIGlPUyAmIEFuZHJvaWRcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ0ZhY2Vib29rJ11dLCBbXG5cbiAgICAgICAgICAgIC9oZWFkbGVzc2Nocm9tZSg/OlxcLyhbXFx3XFwuXSspfFxccykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENocm9tZSBIZWFkbGVzc1xuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnQ2hyb21lIEhlYWRsZXNzJ11dLCBbXG5cbiAgICAgICAgICAgIC9cXHN3dlxcKS4rKGNocm9tZSlcXC8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaHJvbWUgV2ViVmlld1xuICAgICAgICAgICAgXSwgW1tOQU1FLCAvKC4rKS8sICckMSBXZWJWaWV3J10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oKD86b2N1bHVzfHNhbXN1bmcpYnJvd3NlcilcXC8oW1xcd1xcLl0rKS9pXG4gICAgICAgICAgICBdLCBbW05BTUUsIC8oLisoPzpnfHVzKSkoLispLywgJyQxICQyJ10sIFZFUlNJT05dLCBbICAgICAgICAgICAgICAgIC8vIE9jdWx1cyAvIFNhbXN1bmcgQnJvd3NlclxuXG4gICAgICAgICAgICAvYW5kcm9pZC4rdmVyc2lvblxcLyhbXFx3XFwuXSspXFxzKyg/Om1vYmlsZVxccz9zYWZhcml8c2FmYXJpKSovaSAgICAgICAgLy8gQW5kcm9pZCBCcm93c2VyXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsICdBbmRyb2lkIEJyb3dzZXInXV0sIFtcblxuICAgICAgICAgICAgLyhjaHJvbWV8b21uaXdlYnxhcm9yYXxbdGl6ZW5va2FdezV9XFxzP2Jyb3dzZXIpXFwvdj8oW1xcd1xcLl0rKS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENocm9tZS9PbW5pV2ViL0Fyb3JhL1RpemVuL05va2lhXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhkb2xmaW4pXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb2xwaGluXG4gICAgICAgICAgICBdLCBbW05BTUUsICdEb2xwaGluJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oKD86YW5kcm9pZC4rKWNybW98Y3Jpb3MpXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hyb21lIGZvciBBbmRyb2lkL2lPU1xuICAgICAgICAgICAgXSwgW1tOQU1FLCAnQ2hyb21lJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oY29hc3QpXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgQ29hc3RcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ09wZXJhIENvYXN0J10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC9meGlvc1xcLyhbXFx3XFwuLV0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCBmb3IgaU9TXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsICdGaXJlZm94J11dLCBbXG5cbiAgICAgICAgICAgIC92ZXJzaW9uXFwvKFtcXHdcXC5dKykuKz9tb2JpbGVcXC9cXHcrXFxzKHNhZmFyaSkvaSAgICAgICAgICAgICAgICAgICAgICAgLy8gTW9iaWxlIFNhZmFyaVxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnTW9iaWxlIFNhZmFyaSddXSwgW1xuXG4gICAgICAgICAgICAvdmVyc2lvblxcLyhbXFx3XFwuXSspLis/KG1vYmlsZVxccz9zYWZhcml8c2FmYXJpKS9pICAgICAgICAgICAgICAgICAgICAvLyBTYWZhcmkgJiBTYWZhcmkgTW9iaWxlXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgTkFNRV0sIFtcblxuICAgICAgICAgICAgL3dlYmtpdC4rPyhnc2EpXFwvKFtcXHdcXC5dKykuKz8obW9iaWxlXFxzP3NhZmFyaXxzYWZhcmkpKFxcL1tcXHdcXC5dKykvaSAgLy8gR29vZ2xlIFNlYXJjaCBBcHBsaWFuY2Ugb24gaU9TXG4gICAgICAgICAgICBdLCBbW05BTUUsICdHU0EnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgL3dlYmtpdC4rPyhtb2JpbGVcXHM/c2FmYXJpfHNhZmFyaSkoXFwvW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgLy8gU2FmYXJpIDwgMy4wXG4gICAgICAgICAgICBdLCBbTkFNRSwgW1ZFUlNJT04sIG1hcHBlci5zdHIsIG1hcHMuYnJvd3Nlci5vbGRzYWZhcmkudmVyc2lvbl1dLCBbXG5cbiAgICAgICAgICAgIC8oa29ucXVlcm9yKVxcLyhbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS29ucXVlcm9yXG4gICAgICAgICAgICAvKHdlYmtpdHxraHRtbClcXC8oW1xcd1xcLl0rKS9pXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLy8gR2Vja28gYmFzZWRcbiAgICAgICAgICAgIC8obmF2aWdhdG9yfG5ldHNjYXBlKVxcLyhbXFx3XFwuLV0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmV0c2NhcGVcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ05ldHNjYXBlJ10sIFZFUlNJT05dLCBbXG4gICAgICAgICAgICAvKHN3aWZ0Zm94KS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN3aWZ0Zm94XG4gICAgICAgICAgICAvKGljZWRyYWdvbnxpY2V3ZWFzZWx8Y2FtaW5vfGNoaW1lcmF8ZmVubmVjfG1hZW1vXFxzYnJvd3NlcnxtaW5pbW98Y29ua2Vyb3IpW1xcL1xcc10/KFtcXHdcXC5cXCtdKykvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWNlRHJhZ29uL0ljZXdlYXNlbC9DYW1pbm8vQ2hpbWVyYS9GZW5uZWMvTWFlbW8vTWluaW1vL0Nvbmtlcm9yXG4gICAgICAgICAgICAvKGZpcmVmb3h8c2VhbW9ua2V5fGstbWVsZW9ufGljZWNhdHxpY2VhcGV8ZmlyZWJpcmR8cGhvZW5peHxwYWxlbW9vbnxiYXNpbGlza3x3YXRlcmZveClcXC8oW1xcd1xcLi1dKykkL2ksXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveC9TZWFNb25rZXkvSy1NZWxlb24vSWNlQ2F0L0ljZUFwZS9GaXJlYmlyZC9QaG9lbml4XG4gICAgICAgICAgICAvKG1vemlsbGEpXFwvKFtcXHdcXC5dKykuK3J2XFw6LitnZWNrb1xcL1xcZCsvaSwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vemlsbGFcblxuICAgICAgICAgICAgLy8gT3RoZXJcbiAgICAgICAgICAgIC8ocG9sYXJpc3xseW54fGRpbGxvfGljYWJ8ZG9yaXN8YW1heWF8dzNtfG5ldHN1cmZ8c2xlaXBuaXIpW1xcL1xcc10/KFtcXHdcXC5dKykvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUG9sYXJpcy9MeW54L0RpbGxvL2lDYWIvRG9yaXMvQW1heWEvdzNtL05ldFN1cmYvU2xlaXBuaXJcbiAgICAgICAgICAgIC8obGlua3MpXFxzXFwoKFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpbmtzXG4gICAgICAgICAgICAvKGdvYnJvd3NlcilcXC8/KFtcXHdcXC5dKikvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdvQnJvd3NlclxuICAgICAgICAgICAgLyhpY2VcXHM/YnJvd3NlcilcXC92PyhbXFx3XFwuX10rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSUNFIEJyb3dzZXJcbiAgICAgICAgICAgIC8obW9zYWljKVtcXC9cXHNdKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vc2FpY1xuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dXG5cbiAgICAgICAgICAgIC8qIC8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgLy8gTWVkaWEgcGxheWVycyBCRUdJTlxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgICAgICwgW1xuXG4gICAgICAgICAgICAvKGFwcGxlKD86Y29yZW1lZGlhfCkpXFwvKChcXGQrKVtcXHdcXC5fXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmljIEFwcGxlIENvcmVNZWRpYVxuICAgICAgICAgICAgLyhjb3JlbWVkaWEpIHYoKFxcZCspW1xcd1xcLl9dKykvaVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oYXF1YWx1bmd8bHlzc25hfGJzcGxheWVyKVxcLygoXFxkKyk/W1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAgIC8vIEFxdWFsdW5nL0x5c3NuYS9CU1BsYXllclxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oYXJlc3xvc3Nwcm94eSlcXHMoKFxcZCspW1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFyZXMvT1NTUHJveHlcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGF1ZGFjaW91c3xhdWRpbXVzaWNzdHJlYW18YW1hcm9rfGJhc3N8Y29yZXxkYWx2aWt8Z25vbWVtcGxheWVyfG11c2ljIG9uIGNvbnNvbGV8bnNwbGF5ZXJ8cHNwLWludGVybmV0cmFkaW9wbGF5ZXJ8dmlkZW9zKVxcLygoXFxkKylbXFx3XFwuLV0rKS9pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBdWRhY2lvdXMvQXVkaU11c2ljU3RyZWFtL0FtYXJvay9CQVNTL09wZW5DT1JFL0RhbHZpay9Hbm9tZU1wbGF5ZXIvTW9DXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5TUGxheWVyL1BTUC1JbnRlcm5ldFJhZGlvUGxheWVyL1ZpZGVvc1xuICAgICAgICAgICAgLyhjbGVtZW50aW5lfG11c2ljIHBsYXllciBkYWVtb24pXFxzKChcXGQrKVtcXHdcXC4tXSspL2ksICAgICAgICAgICAgICAgLy8gQ2xlbWVudGluZS9NUERcbiAgICAgICAgICAgIC8obGcgcGxheWVyfG5leHBsYXllcilcXHMoKFxcZCspW1xcZFxcLl0rKS9pLFxuICAgICAgICAgICAgL3BsYXllclxcLyhuZXhwbGF5ZXJ8bGcgcGxheWVyKVxccygoXFxkKylbXFx3XFwuLV0rKS9pICAgICAgICAgICAgICAgICAgIC8vIE5leFBsYXllci9MRyBQbGF5ZXJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuICAgICAgICAgICAgLyhuZXhwbGF5ZXIpXFxzKChcXGQrKVtcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmV4cGxheWVyXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhmbHJwKVxcLygoXFxkKylbXFx3XFwuLV0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmxpcCBQbGF5ZXJcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ0ZsaXAgUGxheWVyJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oZnN0cmVhbXxuYXRpdmVob3N0fHF1ZXJ5c2Vla3NwaWRlcnxpYS1hcmNoaXZlcnxmYWNlYm9va2V4dGVybmFsaGl0KS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZTdHJlYW0vTmF0aXZlSG9zdC9RdWVyeVNlZWtTcGlkZXIvSUEgQXJjaGl2ZXIvZmFjZWJvb2tleHRlcm5hbGhpdFxuICAgICAgICAgICAgXSwgW05BTUVdLCBbXG5cbiAgICAgICAgICAgIC8oZ3N0cmVhbWVyKSBzb3VwaHR0cHNyYyAoPzpcXChbXlxcKV0rXFwpKXswLDF9IGxpYnNvdXBcXC8oKFxcZCspW1xcd1xcLi1dKykvaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHc3RyZWFtZXJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGh0YyBzdHJlYW1pbmcgcGxheWVyKVxcc1tcXHdfXStcXHNcXC9cXHMoKFxcZCspW1xcZFxcLl0rKS9pLCAgICAgICAgICAgICAgLy8gSFRDIFN0cmVhbWluZyBQbGF5ZXJcbiAgICAgICAgICAgIC8oamF2YXxweXRob24tdXJsbGlifHB5dGhvbi1yZXF1ZXN0c3x3Z2V0fGxpYmN1cmwpXFwvKChcXGQrKVtcXHdcXC4tX10rKS9pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBKYXZhL3VybGxpYi9yZXF1ZXN0cy93Z2V0L2NVUkxcbiAgICAgICAgICAgIC8obGF2ZikoKFxcZCspW1xcZFxcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGF2ZiAoRkZNUEVHKVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oaHRjX29uZV9zKVxcLygoXFxkKylbXFxkXFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhUQyBPbmUgU1xuICAgICAgICAgICAgXSwgW1tOQU1FLCAvXy9nLCAnICddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKG1wbGF5ZXIpKD86XFxzfFxcLykoPzooPzpzaGVycHlhLSl7MCwxfXN2bikoPzotfFxccykoclxcZCsoPzotXFxkK1tcXHdcXC4tXSspezAsMX0pL2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTVBsYXllciBTVk5cbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKG1wbGF5ZXIpKD86XFxzfFxcL3xbdW5rb3ctXSspKChcXGQrKVtcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgICAgLy8gTVBsYXllclxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8obXBsYXllcikvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTVBsYXllciAobm8gb3RoZXIgaW5mbylcbiAgICAgICAgICAgIC8oeW91cm11emUpL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gWW91ck11emVcbiAgICAgICAgICAgIC8obWVkaWEgcGxheWVyIGNsYXNzaWN8bmVybyBzaG93dGltZSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVkaWEgUGxheWVyIENsYXNzaWMvTmVybyBTaG93VGltZVxuICAgICAgICAgICAgXSwgW05BTUVdLCBbXG5cbiAgICAgICAgICAgIC8obmVybyAoPzpob21lfHNjb3V0KSlcXC8oKFxcZCspW1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5lcm8gSG9tZS9OZXJvIFNjb3V0XG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhub2tpYVxcZCspXFwvKChcXGQrKVtcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5va2lhXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgL1xccyhzb25nYmlyZClcXC8oKFxcZCspW1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvbmdiaXJkL1BoaWxpcHMtU29uZ2JpcmRcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKHdpbmFtcCkzIHZlcnNpb24gKChcXGQrKVtcXHdcXC4tXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdpbmFtcFxuICAgICAgICAgICAgLyh3aW5hbXApXFxzKChcXGQrKVtcXHdcXC4tXSspL2ksXG4gICAgICAgICAgICAvKHdpbmFtcCltcGVnXFwvKChcXGQrKVtcXHdcXC4tXSspL2lcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKG9jbXMtYm90fHRhcGlucmFkaW98dHVuZWluIHJhZGlvfHVua25vd258d2luYW1wfGlubGlnaHQgcmFkaW8pL2kgIC8vIE9DTVMtYm90L3RhcCBpbiByYWRpby90dW5laW4vdW5rbm93bi93aW5hbXAgKG5vIG90aGVyIGluZm8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlubGlnaHQgcmFkaW9cbiAgICAgICAgICAgIF0sIFtOQU1FXSwgW1xuXG4gICAgICAgICAgICAvKHF1aWNrdGltZXxybWF8cmFkaW9hcHB8cmFkaW9jbGllbnRhcHBsaWNhdGlvbnxzb3VuZHRhcHx0b3RlbXxzdGFnZWZyaWdodHxzdHJlYW1pdW0pXFwvKChcXGQrKVtcXHdcXC4tXSspL2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUXVpY2tUaW1lL1JlYWxNZWRpYS9SYWRpb0FwcC9SYWRpb0NsaWVudEFwcGxpY2F0aW9uL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTb3VuZFRhcC9Ub3RlbS9TdGFnZWZyaWdodC9TdHJlYW1pdW1cbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKHNtcCkoKFxcZCspW1xcZFxcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNNUFxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8odmxjKSBtZWRpYSBwbGF5ZXIgLSB2ZXJzaW9uICgoXFxkKylbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgLy8gVkxDIFZpZGVvbGFuXG4gICAgICAgICAgICAvKHZsYylcXC8oKFxcZCspW1xcd1xcLi1dKykvaSxcbiAgICAgICAgICAgIC8oeGJtY3xndmZzfHhpbmV8eG1tc3xpcmFwcClcXC8oKFxcZCspW1xcd1xcLi1dKykvaSwgICAgICAgICAgICAgICAgICAgIC8vIFhCTUMvZ3Zmcy9YaW5lL1hNTVMvaXJhcHBcbiAgICAgICAgICAgIC8oZm9vYmFyMjAwMClcXC8oKFxcZCspW1xcZFxcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvb2JhcjIwMDBcbiAgICAgICAgICAgIC8oaXR1bmVzKVxcLygoXFxkKylbXFxkXFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlUdW5lc1xuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8od21wbGF5ZXIpXFwvKChcXGQrKVtcXHdcXC4tXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdpbmRvd3MgTWVkaWEgUGxheWVyXG4gICAgICAgICAgICAvKHdpbmRvd3MtbWVkaWEtcGxheWVyKVxcLygoXFxkKylbXFx3XFwuLV0rKS9pXG4gICAgICAgICAgICBdLCBbW05BTUUsIC8tL2csICcgJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC93aW5kb3dzXFwvKChcXGQrKVtcXHdcXC4tXSspIHVwbnBcXC9bXFxkXFwuXSsgZGxuYWRvY1xcL1tcXGRcXC5dKyAoaG9tZSBtZWRpYSBzZXJ2ZXIpL2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2luZG93cyBNZWRpYSBTZXJ2ZXJcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ1dpbmRvd3MnXV0sIFtcblxuICAgICAgICAgICAgLyhjb21cXC5yaXNldXByYWRpb2FsYXJtKVxcLygoXFxkKylbXFxkXFwuXSopL2kgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJpc2VVUCBSYWRpbyBBbGFybVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8ocmFkLmlvKVxccygoXFxkKylbXFxkXFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJhZC5pb1xuICAgICAgICAgICAgLyhyYWRpby4oPzpkZXxhdHxmcikpXFxzKChcXGQrKVtcXGRcXC5dKykvaVxuICAgICAgICAgICAgXSwgW1tOQU1FLCAncmFkLmlvJ10sIFZFUlNJT05dXG5cbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgIC8vIE1lZGlhIHBsYXllcnMgRU5EXG4gICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLyovXG5cbiAgICAgICAgXSxcblxuICAgICAgICBjcHUgOiBbW1xuXG4gICAgICAgICAgICAvKD86KGFtZHx4KD86KD86ODZ8NjQpW18tXSk/fHdvd3x3aW4pNjQpWztcXCldL2kgICAgICAgICAgICAgICAgICAgICAvLyBBTUQ2NFxuICAgICAgICAgICAgXSwgW1tBUkNISVRFQ1RVUkUsICdhbWQ2NCddXSwgW1xuXG4gICAgICAgICAgICAvKGlhMzIoPz07KSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElBMzIgKHF1aWNrdGltZSlcbiAgICAgICAgICAgIF0sIFtbQVJDSElURUNUVVJFLCB1dGlsLmxvd2VyaXplXV0sIFtcblxuICAgICAgICAgICAgLygoPzppWzM0Nl18eCk4NilbO1xcKV0vaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSUEzMlxuICAgICAgICAgICAgXSwgW1tBUkNISVRFQ1RVUkUsICdpYTMyJ11dLCBbXG5cbiAgICAgICAgICAgIC8vIFBvY2tldFBDIG1pc3Rha2VubHkgaWRlbnRpZmllZCBhcyBQb3dlclBDXG4gICAgICAgICAgICAvd2luZG93c1xccyhjZXxtb2JpbGUpO1xcc3BwYzsvaVxuICAgICAgICAgICAgXSwgW1tBUkNISVRFQ1RVUkUsICdhcm0nXV0sIFtcblxuICAgICAgICAgICAgLygoPzpwcGN8cG93ZXJwYykoPzo2NCk/KSg/Olxcc21hY3w7fFxcKSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBvd2VyUENcbiAgICAgICAgICAgIF0sIFtbQVJDSElURUNUVVJFLCAvb3dlci8sICcnLCB1dGlsLmxvd2VyaXplXV0sIFtcblxuICAgICAgICAgICAgLyhzdW40XFx3KVs7XFwpXS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNQQVJDXG4gICAgICAgICAgICBdLCBbW0FSQ0hJVEVDVFVSRSwgJ3NwYXJjJ11dLCBbXG5cbiAgICAgICAgICAgIC8oKD86YXZyMzJ8aWE2NCg/PTspKXw2OGsoPz1cXCkpfGFybSg/OjY0fCg/PXZcXGQrOykpfCg/PWF0bWVsXFxzKWF2cnwoPzppcml4fG1pcHN8c3BhcmMpKD86NjQpPyg/PTspfHBhLXJpc2MpL2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSUE2NCwgNjhLLCBBUk0vNjQsIEFWUi8zMiwgSVJJWC82NCwgTUlQUy82NCwgU1BBUkMvNjQsIFBBLVJJU0NcbiAgICAgICAgICAgIF0sIFtbQVJDSElURUNUVVJFLCB1dGlsLmxvd2VyaXplXV1cbiAgICAgICAgXSxcblxuICAgICAgICBkZXZpY2UgOiBbW1xuXG4gICAgICAgICAgICAvXFwoKGlwYWR8cGxheWJvb2spO1tcXHdcXHNcXCk7LV0rKHJpbXxhcHBsZSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpUGFkL1BsYXlCb29rXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFZFTkRPUiwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hcHBsZWNvcmVtZWRpYVxcL1tcXHdcXC5dKyBcXCgoaXBhZCkvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlQYWRcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0FwcGxlJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvKGFwcGxlXFxzezAsMX10dikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBsZSBUVlxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ0FwcGxlIFRWJ10sIFtWRU5ET1IsICdBcHBsZSddXSwgW1xuXG4gICAgICAgICAgICAvKGFyY2hvcylcXHMoZ2FtZXBhZDI/KS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBcmNob3NcbiAgICAgICAgICAgIC8oaHApLisodG91Y2hwYWQpL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSFAgVG91Y2hQYWRcbiAgICAgICAgICAgIC8oaHApLisodGFibGV0KS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSFAgVGFibGV0XG4gICAgICAgICAgICAvKGtpbmRsZSlcXC8oW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtpbmRsZVxuICAgICAgICAgICAgL1xccyhub29rKVtcXHdcXHNdK2J1aWxkXFwvKFxcdyspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vb2tcbiAgICAgICAgICAgIC8oZGVsbClcXHMoc3RyZWFba3ByXFxzXFxkXSpbXFxka29dKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlbGwgU3RyZWFrXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC8oa2ZbQS16XSspXFxzYnVpbGRcXC8uK3NpbGtcXC8vaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2luZGxlIEZpcmUgSERcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0FtYXpvbiddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC8oc2R8a2YpWzAzNDloaWpvcnN0dXddK1xcc2J1aWxkXFwvLitzaWxrXFwvL2kgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyZSBQaG9uZVxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgbWFwcGVyLnN0ciwgbWFwcy5kZXZpY2UuYW1hem9uLm1vZGVsXSwgW1ZFTkRPUiwgJ0FtYXpvbiddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL1xcKChpcFtob25lZHxcXHNcXHcqXSspOy4rKGFwcGxlKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpUG9kL2lQaG9uZVxuICAgICAgICAgICAgXSwgW01PREVMLCBWRU5ET1IsIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgL1xcKChpcFtob25lZHxcXHNcXHcqXSspOy9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpUG9kL2lQaG9uZVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnQXBwbGUnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8oYmxhY2tiZXJyeSlbXFxzLV0/KFxcdyspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCbGFja0JlcnJ5XG4gICAgICAgICAgICAvKGJsYWNrYmVycnl8YmVucXxwYWxtKD89XFwtKXxzb255ZXJpY3Nzb258YWNlcnxhc3VzfGRlbGx8bWVpenV8bW90b3JvbGF8cG9seXRyb24pW1xcc18tXT8oW1xcdy1dKikvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmVuUS9QYWxtL1NvbnktRXJpY3Nzb24vQWNlci9Bc3VzL0RlbGwvTWVpenUvTW90b3JvbGEvUG9seXRyb25cbiAgICAgICAgICAgIC8oaHApXFxzKFtcXHdcXHNdK1xcdykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhQIGlQQVFcbiAgICAgICAgICAgIC8oYXN1cyktPyhcXHcrKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFzdXNcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC9cXChiYjEwO1xccyhcXHcrKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmxhY2tCZXJyeSAxMFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnQmxhY2tCZXJyeSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXN1cyBUYWJsZXRzXG4gICAgICAgICAgICAvYW5kcm9pZC4rKHRyYW5zZm9bcHJpbWVcXHNdezQsMTB9XFxzXFx3K3xlZWVwY3xzbGlkZXJcXHNcXHcrfG5leHVzIDd8cGFkZm9uZSkvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnQXN1cyddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgLyhzb255KVxccyh0YWJsZXRcXHNbcHNdKVxcc2J1aWxkXFwvL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvbnlcbiAgICAgICAgICAgIC8oc29ueSk/KD86c2dwLispXFxzYnVpbGRcXC8vaVxuICAgICAgICAgICAgXSwgW1tWRU5ET1IsICdTb255J10sIFtNT0RFTCwgJ1hwZXJpYSBUYWJsZXQnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvYW5kcm9pZC4rXFxzKFtjLWddXFxkezR9fHNvWy1sXVxcdyspXFxzYnVpbGRcXC8vaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnU29ueSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL1xccyhvdXlhKVxccy9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE91eWFcbiAgICAgICAgICAgIC8obmludGVuZG8pXFxzKFt3aWRzM3VdKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5pbnRlbmRvXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIENPTlNPTEVdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rO1xccyhzaGllbGQpXFxzYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTnZpZGlhXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdOdmlkaWEnXSwgW1RZUEUsIENPTlNPTEVdXSwgW1xuXG4gICAgICAgICAgICAvKHBsYXlzdGF0aW9uXFxzWzM0cG9ydGFibGV2aV0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQbGF5c3RhdGlvblxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnU29ueSddLCBbVFlQRSwgQ09OU09MRV1dLCBbXG5cbiAgICAgICAgICAgIC8oc3ByaW50XFxzKFxcdyspKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTcHJpbnQgUGhvbmVzXG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgbWFwcGVyLnN0ciwgbWFwcy5kZXZpY2Uuc3ByaW50LnZlbmRvcl0sIFtNT0RFTCwgbWFwcGVyLnN0ciwgbWFwcy5kZXZpY2Uuc3ByaW50Lm1vZGVsXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8obGVub3ZvKVxccz8oUyg/OjUwMDB8NjAwMCkrKD86Wy1dW1xcdytdKSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMZW5vdm8gdGFibGV0c1xuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvKGh0YylbO19cXHMtXSsoW1xcd1xcc10rKD89XFwpKXxcXHcrKSovaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSFRDXG4gICAgICAgICAgICAvKHp0ZSktKFxcdyopL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBaVEVcbiAgICAgICAgICAgIC8oYWxjYXRlbHxnZWVrc3Bob25lfGxlbm92b3xuZXhpYW58cGFuYXNvbmljfCg/PTtcXHMpc29ueSlbX1xccy1dPyhbXFx3LV0qKS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsY2F0ZWwvR2Vla3NQaG9uZS9MZW5vdm8vTmV4aWFuL1BhbmFzb25pYy9Tb255XG4gICAgICAgICAgICBdLCBbVkVORE9SLCBbTU9ERUwsIC9fL2csICcgJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvKG5leHVzXFxzOSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIVEMgTmV4dXMgOVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnSFRDJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvZFxcL2h1YXdlaShbXFx3XFxzLV0rKVs7XFwpXS9pLFxuICAgICAgICAgICAgLyhuZXh1c1xcczZwKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSHVhd2VpXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdIdWF3ZWknXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8obWljcm9zb2Z0KTtcXHMobHVtaWFbXFxzXFx3XSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWljcm9zb2Z0IEx1bWlhXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC9bXFxzXFwoO10oeGJveCg/Olxcc29uZSk/KVtcXHNcXCk7XS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaWNyb3NvZnQgWGJveFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTWljcm9zb2Z0J10sIFtUWVBFLCBDT05TT0xFXV0sIFtcbiAgICAgICAgICAgIC8oa2luXFwuW29uZXR3XXszfSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1pY3Jvc29mdCBLaW5cbiAgICAgICAgICAgIF0sIFtbTU9ERUwsIC9cXC4vZywgJyAnXSwgW1ZFTkRPUiwgJ01pY3Jvc29mdCddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNb3Rvcm9sYVxuICAgICAgICAgICAgL1xccyhtaWxlc3RvbmV8ZHJvaWQoPzpbMi00eF18XFxzKD86YmlvbmljfHgyfHByb3xyYXpyKSk/Oj8oXFxzNGcpPylbXFx3XFxzXStidWlsZFxcLy9pLFxuICAgICAgICAgICAgL21vdFtcXHMtXT8oXFx3KikvaSxcbiAgICAgICAgICAgIC8oWFRcXGR7Myw0fSkgYnVpbGRcXC8vaSxcbiAgICAgICAgICAgIC8obmV4dXNcXHM2KS9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdNb3Rvcm9sYSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC9hbmRyb2lkLitcXHMobXo2MFxcZHx4b29tW1xcczJdezAsMn0pXFxzYnVpbGRcXC8vaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTW90b3JvbGEnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9oYmJ0dlxcL1xcZCtcXC5cXGQrXFwuXFxkK1xccytcXChbXFx3XFxzXSo7XFxzKihcXHdbXjtdKik7KFteO10qKS9pICAgICAgICAgICAgLy8gSGJiVFYgZGV2aWNlc1xuICAgICAgICAgICAgXSwgW1tWRU5ET1IsIHV0aWwudHJpbV0sIFtNT0RFTCwgdXRpbC50cmltXSwgW1RZUEUsIFNNQVJUVFZdXSwgW1xuXG4gICAgICAgICAgICAvaGJidHYuK21hcGxlOyhcXGQrKS9pXG4gICAgICAgICAgICBdLCBbW01PREVMLCAvXi8sICdTbWFydFRWJ10sIFtWRU5ET1IsICdTYW1zdW5nJ10sIFtUWVBFLCBTTUFSVFRWXV0sIFtcblxuICAgICAgICAgICAgL1xcKGR0dltcXCk7XS4rKGFxdW9zKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNoYXJwXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdTaGFycCddLCBbVFlQRSwgU01BUlRUVl1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLisoKHNjaC1pWzg5XTBcXGR8c2h3LW0zODBzfGd0LXBcXGR7NH18Z3QtblxcZCt8c2doLXQ4WzU2XTl8bmV4dXMgMTApKS9pLFxuICAgICAgICAgICAgLygoU00tVFxcdyspKS9pXG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgTU9ERUwsIFtUWVBFLCBUQUJMRVRdXSwgWyAgICAgICAgICAgICAgICAgIC8vIFNhbXN1bmdcbiAgICAgICAgICAgIC9zbWFydC10di4rKHNhbXN1bmcpL2lcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIFtUWVBFLCBTTUFSVFRWXSwgTU9ERUxdLCBbXG4gICAgICAgICAgICAvKChzW2NncF1oLVxcdyt8Z3QtXFx3K3xnYWxheHlcXHNuZXh1c3xzbS1cXHdbXFx3XFxkXSspKS9pLFxuICAgICAgICAgICAgLyhzYW1bc3VuZ10qKVtcXHMtXSooXFx3Ky0/W1xcdy1dKikvaSxcbiAgICAgICAgICAgIC9zZWMtKChzZ2hcXHcrKSkvaVxuICAgICAgICAgICAgXSwgW1tWRU5ET1IsICdTYW1zdW5nJ10sIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL3NpZS0oXFx3KikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2llbWVuc1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnU2llbWVucyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhtYWVtb3xub2tpYSkuKihuOTAwfGx1bWlhXFxzXFxkKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5va2lhXG4gICAgICAgICAgICAvKG5va2lhKVtcXHNfLV0/KFtcXHctXSopL2lcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCAnTm9raWEnXSwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZFxcczNcXC5bXFxzXFx3Oy1dezEwfShhXFxkezN9KS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWNlclxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnQWNlciddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKyhbdmxda1xcLT9cXGR7M30pXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMRyBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0xHJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgL2FuZHJvaWRcXHMzXFwuW1xcc1xcdzstXXsxMH0obGc/KS0oWzA2Y3Y5XXszLDR9KS9pICAgICAgICAgICAgICAgICAgICAgLy8gTEcgVGFibGV0XG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgJ0xHJ10sIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC8obGcpIG5ldGNhc3RcXC50di9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExHIFNtYXJ0VFZcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgU01BUlRUVl1dLCBbXG4gICAgICAgICAgICAvKG5leHVzXFxzWzQ1XSkvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMR1xuICAgICAgICAgICAgL2xnW2U7XFxzXFwvLV0rKFxcdyopL2ksXG4gICAgICAgICAgICAvYW5kcm9pZC4rbGcoXFwtP1tcXGRcXHddKylcXHMrYnVpbGQvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTEcnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLisoaWRlYXRhYlthLXowLTlcXC1cXHNdKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMZW5vdm9cbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0xlbm92byddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2xpbnV4Oy4rKChqb2xsYSkpOy9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBKb2xsYVxuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvKChwZWJibGUpKWFwcFxcL1tcXGRcXC5dK1xccy9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQZWJibGVcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgV0VBUkFCTEVdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rO1xccyhvcHBvKVxccz8oW1xcd1xcc10rKVxcc2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT1BQT1xuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvY3JrZXkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdvb2dsZSBDaHJvbWVjYXN0XG4gICAgICAgICAgICBdLCBbW01PREVMLCAnQ2hyb21lY2FzdCddLCBbVkVORE9SLCAnR29vZ2xlJ11dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLis7XFxzKGdsYXNzKVxcc1xcZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR29vZ2xlIEdsYXNzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdHb29nbGUnXSwgW1RZUEUsIFdFQVJBQkxFXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKztcXHMocGl4ZWwgYylcXHMvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdvb2dsZSBQaXhlbCBDXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdHb29nbGUnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLis7XFxzKHBpeGVsIHhsfHBpeGVsKVxccy9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHb29nbGUgUGl4ZWxcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0dvb2dsZSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKztcXHMoXFx3KylcXHMrYnVpbGRcXC9obVxcMS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFhpYW9taSBIb25nbWkgJ251bWVyaWMnIG1vZGVsc1xuICAgICAgICAgICAgL2FuZHJvaWQuKyhobVtcXHNcXC1fXSpub3RlP1tcXHNfXSooPzpcXGRcXHcpPylcXHMrYnVpbGQvaSwgICAgICAgICAgICAgICAvLyBYaWFvbWkgSG9uZ21pXG4gICAgICAgICAgICAvYW5kcm9pZC4rKG1pW1xcc1xcLV9dKig/Om9uZXxvbmVbXFxzX11wbHVzfG5vdGUgbHRlKT9bXFxzX10qKD86XFxkP1xcdz8pW1xcc19dKig/OnBsdXMpPylcXHMrYnVpbGQvaSwgICAgLy8gWGlhb21pIE1pXG4gICAgICAgICAgICAvYW5kcm9pZC4rKHJlZG1pW1xcc1xcLV9dKig/Om5vdGUpPyg/OltcXHNfXSpbXFx3XFxzXSspKVxccytidWlsZC9pICAgICAgIC8vIFJlZG1pIFBob25lc1xuICAgICAgICAgICAgXSwgW1tNT0RFTCwgL18vZywgJyAnXSwgW1ZFTkRPUiwgJ1hpYW9taSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC9hbmRyb2lkLisobWlbXFxzXFwtX10qKD86cGFkKSg/OltcXHNfXSpbXFx3XFxzXSspKVxccytidWlsZC9pICAgICAgICAgICAgLy8gTWkgUGFkIHRhYmxldHNcbiAgICAgICAgICAgIF0sW1tNT0RFTCwgL18vZywgJyAnXSwgW1ZFTkRPUiwgJ1hpYW9taSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC9hbmRyb2lkLis7XFxzKG1bMS01XVxcc25vdGUpXFxzYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVpenUgVGFibGV0XG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdNZWl6dSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK2EwMDAoMSlcXHMrYnVpbGQvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25lUGx1c1xuICAgICAgICAgICAgL2FuZHJvaWQuK29uZXBsdXNcXHMoYVxcZHs0fSlcXHMrYnVpbGQvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnT25lUGx1cyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooUkNUW1xcZFxcd10rKVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJDQSBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdSQ0EnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL1xcc10rKFZlbnVlW1xcZFxcc117Miw3fSlcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAvLyBEZWxsIFZlbnVlIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0RlbGwnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKFFbVHxNXVtcXGRcXHddKylcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAvLyBWZXJpem9uIFRhYmxldFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnVmVyaXpvbiddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccysoQmFybmVzWyZcXHNdK05vYmxlXFxzK3xCTltSVF0pKFY/LiopXFxzK2J1aWxkL2kgICAgIC8vIEJhcm5lcyAmIE5vYmxlIFRhYmxldFxuICAgICAgICAgICAgXSwgW1tWRU5ET1IsICdCYXJuZXMgJiBOb2JsZSddLCBNT0RFTCwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMrKFRNXFxkezN9LipcXGIpXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCYXJuZXMgJiBOb2JsZSBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ051VmlzaW9uJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rO1xccyhrODgpXFxzYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gWlRFIEsgU2VyaWVzIFRhYmxldFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnWlRFJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKihnZW5cXGR7M30pXFxzK2J1aWxkLio0OWgvaSAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTd2lzcyBHRU4gTW9iaWxlXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdTd2lzcyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooenVyXFxkezN9KVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3dpc3MgWlVSIFRhYmxldFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnU3dpc3MnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKChaZWtpKT9UQi4qXFxiKVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFpla2kgVGFibGV0c1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnWmVraSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgLyhhbmRyb2lkKS4rWztcXC9dXFxzKyhbWVJdXFxkezJ9KVxccytidWlsZC9pLFxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccysoRHJhZ29uW1xcLVxcc10rVG91Y2hcXHMrfERUKShcXHd7NX0pXFxzYnVpbGQvaSAgICAgICAgLy8gRHJhZ29uIFRvdWNoIFRhYmxldFxuICAgICAgICAgICAgXSwgW1tWRU5ET1IsICdEcmFnb24gVG91Y2gnXSwgTU9ERUwsIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKihOUy0/XFx3ezAsOX0pXFxzYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnNpZ25pYSBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdJbnNpZ25pYSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooKE5YfE5leHQpLT9cXHd7MCw5fSlcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgLy8gTmV4dEJvb2sgVGFibGV0c1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTmV4dEJvb2snXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKFh0cmVtZVxcXyk/KFYoMVswNDVdfDJbMDE1XXwzMHw0MHw2MHw3WzA1XXw5MCkpXFxzK2J1aWxkL2lcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCAnVm9pY2UnXSwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSwgWyAgICAgICAgICAgICAgICAgICAgLy8gVm9pY2UgWHRyZW1lIFBob25lc1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKihMVlRFTFxcLSk/KFYxWzEyXSlcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgIC8vIEx2VGVsIFBob25lc1xuICAgICAgICAgICAgXSwgW1tWRU5ET1IsICdMdlRlbCddLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKFYoMTAwTUR8NzAwTkF8NzAxMXw5MTdHKS4qXFxiKVxccytidWlsZC9pICAgICAgICAgIC8vIEVudml6ZW4gVGFibGV0c1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnRW52aXplbiddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooTGVbXFxzXFwtXStQYW4pW1xcc1xcLV0rKFxcd3sxLDl9KVxccytidWlsZC9pICAgICAgICAgIC8vIExlIFBhbiBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKFRyaW9bXFxzXFwtXSouKilcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYWNoU3BlZWQgVGFibGV0c1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTWFjaFNwZWVkJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKihUcmluaXR5KVtcXC1cXHNdKihUXFxkezN9KVxccytidWlsZC9pICAgICAgICAgICAgICAgIC8vIFRyaW5pdHkgVGFibGV0c1xuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKlRVXygxNDkxKVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJvdG9yIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1JvdG9yJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rKEtTKC4rKSlcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbWF6b24gS2luZGxlIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0FtYXpvbiddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKyhHaWdhc2V0KVtcXHNcXC1dKyhRXFx3ezEsOX0pXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgLy8gR2lnYXNldCBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9cXHModGFibGV0fHRhYilbO1xcL10vaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVbmlkZW50aWZpYWJsZSBUYWJsZXRcbiAgICAgICAgICAgIC9cXHMobW9iaWxlKSg/Ols7XFwvXXxcXHNzYWZhcmkpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVW5pZGVudGlmaWFibGUgTW9iaWxlXG4gICAgICAgICAgICBdLCBbW1RZUEUsIHV0aWwubG93ZXJpemVdLCBWRU5ET1IsIE1PREVMXSwgW1xuXG4gICAgICAgICAgICAvKGFuZHJvaWRbXFx3XFwuXFxzXFwtXXswLDl9KTsuK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmljIEFuZHJvaWQgRGV2aWNlXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdHZW5lcmljJ11dXG5cblxuICAgICAgICAvKi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAvLyBUT0RPOiBtb3ZlIHRvIHN0cmluZyBtYXBcbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAgICAgLyhDNjYwMykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTb255IFhwZXJpYSBaIEM2NjAzXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnWHBlcmlhIFogQzY2MDMnXSwgW1ZFTkRPUiwgJ1NvbnknXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvKEM2OTAzKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvbnkgWHBlcmlhIFogMVxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ1hwZXJpYSBaIDEnXSwgW1ZFTkRPUiwgJ1NvbnknXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8oU00tRzkwMFtGfEhdKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2Ftc3VuZyBHYWxheHkgUzVcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdHYWxheHkgUzUnXSwgW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvKFNNLUc3MTAyKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbXN1bmcgR2FsYXh5IEdyYW5kIDJcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdHYWxheHkgR3JhbmQgMiddLCBbVkVORE9SLCAnU2Ftc3VuZyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oU00tRzUzMEgpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2Ftc3VuZyBHYWxheHkgR3JhbmQgUHJpbWVcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdHYWxheHkgR3JhbmQgUHJpbWUnXSwgW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvKFNNLUczMTNIWikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbXN1bmcgR2FsYXh5IFZcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdHYWxheHkgViddLCBbVkVORE9SLCAnU2Ftc3VuZyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oU00tVDgwNSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2Ftc3VuZyBHYWxheHkgVGFiIFMgMTAuNVxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ0dhbGF4eSBUYWIgUyAxMC41J10sIFtWRU5ET1IsICdTYW1zdW5nJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgLyhTTS1HODAwRikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYW1zdW5nIEdhbGF4eSBTNSBNaW5pXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnR2FsYXh5IFM1IE1pbmknXSwgW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvKFNNLVQzMTEpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbXN1bmcgR2FsYXh5IFRhYiAzIDguMFxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ0dhbGF4eSBUYWIgMyA4LjAnXSwgW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC8oVDNDKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWR2YW4gVmFuZHJvaWQgVDNDXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdBZHZhbiddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC8oQURWQU4gVDFKXFwrKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkdmFuIFZhbmRyb2lkIFQxSitcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdWYW5kcm9pZCBUMUorJ10sIFtWRU5ET1IsICdBZHZhbiddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC8oQURWQU4gUzRBKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWR2YW4gVmFuZHJvaWQgUzRBXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnVmFuZHJvaWQgUzRBJ10sIFtWRU5ET1IsICdBZHZhbiddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhWOTcyTSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBaVEUgVjk3Mk1cbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1pURSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhpLW1vYmlsZSlcXHMoSVFcXHNbXFxkXFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS1tb2JpbGUgSVFcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oSVE2LjMpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS1tb2JpbGUgSVEgSVEgNi4zXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnSVEgNi4zJ10sIFtWRU5ET1IsICdpLW1vYmlsZSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oaS1tb2JpbGUpXFxzKGktc3R5bGVcXHNbXFxkXFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGktbW9iaWxlIGktU1RZTEVcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oaS1TVFlMRTIuMSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS1tb2JpbGUgaS1TVFlMRSAyLjFcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdpLVNUWUxFIDIuMSddLCBbVkVORE9SLCAnaS1tb2JpbGUnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8obW9iaWlzdGFyIHRvdWNoIExBSSA1MTIpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW9iaWlzdGFyIHRvdWNoIExBSSA1MTJcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdUb3VjaCBMQUkgNTEyJ10sIFtWRU5ET1IsICdtb2JpaXN0YXInXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgIC8vIEVORCBUT0RPXG4gICAgICAgICAgICAvLy8vLy8vLy8vLyovXG5cbiAgICAgICAgXSxcblxuICAgICAgICBlbmdpbmUgOiBbW1xuXG4gICAgICAgICAgICAvd2luZG93cy4rXFxzZWRnZVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFZGdlSFRNTFxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnRWRnZUhUTUwnXV0sIFtcblxuICAgICAgICAgICAgLyhwcmVzdG8pXFwvKFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmVzdG9cbiAgICAgICAgICAgIC8od2Via2l0fHRyaWRlbnR8bmV0ZnJvbnR8bmV0c3VyZnxhbWF5YXxseW54fHczbSlcXC8oW1xcd1xcLl0rKS9pLCAgICAgLy8gV2ViS2l0L1RyaWRlbnQvTmV0RnJvbnQvTmV0U3VyZi9BbWF5YS9MeW54L3czbVxuICAgICAgICAgICAgLyhraHRtbHx0YXNtYW58bGlua3MpW1xcL1xcc11cXCg/KFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtIVE1ML1Rhc21hbi9MaW5rc1xuICAgICAgICAgICAgLyhpY2FiKVtcXC9cXHNdKFsyM11cXC5bXFxkXFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlDYWJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvcnZcXDooW1xcd1xcLl17MSw5fSkuKyhnZWNrbykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdlY2tvXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgTkFNRV1cbiAgICAgICAgXSxcblxuICAgICAgICBvcyA6IFtbXG5cbiAgICAgICAgICAgIC8vIFdpbmRvd3MgYmFzZWRcbiAgICAgICAgICAgIC9taWNyb3NvZnRcXHMod2luZG93cylcXHModmlzdGF8eHApL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaW5kb3dzIChpVHVuZXMpXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC8od2luZG93cylcXHNudFxcczZcXC4yO1xccyhhcm0pL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdpbmRvd3MgUlRcbiAgICAgICAgICAgIC8od2luZG93c1xcc3Bob25lKD86XFxzb3MpKilbXFxzXFwvXT8oW1xcZFxcLlxcc1xcd10qKS9pLCAgICAgICAgICAgICAgICAgICAvLyBXaW5kb3dzIFBob25lXG4gICAgICAgICAgICAvKHdpbmRvd3NcXHNtb2JpbGV8d2luZG93cylbXFxzXFwvXT8oW250Y2VcXGRcXC5cXHNdK1xcdykvaVxuICAgICAgICAgICAgXSwgW05BTUUsIFtWRVJTSU9OLCBtYXBwZXIuc3RyLCBtYXBzLm9zLndpbmRvd3MudmVyc2lvbl1dLCBbXG4gICAgICAgICAgICAvKHdpbig/PTN8OXxuKXx3aW5cXHM5eFxccykoW250XFxkXFwuXSspL2lcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ1dpbmRvd3MnXSwgW1ZFUlNJT04sIG1hcHBlci5zdHIsIG1hcHMub3Mud2luZG93cy52ZXJzaW9uXV0sIFtcblxuICAgICAgICAgICAgLy8gTW9iaWxlL0VtYmVkZGVkIE9TXG4gICAgICAgICAgICAvXFwoKGJiKSgxMCk7L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCbGFja0JlcnJ5IDEwXG4gICAgICAgICAgICBdLCBbW05BTUUsICdCbGFja0JlcnJ5J10sIFZFUlNJT05dLCBbXG4gICAgICAgICAgICAvKGJsYWNrYmVycnkpXFx3KlxcLz8oW1xcd1xcLl0qKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCbGFja2JlcnJ5XG4gICAgICAgICAgICAvKHRpemVuKVtcXC9cXHNdKFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaXplblxuICAgICAgICAgICAgLyhhbmRyb2lkfHdlYm9zfHBhbG1cXHNvc3xxbnh8YmFkYXxyaW1cXHN0YWJsZXRcXHNvc3xtZWVnb3xjb250aWtpKVtcXC9cXHMtXT8oW1xcd1xcLl0qKS9pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbmRyb2lkL1dlYk9TL1BhbG0vUU5YL0JhZGEvUklNL01lZUdvL0NvbnRpa2lcbiAgICAgICAgICAgIC9saW51eDsuKyhzYWlsZmlzaCk7L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2FpbGZpc2ggT1NcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuICAgICAgICAgICAgLyhzeW1iaWFuXFxzP29zfHN5bWJvc3xzNjAoPz07KSlbXFwvXFxzLV0/KFtcXHdcXC5dKikvaSAgICAgICAgICAgICAgICAgIC8vIFN5bWJpYW5cbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ1N5bWJpYW4nXSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC9cXCgoc2VyaWVzNDApOy9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlcmllcyA0MFxuICAgICAgICAgICAgXSwgW05BTUVdLCBbXG4gICAgICAgICAgICAvbW96aWxsYS4rXFwobW9iaWxlOy4rZ2Vja28uK2ZpcmVmb3gvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJlZm94IE9TXG4gICAgICAgICAgICBdLCBbW05BTUUsICdGaXJlZm94IE9TJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8vIENvbnNvbGVcbiAgICAgICAgICAgIC8obmludGVuZG98cGxheXN0YXRpb24pXFxzKFt3aWRzMzRwb3J0YWJsZXZ1XSspL2ksICAgICAgICAgICAgICAgICAgIC8vIE5pbnRlbmRvL1BsYXlzdGF0aW9uXG5cbiAgICAgICAgICAgIC8vIEdOVS9MaW51eCBiYXNlZFxuICAgICAgICAgICAgLyhtaW50KVtcXC9cXHNcXChdPyhcXHcqKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWludFxuICAgICAgICAgICAgLyhtYWdlaWF8dmVjdG9ybGludXgpWztcXHNdL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFnZWlhL1ZlY3RvckxpbnV4XG4gICAgICAgICAgICAvKGpvbGl8W2t4bG5dP3VidW50dXxkZWJpYW58c3VzZXxvcGVuc3VzZXxnZW50b298KD89XFxzKWFyY2h8c2xhY2t3YXJlfGZlZG9yYXxtYW5kcml2YXxjZW50b3N8cGNsaW51eG9zfHJlZGhhdHx6ZW53YWxrfGxpbnB1cylbXFwvXFxzLV0/KD8hY2hyb20pKFtcXHdcXC4tXSopL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEpvbGkvVWJ1bnR1L0RlYmlhbi9TVVNFL0dlbnRvby9BcmNoL1NsYWNrd2FyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGZWRvcmEvTWFuZHJpdmEvQ2VudE9TL1BDTGludXhPUy9SZWRIYXQvWmVud2Fsay9MaW5wdXNcbiAgICAgICAgICAgIC8oaHVyZHxsaW51eClcXHM/KFtcXHdcXC5dKikvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSHVyZC9MaW51eFxuICAgICAgICAgICAgLyhnbnUpXFxzPyhbXFx3XFwuXSopL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHTlVcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGNyb3MpXFxzW1xcd10rXFxzKFtcXHdcXC5dK1xcdykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENocm9taXVtIE9TXG4gICAgICAgICAgICBdLCBbW05BTUUsICdDaHJvbWl1bSBPUyddLCBWRVJTSU9OXSxbXG5cbiAgICAgICAgICAgIC8vIFNvbGFyaXNcbiAgICAgICAgICAgIC8oc3Vub3MpXFxzPyhbXFx3XFwuXFxkXSopL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvbGFyaXNcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ1NvbGFyaXMnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLy8gQlNEIGJhc2VkXG4gICAgICAgICAgICAvXFxzKFtmcmVudG9wYy1dezAsNH1ic2R8ZHJhZ29uZmx5KVxccz8oW1xcd1xcLl0qKS9pICAgICAgICAgICAgICAgICAgICAvLyBGcmVlQlNEL05ldEJTRC9PcGVuQlNEL1BDLUJTRC9EcmFnb25GbHlcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSxbXG5cbiAgICAgICAgICAgIC8oaGFpa3UpXFxzKFxcdyspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIYWlrdVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLFtcblxuICAgICAgICAgICAgL2NmbmV0d29ya1xcLy4rZGFyd2luL2ksXG4gICAgICAgICAgICAvaXBbaG9uZWFkXXsyLDR9KD86Lipvc1xccyhbXFx3XSspXFxzbGlrZVxcc21hY3w7XFxzb3BlcmEpL2kgICAgICAgICAgICAgLy8gaU9TXG4gICAgICAgICAgICBdLCBbW1ZFUlNJT04sIC9fL2csICcuJ10sIFtOQU1FLCAnaU9TJ11dLCBbXG5cbiAgICAgICAgICAgIC8obWFjXFxzb3NcXHN4KVxccz8oW1xcd1xcc1xcLl0qKS9pLFxuICAgICAgICAgICAgLyhtYWNpbnRvc2h8bWFjKD89X3Bvd2VycGMpXFxzKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFjIE9TXG4gICAgICAgICAgICBdLCBbW05BTUUsICdNYWMgT1MnXSwgW1ZFUlNJT04sIC9fL2csICcuJ11dLCBbXG5cbiAgICAgICAgICAgIC8vIE90aGVyXG4gICAgICAgICAgICAvKCg/Om9wZW4pP3NvbGFyaXMpW1xcL1xccy1dPyhbXFx3XFwuXSopL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTb2xhcmlzXG4gICAgICAgICAgICAvKGFpeClcXHMoKFxcZCkoPz1cXC58XFwpfFxccylbXFx3XFwuXSkqL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBSVhcbiAgICAgICAgICAgIC8ocGxhblxcczl8bWluaXh8YmVvc3xvc1xcLzJ8YW1pZ2Fvc3xtb3JwaG9zfHJpc2NcXHNvc3xvcGVudm1zKS9pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQbGFuOS9NaW5peC9CZU9TL09TMi9BbWlnYU9TL01vcnBoT1MvUklTQ09TL09wZW5WTVNcbiAgICAgICAgICAgIC8odW5peClcXHM/KFtcXHdcXC5dKikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVU5JWFxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dXG4gICAgICAgIF1cbiAgICB9O1xuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIENvbnN0cnVjdG9yXG4gICAgLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8qXG4gICAgdmFyIEJyb3dzZXIgPSBmdW5jdGlvbiAobmFtZSwgdmVyc2lvbikge1xuICAgICAgICB0aGlzW05BTUVdID0gbmFtZTtcbiAgICAgICAgdGhpc1tWRVJTSU9OXSA9IHZlcnNpb247XG4gICAgfTtcbiAgICB2YXIgQ1BVID0gZnVuY3Rpb24gKGFyY2gpIHtcbiAgICAgICAgdGhpc1tBUkNISVRFQ1RVUkVdID0gYXJjaDtcbiAgICB9O1xuICAgIHZhciBEZXZpY2UgPSBmdW5jdGlvbiAodmVuZG9yLCBtb2RlbCwgdHlwZSkge1xuICAgICAgICB0aGlzW1ZFTkRPUl0gPSB2ZW5kb3I7XG4gICAgICAgIHRoaXNbTU9ERUxdID0gbW9kZWw7XG4gICAgICAgIHRoaXNbVFlQRV0gPSB0eXBlO1xuICAgIH07XG4gICAgdmFyIEVuZ2luZSA9IEJyb3dzZXI7XG4gICAgdmFyIE9TID0gQnJvd3NlcjtcbiAgICAqL1xuICAgIHZhciBVQVBhcnNlciA9IGZ1bmN0aW9uICh1YXN0cmluZywgZXh0ZW5zaW9ucykge1xuXG4gICAgICAgIGlmICh0eXBlb2YgdWFzdHJpbmcgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBleHRlbnNpb25zID0gdWFzdHJpbmc7XG4gICAgICAgICAgICB1YXN0cmluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBVQVBhcnNlcikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVUFQYXJzZXIodWFzdHJpbmcsIGV4dGVuc2lvbnMpLmdldFJlc3VsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVhID0gdWFzdHJpbmcgfHwgKCh3aW5kb3cgJiYgd2luZG93Lm5hdmlnYXRvciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgPyB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCA6IEVNUFRZKTtcbiAgICAgICAgdmFyIHJneG1hcCA9IGV4dGVuc2lvbnMgPyB1dGlsLmV4dGVuZChyZWdleGVzLCBleHRlbnNpb25zKSA6IHJlZ2V4ZXM7XG4gICAgICAgIC8vdmFyIGJyb3dzZXIgPSBuZXcgQnJvd3NlcigpO1xuICAgICAgICAvL3ZhciBjcHUgPSBuZXcgQ1BVKCk7XG4gICAgICAgIC8vdmFyIGRldmljZSA9IG5ldyBEZXZpY2UoKTtcbiAgICAgICAgLy92YXIgZW5naW5lID0gbmV3IEVuZ2luZSgpO1xuICAgICAgICAvL3ZhciBvcyA9IG5ldyBPUygpO1xuXG4gICAgICAgIHRoaXMuZ2V0QnJvd3NlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBicm93c2VyID0geyBuYW1lOiB1bmRlZmluZWQsIHZlcnNpb246IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgbWFwcGVyLnJneC5jYWxsKGJyb3dzZXIsIHVhLCByZ3htYXAuYnJvd3Nlcik7XG4gICAgICAgICAgICBicm93c2VyLm1ham9yID0gdXRpbC5tYWpvcihicm93c2VyLnZlcnNpb24pOyAvLyBkZXByZWNhdGVkXG4gICAgICAgICAgICByZXR1cm4gYnJvd3NlcjtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRDUFUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY3B1ID0geyBhcmNoaXRlY3R1cmU6IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgbWFwcGVyLnJneC5jYWxsKGNwdSwgdWEsIHJneG1hcC5jcHUpO1xuICAgICAgICAgICAgcmV0dXJuIGNwdTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXREZXZpY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGV2aWNlID0geyB2ZW5kb3I6IHVuZGVmaW5lZCwgbW9kZWw6IHVuZGVmaW5lZCwgdHlwZTogdW5kZWZpbmVkIH07XG4gICAgICAgICAgICBtYXBwZXIucmd4LmNhbGwoZGV2aWNlLCB1YSwgcmd4bWFwLmRldmljZSk7XG4gICAgICAgICAgICByZXR1cm4gZGV2aWNlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldEVuZ2luZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlbmdpbmUgPSB7IG5hbWU6IHVuZGVmaW5lZCwgdmVyc2lvbjogdW5kZWZpbmVkIH07XG4gICAgICAgICAgICBtYXBwZXIucmd4LmNhbGwoZW5naW5lLCB1YSwgcmd4bWFwLmVuZ2luZSk7XG4gICAgICAgICAgICByZXR1cm4gZW5naW5lO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldE9TID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9zID0geyBuYW1lOiB1bmRlZmluZWQsIHZlcnNpb246IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgbWFwcGVyLnJneC5jYWxsKG9zLCB1YSwgcmd4bWFwLm9zKTtcbiAgICAgICAgICAgIHJldHVybiBvcztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRSZXN1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVhICAgICAgOiB0aGlzLmdldFVBKCksXG4gICAgICAgICAgICAgICAgYnJvd3NlciA6IHRoaXMuZ2V0QnJvd3NlcigpLFxuICAgICAgICAgICAgICAgIGVuZ2luZSAgOiB0aGlzLmdldEVuZ2luZSgpLFxuICAgICAgICAgICAgICAgIG9zICAgICAgOiB0aGlzLmdldE9TKCksXG4gICAgICAgICAgICAgICAgZGV2aWNlICA6IHRoaXMuZ2V0RGV2aWNlKCksXG4gICAgICAgICAgICAgICAgY3B1ICAgICA6IHRoaXMuZ2V0Q1BVKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0VUEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdWE7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2V0VUEgPSBmdW5jdGlvbiAodWFzdHJpbmcpIHtcbiAgICAgICAgICAgIHVhID0gdWFzdHJpbmc7XG4gICAgICAgICAgICAvL2Jyb3dzZXIgPSBuZXcgQnJvd3NlcigpO1xuICAgICAgICAgICAgLy9jcHUgPSBuZXcgQ1BVKCk7XG4gICAgICAgICAgICAvL2RldmljZSA9IG5ldyBEZXZpY2UoKTtcbiAgICAgICAgICAgIC8vZW5naW5lID0gbmV3IEVuZ2luZSgpO1xuICAgICAgICAgICAgLy9vcyA9IG5ldyBPUygpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBVQVBhcnNlci5WRVJTSU9OID0gTElCVkVSU0lPTjtcbiAgICBVQVBhcnNlci5CUk9XU0VSID0ge1xuICAgICAgICBOQU1FICAgIDogTkFNRSxcbiAgICAgICAgTUFKT1IgICA6IE1BSk9SLCAvLyBkZXByZWNhdGVkXG4gICAgICAgIFZFUlNJT04gOiBWRVJTSU9OXG4gICAgfTtcbiAgICBVQVBhcnNlci5DUFUgPSB7XG4gICAgICAgIEFSQ0hJVEVDVFVSRSA6IEFSQ0hJVEVDVFVSRVxuICAgIH07XG4gICAgVUFQYXJzZXIuREVWSUNFID0ge1xuICAgICAgICBNT0RFTCAgIDogTU9ERUwsXG4gICAgICAgIFZFTkRPUiAgOiBWRU5ET1IsXG4gICAgICAgIFRZUEUgICAgOiBUWVBFLFxuICAgICAgICBDT05TT0xFIDogQ09OU09MRSxcbiAgICAgICAgTU9CSUxFICA6IE1PQklMRSxcbiAgICAgICAgU01BUlRUViA6IFNNQVJUVFYsXG4gICAgICAgIFRBQkxFVCAgOiBUQUJMRVQsXG4gICAgICAgIFdFQVJBQkxFOiBXRUFSQUJMRSxcbiAgICAgICAgRU1CRURERUQ6IEVNQkVEREVEXG4gICAgfTtcbiAgICBVQVBhcnNlci5FTkdJTkUgPSB7XG4gICAgICAgIE5BTUUgICAgOiBOQU1FLFxuICAgICAgICBWRVJTSU9OIDogVkVSU0lPTlxuICAgIH07XG4gICAgVUFQYXJzZXIuT1MgPSB7XG4gICAgICAgIE5BTUUgICAgOiBOQU1FLFxuICAgICAgICBWRVJTSU9OIDogVkVSU0lPTlxuICAgIH07XG4gICAgLy9VQVBhcnNlci5VdGlscyA9IHV0aWw7XG5cbiAgICAvLy8vLy8vLy8vL1xuICAgIC8vIEV4cG9ydFxuICAgIC8vLy8vLy8vLy9cblxuXG4gICAgLy8gY2hlY2sganMgZW52aXJvbm1lbnRcbiAgICBpZiAodHlwZW9mKGV4cG9ydHMpICE9PSBVTkRFRl9UWVBFKSB7XG4gICAgICAgIC8vIG5vZGVqcyBlbnZcbiAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09IFVOREVGX1RZUEUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IFVBUGFyc2VyO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IHRlc3QhISEhISEhIVxuICAgICAgICAvKlxuICAgICAgICBpZiAocmVxdWlyZSAmJiByZXF1aXJlLm1haW4gPT09IG1vZHVsZSAmJiBwcm9jZXNzKSB7XG4gICAgICAgICAgICAvLyBjbGlcbiAgICAgICAgICAgIHZhciBqc29uaXplID0gZnVuY3Rpb24gKGFycikge1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIGFycikge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChuZXcgVUFQYXJzZXIoYXJyW2ldKS5nZXRSZXN1bHQoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKEpTT04uc3RyaW5naWZ5KHJlcywgbnVsbCwgMikgKyAnXFxuJyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHByb2Nlc3Muc3RkaW4uaXNUVFkpIHtcbiAgICAgICAgICAgICAgICAvLyB2aWEgYXJnc1xuICAgICAgICAgICAgICAgIGpzb25pemUocHJvY2Vzcy5hcmd2LnNsaWNlKDIpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gdmlhIHBpcGVcbiAgICAgICAgICAgICAgICB2YXIgc3RyID0gJyc7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRpbi5vbigncmVhZGFibGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWQgPSBwcm9jZXNzLnN0ZGluLnJlYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlYWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSByZWFkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRpbi5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBqc29uaXplKHN0ci5yZXBsYWNlKC9cXG4kLywgJycpLnNwbGl0KCdcXG4nKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgKi9cbiAgICAgICAgZXhwb3J0cy5VQVBhcnNlciA9IFVBUGFyc2VyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJlcXVpcmVqcyBlbnYgKG9wdGlvbmFsKVxuICAgICAgICBpZiAodHlwZW9mKGRlZmluZSkgPT09IEZVTkNfVFlQRSAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgICAgICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBVQVBhcnNlcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdykge1xuICAgICAgICAgICAgLy8gYnJvd3NlciBlbnZcbiAgICAgICAgICAgIHdpbmRvdy5VQVBhcnNlciA9IFVBUGFyc2VyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8galF1ZXJ5L1plcHRvIHNwZWNpZmljIChvcHRpb25hbClcbiAgICAvLyBOb3RlOlxuICAgIC8vICAgSW4gQU1EIGVudiB0aGUgZ2xvYmFsIHNjb3BlIHNob3VsZCBiZSBrZXB0IGNsZWFuLCBidXQgalF1ZXJ5IGlzIGFuIGV4Y2VwdGlvbi5cbiAgICAvLyAgIGpRdWVyeSBhbHdheXMgZXhwb3J0cyB0byBnbG9iYWwgc2NvcGUsIHVubGVzcyBqUXVlcnkubm9Db25mbGljdCh0cnVlKSBpcyB1c2VkLFxuICAgIC8vICAgYW5kIHdlIHNob3VsZCBjYXRjaCB0aGF0LlxuICAgIHZhciAkID0gd2luZG93ICYmICh3aW5kb3cualF1ZXJ5IHx8IHdpbmRvdy5aZXB0byk7XG4gICAgaWYgKHR5cGVvZiAkICE9PSBVTkRFRl9UWVBFKSB7XG4gICAgICAgIHZhciBwYXJzZXIgPSBuZXcgVUFQYXJzZXIoKTtcbiAgICAgICAgJC51YSA9IHBhcnNlci5nZXRSZXN1bHQoKTtcbiAgICAgICAgJC51YS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VyLmdldFVBKCk7XG4gICAgICAgIH07XG4gICAgICAgICQudWEuc2V0ID0gZnVuY3Rpb24gKHVhc3RyaW5nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc2V0VUEodWFzdHJpbmcpO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHBhcnNlci5nZXRSZXN1bHQoKTtcbiAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgJC51YVtwcm9wXSA9IHJlc3VsdFtwcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbn0pKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnID8gd2luZG93IDogdGhpcyk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4vKipcbiAqIFVzYWdlIG5vdGU6XG4gKiBUaGlzIG1vZHVsZSBtYWtlcyBhIGJlc3QgZWZmb3J0IHRvIGV4cG9ydCB0aGUgc2FtZSBkYXRhIHdlIHdvdWxkIGludGVybmFsbHkuXG4gKiBBdCBGYWNlYm9vayB3ZSB1c2UgYSBzZXJ2ZXItZ2VuZXJhdGVkIG1vZHVsZSB0aGF0IGRvZXMgdGhlIHBhcnNpbmcgYW5kXG4gKiBleHBvcnRzIHRoZSBkYXRhIGZvciB0aGUgY2xpZW50IHRvIHVzZS4gV2UgY2FuJ3QgcmVseSBvbiBhIHNlcnZlci1zaWRlXG4gKiBpbXBsZW1lbnRhdGlvbiBpbiBvcGVuIHNvdXJjZSBzbyBpbnN0ZWFkIHdlIG1ha2UgdXNlIG9mIGFuIG9wZW4gc291cmNlXG4gKiBsaWJyYXJ5IHRvIGRvIHRoZSBoZWF2eSBsaWZ0aW5nIGFuZCB0aGVuIG1ha2Ugc29tZSBhZGp1c3RtZW50cyBhcyBuZWNlc3NhcnkuXG4gKiBJdCdzIGxpa2VseSB0aGVyZSB3aWxsIGJlIHNvbWUgZGlmZmVyZW5jZXMuIFNvbWUgd2UgY2FuIHNtb290aCBvdmVyLlxuICogT3RoZXJzIGFyZSBnb2luZyB0byBiZSBoYXJkZXIuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVUFQYXJzZXIgPSByZXF1aXJlKCd1YS1wYXJzZXItanMnKTtcblxudmFyIFVOS05PV04gPSAnVW5rbm93bic7XG5cbnZhciBQTEFURk9STV9NQVAgPSB7XG4gICdNYWMgT1MnOiAnTWFjIE9TIFgnXG59O1xuXG4vKipcbiAqIENvbnZlcnQgZnJvbSBVQVBhcnNlciBwbGF0Zm9ybSBuYW1lIHRvIHdoYXQgd2UgZXhwZWN0LlxuICovXG5mdW5jdGlvbiBjb252ZXJ0UGxhdGZvcm1OYW1lKG5hbWUpIHtcbiAgcmV0dXJuIFBMQVRGT1JNX01BUFtuYW1lXSB8fCBuYW1lO1xufVxuXG4vKipcbiAqIEdldCB0aGUgdmVyc2lvbiBudW1iZXIgaW4gcGFydHMuIFRoaXMgaXMgdmVyeSBuYWl2ZS4gV2UgYWN0dWFsbHkgZ2V0IG1ham9yXG4gKiB2ZXJzaW9uIGFzIGEgcGFydCBvZiBVQVBhcnNlciBhbHJlYWR5LCB3aGljaCBpcyBnZW5lcmFsbHkgZ29vZCBlbm91Z2gsIGJ1dFxuICogbGV0J3MgZ2V0IHRoZSBtaW5vciBqdXN0IGluIGNhc2UuXG4gKi9cbmZ1bmN0aW9uIGdldEJyb3dzZXJWZXJzaW9uKHZlcnNpb24pIHtcbiAgaWYgKCF2ZXJzaW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1ham9yOiAnJyxcbiAgICAgIG1pbm9yOiAnJ1xuICAgIH07XG4gIH1cbiAgdmFyIHBhcnRzID0gdmVyc2lvbi5zcGxpdCgnLicpO1xuICByZXR1cm4ge1xuICAgIG1ham9yOiBwYXJ0c1swXSxcbiAgICBtaW5vcjogcGFydHNbMV1cbiAgfTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIFVBIGRhdGEgZm9tIFVBUGFyc2VyIGFuZCB0aGVuIGNvbnZlcnQgaXQgdG8gdGhlIGZvcm1hdCB3ZSdyZVxuICogZXhwZWN0aW5nIGZvciBvdXIgQVBJUy5cbiAqL1xudmFyIHBhcnNlciA9IG5ldyBVQVBhcnNlcigpO1xudmFyIHJlc3VsdHMgPSBwYXJzZXIuZ2V0UmVzdWx0KCk7XG5cbi8vIERvIHNvbWUgY29udmVyc2lvbiBmaXJzdC5cbnZhciBicm93c2VyVmVyc2lvbkRhdGEgPSBnZXRCcm93c2VyVmVyc2lvbihyZXN1bHRzLmJyb3dzZXIudmVyc2lvbik7XG52YXIgdWFEYXRhID0ge1xuICBicm93c2VyQXJjaGl0ZWN0dXJlOiByZXN1bHRzLmNwdS5hcmNoaXRlY3R1cmUgfHwgVU5LTk9XTixcbiAgYnJvd3NlckZ1bGxWZXJzaW9uOiByZXN1bHRzLmJyb3dzZXIudmVyc2lvbiB8fCBVTktOT1dOLFxuICBicm93c2VyTWlub3JWZXJzaW9uOiBicm93c2VyVmVyc2lvbkRhdGEubWlub3IgfHwgVU5LTk9XTixcbiAgYnJvd3Nlck5hbWU6IHJlc3VsdHMuYnJvd3Nlci5uYW1lIHx8IFVOS05PV04sXG4gIGJyb3dzZXJWZXJzaW9uOiByZXN1bHRzLmJyb3dzZXIubWFqb3IgfHwgVU5LTk9XTixcbiAgZGV2aWNlTmFtZTogcmVzdWx0cy5kZXZpY2UubW9kZWwgfHwgVU5LTk9XTixcbiAgZW5naW5lTmFtZTogcmVzdWx0cy5lbmdpbmUubmFtZSB8fCBVTktOT1dOLFxuICBlbmdpbmVWZXJzaW9uOiByZXN1bHRzLmVuZ2luZS52ZXJzaW9uIHx8IFVOS05PV04sXG4gIHBsYXRmb3JtQXJjaGl0ZWN0dXJlOiByZXN1bHRzLmNwdS5hcmNoaXRlY3R1cmUgfHwgVU5LTk9XTixcbiAgcGxhdGZvcm1OYW1lOiBjb252ZXJ0UGxhdGZvcm1OYW1lKHJlc3VsdHMub3MubmFtZSkgfHwgVU5LTk9XTixcbiAgcGxhdGZvcm1WZXJzaW9uOiByZXN1bHRzLm9zLnZlcnNpb24gfHwgVU5LTk9XTixcbiAgcGxhdGZvcm1GdWxsVmVyc2lvbjogcmVzdWx0cy5vcy52ZXJzaW9uIHx8IFVOS05PV05cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdWFEYXRhOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRHJhZnRFZGl0b3JUZXh0Tm9kZS5yZWFjdFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgUmVhY3RET00gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbnZhciBVc2VyQWdlbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9Vc2VyQWdlbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vLyBJbiBJRSwgc3BhbnMgd2l0aCA8YnI+IHRhZ3MgcmVuZGVyIGFzIHR3byBuZXdsaW5lcy4gQnkgcmVuZGVyaW5nIGEgc3BhblxuLy8gd2l0aCBvbmx5IGEgbmV3bGluZSBjaGFyYWN0ZXIsIHdlIGNhbiBiZSBzdXJlIHRvIHJlbmRlciBhIHNpbmdsZSBsaW5lLlxudmFyIHVzZU5ld2xpbmVDaGFyID0gVXNlckFnZW50LmlzQnJvd3NlcignSUUgPD0gMTEnKTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBub2RlIHNob3VsZCBiZSBjb25zaWRlcmVkIGEgbmV3bGluZS5cbiAqL1xuZnVuY3Rpb24gaXNOZXdsaW5lKG5vZGUpIHtcbiAgcmV0dXJuIHVzZU5ld2xpbmVDaGFyID8gbm9kZS50ZXh0Q29udGVudCA9PT0gJ1xcbicgOiBub2RlLnRhZ05hbWUgPT09ICdCUic7XG59XG5cbi8qKlxuICogUGxhY2Vob2xkZXIgZWxlbWVudHMgZm9yIGVtcHR5IHRleHQgY29udGVudC5cbiAqXG4gKiBXaGF0IGlzIHRoaXMgYGRhdGEtdGV4dGAgYXR0cmlidXRlLCBhbnl3YXk/IEl0IHR1cm5zIG91dCB0aGF0IHdlIG5lZWQgdG9cbiAqIHB1dCBhbiBhdHRyaWJ1dGUgb24gdGhlIGxvd2VzdC1sZXZlbCB0ZXh0IG5vZGUgaW4gb3JkZXIgdG8gcHJlc2VydmUgY29ycmVjdFxuICogc3BlbGxjaGVjayBoYW5kbGluZy4gSWYgdGhlIDxzcGFuPiBpcyBuYWtlZCwgQ2hyb21lIGFuZCBTYWZhcmkgbWF5IGRvXG4gKiBiaXphcnJlIHRoaW5ncyB0byBkbyB0aGUgRE9NIC0tIHNwbGl0IHRleHQgbm9kZXMsIGNyZWF0ZSBleHRyYSBzcGFucywgZXRjLlxuICogSWYgdGhlIDxzcGFuPiBoYXMgYW4gYXR0cmlidXRlLCB0aGlzIGFwcGVhcnMgbm90IHRvIGhhcHBlbi5cbiAqIFNlZSBodHRwOi8vanNmaWRkbGUubmV0LzlraGRhdm9kLyBmb3IgdGhlIGZhaWx1cmUgY2FzZSwgYW5kXG4gKiBodHRwOi8vanNmaWRkbGUubmV0LzdwZzE0M2Y3LyBmb3IgdGhlIGZpeGVkIGNhc2UuXG4gKi9cbnZhciBORVdMSU5FX0EgPSB1c2VOZXdsaW5lQ2hhciA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICdzcGFuJyxcbiAgeyBrZXk6ICdBJywgJ2RhdGEtdGV4dCc6ICd0cnVlJyB9LFxuICAnXFxuJ1xuKSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2JyJywgeyBrZXk6ICdBJywgJ2RhdGEtdGV4dCc6ICd0cnVlJyB9KTtcblxudmFyIE5FV0xJTkVfQiA9IHVzZU5ld2xpbmVDaGFyID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgJ3NwYW4nLFxuICB7IGtleTogJ0InLCAnZGF0YS10ZXh0JzogJ3RydWUnIH0sXG4gICdcXG4nXG4pIDogUmVhY3QuY3JlYXRlRWxlbWVudCgnYnInLCB7IGtleTogJ0InLCAnZGF0YS10ZXh0JzogJ3RydWUnIH0pO1xuXG4vKipcbiAqIFRoZSBsb3dlc3QtbGV2ZWwgY29tcG9uZW50IGluIGEgYERyYWZ0RWRpdG9yYCwgdGhlIHRleHQgbm9kZSBjb21wb25lbnRcbiAqIHJlcGxhY2VzIHRoZSBkZWZhdWx0IFJlYWN0IHRleHQgbm9kZSBpbXBsZW1lbnRhdGlvbi4gVGhpcyBhbGxvd3MgdXMgdG9cbiAqIHBlcmZvcm0gY3VzdG9tIGhhbmRsaW5nIG9mIG5ld2xpbmUgYmVoYXZpb3IgYW5kIGF2b2lkIHJlLXJlbmRlcmluZyB0ZXh0XG4gKiBub2RlcyB3aXRoIERPTSBzdGF0ZSB0aGF0IGFscmVhZHkgbWF0Y2hlcyB0aGUgZXhwZWN0YXRpb25zIG9mIG91ciBpbW11dGFibGVcbiAqIGVkaXRvciBzdGF0ZS5cbiAqL1xudmFyIERyYWZ0RWRpdG9yVGV4dE5vZGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRHJhZnRFZGl0b3JUZXh0Tm9kZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJhZnRFZGl0b3JUZXh0Tm9kZShwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcmFmdEVkaXRvclRleHROb2RlKTtcblxuICAgIC8vIEJ5IGZsaXBwaW5nIHRoaXMgZmxhZywgd2UgYWxzbyBrZWVwIGZsaXBwaW5nIGtleXMgd2hpY2ggZm9yY2VzXG4gICAgLy8gUmVhY3QgdG8gcmVtb3VudCB0aGlzIG5vZGUgZXZlcnkgdGltZSBpdCByZXJlbmRlcnMuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5fZm9yY2VGbGFnID0gZmFsc2U7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgRHJhZnRFZGl0b3JUZXh0Tm9kZS5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgIHZhciBub2RlID0gUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIHNob3VsZEJlTmV3bGluZSA9IG5leHRQcm9wcy5jaGlsZHJlbiA9PT0gJyc7XG4gICAgIShub2RlIGluc3RhbmNlb2YgRWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnbm9kZSBpcyBub3QgYW4gRWxlbWVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoc2hvdWxkQmVOZXdsaW5lKSB7XG4gICAgICByZXR1cm4gIWlzTmV3bGluZShub2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGUudGV4dENvbnRlbnQgIT09IG5leHRQcm9wcy5jaGlsZHJlbjtcbiAgfTtcblxuICBEcmFmdEVkaXRvclRleHROb2RlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2ZvcmNlRmxhZyA9ICF0aGlzLl9mb3JjZUZsYWc7XG4gIH07XG5cbiAgRHJhZnRFZGl0b3JUZXh0Tm9kZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMuX2ZvcmNlRmxhZyA9ICF0aGlzLl9mb3JjZUZsYWc7XG4gIH07XG5cbiAgRHJhZnRFZGl0b3JUZXh0Tm9kZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmNoaWxkcmVuID09PSAnJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2ZvcmNlRmxhZyA/IE5FV0xJTkVfQSA6IE5FV0xJTkVfQjtcbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnc3BhbicsXG4gICAgICB7IGtleTogdGhpcy5fZm9yY2VGbGFnID8gJ0EnIDogJ0InLCAnZGF0YS10ZXh0JzogJ3RydWUnIH0sXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gRHJhZnRFZGl0b3JUZXh0Tm9kZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVkaXRvclRleHROb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRHJhZnRFZGl0b3JMZWFmLnJlYWN0XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBEcmFmdEVkaXRvclRleHROb2RlID0gcmVxdWlyZSgnLi9EcmFmdEVkaXRvclRleHROb2RlLnJlYWN0Jyk7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBzZXREcmFmdEVkaXRvclNlbGVjdGlvbiA9IHJlcXVpcmUoJy4vc2V0RHJhZnRFZGl0b3JTZWxlY3Rpb24nKTtcblxuLyoqXG4gKiBBbGwgbGVhZiBub2RlcyBpbiB0aGUgZWRpdG9yIGFyZSBzcGFucyB3aXRoIHNpbmdsZSB0ZXh0IG5vZGVzLiBMZWFmXG4gKiBlbGVtZW50cyBhcmUgc3R5bGVkIGJhc2VkIG9uIHRoZSBtZXJnaW5nIG9mIGFuIG9wdGlvbmFsIGN1c3RvbSBzdHlsZSBtYXBcbiAqIGFuZCBhIGRlZmF1bHQgc3R5bGUgbWFwLlxuICpcbiAqIGBEcmFmdEVkaXRvckxlYWZgIGFsc28gcHJvdmlkZXMgYSB3cmFwcGVyIGZvciBjYWxsaW5nIGludG8gdGhlIGltcGVyYXRpdmVcbiAqIERPTSBTZWxlY3Rpb24gQVBJLiBJbiB0aGlzIHdheSwgdG9wLWxldmVsIGNvbXBvbmVudHMgY2FuIGRlY2xhcmF0aXZlbHlcbiAqIG1haW50YWluIHRoZSBzZWxlY3Rpb24gc3RhdGUuXG4gKi9cbnZhciBEcmFmdEVkaXRvckxlYWYgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRHJhZnRFZGl0b3JMZWFmLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcmFmdEVkaXRvckxlYWYoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyYWZ0RWRpdG9yTGVhZik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIERyYWZ0RWRpdG9yTGVhZi5wcm90b3R5cGUuX3NldFNlbGVjdGlvbiA9IGZ1bmN0aW9uIF9zZXRTZWxlY3Rpb24oKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IHRoaXMucHJvcHMuc2VsZWN0aW9uO1xuXG4gICAgLy8gSWYgc2VsZWN0aW9uIHN0YXRlIGlzIGlycmVsZXZhbnQgdG8gdGhlIHBhcmVudCBibG9jaywgbm8tb3AuXG5cbiAgICBpZiAoc2VsZWN0aW9uID09IG51bGwgfHwgIXNlbGVjdGlvbi5nZXRIYXNGb2N1cygpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJsb2NrID0gX3Byb3BzLmJsb2NrLFxuICAgICAgICBzdGFydCA9IF9wcm9wcy5zdGFydCxcbiAgICAgICAgdGV4dCA9IF9wcm9wcy50ZXh0O1xuXG4gICAgdmFyIGJsb2NrS2V5ID0gYmxvY2suZ2V0S2V5KCk7XG4gICAgdmFyIGVuZCA9IHN0YXJ0ICsgdGV4dC5sZW5ndGg7XG4gICAgaWYgKCFzZWxlY3Rpb24uaGFzRWRnZVdpdGhpbihibG9ja0tleSwgc3RhcnQsIGVuZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgdGhlIGFwcHJvcHJpYXRlIHRhcmdldCBub2RlIGZvciBzZWxlY3Rpb24uIElmIHRoZSBjaGlsZFxuICAgIC8vIGlzIG5vdCBhIHRleHQgbm9kZSwgaXQgaXMgYSA8YnIgLz4gc3BhY2VyLiBJbiB0aGlzIGNhc2UsIHVzZSB0aGVcbiAgICAvLyA8c3Bhbj4gaXRzZWxmIGFzIHRoZSBzZWxlY3Rpb24gdGFyZ2V0LlxuICAgIHZhciBub2RlID0gUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgIW5vZGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWlzc2luZyBub2RlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAhY2hpbGQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWlzc2luZyBjaGlsZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgdGFyZ2V0Tm9kZSA9IHZvaWQgMDtcblxuICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgIHRhcmdldE5vZGUgPSBjaGlsZDtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnRhZ05hbWUgPT09ICdCUicpIHtcbiAgICAgIHRhcmdldE5vZGUgPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXROb2RlID0gY2hpbGQuZmlyc3RDaGlsZDtcbiAgICAgICF0YXJnZXROb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01pc3NpbmcgdGFyZ2V0Tm9kZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICBzZXREcmFmdEVkaXRvclNlbGVjdGlvbihzZWxlY3Rpb24sIHRhcmdldE5vZGUsIGJsb2NrS2V5LCBzdGFydCwgZW5kKTtcbiAgfTtcbiAgLyoqXG4gICAqIEJ5IG1ha2luZyBpbmRpdmlkdWFsIGxlYWYgaW5zdGFuY2VzIGF3YXJlIG9mIHRoZWlyIGNvbnRleHQgd2l0aGluXG4gICAqIHRoZSB0ZXh0IG9mIHRoZSBlZGl0b3IsIHdlIGNhbiBzZXQgb3VyIHNlbGVjdGlvbiByYW5nZSBtb3JlXG4gICAqIGVhc2lseSB0aGFuIHdlIGNvdWxkIGluIHRoZSBub24tUmVhY3Qgd29ybGQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIGRlcGVuZHMgb24gb3VyIG1haW50YWluaW5nIHRpZ2h0IGNvbnRyb2wgb3ZlciB0aGVcbiAgICogRE9NIHN0cnVjdHVyZSBvZiB0aGUgRHJhZnRFZGl0b3IgY29tcG9uZW50LiBJZiBsZWF2ZXMgaGFkIG11bHRpcGxlXG4gICAqIHRleHQgbm9kZXMsIHRoaXMgd291bGQgYmUgaGFyZGVyLlxuICAgKi9cblxuICBEcmFmdEVkaXRvckxlYWYucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICB2YXIgbGVhZk5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzLmxlYWYpO1xuICAgICFsZWFmTm9kZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdNaXNzaW5nIGxlYWZOb2RlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBsZWFmTm9kZS50ZXh0Q29udGVudCAhPT0gbmV4dFByb3BzLnRleHQgfHwgbmV4dFByb3BzLnN0eWxlU2V0ICE9PSB0aGlzLnByb3BzLnN0eWxlU2V0IHx8IG5leHRQcm9wcy5mb3JjZVNlbGVjdGlvbjtcbiAgfTtcblxuICBEcmFmdEVkaXRvckxlYWYucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLl9zZXRTZWxlY3Rpb24oKTtcbiAgfTtcblxuICBEcmFmdEVkaXRvckxlYWYucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fc2V0U2VsZWN0aW9uKCk7XG4gIH07XG5cbiAgRHJhZnRFZGl0b3JMZWFmLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgYmxvY2sgPSB0aGlzLnByb3BzLmJsb2NrO1xuICAgIHZhciB0ZXh0ID0gdGhpcy5wcm9wcy50ZXh0O1xuXG4gICAgLy8gSWYgdGhlIGxlYWYgaXMgYXQgdGhlIGVuZCBvZiBpdHMgYmxvY2sgYW5kIGVuZHMgaW4gYSBzb2Z0IG5ld2xpbmUsIGFwcGVuZFxuICAgIC8vIGFuIGV4dHJhIGxpbmUgZmVlZCBjaGFyYWN0ZXIuIEJyb3dzZXJzIGNvbGxhcHNlIHRyYWlsaW5nIG5ld2xpbmVcbiAgICAvLyBjaGFyYWN0ZXJzLCB3aGljaCBsZWF2ZXMgdGhlIGN1cnNvciBpbiB0aGUgd3JvbmcgcGxhY2UgYWZ0ZXIgYVxuICAgIC8vIHNoaWZ0K2VudGVyLiBUaGUgZXh0cmEgY2hhcmFjdGVyIHJlcGFpcnMgdGhpcy5cblxuICAgIGlmICh0ZXh0LmVuZHNXaXRoKCdcXG4nKSAmJiB0aGlzLnByb3BzLmlzTGFzdCkge1xuICAgICAgdGV4dCArPSAnXFxuJztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGN1c3RvbVN0eWxlTWFwID0gX3Byb3BzMi5jdXN0b21TdHlsZU1hcCxcbiAgICAgICAgY3VzdG9tU3R5bGVGbiA9IF9wcm9wczIuY3VzdG9tU3R5bGVGbixcbiAgICAgICAgb2Zmc2V0S2V5ID0gX3Byb3BzMi5vZmZzZXRLZXksXG4gICAgICAgIHN0eWxlU2V0ID0gX3Byb3BzMi5zdHlsZVNldDtcblxuICAgIHZhciBzdHlsZU9iaiA9IHN0eWxlU2V0LnJlZHVjZShmdW5jdGlvbiAobWFwLCBzdHlsZU5hbWUpIHtcbiAgICAgIHZhciBtZXJnZWRTdHlsZXMgPSB7fTtcbiAgICAgIHZhciBzdHlsZSA9IGN1c3RvbVN0eWxlTWFwW3N0eWxlTmFtZV07XG5cbiAgICAgIGlmIChzdHlsZSAhPT0gdW5kZWZpbmVkICYmIG1hcC50ZXh0RGVjb3JhdGlvbiAhPT0gc3R5bGUudGV4dERlY29yYXRpb24pIHtcbiAgICAgICAgLy8gLnRyaW0oKSBpcyBuZWNlc3NhcnkgZm9yIElFOS8xMC8xMSBhbmQgRWRnZVxuICAgICAgICBtZXJnZWRTdHlsZXMudGV4dERlY29yYXRpb24gPSBbbWFwLnRleHREZWNvcmF0aW9uLCBzdHlsZS50ZXh0RGVjb3JhdGlvbl0uam9pbignICcpLnRyaW0oKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9hc3NpZ24obWFwLCBzdHlsZSwgbWVyZ2VkU3R5bGVzKTtcbiAgICB9LCB7fSk7XG5cbiAgICBpZiAoY3VzdG9tU3R5bGVGbikge1xuICAgICAgdmFyIG5ld1N0eWxlcyA9IGN1c3RvbVN0eWxlRm4oc3R5bGVTZXQsIGJsb2NrKTtcbiAgICAgIHN0eWxlT2JqID0gX2Fzc2lnbihzdHlsZU9iaiwgbmV3U3R5bGVzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIHtcbiAgICAgICAgJ2RhdGEtb2Zmc2V0LWtleSc6IG9mZnNldEtleSxcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoX3JlZikge1xuICAgICAgICAgIHJldHVybiBfdGhpczIubGVhZiA9IF9yZWY7XG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlOiBzdHlsZU9iaiB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgRHJhZnRFZGl0b3JUZXh0Tm9kZSxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgdGV4dFxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIERyYWZ0RWRpdG9yTGVhZjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVkaXRvckxlYWY7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdEVkaXRvckNvbnRlbnRzLWNvcmUucmVhY3RcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBfZXh0ZW5kcyA9IF9hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIERyYWZ0RWRpdG9yQmxvY2sgPSByZXF1aXJlKCcuL0RyYWZ0RWRpdG9yQmxvY2sucmVhY3QnKTtcbnZhciBEcmFmdE9mZnNldEtleSA9IHJlcXVpcmUoJy4vRHJhZnRPZmZzZXRLZXknKTtcbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBjeCA9IHJlcXVpcmUoJ2ZianMvbGliL2N4Jyk7XG52YXIgam9pbkNsYXNzZXMgPSByZXF1aXJlKCdmYmpzL2xpYi9qb2luQ2xhc3NlcycpO1xudmFyIG51bGx0aHJvd3MgPSByZXF1aXJlKCdmYmpzL2xpYi9udWxsdGhyb3dzJyk7XG5cbi8qKlxuICogUHJvdmlkZSBkZWZhdWx0IHN0eWxpbmcgZm9yIGxpc3QgaXRlbXMuIFRoaXMgd2F5LCBsaXN0cyB3aWxsIGJlIHN0eWxlZCB3aXRoXG4gKiBwcm9wZXIgY291bnRlcnMgYW5kIGluZGVudGF0aW9uIGV2ZW4gaWYgdGhlIGNhbGxlciBkb2VzIG5vdCBzcGVjaWZ5XG4gKiB0aGVpciBvd24gc3R5bGluZyBhdCBhbGwuIElmIG1vcmUgdGhhbiBmaXZlIGxldmVscyBvZiBuZXN0aW5nIGFyZSBuZWVkZWQsXG4gKiB0aGUgbmVjZXNzYXJ5IENTUyBjbGFzc2VzIGNhbiBiZSBwcm92aWRlZCB2aWEgYGJsb2NrU3R5bGVGbmAgY29uZmlndXJhdGlvbi5cbiAqL1xudmFyIGdldExpc3RJdGVtQ2xhc3NlcyA9IGZ1bmN0aW9uIGdldExpc3RJdGVtQ2xhc3Nlcyh0eXBlLCBkZXB0aCwgc2hvdWxkUmVzZXRDb3VudCwgZGlyZWN0aW9uKSB7XG4gIHJldHVybiBjeCh7XG4gICAgJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC91bm9yZGVyZWRMaXN0SXRlbSc6IHR5cGUgPT09ICd1bm9yZGVyZWQtbGlzdC1pdGVtJyxcbiAgICAncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L29yZGVyZWRMaXN0SXRlbSc6IHR5cGUgPT09ICdvcmRlcmVkLWxpc3QtaXRlbScsXG4gICAgJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9yZXNldCc6IHNob3VsZFJlc2V0Q291bnQsXG4gICAgJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9kZXB0aDAnOiBkZXB0aCA9PT0gMCxcbiAgICAncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2RlcHRoMSc6IGRlcHRoID09PSAxLFxuICAgICdwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvZGVwdGgyJzogZGVwdGggPT09IDIsXG4gICAgJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9kZXB0aDMnOiBkZXB0aCA9PT0gMyxcbiAgICAncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2RlcHRoNCc6IGRlcHRoID09PSA0LFxuICAgICdwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvbGlzdExUUic6IGRpcmVjdGlvbiA9PT0gJ0xUUicsXG4gICAgJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9saXN0UlRMJzogZGlyZWN0aW9uID09PSAnUlRMJ1xuICB9KTtcbn07XG5cbi8qKlxuICogYERyYWZ0RWRpdG9yQ29udGVudHNgIGlzIHRoZSBjb250YWluZXIgY29tcG9uZW50IGZvciBhbGwgYmxvY2sgY29tcG9uZW50c1xuICogcmVuZGVyZWQgZm9yIGEgYERyYWZ0RWRpdG9yYC4gSXQgaXMgb3B0aW1pemVkIHRvIGFnZ3Jlc3NpdmVseSBhdm9pZFxuICogcmUtcmVuZGVyaW5nIGJsb2NrcyB3aGVuZXZlciBwb3NzaWJsZS5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBpcyBzZXBhcmF0ZSBmcm9tIGBEcmFmdEVkaXRvcmAgYmVjYXVzZSBjZXJ0YWluIHByb3BzXG4gKiAoZm9yIGluc3RhbmNlLCBBUklBIHByb3BzKSBtdXN0IGJlIGFsbG93ZWQgdG8gdXBkYXRlIHdpdGhvdXQgYWZmZWN0aW5nXG4gKiB0aGUgY29udGVudHMgb2YgdGhlIGVkaXRvci5cbiAqL1xuXG52YXIgRHJhZnRFZGl0b3JDb250ZW50cyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEcmFmdEVkaXRvckNvbnRlbnRzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcmFmdEVkaXRvckNvbnRlbnRzKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcmFmdEVkaXRvckNvbnRlbnRzKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgRHJhZnRFZGl0b3JDb250ZW50cy5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgIHZhciBwcmV2RWRpdG9yU3RhdGUgPSB0aGlzLnByb3BzLmVkaXRvclN0YXRlO1xuICAgIHZhciBuZXh0RWRpdG9yU3RhdGUgPSBuZXh0UHJvcHMuZWRpdG9yU3RhdGU7XG5cbiAgICB2YXIgcHJldkRpcmVjdGlvbk1hcCA9IHByZXZFZGl0b3JTdGF0ZS5nZXREaXJlY3Rpb25NYXAoKTtcbiAgICB2YXIgbmV4dERpcmVjdGlvbk1hcCA9IG5leHRFZGl0b3JTdGF0ZS5nZXREaXJlY3Rpb25NYXAoKTtcblxuICAgIC8vIFRleHQgZGlyZWN0aW9uIGhhcyBjaGFuZ2VkIGZvciBvbmUgb3IgbW9yZSBibG9ja3MuIFdlIG11c3QgcmUtcmVuZGVyLlxuICAgIGlmIChwcmV2RGlyZWN0aW9uTWFwICE9PSBuZXh0RGlyZWN0aW9uTWFwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgZGlkSGF2ZUZvY3VzID0gcHJldkVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLmdldEhhc0ZvY3VzKCk7XG4gICAgdmFyIG5vd0hhc0ZvY3VzID0gbmV4dEVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLmdldEhhc0ZvY3VzKCk7XG5cbiAgICBpZiAoZGlkSGF2ZUZvY3VzICE9PSBub3dIYXNGb2N1cykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIG5leHROYXRpdmVDb250ZW50ID0gbmV4dEVkaXRvclN0YXRlLmdldE5hdGl2ZWx5UmVuZGVyZWRDb250ZW50KCk7XG5cbiAgICB2YXIgd2FzQ29tcG9zaW5nID0gcHJldkVkaXRvclN0YXRlLmlzSW5Db21wb3NpdGlvbk1vZGUoKTtcbiAgICB2YXIgbm93Q29tcG9zaW5nID0gbmV4dEVkaXRvclN0YXRlLmlzSW5Db21wb3NpdGlvbk1vZGUoKTtcblxuICAgIC8vIElmIHRoZSBzdGF0ZSBpcyB1bmNoYW5nZWQgb3Igd2UncmUgY3VycmVudGx5IHJlbmRlcmluZyBhIG5hdGl2ZWx5XG4gICAgLy8gcmVuZGVyZWQgc3RhdGUsIHRoZXJlJ3Mgbm90aGluZyBuZXcgdG8gYmUgZG9uZS5cbiAgICBpZiAocHJldkVkaXRvclN0YXRlID09PSBuZXh0RWRpdG9yU3RhdGUgfHwgbmV4dE5hdGl2ZUNvbnRlbnQgIT09IG51bGwgJiYgbmV4dEVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkgPT09IG5leHROYXRpdmVDb250ZW50IHx8IHdhc0NvbXBvc2luZyAmJiBub3dDb21wb3NpbmcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgcHJldkNvbnRlbnQgPSBwcmV2RWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgbmV4dENvbnRlbnQgPSBuZXh0RWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgcHJldkRlY29yYXRvciA9IHByZXZFZGl0b3JTdGF0ZS5nZXREZWNvcmF0b3IoKTtcbiAgICB2YXIgbmV4dERlY29yYXRvciA9IG5leHRFZGl0b3JTdGF0ZS5nZXREZWNvcmF0b3IoKTtcbiAgICByZXR1cm4gd2FzQ29tcG9zaW5nICE9PSBub3dDb21wb3NpbmcgfHwgcHJldkNvbnRlbnQgIT09IG5leHRDb250ZW50IHx8IHByZXZEZWNvcmF0b3IgIT09IG5leHREZWNvcmF0b3IgfHwgbmV4dEVkaXRvclN0YXRlLm11c3RGb3JjZVNlbGVjdGlvbigpO1xuICB9O1xuXG4gIERyYWZ0RWRpdG9yQ29udGVudHMucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYmxvY2tSZW5kZXJNYXAgPSBfcHJvcHMuYmxvY2tSZW5kZXJNYXAsXG4gICAgICAgIGJsb2NrUmVuZGVyZXJGbiA9IF9wcm9wcy5ibG9ja1JlbmRlcmVyRm4sXG4gICAgICAgIGJsb2NrU3R5bGVGbiA9IF9wcm9wcy5ibG9ja1N0eWxlRm4sXG4gICAgICAgIGN1c3RvbVN0eWxlTWFwID0gX3Byb3BzLmN1c3RvbVN0eWxlTWFwLFxuICAgICAgICBjdXN0b21TdHlsZUZuID0gX3Byb3BzLmN1c3RvbVN0eWxlRm4sXG4gICAgICAgIGVkaXRvclN0YXRlID0gX3Byb3BzLmVkaXRvclN0YXRlLFxuICAgICAgICBlZGl0b3JLZXkgPSBfcHJvcHMuZWRpdG9yS2V5LFxuICAgICAgICB0ZXh0RGlyZWN0aW9uYWxpdHkgPSBfcHJvcHMudGV4dERpcmVjdGlvbmFsaXR5O1xuXG5cbiAgICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIHZhciBmb3JjZVNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLm11c3RGb3JjZVNlbGVjdGlvbigpO1xuICAgIHZhciBkZWNvcmF0b3IgPSBlZGl0b3JTdGF0ZS5nZXREZWNvcmF0b3IoKTtcbiAgICB2YXIgZGlyZWN0aW9uTWFwID0gbnVsbHRocm93cyhlZGl0b3JTdGF0ZS5nZXREaXJlY3Rpb25NYXAoKSk7XG5cbiAgICB2YXIgYmxvY2tzQXNBcnJheSA9IGNvbnRlbnQuZ2V0QmxvY2tzQXNBcnJheSgpO1xuICAgIHZhciBwcm9jZXNzZWRCbG9ja3MgPSBbXTtcblxuICAgIHZhciBjdXJyZW50RGVwdGggPSBudWxsO1xuICAgIHZhciBsYXN0V3JhcHBlclRlbXBsYXRlID0gbnVsbDtcblxuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBibG9ja3NBc0FycmF5Lmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIF9ibG9jayA9IGJsb2Nrc0FzQXJyYXlbaWldO1xuICAgICAgdmFyIGtleSA9IF9ibG9jay5nZXRLZXkoKTtcbiAgICAgIHZhciBibG9ja1R5cGUgPSBfYmxvY2suZ2V0VHlwZSgpO1xuXG4gICAgICB2YXIgY3VzdG9tUmVuZGVyZXIgPSBibG9ja1JlbmRlcmVyRm4oX2Jsb2NrKTtcbiAgICAgIHZhciBDdXN0b21Db21wb25lbnQgPSB2b2lkIDAsXG4gICAgICAgICAgY3VzdG9tUHJvcHMgPSB2b2lkIDAsXG4gICAgICAgICAgY3VzdG9tRWRpdGFibGUgPSB2b2lkIDA7XG4gICAgICBpZiAoY3VzdG9tUmVuZGVyZXIpIHtcbiAgICAgICAgQ3VzdG9tQ29tcG9uZW50ID0gY3VzdG9tUmVuZGVyZXIuY29tcG9uZW50O1xuICAgICAgICBjdXN0b21Qcm9wcyA9IGN1c3RvbVJlbmRlcmVyLnByb3BzO1xuICAgICAgICBjdXN0b21FZGl0YWJsZSA9IGN1c3RvbVJlbmRlcmVyLmVkaXRhYmxlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlyZWN0aW9uID0gdGV4dERpcmVjdGlvbmFsaXR5ID8gdGV4dERpcmVjdGlvbmFsaXR5IDogZGlyZWN0aW9uTWFwLmdldChrZXkpO1xuICAgICAgdmFyIG9mZnNldEtleSA9IERyYWZ0T2Zmc2V0S2V5LmVuY29kZShrZXksIDAsIDApO1xuICAgICAgdmFyIGNvbXBvbmVudFByb3BzID0ge1xuICAgICAgICBjb250ZW50U3RhdGU6IGNvbnRlbnQsXG4gICAgICAgIGJsb2NrOiBfYmxvY2ssXG4gICAgICAgIGJsb2NrUHJvcHM6IGN1c3RvbVByb3BzLFxuICAgICAgICBibG9ja1N0eWxlRm46IGJsb2NrU3R5bGVGbixcbiAgICAgICAgY3VzdG9tU3R5bGVNYXA6IGN1c3RvbVN0eWxlTWFwLFxuICAgICAgICBjdXN0b21TdHlsZUZuOiBjdXN0b21TdHlsZUZuLFxuICAgICAgICBkZWNvcmF0b3I6IGRlY29yYXRvcixcbiAgICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb24sXG4gICAgICAgIGZvcmNlU2VsZWN0aW9uOiBmb3JjZVNlbGVjdGlvbixcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIG9mZnNldEtleTogb2Zmc2V0S2V5LFxuICAgICAgICBzZWxlY3Rpb246IHNlbGVjdGlvbixcbiAgICAgICAgdHJlZTogZWRpdG9yU3RhdGUuZ2V0QmxvY2tUcmVlKGtleSlcbiAgICAgIH07XG5cbiAgICAgIHZhciBjb25maWdGb3JUeXBlID0gYmxvY2tSZW5kZXJNYXAuZ2V0KGJsb2NrVHlwZSkgfHwgYmxvY2tSZW5kZXJNYXAuZ2V0KCd1bnN0eWxlZCcpO1xuICAgICAgdmFyIHdyYXBwZXJUZW1wbGF0ZSA9IGNvbmZpZ0ZvclR5cGUud3JhcHBlcjtcblxuICAgICAgdmFyIEVsZW1lbnQgPSBjb25maWdGb3JUeXBlLmVsZW1lbnQgfHwgYmxvY2tSZW5kZXJNYXAuZ2V0KCd1bnN0eWxlZCcpLmVsZW1lbnQ7XG5cbiAgICAgIHZhciBkZXB0aCA9IF9ibG9jay5nZXREZXB0aCgpO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuICAgICAgaWYgKGJsb2NrU3R5bGVGbikge1xuICAgICAgICBjbGFzc05hbWUgPSBibG9ja1N0eWxlRm4oX2Jsb2NrKTtcbiAgICAgIH1cblxuICAgICAgLy8gTGlzdCBpdGVtcyBhcmUgc3BlY2lhbCBzbm93Zmxha2VzLCBzaW5jZSB3ZSBoYW5kbGUgbmVzdGluZyBhbmRcbiAgICAgIC8vIGNvdW50ZXJzIG1hbnVhbGx5LlxuICAgICAgaWYgKEVsZW1lbnQgPT09ICdsaScpIHtcbiAgICAgICAgdmFyIHNob3VsZFJlc2V0Q291bnQgPSBsYXN0V3JhcHBlclRlbXBsYXRlICE9PSB3cmFwcGVyVGVtcGxhdGUgfHwgY3VycmVudERlcHRoID09PSBudWxsIHx8IGRlcHRoID4gY3VycmVudERlcHRoO1xuICAgICAgICBjbGFzc05hbWUgPSBqb2luQ2xhc3NlcyhjbGFzc05hbWUsIGdldExpc3RJdGVtQ2xhc3NlcyhibG9ja1R5cGUsIGRlcHRoLCBzaG91bGRSZXNldENvdW50LCBkaXJlY3Rpb24pKTtcbiAgICAgIH1cblxuICAgICAgdmFyIENvbXBvbmVudCA9IEN1c3RvbUNvbXBvbmVudCB8fCBEcmFmdEVkaXRvckJsb2NrO1xuICAgICAgdmFyIGNoaWxkUHJvcHMgPSB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICAnZGF0YS1ibG9jayc6IHRydWUsXG4gICAgICAgICdkYXRhLWVkaXRvcic6IGVkaXRvcktleSxcbiAgICAgICAgJ2RhdGEtb2Zmc2V0LWtleSc6IG9mZnNldEtleSxcbiAgICAgICAga2V5OiBrZXlcbiAgICAgIH07XG4gICAgICBpZiAoY3VzdG9tRWRpdGFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjaGlsZFByb3BzID0gX2V4dGVuZHMoe30sIGNoaWxkUHJvcHMsIHtcbiAgICAgICAgICBjb250ZW50RWRpdGFibGU6IGN1c3RvbUVkaXRhYmxlLFxuICAgICAgICAgIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkID0gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50LCBjaGlsZFByb3BzLCBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgY29tcG9uZW50UHJvcHMpKTtcblxuICAgICAgcHJvY2Vzc2VkQmxvY2tzLnB1c2goe1xuICAgICAgICBibG9jazogY2hpbGQsXG4gICAgICAgIHdyYXBwZXJUZW1wbGF0ZTogd3JhcHBlclRlbXBsYXRlLFxuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgb2Zmc2V0S2V5OiBvZmZzZXRLZXlcbiAgICAgIH0pO1xuXG4gICAgICBpZiAod3JhcHBlclRlbXBsYXRlKSB7XG4gICAgICAgIGN1cnJlbnREZXB0aCA9IF9ibG9jay5nZXREZXB0aCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudERlcHRoID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGxhc3RXcmFwcGVyVGVtcGxhdGUgPSB3cmFwcGVyVGVtcGxhdGU7XG4gICAgfVxuXG4gICAgLy8gR3JvdXAgY29udGlndW91cyBydW5zIG9mIGJsb2NrcyB0aGF0IGhhdmUgdGhlIHNhbWUgd3JhcHBlclRlbXBsYXRlXG4gICAgdmFyIG91dHB1dEJsb2NrcyA9IFtdO1xuICAgIGZvciAodmFyIF9paSA9IDA7IF9paSA8IHByb2Nlc3NlZEJsb2Nrcy5sZW5ndGg7KSB7XG4gICAgICB2YXIgaW5mbyA9IHByb2Nlc3NlZEJsb2Nrc1tfaWldO1xuICAgICAgaWYgKGluZm8ud3JhcHBlclRlbXBsYXRlKSB7XG4gICAgICAgIHZhciBibG9ja3MgPSBbXTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGJsb2Nrcy5wdXNoKHByb2Nlc3NlZEJsb2Nrc1tfaWldLmJsb2NrKTtcbiAgICAgICAgICBfaWkrKztcbiAgICAgICAgfSB3aGlsZSAoX2lpIDwgcHJvY2Vzc2VkQmxvY2tzLmxlbmd0aCAmJiBwcm9jZXNzZWRCbG9ja3NbX2lpXS53cmFwcGVyVGVtcGxhdGUgPT09IGluZm8ud3JhcHBlclRlbXBsYXRlKTtcbiAgICAgICAgdmFyIHdyYXBwZXJFbGVtZW50ID0gUmVhY3QuY2xvbmVFbGVtZW50KGluZm8ud3JhcHBlclRlbXBsYXRlLCB7XG4gICAgICAgICAga2V5OiBpbmZvLmtleSArICctd3JhcCcsXG4gICAgICAgICAgJ2RhdGEtb2Zmc2V0LWtleSc6IGluZm8ub2Zmc2V0S2V5XG4gICAgICAgIH0sIGJsb2Nrcyk7XG4gICAgICAgIG91dHB1dEJsb2Nrcy5wdXNoKHdyYXBwZXJFbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dEJsb2Nrcy5wdXNoKGluZm8uYmxvY2spO1xuICAgICAgICBfaWkrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyAnZGF0YS1jb250ZW50cyc6ICd0cnVlJyB9LFxuICAgICAgb3V0cHV0QmxvY2tzXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gRHJhZnRFZGl0b3JDb250ZW50cztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVkaXRvckNvbnRlbnRzOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdEVkaXRvckNvbnRlbnRzLnJlYWN0XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdEVkaXRvckNvbnRlbnRzID0gcmVxdWlyZSgnLi9EcmFmdEVkaXRvckNvbnRlbnRzLWNvcmUucmVhY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVkaXRvckNvbnRlbnRzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRHJhZnRFZGl0b3JDb21wb3NpdGlvbkhhbmRsZXJcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi9EcmFmdEZlYXR1cmVGbGFncycpO1xudmFyIERyYWZ0TW9kaWZpZXIgPSByZXF1aXJlKCcuL0RyYWZ0TW9kaWZpZXInKTtcbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcbnZhciBLZXlzID0gcmVxdWlyZSgnZmJqcy9saWIvS2V5cycpO1xuXG52YXIgZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uID0gcmVxdWlyZSgnLi9nZXRFbnRpdHlLZXlGb3JTZWxlY3Rpb24nKTtcbnZhciBpc0V2ZW50SGFuZGxlZCA9IHJlcXVpcmUoJy4vaXNFdmVudEhhbmRsZWQnKTtcbnZhciBpc1NlbGVjdGlvbkF0TGVhZlN0YXJ0ID0gcmVxdWlyZSgnLi9pc1NlbGVjdGlvbkF0TGVhZlN0YXJ0Jyk7XG5cbi8qKlxuICogTWlsbGlzZWNvbmQgZGVsYXkgdG8gYWxsb3cgYGNvbXBvc2l0aW9uc3RhcnRgIHRvIGZpcmUgYWdhaW4gdXBvblxuICogYGNvbXBvc2l0aW9uZW5kYC5cbiAqXG4gKiBUaGlzIGlzIHVzZWQgZm9yIEtvcmVhbiBpbnB1dCB0byBlbnN1cmUgdGhhdCB0eXBpbmcgY2FuIGNvbnRpbnVlIHdpdGhvdXRcbiAqIHRoZSBlZGl0b3IgdHJ5aW5nIHRvIHJlbmRlciB0b28gcXVpY2tseS4gTW9yZSBzcGVjaWZpY2FsbHksIFNhZmFyaSA3LjErXG4gKiB0cmlnZ2VycyBgY29tcG9zaXRpb25zdGFydGAgYSBsaXR0bGUgc2xvd2VyIHRoYW4gQ2hyb21lL0ZGLCB3aGljaFxuICogbGVhZHMgdG8gY29tcG9zZWQgY2hhcmFjdGVycyBiZWluZyByZXNvbHZlZCBhbmQgcmUtcmVuZGVyIG9jY3VycmluZ1xuICogc29vbmVyIHRoYW4gd2Ugd2FudC5cbiAqL1xudmFyIFJFU09MVkVfREVMQVkgPSAyMDtcblxuLyoqXG4gKiBBIGhhbmRmdWwgb2YgdmFyaWFibGVzIHVzZWQgdG8gdHJhY2sgdGhlIGN1cnJlbnQgY29tcG9zaXRpb24gYW5kIGl0c1xuICogcmVzb2x1dGlvbiBzdGF0dXMuIFRoZXNlIGV4aXN0IGF0IHRoZSBtb2R1bGUgbGV2ZWwgYmVjYXVzZSBpdCBpcyBub3RcbiAqIHBvc3NpYmxlIHRvIGhhdmUgY29tcG9zaXRpb25zIG9jY3VycmluZyBpbiBtdWx0aXBsZSBlZGl0b3JzIHNpbXVsdGFuZW91c2x5LFxuICogYW5kIGl0IHNpbXBsaWZpZXMgc3RhdGUgbWFuYWdlbWVudCB3aXRoIHJlc3BlY3QgdG8gdGhlIERyYWZ0RWRpdG9yIGNvbXBvbmVudC5cbiAqL1xudmFyIHJlc29sdmVkID0gZmFsc2U7XG52YXIgc3RpbGxDb21wb3NpbmcgPSBmYWxzZTtcbnZhciB0ZXh0SW5wdXREYXRhID0gJyc7XG5cbnZhciBEcmFmdEVkaXRvckNvbXBvc2l0aW9uSGFuZGxlciA9IHtcbiAgb25CZWZvcmVJbnB1dDogZnVuY3Rpb24gb25CZWZvcmVJbnB1dChlZGl0b3IsIGUpIHtcbiAgICB0ZXh0SW5wdXREYXRhID0gKHRleHRJbnB1dERhdGEgfHwgJycpICsgZS5kYXRhO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBIGBjb21wb3NpdGlvbnN0YXJ0YCBldmVudCBoYXMgZmlyZWQgd2hpbGUgd2UncmUgc3RpbGwgaW4gY29tcG9zaXRpb25cbiAgICogbW9kZS4gQ29udGludWUgdGhlIGN1cnJlbnQgY29tcG9zaXRpb24gc2Vzc2lvbiB0byBwcmV2ZW50IGEgcmUtcmVuZGVyLlxuICAgKi9cbiAgb25Db21wb3NpdGlvblN0YXJ0OiBmdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQoZWRpdG9yKSB7XG4gICAgc3RpbGxDb21wb3NpbmcgPSB0cnVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBdHRlbXB0IHRvIGVuZCB0aGUgY3VycmVudCBjb21wb3NpdGlvbiBzZXNzaW9uLlxuICAgKlxuICAgKiBEZWZlciBoYW5kbGluZyBiZWNhdXNlIGJyb3dzZXIgd2lsbCBzdGlsbCBpbnNlcnQgdGhlIGNoYXJzIGludG8gYWN0aXZlXG4gICAqIGVsZW1lbnQgYWZ0ZXIgYGNvbXBvc2l0aW9uZW5kYC4gSWYgYSBgY29tcG9zaXRpb25zdGFydGAgZXZlbnQgZmlyZXNcbiAgICogYmVmb3JlIGByZXNvbHZlQ29tcG9zaXRpb25gIGV4ZWN1dGVzLCBvdXIgY29tcG9zaXRpb24gc2Vzc2lvbiB3aWxsXG4gICAqIGNvbnRpbnVlLlxuICAgKlxuICAgKiBUaGUgYHJlc29sdmVkYCBmbGFnIGlzIHVzZWZ1bCBiZWNhdXNlIGNlcnRhaW4gSU1FIGludGVyZmFjZXMgZmlyZSB0aGVcbiAgICogYGNvbXBvc2l0aW9uZW5kYCBldmVudCBtdWx0aXBsZSB0aW1lcywgdGh1cyBxdWV1ZWluZyB1cCBtdWx0aXBsZSBhdHRlbXB0c1xuICAgKiBhdCBoYW5kbGluZyB0aGUgY29tcG9zaXRpb24uIFNpbmNlIGhhbmRsaW5nIHRoZSBzYW1lIGNvbXBvc2l0aW9uIGV2ZW50XG4gICAqIHR3aWNlIGNvdWxkIGJyZWFrIHRoZSBET00sIHdlIG9ubHkgdXNlIHRoZSBmaXJzdCBldmVudC4gRXhhbXBsZTogQXJhYmljXG4gICAqIEdvb2dsZSBJbnB1dCBUb29scyBvbiBXaW5kb3dzIDguMSBmaXJlcyBgY29tcG9zaXRpb25lbmRgIHRocmVlIHRpbWVzLlxuICAgKi9cbiAgb25Db21wb3NpdGlvbkVuZDogZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZChlZGl0b3IpIHtcbiAgICByZXNvbHZlZCA9IGZhbHNlO1xuICAgIHN0aWxsQ29tcG9zaW5nID0gZmFsc2U7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXJlc29sdmVkKSB7XG4gICAgICAgIERyYWZ0RWRpdG9yQ29tcG9zaXRpb25IYW5kbGVyLnJlc29sdmVDb21wb3NpdGlvbihlZGl0b3IpO1xuICAgICAgfVxuICAgIH0sIFJFU09MVkVfREVMQVkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbiBTYWZhcmksIGtleWRvd24gZXZlbnRzIG1heSBmaXJlIHdoZW4gY29tbWl0dGluZyBjb21wb3NpdGlvbnMuIElmXG4gICAqIHRoZSBhcnJvdyBrZXlzIGFyZSB1c2VkIHRvIGNvbW1pdCwgcHJldmVudCBkZWZhdWx0IHNvIHRoYXQgdGhlIGN1cnNvclxuICAgKiBkb2Vzbid0IG1vdmUsIG90aGVyd2lzZSBpdCB3aWxsIGp1bXAgYmFjayBub3RpY2VhYmx5IG9uIHJlLXJlbmRlci5cbiAgICovXG4gIG9uS2V5RG93bjogZnVuY3Rpb24gb25LZXlEb3duKGVkaXRvciwgZSkge1xuICAgIGlmICghc3RpbGxDb21wb3NpbmcpIHtcbiAgICAgIC8vIElmIGEga2V5ZG93biBldmVudCBpcyByZWNlaXZlZCBhZnRlciBjb21wb3NpdGlvbmVuZCBidXQgYmVmb3JlIHRoZVxuICAgICAgLy8gMjBtcyB0aW1lciBleHBpcmVzIChleDogdHlwZSBvcHRpb24tRSB0aGVuIGJhY2tzcGFjZSwgb3IgdHlwZSBBIHRoZW5cbiAgICAgIC8vIGJhY2tzcGFjZSBpbiAyLVNldCBLb3JlYW4pLCB3ZSBzaG91bGQgaW1tZWRpYXRlbHkgcmVzb2x2ZSB0aGVcbiAgICAgIC8vIGNvbXBvc2l0aW9uIGFuZCByZWludGVycHJldCB0aGUga2V5IHByZXNzIGluIGVkaXQgbW9kZS5cbiAgICAgIERyYWZ0RWRpdG9yQ29tcG9zaXRpb25IYW5kbGVyLnJlc29sdmVDb21wb3NpdGlvbihlZGl0b3IpO1xuICAgICAgZWRpdG9yLl9vbktleURvd24oZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlLndoaWNoID09PSBLZXlzLlJJR0hUIHx8IGUud2hpY2ggPT09IEtleXMuTEVGVCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogS2V5cHJlc3MgZXZlbnRzIG1heSBmaXJlIHdoZW4gY29tbWl0dGluZyBjb21wb3NpdGlvbnMuIEluIEZpcmVmb3gsXG4gICAqIHByZXNzaW5nIFJFVFVSTiBjb21taXRzIHRoZSBjb21wb3NpdGlvbiBhbmQgaW5zZXJ0cyBleHRyYSBuZXdsaW5lXG4gICAqIGNoYXJhY3RlcnMgdGhhdCB3ZSBkbyBub3Qgd2FudC4gYHByZXZlbnREZWZhdWx0YCBhbGxvd3MgdGhlIGNvbXBvc2l0aW9uXG4gICAqIHRvIGJlIGNvbW1pdHRlZCB3aGlsZSBwcmV2ZW50aW5nIHRoZSBleHRyYSBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgb25LZXlQcmVzczogZnVuY3Rpb24gb25LZXlQcmVzcyhlZGl0b3IsIGUpIHtcbiAgICBpZiAoZS53aGljaCA9PT0gS2V5cy5SRVRVUk4pIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gaW5zZXJ0IGNvbXBvc2VkIGNoYXJhY3RlcnMgaW50byB0aGUgZG9jdW1lbnQuXG4gICAqXG4gICAqIElmIHdlIGFyZSBzdGlsbCBpbiBhIGNvbXBvc2l0aW9uIHNlc3Npb24sIGRvIG5vdGhpbmcuIE90aGVyd2lzZSwgaW5zZXJ0XG4gICAqIHRoZSBjaGFyYWN0ZXJzIGludG8gdGhlIGRvY3VtZW50IGFuZCB0ZXJtaW5hdGUgdGhlIGNvbXBvc2l0aW9uIHNlc3Npb24uXG4gICAqXG4gICAqIElmIG5vIGNoYXJhY3RlcnMgd2VyZSBjb21wb3NlZCAtLSBmb3IgaW5zdGFuY2UsIHRoZSB1c2VyXG4gICAqIGRlbGV0ZWQgYWxsIGNvbXBvc2VkIGNoYXJhY3RlcnMgYW5kIGNvbW1pdHRlZCBub3RoaW5nIG5ldyAtLVxuICAgKiBmb3JjZSBhIHJlLXJlbmRlci4gV2UgYWxzbyByZS1yZW5kZXIgd2hlbiB0aGUgY29tcG9zaXRpb24gb2NjdXJzXG4gICAqIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBsZWFmLCB0byBlbnN1cmUgdGhhdCBpZiB0aGUgYnJvd3NlciBoYXNcbiAgICogY3JlYXRlZCBhIG5ldyB0ZXh0IG5vZGUgZm9yIHRoZSBjb21wb3NpdGlvbiwgd2Ugd2lsbCBkaXNjYXJkIGl0LlxuICAgKlxuICAgKiBSZXNldHRpbmcgaW5uZXJIVE1MIHdpbGwgbW92ZSBmb2N1cyB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBlZGl0b3IsXG4gICAqIHNvIHdlIHVwZGF0ZSB0byBmb3JjZSBpdCBiYWNrIHRvIHRoZSBjb3JyZWN0IHBsYWNlLlxuICAgKi9cbiAgcmVzb2x2ZUNvbXBvc2l0aW9uOiBmdW5jdGlvbiByZXNvbHZlQ29tcG9zaXRpb24oZWRpdG9yKSB7XG4gICAgaWYgKHN0aWxsQ29tcG9zaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVzb2x2ZWQgPSB0cnVlO1xuICAgIHZhciBjb21wb3NlZENoYXJzID0gdGV4dElucHV0RGF0YTtcbiAgICB0ZXh0SW5wdXREYXRhID0gJyc7XG5cbiAgICB2YXIgZWRpdG9yU3RhdGUgPSBFZGl0b3JTdGF0ZS5zZXQoZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZSwge1xuICAgICAgaW5Db21wb3NpdGlvbk1vZGU6IGZhbHNlXG4gICAgfSk7XG5cbiAgICB2YXIgY3VycmVudFN0eWxlID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudElubGluZVN0eWxlKCk7XG4gICAgdmFyIGVudGl0eUtleSA9IGdldEVudGl0eUtleUZvclNlbGVjdGlvbihlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSk7XG5cbiAgICB2YXIgbXVzdFJlc2V0ID0gIWNvbXBvc2VkQ2hhcnMgfHwgaXNTZWxlY3Rpb25BdExlYWZTdGFydChlZGl0b3JTdGF0ZSkgfHwgY3VycmVudFN0eWxlLnNpemUgPiAwIHx8IGVudGl0eUtleSAhPT0gbnVsbDtcblxuICAgIGlmIChtdXN0UmVzZXQpIHtcbiAgICAgIGVkaXRvci5yZXN0b3JlRWRpdG9yRE9NKCk7XG4gICAgfVxuXG4gICAgZWRpdG9yLmV4aXRDdXJyZW50TW9kZSgpO1xuXG4gICAgaWYgKGNvbXBvc2VkQ2hhcnMpIHtcbiAgICAgIGlmIChEcmFmdEZlYXR1cmVGbGFncy5kcmFmdF9oYW5kbGViZWZvcmVpbnB1dF9jb21wb3NlZF90ZXh0ICYmIGVkaXRvci5wcm9wcy5oYW5kbGVCZWZvcmVJbnB1dCAmJiBpc0V2ZW50SGFuZGxlZChlZGl0b3IucHJvcHMuaGFuZGxlQmVmb3JlSW5wdXQoY29tcG9zZWRDaGFycywgZWRpdG9yU3RhdGUpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBJZiBjaGFyYWN0ZXJzIGhhdmUgYmVlbiBjb21wb3NlZCwgcmUtcmVuZGVyaW5nIHdpdGggdGhlIHVwZGF0ZVxuICAgICAgLy8gaXMgc3VmZmljaWVudCB0byByZXNldCB0aGUgZWRpdG9yLlxuICAgICAgdmFyIGNvbnRlbnRTdGF0ZSA9IERyYWZ0TW9kaWZpZXIucmVwbGFjZVRleHQoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCksIGNvbXBvc2VkQ2hhcnMsIGN1cnJlbnRTdHlsZSwgZW50aXR5S2V5KTtcbiAgICAgIGVkaXRvci51cGRhdGUoRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgY29udGVudFN0YXRlLCAnaW5zZXJ0LWNoYXJhY3RlcnMnKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG11c3RSZXNldCkge1xuICAgICAgZWRpdG9yLnVwZGF0ZShFZGl0b3JTdGF0ZS5zZXQoZWRpdG9yU3RhdGUsIHtcbiAgICAgICAgbmF0aXZlbHlSZW5kZXJlZENvbnRlbnQ6IG51bGwsXG4gICAgICAgIGZvcmNlU2VsZWN0aW9uOiB0cnVlXG4gICAgICB9KSk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RWRpdG9yQ29tcG9zaXRpb25IYW5kbGVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRHJhZnRFZGl0b3IucmVhY3RcbiAqIEBmb3JtYXRcbiAqIFxuICogQHByZXZlbnRNdW5nZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBfZXh0ZW5kcyA9IF9hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIERlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwID0gcmVxdWlyZSgnLi9EZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcCcpO1xudmFyIERlZmF1bHREcmFmdElubGluZVN0eWxlID0gcmVxdWlyZSgnLi9EZWZhdWx0RHJhZnRJbmxpbmVTdHlsZScpO1xudmFyIERyYWZ0RWRpdG9yQ29tcG9zaXRpb25IYW5kbGVyID0gcmVxdWlyZSgnLi9EcmFmdEVkaXRvckNvbXBvc2l0aW9uSGFuZGxlcicpO1xudmFyIERyYWZ0RWRpdG9yQ29udGVudHMgPSByZXF1aXJlKCcuL0RyYWZ0RWRpdG9yQ29udGVudHMucmVhY3QnKTtcbnZhciBEcmFmdEVkaXRvckRyYWdIYW5kbGVyID0gcmVxdWlyZSgnLi9EcmFmdEVkaXRvckRyYWdIYW5kbGVyJyk7XG52YXIgRHJhZnRFZGl0b3JFZGl0SGFuZGxlciA9IHJlcXVpcmUoJy4vRHJhZnRFZGl0b3JFZGl0SGFuZGxlcicpO1xudmFyIERyYWZ0RWRpdG9yUGxhY2Vob2xkZXIgPSByZXF1aXJlKCcuL0RyYWZ0RWRpdG9yUGxhY2Vob2xkZXIucmVhY3QnKTtcbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgUmVhY3RET00gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbnZhciBTY3JvbGwgPSByZXF1aXJlKCdmYmpzL2xpYi9TY3JvbGwnKTtcbnZhciBTdHlsZSA9IHJlcXVpcmUoJ2ZianMvbGliL1N0eWxlJyk7XG52YXIgVXNlckFnZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvVXNlckFnZW50Jyk7XG5cbnZhciBjeCA9IHJlcXVpcmUoJ2ZianMvbGliL2N4Jyk7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBnZW5lcmF0ZVJhbmRvbUtleSA9IHJlcXVpcmUoJy4vZ2VuZXJhdGVSYW5kb21LZXknKTtcbnZhciBnZXREZWZhdWx0S2V5QmluZGluZyA9IHJlcXVpcmUoJy4vZ2V0RGVmYXVsdEtleUJpbmRpbmcnKTtcbnZhciBnZXRTY3JvbGxQb3NpdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2dldFNjcm9sbFBvc2l0aW9uJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgbnVsbHRocm93cyA9IHJlcXVpcmUoJ2ZianMvbGliL251bGx0aHJvd3MnKTtcblxudmFyIGlzSUUgPSBVc2VyQWdlbnQuaXNCcm93c2VyKCdJRScpO1xuXG4vLyBJRSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBgaW5wdXRgIGV2ZW50IG9uIGNvbnRlbnRFZGl0YWJsZSwgc28gd2UgY2FuJ3Rcbi8vIG9ic2VydmUgc3BlbGxjaGVjayBiZWhhdmlvci5cbnZhciBhbGxvd1NwZWxsQ2hlY2sgPSAhaXNJRTtcblxuLy8gRGVmaW5lIGEgc2V0IG9mIGhhbmRsZXIgb2JqZWN0cyB0byBjb3JyZXNwb25kIHRvIGVhY2ggcG9zc2libGUgYG1vZGVgXG4vLyBvZiBlZGl0b3IgYmVoYXZpb3IuXG52YXIgaGFuZGxlck1hcCA9IHtcbiAgZWRpdDogRHJhZnRFZGl0b3JFZGl0SGFuZGxlcixcbiAgY29tcG9zaXRlOiBEcmFmdEVkaXRvckNvbXBvc2l0aW9uSGFuZGxlcixcbiAgZHJhZzogRHJhZnRFZGl0b3JEcmFnSGFuZGxlcixcbiAgY3V0OiBudWxsLFxuICByZW5kZXI6IG51bGxcbn07XG5cbi8qKlxuICogYERyYWZ0RWRpdG9yYCBpcyB0aGUgcm9vdCBlZGl0b3IgY29tcG9uZW50LiBJdCBjb21wb3NlcyBhIGBjb250ZW50RWRpdGFibGVgXG4gKiBkaXYsIGFuZCBwcm92aWRlcyBhIHdpZGUgdmFyaWV0eSBvZiB1c2VmdWwgZnVuY3Rpb24gcHJvcHMgZm9yIG1hbmFnaW5nIHRoZVxuICogc3RhdGUgb2YgdGhlIGVkaXRvci4gU2VlIGBEcmFmdEVkaXRvclByb3BzYCBmb3IgZGV0YWlscy5cbiAqL1xudmFyIERyYWZ0RWRpdG9yID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERyYWZ0RWRpdG9yLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcmFmdEVkaXRvcihwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcmFmdEVkaXRvcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmZvY3VzID0gZnVuY3Rpb24gKHNjcm9sbFBvc2l0aW9uKSB7XG4gICAgICB2YXIgZWRpdG9yU3RhdGUgPSBfdGhpcy5wcm9wcy5lZGl0b3JTdGF0ZTtcblxuICAgICAgdmFyIGFscmVhZHlIYXNGb2N1cyA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLmdldEhhc0ZvY3VzKCk7XG4gICAgICB2YXIgZWRpdG9yTm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKF90aGlzLmVkaXRvcik7XG5cbiAgICAgIGlmICghZWRpdG9yTm9kZSkge1xuICAgICAgICAvLyBvbmNlIGluIGEgd2hpbGUgcGVvcGxlIGNhbGwgJ2ZvY3VzJyBpbiBhIHNldFRpbWVvdXQsIGFuZCB0aGUgbm9kZSBoYXNcbiAgICAgICAgLy8gYmVlbiBkZWxldGVkLCBzbyBpdCBjYW4gYmUgbnVsbCBpbiB0aGF0IGNhc2UuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNjcm9sbFBhcmVudCA9IFN0eWxlLmdldFNjcm9sbFBhcmVudChlZGl0b3JOb2RlKTtcblxuICAgICAgdmFyIF9yZWYgPSBzY3JvbGxQb3NpdGlvbiB8fCBnZXRTY3JvbGxQb3NpdGlvbihzY3JvbGxQYXJlbnQpLFxuICAgICAgICAgIHggPSBfcmVmLngsXG4gICAgICAgICAgeSA9IF9yZWYueTtcblxuICAgICAgIShlZGl0b3JOb2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2VkaXRvck5vZGUgaXMgbm90IGFuIEhUTUxFbGVtZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgZWRpdG9yTm9kZS5mb2N1cygpO1xuXG4gICAgICAvLyBSZXN0b3JlIHNjcm9sbCBwb3NpdGlvblxuICAgICAgaWYgKHNjcm9sbFBhcmVudCA9PT0gd2luZG93KSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyh4LCB5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFNjcm9sbC5zZXRUb3Aoc2Nyb2xsUGFyZW50LCB5KTtcbiAgICAgIH1cblxuICAgICAgLy8gT24gQ2hyb21lIGFuZCBTYWZhcmksIGNhbGxpbmcgZm9jdXMgb24gY29udGVudGVkaXRhYmxlIGZvY3VzZXMgdGhlXG4gICAgICAvLyBjdXJzb3IgYXQgdGhlIGZpcnN0IGNoYXJhY3Rlci4gVGhpcyBpcyBzb21ldGhpbmcgeW91IGRvbid0IGV4cGVjdCB3aGVuXG4gICAgICAvLyB5b3UncmUgY2xpY2tpbmcgb24gYW4gaW5wdXQgZWxlbWVudCBidXQgbm90IGRpcmVjdGx5IG9uIGEgY2hhcmFjdGVyLlxuICAgICAgLy8gUHV0IHRoZSBjdXJzb3IgYmFjayB3aGVyZSBpdCB3YXMgYmVmb3JlIHRoZSBibHVyLlxuICAgICAgaWYgKCFhbHJlYWR5SGFzRm9jdXMpIHtcbiAgICAgICAgX3RoaXMudXBkYXRlKEVkaXRvclN0YXRlLmZvcmNlU2VsZWN0aW9uKGVkaXRvclN0YXRlLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5ibHVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGVkaXRvck5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZShfdGhpcy5lZGl0b3IpO1xuICAgICAgIShlZGl0b3JOb2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2VkaXRvck5vZGUgaXMgbm90IGFuIEhUTUxFbGVtZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgZWRpdG9yTm9kZS5ibHVyKCk7XG4gICAgfTtcblxuICAgIF90aGlzLnNldE1vZGUgPSBmdW5jdGlvbiAobW9kZSkge1xuICAgICAgX3RoaXMuX2hhbmRsZXIgPSBoYW5kbGVyTWFwW21vZGVdO1xuICAgIH07XG5cbiAgICBfdGhpcy5leGl0Q3VycmVudE1vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRNb2RlKCdlZGl0Jyk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlc3RvcmVFZGl0b3JET00gPSBmdW5jdGlvbiAoc2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgY29udGVudHNLZXk6IF90aGlzLnN0YXRlLmNvbnRlbnRzS2V5ICsgMSB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmZvY3VzKHNjcm9sbFBvc2l0aW9uKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRDbGlwYm9hcmQgPSBmdW5jdGlvbiAoY2xpcGJvYXJkKSB7XG4gICAgICBfdGhpcy5fY2xpcGJvYXJkID0gY2xpcGJvYXJkO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRDbGlwYm9hcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuX2NsaXBib2FyZDtcbiAgICB9O1xuXG4gICAgX3RoaXMudXBkYXRlID0gZnVuY3Rpb24gKGVkaXRvclN0YXRlKSB7XG4gICAgICBfdGhpcy5fbGF0ZXN0RWRpdG9yU3RhdGUgPSBlZGl0b3JTdGF0ZTtcbiAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKGVkaXRvclN0YXRlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25EcmFnRW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5fZHJhZ0NvdW50Kys7XG4gICAgfTtcblxuICAgIF90aGlzLm9uRHJhZ0xlYXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuX2RyYWdDb3VudC0tO1xuICAgICAgaWYgKF90aGlzLl9kcmFnQ291bnQgPT09IDApIHtcbiAgICAgICAgX3RoaXMuZXhpdEN1cnJlbnRNb2RlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLl9ibG9ja1NlbGVjdEV2ZW50cyA9IGZhbHNlO1xuICAgIF90aGlzLl9jbGlwYm9hcmQgPSBudWxsO1xuICAgIF90aGlzLl9oYW5kbGVyID0gbnVsbDtcbiAgICBfdGhpcy5fZHJhZ0NvdW50ID0gMDtcbiAgICBfdGhpcy5fZWRpdG9yS2V5ID0gcHJvcHMuZWRpdG9yS2V5IHx8IGdlbmVyYXRlUmFuZG9tS2V5KCk7XG4gICAgX3RoaXMuX3BsYWNlaG9sZGVyQWNjZXNzaWJpbGl0eUlEID0gJ3BsYWNlaG9sZGVyLScgKyBfdGhpcy5fZWRpdG9yS2V5O1xuICAgIF90aGlzLl9sYXRlc3RFZGl0b3JTdGF0ZSA9IHByb3BzLmVkaXRvclN0YXRlO1xuICAgIF90aGlzLl9sYXRlc3RDb21taXR0ZWRFZGl0b3JTdGF0ZSA9IHByb3BzLmVkaXRvclN0YXRlO1xuXG4gICAgX3RoaXMuX29uQmVmb3JlSW5wdXQgPSBfdGhpcy5fYnVpbGRIYW5kbGVyKCdvbkJlZm9yZUlucHV0Jyk7XG4gICAgX3RoaXMuX29uQmx1ciA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uQmx1cicpO1xuICAgIF90aGlzLl9vbkNoYXJhY3RlckRhdGEgPSBfdGhpcy5fYnVpbGRIYW5kbGVyKCdvbkNoYXJhY3RlckRhdGEnKTtcbiAgICBfdGhpcy5fb25Db21wb3NpdGlvbkVuZCA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uQ29tcG9zaXRpb25FbmQnKTtcbiAgICBfdGhpcy5fb25Db21wb3NpdGlvblN0YXJ0ID0gX3RoaXMuX2J1aWxkSGFuZGxlcignb25Db21wb3NpdGlvblN0YXJ0Jyk7XG4gICAgX3RoaXMuX29uQ29weSA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uQ29weScpO1xuICAgIF90aGlzLl9vbkN1dCA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uQ3V0Jyk7XG4gICAgX3RoaXMuX29uRHJhZ0VuZCA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uRHJhZ0VuZCcpO1xuICAgIF90aGlzLl9vbkRyYWdPdmVyID0gX3RoaXMuX2J1aWxkSGFuZGxlcignb25EcmFnT3ZlcicpO1xuICAgIF90aGlzLl9vbkRyYWdTdGFydCA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uRHJhZ1N0YXJ0Jyk7XG4gICAgX3RoaXMuX29uRHJvcCA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uRHJvcCcpO1xuICAgIF90aGlzLl9vbklucHV0ID0gX3RoaXMuX2J1aWxkSGFuZGxlcignb25JbnB1dCcpO1xuICAgIF90aGlzLl9vbkZvY3VzID0gX3RoaXMuX2J1aWxkSGFuZGxlcignb25Gb2N1cycpO1xuICAgIF90aGlzLl9vbktleURvd24gPSBfdGhpcy5fYnVpbGRIYW5kbGVyKCdvbktleURvd24nKTtcbiAgICBfdGhpcy5fb25LZXlQcmVzcyA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uS2V5UHJlc3MnKTtcbiAgICBfdGhpcy5fb25LZXlVcCA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uS2V5VXAnKTtcbiAgICBfdGhpcy5fb25Nb3VzZURvd24gPSBfdGhpcy5fYnVpbGRIYW5kbGVyKCdvbk1vdXNlRG93bicpO1xuICAgIF90aGlzLl9vbk1vdXNlVXAgPSBfdGhpcy5fYnVpbGRIYW5kbGVyKCdvbk1vdXNlVXAnKTtcbiAgICBfdGhpcy5fb25QYXN0ZSA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uUGFzdGUnKTtcbiAgICBfdGhpcy5fb25TZWxlY3QgPSBfdGhpcy5fYnVpbGRIYW5kbGVyKCdvblNlbGVjdCcpO1xuXG4gICAgX3RoaXMuZ2V0RWRpdG9yS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLl9lZGl0b3JLZXk7XG4gICAgfTtcblxuICAgIC8vIFNlZSBgcmVzdG9yZUVkaXRvckRPTSgpYC5cbiAgICBfdGhpcy5zdGF0ZSA9IHsgY29udGVudHNLZXk6IDAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGQgYSBtZXRob2QgdGhhdCB3aWxsIHBhc3MgdGhlIGV2ZW50IHRvIHRoZSBzcGVjaWZpZWQgaGFuZGxlciBtZXRob2QuXG4gICAqIFRoaXMgYWxsb3dzIHVzIHRvIGxvb2sgdXAgdGhlIGNvcnJlY3QgaGFuZGxlciBmdW5jdGlvbiBmb3IgdGhlIGN1cnJlbnRcbiAgICogZWRpdG9yIG1vZGUsIGlmIGFueSBoYXMgYmVlbiBzcGVjaWZpZWQuXG4gICAqL1xuXG5cbiAgLyoqXG4gICAqIERlZmluZSBwcm94aWVzIHRoYXQgY2FuIHJvdXRlIGV2ZW50cyB0byB0aGUgY3VycmVudCBoYW5kbGVyLlxuICAgKi9cblxuXG4gIERyYWZ0RWRpdG9yLnByb3RvdHlwZS5fYnVpbGRIYW5kbGVyID0gZnVuY3Rpb24gX2J1aWxkSGFuZGxlcihldmVudE5hbWUpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKCFfdGhpczIucHJvcHMucmVhZE9ubHkpIHtcbiAgICAgICAgdmFyIG1ldGhvZCA9IF90aGlzMi5faGFuZGxlciAmJiBfdGhpczIuX2hhbmRsZXJbZXZlbnROYW1lXTtcbiAgICAgICAgbWV0aG9kICYmIG1ldGhvZChfdGhpczIsIGUpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgRHJhZnRFZGl0b3IucHJvdG90eXBlLl9zaG93UGxhY2Vob2xkZXIgPSBmdW5jdGlvbiBfc2hvd1BsYWNlaG9sZGVyKCkge1xuICAgIHJldHVybiAhIXRoaXMucHJvcHMucGxhY2Vob2xkZXIgJiYgIXRoaXMucHJvcHMuZWRpdG9yU3RhdGUuaXNJbkNvbXBvc2l0aW9uTW9kZSgpICYmICF0aGlzLnByb3BzLmVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkuaGFzVGV4dCgpO1xuICB9O1xuXG4gIERyYWZ0RWRpdG9yLnByb3RvdHlwZS5fcmVuZGVyUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiBfcmVuZGVyUGxhY2Vob2xkZXIoKSB7XG4gICAgaWYgKHRoaXMuX3Nob3dQbGFjZWhvbGRlcigpKSB7XG4gICAgICB2YXIgcGxhY2VIb2xkZXJQcm9wcyA9IHtcbiAgICAgICAgdGV4dDogbnVsbHRocm93cyh0aGlzLnByb3BzLnBsYWNlaG9sZGVyKSxcbiAgICAgICAgZWRpdG9yU3RhdGU6IHRoaXMucHJvcHMuZWRpdG9yU3RhdGUsXG4gICAgICAgIHRleHRBbGlnbm1lbnQ6IHRoaXMucHJvcHMudGV4dEFsaWdubWVudCxcbiAgICAgICAgYWNjZXNzaWJpbGl0eUlEOiB0aGlzLl9wbGFjZWhvbGRlckFjY2Vzc2liaWxpdHlJRFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJhZnRFZGl0b3JQbGFjZWhvbGRlciwgcGxhY2VIb2xkZXJQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIERyYWZ0RWRpdG9yLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYmxvY2tSZW5kZXJNYXAgPSBfcHJvcHMuYmxvY2tSZW5kZXJNYXAsXG4gICAgICAgIGJsb2NrUmVuZGVyZXJGbiA9IF9wcm9wcy5ibG9ja1JlbmRlcmVyRm4sXG4gICAgICAgIGJsb2NrU3R5bGVGbiA9IF9wcm9wcy5ibG9ja1N0eWxlRm4sXG4gICAgICAgIGN1c3RvbVN0eWxlRm4gPSBfcHJvcHMuY3VzdG9tU3R5bGVGbixcbiAgICAgICAgY3VzdG9tU3R5bGVNYXAgPSBfcHJvcHMuY3VzdG9tU3R5bGVNYXAsXG4gICAgICAgIGVkaXRvclN0YXRlID0gX3Byb3BzLmVkaXRvclN0YXRlLFxuICAgICAgICByZWFkT25seSA9IF9wcm9wcy5yZWFkT25seSxcbiAgICAgICAgdGV4dEFsaWdubWVudCA9IF9wcm9wcy50ZXh0QWxpZ25tZW50LFxuICAgICAgICB0ZXh0RGlyZWN0aW9uYWxpdHkgPSBfcHJvcHMudGV4dERpcmVjdGlvbmFsaXR5O1xuXG5cbiAgICB2YXIgcm9vdENsYXNzID0gY3goe1xuICAgICAgJ0RyYWZ0RWRpdG9yL3Jvb3QnOiB0cnVlLFxuICAgICAgJ0RyYWZ0RWRpdG9yL2FsaWduTGVmdCc6IHRleHRBbGlnbm1lbnQgPT09ICdsZWZ0JyxcbiAgICAgICdEcmFmdEVkaXRvci9hbGlnblJpZ2h0JzogdGV4dEFsaWdubWVudCA9PT0gJ3JpZ2h0JyxcbiAgICAgICdEcmFmdEVkaXRvci9hbGlnbkNlbnRlcic6IHRleHRBbGlnbm1lbnQgPT09ICdjZW50ZXInXG4gICAgfSk7XG5cbiAgICB2YXIgY29udGVudFN0eWxlID0ge1xuICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgLy8gZml4IHBhcmVudC1kcmFnZ2FibGUgU2FmYXJpIGJ1Zy4gIzEzMjZcbiAgICAgIHVzZXJTZWxlY3Q6ICd0ZXh0JyxcbiAgICAgIFdlYmtpdFVzZXJTZWxlY3Q6ICd0ZXh0JyxcbiAgICAgIHdoaXRlU3BhY2U6ICdwcmUtd3JhcCcsXG4gICAgICB3b3JkV3JhcDogJ2JyZWFrLXdvcmQnXG4gICAgfTtcblxuICAgIC8vIFRoZSBhcmlhLWV4cGFuZGVkIGFuZCBhcmlhLWhhc3BvcHVwIHByb3BlcnRpZXMgc2hvdWxkIG9ubHkgYmUgcmVuZGVyZWRcbiAgICAvLyBmb3IgYSBjb21ib2JveC5cbiAgICB2YXIgYXJpYVJvbGUgPSB0aGlzLnByb3BzLnJvbGUgfHwgJ3RleHRib3gnO1xuICAgIHZhciBhcmlhRXhwYW5kZWQgPSBhcmlhUm9sZSA9PT0gJ2NvbWJvYm94JyA/ICEhdGhpcy5wcm9wcy5hcmlhRXhwYW5kZWQgOiBudWxsO1xuXG4gICAgdmFyIGVkaXRvckNvbnRlbnRzUHJvcHMgPSB7XG4gICAgICBibG9ja1JlbmRlck1hcDogYmxvY2tSZW5kZXJNYXAsXG4gICAgICBibG9ja1JlbmRlcmVyRm46IGJsb2NrUmVuZGVyZXJGbixcbiAgICAgIGJsb2NrU3R5bGVGbjogYmxvY2tTdHlsZUZuLFxuICAgICAgY3VzdG9tU3R5bGVNYXA6IF9leHRlbmRzKHt9LCBEZWZhdWx0RHJhZnRJbmxpbmVTdHlsZSwgY3VzdG9tU3R5bGVNYXApLFxuICAgICAgY3VzdG9tU3R5bGVGbjogY3VzdG9tU3R5bGVGbixcbiAgICAgIGVkaXRvcktleTogdGhpcy5fZWRpdG9yS2V5LFxuICAgICAgZWRpdG9yU3RhdGU6IGVkaXRvclN0YXRlLFxuICAgICAga2V5OiAnY29udGVudHMnICsgdGhpcy5zdGF0ZS5jb250ZW50c0tleSxcbiAgICAgIHRleHREaXJlY3Rpb25hbGl0eTogdGV4dERpcmVjdGlvbmFsaXR5XG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IGNsYXNzTmFtZTogcm9vdENsYXNzIH0sXG4gICAgICB0aGlzLl9yZW5kZXJQbGFjZWhvbGRlcigpLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGN4KCdEcmFmdEVkaXRvci9lZGl0b3JDb250YWluZXInKSxcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihfcmVmMykge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5lZGl0b3JDb250YWluZXIgPSBfcmVmMztcbiAgICAgICAgICB9IH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCc6IHJlYWRPbmx5ID8gbnVsbCA6IHRoaXMucHJvcHMuYXJpYUFjdGl2ZURlc2NlbmRhbnRJRCxcbiAgICAgICAgICAgICdhcmlhLWF1dG9jb21wbGV0ZSc6IHJlYWRPbmx5ID8gbnVsbCA6IHRoaXMucHJvcHMuYXJpYUF1dG9Db21wbGV0ZSxcbiAgICAgICAgICAgICdhcmlhLWNvbnRyb2xzJzogcmVhZE9ubHkgPyBudWxsIDogdGhpcy5wcm9wcy5hcmlhQ29udHJvbHMsXG4gICAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6IHRoaXMucHJvcHMuYXJpYURlc2NyaWJlZEJ5IHx8IHRoaXMuX3BsYWNlaG9sZGVyQWNjZXNzaWJpbGl0eUlELFxuICAgICAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiByZWFkT25seSA/IG51bGwgOiBhcmlhRXhwYW5kZWQsXG4gICAgICAgICAgICAnYXJpYS1sYWJlbCc6IHRoaXMucHJvcHMuYXJpYUxhYmVsLFxuICAgICAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IHRoaXMucHJvcHMuYXJpYUxhYmVsbGVkQnksXG4gICAgICAgICAgICAnYXJpYS1tdWx0aWxpbmUnOiB0aGlzLnByb3BzLmFyaWFNdWx0aWxpbmUsXG4gICAgICAgICAgICBhdXRvQ2FwaXRhbGl6ZTogdGhpcy5wcm9wcy5hdXRvQ2FwaXRhbGl6ZSxcbiAgICAgICAgICAgIGF1dG9Db21wbGV0ZTogdGhpcy5wcm9wcy5hdXRvQ29tcGxldGUsXG4gICAgICAgICAgICBhdXRvQ29ycmVjdDogdGhpcy5wcm9wcy5hdXRvQ29ycmVjdCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY3goe1xuICAgICAgICAgICAgICAvLyBDaHJvbWUncyBidWlsdC1pbiB0cmFuc2xhdGlvbiBmZWF0dXJlIG11dGF0ZXMgdGhlIERPTSBpbiB3YXlzXG4gICAgICAgICAgICAgIC8vIHRoYXQgRHJhZnQgZG9lc24ndCBleHBlY3QgKGV4OiBhZGRpbmcgPGZvbnQ+IHRhZ3MgaW5zaWRlXG4gICAgICAgICAgICAgIC8vIERyYWZ0RWRpdG9yTGVhZiBzcGFucykgYW5kIGNhdXNlcyBwcm9ibGVtcy4gV2UgYWRkIG5vdHJhbnNsYXRlXG4gICAgICAgICAgICAgIC8vIGhlcmUgd2hpY2ggbWFrZXMgaXRzIGF1dG90cmFuc2xhdGlvbiBza2lwIG92ZXIgdGhpcyBzdWJ0cmVlLlxuICAgICAgICAgICAgICBub3RyYW5zbGF0ZTogIXJlYWRPbmx5LFxuICAgICAgICAgICAgICAncHVibGljL0RyYWZ0RWRpdG9yL2NvbnRlbnQnOiB0cnVlXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNvbnRlbnRFZGl0YWJsZTogIXJlYWRPbmx5LFxuICAgICAgICAgICAgJ2RhdGEtdGVzdGlkJzogdGhpcy5wcm9wcy53ZWJEcml2ZXJUZXN0SUQsXG4gICAgICAgICAgICBvbkJlZm9yZUlucHV0OiB0aGlzLl9vbkJlZm9yZUlucHV0LFxuICAgICAgICAgICAgb25CbHVyOiB0aGlzLl9vbkJsdXIsXG4gICAgICAgICAgICBvbkNvbXBvc2l0aW9uRW5kOiB0aGlzLl9vbkNvbXBvc2l0aW9uRW5kLFxuICAgICAgICAgICAgb25Db21wb3NpdGlvblN0YXJ0OiB0aGlzLl9vbkNvbXBvc2l0aW9uU3RhcnQsXG4gICAgICAgICAgICBvbkNvcHk6IHRoaXMuX29uQ29weSxcbiAgICAgICAgICAgIG9uQ3V0OiB0aGlzLl9vbkN1dCxcbiAgICAgICAgICAgIG9uRHJhZ0VuZDogdGhpcy5fb25EcmFnRW5kLFxuICAgICAgICAgICAgb25EcmFnRW50ZXI6IHRoaXMub25EcmFnRW50ZXIsXG4gICAgICAgICAgICBvbkRyYWdMZWF2ZTogdGhpcy5vbkRyYWdMZWF2ZSxcbiAgICAgICAgICAgIG9uRHJhZ092ZXI6IHRoaXMuX29uRHJhZ092ZXIsXG4gICAgICAgICAgICBvbkRyYWdTdGFydDogdGhpcy5fb25EcmFnU3RhcnQsXG4gICAgICAgICAgICBvbkRyb3A6IHRoaXMuX29uRHJvcCxcbiAgICAgICAgICAgIG9uRm9jdXM6IHRoaXMuX29uRm9jdXMsXG4gICAgICAgICAgICBvbklucHV0OiB0aGlzLl9vbklucHV0LFxuICAgICAgICAgICAgb25LZXlEb3duOiB0aGlzLl9vbktleURvd24sXG4gICAgICAgICAgICBvbktleVByZXNzOiB0aGlzLl9vbktleVByZXNzLFxuICAgICAgICAgICAgb25LZXlVcDogdGhpcy5fb25LZXlVcCxcbiAgICAgICAgICAgIG9uTW91c2VVcDogdGhpcy5fb25Nb3VzZVVwLFxuICAgICAgICAgICAgb25QYXN0ZTogdGhpcy5fb25QYXN0ZSxcbiAgICAgICAgICAgIG9uU2VsZWN0OiB0aGlzLl9vblNlbGVjdCxcbiAgICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczMuZWRpdG9yID0gX3JlZjI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcm9sZTogcmVhZE9ubHkgPyBudWxsIDogYXJpYVJvbGUsXG4gICAgICAgICAgICBzcGVsbENoZWNrOiBhbGxvd1NwZWxsQ2hlY2sgJiYgdGhpcy5wcm9wcy5zcGVsbENoZWNrLFxuICAgICAgICAgICAgc3R5bGU6IGNvbnRlbnRTdHlsZSxcbiAgICAgICAgICAgIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZzogdHJ1ZSxcbiAgICAgICAgICAgIHRhYkluZGV4OiB0aGlzLnByb3BzLnRhYkluZGV4IH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChEcmFmdEVkaXRvckNvbnRlbnRzLCBlZGl0b3JDb250ZW50c1Byb3BzKVxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICBEcmFmdEVkaXRvci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnNldE1vZGUoJ2VkaXQnKTtcblxuICAgIC8qKlxuICAgICAqIElFIGhhcyBhIGhhcmRjb2RlZCBcImZlYXR1cmVcIiB0aGF0IGF0dGVtcHRzIHRvIGNvbnZlcnQgbGluayB0ZXh0IGludG9cbiAgICAgKiBhbmNob3JzIGluIGNvbnRlbnRFZGl0YWJsZSBET00uIFRoaXMgYnJlYWtzIHRoZSBlZGl0b3IncyBleHBlY3RhdGlvbnMgb2ZcbiAgICAgKiB0aGUgRE9NLCBhbmQgY29udHJvbCBpcyBsb3N0LiBEaXNhYmxlIGl0IHRvIG1ha2UgSUUgYmVoYXZlLlxuICAgICAqIFNlZTogaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWVpbnRlcm5hbHMvYXJjaGl2ZS8yMDEwLzA5LzE1L1xuICAgICAqIGllOS1iZXRhLW1pbm9yLWNoYW5nZS1saXN0LmFzcHhcbiAgICAgKi9cbiAgICBpZiAoaXNJRSkge1xuICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ0F1dG9VcmxEZXRlY3QnLCBmYWxzZSwgZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUHJldmVudCBzZWxlY3Rpb24gZXZlbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBjdXJyZW50IGVkaXRvciBzdGF0ZS4gVGhpc1xuICAgKiBpcyBtb3N0bHkgaW50ZW5kZWQgdG8gZGVmZW5kIGFnYWluc3QgSUUsIHdoaWNoIGZpcmVzIG9mZiBgc2VsZWN0aW9uY2hhbmdlYFxuICAgKiBldmVudHMgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gaXMgc2V0IHZpYSB0aGUgYnJvd3NlciBvclxuICAgKiBwcm9ncmFtbWF0aWNhbGx5LiBXZSBvbmx5IGNhcmUgYWJvdXQgc2VsZWN0aW9uIGV2ZW50cyB0aGF0IG9jY3VyIGJlY2F1c2VcbiAgICogb2YgYnJvd3NlciBpbnRlcmFjdGlvbiwgbm90IHJlLXJlbmRlcnMgYW5kIGZvcmNlZCBzZWxlY3Rpb25zLlxuICAgKi9cblxuXG4gIERyYWZ0RWRpdG9yLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICB0aGlzLl9ibG9ja1NlbGVjdEV2ZW50cyA9IHRydWU7XG4gICAgdGhpcy5fbGF0ZXN0RWRpdG9yU3RhdGUgPSBuZXh0UHJvcHMuZWRpdG9yU3RhdGU7XG4gIH07XG5cbiAgRHJhZnRFZGl0b3IucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLl9ibG9ja1NlbGVjdEV2ZW50cyA9IGZhbHNlO1xuICAgIHRoaXMuX2xhdGVzdENvbW1pdHRlZEVkaXRvclN0YXRlID0gdGhpcy5wcm9wcy5lZGl0b3JTdGF0ZTtcbiAgfTtcblxuICAvKipcbiAgICogVXNlZCB2aWEgYHRoaXMuZm9jdXMoKWAuXG4gICAqXG4gICAqIEZvcmNlIGZvY3VzIGJhY2sgb250byB0aGUgZWRpdG9yIG5vZGUuXG4gICAqXG4gICAqIFdlIGF0dGVtcHQgdG8gcHJlc2VydmUgc2Nyb2xsIHBvc2l0aW9uIHdoZW4gZm9jdXNpbmcuIFlvdSBjYW4gYWxzbyBwYXNzXG4gICAqIGEgc3BlY2lmaWVkIHNjcm9sbCBwb3NpdGlvbiAoZm9yIGNhc2VzIGxpa2UgYGN1dGAgYmVoYXZpb3Igd2hlcmUgaXQgc2hvdWxkXG4gICAqIGJlIHJlc3RvcmVkIHRvIGEga25vd24gcG9zaXRpb24pLlxuICAgKi9cblxuXG4gIC8qKlxuICAgKiBVc2VkIHZpYSBgdGhpcy5zZXRNb2RlKC4uLilgLlxuICAgKlxuICAgKiBTZXQgdGhlIGJlaGF2aW9yIG1vZGUgZm9yIHRoZSBlZGl0b3IgY29tcG9uZW50LiBUaGlzIHN3aXRjaGVzIHRoZSBjdXJyZW50XG4gICAqIGhhbmRsZXIgbW9kdWxlIHRvIGVuc3VyZSB0aGF0IERPTSBldmVudHMgYXJlIG1hbmFnZWQgYXBwcm9wcmlhdGVseSBmb3JcbiAgICogdGhlIGFjdGl2ZSBtb2RlLlxuICAgKi9cblxuXG4gIC8qKlxuICAgKiBVc2VkIHZpYSBgdGhpcy5yZXN0b3JlRWRpdG9yRE9NKClgLlxuICAgKlxuICAgKiBGb3JjZSBhIGNvbXBsZXRlIHJlLXJlbmRlciBvZiB0aGUgRHJhZnRFZGl0b3JDb250ZW50cyBiYXNlZCBvbiB0aGUgY3VycmVudFxuICAgKiBFZGl0b3JTdGF0ZS4gVGhpcyBpcyB1c2VmdWwgd2hlbiB3ZSBrbm93IHdlIGFyZSBnb2luZyB0byBsb3NlIGNvbnRyb2wgb2ZcbiAgICogdGhlIERPTSBzdGF0ZSAoY3V0IGNvbW1hbmQsIElNRSkgYW5kIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHRoYXRcbiAgICogcmVjb25jaWxpYXRpb24gb2NjdXJzIG9uIGEgdmVyc2lvbiBvZiB0aGUgRE9NIHRoYXQgaXMgc3luY2hyb25pemVkIHdpdGhcbiAgICogb3VyIEVkaXRvclN0YXRlLlxuICAgKi9cblxuXG4gIC8qKlxuICAgKiBVc2VkIHZpYSBgdGhpcy5zZXRDbGlwYm9hcmQoLi4uKWAuXG4gICAqXG4gICAqIFNldCB0aGUgY2xpcGJvYXJkIHN0YXRlIGZvciBhIGN1dC9jb3B5IGV2ZW50LlxuICAgKi9cblxuXG4gIC8qKlxuICAgKiBVc2VkIHZpYSBgdGhpcy5nZXRDbGlwYm9hcmQoKWAuXG4gICAqXG4gICAqIFJldHJpZXZlIHRoZSBjbGlwYm9hcmQgc3RhdGUgZm9yIGEgY3V0L2NvcHkgZXZlbnQuXG4gICAqL1xuXG5cbiAgLyoqXG4gICAqIFVzZWQgdmlhIGB0aGlzLnVwZGF0ZSguLi4pYC5cbiAgICpcbiAgICogUHJvcGFnYXRlIGEgbmV3IGBFZGl0b3JTdGF0ZWAgb2JqZWN0IHRvIGhpZ2hlci1sZXZlbCBjb21wb25lbnRzLiBUaGlzIGlzXG4gICAqIHRoZSBtZXRob2QgYnkgd2hpY2ggZXZlbnQgaGFuZGxlcnMgaW5mb3JtIHRoZSBgRHJhZnRFZGl0b3JgIGNvbXBvbmVudCBvZlxuICAgKiBzdGF0ZSBjaGFuZ2VzLiBBIGNvbXBvbmVudCB0aGF0IGNvbXBvc2VzIGEgYERyYWZ0RWRpdG9yYCAqKm11c3QqKiBwcm92aWRlXG4gICAqIGFuIGBvbkNoYW5nZWAgcHJvcCB0byByZWNlaXZlIHN0YXRlIHVwZGF0ZXMgcGFzc2VkIGFsb25nIGZyb20gdGhpc1xuICAgKiBmdW5jdGlvbi5cbiAgICovXG5cblxuICAvKipcbiAgICogVXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBvbkRyYWdMZWF2ZSgpYCwgYnkgY291bnRpbmcgdGhlIG51bWJlciBvZiB0aW1lc1xuICAgKiBhIGRyYWdnZWQgZWxlbWVudCBlbnRlcnMgYW5kIGxlYXZlcyB0aGUgZWRpdG9yIChvciBhbnkgb2YgaXRzIGNoaWxkcmVuKSxcbiAgICogdG8gZGV0ZXJtaW5lIHdoZW4gdGhlIGRyYWdnZWQgZWxlbWVudCBhYnNvbHV0ZWx5IGxlYXZlcyB0aGUgZWRpdG9yLlxuICAgKi9cblxuXG4gIC8qKlxuICAgKiBTZWUgYG9uRHJhZ0VudGVyKClgLlxuICAgKi9cblxuXG4gIHJldHVybiBEcmFmdEVkaXRvcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRHJhZnRFZGl0b3IuZGVmYXVsdFByb3BzID0ge1xuICBibG9ja1JlbmRlck1hcDogRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXAsXG4gIGJsb2NrUmVuZGVyZXJGbjogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwsXG4gIGJsb2NrU3R5bGVGbjogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucygnJyksXG4gIGtleUJpbmRpbmdGbjogZ2V0RGVmYXVsdEtleUJpbmRpbmcsXG4gIHJlYWRPbmx5OiBmYWxzZSxcbiAgc3BlbGxDaGVjazogZmFsc2UsXG4gIHN0cmlwUGFzdGVkU3R5bGVzOiBmYWxzZVxufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RWRpdG9yOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ29tcG9zaXRlRHJhZnREZWNvcmF0b3JcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG52YXIgTGlzdCA9IEltbXV0YWJsZS5MaXN0O1xuXG5cbnZhciBERUxJTUlURVIgPSAnLic7XG5cbi8qKlxuICogQSBDb21wb3NpdGVEcmFmdERlY29yYXRvciB0cmF2ZXJzZXMgdGhyb3VnaCBhIGxpc3Qgb2YgRHJhZnREZWNvcmF0b3JcbiAqIGluc3RhbmNlcyB0byBpZGVudGlmeSBzZWN0aW9ucyBvZiBhIENvbnRlbnRCbG9jayB0aGF0IHNob3VsZCBiZSByZW5kZXJlZFxuICogaW4gYSBcImRlY29yYXRlZFwiIG1hbm5lci4gRm9yIGV4YW1wbGUsIGhhc2h0YWdzLCBtZW50aW9ucywgYW5kIGxpbmtzIG1heVxuICogYmUgaW50ZW5kZWQgdG8gc3RhbmQgb3V0IHZpc3VhbGx5LCBiZSByZW5kZXJlZCBhcyBhbmNob3JzLCBldGMuXG4gKlxuICogVGhlIGxpc3Qgb2YgZGVjb3JhdG9ycyBzdXBwbGllZCB0byB0aGUgY29uc3RydWN0b3Igd2lsbCBiZSB1c2VkIGluIHRoZVxuICogb3JkZXIgdGhleSBhcmUgcHJvdmlkZWQuIFRoaXMgYWxsb3dzIHRoZSBjYWxsZXIgdG8gc3BlY2lmeSBhIHByaW9yaXR5IGZvclxuICogc3RyaW5nIG1hdGNoaW5nLCBpbiBjYXNlIG9mIG1hdGNoIGNvbGxpc2lvbnMgYW1vbmcgZGVjb3JhdG9ycy5cbiAqXG4gKiBGb3IgaW5zdGFuY2UsIEkgbWF5IGhhdmUgYSBsaW5rIHdpdGggYSBgI2AgaW4gaXRzIHRleHQuIFRob3VnaCB0aGlzIHNlY3Rpb25cbiAqIG9mIHRleHQgbWF5IG1hdGNoIG91ciBoYXNodGFnIGRlY29yYXRvciwgaXQgc2hvdWxkIG5vdCBiZSB0cmVhdGVkIGFzIGFcbiAqIGhhc2h0YWcuIEkgc2hvdWxkIHRoZXJlZm9yZSBsaXN0IG15IGxpbmsgRHJhZnREZWNvcmF0b3JcbiAqIGJlZm9yZSBteSBoYXNodGFnIERyYWZ0RGVjb3JhdG9yIHdoZW4gY29uc3RydWN0aW5nIHRoaXMgY29tcG9zaXRlXG4gKiBkZWNvcmF0b3IgaW5zdGFuY2UuXG4gKlxuICogVGh1cywgd2hlbiBhIGNvbGxpc2lvbiBsaWtlIHRoaXMgaXMgZW5jb3VudGVyZWQsIHRoZSBlYXJsaWVyIG1hdGNoIGlzXG4gKiBwcmVzZXJ2ZWQgYW5kIHRoZSBuZXcgbWF0Y2ggaXMgZGlzY2FyZGVkLlxuICovXG5cbnZhciBDb21wb3NpdGVEcmFmdERlY29yYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29tcG9zaXRlRHJhZnREZWNvcmF0b3IoZGVjb3JhdG9ycykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb21wb3NpdGVEcmFmdERlY29yYXRvcik7XG5cbiAgICAvLyBDb3B5IHRoZSBkZWNvcmF0b3IgYXJyYXksIHNpbmNlIHdlIHVzZSB0aGlzIGFycmF5IG9yZGVyIHRvIGRldGVybWluZVxuICAgIC8vIHByZWNlZGVuY2Ugb2YgZGVjb3JhdGlvbiBtYXRjaGluZy4gSWYgdGhlIGFycmF5IGlzIG11dGF0ZWQgZXh0ZXJuYWxseSxcbiAgICAvLyB3ZSBkb24ndCB3YW50IHRvIGJlIGFmZmVjdGVkIGhlcmUuXG4gICAgdGhpcy5fZGVjb3JhdG9ycyA9IGRlY29yYXRvcnMuc2xpY2UoKTtcbiAgfVxuXG4gIENvbXBvc2l0ZURyYWZ0RGVjb3JhdG9yLnByb3RvdHlwZS5nZXREZWNvcmF0aW9ucyA9IGZ1bmN0aW9uIGdldERlY29yYXRpb25zKGJsb2NrLCBjb250ZW50U3RhdGUpIHtcbiAgICB2YXIgZGVjb3JhdGlvbnMgPSBBcnJheShibG9jay5nZXRUZXh0KCkubGVuZ3RoKS5maWxsKG51bGwpO1xuXG4gICAgdGhpcy5fZGVjb3JhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uICggLypvYmplY3QqL2RlY29yYXRvciwgLypudW1iZXIqL2lpKSB7XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgc3RyYXRlZ3kgPSBkZWNvcmF0b3Iuc3RyYXRlZ3k7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayggLypudW1iZXIqL3N0YXJ0LCAvKm51bWJlciovZW5kKSB7XG4gICAgICAgIC8vIEZpbmQgb3V0IGlmIGFueSBvZiBvdXIgbWF0Y2hpbmcgcmFuZ2UgaXMgYWxyZWFkeSBvY2N1cGllZFxuICAgICAgICAvLyBieSBhbm90aGVyIGRlY29yYXRvci4gSWYgc28sIGRpc2NhcmQgdGhlIG1hdGNoLiBPdGhlcndpc2UsIHN0b3JlXG4gICAgICAgIC8vIHRoZSBjb21wb25lbnQga2V5IGZvciByZW5kZXJpbmcuXG4gICAgICAgIGlmIChjYW5PY2N1cHlTbGljZShkZWNvcmF0aW9ucywgc3RhcnQsIGVuZCkpIHtcbiAgICAgICAgICBvY2N1cHlTbGljZShkZWNvcmF0aW9ucywgc3RhcnQsIGVuZCwgaWkgKyBERUxJTUlURVIgKyBjb3VudGVyKTtcbiAgICAgICAgICBjb3VudGVyKys7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBzdHJhdGVneShibG9jaywgY2FsbGJhY2ssIGNvbnRlbnRTdGF0ZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gTGlzdChkZWNvcmF0aW9ucyk7XG4gIH07XG5cbiAgQ29tcG9zaXRlRHJhZnREZWNvcmF0b3IucHJvdG90eXBlLmdldENvbXBvbmVudEZvcktleSA9IGZ1bmN0aW9uIGdldENvbXBvbmVudEZvcktleShrZXkpIHtcbiAgICB2YXIgY29tcG9uZW50S2V5ID0gcGFyc2VJbnQoa2V5LnNwbGl0KERFTElNSVRFUilbMF0sIDEwKTtcbiAgICByZXR1cm4gdGhpcy5fZGVjb3JhdG9yc1tjb21wb25lbnRLZXldLmNvbXBvbmVudDtcbiAgfTtcblxuICBDb21wb3NpdGVEcmFmdERlY29yYXRvci5wcm90b3R5cGUuZ2V0UHJvcHNGb3JLZXkgPSBmdW5jdGlvbiBnZXRQcm9wc0ZvcktleShrZXkpIHtcbiAgICB2YXIgY29tcG9uZW50S2V5ID0gcGFyc2VJbnQoa2V5LnNwbGl0KERFTElNSVRFUilbMF0sIDEwKTtcbiAgICByZXR1cm4gdGhpcy5fZGVjb3JhdG9yc1tjb21wb25lbnRLZXldLnByb3BzO1xuICB9O1xuXG4gIHJldHVybiBDb21wb3NpdGVEcmFmdERlY29yYXRvcjtcbn0oKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB3ZSBjYW4gb2NjdXB5IHRoZSBzcGVjaWZpZWQgc2xpY2Ugb2YgdGhlIGRlY29yYXRpb25zXG4gKiBhcnJheS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbk9jY3VweVNsaWNlKGRlY29yYXRpb25zLCBzdGFydCwgZW5kKSB7XG4gIGZvciAodmFyIGlpID0gc3RhcnQ7IGlpIDwgZW5kOyBpaSsrKSB7XG4gICAgaWYgKGRlY29yYXRpb25zW2lpXSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFNwbGljZSB0aGUgc3BlY2lmaWVkIGNvbXBvbmVudCBpbnRvIG91ciBkZWNvcmF0aW9uIGFycmF5IGF0IHRoZSBkZXNpcmVkXG4gKiByYW5nZS5cbiAqL1xuZnVuY3Rpb24gb2NjdXB5U2xpY2UodGFyZ2V0QXJyLCBzdGFydCwgZW5kLCBjb21wb25lbnRLZXkpIHtcbiAgZm9yICh2YXIgaWkgPSBzdGFydDsgaWkgPCBlbmQ7IGlpKyspIHtcbiAgICB0YXJnZXRBcnJbaWldID0gY29tcG9uZW50S2V5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9zaXRlRHJhZnREZWNvcmF0b3I7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBtb3ZlQmxvY2tJbkNvbnRlbnRTdGF0ZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ29udGVudEJsb2NrTm9kZSA9IHJlcXVpcmUoJy4vQ29udGVudEJsb2NrTm9kZScpO1xudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG52YXIgZ2V0TmV4dERlbGltaXRlckJsb2NrS2V5ID0gcmVxdWlyZSgnLi9nZXROZXh0RGVsaW1pdGVyQmxvY2tLZXknKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIE9yZGVyZWRNYXAgPSBJbW11dGFibGUuT3JkZXJlZE1hcCxcbiAgICBMaXN0ID0gSW1tdXRhYmxlLkxpc3Q7XG5cblxudmFyIHRyYW5zZm9ybUJsb2NrID0gZnVuY3Rpb24gdHJhbnNmb3JtQmxvY2soa2V5LCBibG9ja01hcCwgZnVuYykge1xuICBpZiAoIWtleSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBibG9jayA9IGJsb2NrTWFwLmdldChrZXkpO1xuXG4gIGlmICghYmxvY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBibG9ja01hcC5zZXQoa2V5LCBmdW5jKGJsb2NrKSk7XG59O1xuXG52YXIgdXBkYXRlQmxvY2tNYXBMaW5rcyA9IGZ1bmN0aW9uIHVwZGF0ZUJsb2NrTWFwTGlua3MoYmxvY2tNYXAsIG9yaWdpbmFsQmxvY2tUb0JlTW92ZWQsIG9yaWdpbmFsVGFyZ2V0QmxvY2ssIGluc2VydGlvbk1vZGUsIGlzRXhwZXJpbWVudGFsVHJlZUJsb2NrKSB7XG4gIGlmICghaXNFeHBlcmltZW50YWxUcmVlQmxvY2spIHtcbiAgICByZXR1cm4gYmxvY2tNYXA7XG4gIH1cbiAgLy8gcG9zc2libGUgdmFsdWVzIG9mICdpbnNlcnRpb25Nb2RlJyBhcmU6ICdhZnRlcicsICdiZWZvcmUnXG4gIHZhciBpc0luc2VydGVkQWZ0ZXJUYXJnZXQgPSBpbnNlcnRpb25Nb2RlID09PSAnYWZ0ZXInO1xuXG4gIHZhciBvcmlnaW5hbEJsb2NrS2V5ID0gb3JpZ2luYWxCbG9ja1RvQmVNb3ZlZC5nZXRLZXkoKTtcbiAgdmFyIG9yaWdpbmFsVGFyZ2V0S2V5ID0gb3JpZ2luYWxUYXJnZXRCbG9jay5nZXRLZXkoKTtcbiAgdmFyIG9yaWdpbmFsUGFyZW50S2V5ID0gb3JpZ2luYWxCbG9ja1RvQmVNb3ZlZC5nZXRQYXJlbnRLZXkoKTtcbiAgdmFyIG9yaWdpbmFsTmV4dFNpYmxpbmdLZXkgPSBvcmlnaW5hbEJsb2NrVG9CZU1vdmVkLmdldE5leHRTaWJsaW5nS2V5KCk7XG4gIHZhciBvcmlnaW5hbFByZXZTaWJsaW5nS2V5ID0gb3JpZ2luYWxCbG9ja1RvQmVNb3ZlZC5nZXRQcmV2U2libGluZ0tleSgpO1xuICB2YXIgbmV3UGFyZW50S2V5ID0gb3JpZ2luYWxUYXJnZXRCbG9jay5nZXRQYXJlbnRLZXkoKTtcbiAgdmFyIG5ld05leHRTaWJsaW5nS2V5ID0gaXNJbnNlcnRlZEFmdGVyVGFyZ2V0ID8gb3JpZ2luYWxUYXJnZXRCbG9jay5nZXROZXh0U2libGluZ0tleSgpIDogb3JpZ2luYWxUYXJnZXRLZXk7XG4gIHZhciBuZXdQcmV2U2libGluZ0tleSA9IGlzSW5zZXJ0ZWRBZnRlclRhcmdldCA/IG9yaWdpbmFsVGFyZ2V0S2V5IDogb3JpZ2luYWxUYXJnZXRCbG9jay5nZXRQcmV2U2libGluZ0tleSgpO1xuXG4gIHJldHVybiBibG9ja01hcC53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChibG9ja3MpIHtcbiAgICAvLyB1cGRhdGUgb2xkIHBhcmVudFxuICAgIHRyYW5zZm9ybUJsb2NrKG9yaWdpbmFsUGFyZW50S2V5LCBibG9ja3MsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgdmFyIHBhcmVudENoaWxkcmVuTGlzdCA9IGJsb2NrLmdldENoaWxkS2V5cygpO1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgY2hpbGRyZW46IHBhcmVudENoaWxkcmVuTGlzdFsnZGVsZXRlJ10ocGFyZW50Q2hpbGRyZW5MaXN0LmluZGV4T2Yob3JpZ2luYWxCbG9ja0tleSkpXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBvbGQgcHJldlxuICAgIHRyYW5zZm9ybUJsb2NrKG9yaWdpbmFsUHJldlNpYmxpbmdLZXksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICBuZXh0U2libGluZzogb3JpZ2luYWxOZXh0U2libGluZ0tleVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgb2xkIG5leHRcbiAgICB0cmFuc2Zvcm1CbG9jayhvcmlnaW5hbE5leHRTaWJsaW5nS2V5LCBibG9ja3MsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgcHJldlNpYmxpbmc6IG9yaWdpbmFsUHJldlNpYmxpbmdLZXlcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIG5ldyBuZXh0XG4gICAgdHJhbnNmb3JtQmxvY2sobmV3TmV4dFNpYmxpbmdLZXksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICBwcmV2U2libGluZzogb3JpZ2luYWxCbG9ja0tleVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgbmV3IHByZXZcbiAgICB0cmFuc2Zvcm1CbG9jayhuZXdQcmV2U2libGluZ0tleSwgYmxvY2tzLCBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIG5leHRTaWJsaW5nOiBvcmlnaW5hbEJsb2NrS2V5XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBuZXcgcGFyZW50XG4gICAgdHJhbnNmb3JtQmxvY2sobmV3UGFyZW50S2V5LCBibG9ja3MsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgdmFyIG5ld1BhcmVudENoaWxkcmVuTGlzdCA9IGJsb2NrLmdldENoaWxkS2V5cygpO1xuICAgICAgdmFyIHRhcmdldEJsb2NrSW5kZXggPSBuZXdQYXJlbnRDaGlsZHJlbkxpc3QuaW5kZXhPZihvcmlnaW5hbFRhcmdldEtleSk7XG5cbiAgICAgIHZhciBpbnNlcnRpb25JbmRleCA9IGlzSW5zZXJ0ZWRBZnRlclRhcmdldCA/IHRhcmdldEJsb2NrSW5kZXggKyAxIDogdGFyZ2V0QmxvY2tJbmRleCAhPT0gMCA/IHRhcmdldEJsb2NrSW5kZXggLSAxIDogMDtcblxuICAgICAgdmFyIG5ld0NoaWxkcmVuQXJyYXkgPSBuZXdQYXJlbnRDaGlsZHJlbkxpc3QudG9BcnJheSgpO1xuICAgICAgbmV3Q2hpbGRyZW5BcnJheS5zcGxpY2UoaW5zZXJ0aW9uSW5kZXgsIDAsIG9yaWdpbmFsQmxvY2tLZXkpO1xuXG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICBjaGlsZHJlbjogTGlzdChuZXdDaGlsZHJlbkFycmF5KVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgYmxvY2tcbiAgICB0cmFuc2Zvcm1CbG9jayhvcmlnaW5hbEJsb2NrS2V5LCBibG9ja3MsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgbmV4dFNpYmxpbmc6IG5ld05leHRTaWJsaW5nS2V5LFxuICAgICAgICBwcmV2U2libGluZzogbmV3UHJldlNpYmxpbmdLZXksXG4gICAgICAgIHBhcmVudDogbmV3UGFyZW50S2V5XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG52YXIgbW92ZUJsb2NrSW5Db250ZW50U3RhdGUgPSBmdW5jdGlvbiBtb3ZlQmxvY2tJbkNvbnRlbnRTdGF0ZShjb250ZW50U3RhdGUsIGJsb2NrVG9CZU1vdmVkLCB0YXJnZXRCbG9jaywgaW5zZXJ0aW9uTW9kZSkge1xuICAhKGluc2VydGlvbk1vZGUgIT09ICdyZXBsYWNlJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVwbGFjaW5nIGJsb2NrcyBpcyBub3Qgc3VwcG9ydGVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICB2YXIgdGFyZ2V0S2V5ID0gdGFyZ2V0QmxvY2suZ2V0S2V5KCk7XG4gIHZhciBibG9ja0tleSA9IGJsb2NrVG9CZU1vdmVkLmdldEtleSgpO1xuXG4gICEoYmxvY2tLZXkgIT09IHRhcmdldEtleSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnQmxvY2sgY2Fubm90IGJlIG1vdmVkIG5leHQgdG8gaXRzZWxmLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICB2YXIgYmxvY2tNYXAgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tNYXAoKTtcbiAgdmFyIGlzRXhwZXJpbWVudGFsVHJlZUJsb2NrID0gYmxvY2tUb0JlTW92ZWQgaW5zdGFuY2VvZiBDb250ZW50QmxvY2tOb2RlO1xuXG4gIHZhciBibG9ja3NUb0JlTW92ZWQgPSBbYmxvY2tUb0JlTW92ZWRdO1xuICB2YXIgYmxvY2tNYXBXaXRob3V0QmxvY2tzVG9CZU1vdmVkID0gYmxvY2tNYXBbJ2RlbGV0ZSddKGJsb2NrS2V5KTtcblxuICBpZiAoaXNFeHBlcmltZW50YWxUcmVlQmxvY2spIHtcbiAgICBibG9ja3NUb0JlTW92ZWQgPSBbXTtcbiAgICBibG9ja01hcFdpdGhvdXRCbG9ja3NUb0JlTW92ZWQgPSBibG9ja01hcC53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChibG9ja3MpIHtcbiAgICAgIHZhciBuZXh0U2libGluZ0tleSA9IGJsb2NrVG9CZU1vdmVkLmdldE5leHRTaWJsaW5nS2V5KCk7XG4gICAgICB2YXIgbmV4dERlbGltaXRlckJsb2NrS2V5ID0gZ2V0TmV4dERlbGltaXRlckJsb2NrS2V5KGJsb2NrVG9CZU1vdmVkLCBibG9ja3MpO1xuXG4gICAgICBibG9ja3MudG9TZXEoKS5za2lwVW50aWwoZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICAgIHJldHVybiBibG9jay5nZXRLZXkoKSA9PT0gYmxvY2tLZXk7XG4gICAgICB9KS50YWtlV2hpbGUoZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICAgIHZhciBrZXkgPSBibG9jay5nZXRLZXkoKTtcbiAgICAgICAgdmFyIGlzQmxvY2tUb0JlTW92ZWQgPSBrZXkgPT09IGJsb2NrS2V5O1xuICAgICAgICB2YXIgaGFzTmV4dFNpYmxpbmdBbmRJc05vdE5leHRTaWJsaW5nID0gbmV4dFNpYmxpbmdLZXkgJiYga2V5ICE9PSBuZXh0U2libGluZ0tleTtcbiAgICAgICAgdmFyIGRvZXNOb3RIYXZlTmV4dFNpYmxpbmdBbmRJc05vdERlbGltaXRlciA9ICFuZXh0U2libGluZ0tleSAmJiBibG9jay5nZXRQYXJlbnRLZXkoKSAmJiAoIW5leHREZWxpbWl0ZXJCbG9ja0tleSB8fCBrZXkgIT09IG5leHREZWxpbWl0ZXJCbG9ja0tleSk7XG5cbiAgICAgICAgcmV0dXJuICEhKGlzQmxvY2tUb0JlTW92ZWQgfHwgaGFzTmV4dFNpYmxpbmdBbmRJc05vdE5leHRTaWJsaW5nIHx8IGRvZXNOb3RIYXZlTmV4dFNpYmxpbmdBbmRJc05vdERlbGltaXRlcik7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgICBibG9ja3NUb0JlTW92ZWQucHVzaChibG9jayk7XG4gICAgICAgIGJsb2Nrc1snZGVsZXRlJ10oYmxvY2suZ2V0S2V5KCkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYmxvY2tzQmVmb3JlID0gYmxvY2tNYXBXaXRob3V0QmxvY2tzVG9CZU1vdmVkLnRvU2VxKCkudGFrZVVudGlsKGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIHYgPT09IHRhcmdldEJsb2NrO1xuICB9KTtcblxuICB2YXIgYmxvY2tzQWZ0ZXIgPSBibG9ja01hcFdpdGhvdXRCbG9ja3NUb0JlTW92ZWQudG9TZXEoKS5za2lwVW50aWwoZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gdiA9PT0gdGFyZ2V0QmxvY2s7XG4gIH0pLnNraXAoMSk7XG5cbiAgdmFyIHNsaWNlZEJsb2NrcyA9IGJsb2Nrc1RvQmVNb3ZlZC5tYXAoZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgcmV0dXJuIFtibG9jay5nZXRLZXkoKSwgYmxvY2tdO1xuICB9KTtcblxuICB2YXIgbmV3QmxvY2tzID0gT3JkZXJlZE1hcCgpO1xuXG4gIGlmIChpbnNlcnRpb25Nb2RlID09PSAnYmVmb3JlJykge1xuICAgIHZhciBibG9ja0JlZm9yZSA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja0JlZm9yZSh0YXJnZXRLZXkpO1xuXG4gICAgISghYmxvY2tCZWZvcmUgfHwgYmxvY2tCZWZvcmUuZ2V0S2V5KCkgIT09IGJsb2NrVG9CZU1vdmVkLmdldEtleSgpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdCbG9jayBjYW5ub3QgYmUgbW92ZWQgbmV4dCB0byBpdHNlbGYuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgbmV3QmxvY2tzID0gYmxvY2tzQmVmb3JlLmNvbmNhdChbXS5jb25jYXQoc2xpY2VkQmxvY2tzLCBbW3RhcmdldEtleSwgdGFyZ2V0QmxvY2tdXSksIGJsb2Nrc0FmdGVyKS50b09yZGVyZWRNYXAoKTtcbiAgfSBlbHNlIGlmIChpbnNlcnRpb25Nb2RlID09PSAnYWZ0ZXInKSB7XG4gICAgdmFyIGJsb2NrQWZ0ZXIgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tBZnRlcih0YXJnZXRLZXkpO1xuXG4gICAgISghYmxvY2tBZnRlciB8fCBibG9ja0FmdGVyLmdldEtleSgpICE9PSBibG9ja0tleSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnQmxvY2sgY2Fubm90IGJlIG1vdmVkIG5leHQgdG8gaXRzZWxmLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIG5ld0Jsb2NrcyA9IGJsb2Nrc0JlZm9yZS5jb25jYXQoW1t0YXJnZXRLZXksIHRhcmdldEJsb2NrXV0uY29uY2F0KHNsaWNlZEJsb2NrcyksIGJsb2Nrc0FmdGVyKS50b09yZGVyZWRNYXAoKTtcbiAgfVxuXG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiB1cGRhdGVCbG9ja01hcExpbmtzKG5ld0Jsb2NrcywgYmxvY2tUb0JlTW92ZWQsIHRhcmdldEJsb2NrLCBpbnNlcnRpb25Nb2RlLCBpc0V4cGVyaW1lbnRhbFRyZWVCbG9jayksXG4gICAgc2VsZWN0aW9uQmVmb3JlOiBjb250ZW50U3RhdGUuZ2V0U2VsZWN0aW9uQWZ0ZXIoKSxcbiAgICBzZWxlY3Rpb25BZnRlcjogY29udGVudFN0YXRlLmdldFNlbGVjdGlvbkFmdGVyKCkubWVyZ2Uoe1xuICAgICAgYW5jaG9yS2V5OiBibG9ja0tleSxcbiAgICAgIGZvY3VzS2V5OiBibG9ja0tleVxuICAgIH0pXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtb3ZlQmxvY2tJbkNvbnRlbnRTdGF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4vKipcbiAqIFN0YXRlZnVsIEFQSSBmb3IgdGV4dCBkaXJlY3Rpb24gZGV0ZWN0aW9uXG4gKlxuICogVGhpcyBjbGFzcyBjYW4gYmUgdXNlZCBpbiBhcHBsaWNhdGlvbnMgd2hlcmUgeW91IG5lZWQgdG8gZGV0ZWN0IHRoZVxuICogZGlyZWN0aW9uIG9mIGEgc2VxdWVuY2Ugb2YgdGV4dCBibG9ja3MsIHdoZXJlIGVhY2ggZGlyZWN0aW9uIHNoYWxsIGJlIHVzZWRcbiAqIGFzIHRoZSBmYWxsYmFjayBkaXJlY3Rpb24gZm9yIHRoZSBuZXh0IG9uZS5cbiAqXG4gKiBOT1RFOiBBIGRlZmF1bHQgZGlyZWN0aW9uLCBpZiBub3QgcHJvdmlkZWQsIGlzIHNldCBiYXNlZCBvbiB0aGUgZ2xvYmFsXG4gKiAgICAgICBkaXJlY3Rpb24sIGFzIGRlZmluZWQgYnkgYFVuaWNvZGVCaWRpRGlyZWN0aW9uYC5cbiAqXG4gKiA9PSBFeGFtcGxlID09XG4gKiBgYGBcbiAqIHZhciBVbmljb2RlQmlkaVNlcnZpY2UgPSByZXF1aXJlKCdVbmljb2RlQmlkaVNlcnZpY2UnKTtcbiAqXG4gKiB2YXIgYmlkaVNlcnZpY2UgPSBuZXcgVW5pY29kZUJpZGlTZXJ2aWNlKCk7XG4gKlxuICogLi4uXG4gKlxuICogYmlkaVNlcnZpY2UucmVzZXQoKTtcbiAqIGZvciAodmFyIHBhcmEgaW4gcGFyYWdyYXBocykge1xuICogICB2YXIgZGlyID0gYmlkaVNlcnZpY2UuZ2V0RGlyZWN0aW9uKHBhcmEpO1xuICogICAuLi5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFBhcnQgb2Ygb3VyIGltcGxlbWVudGF0aW9uIG9mIFVuaWNvZGUgQmlkaXJlY3Rpb25hbCBBbGdvcml0aG0gKFVCQSlcbiAqIFVuaWNvZGUgU3RhbmRhcmQgQW5uZXggIzkgKFVBWDkpXG4gKiBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHI5L1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFVuaWNvZGVCaWRpID0gcmVxdWlyZSgnLi9Vbmljb2RlQmlkaScpO1xudmFyIFVuaWNvZGVCaWRpRGlyZWN0aW9uID0gcmVxdWlyZSgnLi9Vbmljb2RlQmlkaURpcmVjdGlvbicpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcblxudmFyIFVuaWNvZGVCaWRpU2VydmljZSA9IGZ1bmN0aW9uICgpIHtcblxuICAvKipcbiAgICogU3RhdGVmdWwgY2xhc3MgZm9yIHBhcmFncmFwaCBkaXJlY3Rpb24gZGV0ZWN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSBkZWZhdWx0RGlyICBEZWZhdWx0IGRpcmVjdGlvbiBvZiB0aGUgc2VydmljZVxuICAgKi9cbiAgZnVuY3Rpb24gVW5pY29kZUJpZGlTZXJ2aWNlKGRlZmF1bHREaXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVW5pY29kZUJpZGlTZXJ2aWNlKTtcblxuICAgIGlmICghZGVmYXVsdERpcikge1xuICAgICAgZGVmYXVsdERpciA9IFVuaWNvZGVCaWRpRGlyZWN0aW9uLmdldEdsb2JhbERpcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAhVW5pY29kZUJpZGlEaXJlY3Rpb24uaXNTdHJvbmcoZGVmYXVsdERpcikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRGVmYXVsdCBkaXJlY3Rpb24gbXVzdCBiZSBhIHN0cm9uZyBkaXJlY3Rpb24gKExUUiBvciBSVEwpJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cbiAgICB0aGlzLl9kZWZhdWx0RGlyID0gZGVmYXVsdERpcjtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgdGhlIGludGVybmFsIHN0YXRlXG4gICAqXG4gICAqIEluc3RlYWQgb2YgY3JlYXRpbmcgYSBuZXcgaW5zdGFuY2UsIHlvdSBjYW4ganVzdCByZXNldCgpIHlvdXIgaW5zdGFuY2VcbiAgICogZXZlcnl0aW1lIHlvdSBzdGFydCBhIG5ldyBsb29wLlxuICAgKi9cblxuXG4gIFVuaWNvZGVCaWRpU2VydmljZS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLl9sYXN0RGlyID0gdGhpcy5fZGVmYXVsdERpcjtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGlyZWN0aW9uIG9mIGEgYmxvY2sgb2YgdGV4dCwgYW5kIHJlbWVtYmVycyBpdCBhcyB0aGVcbiAgICogZmFsbC1iYWNrIGRpcmVjdGlvbiBmb3IgdGhlIG5leHQgcGFyYWdyYXBoLlxuICAgKlxuICAgKiBAcGFyYW0gc3RyICBBIHRleHQgYmxvY2ssIGUuZy4gcGFyYWdyYXBoLCB0YWJsZSBjZWxsLCB0YWdcbiAgICogQHJldHVybiAgICAgVGhlIHJlc29sdmVkIGRpcmVjdGlvblxuICAgKi9cblxuXG4gIFVuaWNvZGVCaWRpU2VydmljZS5wcm90b3R5cGUuZ2V0RGlyZWN0aW9uID0gZnVuY3Rpb24gZ2V0RGlyZWN0aW9uKHN0cikge1xuICAgIHRoaXMuX2xhc3REaXIgPSBVbmljb2RlQmlkaS5nZXREaXJlY3Rpb24oc3RyLCB0aGlzLl9sYXN0RGlyKTtcbiAgICByZXR1cm4gdGhpcy5fbGFzdERpcjtcbiAgfTtcblxuICByZXR1cm4gVW5pY29kZUJpZGlTZXJ2aWNlO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVuaWNvZGVCaWRpU2VydmljZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEVkaXRvckJpZGlTZXJ2aWNlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcbnZhciBVbmljb2RlQmlkaVNlcnZpY2UgPSByZXF1aXJlKCdmYmpzL2xpYi9Vbmljb2RlQmlkaVNlcnZpY2UnKTtcblxudmFyIG51bGx0aHJvd3MgPSByZXF1aXJlKCdmYmpzL2xpYi9udWxsdGhyb3dzJyk7XG5cbnZhciBPcmRlcmVkTWFwID0gSW1tdXRhYmxlLk9yZGVyZWRNYXA7XG5cblxudmFyIGJpZGlTZXJ2aWNlO1xuXG52YXIgRWRpdG9yQmlkaVNlcnZpY2UgPSB7XG4gIGdldERpcmVjdGlvbk1hcDogZnVuY3Rpb24gZ2V0RGlyZWN0aW9uTWFwKGNvbnRlbnQsIHByZXZCaWRpTWFwKSB7XG4gICAgaWYgKCFiaWRpU2VydmljZSkge1xuICAgICAgYmlkaVNlcnZpY2UgPSBuZXcgVW5pY29kZUJpZGlTZXJ2aWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJpZGlTZXJ2aWNlLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgdmFyIGJsb2NrTWFwID0gY29udGVudC5nZXRCbG9ja01hcCgpO1xuICAgIHZhciBuZXh0QmlkaSA9IGJsb2NrTWFwLnZhbHVlU2VxKCkubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgcmV0dXJuIG51bGx0aHJvd3MoYmlkaVNlcnZpY2UpLmdldERpcmVjdGlvbihibG9jay5nZXRUZXh0KCkpO1xuICAgIH0pO1xuICAgIHZhciBiaWRpTWFwID0gT3JkZXJlZE1hcChibG9ja01hcC5rZXlTZXEoKS56aXAobmV4dEJpZGkpKTtcblxuICAgIGlmIChwcmV2QmlkaU1hcCAhPSBudWxsICYmIEltbXV0YWJsZS5pcyhwcmV2QmlkaU1hcCwgYmlkaU1hcCkpIHtcbiAgICAgIHJldHVybiBwcmV2QmlkaU1hcDtcbiAgICB9XG5cbiAgICByZXR1cm4gYmlkaU1hcDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFZGl0b3JCaWRpU2VydmljZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNwbGl0QmxvY2tJbkNvbnRlbnRTdGF0ZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ29udGVudEJsb2NrTm9kZSA9IHJlcXVpcmUoJy4vQ29udGVudEJsb2NrTm9kZScpO1xudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG52YXIgZ2VuZXJhdGVSYW5kb21LZXkgPSByZXF1aXJlKCcuL2dlbmVyYXRlUmFuZG9tS2V5Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBMaXN0ID0gSW1tdXRhYmxlLkxpc3QsXG4gICAgTWFwID0gSW1tdXRhYmxlLk1hcDtcblxuXG52YXIgdHJhbnNmb3JtQmxvY2sgPSBmdW5jdGlvbiB0cmFuc2Zvcm1CbG9jayhrZXksIGJsb2NrTWFwLCBmdW5jKSB7XG4gIGlmICgha2V5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGJsb2NrID0gYmxvY2tNYXAuZ2V0KGtleSk7XG5cbiAgaWYgKCFibG9jaykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGJsb2NrTWFwLnNldChrZXksIGZ1bmMoYmxvY2spKTtcbn07XG5cbnZhciB1cGRhdGVCbG9ja01hcExpbmtzID0gZnVuY3Rpb24gdXBkYXRlQmxvY2tNYXBMaW5rcyhibG9ja01hcCwgb3JpZ2luYWxCbG9jaywgYmVsb3dCbG9jaykge1xuICByZXR1cm4gYmxvY2tNYXAud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAoYmxvY2tzKSB7XG4gICAgdmFyIG9yaWdpbmFsQmxvY2tLZXkgPSBvcmlnaW5hbEJsb2NrLmdldEtleSgpO1xuICAgIHZhciBiZWxvd0Jsb2NrS2V5ID0gYmVsb3dCbG9jay5nZXRLZXkoKTtcblxuICAgIC8vIHVwZGF0ZSBibG9jayBwYXJlbnRcbiAgICB0cmFuc2Zvcm1CbG9jayhvcmlnaW5hbEJsb2NrLmdldFBhcmVudEtleSgpLCBibG9ja3MsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgdmFyIHBhcmVudENoaWxkcmVuTGlzdCA9IGJsb2NrLmdldENoaWxkS2V5cygpO1xuICAgICAgdmFyIGluc2VydGlvbkluZGV4ID0gcGFyZW50Q2hpbGRyZW5MaXN0LmluZGV4T2Yob3JpZ2luYWxCbG9ja0tleSkgKyAxO1xuICAgICAgdmFyIG5ld0NoaWxkcmVuQXJyYXkgPSBwYXJlbnRDaGlsZHJlbkxpc3QudG9BcnJheSgpO1xuXG4gICAgICBuZXdDaGlsZHJlbkFycmF5LnNwbGljZShpbnNlcnRpb25JbmRleCwgMCwgYmVsb3dCbG9ja0tleSk7XG5cbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIGNoaWxkcmVuOiBMaXN0KG5ld0NoaWxkcmVuQXJyYXkpXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBvcmlnaW5hbCBuZXh0IGJsb2NrXG4gICAgdHJhbnNmb3JtQmxvY2sob3JpZ2luYWxCbG9jay5nZXROZXh0U2libGluZ0tleSgpLCBibG9ja3MsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgcHJldlNpYmxpbmc6IGJlbG93QmxvY2tLZXlcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIG9yaWdpbmFsIGJsb2NrXG4gICAgdHJhbnNmb3JtQmxvY2sob3JpZ2luYWxCbG9ja0tleSwgYmxvY2tzLCBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIG5leHRTaWJsaW5nOiBiZWxvd0Jsb2NrS2V5XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBiZWxvdyBibG9ja1xuICAgIHRyYW5zZm9ybUJsb2NrKGJlbG93QmxvY2tLZXksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICBwcmV2U2libGluZzogb3JpZ2luYWxCbG9ja0tleVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxudmFyIHNwbGl0QmxvY2tJbkNvbnRlbnRTdGF0ZSA9IGZ1bmN0aW9uIHNwbGl0QmxvY2tJbkNvbnRlbnRTdGF0ZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlKSB7XG4gICFzZWxlY3Rpb25TdGF0ZS5pc0NvbGxhcHNlZCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1NlbGVjdGlvbiByYW5nZSBtdXN0IGJlIGNvbGxhcHNlZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgdmFyIGtleSA9IHNlbGVjdGlvblN0YXRlLmdldEFuY2hvcktleSgpO1xuICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0QW5jaG9yT2Zmc2V0KCk7XG4gIHZhciBibG9ja01hcCA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja01hcCgpO1xuICB2YXIgYmxvY2tUb1NwbGl0ID0gYmxvY2tNYXAuZ2V0KGtleSk7XG4gIHZhciB0ZXh0ID0gYmxvY2tUb1NwbGl0LmdldFRleHQoKTtcbiAgdmFyIGNoYXJzID0gYmxvY2tUb1NwbGl0LmdldENoYXJhY3Rlckxpc3QoKTtcbiAgdmFyIGtleUJlbG93ID0gZ2VuZXJhdGVSYW5kb21LZXkoKTtcbiAgdmFyIGlzRXhwZXJpbWVudGFsVHJlZUJsb2NrID0gYmxvY2tUb1NwbGl0IGluc3RhbmNlb2YgQ29udGVudEJsb2NrTm9kZTtcblxuICB2YXIgYmxvY2tBYm92ZSA9IGJsb2NrVG9TcGxpdC5tZXJnZSh7XG4gICAgdGV4dDogdGV4dC5zbGljZSgwLCBvZmZzZXQpLFxuICAgIGNoYXJhY3Rlckxpc3Q6IGNoYXJzLnNsaWNlKDAsIG9mZnNldClcbiAgfSk7XG4gIHZhciBibG9ja0JlbG93ID0gYmxvY2tBYm92ZS5tZXJnZSh7XG4gICAga2V5OiBrZXlCZWxvdyxcbiAgICB0ZXh0OiB0ZXh0LnNsaWNlKG9mZnNldCksXG4gICAgY2hhcmFjdGVyTGlzdDogY2hhcnMuc2xpY2Uob2Zmc2V0KSxcbiAgICBkYXRhOiBNYXAoKVxuICB9KTtcblxuICB2YXIgYmxvY2tzQmVmb3JlID0gYmxvY2tNYXAudG9TZXEoKS50YWtlVW50aWwoZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gdiA9PT0gYmxvY2tUb1NwbGl0O1xuICB9KTtcbiAgdmFyIGJsb2Nrc0FmdGVyID0gYmxvY2tNYXAudG9TZXEoKS5za2lwVW50aWwoZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gdiA9PT0gYmxvY2tUb1NwbGl0O1xuICB9KS5yZXN0KCk7XG4gIHZhciBuZXdCbG9ja3MgPSBibG9ja3NCZWZvcmUuY29uY2F0KFtba2V5LCBibG9ja0Fib3ZlXSwgW2tleUJlbG93LCBibG9ja0JlbG93XV0sIGJsb2Nrc0FmdGVyKS50b09yZGVyZWRNYXAoKTtcblxuICBpZiAoaXNFeHBlcmltZW50YWxUcmVlQmxvY2spIHtcbiAgICAhYmxvY2tUb1NwbGl0LmdldENoaWxkS2V5cygpLmlzRW1wdHkoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDb250ZW50QmxvY2tOb2RlIG11c3Qgbm90IGhhdmUgY2hpbGRyZW4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBuZXdCbG9ja3MgPSB1cGRhdGVCbG9ja01hcExpbmtzKG5ld0Jsb2NrcywgYmxvY2tBYm92ZSwgYmxvY2tCZWxvdyk7XG4gIH1cblxuICByZXR1cm4gY29udGVudFN0YXRlLm1lcmdlKHtcbiAgICBibG9ja01hcDogbmV3QmxvY2tzLFxuICAgIHNlbGVjdGlvbkJlZm9yZTogc2VsZWN0aW9uU3RhdGUsXG4gICAgc2VsZWN0aW9uQWZ0ZXI6IHNlbGVjdGlvblN0YXRlLm1lcmdlKHtcbiAgICAgIGFuY2hvcktleToga2V5QmVsb3csXG4gICAgICBhbmNob3JPZmZzZXQ6IDAsXG4gICAgICBmb2N1c0tleToga2V5QmVsb3csXG4gICAgICBmb2N1c09mZnNldDogMCxcbiAgICAgIGlzQmFja3dhcmQ6IGZhbHNlXG4gICAgfSlcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNwbGl0QmxvY2tJbkNvbnRlbnRTdGF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHJlbW92ZVJhbmdlRnJvbUNvbnRlbnRTdGF0ZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ29udGVudEJsb2NrTm9kZSA9IHJlcXVpcmUoJy4vQ29udGVudEJsb2NrTm9kZScpO1xudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG52YXIgZ2V0TmV4dERlbGltaXRlckJsb2NrS2V5ID0gcmVxdWlyZSgnLi9nZXROZXh0RGVsaW1pdGVyQmxvY2tLZXknKTtcblxudmFyIExpc3QgPSBJbW11dGFibGUuTGlzdCxcbiAgICBNYXAgPSBJbW11dGFibGUuTWFwO1xuXG5cbnZhciB0cmFuc2Zvcm1CbG9jayA9IGZ1bmN0aW9uIHRyYW5zZm9ybUJsb2NrKGtleSwgYmxvY2tNYXAsIGZ1bmMpIHtcbiAgaWYgKCFrZXkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgYmxvY2sgPSBibG9ja01hcC5nZXQoa2V5KTtcblxuICBpZiAoIWJsb2NrKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYmxvY2tNYXAuc2V0KGtleSwgZnVuYyhibG9jaykpO1xufTtcblxuLyoqXG4gKiBBbmNlc3RvcnMgbmVlZHMgdG8gYmUgcHJlc2VydmVkIHdoZW4gdGhlcmUgYXJlIG5vbiBzZWxlY3RlZFxuICogY2hpbGRyZW4gdG8gbWFrZSBzdXJlIHdlIGRvIG5vdCBsZWF2ZSBhbnkgb3JwaGFucyBiZWhpbmRcbiAqL1xudmFyIGdldEFuY2VzdG9yc0tleXMgPSBmdW5jdGlvbiBnZXRBbmNlc3RvcnNLZXlzKGJsb2NrS2V5LCBibG9ja01hcCkge1xuICB2YXIgcGFyZW50cyA9IFtdO1xuXG4gIGlmICghYmxvY2tLZXkpIHtcbiAgICByZXR1cm4gcGFyZW50cztcbiAgfVxuXG4gIHZhciBibG9ja05vZGUgPSBibG9ja01hcC5nZXQoYmxvY2tLZXkpO1xuICB3aGlsZSAoYmxvY2tOb2RlICYmIGJsb2NrTm9kZS5nZXRQYXJlbnRLZXkoKSkge1xuICAgIHZhciBwYXJlbnRLZXkgPSBibG9ja05vZGUuZ2V0UGFyZW50S2V5KCk7XG4gICAgaWYgKHBhcmVudEtleSkge1xuICAgICAgcGFyZW50cy5wdXNoKHBhcmVudEtleSk7XG4gICAgfVxuICAgIGJsb2NrTm9kZSA9IHBhcmVudEtleSA/IGJsb2NrTWFwLmdldChwYXJlbnRLZXkpIDogbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwYXJlbnRzO1xufTtcblxuLyoqXG4gKiBHZXQgYWxsIG5leHQgZGVsaW1pdGVyIGtleXMgdW50aWwgd2UgaGl0IGEgcm9vdCBkZWxpbWl0ZXIgYW5kIHJldHVyblxuICogYW4gYXJyYXkgb2Yga2V5IHJlZmVyZW5jZXNcbiAqL1xudmFyIGdldE5leHREZWxpbWl0ZXJzQmxvY2tLZXlzID0gZnVuY3Rpb24gZ2V0TmV4dERlbGltaXRlcnNCbG9ja0tleXMoYmxvY2ssIGJsb2NrTWFwKSB7XG4gIHZhciBuZXh0RGVsaW1pdGVycyA9IFtdO1xuXG4gIGlmICghYmxvY2spIHtcbiAgICByZXR1cm4gbmV4dERlbGltaXRlcnM7XG4gIH1cblxuICB2YXIgbmV4dERlbGltaXRlciA9IGdldE5leHREZWxpbWl0ZXJCbG9ja0tleShibG9jaywgYmxvY2tNYXApO1xuICB3aGlsZSAobmV4dERlbGltaXRlciAmJiBibG9ja01hcC5nZXQobmV4dERlbGltaXRlcikpIHtcbiAgICB2YXIgX2Jsb2NrID0gYmxvY2tNYXAuZ2V0KG5leHREZWxpbWl0ZXIpO1xuICAgIG5leHREZWxpbWl0ZXJzLnB1c2gobmV4dERlbGltaXRlcik7XG5cbiAgICAvLyB3ZSBkbyBub3QgbmVlZCB0byBrZWVwIGNoZWNraW5nIGFsbCByb290IG5vZGUgc2libGluZ3MsIGp1c3QgdGhlIGZpcnN0IG9jY3VyYW5jZVxuICAgIG5leHREZWxpbWl0ZXIgPSBfYmxvY2suZ2V0UGFyZW50S2V5KCkgPyBnZXROZXh0RGVsaW1pdGVyQmxvY2tLZXkoX2Jsb2NrLCBibG9ja01hcCkgOiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIG5leHREZWxpbWl0ZXJzO1xufTtcblxudmFyIGdldE5leHRWYWxpZFNpYmxpbmcgPSBmdW5jdGlvbiBnZXROZXh0VmFsaWRTaWJsaW5nKGJsb2NrLCBibG9ja01hcCwgb3JpZ2luYWxCbG9ja01hcCkge1xuICBpZiAoIWJsb2NrKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBub3RlIHRoYXQgd2UgbmVlZCB0byBtYWtlIHN1cmUgd2UgcmVmZXIgdG8gdGhlIG9yaWdpbmFsIGJsb2NrIHNpbmNlIHRoaXNcbiAgLy8gZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGhpbiBhIHdpdGhNdXRhdGlvbnNcbiAgdmFyIG5leHRWYWxpZFNpYmxpbmdLZXkgPSBvcmlnaW5hbEJsb2NrTWFwLmdldChibG9jay5nZXRLZXkoKSkuZ2V0TmV4dFNpYmxpbmdLZXkoKTtcblxuICB3aGlsZSAobmV4dFZhbGlkU2libGluZ0tleSAmJiAhYmxvY2tNYXAuZ2V0KG5leHRWYWxpZFNpYmxpbmdLZXkpKSB7XG4gICAgbmV4dFZhbGlkU2libGluZ0tleSA9IG9yaWdpbmFsQmxvY2tNYXAuZ2V0KG5leHRWYWxpZFNpYmxpbmdLZXkpLmdldE5leHRTaWJsaW5nS2V5KCkgfHwgbnVsbDtcbiAgfVxuXG4gIHJldHVybiBuZXh0VmFsaWRTaWJsaW5nS2V5O1xufTtcblxudmFyIGdldFByZXZWYWxpZFNpYmxpbmcgPSBmdW5jdGlvbiBnZXRQcmV2VmFsaWRTaWJsaW5nKGJsb2NrLCBibG9ja01hcCwgb3JpZ2luYWxCbG9ja01hcCkge1xuICBpZiAoIWJsb2NrKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBub3RlIHRoYXQgd2UgbmVlZCB0byBtYWtlIHN1cmUgd2UgcmVmZXIgdG8gdGhlIG9yaWdpbmFsIGJsb2NrIHNpbmNlIHRoaXNcbiAgLy8gZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGhpbiBhIHdpdGhNdXRhdGlvbnNcbiAgdmFyIHByZXZWYWxpZFNpYmxpbmdLZXkgPSBvcmlnaW5hbEJsb2NrTWFwLmdldChibG9jay5nZXRLZXkoKSkuZ2V0UHJldlNpYmxpbmdLZXkoKTtcblxuICB3aGlsZSAocHJldlZhbGlkU2libGluZ0tleSAmJiAhYmxvY2tNYXAuZ2V0KHByZXZWYWxpZFNpYmxpbmdLZXkpKSB7XG4gICAgcHJldlZhbGlkU2libGluZ0tleSA9IG9yaWdpbmFsQmxvY2tNYXAuZ2V0KHByZXZWYWxpZFNpYmxpbmdLZXkpLmdldFByZXZTaWJsaW5nS2V5KCkgfHwgbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwcmV2VmFsaWRTaWJsaW5nS2V5O1xufTtcblxudmFyIHVwZGF0ZUJsb2NrTWFwTGlua3MgPSBmdW5jdGlvbiB1cGRhdGVCbG9ja01hcExpbmtzKGJsb2NrTWFwLCBzdGFydEJsb2NrLCBlbmRCbG9jaywgb3JpZ2luYWxCbG9ja01hcCkge1xuICByZXR1cm4gYmxvY2tNYXAud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAoYmxvY2tzKSB7XG4gICAgLy8gdXBkYXRlIHN0YXJ0IGJsb2NrIGlmIGl0cyByZXRhaW5lZFxuICAgIHRyYW5zZm9ybUJsb2NrKHN0YXJ0QmxvY2suZ2V0S2V5KCksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICBuZXh0U2libGluZzogZ2V0TmV4dFZhbGlkU2libGluZyhzdGFydEJsb2NrLCBibG9ja3MsIG9yaWdpbmFsQmxvY2tNYXApLFxuICAgICAgICBwcmV2U2libGluZzogZ2V0UHJldlZhbGlkU2libGluZyhzdGFydEJsb2NrLCBibG9ja3MsIG9yaWdpbmFsQmxvY2tNYXApXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBlbmRibG9jayBpZiBpdHMgcmV0YWluZWRcbiAgICB0cmFuc2Zvcm1CbG9jayhlbmRCbG9jay5nZXRLZXkoKSwgYmxvY2tzLCBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIG5leHRTaWJsaW5nOiBnZXROZXh0VmFsaWRTaWJsaW5nKGVuZEJsb2NrLCBibG9ja3MsIG9yaWdpbmFsQmxvY2tNYXApLFxuICAgICAgICBwcmV2U2libGluZzogZ2V0UHJldlZhbGlkU2libGluZyhlbmRCbG9jaywgYmxvY2tzLCBvcmlnaW5hbEJsb2NrTWFwKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgc3RhcnQgYmxvY2sgcGFyZW50IGFuY2VzdG9yc1xuICAgIGdldEFuY2VzdG9yc0tleXMoc3RhcnRCbG9jay5nZXRLZXkoKSwgb3JpZ2luYWxCbG9ja01hcCkuZm9yRWFjaChmdW5jdGlvbiAocGFyZW50S2V5KSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtQmxvY2socGFyZW50S2V5LCBibG9ja3MsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICAgIGNoaWxkcmVuOiBibG9jay5nZXRDaGlsZEtleXMoKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGJsb2Nrcy5nZXQoa2V5KTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXh0U2libGluZzogZ2V0TmV4dFZhbGlkU2libGluZyhibG9jaywgYmxvY2tzLCBvcmlnaW5hbEJsb2NrTWFwKSxcbiAgICAgICAgICBwcmV2U2libGluZzogZ2V0UHJldlZhbGlkU2libGluZyhibG9jaywgYmxvY2tzLCBvcmlnaW5hbEJsb2NrTWFwKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIHN0YXJ0IGJsb2NrIG5leHQgLSBjYW4gb25seSBoYXBwZW4gaWYgc3RhcnRCbG9jayA9PSBlbmRCbG9ja1xuICAgIHRyYW5zZm9ybUJsb2NrKHN0YXJ0QmxvY2suZ2V0TmV4dFNpYmxpbmdLZXkoKSwgYmxvY2tzLCBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIHByZXZTaWJsaW5nOiBzdGFydEJsb2NrLmdldFByZXZTaWJsaW5nS2V5KClcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIHN0YXJ0IGJsb2NrIHByZXZcbiAgICB0cmFuc2Zvcm1CbG9jayhzdGFydEJsb2NrLmdldFByZXZTaWJsaW5nS2V5KCksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICBuZXh0U2libGluZzogZ2V0TmV4dFZhbGlkU2libGluZyhzdGFydEJsb2NrLCBibG9ja3MsIG9yaWdpbmFsQmxvY2tNYXApXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBlbmQgYmxvY2sgbmV4dFxuICAgIHRyYW5zZm9ybUJsb2NrKGVuZEJsb2NrLmdldE5leHRTaWJsaW5nS2V5KCksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICBwcmV2U2libGluZzogZ2V0UHJldlZhbGlkU2libGluZyhlbmRCbG9jaywgYmxvY2tzLCBvcmlnaW5hbEJsb2NrTWFwKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgZW5kIGJsb2NrIHByZXZcbiAgICB0cmFuc2Zvcm1CbG9jayhlbmRCbG9jay5nZXRQcmV2U2libGluZ0tleSgpLCBibG9ja3MsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgbmV4dFNpYmxpbmc6IGVuZEJsb2NrLmdldE5leHRTaWJsaW5nS2V5KClcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIGVuZCBibG9jayBwYXJlbnQgYW5jZXN0b3JzXG4gICAgZ2V0QW5jZXN0b3JzS2V5cyhlbmRCbG9jay5nZXRLZXkoKSwgb3JpZ2luYWxCbG9ja01hcCkuZm9yRWFjaChmdW5jdGlvbiAocGFyZW50S2V5KSB7XG4gICAgICB0cmFuc2Zvcm1CbG9jayhwYXJlbnRLZXksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgICAgY2hpbGRyZW46IGJsb2NrLmdldENoaWxkS2V5cygpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gYmxvY2tzLmdldChrZXkpO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5leHRTaWJsaW5nOiBnZXROZXh0VmFsaWRTaWJsaW5nKGJsb2NrLCBibG9ja3MsIG9yaWdpbmFsQmxvY2tNYXApLFxuICAgICAgICAgIHByZXZTaWJsaW5nOiBnZXRQcmV2VmFsaWRTaWJsaW5nKGJsb2NrLCBibG9ja3MsIG9yaWdpbmFsQmxvY2tNYXApXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgbmV4dCBkZWxpbWl0ZXJzIGFsbCB0aGUgd2F5IHRvIGEgcm9vdCBkZWxpbWl0ZXJcbiAgICBnZXROZXh0RGVsaW1pdGVyc0Jsb2NrS2V5cyhlbmRCbG9jaywgb3JpZ2luYWxCbG9ja01hcCkuZm9yRWFjaChmdW5jdGlvbiAoZGVsaW1pdGVyS2V5KSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtQmxvY2soZGVsaW1pdGVyS2V5LCBibG9ja3MsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICAgIG5leHRTaWJsaW5nOiBnZXROZXh0VmFsaWRTaWJsaW5nKGJsb2NrLCBibG9ja3MsIG9yaWdpbmFsQmxvY2tNYXApLFxuICAgICAgICAgIHByZXZTaWJsaW5nOiBnZXRQcmV2VmFsaWRTaWJsaW5nKGJsb2NrLCBibG9ja3MsIG9yaWdpbmFsQmxvY2tNYXApXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxudmFyIHJlbW92ZVJhbmdlRnJvbUNvbnRlbnRTdGF0ZSA9IGZ1bmN0aW9uIHJlbW92ZVJhbmdlRnJvbUNvbnRlbnRTdGF0ZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlKSB7XG4gIGlmIChzZWxlY3Rpb25TdGF0ZS5pc0NvbGxhcHNlZCgpKSB7XG4gICAgcmV0dXJuIGNvbnRlbnRTdGF0ZTtcbiAgfVxuXG4gIHZhciBibG9ja01hcCA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja01hcCgpO1xuICB2YXIgc3RhcnRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydEtleSgpO1xuICB2YXIgc3RhcnRPZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgZW5kS2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kS2V5KCk7XG4gIHZhciBlbmRPZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRFbmRPZmZzZXQoKTtcblxuICB2YXIgc3RhcnRCbG9jayA9IGJsb2NrTWFwLmdldChzdGFydEtleSk7XG4gIHZhciBlbmRCbG9jayA9IGJsb2NrTWFwLmdldChlbmRLZXkpO1xuXG4gIC8vIHdlIGFzc3VtZSB0aGF0IENvbnRlbnRCbG9ja05vZGUgYW5kIENvbnRlbnRCbG9ja3MgYXJlIG5vdCBtaXhlZCB0b2dldGhlclxuICB2YXIgaXNFeHBlcmltZW50YWxUcmVlQmxvY2sgPSBzdGFydEJsb2NrIGluc3RhbmNlb2YgQ29udGVudEJsb2NrTm9kZTtcblxuICAvLyB1c2VkIHRvIHJldGFpbiBibG9ja3MgdGhhdCBzaG91bGQgbm90IGJlIGRlbGV0ZWQgdG8gYXZvaWQgb3JwaGFuIGNoaWxkcmVuXG4gIHZhciBwYXJlbnRBbmNlc3RvcnMgPSBbXTtcblxuICBpZiAoaXNFeHBlcmltZW50YWxUcmVlQmxvY2spIHtcbiAgICB2YXIgZW5kQmxvY2tjaGlsZHJlbktleXMgPSBlbmRCbG9jay5nZXRDaGlsZEtleXMoKTtcbiAgICB2YXIgZW5kQmxvY2tBbmNlc3RvcnMgPSBnZXRBbmNlc3RvcnNLZXlzKGVuZEtleSwgYmxvY2tNYXApO1xuXG4gICAgLy8gZW5kQmxvY2sgaGFzIHVuc2VsZWN0ZWQgc2liYmxpbmdzIHNvIHdlIGNhbiBub3QgcmVtb3ZlIGl0cyBhbmNlc3RvcnMgcGFyZW50c1xuICAgIGlmIChlbmRCbG9jay5nZXROZXh0U2libGluZ0tleSgpKSB7XG4gICAgICBwYXJlbnRBbmNlc3RvcnMgPSBwYXJlbnRBbmNlc3RvcnMuY29uY2F0KGVuZEJsb2NrQW5jZXN0b3JzKTtcbiAgICB9XG5cbiAgICAvLyBlbmRCbG9jayBoYXMgY2hpbGRyZW4gc28gY2FuIG5vdCByZW1vdmUgdGhpcyBibG9jayBvciBhbnkgb2YgaXRzIGFuY2VzdG9yc1xuICAgIGlmICghZW5kQmxvY2tjaGlsZHJlbktleXMuaXNFbXB0eSgpKSB7XG4gICAgICBwYXJlbnRBbmNlc3RvcnMgPSBwYXJlbnRBbmNlc3RvcnMuY29uY2F0KGVuZEJsb2NrQW5jZXN0b3JzLmNvbmNhdChbZW5kS2V5XSkpO1xuICAgIH1cblxuICAgIC8vIHdlIG5lZWQgdG8gcmV0YWluIGFsbCBhbmNlc3RvcnMgb2YgdGhlIG5leHQgZGVsaW1pdGVyIGJsb2NrXG4gICAgcGFyZW50QW5jZXN0b3JzID0gcGFyZW50QW5jZXN0b3JzLmNvbmNhdChnZXRBbmNlc3RvcnNLZXlzKGdldE5leHREZWxpbWl0ZXJCbG9ja0tleShlbmRCbG9jaywgYmxvY2tNYXApLCBibG9ja01hcCkpO1xuICB9XG5cbiAgdmFyIGNoYXJhY3Rlckxpc3QgPSB2b2lkIDA7XG5cbiAgaWYgKHN0YXJ0QmxvY2sgPT09IGVuZEJsb2NrKSB7XG4gICAgY2hhcmFjdGVyTGlzdCA9IHJlbW92ZUZyb21MaXN0KHN0YXJ0QmxvY2suZ2V0Q2hhcmFjdGVyTGlzdCgpLCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0KTtcbiAgfSBlbHNlIHtcbiAgICBjaGFyYWN0ZXJMaXN0ID0gc3RhcnRCbG9jay5nZXRDaGFyYWN0ZXJMaXN0KCkuc2xpY2UoMCwgc3RhcnRPZmZzZXQpLmNvbmNhdChlbmRCbG9jay5nZXRDaGFyYWN0ZXJMaXN0KCkuc2xpY2UoZW5kT2Zmc2V0KSk7XG4gIH1cblxuICB2YXIgbW9kaWZpZWRTdGFydCA9IHN0YXJ0QmxvY2subWVyZ2Uoe1xuICAgIHRleHQ6IHN0YXJ0QmxvY2suZ2V0VGV4dCgpLnNsaWNlKDAsIHN0YXJ0T2Zmc2V0KSArIGVuZEJsb2NrLmdldFRleHQoKS5zbGljZShlbmRPZmZzZXQpLFxuICAgIGNoYXJhY3Rlckxpc3Q6IGNoYXJhY3Rlckxpc3RcbiAgfSk7XG5cbiAgdmFyIG5ld0Jsb2NrcyA9IGJsb2NrTWFwLnRvU2VxKCkuc2tpcFVudGlsKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgcmV0dXJuIGsgPT09IHN0YXJ0S2V5O1xuICB9KS50YWtlVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gZW5kS2V5O1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gcGFyZW50QW5jZXN0b3JzLmluZGV4T2YoaykgPT09IC0xO1xuICB9KS5jb25jYXQoTWFwKFtbZW5kS2V5LCBudWxsXV0pKS5tYXAoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gc3RhcnRLZXkgPyBtb2RpZmllZFN0YXJ0IDogbnVsbDtcbiAgfSk7XG5cbiAgdmFyIHVwZGF0ZWRCbG9ja01hcCA9IGJsb2NrTWFwLm1lcmdlKG5ld0Jsb2NrcykuZmlsdGVyKGZ1bmN0aW9uIChibG9jaykge1xuICAgIHJldHVybiAhIWJsb2NrO1xuICB9KTtcblxuICBpZiAoaXNFeHBlcmltZW50YWxUcmVlQmxvY2spIHtcbiAgICB1cGRhdGVkQmxvY2tNYXAgPSB1cGRhdGVCbG9ja01hcExpbmtzKHVwZGF0ZWRCbG9ja01hcCwgc3RhcnRCbG9jaywgZW5kQmxvY2ssIGJsb2NrTWFwKTtcbiAgfVxuXG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiB1cGRhdGVkQmxvY2tNYXAsXG4gICAgc2VsZWN0aW9uQmVmb3JlOiBzZWxlY3Rpb25TdGF0ZSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGUubWVyZ2Uoe1xuICAgICAgYW5jaG9yS2V5OiBzdGFydEtleSxcbiAgICAgIGFuY2hvck9mZnNldDogc3RhcnRPZmZzZXQsXG4gICAgICBmb2N1c0tleTogc3RhcnRLZXksXG4gICAgICBmb2N1c09mZnNldDogc3RhcnRPZmZzZXQsXG4gICAgICBpc0JhY2t3YXJkOiBmYWxzZVxuICAgIH0pXG4gIH0pO1xufTtcblxuLyoqXG4gKiBNYWludGFpbiBwZXJzaXN0ZW5jZSBmb3IgdGFyZ2V0IGxpc3Qgd2hlbiByZW1vdmluZyBjaGFyYWN0ZXJzIG9uIHRoZVxuICogaGVhZCBhbmQgdGFpbCBvZiB0aGUgY2hhcmFjdGVyIGxpc3QuXG4gKi9cbnZhciByZW1vdmVGcm9tTGlzdCA9IGZ1bmN0aW9uIHJlbW92ZUZyb21MaXN0KHRhcmdldExpc3QsIHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpIHtcbiAgaWYgKHN0YXJ0T2Zmc2V0ID09PSAwKSB7XG4gICAgd2hpbGUgKHN0YXJ0T2Zmc2V0IDwgZW5kT2Zmc2V0KSB7XG4gICAgICB0YXJnZXRMaXN0ID0gdGFyZ2V0TGlzdC5zaGlmdCgpO1xuICAgICAgc3RhcnRPZmZzZXQrKztcbiAgICB9XG4gIH0gZWxzZSBpZiAoZW5kT2Zmc2V0ID09PSB0YXJnZXRMaXN0LmNvdW50KCkpIHtcbiAgICB3aGlsZSAoZW5kT2Zmc2V0ID4gc3RhcnRPZmZzZXQpIHtcbiAgICAgIHRhcmdldExpc3QgPSB0YXJnZXRMaXN0LnBvcCgpO1xuICAgICAgZW5kT2Zmc2V0LS07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBoZWFkID0gdGFyZ2V0TGlzdC5zbGljZSgwLCBzdGFydE9mZnNldCk7XG4gICAgdmFyIHRhaWwgPSB0YXJnZXRMaXN0LnNsaWNlKGVuZE9mZnNldCk7XG4gICAgdGFyZ2V0TGlzdCA9IGhlYWQuY29uY2F0KHRhaWwpLnRvTGlzdCgpO1xuICB9XG4gIHJldHVybiB0YXJnZXRMaXN0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSByZW1vdmVSYW5nZUZyb21Db250ZW50U3RhdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBtb2RpZnlCbG9ja0ZvckNvbnRlbnRTdGF0ZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbnZhciBNYXAgPSBJbW11dGFibGUuTWFwO1xuXG5cbmZ1bmN0aW9uIG1vZGlmeUJsb2NrRm9yQ29udGVudFN0YXRlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIG9wZXJhdGlvbikge1xuICB2YXIgc3RhcnRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydEtleSgpO1xuICB2YXIgZW5kS2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kS2V5KCk7XG4gIHZhciBibG9ja01hcCA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja01hcCgpO1xuICB2YXIgbmV3QmxvY2tzID0gYmxvY2tNYXAudG9TZXEoKS5za2lwVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gc3RhcnRLZXk7XG4gIH0pLnRha2VVbnRpbChmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBrID09PSBlbmRLZXk7XG4gIH0pLmNvbmNhdChNYXAoW1tlbmRLZXksIGJsb2NrTWFwLmdldChlbmRLZXkpXV0pKS5tYXAob3BlcmF0aW9uKTtcblxuICByZXR1cm4gY29udGVudFN0YXRlLm1lcmdlKHtcbiAgICBibG9ja01hcDogYmxvY2tNYXAubWVyZ2UobmV3QmxvY2tzKSxcbiAgICBzZWxlY3Rpb25CZWZvcmU6IHNlbGVjdGlvblN0YXRlLFxuICAgIHNlbGVjdGlvbkFmdGVyOiBzZWxlY3Rpb25TdGF0ZVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2RpZnlCbG9ja0ZvckNvbnRlbnRTdGF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGluc2VydFRleHRJbnRvQ29udGVudFN0YXRlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIGluc2VydEludG9MaXN0ID0gcmVxdWlyZSgnLi9pbnNlcnRJbnRvTGlzdCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgUmVwZWF0ID0gSW1tdXRhYmxlLlJlcGVhdDtcblxuXG5mdW5jdGlvbiBpbnNlcnRUZXh0SW50b0NvbnRlbnRTdGF0ZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCB0ZXh0LCBjaGFyYWN0ZXJNZXRhZGF0YSkge1xuICAhc2VsZWN0aW9uU3RhdGUuaXNDb2xsYXBzZWQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdgaW5zZXJ0VGV4dGAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdpdGggYSBjb2xsYXBzZWQgcmFuZ2UuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIHZhciBsZW4gPSB0ZXh0Lmxlbmd0aDtcbiAgaWYgKCFsZW4pIHtcbiAgICByZXR1cm4gY29udGVudFN0YXRlO1xuICB9XG5cbiAgdmFyIGJsb2NrTWFwID0gY29udGVudFN0YXRlLmdldEJsb2NrTWFwKCk7XG4gIHZhciBrZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydEtleSgpO1xuICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIGJsb2NrID0gYmxvY2tNYXAuZ2V0KGtleSk7XG4gIHZhciBibG9ja1RleHQgPSBibG9jay5nZXRUZXh0KCk7XG5cbiAgdmFyIG5ld0Jsb2NrID0gYmxvY2subWVyZ2Uoe1xuICAgIHRleHQ6IGJsb2NrVGV4dC5zbGljZSgwLCBvZmZzZXQpICsgdGV4dCArIGJsb2NrVGV4dC5zbGljZShvZmZzZXQsIGJsb2NrLmdldExlbmd0aCgpKSxcbiAgICBjaGFyYWN0ZXJMaXN0OiBpbnNlcnRJbnRvTGlzdChibG9jay5nZXRDaGFyYWN0ZXJMaXN0KCksIFJlcGVhdChjaGFyYWN0ZXJNZXRhZGF0YSwgbGVuKS50b0xpc3QoKSwgb2Zmc2V0KVxuICB9KTtcblxuICB2YXIgbmV3T2Zmc2V0ID0gb2Zmc2V0ICsgbGVuO1xuXG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiBibG9ja01hcC5zZXQoa2V5LCBuZXdCbG9jayksXG4gICAgc2VsZWN0aW9uQWZ0ZXI6IHNlbGVjdGlvblN0YXRlLm1lcmdlKHtcbiAgICAgIGFuY2hvck9mZnNldDogbmV3T2Zmc2V0LFxuICAgICAgZm9jdXNPZmZzZXQ6IG5ld09mZnNldFxuICAgIH0pXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFRleHRJbnRvQ29udGVudFN0YXRlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaW5zZXJ0RnJhZ21lbnRJbnRvQ29udGVudFN0YXRlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBCbG9ja01hcEJ1aWxkZXIgPSByZXF1aXJlKCcuL0Jsb2NrTWFwQnVpbGRlcicpO1xudmFyIENvbnRlbnRCbG9ja05vZGUgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9ja05vZGUnKTtcbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIGluc2VydEludG9MaXN0ID0gcmVxdWlyZSgnLi9pbnNlcnRJbnRvTGlzdCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHJhbmRvbWl6ZUJsb2NrTWFwS2V5cyA9IHJlcXVpcmUoJy4vcmFuZG9taXplQmxvY2tNYXBLZXlzJyk7XG5cbnZhciBMaXN0ID0gSW1tdXRhYmxlLkxpc3Q7XG5cblxudmFyIHVwZGF0ZUV4aXN0aW5nQmxvY2sgPSBmdW5jdGlvbiB1cGRhdGVFeGlzdGluZ0Jsb2NrKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGJsb2NrTWFwLCBmcmFnbWVudEJsb2NrLCB0YXJnZXRLZXksIHRhcmdldE9mZnNldCkge1xuICB2YXIgdGFyZ2V0QmxvY2sgPSBibG9ja01hcC5nZXQodGFyZ2V0S2V5KTtcbiAgdmFyIHRleHQgPSB0YXJnZXRCbG9jay5nZXRUZXh0KCk7XG4gIHZhciBjaGFycyA9IHRhcmdldEJsb2NrLmdldENoYXJhY3Rlckxpc3QoKTtcbiAgdmFyIGZpbmFsS2V5ID0gdGFyZ2V0S2V5O1xuICB2YXIgZmluYWxPZmZzZXQgPSB0YXJnZXRPZmZzZXQgKyBmcmFnbWVudEJsb2NrLmdldFRleHQoKS5sZW5ndGg7XG5cbiAgdmFyIG5ld0Jsb2NrID0gdGFyZ2V0QmxvY2subWVyZ2Uoe1xuICAgIHRleHQ6IHRleHQuc2xpY2UoMCwgdGFyZ2V0T2Zmc2V0KSArIGZyYWdtZW50QmxvY2suZ2V0VGV4dCgpICsgdGV4dC5zbGljZSh0YXJnZXRPZmZzZXQpLFxuICAgIGNoYXJhY3Rlckxpc3Q6IGluc2VydEludG9MaXN0KGNoYXJzLCBmcmFnbWVudEJsb2NrLmdldENoYXJhY3Rlckxpc3QoKSwgdGFyZ2V0T2Zmc2V0KSxcbiAgICBkYXRhOiBmcmFnbWVudEJsb2NrLmdldERhdGEoKVxuICB9KTtcblxuICByZXR1cm4gY29udGVudFN0YXRlLm1lcmdlKHtcbiAgICBibG9ja01hcDogYmxvY2tNYXAuc2V0KHRhcmdldEtleSwgbmV3QmxvY2spLFxuICAgIHNlbGVjdGlvbkJlZm9yZTogc2VsZWN0aW9uU3RhdGUsXG4gICAgc2VsZWN0aW9uQWZ0ZXI6IHNlbGVjdGlvblN0YXRlLm1lcmdlKHtcbiAgICAgIGFuY2hvcktleTogZmluYWxLZXksXG4gICAgICBhbmNob3JPZmZzZXQ6IGZpbmFsT2Zmc2V0LFxuICAgICAgZm9jdXNLZXk6IGZpbmFsS2V5LFxuICAgICAgZm9jdXNPZmZzZXQ6IGZpbmFsT2Zmc2V0LFxuICAgICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgICB9KVxuICB9KTtcbn07XG5cbi8qKlxuICogQXBwZW5kcyB0ZXh0L2NoYXJhY3Rlckxpc3QgZnJvbSB0aGUgZnJhZ21lbnQgZmlyc3QgYmxvY2sgdG9cbiAqIHRhcmdldCBibG9jay5cbiAqL1xudmFyIHVwZGF0ZUhlYWQgPSBmdW5jdGlvbiB1cGRhdGVIZWFkKGJsb2NrLCB0YXJnZXRPZmZzZXQsIGZyYWdtZW50KSB7XG4gIHZhciB0ZXh0ID0gYmxvY2suZ2V0VGV4dCgpO1xuICB2YXIgY2hhcnMgPSBibG9jay5nZXRDaGFyYWN0ZXJMaXN0KCk7XG5cbiAgLy8gTW9kaWZ5IGhlYWQgcG9ydGlvbiBvZiBibG9jay5cbiAgdmFyIGhlYWRUZXh0ID0gdGV4dC5zbGljZSgwLCB0YXJnZXRPZmZzZXQpO1xuICB2YXIgaGVhZENoYXJhY3RlcnMgPSBjaGFycy5zbGljZSgwLCB0YXJnZXRPZmZzZXQpO1xuICB2YXIgYXBwZW5kVG9IZWFkID0gZnJhZ21lbnQuZmlyc3QoKTtcblxuICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgIHRleHQ6IGhlYWRUZXh0ICsgYXBwZW5kVG9IZWFkLmdldFRleHQoKSxcbiAgICBjaGFyYWN0ZXJMaXN0OiBoZWFkQ2hhcmFjdGVycy5jb25jYXQoYXBwZW5kVG9IZWFkLmdldENoYXJhY3Rlckxpc3QoKSksXG4gICAgdHlwZTogaGVhZFRleHQgPyBibG9jay5nZXRUeXBlKCkgOiBhcHBlbmRUb0hlYWQuZ2V0VHlwZSgpLFxuICAgIGRhdGE6IGFwcGVuZFRvSGVhZC5nZXREYXRhKClcbiAgfSk7XG59O1xuXG4vKipcbiAqIEFwcGVuZHMgb2Zmc2V0IHRleHQvY2hhcmFjdGVyTGlzdCBmcm9tIHRoZSB0YXJnZXQgYmxvY2sgdG8gdGhlIGxhc3RcbiAqIGZyYWdtZW50IGJsb2NrLlxuICovXG52YXIgdXBkYXRlVGFpbCA9IGZ1bmN0aW9uIHVwZGF0ZVRhaWwoYmxvY2ssIHRhcmdldE9mZnNldCwgZnJhZ21lbnQpIHtcbiAgLy8gTW9kaWZ5IHRhaWwgcG9ydGlvbiBvZiBibG9jay5cbiAgdmFyIHRleHQgPSBibG9jay5nZXRUZXh0KCk7XG4gIHZhciBjaGFycyA9IGJsb2NrLmdldENoYXJhY3Rlckxpc3QoKTtcblxuICAvLyBNb2RpZnkgaGVhZCBwb3J0aW9uIG9mIGJsb2NrLlxuICB2YXIgYmxvY2tTaXplID0gdGV4dC5sZW5ndGg7XG4gIHZhciB0YWlsVGV4dCA9IHRleHQuc2xpY2UodGFyZ2V0T2Zmc2V0LCBibG9ja1NpemUpO1xuICB2YXIgdGFpbENoYXJhY3RlcnMgPSBjaGFycy5zbGljZSh0YXJnZXRPZmZzZXQsIGJsb2NrU2l6ZSk7XG4gIHZhciBwcmVwZW5kVG9UYWlsID0gZnJhZ21lbnQubGFzdCgpO1xuXG4gIHJldHVybiBwcmVwZW5kVG9UYWlsLm1lcmdlKHtcbiAgICB0ZXh0OiBwcmVwZW5kVG9UYWlsLmdldFRleHQoKSArIHRhaWxUZXh0LFxuICAgIGNoYXJhY3Rlckxpc3Q6IHByZXBlbmRUb1RhaWwuZ2V0Q2hhcmFjdGVyTGlzdCgpLmNvbmNhdCh0YWlsQ2hhcmFjdGVycyksXG4gICAgZGF0YTogcHJlcGVuZFRvVGFpbC5nZXREYXRhKClcbiAgfSk7XG59O1xuXG52YXIgZ2V0Um9vdEJsb2NrcyA9IGZ1bmN0aW9uIGdldFJvb3RCbG9ja3MoYmxvY2ssIGJsb2NrTWFwKSB7XG4gIHZhciBoZWFkS2V5ID0gYmxvY2suZ2V0S2V5KCk7XG4gIHZhciByb290QmxvY2sgPSBibG9jaztcbiAgdmFyIHJvb3RCbG9ja3MgPSBbXTtcblxuICAvLyBzb21ldGltZXMgdGhlIGZyYWdtZW50IGhlYWQgYmxvY2sgd2lsbCBub3QgYmUgcGFydCBvZiB0aGUgYmxvY2tNYXAgaXRzZWxmIHRoaXMgY2FuIGhhcHBlbiB3aGVuXG4gIC8vIHRoZSBmcmFnbWVudCBoZWFkIGlzIHVzZWQgdG8gdXBkYXRlIHRoZSB0YXJnZXQgYmxvY2ssIGhvd2V2ZXIgd2hlbiB0aGlzIGRvZXMgbm90IGhhcHBlbiB3ZSBuZWVkXG4gIC8vIHRvIG1ha2Ugc3VyZSB0aGF0IHdlIGluY2x1ZGUgaXQgb24gdGhlIHJvb3RCbG9ja3Mgc2luY2UgdGhlIGZpcnN0IGJsb2NrIG9mIGEgZnJhZ21lbnQgaXMgYWx3YXlzIGFcbiAgLy8gZnJhZ21lbnQgcm9vdCBibG9ja1xuICBpZiAoYmxvY2tNYXAuZ2V0KGhlYWRLZXkpKSB7XG4gICAgcm9vdEJsb2Nrcy5wdXNoKGhlYWRLZXkpO1xuICB9XG5cbiAgd2hpbGUgKHJvb3RCbG9jayAmJiByb290QmxvY2suZ2V0TmV4dFNpYmxpbmdLZXkoKSkge1xuICAgIHZhciBsYXN0U2libGluZ0tleSA9IHJvb3RCbG9jay5nZXROZXh0U2libGluZ0tleSgpO1xuXG4gICAgaWYgKCFsYXN0U2libGluZ0tleSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcm9vdEJsb2Nrcy5wdXNoKGxhc3RTaWJsaW5nS2V5KTtcbiAgICByb290QmxvY2sgPSBibG9ja01hcC5nZXQobGFzdFNpYmxpbmdLZXkpO1xuICB9XG5cbiAgcmV0dXJuIHJvb3RCbG9ja3M7XG59O1xuXG52YXIgdXBkYXRlQmxvY2tNYXBMaW5rcyA9IGZ1bmN0aW9uIHVwZGF0ZUJsb2NrTWFwTGlua3MoYmxvY2tNYXAsIG9yaWdpbmFsQmxvY2tNYXAsIHRhcmdldEJsb2NrLCBmcmFnbWVudEhlYWRCbG9jaykge1xuICByZXR1cm4gYmxvY2tNYXAud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAoYmxvY2tNYXBTdGF0ZSkge1xuICAgIHZhciB0YXJnZXRLZXkgPSB0YXJnZXRCbG9jay5nZXRLZXkoKTtcbiAgICB2YXIgaGVhZEtleSA9IGZyYWdtZW50SGVhZEJsb2NrLmdldEtleSgpO1xuICAgIHZhciB0YXJnZXROZXh0S2V5ID0gdGFyZ2V0QmxvY2suZ2V0TmV4dFNpYmxpbmdLZXkoKTtcbiAgICB2YXIgdGFyZ2V0UGFyZW50S2V5ID0gdGFyZ2V0QmxvY2suZ2V0UGFyZW50S2V5KCk7XG4gICAgdmFyIGZyYWdtZW50Um9vdEJsb2NrcyA9IGdldFJvb3RCbG9ja3MoZnJhZ21lbnRIZWFkQmxvY2ssIGJsb2NrTWFwKTtcbiAgICB2YXIgbGFzdFJvb3RGcmFnbWVudEJsb2NrS2V5ID0gZnJhZ21lbnRSb290QmxvY2tzW2ZyYWdtZW50Um9vdEJsb2Nrcy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChibG9ja01hcFN0YXRlLmdldChoZWFkS2V5KSkge1xuICAgICAgLy8gdXBkYXRlIHRoZSBmcmFnbWVudCBoZWFkIHdoZW4gaXQgaXMgcGFydCBvZiB0aGUgYmxvY2tNYXAgb3RoZXJ3aXNlXG4gICAgICBibG9ja01hcFN0YXRlLnNldEluKFt0YXJnZXRLZXksICduZXh0U2libGluZyddLCBoZWFkS2V5KTtcbiAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW2hlYWRLZXksICdwcmV2U2libGluZyddLCB0YXJnZXRLZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGUgdGhlIHRhcmdldCBibG9jayB0aGF0IGhhZCB0aGUgZnJhZ21lbnQgaGVhZCBjb250ZW50cyBtZXJnZWQgaW50byBpdFxuICAgICAgYmxvY2tNYXBTdGF0ZS5zZXRJbihbdGFyZ2V0S2V5LCAnbmV4dFNpYmxpbmcnXSwgZnJhZ21lbnRIZWFkQmxvY2suZ2V0TmV4dFNpYmxpbmdLZXkoKSk7XG4gICAgICBibG9ja01hcFN0YXRlLnNldEluKFtmcmFnbWVudEhlYWRCbG9jay5nZXROZXh0U2libGluZ0tleSgpLCAncHJldlNpYmxpbmcnXSwgdGFyZ2V0S2V5KTtcbiAgICB9XG5cbiAgICAvLyB1cGRhdGUgdGhlIGxhc3Qgcm9vdCBibG9jayBmcmFnbWVudFxuICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW2xhc3RSb290RnJhZ21lbnRCbG9ja0tleSwgJ25leHRTaWJsaW5nJ10sIHRhcmdldE5leHRLZXkpO1xuXG4gICAgLy8gdXBkYXRlIHRoZSBvcmlnaW5hbCB0YXJnZXQgbmV4dCBibG9ja1xuICAgIGlmICh0YXJnZXROZXh0S2V5KSB7XG4gICAgICBibG9ja01hcFN0YXRlLnNldEluKFt0YXJnZXROZXh0S2V5LCAncHJldlNpYmxpbmcnXSwgbGFzdFJvb3RGcmFnbWVudEJsb2NrS2V5KTtcbiAgICB9XG5cbiAgICAvLyB1cGRhdGUgZnJhZ21lbnQgcGFyZW50IGxpbmtzXG4gICAgZnJhZ21lbnRSb290QmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGJsb2NrS2V5KSB7XG4gICAgICByZXR1cm4gYmxvY2tNYXBTdGF0ZS5zZXRJbihbYmxvY2tLZXksICdwYXJlbnQnXSwgdGFyZ2V0UGFyZW50S2V5KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSB0YXJnZXRCbG9jayBwYXJlbnQgY2hpbGQgbGlua3NcbiAgICBpZiAodGFyZ2V0UGFyZW50S2V5KSB7XG4gICAgICB2YXIgdGFyZ2V0UGFyZW50ID0gYmxvY2tNYXAuZ2V0KHRhcmdldFBhcmVudEtleSk7XG4gICAgICB2YXIgb3JpZ2luYWxUYXJnZXRQYXJlbnRDaGlsZEtleXMgPSB0YXJnZXRQYXJlbnQuZ2V0Q2hpbGRLZXlzKCk7XG5cbiAgICAgIHZhciB0YXJnZXRCbG9ja0luZGV4ID0gb3JpZ2luYWxUYXJnZXRQYXJlbnRDaGlsZEtleXMuaW5kZXhPZih0YXJnZXRLZXkpO1xuICAgICAgdmFyIGluc2VydGlvbkluZGV4ID0gdGFyZ2V0QmxvY2tJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXdDaGlsZHJlbktleXNBcnJheSA9IG9yaWdpbmFsVGFyZ2V0UGFyZW50Q2hpbGRLZXlzLnRvQXJyYXkoKTtcblxuICAgICAgLy8gaW5zZXJ0IGZyYWdtZW50IGNoaWxkcmVuXG4gICAgICBuZXdDaGlsZHJlbktleXNBcnJheS5zcGxpY2UuYXBwbHkobmV3Q2hpbGRyZW5LZXlzQXJyYXksIFtpbnNlcnRpb25JbmRleCwgMF0uY29uY2F0KGZyYWdtZW50Um9vdEJsb2NrcykpO1xuXG4gICAgICBibG9ja01hcFN0YXRlLnNldEluKFt0YXJnZXRQYXJlbnRLZXksICdjaGlsZHJlbiddLCBMaXN0KG5ld0NoaWxkcmVuS2V5c0FycmF5KSk7XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBpbnNlcnRGcmFnbWVudCA9IGZ1bmN0aW9uIGluc2VydEZyYWdtZW50KGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGJsb2NrTWFwLCBmcmFnbWVudCwgdGFyZ2V0S2V5LCB0YXJnZXRPZmZzZXQpIHtcbiAgdmFyIGlzVHJlZUJhc2VkQmxvY2tNYXAgPSBibG9ja01hcC5maXJzdCgpIGluc3RhbmNlb2YgQ29udGVudEJsb2NrTm9kZTtcbiAgdmFyIG5ld0Jsb2NrQXJyID0gW107XG4gIHZhciBmcmFnbWVudFNpemUgPSBmcmFnbWVudC5zaXplO1xuICB2YXIgdGFyZ2V0ID0gYmxvY2tNYXAuZ2V0KHRhcmdldEtleSk7XG4gIHZhciBoZWFkID0gZnJhZ21lbnQuZmlyc3QoKTtcbiAgdmFyIHRhaWwgPSBmcmFnbWVudC5sYXN0KCk7XG4gIHZhciBmaW5hbE9mZnNldCA9IHRhaWwuZ2V0TGVuZ3RoKCk7XG4gIHZhciBmaW5hbEtleSA9IHRhaWwuZ2V0S2V5KCk7XG4gIHZhciBzaG91bGROb3RVcGRhdGVGcm9tRnJhZ21lbnRCbG9jayA9IGlzVHJlZUJhc2VkQmxvY2tNYXAgJiYgKCF0YXJnZXQuZ2V0Q2hpbGRLZXlzKCkuaXNFbXB0eSgpIHx8ICFoZWFkLmdldENoaWxkS2V5cygpLmlzRW1wdHkoKSk7XG5cbiAgYmxvY2tNYXAuZm9yRWFjaChmdW5jdGlvbiAoYmxvY2ssIGJsb2NrS2V5KSB7XG4gICAgaWYgKGJsb2NrS2V5ICE9PSB0YXJnZXRLZXkpIHtcbiAgICAgIG5ld0Jsb2NrQXJyLnB1c2goYmxvY2spO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzaG91bGROb3RVcGRhdGVGcm9tRnJhZ21lbnRCbG9jaykge1xuICAgICAgbmV3QmxvY2tBcnIucHVzaChibG9jayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0Jsb2NrQXJyLnB1c2godXBkYXRlSGVhZChibG9jaywgdGFyZ2V0T2Zmc2V0LCBmcmFnbWVudCkpO1xuICAgIH1cblxuICAgIC8vIEluc2VydCBmcmFnbWVudCBibG9ja3MgYWZ0ZXIgdGhlIGhlYWQgYW5kIGJlZm9yZSB0aGUgdGFpbC5cbiAgICBmcmFnbWVudFxuICAgIC8vIHdoZW4gd2UgYXJlIHVwZGF0aW5nIHRoZSB0YXJnZXQgYmxvY2sgd2l0aCB0aGUgaGVhZCBmcmFnbWVudCBibG9jayB3ZSBza2lwIHRoZSBmaXJzdCBmcmFnbWVudFxuICAgIC8vIGhlYWQgc2luY2UgaXRzIGNvbnRlbnRzIGhhdmUgYWxyZWFkeSBiZWVuIG1lcmdlZCB3aXRoIHRoZSB0YXJnZXQgYmxvY2sgb3RoZXJ3aXNlIHdlIGluY2x1ZGVcbiAgICAvLyB0aGUgd2hvbGUgZnJhZ21lbnRcbiAgICAuc2xpY2Uoc2hvdWxkTm90VXBkYXRlRnJvbUZyYWdtZW50QmxvY2sgPyAwIDogMSwgZnJhZ21lbnRTaXplIC0gMSkuZm9yRWFjaChmdW5jdGlvbiAoZnJhZ21lbnRCbG9jaykge1xuICAgICAgcmV0dXJuIG5ld0Jsb2NrQXJyLnB1c2goZnJhZ21lbnRCbG9jayk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgdGFpbFxuICAgIG5ld0Jsb2NrQXJyLnB1c2godXBkYXRlVGFpbChibG9jaywgdGFyZ2V0T2Zmc2V0LCBmcmFnbWVudCkpO1xuICB9KTtcblxuICB2YXIgdXBkYXRlZEJsb2NrTWFwID0gQmxvY2tNYXBCdWlsZGVyLmNyZWF0ZUZyb21BcnJheShuZXdCbG9ja0Fycik7XG5cbiAgaWYgKGlzVHJlZUJhc2VkQmxvY2tNYXApIHtcbiAgICB1cGRhdGVkQmxvY2tNYXAgPSB1cGRhdGVCbG9ja01hcExpbmtzKHVwZGF0ZWRCbG9ja01hcCwgYmxvY2tNYXAsIHRhcmdldCwgaGVhZCk7XG4gIH1cblxuICByZXR1cm4gY29udGVudFN0YXRlLm1lcmdlKHtcbiAgICBibG9ja01hcDogdXBkYXRlZEJsb2NrTWFwLFxuICAgIHNlbGVjdGlvbkJlZm9yZTogc2VsZWN0aW9uU3RhdGUsXG4gICAgc2VsZWN0aW9uQWZ0ZXI6IHNlbGVjdGlvblN0YXRlLm1lcmdlKHtcbiAgICAgIGFuY2hvcktleTogZmluYWxLZXksXG4gICAgICBhbmNob3JPZmZzZXQ6IGZpbmFsT2Zmc2V0LFxuICAgICAgZm9jdXNLZXk6IGZpbmFsS2V5LFxuICAgICAgZm9jdXNPZmZzZXQ6IGZpbmFsT2Zmc2V0LFxuICAgICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgICB9KVxuICB9KTtcbn07XG5cbnZhciBpbnNlcnRGcmFnbWVudEludG9Db250ZW50U3RhdGUgPSBmdW5jdGlvbiBpbnNlcnRGcmFnbWVudEludG9Db250ZW50U3RhdGUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgZnJhZ21lbnRCbG9ja01hcCkge1xuICAhc2VsZWN0aW9uU3RhdGUuaXNDb2xsYXBzZWQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdgaW5zZXJ0RnJhZ21lbnRgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgY29sbGFwc2VkIHNlbGVjdGlvbiBzdGF0ZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgdmFyIGJsb2NrTWFwID0gY29udGVudFN0YXRlLmdldEJsb2NrTWFwKCk7XG4gIHZhciBmcmFnbWVudCA9IHJhbmRvbWl6ZUJsb2NrTWFwS2V5cyhmcmFnbWVudEJsb2NrTWFwKTtcbiAgdmFyIHRhcmdldEtleSA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0S2V5KCk7XG4gIHZhciB0YXJnZXRPZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydE9mZnNldCgpO1xuXG4gIHZhciB0YXJnZXRCbG9jayA9IGJsb2NrTWFwLmdldCh0YXJnZXRLZXkpO1xuXG4gIGlmICh0YXJnZXRCbG9jayBpbnN0YW5jZW9mIENvbnRlbnRCbG9ja05vZGUpIHtcbiAgICAhdGFyZ2V0QmxvY2suZ2V0Q2hpbGRLZXlzKCkuaXNFbXB0eSgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2BpbnNlcnRGcmFnbWVudGAgc2hvdWxkIG5vdCBiZSBjYWxsZWQgd2hlbiBhIGNvbnRhaW5lciBub2RlIGlzIHNlbGVjdGVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIC8vIFdoZW4gd2UgaW5zZXJ0IGEgZnJhZ21lbnQgd2l0aCBhIHNpbmdsZSBibG9jayB3ZSBzaW1wbHkgdXBkYXRlIHRoZSB0YXJnZXQgYmxvY2tcbiAgLy8gd2l0aCB0aGUgY29udGVudHMgb2YgdGhlIGluc2VydGVkIGZyYWdtZW50IGJsb2NrXG4gIGlmIChmcmFnbWVudC5zaXplID09PSAxKSB7XG4gICAgcmV0dXJuIHVwZGF0ZUV4aXN0aW5nQmxvY2soY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgYmxvY2tNYXAsIGZyYWdtZW50LmZpcnN0KCksIHRhcmdldEtleSwgdGFyZ2V0T2Zmc2V0KTtcbiAgfVxuXG4gIHJldHVybiBpbnNlcnRGcmFnbWVudChjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBibG9ja01hcCwgZnJhZ21lbnQsIHRhcmdldEtleSwgdGFyZ2V0T2Zmc2V0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0RnJhZ21lbnRJbnRvQ29udGVudFN0YXRlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0UmFuZ2VzRm9yRHJhZnRFbnRpdHlcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIE9idGFpbiB0aGUgc3RhcnQgYW5kIGVuZCBwb3NpdGlvbnMgb2YgdGhlIHJhbmdlIHRoYXQgaGFzIHRoZVxuICogc3BlY2lmaWVkIGVudGl0eSBhcHBsaWVkIHRvIGl0LlxuICpcbiAqIEVudGl0eSBrZXlzIGFyZSBhcHBsaWVkIG9ubHkgdG8gY29udGlndW91cyBzdHJldGNoZXMgb2YgdGV4dCwgc28gdGhpc1xuICogbWV0aG9kIHNlYXJjaGVzIGZvciB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgdGhlIGVudGl0eSBrZXkgYW5kIHJldHVybnNcbiAqIHRoZSBzdWJzZXF1ZW50IHJhbmdlLlxuICovXG5mdW5jdGlvbiBnZXRSYW5nZXNGb3JEcmFmdEVudGl0eShibG9jaywga2V5KSB7XG4gIHZhciByYW5nZXMgPSBbXTtcbiAgYmxvY2suZmluZEVudGl0eVJhbmdlcyhmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjLmdldEVudGl0eSgpID09PSBrZXk7XG4gIH0sIGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgcmFuZ2VzLnB1c2goeyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH0pO1xuICB9KTtcblxuICAhISFyYW5nZXMubGVuZ3RoID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0VudGl0eSBrZXkgbm90IGZvdW5kIGluIHRoaXMgcmFuZ2UuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIHJldHVybiByYW5nZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmFuZ2VzRm9yRHJhZnRFbnRpdHk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdEVudGl0eVNlZ21lbnRzXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogSWRlbnRpZnkgdGhlIHJhbmdlIHRvIGRlbGV0ZSBmcm9tIGEgc2VnbWVudGVkIGVudGl0eS5cbiAqXG4gKiBSdWxlczpcbiAqXG4gKiAgRXhhbXBsZTogJ0pvaG4gRi4gS2VubmVkeSdcbiAqXG4gKiAgIC0gRGVsZXRpb24gZnJvbSB3aXRoaW4gYW55IG5vbi13aGl0ZXNwYWNlIChpLmUuIFsnSm9obicsICdGLicsICdLZW5uZWR5J10pXG4gKiAgICAgd2lsbCByZXR1cm4gdGhlIHJhbmdlIG9mIHRoYXQgdGV4dC5cbiAqXG4gKiAgICAgICAnSm9obiBGLiBLZW5uZWR5JyAtPiAnSm9obiBGLidcbiAqICAgICAgICAgICAgICAgICAgXlxuICpcbiAqICAgLSBGb3J3YXJkIGRlbGV0aW9uIG9mIHdoaXRlc3BhY2Ugd2lsbCByZW1vdmUgdGhlIGZvbGxvd2luZyBzZWN0aW9uOlxuICpcbiAqICAgICAgICdKb2huIEYuIEtlbm5lZHknIC0+ICdKb2huIEtlbm5lZHknXG4gKiAgICAgICAgICAgIF5cbiAqXG4gKiAgIC0gQmFja3dhcmQgZGVsZXRpb24gb2Ygd2hpdGVzcGFjZSB3aWxsIHJlbW92ZSB0aGUgcHJldmlvdXMgc2VjdGlvbjpcbiAqXG4gKiAgICAgICAnSm9obiBGLiBLZW5uZWR5JyAtPiAnRi4gS2VubmVkeSdcbiAqICAgICAgICAgICAgXlxuICovXG52YXIgRHJhZnRFbnRpdHlTZWdtZW50cyA9IHtcbiAgZ2V0UmVtb3ZhbFJhbmdlOiBmdW5jdGlvbiBnZXRSZW1vdmFsUmFuZ2Uoc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCwgdGV4dCwgZW50aXR5U3RhcnQsIGRpcmVjdGlvbikge1xuICAgIHZhciBzZWdtZW50cyA9IHRleHQuc3BsaXQoJyAnKTtcbiAgICBzZWdtZW50cyA9IHNlZ21lbnRzLm1hcChmdW5jdGlvbiAoIC8qc3RyaW5nKi9zZWdtZW50LCAvKm51bWJlciovaWkpIHtcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdmb3J3YXJkJykge1xuICAgICAgICBpZiAoaWkgPiAwKSB7XG4gICAgICAgICAgcmV0dXJuICcgJyArIHNlZ21lbnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWkgPCBzZWdtZW50cy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiBzZWdtZW50ICsgJyAnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlZ21lbnQ7XG4gICAgfSk7XG5cbiAgICB2YXIgc2VnbWVudFN0YXJ0ID0gZW50aXR5U3RhcnQ7XG4gICAgdmFyIHNlZ21lbnRFbmQ7XG4gICAgdmFyIHNlZ21lbnQ7XG4gICAgdmFyIHJlbW92YWxTdGFydCA9IG51bGw7XG4gICAgdmFyIHJlbW92YWxFbmQgPSBudWxsO1xuXG4gICAgZm9yICh2YXIgamogPSAwOyBqaiA8IHNlZ21lbnRzLmxlbmd0aDsgamorKykge1xuICAgICAgc2VnbWVudCA9IHNlZ21lbnRzW2pqXTtcbiAgICAgIHNlZ21lbnRFbmQgPSBzZWdtZW50U3RhcnQgKyBzZWdtZW50Lmxlbmd0aDtcblxuICAgICAgLy8gT3VyIHNlbGVjdGlvbiBvdmVybGFwcyB0aGlzIHNlZ21lbnQuXG4gICAgICBpZiAoc2VsZWN0aW9uU3RhcnQgPCBzZWdtZW50RW5kICYmIHNlZ21lbnRTdGFydCA8IHNlbGVjdGlvbkVuZCkge1xuICAgICAgICBpZiAocmVtb3ZhbFN0YXJ0ICE9PSBudWxsKSB7XG4gICAgICAgICAgcmVtb3ZhbEVuZCA9IHNlZ21lbnRFbmQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZhbFN0YXJ0ID0gc2VnbWVudFN0YXJ0O1xuICAgICAgICAgIHJlbW92YWxFbmQgPSBzZWdtZW50RW5kO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlbW92YWxTdGFydCAhPT0gbnVsbCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgc2VnbWVudFN0YXJ0ID0gc2VnbWVudEVuZDtcbiAgICB9XG5cbiAgICB2YXIgZW50aXR5RW5kID0gZW50aXR5U3RhcnQgKyB0ZXh0Lmxlbmd0aDtcbiAgICB2YXIgYXRTdGFydCA9IHJlbW92YWxTdGFydCA9PT0gZW50aXR5U3RhcnQ7XG4gICAgdmFyIGF0RW5kID0gcmVtb3ZhbEVuZCA9PT0gZW50aXR5RW5kO1xuXG4gICAgaWYgKCFhdFN0YXJ0ICYmIGF0RW5kIHx8IGF0U3RhcnQgJiYgIWF0RW5kKSB7XG4gICAgICBpZiAoZGlyZWN0aW9uID09PSAnZm9yd2FyZCcpIHtcbiAgICAgICAgaWYgKHJlbW92YWxFbmQgIT09IGVudGl0eUVuZCkge1xuICAgICAgICAgIHJlbW92YWxFbmQrKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZW1vdmFsU3RhcnQgIT09IGVudGl0eVN0YXJ0KSB7XG4gICAgICAgIHJlbW92YWxTdGFydC0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogcmVtb3ZhbFN0YXJ0LFxuICAgICAgZW5kOiByZW1vdmFsRW5kXG4gICAgfTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVudGl0eVNlZ21lbnRzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0Q2hhcmFjdGVyUmVtb3ZhbFJhbmdlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdEVudGl0eVNlZ21lbnRzID0gcmVxdWlyZSgnLi9EcmFmdEVudGl0eVNlZ21lbnRzJyk7XG5cbnZhciBnZXRSYW5nZXNGb3JEcmFmdEVudGl0eSA9IHJlcXVpcmUoJy4vZ2V0UmFuZ2VzRm9yRHJhZnRFbnRpdHknKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBHaXZlbiBhIFNlbGVjdGlvblN0YXRlIGFuZCBhIHJlbW92YWwgZGlyZWN0aW9uLCBkZXRlcm1pbmUgdGhlIGVudGlyZSByYW5nZVxuICogdGhhdCBzaG91bGQgYmUgcmVtb3ZlZCBmcm9tIGEgQ29udGVudFN0YXRlLiBUaGlzIGlzIGJhc2VkIG9uIGFueSBlbnRpdGllc1xuICogd2l0aGluIHRoZSB0YXJnZXQsIHdpdGggdGhlaXIgYG11dGFiaWxpdHlgIHZhbHVlcyB0YWtlbiBpbnRvIGFjY291bnQuXG4gKlxuICogRm9yIGluc3RhbmNlLCBpZiB3ZSBhcmUgYXR0ZW1wdGluZyB0byByZW1vdmUgcGFydCBvZiBhbiBcImltbXV0YWJsZVwiIGVudGl0eVxuICogcmFuZ2UsIHRoZSBlbnRpcmUgZW50aXR5IG11c3QgYmUgcmVtb3ZlZC4gVGhlIHJldHVybmVkIGBTZWxlY3Rpb25TdGF0ZWBcbiAqIHdpbGwgYmUgYWRqdXN0ZWQgYWNjb3JkaW5nbHkuXG4gKi9cbmZ1bmN0aW9uIGdldENoYXJhY3RlclJlbW92YWxSYW5nZShlbnRpdHlNYXAsIHN0YXJ0QmxvY2ssIGVuZEJsb2NrLCBzZWxlY3Rpb25TdGF0ZSwgZGlyZWN0aW9uKSB7XG4gIHZhciBzdGFydCA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0T2Zmc2V0KCk7XG4gIHZhciBlbmQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRFbmRPZmZzZXQoKTtcbiAgdmFyIHN0YXJ0RW50aXR5S2V5ID0gc3RhcnRCbG9jay5nZXRFbnRpdHlBdChzdGFydCk7XG4gIHZhciBlbmRFbnRpdHlLZXkgPSBlbmRCbG9jay5nZXRFbnRpdHlBdChlbmQgLSAxKTtcbiAgaWYgKCFzdGFydEVudGl0eUtleSAmJiAhZW5kRW50aXR5S2V5KSB7XG4gICAgcmV0dXJuIHNlbGVjdGlvblN0YXRlO1xuICB9XG4gIHZhciBuZXdTZWxlY3Rpb25TdGF0ZSA9IHNlbGVjdGlvblN0YXRlO1xuICBpZiAoc3RhcnRFbnRpdHlLZXkgJiYgc3RhcnRFbnRpdHlLZXkgPT09IGVuZEVudGl0eUtleSkge1xuICAgIG5ld1NlbGVjdGlvblN0YXRlID0gZ2V0RW50aXR5UmVtb3ZhbFJhbmdlKGVudGl0eU1hcCwgc3RhcnRCbG9jaywgbmV3U2VsZWN0aW9uU3RhdGUsIGRpcmVjdGlvbiwgc3RhcnRFbnRpdHlLZXksIHRydWUsIHRydWUpO1xuICB9IGVsc2UgaWYgKHN0YXJ0RW50aXR5S2V5ICYmIGVuZEVudGl0eUtleSkge1xuICAgIHZhciBzdGFydFNlbGVjdGlvblN0YXRlID0gZ2V0RW50aXR5UmVtb3ZhbFJhbmdlKGVudGl0eU1hcCwgc3RhcnRCbG9jaywgbmV3U2VsZWN0aW9uU3RhdGUsIGRpcmVjdGlvbiwgc3RhcnRFbnRpdHlLZXksIGZhbHNlLCB0cnVlKTtcbiAgICB2YXIgZW5kU2VsZWN0aW9uU3RhdGUgPSBnZXRFbnRpdHlSZW1vdmFsUmFuZ2UoZW50aXR5TWFwLCBlbmRCbG9jaywgbmV3U2VsZWN0aW9uU3RhdGUsIGRpcmVjdGlvbiwgZW5kRW50aXR5S2V5LCBmYWxzZSwgZmFsc2UpO1xuICAgIG5ld1NlbGVjdGlvblN0YXRlID0gbmV3U2VsZWN0aW9uU3RhdGUubWVyZ2Uoe1xuICAgICAgYW5jaG9yT2Zmc2V0OiBzdGFydFNlbGVjdGlvblN0YXRlLmdldEFuY2hvck9mZnNldCgpLFxuICAgICAgZm9jdXNPZmZzZXQ6IGVuZFNlbGVjdGlvblN0YXRlLmdldEZvY3VzT2Zmc2V0KCksXG4gICAgICBpc0JhY2t3YXJkOiBmYWxzZVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHN0YXJ0RW50aXR5S2V5KSB7XG4gICAgdmFyIF9zdGFydFNlbGVjdGlvblN0YXRlID0gZ2V0RW50aXR5UmVtb3ZhbFJhbmdlKGVudGl0eU1hcCwgc3RhcnRCbG9jaywgbmV3U2VsZWN0aW9uU3RhdGUsIGRpcmVjdGlvbiwgc3RhcnRFbnRpdHlLZXksIGZhbHNlLCB0cnVlKTtcbiAgICBuZXdTZWxlY3Rpb25TdGF0ZSA9IG5ld1NlbGVjdGlvblN0YXRlLm1lcmdlKHtcbiAgICAgIGFuY2hvck9mZnNldDogX3N0YXJ0U2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRPZmZzZXQoKSxcbiAgICAgIGlzQmFja3dhcmQ6IGZhbHNlXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoZW5kRW50aXR5S2V5KSB7XG4gICAgdmFyIF9lbmRTZWxlY3Rpb25TdGF0ZSA9IGdldEVudGl0eVJlbW92YWxSYW5nZShlbnRpdHlNYXAsIGVuZEJsb2NrLCBuZXdTZWxlY3Rpb25TdGF0ZSwgZGlyZWN0aW9uLCBlbmRFbnRpdHlLZXksIGZhbHNlLCBmYWxzZSk7XG4gICAgbmV3U2VsZWN0aW9uU3RhdGUgPSBuZXdTZWxlY3Rpb25TdGF0ZS5tZXJnZSh7XG4gICAgICBmb2N1c09mZnNldDogX2VuZFNlbGVjdGlvblN0YXRlLmdldEVuZE9mZnNldCgpLFxuICAgICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbmV3U2VsZWN0aW9uU3RhdGU7XG59XG5cbmZ1bmN0aW9uIGdldEVudGl0eVJlbW92YWxSYW5nZShlbnRpdHlNYXAsIGJsb2NrLCBzZWxlY3Rpb25TdGF0ZSwgZGlyZWN0aW9uLCBlbnRpdHlLZXksIGlzRW50aXJlU2VsZWN0aW9uV2l0aGluRW50aXR5LCBpc0VudGl0eUF0U3RhcnQpIHtcbiAgdmFyIHN0YXJ0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIGVuZCA9IHNlbGVjdGlvblN0YXRlLmdldEVuZE9mZnNldCgpO1xuICB2YXIgZW50aXR5ID0gZW50aXR5TWFwLl9fZ2V0KGVudGl0eUtleSk7XG4gIHZhciBtdXRhYmlsaXR5ID0gZW50aXR5LmdldE11dGFiaWxpdHkoKTtcbiAgdmFyIHNpZGVUb0NvbnNpZGVyID0gaXNFbnRpdHlBdFN0YXJ0ID8gc3RhcnQgOiBlbmQ7XG5cbiAgLy8gYE1VVEFCTEVgIGVudGl0aWVzIGNhbiBqdXN0IGhhdmUgdGhlIHNwZWNpZmllZCByYW5nZSBvZiB0ZXh0IHJlbW92ZWRcbiAgLy8gZGlyZWN0bHkuIE5vIGFkanVzdG1lbnRzIGFyZSBuZWVkZWQuXG4gIGlmIChtdXRhYmlsaXR5ID09PSAnTVVUQUJMRScpIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uU3RhdGU7XG4gIH1cblxuICAvLyBGaW5kIHRoZSBlbnRpdHkgcmFuZ2UgdGhhdCBvdmVybGFwcyB3aXRoIG91ciByZW1vdmFsIHJhbmdlLlxuICB2YXIgZW50aXR5UmFuZ2VzID0gZ2V0UmFuZ2VzRm9yRHJhZnRFbnRpdHkoYmxvY2ssIGVudGl0eUtleSkuZmlsdGVyKGZ1bmN0aW9uIChyYW5nZSkge1xuICAgIHJldHVybiBzaWRlVG9Db25zaWRlciA8PSByYW5nZS5lbmQgJiYgc2lkZVRvQ29uc2lkZXIgPj0gcmFuZ2Uuc3RhcnQ7XG4gIH0pO1xuXG4gICEoZW50aXR5UmFuZ2VzLmxlbmd0aCA9PSAxKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdUaGVyZSBzaG91bGQgb25seSBiZSBvbmUgZW50aXR5IHJhbmdlIHdpdGhpbiB0aGlzIHJlbW92YWwgcmFuZ2UuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIHZhciBlbnRpdHlSYW5nZSA9IGVudGl0eVJhbmdlc1swXTtcblxuICAvLyBGb3IgYElNTVVUQUJMRWAgZW50aXR5IHR5cGVzLCB3ZSB3aWxsIHJlbW92ZSB0aGUgZW50aXJlIGVudGl0eSByYW5nZS5cbiAgaWYgKG11dGFiaWxpdHkgPT09ICdJTU1VVEFCTEUnKSB7XG4gICAgcmV0dXJuIHNlbGVjdGlvblN0YXRlLm1lcmdlKHtcbiAgICAgIGFuY2hvck9mZnNldDogZW50aXR5UmFuZ2Uuc3RhcnQsXG4gICAgICBmb2N1c09mZnNldDogZW50aXR5UmFuZ2UuZW5kLFxuICAgICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEZvciBgU0VHTUVOVEVEYCBlbnRpdHkgdHlwZXMsIGRldGVybWluZSB0aGUgYXBwcm9wcmlhdGUgc2VnbWVudCB0b1xuICAvLyByZW1vdmUuXG4gIGlmICghaXNFbnRpcmVTZWxlY3Rpb25XaXRoaW5FbnRpdHkpIHtcbiAgICBpZiAoaXNFbnRpdHlBdFN0YXJ0KSB7XG4gICAgICBlbmQgPSBlbnRpdHlSYW5nZS5lbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0ID0gZW50aXR5UmFuZ2Uuc3RhcnQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlbW92YWxSYW5nZSA9IERyYWZ0RW50aXR5U2VnbWVudHMuZ2V0UmVtb3ZhbFJhbmdlKHN0YXJ0LCBlbmQsIGJsb2NrLmdldFRleHQoKS5zbGljZShlbnRpdHlSYW5nZS5zdGFydCwgZW50aXR5UmFuZ2UuZW5kKSwgZW50aXR5UmFuZ2Uuc3RhcnQsIGRpcmVjdGlvbik7XG5cbiAgcmV0dXJuIHNlbGVjdGlvblN0YXRlLm1lcmdlKHtcbiAgICBhbmNob3JPZmZzZXQ6IHJlbW92YWxSYW5nZS5zdGFydCxcbiAgICBmb2N1c09mZnNldDogcmVtb3ZhbFJhbmdlLmVuZCxcbiAgICBpc0JhY2t3YXJkOiBmYWxzZVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRDaGFyYWN0ZXJSZW1vdmFsUmFuZ2U7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBhcHBseUVudGl0eVRvQ29udGVudEJsb2NrXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyTWV0YWRhdGEnKTtcblxuZnVuY3Rpb24gYXBwbHlFbnRpdHlUb0NvbnRlbnRCbG9jayhjb250ZW50QmxvY2ssIHN0YXJ0LCBlbmQsIGVudGl0eUtleSkge1xuICB2YXIgY2hhcmFjdGVyTGlzdCA9IGNvbnRlbnRCbG9jay5nZXRDaGFyYWN0ZXJMaXN0KCk7XG4gIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgIGNoYXJhY3Rlckxpc3QgPSBjaGFyYWN0ZXJMaXN0LnNldChzdGFydCwgQ2hhcmFjdGVyTWV0YWRhdGEuYXBwbHlFbnRpdHkoY2hhcmFjdGVyTGlzdC5nZXQoc3RhcnQpLCBlbnRpdHlLZXkpKTtcbiAgICBzdGFydCsrO1xuICB9XG4gIHJldHVybiBjb250ZW50QmxvY2suc2V0KCdjaGFyYWN0ZXJMaXN0JywgY2hhcmFjdGVyTGlzdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbHlFbnRpdHlUb0NvbnRlbnRCbG9jazsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGFwcGx5RW50aXR5VG9Db250ZW50U3RhdGVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG52YXIgYXBwbHlFbnRpdHlUb0NvbnRlbnRCbG9jayA9IHJlcXVpcmUoJy4vYXBwbHlFbnRpdHlUb0NvbnRlbnRCbG9jaycpO1xuXG5mdW5jdGlvbiBhcHBseUVudGl0eVRvQ29udGVudFN0YXRlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGVudGl0eUtleSkge1xuICB2YXIgYmxvY2tNYXAgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tNYXAoKTtcbiAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIGVuZEtleSA9IHNlbGVjdGlvblN0YXRlLmdldEVuZEtleSgpO1xuICB2YXIgZW5kT2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kT2Zmc2V0KCk7XG5cbiAgdmFyIG5ld0Jsb2NrcyA9IGJsb2NrTWFwLnNraXBVbnRpbChmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBrID09PSBzdGFydEtleTtcbiAgfSkudGFrZVVudGlsKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgcmV0dXJuIGsgPT09IGVuZEtleTtcbiAgfSkudG9PcmRlcmVkTWFwKCkubWVyZ2UoSW1tdXRhYmxlLk9yZGVyZWRNYXAoW1tlbmRLZXksIGJsb2NrTWFwLmdldChlbmRLZXkpXV0pKS5tYXAoZnVuY3Rpb24gKGJsb2NrLCBibG9ja0tleSkge1xuICAgIHZhciBzbGljZVN0YXJ0ID0gYmxvY2tLZXkgPT09IHN0YXJ0S2V5ID8gc3RhcnRPZmZzZXQgOiAwO1xuICAgIHZhciBzbGljZUVuZCA9IGJsb2NrS2V5ID09PSBlbmRLZXkgPyBlbmRPZmZzZXQgOiBibG9jay5nZXRMZW5ndGgoKTtcbiAgICByZXR1cm4gYXBwbHlFbnRpdHlUb0NvbnRlbnRCbG9jayhibG9jaywgc2xpY2VTdGFydCwgc2xpY2VFbmQsIGVudGl0eUtleSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiBibG9ja01hcC5tZXJnZShuZXdCbG9ja3MpLFxuICAgIHNlbGVjdGlvbkJlZm9yZTogc2VsZWN0aW9uU3RhdGUsXG4gICAgc2VsZWN0aW9uQWZ0ZXI6IHNlbGVjdGlvblN0YXRlXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFwcGx5RW50aXR5VG9Db250ZW50U3RhdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDb250ZW50U3RhdGVJbmxpbmVTdHlsZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2hhcmFjdGVyTWV0YWRhdGEgPSByZXF1aXJlKCcuL0NoYXJhY3Rlck1ldGFkYXRhJyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpLFxuICAgIE1hcCA9IF9yZXF1aXJlLk1hcDtcblxudmFyIENvbnRlbnRTdGF0ZUlubGluZVN0eWxlID0ge1xuICBhZGQ6IGZ1bmN0aW9uIGFkZChjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBpbmxpbmVTdHlsZSkge1xuICAgIHJldHVybiBtb2RpZnlJbmxpbmVTdHlsZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBpbmxpbmVTdHlsZSwgdHJ1ZSk7XG4gIH0sXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgaW5saW5lU3R5bGUpIHtcbiAgICByZXR1cm4gbW9kaWZ5SW5saW5lU3R5bGUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgaW5saW5lU3R5bGUsIGZhbHNlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbW9kaWZ5SW5saW5lU3R5bGUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgaW5saW5lU3R5bGUsIGFkZE9yUmVtb3ZlKSB7XG4gIHZhciBibG9ja01hcCA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja01hcCgpO1xuICB2YXIgc3RhcnRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydEtleSgpO1xuICB2YXIgc3RhcnRPZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgZW5kS2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kS2V5KCk7XG4gIHZhciBlbmRPZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRFbmRPZmZzZXQoKTtcblxuICB2YXIgbmV3QmxvY2tzID0gYmxvY2tNYXAuc2tpcFVudGlsKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgcmV0dXJuIGsgPT09IHN0YXJ0S2V5O1xuICB9KS50YWtlVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gZW5kS2V5O1xuICB9KS5jb25jYXQoTWFwKFtbZW5kS2V5LCBibG9ja01hcC5nZXQoZW5kS2V5KV1dKSkubWFwKGZ1bmN0aW9uIChibG9jaywgYmxvY2tLZXkpIHtcbiAgICB2YXIgc2xpY2VTdGFydDtcbiAgICB2YXIgc2xpY2VFbmQ7XG5cbiAgICBpZiAoc3RhcnRLZXkgPT09IGVuZEtleSkge1xuICAgICAgc2xpY2VTdGFydCA9IHN0YXJ0T2Zmc2V0O1xuICAgICAgc2xpY2VFbmQgPSBlbmRPZmZzZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWNlU3RhcnQgPSBibG9ja0tleSA9PT0gc3RhcnRLZXkgPyBzdGFydE9mZnNldCA6IDA7XG4gICAgICBzbGljZUVuZCA9IGJsb2NrS2V5ID09PSBlbmRLZXkgPyBlbmRPZmZzZXQgOiBibG9jay5nZXRMZW5ndGgoKTtcbiAgICB9XG5cbiAgICB2YXIgY2hhcnMgPSBibG9jay5nZXRDaGFyYWN0ZXJMaXN0KCk7XG4gICAgdmFyIGN1cnJlbnQ7XG4gICAgd2hpbGUgKHNsaWNlU3RhcnQgPCBzbGljZUVuZCkge1xuICAgICAgY3VycmVudCA9IGNoYXJzLmdldChzbGljZVN0YXJ0KTtcbiAgICAgIGNoYXJzID0gY2hhcnMuc2V0KHNsaWNlU3RhcnQsIGFkZE9yUmVtb3ZlID8gQ2hhcmFjdGVyTWV0YWRhdGEuYXBwbHlTdHlsZShjdXJyZW50LCBpbmxpbmVTdHlsZSkgOiBDaGFyYWN0ZXJNZXRhZGF0YS5yZW1vdmVTdHlsZShjdXJyZW50LCBpbmxpbmVTdHlsZSkpO1xuICAgICAgc2xpY2VTdGFydCsrO1xuICAgIH1cblxuICAgIHJldHVybiBibG9jay5zZXQoJ2NoYXJhY3Rlckxpc3QnLCBjaGFycyk7XG4gIH0pO1xuXG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiBibG9ja01hcC5tZXJnZShuZXdCbG9ja3MpLFxuICAgIHNlbGVjdGlvbkJlZm9yZTogc2VsZWN0aW9uU3RhdGUsXG4gICAgc2VsZWN0aW9uQWZ0ZXI6IHNlbGVjdGlvblN0YXRlXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbnRlbnRTdGF0ZUlubGluZVN0eWxlOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdEZlYXR1cmVGbGFncy1jb3JlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdEZlYXR1cmVGbGFncyA9IHtcbiAgZHJhZnRfa2lsbHN3aXRjaF9hbGxvd19ub250ZXh0bm9kZXM6IGZhbHNlLFxuICBkcmFmdF9zZWdtZW50ZWRfZW50aXRpZXNfYmVoYXZpb3I6IGZhbHNlLFxuICBkcmFmdF9oYW5kbGViZWZvcmVpbnB1dF9jb21wb3NlZF90ZXh0OiBmYWxzZSxcbiAgZHJhZnRfdHJlZV9kYXRhX3N1cHBvcnQ6IGZhbHNlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RmVhdHVyZUZsYWdzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQXRvbWljQmxvY2tVdGlsc1xuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIF9leHRlbmRzID0gX2Fzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIEJsb2NrTWFwQnVpbGRlciA9IHJlcXVpcmUoJy4vQmxvY2tNYXBCdWlsZGVyJyk7XG52YXIgQ2hhcmFjdGVyTWV0YWRhdGEgPSByZXF1aXJlKCcuL0NoYXJhY3Rlck1ldGFkYXRhJyk7XG52YXIgQ29udGVudEJsb2NrID0gcmVxdWlyZSgnLi9Db250ZW50QmxvY2snKTtcbnZhciBDb250ZW50QmxvY2tOb2RlID0gcmVxdWlyZSgnLi9Db250ZW50QmxvY2tOb2RlJyk7XG52YXIgRHJhZnRGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuL0RyYWZ0RmVhdHVyZUZsYWdzJyk7XG52YXIgRHJhZnRNb2RpZmllciA9IHJlcXVpcmUoJy4vRHJhZnRNb2RpZmllcicpO1xudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xudmFyIFNlbGVjdGlvblN0YXRlID0gcmVxdWlyZSgnLi9TZWxlY3Rpb25TdGF0ZScpO1xuXG52YXIgZ2VuZXJhdGVSYW5kb21LZXkgPSByZXF1aXJlKCcuL2dlbmVyYXRlUmFuZG9tS2V5Jyk7XG52YXIgbW92ZUJsb2NrSW5Db250ZW50U3RhdGUgPSByZXF1aXJlKCcuL21vdmVCbG9ja0luQ29udGVudFN0YXRlJyk7XG5cbnZhciBleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQgPSBEcmFmdEZlYXR1cmVGbGFncy5kcmFmdF90cmVlX2RhdGFfc3VwcG9ydDtcbnZhciBDb250ZW50QmxvY2tSZWNvcmQgPSBleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQgPyBDb250ZW50QmxvY2tOb2RlIDogQ29udGVudEJsb2NrO1xuXG52YXIgTGlzdCA9IEltbXV0YWJsZS5MaXN0LFxuICAgIFJlcGVhdCA9IEltbXV0YWJsZS5SZXBlYXQ7XG5cblxudmFyIEF0b21pY0Jsb2NrVXRpbHMgPSB7XG4gIGluc2VydEF0b21pY0Jsb2NrOiBmdW5jdGlvbiBpbnNlcnRBdG9taWNCbG9jayhlZGl0b3JTdGF0ZSwgZW50aXR5S2V5LCBjaGFyYWN0ZXIpIHtcbiAgICB2YXIgY29udGVudFN0YXRlID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgc2VsZWN0aW9uU3RhdGUgPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcblxuICAgIHZhciBhZnRlclJlbW92YWwgPSBEcmFmdE1vZGlmaWVyLnJlbW92ZVJhbmdlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsICdiYWNrd2FyZCcpO1xuXG4gICAgdmFyIHRhcmdldFNlbGVjdGlvbiA9IGFmdGVyUmVtb3ZhbC5nZXRTZWxlY3Rpb25BZnRlcigpO1xuICAgIHZhciBhZnRlclNwbGl0ID0gRHJhZnRNb2RpZmllci5zcGxpdEJsb2NrKGFmdGVyUmVtb3ZhbCwgdGFyZ2V0U2VsZWN0aW9uKTtcbiAgICB2YXIgaW5zZXJ0aW9uVGFyZ2V0ID0gYWZ0ZXJTcGxpdC5nZXRTZWxlY3Rpb25BZnRlcigpO1xuXG4gICAgdmFyIGFzQXRvbWljQmxvY2sgPSBEcmFmdE1vZGlmaWVyLnNldEJsb2NrVHlwZShhZnRlclNwbGl0LCBpbnNlcnRpb25UYXJnZXQsICdhdG9taWMnKTtcblxuICAgIHZhciBjaGFyRGF0YSA9IENoYXJhY3Rlck1ldGFkYXRhLmNyZWF0ZSh7IGVudGl0eTogZW50aXR5S2V5IH0pO1xuXG4gICAgdmFyIGF0b21pY0Jsb2NrQ29uZmlnID0ge1xuICAgICAga2V5OiBnZW5lcmF0ZVJhbmRvbUtleSgpLFxuICAgICAgdHlwZTogJ2F0b21pYycsXG4gICAgICB0ZXh0OiBjaGFyYWN0ZXIsXG4gICAgICBjaGFyYWN0ZXJMaXN0OiBMaXN0KFJlcGVhdChjaGFyRGF0YSwgY2hhcmFjdGVyLmxlbmd0aCkpXG4gICAgfTtcblxuICAgIHZhciBhdG9taWNEaXZpZGVyQmxvY2tDb25maWcgPSB7XG4gICAgICBrZXk6IGdlbmVyYXRlUmFuZG9tS2V5KCksXG4gICAgICB0eXBlOiAndW5zdHlsZWQnXG4gICAgfTtcblxuICAgIGlmIChleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQpIHtcbiAgICAgIGF0b21pY0Jsb2NrQ29uZmlnID0gX2V4dGVuZHMoe30sIGF0b21pY0Jsb2NrQ29uZmlnLCB7XG4gICAgICAgIG5leHRTaWJsaW5nOiBhdG9taWNEaXZpZGVyQmxvY2tDb25maWcua2V5XG4gICAgICB9KTtcbiAgICAgIGF0b21pY0RpdmlkZXJCbG9ja0NvbmZpZyA9IF9leHRlbmRzKHt9LCBhdG9taWNEaXZpZGVyQmxvY2tDb25maWcsIHtcbiAgICAgICAgcHJldlNpYmxpbmc6IGF0b21pY0Jsb2NrQ29uZmlnLmtleVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGZyYWdtZW50QXJyYXkgPSBbbmV3IENvbnRlbnRCbG9ja1JlY29yZChhdG9taWNCbG9ja0NvbmZpZyksIG5ldyBDb250ZW50QmxvY2tSZWNvcmQoYXRvbWljRGl2aWRlckJsb2NrQ29uZmlnKV07XG5cbiAgICB2YXIgZnJhZ21lbnQgPSBCbG9ja01hcEJ1aWxkZXIuY3JlYXRlRnJvbUFycmF5KGZyYWdtZW50QXJyYXkpO1xuXG4gICAgdmFyIHdpdGhBdG9taWNCbG9jayA9IERyYWZ0TW9kaWZpZXIucmVwbGFjZVdpdGhGcmFnbWVudChhc0F0b21pY0Jsb2NrLCBpbnNlcnRpb25UYXJnZXQsIGZyYWdtZW50KTtcblxuICAgIHZhciBuZXdDb250ZW50ID0gd2l0aEF0b21pY0Jsb2NrLm1lcmdlKHtcbiAgICAgIHNlbGVjdGlvbkJlZm9yZTogc2VsZWN0aW9uU3RhdGUsXG4gICAgICBzZWxlY3Rpb25BZnRlcjogd2l0aEF0b21pY0Jsb2NrLmdldFNlbGVjdGlvbkFmdGVyKCkuc2V0KCdoYXNGb2N1cycsIHRydWUpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgbmV3Q29udGVudCwgJ2luc2VydC1mcmFnbWVudCcpO1xuICB9LFxuXG4gIG1vdmVBdG9taWNCbG9jazogZnVuY3Rpb24gbW92ZUF0b21pY0Jsb2NrKGVkaXRvclN0YXRlLCBhdG9taWNCbG9jaywgdGFyZ2V0UmFuZ2UsIGluc2VydGlvbk1vZGUpIHtcbiAgICB2YXIgY29udGVudFN0YXRlID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgc2VsZWN0aW9uU3RhdGUgPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcblxuICAgIHZhciB3aXRoTW92ZWRBdG9taWNCbG9jayA9IHZvaWQgMDtcblxuICAgIGlmIChpbnNlcnRpb25Nb2RlID09PSAnYmVmb3JlJyB8fCBpbnNlcnRpb25Nb2RlID09PSAnYWZ0ZXInKSB7XG4gICAgICB2YXIgdGFyZ2V0QmxvY2sgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tGb3JLZXkoaW5zZXJ0aW9uTW9kZSA9PT0gJ2JlZm9yZScgPyB0YXJnZXRSYW5nZS5nZXRTdGFydEtleSgpIDogdGFyZ2V0UmFuZ2UuZ2V0RW5kS2V5KCkpO1xuXG4gICAgICB3aXRoTW92ZWRBdG9taWNCbG9jayA9IG1vdmVCbG9ja0luQ29udGVudFN0YXRlKGNvbnRlbnRTdGF0ZSwgYXRvbWljQmxvY2ssIHRhcmdldEJsb2NrLCBpbnNlcnRpb25Nb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFmdGVyUmVtb3ZhbCA9IERyYWZ0TW9kaWZpZXIucmVtb3ZlUmFuZ2UoY29udGVudFN0YXRlLCB0YXJnZXRSYW5nZSwgJ2JhY2t3YXJkJyk7XG5cbiAgICAgIHZhciBzZWxlY3Rpb25BZnRlclJlbW92YWwgPSBhZnRlclJlbW92YWwuZ2V0U2VsZWN0aW9uQWZ0ZXIoKTtcbiAgICAgIHZhciBfdGFyZ2V0QmxvY2sgPSBhZnRlclJlbW92YWwuZ2V0QmxvY2tGb3JLZXkoc2VsZWN0aW9uQWZ0ZXJSZW1vdmFsLmdldEZvY3VzS2V5KCkpO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uQWZ0ZXJSZW1vdmFsLmdldFN0YXJ0T2Zmc2V0KCkgPT09IDApIHtcbiAgICAgICAgd2l0aE1vdmVkQXRvbWljQmxvY2sgPSBtb3ZlQmxvY2tJbkNvbnRlbnRTdGF0ZShhZnRlclJlbW92YWwsIGF0b21pY0Jsb2NrLCBfdGFyZ2V0QmxvY2ssICdiZWZvcmUnKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uQWZ0ZXJSZW1vdmFsLmdldEVuZE9mZnNldCgpID09PSBfdGFyZ2V0QmxvY2suZ2V0TGVuZ3RoKCkpIHtcbiAgICAgICAgd2l0aE1vdmVkQXRvbWljQmxvY2sgPSBtb3ZlQmxvY2tJbkNvbnRlbnRTdGF0ZShhZnRlclJlbW92YWwsIGF0b21pY0Jsb2NrLCBfdGFyZ2V0QmxvY2ssICdhZnRlcicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGFmdGVyU3BsaXQgPSBEcmFmdE1vZGlmaWVyLnNwbGl0QmxvY2soYWZ0ZXJSZW1vdmFsLCBzZWxlY3Rpb25BZnRlclJlbW92YWwpO1xuXG4gICAgICAgIHZhciBzZWxlY3Rpb25BZnRlclNwbGl0ID0gYWZ0ZXJTcGxpdC5nZXRTZWxlY3Rpb25BZnRlcigpO1xuICAgICAgICB2YXIgX3RhcmdldEJsb2NrMiA9IGFmdGVyU3BsaXQuZ2V0QmxvY2tGb3JLZXkoc2VsZWN0aW9uQWZ0ZXJTcGxpdC5nZXRGb2N1c0tleSgpKTtcblxuICAgICAgICB3aXRoTW92ZWRBdG9taWNCbG9jayA9IG1vdmVCbG9ja0luQ29udGVudFN0YXRlKGFmdGVyU3BsaXQsIGF0b21pY0Jsb2NrLCBfdGFyZ2V0QmxvY2syLCAnYmVmb3JlJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG5ld0NvbnRlbnQgPSB3aXRoTW92ZWRBdG9taWNCbG9jay5tZXJnZSh7XG4gICAgICBzZWxlY3Rpb25CZWZvcmU6IHNlbGVjdGlvblN0YXRlLFxuICAgICAgc2VsZWN0aW9uQWZ0ZXI6IHdpdGhNb3ZlZEF0b21pY0Jsb2NrLmdldFNlbGVjdGlvbkFmdGVyKCkuc2V0KCdoYXNGb2N1cycsIHRydWUpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgbmV3Q29udGVudCwgJ21vdmUtYmxvY2snKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdG9taWNCbG9ja1V0aWxzOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBTaW5nbGVKb2IgZnJvbSAnLi9TaW5nbGVKb2IuanMnO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuLi9nbG9iYWwvSGVhZGVyLmpzJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi4vZ2xvYmFsL0Zvb3Rlci5qcyc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgQnJvd3NlclJvdXRlciwgUm91dGUsIFN3aXRjaCwgTGluaywgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgRWRpdG9yLCBFZGl0b3JTdGF0ZSwgUmljaFV0aWxzLCBjb252ZXJ0VG9SYXcsIGNvbnZlcnRGcm9tUmF3IH0gZnJvbSAnZHJhZnQtanMnO1xuaW1wb3J0IHtzdGF0ZVRvSFRNTH0gZnJvbSAnZHJhZnQtanMtZXhwb3J0LWh0bWwnO1xuXG5jbGFzcyBKb2JQb3N0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGlkOiB0aGlzLnByb3BzLm1hdGNoLnBhcmFtcy5pZFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuXG4gICAgICAgIGNvbnN0IGdldFNpbmdsZUpvYkVuZHBvaW50ID0gYC9qb2IvYXBpLyR7dGhpcy5zdGF0ZS5pZH0vYDtcbiAgICAgICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9ICdCZWFyZXIgJytsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKVxuICAgICAgICBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7XG4gIFxuICAgICAgICBheGlvcyh7XG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICAgICAgdXJsOiBnZXRTaW5nbGVKb2JFbmRwb2ludCwgXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnSldUICcrbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyksXG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCByZXNwb25zZSA9PiB7IFxuICAgXG4gICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgam9iSW5mbzogcmVzcG9uc2UuZGF0YVxuICAgICAgICAgICB9KVxuXG4gICAgICAgICAgIGNvbnN0IGdpdmVuQ29udGVudCA9IHJlc3BvbnNlLmRhdGEuZGVzY3JpcHRpb247XG4gICAgICAgICAgIGNvbnN0IHBhcnNlZENvbnRlbnQgPSBKU09OLnBhcnNlKGdpdmVuQ29udGVudCk7XG4gICAgICAgICAgIGNvbnN0IGltbXV0YWJsZUNvbnRlbnQgPSBjb252ZXJ0RnJvbVJhdyhwYXJzZWRDb250ZW50KTtcbiAgICAgICAgICAgXG4gICAgICAgICAgIGNvbnN0IGpvYkh0bWwgPSBzdGF0ZVRvSFRNTChpbW11dGFibGVDb250ZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGpvYk91dHB1dEh0bWwgPSB7X19odG1sOiBqb2JIdG1sfVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgam9iSHRtbDogam9iSHRtbCxcbiAgICAgICAgICAgICAgICBqb2JPdXRwdXRIdG1sOiBqb2JPdXRwdXRIdG1sXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICAgICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9ICdCZWFyZXIgJytsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKVxuICAgICAgICAgICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5wb3N0WydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdDb21wYW55RW5kUG9pbnQgPSBgL2NvbXBhbnkvYXBpLyR7dGhpcy5zdGF0ZS5qb2JJbmZvLnBvc3RlZF9ieV9jb21wYW55fS9gO1xuXG4gICAgICAgICAgICBheGlvcyh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgICAgICAgICB1cmw6IGV4aXN0aW5nQ29tcGFueUVuZFBvaW50LCBcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnK2xvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpLFxuICAgICAgICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbidcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4geyBcbiAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYW55SW5mbzogcmVzcG9uc2UuZGF0YVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2l2ZW5Db21wYW55Q29udGVudCA9IHJlc3BvbnNlLmRhdGEuZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZENvbXBhbnlDb250ZW50ID0gSlNPTi5wYXJzZShnaXZlbkNvbXBhbnlDb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1tdXRhYmxlQ29tcGFueUNvbnRlbnQgPSBjb252ZXJ0RnJvbVJhdyhwYXJzZWRDb21wYW55Q29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wYW55SHRtbCA9IHN0YXRlVG9IVE1MKGltbXV0YWJsZUNvbXBhbnlDb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBhbnlPdXRwdXRIdG1sID0ge19faHRtbDogY29tcGFueUh0bWx9XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYW55SHRtbDogY29tcGFueUh0bWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFueU91dHB1dEh0bWw6IGNvbXBhbnlPdXRwdXRIdG1sLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhbnlOYW1lOiByZXNwb25zZS5kYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBhbiBlcnJvciB5b1wiLCBlcnJvcik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0aGlzIGlzIGFuIGVycm9yIHlvXCIsIGVycm9yKTtcbiAgICAgICAgICB9KVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPEhlYWRlci8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJqb2Itd3JhcHBlci1vdXRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuY29tcGFueUluZm8gJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImNvbXBhbnktZGV0YWlscy1vbi1qb2JcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gaWQ9XCJpbmRpdmlkdWFsLWNvbXBhbnktbG9nby1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXsgdGhpcy5zdGF0ZS5jb21wYW55SW5mby5sYXJnZV9sb2dvIH0gYWx0PVwiY29tcGFueSBsb2dvXCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGlkPVwiaW5kaXZpZHVhbC1jb21wYW55LWRldGFpbHMtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+e3RoaXMuc3RhdGUuY29tcGFueUluZm8ubmFtZX08L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYW5nZXJvdXNseVNldElubmVySFRNTD17dGhpcy5zdGF0ZS5jb21wYW55T3V0cHV0SHRtbH0+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmpvYkluZm8gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiam9iLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGlkPVwiam9iLXdyYXBwZXItaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJqb2Itd3JhcHBlci10aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPnt0aGlzLnN0YXRlLmpvYkluZm8udGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJqb2Itd3JhcHBlci1zbHVnXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+e3RoaXMuc3RhdGUuam9iSW5mby5zbHVnfTwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBpZD1cImluZGl2aWR1YWwtam9iLWRldGFpbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlBvc3RlZCBvbjo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57dGhpcy5zdGF0ZS5qb2JJbmZvLmNyZWF0ZWRfZGF0ZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+QXJlYTo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57dGhpcy5zdGF0ZS5qb2JJbmZvLmFyZWF9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkhvdXJzOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt0aGlzLnN0YXRlLmpvYkluZm8uaG91cnN9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkxvY2F0aW9uOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt0aGlzLnN0YXRlLmpvYkluZm8ubG9jYXRpb259PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNhbGFyeTo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57dGhpcy5zdGF0ZS5qb2JJbmZvLnNhbGFyeX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiaW5kaXZpZHVhbC1qb2ItdGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkpvYiBEZXNjcmlwdGlvbjo8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3RoaXMuc3RhdGUuam9iT3V0cHV0SHRtbH0+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxGb290ZXIvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgIClcbn1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSm9iUG9zdDsiLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQoZSl7cmV0dXJuIGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcImRlZmF1bHRcImluIGU/ZS5kZWZhdWx0OmV9T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIFJlYWN0PV9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLGNsYXNzQ2FsbENoZWNrPWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0saW5oZXJpdHM9ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0scG9zc2libGVDb25zdHJ1Y3RvclJldHVybj1mdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fSxBcHBDb250YWluZXI9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBjbGFzc0NhbGxDaGVjayh0aGlzLHQpLHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcyxlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGluaGVyaXRzKHQsZSksdC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7cmV0dXJuIFJlYWN0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbil9LHR9KFJlYWN0LkNvbXBvbmVudCksaG90X3Byb2Q9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGV9fSxhcmVDb21wb25lbnRzRXF1YWw9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT09PXR9LHNldENvbmZpZz1mdW5jdGlvbigpe307ZXhwb3J0cy5BcHBDb250YWluZXI9QXBwQ29udGFpbmVyLGV4cG9ydHMuaG90PWhvdF9wcm9kLGV4cG9ydHMuYXJlQ29tcG9uZW50c0VxdWFsPWFyZUNvbXBvbmVudHNFcXVhbCxleHBvcnRzLnNldENvbmZpZz1zZXRDb25maWc7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBidG9hIHBvbHlmaWxsIGZvciBJRTwxMCBjb3VydGVzeSBodHRwczovL2dpdGh1Yi5jb20vZGF2aWRjaGFtYmVycy9CYXNlNjQuanNcblxudmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcblxuZnVuY3Rpb24gRSgpIHtcbiAgdGhpcy5tZXNzYWdlID0gJ1N0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3Rlcic7XG59XG5FLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcbkUucHJvdG90eXBlLmNvZGUgPSA1O1xuRS5wcm90b3R5cGUubmFtZSA9ICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InO1xuXG5mdW5jdGlvbiBidG9hKGlucHV0KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpO1xuICB2YXIgb3V0cHV0ID0gJyc7XG4gIGZvciAoXG4gICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycztcbiAgICAvLyBpZiB0aGUgbmV4dCBzdHIgaW5kZXggZG9lcyBub3QgZXhpc3Q6XG4gICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG4gICAgc3RyLmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAvLyBcIjggLSBpZHggJSAxICogOFwiIGdlbmVyYXRlcyB0aGUgc2VxdWVuY2UgMiwgNCwgNiwgOFxuICAgIG91dHB1dCArPSBtYXAuY2hhckF0KDYzICYgYmxvY2sgPj4gOCAtIGlkeCAlIDEgKiA4KVxuICApIHtcbiAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCArPSAzIC8gNCk7XG4gICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgdGhyb3cgbmV3IEUoKTtcbiAgICB9XG4gICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidG9hO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgLy8gTm90ZTogc3RhdHVzIGlzIG5vdCBleHBvc2VkIGJ5IFhEb21haW5SZXF1ZXN0XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IHV0aWxzLm1lcmdlKHtcbiAgICAgIHVybDogYXJndW1lbnRzWzBdXG4gICAgfSwgYXJndW1lbnRzWzFdKTtcbiAgfVxuXG4gIGNvbmZpZyA9IHV0aWxzLm1lcmdlKGRlZmF1bHRzLCB7bWV0aG9kOiAnZ2V0J30sIHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuLi8uLi9jb21wb25lbnRzL2dsb2JhbC9IZWFkZXIuanMnO1xuaW1wb3J0IEZvb3RlciBmcm9tICcuLi8uLi9jb21wb25lbnRzL2dsb2JhbC9Gb290ZXIuanMnO1xuaW1wb3J0IEpvYnNQYWdlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvam9icy9Kb2JzUGFnZS5qcyc7XG5pbXBvcnQgSm9iUG9zdCBmcm9tICcuLi8uLi9jb21wb25lbnRzL2pvYnMvSm9iUG9zdC5qcyc7XG5pbXBvcnQgTmV3Q29tcGFueVBhZ2UgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9kYXNoYm9hcmRzL2NvbXBhbmllcy9OZXdDb21wYW55UGFnZS5qcyc7XG5pbXBvcnQgVmlld0NvbXBhbnlQYWdlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZGFzaGJvYXJkcy9jb21wYW5pZXMvVmlld0NvbXBhbnlQYWdlLmpzJztcbmltcG9ydCBOZXdKb2JQYWdlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZGFzaGJvYXJkcy9qb2JzL05ld0pvYlBhZ2UuanMnO1xuaW1wb3J0IFZpZXdKb2JQYWdlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZGFzaGJvYXJkcy9qb2JzL1ZpZXdKb2JQYWdlLmpzJztcbmltcG9ydCBIb21lIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZ2xvYmFsL0hvbWUuanMnO1xuaW1wb3J0IEFib3V0IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZ2xvYmFsL0Fib3V0LmpzJztcbmltcG9ydCBDb250YWN0IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZ2xvYmFsL0NvbnRhY3QuanMnO1xuaW1wb3J0IFJlZ2lzdGVyIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZ2xvYmFsL1JlZ2lzdGVyLmpzJztcbmltcG9ydCBMb2dpbiBmcm9tICcuLi8uLi9jb21wb25lbnRzL2dsb2JhbC9Mb2dpbi5qcyc7XG5pbXBvcnQgTXlBY2NvdW50IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZGFzaGJvYXJkcy9NeUFjY291bnQuanMnO1xuaW1wb3J0IEVtcGxveWVlRGFzaGJvYXJkIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZGFzaGJvYXJkcy9FbXBsb3llZURhc2hib2FyZC5qcyc7XG5pbXBvcnQgRW1wbG95ZXJEYXNoYm9hcmQgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9kYXNoYm9hcmRzL0VtcGxveWVyRGFzaGJvYXJkLmpzJztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIsIFJvdXRlLCBTd2l0Y2gsIExpbmssIE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuXG5mdW5jdGlvbiBBcHBSb3V0ZXIocHJvcHMpIHtcbiAgICByZXR1cm4gKFxuICAgIDxCcm93c2VyUm91dGVyPlxuICAgICAgIDxTd2l0Y2g+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9cIiBjb21wb25lbnQ9e0hvbWV9IGV4YWN0PXt0cnVlfSAvPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvbXlfYWNjb3VudFwiIGNvbXBvbmVudD17TXlBY2NvdW50fS8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9lbXBsb3llZV9kYXNoYm9hcmRcIiBjb21wb25lbnQ9e0VtcGxveWVlRGFzaGJvYXJkfS8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9lbXBsb3llcl9kYXNoYm9hcmRcIiBjb21wb25lbnQ9e0VtcGxveWVyRGFzaGJvYXJkfS8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9yZWdpc3RlclwiIGNvbXBvbmVudD17UmVnaXN0ZXJ9Lz5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2xvZ2luXCIgY29tcG9uZW50PXtMb2dpbn0vPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvYWJvdXRcIiBjb21wb25lbnQ9e0Fib3V0fS8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9jb250YWN0XCIgY29tcG9uZW50PXtDb250YWN0fS8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9uZXdfY29tcGFueVwiIGNvbXBvbmVudD17TmV3Q29tcGFueVBhZ2V9Lz5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXdfY29tcGFueS86aWRcIiBjb21wb25lbnQ9e1ZpZXdDb21wYW55UGFnZX0vPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvbmV3X2pvYlwiIGNvbXBvbmVudD17TmV3Sm9iUGFnZX0vPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlld19qb2IvOmlkXCIgY29tcG9uZW50PXtWaWV3Sm9iUGFnZX0vPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvam9iX3Bvc3QvOmlkXCIgY29tcG9uZW50PXtKb2JQb3N0fS8+XG4gICAgICAgICAgIFxuICAgICAgICAgICAgPFJvdXRlIGNvbXBvbmVudD17Tm90Rm91bmRQYWdlfS8+XG4gICAgICAgPC9Td2l0Y2g+XG4gICAgPC9Ccm93c2VyUm91dGVyPlxuICAgIClcbn1cblxuZnVuY3Rpb24gTm90Rm91bmRQYWdlKHByb3BzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxoMT40MDQgcGFnZTwvaDE+XG4gICAgICAgICAgICA8TGluayB0bz1cIi9cIj5Hb3QgdG8gaG9tZXBhZ2U8L0xpbms+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcFJvdXRlcjsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjMuMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGJhPXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIiksZWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpLEE9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksQz1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxmYT1yZXF1aXJlKFwiZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudFwiKSxoYT1yZXF1aXJlKFwiZmJqcy9saWIvc2hhbGxvd0VxdWFsXCIpLGphPXJlcXVpcmUoXCJmYmpzL2xpYi9jb250YWluc05vZGVcIiksa2E9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpO1xuZnVuY3Rpb24gRChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJodHRwOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50XFx4M2RcIithLGQ9MDtkPGI7ZCsrKWMrPVwiXFx4MjZhcmdzW11cXHgzZFwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7YmEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1lYT92b2lkIDA6RChcIjIyN1wiKTtcbmZ1bmN0aW9uIG1hKGEsYixjLGQsZSxmLGgsZyxrKXt0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMTt0aGlzLl9jYXVnaHRFcnJvcj1udWxsO3ZhciB2PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLHYpfWNhdGNoKGwpe3RoaXMuX2NhdWdodEVycm9yPWwsdGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITB9fVxudmFyIEU9e19jYXVnaHRFcnJvcjpudWxsLF9oYXNDYXVnaHRFcnJvcjohMSxfcmV0aHJvd0Vycm9yOm51bGwsX2hhc1JldGhyb3dFcnJvcjohMSxpbnZva2VHdWFyZGVkQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsaCxnLGspe21hLmFwcGx5KEUsYXJndW1lbnRzKX0saW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGgsZyxrKXtFLmludm9rZUd1YXJkZWRDYWxsYmFjay5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoRS5oYXNDYXVnaHRFcnJvcigpKXt2YXIgdj1FLmNsZWFyQ2F1Z2h0RXJyb3IoKTtFLl9oYXNSZXRocm93RXJyb3J8fChFLl9oYXNSZXRocm93RXJyb3I9ITAsRS5fcmV0aHJvd0Vycm9yPXYpfX0scmV0aHJvd0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIG5hLmFwcGx5KEUsYXJndW1lbnRzKX0saGFzQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gRS5faGFzQ2F1Z2h0RXJyb3J9LGNsZWFyQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtpZihFLl9oYXNDYXVnaHRFcnJvcil7dmFyIGE9XG5FLl9jYXVnaHRFcnJvcjtFLl9jYXVnaHRFcnJvcj1udWxsO0UuX2hhc0NhdWdodEVycm9yPSExO3JldHVybiBhfUQoXCIxOThcIil9fTtmdW5jdGlvbiBuYSgpe2lmKEUuX2hhc1JldGhyb3dFcnJvcil7dmFyIGE9RS5fcmV0aHJvd0Vycm9yO0UuX3JldGhyb3dFcnJvcj1udWxsO0UuX2hhc1JldGhyb3dFcnJvcj0hMTt0aHJvdyBhO319dmFyIG9hPW51bGwscGE9e307XG5mdW5jdGlvbiBxYSgpe2lmKG9hKWZvcih2YXIgYSBpbiBwYSl7dmFyIGI9cGFbYV0sYz1vYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOkQoXCI5NlwiLGEpO2lmKCFyYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDpEKFwiOTdcIixhKTtyYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxoPWIsZz1kO3NhLmhhc093blByb3BlcnR5KGcpP0QoXCI5OVwiLGcpOnZvaWQgMDtzYVtnXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ0YShrW2VdLGgsZyk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odGEoZi5yZWdpc3RyYXRpb25OYW1lLGgsZyksZT0hMCk6ZT0hMTtlP3ZvaWQgMDpEKFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gdGEoYSxiLGMpe3VhW2FdP0QoXCIxMDBcIixhKTp2b2lkIDA7dWFbYV09Yjt2YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciByYT1bXSxzYT17fSx1YT17fSx2YT17fTtmdW5jdGlvbiB3YShhKXtvYT9EKFwiMTAxXCIpOnZvaWQgMDtvYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtxYSgpfWZ1bmN0aW9uIHhhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO3BhLmhhc093blByb3BlcnR5KGMpJiZwYVtjXT09PWR8fChwYVtjXT9EKFwiMTAyXCIsYyk6dm9pZCAwLHBhW2NdPWQsYj0hMCl9YiYmcWEoKX1cbnZhciBDYT1PYmplY3QuZnJlZXplKHtwbHVnaW5zOnJhLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpzYSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczp1YSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOnZhLHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6bnVsbCxpbmplY3RFdmVudFBsdWdpbk9yZGVyOndhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp4YX0pLERhPW51bGwsRWE9bnVsbCxGYT1udWxsO2Z1bmN0aW9uIEdhKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9RmEoZCk7RS5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIEhhKGEsYil7bnVsbD09Yj9EKFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBJYShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgSmE9bnVsbDtcbmZ1bmN0aW9uIEthKGEsYil7aWYoYSl7dmFyIGM9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsZD1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZSsrKUdhKGEsYixjW2VdLGRbZV0pO2Vsc2UgYyYmR2EoYSxiLGMsZCk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gTGEoYSl7cmV0dXJuIEthKGEsITApfWZ1bmN0aW9uIE1hKGEpe3JldHVybiBLYShhLCExKX12YXIgTmE9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6d2EsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnhhfTtcbmZ1bmN0aW9uIE9hKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9RGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIFBhKGEsYil7bnVsbCE9PWEmJihKYT1IYShKYSxhKSk7YT1KYTtKYT1udWxsO2EmJihiP0lhKGEsTGEpOklhKGEsTWEpLEphP0QoXCI5NVwiKTp2b2lkIDAsRS5yZXRocm93Q2F1Z2h0RXJyb3IoKSl9ZnVuY3Rpb24gUWEoYSxiLGMsZCl7Zm9yKHZhciBlPW51bGwsZj0wO2Y8cmEubGVuZ3RoO2YrKyl7dmFyIGg9cmFbZl07aCYmKGg9aC5leHRyYWN0RXZlbnRzKGEsYixjLGQpKSYmKGU9SGEoZSxoKSl9UGEoZSwhMSl9dmFyIFJhPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpOYSxnZXRMaXN0ZW5lcjpPYSxydW5FdmVudHNJbkJhdGNoOlBhLHJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2g6UWF9KSxTYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxGPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrU2EsVGE9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitTYTtcbmZ1bmN0aW9uIFVhKGEpe2lmKGFbRl0pcmV0dXJuIGFbRl07Zm9yKDshYVtGXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0ZdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gVmEoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO0QoXCIzM1wiKX1mdW5jdGlvbiBYYShhKXtyZXR1cm4gYVtUYV18fG51bGx9dmFyIGJiPU9iamVjdC5mcmVlemUoe3ByZWNhY2hlRmliZXJOb2RlOmZ1bmN0aW9uKGEsYil7YltGXT1hfSxnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZTpVYSxnZXRJbnN0YW5jZUZyb21Ob2RlOmZ1bmN0aW9uKGEpe2E9YVtGXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfSxnZXROb2RlRnJvbUluc3RhbmNlOlZhLGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU6WGEsdXBkYXRlRmliZXJQcm9wczpmdW5jdGlvbihhLGIpe2FbVGFdPWJ9fSk7XG5mdW5jdGlvbiBMKGEpe2RvIGE9YVtcInJldHVyblwiXTt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBjYihhLGIsYyl7Zm9yKHZhciBkPVtdO2E7KWQucHVzaChhKSxhPUwoYSk7Zm9yKGE9ZC5sZW5ndGg7MDxhLS07KWIoZFthXSxcImNhcHR1cmVkXCIsYyk7Zm9yKGE9MDthPGQubGVuZ3RoO2ErKyliKGRbYV0sXCJidWJibGVkXCIsYyl9ZnVuY3Rpb24gZGIoYSxiLGMpe2lmKGI9T2EoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1IYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1IYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBlYihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzJiZjYihhLl90YXJnZXRJbnN0LGRiLGEpfVxuZnVuY3Rpb24gZmIoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7dmFyIGI9YS5fdGFyZ2V0SW5zdDtiPWI/TChiKTpudWxsO2NiKGIsZGIsYSl9fWZ1bmN0aW9uIGdiKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPU9hKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1IYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1IYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gaGIoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZnYihhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gaWIoYSl7SWEoYSxlYil9XG5mdW5jdGlvbiBqYihhLGIsYyxkKXtpZihjJiZkKWE6e3ZhciBlPWM7Zm9yKHZhciBmPWQsaD0wLGc9ZTtnO2c9TChnKSloKys7Zz0wO2Zvcih2YXIgaz1mO2s7az1MKGspKWcrKztmb3IoOzA8aC1nOyllPUwoZSksaC0tO2Zvcig7MDxnLWg7KWY9TChmKSxnLS07Zm9yKDtoLS07KXtpZihlPT09Znx8ZT09PWYuYWx0ZXJuYXRlKWJyZWFrIGE7ZT1MKGUpO2Y9TChmKX1lPW51bGx9ZWxzZSBlPW51bGw7Zj1lO2ZvcihlPVtdO2MmJmMhPT1mOyl7aD1jLmFsdGVybmF0ZTtpZihudWxsIT09aCYmaD09PWYpYnJlYWs7ZS5wdXNoKGMpO2M9TChjKX1mb3IoYz1bXTtkJiZkIT09Zjspe2g9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWgmJmg9PT1mKWJyZWFrO2MucHVzaChkKTtkPUwoZCl9Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrKylnYihlW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihhPWMubGVuZ3RoOzA8YS0tOylnYihjW2FdLFwiY2FwdHVyZWRcIixiKX1cbnZhciBrYj1PYmplY3QuZnJlZXplKHthY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOmliLGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0OmZ1bmN0aW9uKGEpe0lhKGEsZmIpfSxhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6amIsYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6ZnVuY3Rpb24oYSl7SWEoYSxoYil9fSksbGI9bnVsbDtmdW5jdGlvbiBtYigpeyFsYiYmbS5jYW5Vc2VET00mJihsYj1cInRleHRDb250ZW50XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/XCJ0ZXh0Q29udGVudFwiOlwiaW5uZXJUZXh0XCIpO3JldHVybiBsYn12YXIgTT17X3Jvb3Q6bnVsbCxfc3RhcnRUZXh0Om51bGwsX2ZhbGxiYWNrVGV4dDpudWxsfTtcbmZ1bmN0aW9uIG5iKCl7aWYoTS5fZmFsbGJhY2tUZXh0KXJldHVybiBNLl9mYWxsYmFja1RleHQ7dmFyIGEsYj1NLl9zdGFydFRleHQsYz1iLmxlbmd0aCxkLGU9b2IoKSxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBoPWMtYTtmb3IoZD0xO2Q8PWgmJmJbYy1kXT09PWVbZi1kXTtkKyspO00uX2ZhbGxiYWNrVGV4dD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApO3JldHVybiBNLl9mYWxsYmFja1RleHR9ZnVuY3Rpb24gb2IoKXtyZXR1cm5cInZhbHVlXCJpbiBNLl9yb290P00uX3Jvb3QudmFsdWU6TS5fcm9vdFttYigpXX1cbnZhciBwYj1cImRpc3BhdGNoQ29uZmlnIF90YXJnZXRJbnN0IG5hdGl2ZUV2ZW50IGlzRGVmYXVsdFByZXZlbnRlZCBpc1Byb3BhZ2F0aW9uU3RvcHBlZCBfZGlzcGF0Y2hMaXN0ZW5lcnMgX2Rpc3BhdGNoSW5zdGFuY2VzXCIuc3BsaXQoXCIgXCIpLHFiPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpDLnRoYXRSZXR1cm5zTnVsbCxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuZnVuY3Rpb24gTihhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/Qy50aGF0UmV0dXJuc1RydWU6Qy50aGF0UmV0dXJuc0ZhbHNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Qy50aGF0UmV0dXJuc0ZhbHNlO3JldHVybiB0aGlzfVxuQShOLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPUMudGhhdFJldHVybnNUcnVlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNUcnVlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PUMudGhhdFJldHVybnNUcnVlfSxpc1BlcnNpc3RlbnQ6Qy50aGF0UmV0dXJuc0ZhbHNlLFxuZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLGI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7Zm9yKGE9MDthPHBiLmxlbmd0aDthKyspdGhpc1twYlthXV09bnVsbH19KTtOLkludGVyZmFjZT1xYjtOLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtBKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1BKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO3JiKGMpO3JldHVybiBjfTtyYihOKTtcbmZ1bmN0aW9uIHNiKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIHRiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDpEKFwiMjIzXCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiByYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1zYjthLnJlbGVhc2U9dGJ9dmFyIHViPU4uZXh0ZW5kKHtkYXRhOm51bGx9KSx2Yj1OLmV4dGVuZCh7ZGF0YTpudWxsfSksd2I9WzksMTMsMjcsMzJdLHhiPW0uY2FuVXNlRE9NJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyx5Yj1udWxsO20uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJih5Yj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHpiPW0uY2FuVXNlRE9NJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYheWIsQWI9bS5jYW5Vc2VET00mJigheGJ8fHliJiY4PHliJiYxMT49eWIpLEJiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLEtiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1widG9wQ29tcG9zaXRpb25FbmRcIixcInRvcEtleVByZXNzXCIsXCJ0b3BUZXh0SW5wdXRcIixcInRvcFBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uRW5kIHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25TdGFydCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvblVwZGF0ZSB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX19LExiPSExO1xuZnVuY3Rpb24gTWIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuLTEhPT13Yi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcInRvcEtleURvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmNhc2UgXCJ0b3BNb3VzZURvd25cIjpjYXNlIFwidG9wQmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIE5iKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIE9iPSExO2Z1bmN0aW9uIFBiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOnJldHVybiBOYihiKTtjYXNlIFwidG9wS2V5UHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7TGI9ITA7cmV0dXJuIEJiO2Nhc2UgXCJ0b3BUZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PUJiJiZMYj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBRYihhLGIpe2lmKE9iKXJldHVyblwidG9wQ29tcG9zaXRpb25FbmRcIj09PWF8fCF4YiYmTWIoYSxiKT8oYT1uYigpLE0uX3Jvb3Q9bnVsbCxNLl9zdGFydFRleHQ9bnVsbCxNLl9mYWxsYmFja1RleHQ9bnVsbCxPYj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwidG9wUGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5UHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gQWI/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgUmI9e2V2ZW50VHlwZXM6S2IsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKHhiKWI6e3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25TdGFydFwiOmU9S2IuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOmU9S2IuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25VcGRhdGVcIjplPUtiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSBPYj9NYihhLGMpJiYoZT1LYi5jb21wb3NpdGlvbkVuZCk6XCJ0b3BLZXlEb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPUtiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KEFiJiYoT2J8fGUhPT1LYi5jb21wb3NpdGlvblN0YXJ0P2U9PT1LYi5jb21wb3NpdGlvbkVuZCYmT2ImJihmPW5iKCkpOihNLl9yb290PWQsTS5fc3RhcnRUZXh0PW9iKCksT2I9ITApKSxlPXViLmdldFBvb2xlZChlLFxuYixjLGQpLGY/ZS5kYXRhPWY6KGY9TmIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLGliKGUpLGY9ZSk6Zj1udWxsOyhhPXpiP1BiKGEsYyk6UWIoYSxjKSk/KGI9dmIuZ2V0UG9vbGVkKEtiLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxpYihiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxTYj1udWxsLFRiPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe1NiPWF9fSxVYj1udWxsLFZiPW51bGw7ZnVuY3Rpb24gV2IoYSl7aWYoYT1FYShhKSl7U2ImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBTYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpEKFwiMTk0XCIpO3ZhciBiPURhKGEuc3RhdGVOb2RlKTtTYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gWGIoYSl7VWI/VmI/VmIucHVzaChhKTpWYj1bYV06VWI9YX1cbmZ1bmN0aW9uIFliKCl7cmV0dXJuIG51bGwhPT1VYnx8bnVsbCE9PVZifWZ1bmN0aW9uIFpiKCl7aWYoVWIpe3ZhciBhPVViLGI9VmI7VmI9VWI9bnVsbDtXYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspV2IoYlthXSl9fXZhciAkYj1PYmplY3QuZnJlZXplKHtpbmplY3Rpb246VGIsZW5xdWV1ZVN0YXRlUmVzdG9yZTpYYixuZWVkc1N0YXRlUmVzdG9yZTpZYixyZXN0b3JlU3RhdGVJZk5lZWRlZDpaYn0pO2Z1bmN0aW9uIGFjKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gYmMoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gY2MoKXt9dmFyIGRjPSExO2Z1bmN0aW9uIGVjKGEsYil7aWYoZGMpcmV0dXJuIGEoYik7ZGM9ITA7dHJ5e3JldHVybiBhYyhhLGIpfWZpbmFsbHl7ZGM9ITEsWWIoKSYmKGNjKCksWmIoKSl9fVxudmFyIGZjPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIGdjKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhZmNbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIGhjKGEpe2E9YS50YXJnZXR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKCFtLmNhblVzZURPTXx8YiYmIShcImFkZEV2ZW50TGlzdGVuZXJcImluIGRvY3VtZW50KSlyZXR1cm4hMTthPVwib25cIithO2I9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIGpjKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBrYyhhKXt2YXIgYj1qYyhhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldClyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjLmdldC5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Yy5zZXQuY2FsbCh0aGlzLGEpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSkse2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9bnVsbDtkZWxldGUgYVtiXX19fVxuZnVuY3Rpb24gbGMoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPWtjKGEpKX1mdW5jdGlvbiBtYyhhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9amMoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1cbnZhciBuYz1lYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixPPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbFtcImZvclwiXSxvYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jYWxsXCIpOjYwMTA0LHFjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucmV0dXJuXCIpOjYwMTA1LHJjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHNjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHZjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx3Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsXG54Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHljPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiB6YyhhKXtpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eWMmJmFbeWNdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBBYyhhKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBzYzpyZXR1cm5cIlJlYWN0RnJhZ21lbnRcIjtjYXNlIHJjOnJldHVyblwiUmVhY3RQb3J0YWxcIjtjYXNlIHBjOnJldHVyblwiUmVhY3RDYWxsXCI7Y2FzZSBxYzpyZXR1cm5cIlJlYWN0UmV0dXJuXCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB4YzpyZXR1cm4gYT1hLnJlbmRlci5kaXNwbGF5TmFtZXx8YS5yZW5kZXIubmFtZXx8XCJcIixcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIn1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEJjKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDE6Y2FzZSAyOmNhc2UgNTp2YXIgYz1hLl9kZWJ1Z093bmVyLGQ9YS5fZGVidWdTb3VyY2U7dmFyIGU9QWMoYSk7dmFyIGY9bnVsbDtjJiYoZj1BYyhjKSk7Yz1kO2U9XCJcXG4gICAgaW4gXCIrKGV8fFwiVW5rbm93blwiKSsoYz9cIiAoYXQgXCIrYy5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLFwiXCIpK1wiOlwiK2MubGluZU51bWJlcitcIilcIjpmP1wiIChjcmVhdGVkIGJ5IFwiK2YrXCIpXCI6XCJcIik7YnJlYWsgYTtkZWZhdWx0OmU9XCJcIn1iKz1lO2E9YVtcInJldHVyblwiXX13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBDYz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sRGM9e30sRWM9e307ZnVuY3Rpb24gRmMoYSl7aWYoRWMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITA7aWYoRGMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITE7aWYoQ2MudGVzdChhKSlyZXR1cm4gRWNbYV09ITA7RGNbYV09ITA7cmV0dXJuITF9XG5mdW5jdGlvbiBHYyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBIYyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxHYyhhLGIsYyxkKSlyZXR1cm4hMDtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1cbmZ1bmN0aW9uIFUoYSxiLGMsZCxlKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBWPXt9O1wiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDAsITEsYSxudWxsKX0pO1xuW1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO1ZbYl09bmV3IFUoYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwyLCExLGEsbnVsbCl9KTtcblwiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwzLCEwLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDQsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDYsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgU2M9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBUYyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShTYyxcblRjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShTYyxUYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShTYyxUYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO1YudGFiSW5kZXg9bmV3IFUoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24gVWMoYSxiLGMsZCl7dmFyIGU9Vi5oYXNPd25Qcm9wZXJ0eShiKT9WW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoSGMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP0ZjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiBWYyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gV2MoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9WGMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBZYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlVjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBaYyhhLGIpe1ljKGEsYik7dmFyIGM9WGMoYi52YWx1ZSk7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09Yi50eXBlKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2IuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT8kYyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiYkYyhhLGIudHlwZSxYYyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGFkKGEsYil7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKVwiXCI9PT1hLnZhbHVlJiYoYS52YWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpLGEuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtiPWEubmFtZTtcIlwiIT09YiYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7XCJcIiE9PWImJihhLm5hbWU9Yil9ZnVuY3Rpb24gJGMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfVxuZnVuY3Rpb24gWGMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fXZhciBiZD17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDaGFuZ2UgdG9wQ2xpY2sgdG9wRm9jdXMgdG9wSW5wdXQgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBjZChhLGIsYyl7YT1OLmdldFBvb2xlZChiZC5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO1hiKGMpO2liKGEpO3JldHVybiBhfXZhciBkZD1udWxsLGVkPW51bGw7ZnVuY3Rpb24gZmQoYSl7UGEoYSwhMSl9XG5mdW5jdGlvbiBnZChhKXt2YXIgYj1WYShhKTtpZihtYyhiKSlyZXR1cm4gYX1mdW5jdGlvbiBoZChhLGIpe2lmKFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBpZD0hMTttLmNhblVzZURPTSYmKGlkPWljKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIGpkKCl7ZGQmJihkZC5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixrZCksZWQ9ZGQ9bnVsbCl9ZnVuY3Rpb24ga2QoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJmdkKGVkKSYmKGE9Y2QoZWQsYSxoYyhhKSksZWMoZmQsYSkpfWZ1bmN0aW9uIGxkKGEsYixjKXtcInRvcEZvY3VzXCI9PT1hPyhqZCgpLGRkPWIsZWQ9YyxkZC5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixrZCkpOlwidG9wQmx1clwiPT09YSYmamQoKX1cbmZ1bmN0aW9uIG1kKGEpe2lmKFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI9PT1hfHxcInRvcEtleVVwXCI9PT1hfHxcInRvcEtleURvd25cIj09PWEpcmV0dXJuIGdkKGVkKX1mdW5jdGlvbiBuZChhLGIpe2lmKFwidG9wQ2xpY2tcIj09PWEpcmV0dXJuIGdkKGIpfWZ1bmN0aW9uIG9kKGEsYil7aWYoXCJ0b3BJbnB1dFwiPT09YXx8XCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGdkKGIpfVxudmFyIHBkPXtldmVudFR5cGVzOmJkLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6aWQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1ZhKGIpOndpbmRvdyxmPXZvaWQgMCxoPXZvaWQgMCxnPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09Z3x8XCJpbnB1dFwiPT09ZyYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1oZDpnYyhlKT9pZD9mPW9kOihmPW1kLGg9bGQpOihnPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1nLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPW5kKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBjZChmLGMsZCk7aCYmaChhLGUsYik7XCJ0b3BCbHVyXCI9PT1hJiZudWxsIT1iJiYoYT1iLl93cmFwcGVyU3RhdGV8fGUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmJGMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0scWQ9Ti5leHRlbmQoe3ZpZXc6bnVsbCxcbmRldGFpbDpudWxsfSkscmQ9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIHNkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9cmRbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB0ZCgpe3JldHVybiBzZH1cbnZhciB1ZD1xZC5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6dGQsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9fSksdmQ9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJ0b3BNb3VzZU91dFwiLFwidG9wTW91c2VPdmVyXCJdfX0sd2Q9e2V2ZW50VHlwZXM6dmQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLFxuYixjLGQpe2lmKFwidG9wTW91c2VPdmVyXCI9PT1hJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8XCJ0b3BNb3VzZU91dFwiIT09YSYmXCJ0b3BNb3VzZU92ZXJcIiE9PWEpcmV0dXJuIG51bGw7dmFyIGU9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7XCJ0b3BNb3VzZU91dFwiPT09YT8oYT1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/VWEoYik6bnVsbCk6YT1udWxsO2lmKGE9PT1iKXJldHVybiBudWxsO3ZhciBmPW51bGw9PWE/ZTpWYShhKTtlPW51bGw9PWI/ZTpWYShiKTt2YXIgaD11ZC5nZXRQb29sZWQodmQubW91c2VMZWF2ZSxhLGMsZCk7aC50eXBlPVwibW91c2VsZWF2ZVwiO2gudGFyZ2V0PWY7aC5yZWxhdGVkVGFyZ2V0PWU7Yz11ZC5nZXRQb29sZWQodmQubW91c2VFbnRlcixiLGMsZCk7Yy50eXBlPVwibW91c2VlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PVxuZjtqYihoLGMsYSxiKTtyZXR1cm5baCxjXX19O2Z1bmN0aW9uIHhkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiW1wicmV0dXJuXCJdOyliPWJbXCJyZXR1cm5cIl07ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7YltcInJldHVyblwiXTspaWYoYj1iW1wicmV0dXJuXCJdLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24geWQoYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09eGQoYSk6ITF9ZnVuY3Rpb24gemQoYSl7MiE9PXhkKGEpP0QoXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24gQWQoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9eGQoYSksMz09PWI/RChcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jW1wicmV0dXJuXCJdLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXJldHVybiB6ZChlKSxhO2lmKGg9PT1kKXJldHVybiB6ZChlKSxiO2g9aC5zaWJsaW5nfUQoXCIxODhcIil9aWYoY1tcInJldHVyblwiXSE9PWRbXCJyZXR1cm5cIl0pYz1lLGQ9ZjtlbHNle2g9ITE7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXtoPSEwO2M9ZTtkPWY7YnJlYWt9aWYoZz09PWQpe2g9ITA7ZD1lO2M9ZjticmVha31nPWcuc2libGluZ31pZighaCl7Zm9yKGc9Zi5jaGlsZDtnOyl7aWYoZz09PWMpe2g9ITA7Yz1mO2Q9ZTticmVha31pZihnPT09ZCl7aD0hMDtkPWY7Yz1lO2JyZWFrfWc9Zy5zaWJsaW5nfWg/XG52b2lkIDA6RChcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP0QoXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz9EKFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIEJkKGEpe2E9QWQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybiBudWxsO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBDZChhKXthPUFkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQmJjQhPT1iLnRhZyliLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybiBudWxsO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319cmV0dXJuIG51bGx9dmFyIERkPU4uZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxFZD1OLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEZkPXFkLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7XG5mdW5jdGlvbiBHZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBIZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sSWQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LEpkPXFkLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1IZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1HZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/SWRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOnRkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP0dkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP0dkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksS2Q9dWQuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLExkPXFkLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOnRkfSksTWQ9Ti5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksTmQ9dWQuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSxPZD17fSxQZD17fTtmdW5jdGlvbiBRZChhLGIpe3ZhciBjPWFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpLGQ9XCJvblwiK2M7Yz1cInRvcFwiK2M7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07T2RbYV09YjtQZFtjXT1ifVxuXCJibHVyIGNhbmNlbCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkb3VibGVDbGljayBkcmFnRW5kIGRyYWdTdGFydCBkcm9wIGZvY3VzIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBtb3VzZURvd24gbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHJhdGVDaGFuZ2UgcmVzZXQgc2Vla2VkIHN1Ym1pdCB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1FkKGEsITApfSk7XG5cImFib3J0IGFuaW1hdGlvbkVuZCBhbmltYXRpb25JdGVyYXRpb24gYW5pbWF0aW9uU3RhcnQgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBkcmFnIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIHBsYXlpbmcgcHJvZ3Jlc3Mgc2Nyb2xsIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWVVcGRhdGUgdG9nZ2xlIHRvdWNoTW92ZSB0cmFuc2l0aW9uRW5kIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtRZChhLCExKX0pO1xudmFyIFJkPXtldmVudFR5cGVzOk9kLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPVBkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1QZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMD09PUdkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6YT1KZDticmVhaztjYXNlIFwidG9wQmx1clwiOmNhc2UgXCJ0b3BGb2N1c1wiOmE9RmQ7YnJlYWs7Y2FzZSBcInRvcENsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJ0b3BEb3VibGVDbGlja1wiOmNhc2UgXCJ0b3BNb3VzZURvd25cIjpjYXNlIFwidG9wTW91c2VNb3ZlXCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpjYXNlIFwidG9wTW91c2VPdXRcIjpjYXNlIFwidG9wTW91c2VPdmVyXCI6Y2FzZSBcInRvcENvbnRleHRNZW51XCI6YT1cbnVkO2JyZWFrO2Nhc2UgXCJ0b3BEcmFnXCI6Y2FzZSBcInRvcERyYWdFbmRcIjpjYXNlIFwidG9wRHJhZ0VudGVyXCI6Y2FzZSBcInRvcERyYWdFeGl0XCI6Y2FzZSBcInRvcERyYWdMZWF2ZVwiOmNhc2UgXCJ0b3BEcmFnT3ZlclwiOmNhc2UgXCJ0b3BEcmFnU3RhcnRcIjpjYXNlIFwidG9wRHJvcFwiOmE9S2Q7YnJlYWs7Y2FzZSBcInRvcFRvdWNoQ2FuY2VsXCI6Y2FzZSBcInRvcFRvdWNoRW5kXCI6Y2FzZSBcInRvcFRvdWNoTW92ZVwiOmNhc2UgXCJ0b3BUb3VjaFN0YXJ0XCI6YT1MZDticmVhaztjYXNlIFwidG9wQW5pbWF0aW9uRW5kXCI6Y2FzZSBcInRvcEFuaW1hdGlvbkl0ZXJhdGlvblwiOmNhc2UgXCJ0b3BBbmltYXRpb25TdGFydFwiOmE9RGQ7YnJlYWs7Y2FzZSBcInRvcFRyYW5zaXRpb25FbmRcIjphPU1kO2JyZWFrO2Nhc2UgXCJ0b3BTY3JvbGxcIjphPXFkO2JyZWFrO2Nhc2UgXCJ0b3BXaGVlbFwiOmE9TmQ7YnJlYWs7Y2FzZSBcInRvcENvcHlcIjpjYXNlIFwidG9wQ3V0XCI6Y2FzZSBcInRvcFBhc3RlXCI6YT1FZDticmVhaztkZWZhdWx0OmE9XG5OfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7aWIoYik7cmV0dXJuIGJ9fSxTZD1SZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsVGQ9W107ZnVuY3Rpb24gVWQoYSl7dmFyIGI9YS50YXJnZXRJbnN0O2Rve2lmKCFiKXthLmFuY2VzdG9ycy5wdXNoKGIpO2JyZWFrfXZhciBjO2ZvcihjPWI7Y1tcInJldHVyblwiXTspYz1jW1wicmV0dXJuXCJdO2M9MyE9PWMudGFnP251bGw6Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighYylicmVhazthLmFuY2VzdG9ycy5wdXNoKGIpO2I9VWEoYyl9d2hpbGUoYik7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspYj1hLmFuY2VzdG9yc1tjXSxRYShhLnRvcExldmVsVHlwZSxiLGEubmF0aXZlRXZlbnQsaGMoYS5uYXRpdmVFdmVudCkpfXZhciBWZD0hMDtmdW5jdGlvbiBXZChhKXtWZD0hIWF9XG5mdW5jdGlvbiBXKGEsYixjKXtpZighYylyZXR1cm4gbnVsbDthPShTZChhKT9YZDpZZCkuYmluZChudWxsLGEpO2MuYWRkRXZlbnRMaXN0ZW5lcihiLGEsITEpfWZ1bmN0aW9uIFpkKGEsYixjKXtpZighYylyZXR1cm4gbnVsbDthPShTZChhKT9YZDpZZCkuYmluZChudWxsLGEpO2MuYWRkRXZlbnRMaXN0ZW5lcihiLGEsITApfWZ1bmN0aW9uIFhkKGEsYil7YmMoWWQsYSxiKX1cbmZ1bmN0aW9uIFlkKGEsYil7aWYoVmQpe3ZhciBjPWhjKGIpO2M9VWEoYyk7bnVsbCE9PWMmJlwibnVtYmVyXCI9PT10eXBlb2YgYy50YWcmJjIhPT14ZChjKSYmKGM9bnVsbCk7aWYoVGQubGVuZ3RoKXt2YXIgZD1UZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtlYyhVZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPlRkLmxlbmd0aCYmVGQucHVzaChhKX19fVxudmFyICRkPU9iamVjdC5mcmVlemUoe2dldCBfZW5hYmxlZCgpe3JldHVybiBWZH0sc2V0RW5hYmxlZDpXZCxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gVmR9LHRyYXBCdWJibGVkRXZlbnQ6Vyx0cmFwQ2FwdHVyZWRFdmVudDpaZCxkaXNwYXRjaEV2ZW50OllkfSk7ZnVuY3Rpb24gYWUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtjW1wibXNcIithXT1cIk1TXCIrYjtjW1wiT1wiK2FdPVwib1wiK2IudG9Mb3dlckNhc2UoKTtyZXR1cm4gY31cbnZhciBiZT17YW5pbWF0aW9uZW5kOmFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOmFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6YWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6YWUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxjZT17fSxkZT17fTttLmNhblVzZURPTSYmKGRlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIGJlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIGJlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIGJlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIGJlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBlZShhKXtpZihjZVthXSlyZXR1cm4gY2VbYV07aWYoIWJlW2FdKXJldHVybiBhO3ZhciBiPWJlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIGRlKXJldHVybiBjZVthXT1iW2NdO3JldHVybiBhfVxudmFyIGZlPXt0b3BBbmltYXRpb25FbmQ6ZWUoXCJhbmltYXRpb25lbmRcIiksdG9wQW5pbWF0aW9uSXRlcmF0aW9uOmVlKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLHRvcEFuaW1hdGlvblN0YXJ0OmVlKFwiYW5pbWF0aW9uc3RhcnRcIiksdG9wQmx1cjpcImJsdXJcIix0b3BDYW5jZWw6XCJjYW5jZWxcIix0b3BDaGFuZ2U6XCJjaGFuZ2VcIix0b3BDbGljazpcImNsaWNrXCIsdG9wQ2xvc2U6XCJjbG9zZVwiLHRvcENvbXBvc2l0aW9uRW5kOlwiY29tcG9zaXRpb25lbmRcIix0b3BDb21wb3NpdGlvblN0YXJ0OlwiY29tcG9zaXRpb25zdGFydFwiLHRvcENvbXBvc2l0aW9uVXBkYXRlOlwiY29tcG9zaXRpb251cGRhdGVcIix0b3BDb250ZXh0TWVudTpcImNvbnRleHRtZW51XCIsdG9wQ29weTpcImNvcHlcIix0b3BDdXQ6XCJjdXRcIix0b3BEb3VibGVDbGljazpcImRibGNsaWNrXCIsdG9wRHJhZzpcImRyYWdcIix0b3BEcmFnRW5kOlwiZHJhZ2VuZFwiLHRvcERyYWdFbnRlcjpcImRyYWdlbnRlclwiLHRvcERyYWdFeGl0OlwiZHJhZ2V4aXRcIix0b3BEcmFnTGVhdmU6XCJkcmFnbGVhdmVcIixcbnRvcERyYWdPdmVyOlwiZHJhZ292ZXJcIix0b3BEcmFnU3RhcnQ6XCJkcmFnc3RhcnRcIix0b3BEcm9wOlwiZHJvcFwiLHRvcEZvY3VzOlwiZm9jdXNcIix0b3BJbnB1dDpcImlucHV0XCIsdG9wS2V5RG93bjpcImtleWRvd25cIix0b3BLZXlQcmVzczpcImtleXByZXNzXCIsdG9wS2V5VXA6XCJrZXl1cFwiLHRvcExvYWQ6XCJsb2FkXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsdG9wTW91c2VEb3duOlwibW91c2Vkb3duXCIsdG9wTW91c2VNb3ZlOlwibW91c2Vtb3ZlXCIsdG9wTW91c2VPdXQ6XCJtb3VzZW91dFwiLHRvcE1vdXNlT3ZlcjpcIm1vdXNlb3ZlclwiLHRvcE1vdXNlVXA6XCJtb3VzZXVwXCIsdG9wUGFzdGU6XCJwYXN0ZVwiLHRvcFNjcm9sbDpcInNjcm9sbFwiLHRvcFNlbGVjdGlvbkNoYW5nZTpcInNlbGVjdGlvbmNoYW5nZVwiLHRvcFRleHRJbnB1dDpcInRleHRJbnB1dFwiLHRvcFRvZ2dsZTpcInRvZ2dsZVwiLHRvcFRvdWNoQ2FuY2VsOlwidG91Y2hjYW5jZWxcIix0b3BUb3VjaEVuZDpcInRvdWNoZW5kXCIsdG9wVG91Y2hNb3ZlOlwidG91Y2htb3ZlXCIsXG50b3BUb3VjaFN0YXJ0OlwidG91Y2hzdGFydFwiLHRvcFRyYW5zaXRpb25FbmQ6ZWUoXCJ0cmFuc2l0aW9uZW5kXCIpLHRvcFdoZWVsOlwid2hlZWxcIn0sZ2U9e3RvcEFib3J0OlwiYWJvcnRcIix0b3BDYW5QbGF5OlwiY2FucGxheVwiLHRvcENhblBsYXlUaHJvdWdoOlwiY2FucGxheXRocm91Z2hcIix0b3BEdXJhdGlvbkNoYW5nZTpcImR1cmF0aW9uY2hhbmdlXCIsdG9wRW1wdGllZDpcImVtcHRpZWRcIix0b3BFbmNyeXB0ZWQ6XCJlbmNyeXB0ZWRcIix0b3BFbmRlZDpcImVuZGVkXCIsdG9wRXJyb3I6XCJlcnJvclwiLHRvcExvYWRlZERhdGE6XCJsb2FkZWRkYXRhXCIsdG9wTG9hZGVkTWV0YWRhdGE6XCJsb2FkZWRtZXRhZGF0YVwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcFBhdXNlOlwicGF1c2VcIix0b3BQbGF5OlwicGxheVwiLHRvcFBsYXlpbmc6XCJwbGF5aW5nXCIsdG9wUHJvZ3Jlc3M6XCJwcm9ncmVzc1wiLHRvcFJhdGVDaGFuZ2U6XCJyYXRlY2hhbmdlXCIsdG9wU2Vla2VkOlwic2Vla2VkXCIsdG9wU2Vla2luZzpcInNlZWtpbmdcIixcbnRvcFN0YWxsZWQ6XCJzdGFsbGVkXCIsdG9wU3VzcGVuZDpcInN1c3BlbmRcIix0b3BUaW1lVXBkYXRlOlwidGltZXVwZGF0ZVwiLHRvcFZvbHVtZUNoYW5nZTpcInZvbHVtZWNoYW5nZVwiLHRvcFdhaXRpbmc6XCJ3YWl0aW5nXCJ9LGhlPXt9LGllPTAsamU9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO2Z1bmN0aW9uIGtlKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLGplKXx8KGFbamVdPWllKyssaGVbYVtqZV1dPXt9KTtyZXR1cm4gaGVbYVtqZV1dfWZ1bmN0aW9uIGxlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIG1lKGEsYil7dmFyIGM9bGUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9bGUoYyl9fWZ1bmN0aW9uIG5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJlwidGV4dFwiPT09YS50eXBlfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBvZT1tLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLHBlPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbnRleHRNZW51IHRvcEZvY3VzIHRvcEtleURvd24gdG9wS2V5VXAgdG9wTW91c2VEb3duIHRvcE1vdXNlVXAgdG9wU2VsZWN0aW9uQ2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0scWU9bnVsbCxyZT1udWxsLHNlPW51bGwsdGU9ITE7XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHRlfHxudWxsPT1xZXx8cWUhPT1mYSgpKXJldHVybiBudWxsO3ZhciBjPXFlO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJm5lKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTp3aW5kb3cuZ2V0U2VsZWN0aW9uPyhjPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTpjPXZvaWQgMDtyZXR1cm4gc2UmJmhhKHNlLGMpP251bGw6KHNlPWMsYT1OLmdldFBvb2xlZChwZS5zZWxlY3QscmUsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1xZSxpYihhKSxhKX1cbnZhciB2ZT17ZXZlbnRUeXBlczpwZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1rZShlKTtmPXZhLm9uU2VsZWN0O2Zvcih2YXIgaD0wO2g8Zi5sZW5ndGg7aCsrKXt2YXIgZz1mW2hdO2lmKCFlLmhhc093blByb3BlcnR5KGcpfHwhZVtnXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/VmEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwidG9wRm9jdXNcIjppZihnYyhlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlxZT1lLHJlPWIsc2U9bnVsbDticmVhaztjYXNlIFwidG9wQmx1clwiOnNlPXJlPXFlPW51bGw7YnJlYWs7Y2FzZSBcInRvcE1vdXNlRG93blwiOnRlPSEwO2JyZWFrO2Nhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6cmV0dXJuIHRlPSExLHVlKGMsZCk7Y2FzZSBcInRvcFNlbGVjdGlvbkNoYW5nZVwiOmlmKG9lKWJyZWFrO1xuY2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4gdWUoYyxkKX1yZXR1cm4gbnVsbH19O05hLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBUYXBFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7RGE9YmIuZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTtFYT1iYi5nZXRJbnN0YW5jZUZyb21Ob2RlO0ZhPWJiLmdldE5vZGVGcm9tSW5zdGFuY2U7TmEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpSZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46d2QsQ2hhbmdlRXZlbnRQbHVnaW46cGQsU2VsZWN0RXZlbnRQbHVnaW46dmUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpSYn0pO1xuZnVuY3Rpb24geGUoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT1udWxsO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXNbXCJyZXR1cm5cIl09bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9XG5mdW5jdGlvbiB6ZShhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbD09PWQ/KGQ9bmV3IHhlKGEudGFnLGIsYS5rZXksYS5tb2RlKSxkLnR5cGU9YS50eXBlLGQuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGQuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9ZCk6KGQucGVuZGluZ1Byb3BzPWIsZC5lZmZlY3RUYWc9MCxkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwpO2QuZXhwaXJhdGlvblRpbWU9YztkLmNoaWxkPWEuY2hpbGQ7ZC5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztkLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2QudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtkLnNpYmxpbmc9YS5zaWJsaW5nO2QuaW5kZXg9YS5pbmRleDtkLnJlZj1hLnJlZjtyZXR1cm4gZH1cbmZ1bmN0aW9uIEFlKGEsYixjKXt2YXIgZD1hLnR5cGUsZT1hLmtleTthPWEucHJvcHM7dmFyIGY9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKWY9ZC5wcm90b3R5cGUmJmQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ/MjowO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkKWY9NTtlbHNlIHN3aXRjaChkKXtjYXNlIHNjOnJldHVybiBCZShhLmNoaWxkcmVuLGIsYyxlKTtjYXNlIHdjOmY9MTE7Ynw9MzticmVhaztjYXNlIHRjOmY9MTE7Ynw9MjticmVhaztjYXNlIHBjOmY9NzticmVhaztjYXNlIHFjOmY9OTticmVhaztkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpc3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdWM6Zj0xMzticmVhaztjYXNlIHZjOmY9MTI7YnJlYWs7Y2FzZSB4YzpmPTE0O2JyZWFrO2RlZmF1bHQ6aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnRhZylyZXR1cm4gYj1kLGIucGVuZGluZ1Byb3BzPWEsYi5leHBpcmF0aW9uVGltZT1jLFxuYjtEKFwiMTMwXCIsbnVsbD09ZD9kOnR5cGVvZiBkLFwiXCIpfWVsc2UgRChcIjEzMFwiLG51bGw9PWQ/ZDp0eXBlb2YgZCxcIlwiKX1iPW5ldyB4ZShmLGEsZSxiKTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9ZnVuY3Rpb24gQmUoYSxiLGMsZCl7YT1uZXcgeGUoMTAsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBDZShhLGIsYyl7YT1uZXcgeGUoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIERlKGEsYixjKXtiPW5ldyB4ZSg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn12YXIgRWU9bnVsbCxGZT1udWxsO1xuZnVuY3Rpb24gR2UoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1mdW5jdGlvbiBIZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtFZT1HZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7RmU9R2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1mdW5jdGlvbiBJZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRWUmJkVlKGEpfWZ1bmN0aW9uIEplKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBGZSYmRmUoYSl9bmV3IFNldDtcbmZ1bmN0aW9uIEtlKGEpe3JldHVybntiYXNlU3RhdGU6YSxleHBpcmF0aW9uVGltZTowLGZpcnN0Om51bGwsbGFzdDpudWxsLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExLGlzSW5pdGlhbGl6ZWQ6ITEsY2FwdHVyZWRWYWx1ZXM6bnVsbH19ZnVuY3Rpb24gTGUoYSxiKXtudWxsPT09YS5sYXN0P2EuZmlyc3Q9YS5sYXN0PWI6KGEubGFzdC5uZXh0PWIsYS5sYXN0PWIpO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmIuZXhwaXJhdGlvblRpbWUpYS5leHBpcmF0aW9uVGltZT1iLmV4cGlyYXRpb25UaW1lfXZhciBNZT12b2lkIDAsTmU9dm9pZCAwO1xuZnVuY3Rpb24gT2UoYSl7TWU9TmU9bnVsbDt2YXIgYj1hLmFsdGVybmF0ZSxjPWEudXBkYXRlUXVldWU7bnVsbD09PWMmJihjPWEudXBkYXRlUXVldWU9S2UobnVsbCkpO251bGwhPT1iPyhhPWIudXBkYXRlUXVldWUsbnVsbD09PWEmJihhPWIudXBkYXRlUXVldWU9S2UobnVsbCkpKTphPW51bGw7TWU9YztOZT1hIT09Yz9hOm51bGx9ZnVuY3Rpb24gUGUoYSxiKXtPZShhKTthPU1lO3ZhciBjPU5lO251bGw9PT1jP0xlKGEsYik6bnVsbD09PWEubGFzdHx8bnVsbD09PWMubGFzdD8oTGUoYSxiKSxMZShjLGIpKTooTGUoYSxiKSxjLmxhc3Q9Yil9ZnVuY3Rpb24gUWUoYSxiLGMsZCl7YT1hLnBhcnRpYWxTdGF0ZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoYixjLGQpOmF9XG5mdW5jdGlvbiBSZShhLGIsYyxkLGUsZil7bnVsbCE9PWEmJmEudXBkYXRlUXVldWU9PT1jJiYoYz1iLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6Yy5iYXNlU3RhdGUsZXhwaXJhdGlvblRpbWU6Yy5leHBpcmF0aW9uVGltZSxmaXJzdDpjLmZpcnN0LGxhc3Q6Yy5sYXN0LGlzSW5pdGlhbGl6ZWQ6Yy5pc0luaXRpYWxpemVkLGNhcHR1cmVkVmFsdWVzOmMuY2FwdHVyZWRWYWx1ZXMsY2FsbGJhY2tMaXN0Om51bGwsaGFzRm9yY2VVcGRhdGU6ITF9KTtjLmV4cGlyYXRpb25UaW1lPTA7Yy5pc0luaXRpYWxpemVkP2E9Yy5iYXNlU3RhdGU6KGE9Yy5iYXNlU3RhdGU9Yi5tZW1vaXplZFN0YXRlLGMuaXNJbml0aWFsaXplZD0hMCk7Zm9yKHZhciBoPSEwLGc9Yy5maXJzdCxrPSExO251bGwhPT1nOyl7dmFyIHY9Zy5leHBpcmF0aW9uVGltZTtpZih2PmYpe3ZhciBsPWMuZXhwaXJhdGlvblRpbWU7aWYoMD09PWx8fGw+diljLmV4cGlyYXRpb25UaW1lPXY7a3x8KGs9ITAsYy5iYXNlU3RhdGU9YSl9ZWxzZXtrfHxcbihjLmZpcnN0PWcubmV4dCxudWxsPT09Yy5maXJzdCYmKGMubGFzdD1udWxsKSk7aWYoZy5pc1JlcGxhY2UpYT1RZShnLGQsYSxlKSxoPSEwO2Vsc2UgaWYodj1RZShnLGQsYSxlKSlhPWg/QSh7fSxhLHYpOkEoYSx2KSxoPSExO2cuaXNGb3JjZWQmJihjLmhhc0ZvcmNlVXBkYXRlPSEwKTtudWxsIT09Zy5jYWxsYmFjayYmKHY9Yy5jYWxsYmFja0xpc3QsbnVsbD09PXYmJih2PWMuY2FsbGJhY2tMaXN0PVtdKSx2LnB1c2goZykpO251bGwhPT1nLmNhcHR1cmVkVmFsdWUmJih2PWMuY2FwdHVyZWRWYWx1ZXMsbnVsbD09PXY/Yy5jYXB0dXJlZFZhbHVlcz1bZy5jYXB0dXJlZFZhbHVlXTp2LnB1c2goZy5jYXB0dXJlZFZhbHVlKSl9Zz1nLm5leHR9bnVsbCE9PWMuY2FsbGJhY2tMaXN0P2IuZWZmZWN0VGFnfD0zMjpudWxsIT09Yy5maXJzdHx8Yy5oYXNGb3JjZVVwZGF0ZXx8bnVsbCE9PWMuY2FwdHVyZWRWYWx1ZXN8fChiLnVwZGF0ZVF1ZXVlPW51bGwpO2t8fChjLmJhc2VTdGF0ZT1hKTtcbnJldHVybiBhfWZ1bmN0aW9uIFNlKGEsYil7dmFyIGM9YS5jYWxsYmFja0xpc3Q7aWYobnVsbCE9PWMpZm9yKGEuY2FsbGJhY2tMaXN0PW51bGwsYT0wO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdLGU9ZC5jYWxsYmFjaztkLmNhbGxiYWNrPW51bGw7XCJmdW5jdGlvblwiIT09dHlwZW9mIGU/RChcIjE5MVwiLGUpOnZvaWQgMDtlLmNhbGwoYil9fVxuZnVuY3Rpb24gVGUoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEsYixjLGQsZSxmKXtpZihudWxsPT09Ynx8bnVsbCE9PWEudXBkYXRlUXVldWUmJmEudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpcmV0dXJuITA7dmFyIG49YS5zdGF0ZU5vZGU7YT1hLnR5cGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uc2hvdWxkQ29tcG9uZW50VXBkYXRlP24uc2hvdWxkQ29tcG9uZW50VXBkYXRlKGMsZSxmKTphLnByb3RvdHlwZSYmYS5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWhhKGIsYyl8fCFoYShkLGUpOiEwfWZ1bmN0aW9uIGgoYSxiKXtiLnVwZGF0ZXI9cjthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hfWZ1bmN0aW9uIGcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcbmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1mdW5jdGlvbiBrKGEsYixjLGQpe2E9YS50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcylyZXR1cm4gYS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuY2FsbChudWxsLGMsZCl9dmFyIHY9YS5jYWNoZUNvbnRleHQsbD1hLmdldE1hc2tlZENvbnRleHQscD1hLmdldFVubWFza2VkQ29udGV4dCx6PWEuaXNDb250ZXh0Q29uc3VtZXIsQj1hLmhhc0NvbnRleHRDaGFuZ2VkLHI9e2lzTW91bnRlZDp5ZCxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxkLGUpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGY9YyhhKTtQZShhLHtleHBpcmF0aW9uVGltZTpmLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLFxuY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2IoYSxmKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGQsZSl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7ZT12b2lkIDA9PT1lP251bGw6ZTt2YXIgZj1jKGEpO1BlKGEse2V4cGlyYXRpb25UaW1lOmYscGFydGlhbFN0YXRlOmQsY2FsbGJhY2s6ZSxpc1JlcGxhY2U6ITAsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2IoYSxmKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsZCl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZT1jKGEpO1BlKGEse2V4cGlyYXRpb25UaW1lOmUscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6ZCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITAsY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2IoYSxlKX19O3JldHVybnthZG9wdENsYXNzSW5zdGFuY2U6aCxjYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOmssXG5jb25zdHJ1Y3RDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLGQ9cChhKSxlPXooYSksZj1lP2woYSxkKTprYTtjPW5ldyBjKGIsZik7dmFyIG49bnVsbCE9PWMuc3RhdGUmJnZvaWQgMCE9PWMuc3RhdGU/Yy5zdGF0ZTpudWxsO2goYSxjKTthLm1lbW9pemVkU3RhdGU9bjtiPWsoYSxjLGIsbik7bnVsbCE9PWImJnZvaWQgMCE9PWImJihhLm1lbW9pemVkU3RhdGU9QSh7fSxhLm1lbW9pemVkU3RhdGUsYikpO2UmJnYoYSxkLGYpO3JldHVybiBjfSxtb3VudENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsZD1hLmFsdGVybmF0ZSxlPWEuc3RhdGVOb2RlLGY9YS5wZW5kaW5nUHJvcHMsbj1wKGEpO2UucHJvcHM9ZjtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9a2E7ZS5jb250ZXh0PWwoYSxuKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGM9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYyE9PWUuc3RhdGUmJnIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoZS5zdGF0ZT1SZShkLGEsYyxlLGYsYikpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX0scmVzdW1lTW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLG49YS5zdGF0ZU5vZGU7bi5wcm9wcz1hLm1lbW9pemVkUHJvcHM7bi5zdGF0ZT1cbmEubWVtb2l6ZWRTdGF0ZTt2YXIgaD1hLm1lbW9pemVkUHJvcHMscj1hLnBlbmRpbmdQcm9wcyx6PW4uY29udGV4dCxxPXAoYSk7cT1sKGEscSk7KGM9XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXJ8fHohPT1xKSYmZyhhLG4scixxKTt6PWEubWVtb2l6ZWRTdGF0ZTtiPW51bGwhPT1hLnVwZGF0ZVF1ZXVlP1JlKG51bGwsYSxhLnVwZGF0ZVF1ZXVlLG4scixiKTp6O3ZhciB1PXZvaWQgMDtoIT09ciYmKHU9ayhhLG4scixiKSk7aWYobnVsbCE9PXUmJnZvaWQgMCE9PXUpe2I9bnVsbD09PWJ8fHZvaWQgMD09PWI/dTpBKHt9LGIsdSk7dmFyIHQ9YS51cGRhdGVRdWV1ZTtcbm51bGwhPT10JiYodC5iYXNlU3RhdGU9QSh7fSx0LmJhc2VTdGF0ZSx1KSl9aWYoIShoIT09cnx8eiE9PWJ8fEIoKXx8bnVsbCE9PWEudXBkYXRlUXVldWUmJmEudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpKXJldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpLCExOyhoPWYoYSxoLHIseixiLHEpKT8oY3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIG4uY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50V2lsbE1vdW50JiZuLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJm4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD1cbjQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCksZChhLHIpLGUoYSxiKSk7bi5wcm9wcz1yO24uc3RhdGU9YjtuLmNvbnRleHQ9cTtyZXR1cm4gaH0sdXBkYXRlQ2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7dmFyIG49Yi50eXBlLHg9Yi5zdGF0ZU5vZGU7eC5wcm9wcz1iLm1lbW9pemVkUHJvcHM7eC5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7dmFyIGg9Yi5tZW1vaXplZFByb3BzLHI9Yi5wZW5kaW5nUHJvcHMscT14LmNvbnRleHQsdT1wKGIpO3U9bChiLHUpOyhuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oaCE9PXJ8fHEhPT11KSYmZyhiLHgscix1KTtxPWIubWVtb2l6ZWRTdGF0ZTtjPW51bGwhPT1iLnVwZGF0ZVF1ZXVlP1JlKGEsYixiLnVwZGF0ZVF1ZXVlLHgscixjKTpxO3ZhciB0PXZvaWQgMDtoIT09ciYmKHQ9ayhiLHgscixjKSk7aWYobnVsbCE9PXQmJnZvaWQgMCE9PXQpe2M9bnVsbD09PWN8fHZvaWQgMD09PWM/dDpBKHt9LGMsdCk7dmFyIHk9Yi51cGRhdGVRdWV1ZTtudWxsIT09eSYmKHkuYmFzZVN0YXRlPUEoe30seS5iYXNlU3RhdGUsdCkpfWlmKCEoaCE9PXJ8fHEhPT1jfHxCKCl8fG51bGwhPT1iLnVwZGF0ZVF1ZXVlJiZiLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJlxucT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yMDQ4KSwhMTsodD1mKGIsaCxyLHEsYyx1KSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIHguY29tcG9uZW50V2lsbFVwZGF0ZSYmeC5jb21wb25lbnRXaWxsVXBkYXRlKHIsYyx1KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShyLGMsdSkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yMDQ4KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmXG5xPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTIwNDgpLGQoYixyKSxlKGIsYykpO3gucHJvcHM9cjt4LnN0YXRlPWM7eC5jb250ZXh0PXU7cmV0dXJuIHR9fX12YXIgVWU9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFZlKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDIhPT1jLnRhZz9EKFwiMTEwXCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDpEKFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcz09PWthP2QucmVmcz17fTpkLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/RChcIjE0OFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOkQoXCIyNTRcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIFdlKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZEKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBYZShhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPXplKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gaChiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBnKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9Q2UoYyxhLm1vZGUsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi50eXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPVZlKGEsYixjKSxkW1wicmV0dXJuXCJdPWEsZDtkPUFlKGMsYS5tb2RlLGQpO2QucmVmPVZlKGEsYixjKTtkW1wicmV0dXJuXCJdPWE7cmV0dXJuIGR9ZnVuY3Rpb24gdihhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5EZShjLGEubW9kZSxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbChhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHwxMCE9PWIudGFnKXJldHVybiBiPUJlKGMsYS5tb2RlLGQsZiksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9Q2UoXCJcIitiLGEubW9kZSxjKSxiW1wicmV0dXJuXCJdPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBvYzpyZXR1cm4gYz1BZShiLGEubW9kZSxjKSxjLnJlZj1WZShhLG51bGwsYiksY1tcInJldHVyblwiXT1hLGM7Y2FzZSByYzpyZXR1cm4gYj1EZShiLGEubW9kZSxjKSxiW1wicmV0dXJuXCJdPWEsYn1pZihVZShiKXx8emMoYikpcmV0dXJuIGI9QmUoYixcbmEubW9kZSxjLG51bGwpLGJbXCJyZXR1cm5cIl09YSxiO1dlKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmcoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBvYzpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXNjP2woYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSByYzpyZXR1cm4gYy5rZXk9PT1lP3YoYSxiLGMsZCk6bnVsbH1pZihVZShjKXx8emMoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bChhLGIsYyxkLG51bGwpO1dlKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsZyhiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIG9jOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1zYz9sKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSByYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsdihiLGEsZCxlKX1pZihVZShkKXx8emMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbChiLGEsZCxlLG51bGwpO1dlKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihlLGwsZyxoKXtmb3IodmFyIHI9bnVsbCxrPW51bGwscT1sLHU9bD0wLHQ9bnVsbDtudWxsIT09cSYmdTxnLmxlbmd0aDt1Kyspe3EuaW5kZXg+dT8odD1xLHE9bnVsbCk6dD1xLnNpYmxpbmc7dmFyIG49eihlLHEsZ1t1XSxoKTtpZihudWxsPT09bil7bnVsbD09PXEmJihxPXQpO2JyZWFrfWEmJnEmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUscSk7bD1mKG4sbCx1KTtudWxsPT09az9yPW46ay5zaWJsaW5nPW47az1uO3E9dH1pZih1PT09Zy5sZW5ndGgpcmV0dXJuIGMoZSxxKSxyO2lmKG51bGw9PT1xKXtmb3IoO3U8Zy5sZW5ndGg7dSsrKWlmKHE9cChlLGdbdV0saCkpbD1mKHEsbCx1KSxudWxsPT09az9yPXE6ay5zaWJsaW5nPXEsaz1xO3JldHVybiByfWZvcihxPWQoZSxxKTt1PGcubGVuZ3RoO3UrKylpZih0PUIocSxlLHUsZ1t1XSxoKSl7aWYoYSYmbnVsbCE9PXQuYWx0ZXJuYXRlKXFbXCJkZWxldGVcIl0obnVsbD09PXQua2V5P3U6dC5rZXkpO2w9Zih0LGwsdSk7bnVsbD09PWs/cj10Omsuc2libGluZz10O2s9dH1hJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiByfWZ1bmN0aW9uIFEoZSxsLGcsaCl7dmFyIHI9emMoZyk7XCJmdW5jdGlvblwiIT09dHlwZW9mIHI/RChcIjE1MFwiKTp2b2lkIDA7Zz1yLmNhbGwoZyk7bnVsbD09Zz9EKFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIGs9XG5yPW51bGwscT1sLHU9bD0wLHQ9bnVsbCxuPWcubmV4dCgpO251bGwhPT1xJiYhbi5kb25lO3UrKyxuPWcubmV4dCgpKXtxLmluZGV4PnU/KHQ9cSxxPW51bGwpOnQ9cS5zaWJsaW5nO3ZhciBIPXooZSxxLG4udmFsdWUsaCk7aWYobnVsbD09PUgpe3F8fChxPXQpO2JyZWFrfWEmJnEmJm51bGw9PT1ILmFsdGVybmF0ZSYmYihlLHEpO2w9ZihILGwsdSk7bnVsbD09PWs/cj1IOmsuc2libGluZz1IO2s9SDtxPXR9aWYobi5kb25lKXJldHVybiBjKGUscSkscjtpZihudWxsPT09cSl7Zm9yKDshbi5kb25lO3UrKyxuPWcubmV4dCgpKW49cChlLG4udmFsdWUsaCksbnVsbCE9PW4mJihsPWYobixsLHUpLG51bGw9PT1rP3I9bjprLnNpYmxpbmc9bixrPW4pO3JldHVybiByfWZvcihxPWQoZSxxKTshbi5kb25lO3UrKyxuPWcubmV4dCgpKWlmKG49QihxLGUsdSxuLnZhbHVlLGgpLG51bGwhPT1uKXtpZihhJiZudWxsIT09bi5hbHRlcm5hdGUpcVtcImRlbGV0ZVwiXShudWxsPT09bi5rZXk/dTpuLmtleSk7XG5sPWYobixsLHUpO251bGw9PT1rP3I9bjprLnNpYmxpbmc9bjtrPW59YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gcn1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsbCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09c2MmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGc9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihnKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIG9jOmE6e3ZhciBrPWYua2V5O2ZvcihnPWQ7bnVsbCE9PWc7KXtpZihnLmtleT09PWspaWYoMTA9PT1nLnRhZz9mLnR5cGU9PT1zYzpnLnR5cGU9PT1mLnR5cGUpe2MoYSxnLnNpYmxpbmcpO2Q9ZShnLGYudHlwZT09PXNjP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxsKTtkLnJlZj1WZShhLGcsZik7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGcpO2JyZWFrfWVsc2UgYihhLGcpO2c9Zy5zaWJsaW5nfWYudHlwZT09PVxuc2M/KGQ9QmUoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsbCxmLmtleSksZFtcInJldHVyblwiXT1hLGE9ZCk6KGw9QWUoZixhLm1vZGUsbCksbC5yZWY9VmUoYSxkLGYpLGxbXCJyZXR1cm5cIl09YSxhPWwpfXJldHVybiBoKGEpO2Nhc2UgcmM6YTp7Zm9yKGc9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWcpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGwpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPURlKGYsYS5tb2RlLGwpO2RbXCJyZXR1cm5cIl09YTthPWR9cmV0dXJuIGgoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiZcbjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixsKSxkW1wicmV0dXJuXCJdPWEsYT1kKTooYyhhLGQpLGQ9Q2UoZixhLm1vZGUsbCksZFtcInJldHVyblwiXT1hLGE9ZCksaChhKTtpZihVZShmKSlyZXR1cm4gcihhLGQsZixsKTtpZih6YyhmKSlyZXR1cm4gUShhLGQsZixsKTtnJiZXZShhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZilzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDE6bD1hLnR5cGUsRChcIjE1MlwiLGwuZGlzcGxheU5hbWV8fGwubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIFllPVhlKCEwKSxaZT1YZSghMSk7XG5mdW5jdGlvbiAkZShhLGIsYyxkLGUsZixoKXtmdW5jdGlvbiBnKGEsYixjKXtrKGEsYixjLGIuZXhwaXJhdGlvblRpbWUpfWZ1bmN0aW9uIGsoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9aZShiLG51bGwsYyxkKTpZZShiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiB2KGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gbChhLGIsYyxkLGUsZil7dihhLGIpO2lmKCFjJiYhZSlyZXR1cm4gZCYmeShiLCExKSxyKGEsYik7Yz1iLnN0YXRlTm9kZTtuYy5jdXJyZW50PWI7dmFyIGw9ZT9udWxsOmMucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7ZSYmKGsoYSxiLG51bGwsZiksYi5jaGlsZD1udWxsKTtrKGEsYixsLGYpO2IubWVtb2l6ZWRTdGF0ZT1jLnN0YXRlO2IubWVtb2l6ZWRQcm9wcz1jLnByb3BzO2QmJnkoYiwhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcChhKXt2YXIgYj1hLnN0YXRlTm9kZTtcbmIucGVuZGluZ0NvbnRleHQ/dChhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZ0KGEsYi5jb250ZXh0LCExKTtZKGEsYi5jb250YWluZXJJbmZvKX1mdW5jdGlvbiB6KGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7Zm9yKG51bGwhPT1lJiYoZVtcInJldHVyblwiXT1hKTtudWxsIT09ZTspe3N3aXRjaChlLnRhZyl7Y2FzZSAxMjp2YXIgZj1lLnN0YXRlTm9kZXwwO2lmKGUudHlwZT09PWImJjAhPT0oZiZjKSl7Zm9yKGY9ZTtudWxsIT09Zjspe3ZhciBsPWYuYWx0ZXJuYXRlO2lmKDA9PT1mLmV4cGlyYXRpb25UaW1lfHxmLmV4cGlyYXRpb25UaW1lPmQpZi5leHBpcmF0aW9uVGltZT1kLG51bGwhPT1sJiYoMD09PWwuZXhwaXJhdGlvblRpbWV8fGwuZXhwaXJhdGlvblRpbWU+ZCkmJihsLmV4cGlyYXRpb25UaW1lPWQpO2Vsc2UgaWYobnVsbCE9PWwmJigwPT09bC5leHBpcmF0aW9uVGltZXx8bC5leHBpcmF0aW9uVGltZT5kKSlsLmV4cGlyYXRpb25UaW1lPVxuZDtlbHNlIGJyZWFrO2Y9ZltcInJldHVyblwiXX1mPW51bGx9ZWxzZSBmPWUuY2hpbGQ7YnJlYWs7Y2FzZSAxMzpmPWUudHlwZT09PWEudHlwZT9udWxsOmUuY2hpbGQ7YnJlYWs7ZGVmYXVsdDpmPWUuY2hpbGR9aWYobnVsbCE9PWYpZltcInJldHVyblwiXT1lO2Vsc2UgZm9yKGY9ZTtudWxsIT09Zjspe2lmKGY9PT1hKXtmPW51bGw7YnJlYWt9ZT1mLnNpYmxpbmc7aWYobnVsbCE9PWUpe2Y9ZTticmVha31mPWZbXCJyZXR1cm5cIl19ZT1mfX1mdW5jdGlvbiBCKGEsYixjKXt2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRQcm9wcztpZighcSgpJiZmPT09ZSlyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKTt2YXIgbD1lLnZhbHVlO2IubWVtb2l6ZWRQcm9wcz1lO2lmKG51bGw9PT1mKWw9MTA3Mzc0MTgyMztlbHNlIGlmKGYudmFsdWU9PT1lLnZhbHVlKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLFxucihhLGIpO2w9MH1lbHNle3ZhciBoPWYudmFsdWU7aWYoaD09PWwmJigwIT09aHx8MS9oPT09MS9sKXx8aCE9PWgmJmwhPT1sKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKTtsPTB9ZWxzZSBpZihsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGwpOjEwNzM3NDE4MjMsbHw9MCwwPT09bCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4pcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxyKGEsYil9ZWxzZSB6KGIsZCxsLGMpfWIuc3RhdGVOb2RlPWw7RyhiKTtnKGEsYixlLmNoaWxkcmVuKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByKGEsYil7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP0QoXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7dmFyIGM9emUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtcbmIuY2hpbGQ9Yztmb3IoY1tcInJldHVyblwiXT1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXplKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksY1tcInJldHVyblwiXT1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXZhciBRPWEuc2hvdWxkU2V0VGV4dENvbnRlbnQsbj1hLnNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUseD1iLnB1c2hIb3N0Q29udGV4dCxZPWIucHVzaEhvc3RDb250YWluZXIsRz1kLnB1c2hQcm92aWRlcixSPWMuZ2V0TWFza2VkQ29udGV4dCxTPWMuZ2V0VW5tYXNrZWRDb250ZXh0LHE9Yy5oYXNDb250ZXh0Q2hhbmdlZCx1PWMucHVzaENvbnRleHRQcm92aWRlcix0PWMucHVzaFRvcExldmVsQ29udGV4dE9iamVjdCx5PWMuaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcixIPWUuZW50ZXJIeWRyYXRpb25TdGF0ZSxXYT1lLnJlc2V0SHlkcmF0aW9uU3RhdGUsQ2I9ZS50cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTtcbmE9VGUoYyxmLGgsZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkUHJvcHM9Yn0sZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkU3RhdGU9Yn0pO3ZhciBKYz1hLmFkb3B0Q2xhc3NJbnN0YW5jZSxLYz1hLmNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsTGM9YS5jb25zdHJ1Y3RDbGFzc0luc3RhbmNlLERiPWEubW91bnRDbGFzc0luc3RhbmNlLE1jPWEucmVzdW1lTW91bnRDbGFzc0luc3RhbmNlLEViPWEudXBkYXRlQ2xhc3NJbnN0YW5jZTtyZXR1cm57YmVnaW5Xb3JrOmZ1bmN0aW9uKGEsYixjKXtpZigwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5jKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpwKGIpO2JyZWFrO2Nhc2UgMjp1KGIpO2JyZWFrO2Nhc2UgNDpZKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMzpHKGIpfXJldHVybiBudWxsfXN3aXRjaChiLnRhZyl7Y2FzZSAwOm51bGwhPT1hP0QoXCIxNTVcIik6dm9pZCAwO3ZhciBkPWIudHlwZSxcbmU9Yi5wZW5kaW5nUHJvcHMsZj1TKGIpO2Y9UihiLGYpO2Q9ZChlLGYpO2IuZWZmZWN0VGFnfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnJlbmRlciYmdm9pZCAwPT09ZC4kJHR5cGVvZj8oZj1iLnR5cGUsYi50YWc9MixiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWQuc3RhdGUmJnZvaWQgMCE9PWQuc3RhdGU/ZC5zdGF0ZTpudWxsLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmKGU9S2MoYixkLGUsYi5tZW1vaXplZFN0YXRlKSxudWxsIT09ZSYmdm9pZCAwIT09ZSYmKGIubWVtb2l6ZWRTdGF0ZT1BKHt9LGIubWVtb2l6ZWRTdGF0ZSxlKSkpLGU9dShiKSxKYyhiLGQpLERiKGIsYyksYT1sKGEsYiwhMCxlLCExLGMpKTooYi50YWc9MSxnKGEsYixkKSxiLm1lbW9pemVkUHJvcHM9ZSxhPWIuY2hpbGQpO3JldHVybiBhO2Nhc2UgMTpyZXR1cm4gZT1iLnR5cGUsYz1iLnBlbmRpbmdQcm9wcyxxKCl8fFxuYi5tZW1vaXplZFByb3BzIT09Yz8oZD1TKGIpLGQ9UihiLGQpLGU9ZShjLGQpLGIuZWZmZWN0VGFnfD0xLGcoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDI6ZT11KGIpO251bGw9PT1hP251bGw9PT1iLnN0YXRlTm9kZT8oTGMoYixiLnBlbmRpbmdQcm9wcyksRGIoYixjKSxkPSEwKTpkPU1jKGIsYyk6ZD1FYihhLGIsYyk7Zj0hMTt2YXIgaD1iLnVwZGF0ZVF1ZXVlO251bGwhPT1oJiZudWxsIT09aC5jYXB0dXJlZFZhbHVlcyYmKGY9ZD0hMCk7cmV0dXJuIGwoYSxiLGQsZSxmLGMpO2Nhc2UgMzphOmlmKHAoYiksZD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1kKXtmPWIubWVtb2l6ZWRTdGF0ZTtlPVJlKGEsYixkLG51bGwsbnVsbCxjKTtiLm1lbW9pemVkU3RhdGU9ZTtkPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWQmJm51bGwhPT1kLmNhcHR1cmVkVmFsdWVzKWQ9bnVsbDtlbHNlIGlmKGY9PT1lKXtXYSgpO2E9cihhLGIpO2JyZWFrIGF9ZWxzZSBkPVxuZS5lbGVtZW50O2Y9Yi5zdGF0ZU5vZGU7KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmYuaHlkcmF0ZSYmSChiKT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1aZShiLG51bGwsZCxjKSk6KFdhKCksZyhhLGIsZCkpO2IubWVtb2l6ZWRTdGF0ZT1lO2E9Yi5jaGlsZH1lbHNlIFdhKCksYT1yKGEsYik7cmV0dXJuIGE7Y2FzZSA1OmE6e3goYik7bnVsbD09PWEmJkNiKGIpO2U9Yi50eXBlO2g9Yi5tZW1vaXplZFByb3BzO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbDtpZighcSgpJiZoPT09ZCl7aWYoaD1iLm1vZGUmMSYmbihlLGQpKWIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztpZighaHx8MTA3Mzc0MTgyMyE9PWMpe2E9cihhLGIpO2JyZWFrIGF9fWg9ZC5jaGlsZHJlbjtRKGUsZCk/aD1udWxsOmYmJlEoZSxmKSYmKGIuZWZmZWN0VGFnfD0xNik7dihhLGIpOzEwNzM3NDE4MjMhPT1jJiZiLm1vZGUmMSYmbihlLGQpPyhiLmV4cGlyYXRpb25UaW1lPVxuMTA3Mzc0MTgyMyxiLm1lbW9pemVkUHJvcHM9ZCxhPW51bGwpOihnKGEsYixoKSxiLm1lbW9pemVkUHJvcHM9ZCxhPWIuY2hpbGQpfXJldHVybiBhO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkNiKGIpLGIubWVtb2l6ZWRQcm9wcz1iLnBlbmRpbmdQcm9wcyxudWxsO2Nhc2UgODpiLnRhZz03O2Nhc2UgNzpyZXR1cm4gZT1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWV8fChlPWIubWVtb2l6ZWRQcm9wcyksZD1lLmNoaWxkcmVuLGIuc3RhdGVOb2RlPW51bGw9PT1hP1plKGIsYi5zdGF0ZU5vZGUsZCxjKTpZZShiLGEuc3RhdGVOb2RlLGQsYyksYi5tZW1vaXplZFByb3BzPWUsYi5zdGF0ZU5vZGU7Y2FzZSA5OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gWShiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGU9Yi5wZW5kaW5nUHJvcHMscSgpfHxiLm1lbW9pemVkUHJvcHMhPT1lPyhudWxsPT09YT9iLmNoaWxkPVllKGIsbnVsbCxlLGMpOmcoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1cbmUsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTQ6cmV0dXJuIGM9Yi50eXBlLnJlbmRlcixjPWMoYi5wZW5kaW5nUHJvcHMsYi5yZWYpLGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGIuY2hpbGQ7Y2FzZSAxMDpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWM/KGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDExOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLHEoKXx8bnVsbCE9PWMmJmIubWVtb2l6ZWRQcm9wcyE9PWM/KGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDEzOnJldHVybiBCKGEsYixjKTtjYXNlIDEyOmE6e2Q9Yi50eXBlO2Y9Yi5wZW5kaW5nUHJvcHM7aD1iLm1lbW9pemVkUHJvcHM7ZT1kLl9jdXJyZW50VmFsdWU7dmFyIHQ9ZC5fY2hhbmdlZEJpdHM7aWYocSgpfHwwIT09dHx8aCE9PWYpe2IubWVtb2l6ZWRQcm9wcz1cbmY7dmFyIGs9Zi51bnN0YWJsZV9vYnNlcnZlZEJpdHM7aWYodm9pZCAwPT09a3x8bnVsbD09PWspaz0xMDczNzQxODIzO2Iuc3RhdGVOb2RlPWs7aWYoMCE9PSh0JmspKXooYixkLHQsYyk7ZWxzZSBpZihoPT09Zil7YT1yKGEsYik7YnJlYWsgYX1jPWYuY2hpbGRyZW47Yz1jKGUpO2coYSxiLGMpO2E9Yi5jaGlsZH1lbHNlIGE9cihhLGIpfXJldHVybiBhO2RlZmF1bHQ6RChcIjE1NlwiKX19fX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhKXthLmVmZmVjdFRhZ3w9NH12YXIgaD1hLmNyZWF0ZUluc3RhbmNlLGc9YS5jcmVhdGVUZXh0SW5zdGFuY2Usaz1hLmFwcGVuZEluaXRpYWxDaGlsZCx2PWEuZmluYWxpemVJbml0aWFsQ2hpbGRyZW4sbD1hLnByZXBhcmVVcGRhdGUscD1hLnBlcnNpc3RlbmNlLHo9Yi5nZXRSb290SG9zdENvbnRhaW5lcixCPWIucG9wSG9zdENvbnRleHQscj1iLmdldEhvc3RDb250ZXh0LFE9Yi5wb3BIb3N0Q29udGFpbmVyLG49Yy5wb3BDb250ZXh0UHJvdmlkZXIseD1jLnBvcFRvcExldmVsQ29udGV4dE9iamVjdCxZPWQucG9wUHJvdmlkZXIsRz1lLnByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UsUj1lLnByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlLFM9ZS5wb3BIeWRyYXRpb25TdGF0ZSxxPXZvaWQgMCx1PXZvaWQgMCx0PXZvaWQgMDthLm11dGF0aW9uPyhxPWZ1bmN0aW9uKCl7fSx1PWZ1bmN0aW9uKGEsYixjKXsoYi51cGRhdGVRdWV1ZT1cbmMpJiZmKGIpfSx0PWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZmKGIpfSk6cD9EKFwiMjM1XCIpOkQoXCIyMzZcIik7cmV0dXJue2NvbXBsZXRlV29yazpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIG51bGw7Y2FzZSAyOnJldHVybiBuKGIpLGE9Yi5zdGF0ZU5vZGUsZD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiZudWxsIT09ZC5jYXB0dXJlZFZhbHVlcyYmKGIuZWZmZWN0VGFnJj0tNjUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50RGlkQ2F0Y2g/Yi5lZmZlY3RUYWd8PTI1NjpkLmNhcHR1cmVkVmFsdWVzPW51bGwpLG51bGw7Y2FzZSAzOlEoYik7eChiKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClTKGIpLGIuZWZmZWN0VGFnJj0tMztxKGIpO2E9Yi51cGRhdGVRdWV1ZTtcbm51bGwhPT1hJiZudWxsIT09YS5jYXB0dXJlZFZhbHVlcyYmKGIuZWZmZWN0VGFnfD0yNTYpO3JldHVybiBudWxsO2Nhc2UgNTpCKGIpO2M9eigpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBwPWEubWVtb2l6ZWRQcm9wcyxIPWIuc3RhdGVOb2RlLHk9cigpO0g9bChILGUscCxkLGMseSk7dShhLGIsSCxlLHAsZCxjLHkpO2EucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNle2lmKCFkKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXIoKTtpZihTKGIpKUcoYixjLGEpJiZmKGIpO2Vsc2V7cD1oKGUsZCxjLGEsYik7YTpmb3IoeT1iLmNoaWxkO251bGwhPT15Oyl7aWYoNT09PXkudGFnfHw2PT09eS50YWcpayhwLHkuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT15LnRhZyYmbnVsbCE9PXkuY2hpbGQpe3kuY2hpbGRbXCJyZXR1cm5cIl09eTt5PXkuY2hpbGQ7Y29udGludWV9aWYoeT09PWIpYnJlYWs7XG5mb3IoO251bGw9PT15LnNpYmxpbmc7KXtpZihudWxsPT09eVtcInJldHVyblwiXXx8eVtcInJldHVyblwiXT09PWIpYnJlYWsgYTt5PXlbXCJyZXR1cm5cIl19eS5zaWJsaW5nW1wicmV0dXJuXCJdPXlbXCJyZXR1cm5cIl07eT15LnNpYmxpbmd9dihwLGUsZCxjLGEpJiZmKGIpO2Iuc3RhdGVOb2RlPXB9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKXQoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZClyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjZcIik6dm9pZCAwLG51bGw7YT16KCk7Yz1yKCk7UyhiKT9SKGIpJiZmKGIpOmIuc3RhdGVOb2RlPWcoZCxhLGMsYil9cmV0dXJuIG51bGw7Y2FzZSA3OihkPWIubWVtb2l6ZWRQcm9wcyk/dm9pZCAwOkQoXCIxNjVcIik7Yi50YWc9ODtlPVtdO2E6Zm9yKChwPWIuc3RhdGVOb2RlKSYmKHBbXCJyZXR1cm5cIl09Yik7bnVsbCE9PVxucDspe2lmKDU9PT1wLnRhZ3x8Nj09PXAudGFnfHw0PT09cC50YWcpRChcIjI0N1wiKTtlbHNlIGlmKDk9PT1wLnRhZyllLnB1c2gocC5wZW5kaW5nUHJvcHMudmFsdWUpO2Vsc2UgaWYobnVsbCE9PXAuY2hpbGQpe3AuY2hpbGRbXCJyZXR1cm5cIl09cDtwPXAuY2hpbGQ7Y29udGludWV9Zm9yKDtudWxsPT09cC5zaWJsaW5nOyl7aWYobnVsbD09PXBbXCJyZXR1cm5cIl18fHBbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7cD1wW1wicmV0dXJuXCJdfXAuc2libGluZ1tcInJldHVyblwiXT1wW1wicmV0dXJuXCJdO3A9cC5zaWJsaW5nfXA9ZC5oYW5kbGVyO2Q9cChkLnByb3BzLGUpO2IuY2hpbGQ9WWUoYixudWxsIT09YT9hLmNoaWxkOm51bGwsZCxjKTtyZXR1cm4gYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGIudGFnPTcsbnVsbDtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgMTE6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBRKGIpLHEoYiksbnVsbDtcbmNhc2UgMTM6cmV0dXJuIFkoYiksbnVsbDtjYXNlIDEyOnJldHVybiBudWxsO2Nhc2UgMDpEKFwiMTY3XCIpO2RlZmF1bHQ6RChcIjE1NlwiKX19fX1cbmZ1bmN0aW9uIGJmKGEsYixjLGQsZSl7dmFyIGY9YS5wb3BIb3N0Q29udGFpbmVyLGg9YS5wb3BIb3N0Q29udGV4dCxnPWIucG9wQ29udGV4dFByb3ZpZGVyLGs9Yi5wb3BUb3BMZXZlbENvbnRleHRPYmplY3Qsdj1jLnBvcFByb3ZpZGVyO3JldHVybnt0aHJvd0V4Y2VwdGlvbjpmdW5jdGlvbihhLGIsYyl7Yi5lZmZlY3RUYWd8PTUxMjtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO2I9e3ZhbHVlOmMsc291cmNlOmIsc3RhY2s6QmMoYil9O2Rve3N3aXRjaChhLnRhZyl7Y2FzZSAzOk9lKGEpO2EudXBkYXRlUXVldWUuY2FwdHVyZWRWYWx1ZXM9W2JdO2EuZWZmZWN0VGFnfD0xMDI0O3JldHVybjtjYXNlIDI6aWYoYz1hLnN0YXRlTm9kZSwwPT09KGEuZWZmZWN0VGFnJjY0KSYmbnVsbCE9PWMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudERpZENhdGNoJiYhZShjKSl7T2UoYSk7Yz1hLnVwZGF0ZVF1ZXVlO3ZhciBkPWMuY2FwdHVyZWRWYWx1ZXM7bnVsbD09PWQ/XG5jLmNhcHR1cmVkVmFsdWVzPVtiXTpkLnB1c2goYik7YS5lZmZlY3RUYWd8PTEwMjQ7cmV0dXJufX1hPWFbXCJyZXR1cm5cIl19d2hpbGUobnVsbCE9PWEpfSx1bndpbmRXb3JrOmZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOmcoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gZihhKSxrKGEpLGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA1OnJldHVybiBoKGEpLG51bGw7Y2FzZSA0OnJldHVybiBmKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdihhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fSx1bndpbmRJbnRlcnJ1cHRlZFdvcms6ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZyhhKTticmVhaztjYXNlIDM6ZihhKTtrKGEpO2JyZWFrO2Nhc2UgNTpoKGEpO2JyZWFrO2Nhc2UgNDpmKGEpO2JyZWFrO2Nhc2UgMTM6dihhKX19fX1cbmZ1bmN0aW9uIGNmKGEsYil7dmFyIGM9Yi5zb3VyY2U7bnVsbD09PWIuc3RhY2smJkJjKGMpO251bGwhPT1jJiZBYyhjKTtiPWIudmFsdWU7bnVsbCE9PWEmJjI9PT1hLnRhZyYmQWMoYSk7dHJ5e2ImJmIuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihiKX1jYXRjaChkKXtkJiZkLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoZCl9fVxuZnVuY3Rpb24gZGYoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKHQpe2IoYSx0KX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIGgoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEplJiZKZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpmKGEpO3ZhciBjPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtjLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxjLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxjLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2godCl7YihhLHQpfWJyZWFrO2Nhc2UgNTpmKGEpO2JyZWFrO2Nhc2UgNzpnKGEuc3RhdGVOb2RlKTticmVhaztjYXNlIDQ6cCYmdihhKX19ZnVuY3Rpb24gZyhhKXtmb3IodmFyIGI9YTs7KWlmKGgoYiksbnVsbD09PWIuY2hpbGR8fHAmJjQ9PT1iLnRhZyl7aWYoYj09PVxuYSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ31lbHNlIGIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGR9ZnVuY3Rpb24gayhhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31mdW5jdGlvbiB2KGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9YltcInJldHVyblwiXTthOmZvcig7Oyl7bnVsbD09PWM/RChcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWM9ITB9aWYoNT09PVxuYi50YWd8fDY9PT1iLnRhZylnKGIpLGU/UyhkLGIuc3RhdGVOb2RlKTpSKGQsYi5zdGF0ZU5vZGUpO2Vsc2UgaWYoND09PWIudGFnP2Q9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpoKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkW1wicmV0dXJuXCJdPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX12YXIgbD1hLmdldFB1YmxpY0luc3RhbmNlLHA9YS5tdXRhdGlvbjthPWEucGVyc2lzdGVuY2U7cHx8KGE/RChcIjIzNVwiKTpEKFwiMjM2XCIpKTt2YXIgej1wLmNvbW1pdE1vdW50LEI9cC5jb21taXRVcGRhdGUscj1wLnJlc2V0VGV4dENvbnRlbnQsUT1wLmNvbW1pdFRleHRVcGRhdGUsbj1wLmFwcGVuZENoaWxkLFxueD1wLmFwcGVuZENoaWxkVG9Db250YWluZXIsWT1wLmluc2VydEJlZm9yZSxHPXAuaW5zZXJ0SW5Db250YWluZXJCZWZvcmUsUj1wLnJlbW92ZUNoaWxkLFM9cC5yZW1vdmVDaGlsZEZyb21Db250YWluZXI7cmV0dXJue2NvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlczpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmlmKGIuZWZmZWN0VGFnJjIwNDgmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTthLnByb3BzPWIubWVtb2l6ZWRQcm9wczthLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYyxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9YnJlYWs7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdFJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7cihhLnN0YXRlTm9kZSl9LFxuY29tbWl0UGxhY2VtZW50OmZ1bmN0aW9uKGEpe2E6e2Zvcih2YXIgYj1hW1wicmV0dXJuXCJdO251bGwhPT1iOyl7aWYoayhiKSl7dmFyIGM9YjticmVhayBhfWI9YltcInJldHVyblwiXX1EKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6RChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKHIoYiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWNbXCJyZXR1cm5cIl18fGsoY1tcInJldHVyblwiXSkpe2M9bnVsbDticmVhayBhfWM9Y1tcInJldHVyblwiXX1jLnNpYmxpbmdbXCJyZXR1cm5cIl09Y1tcInJldHVyblwiXTtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09XG5jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkW1wicmV0dXJuXCJdPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpYz9kP0coYixlLnN0YXRlTm9kZSxjKTpZKGIsZS5zdGF0ZU5vZGUsYyk6ZD94KGIsZS5zdGF0ZU5vZGUpOm4oYixlLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkW1wicmV0dXJuXCJdPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lW1wicmV0dXJuXCJdfHxlW1wicmV0dXJuXCJdPT09YSlyZXR1cm47ZT1lW1wicmV0dXJuXCJdfWUuc2libGluZ1tcInJldHVyblwiXT1lW1wicmV0dXJuXCJdO2U9ZS5zaWJsaW5nfX0sY29tbWl0RGVsZXRpb246ZnVuY3Rpb24oYSl7dihhKTtcbmFbXCJyZXR1cm5cIl09bnVsbDthLmNoaWxkPW51bGw7YS5hbHRlcm5hdGUmJihhLmFsdGVybmF0ZS5jaGlsZD1udWxsLGEuYWx0ZXJuYXRlW1wicmV0dXJuXCJdPW51bGwpfSxjb21taXRXb3JrOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZCKGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjJcIik6dm9pZCAwO2M9Yi5tZW1vaXplZFByb3BzO1EoYi5zdGF0ZU5vZGUsbnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmMsYyk7YnJlYWs7Y2FzZSAzOmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdExpZmVDeWNsZXM6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAyOmE9XG5jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEucHJvcHM9Yy5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yy5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWIubWVtb2l6ZWRQcm9wcztiPWIubWVtb2l6ZWRTdGF0ZTthLnByb3BzPWMubWVtb2l6ZWRQcm9wczthLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZTthLmNvbXBvbmVudERpZFVwZGF0ZShkLGIsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9Yz1jLnVwZGF0ZVF1ZXVlO251bGwhPT1jJiZTZShjLGEpO2JyZWFrO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWwoYy5jaGlsZC5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgMjphPWMuY2hpbGQuc3RhdGVOb2RlfVNlKGIsYSl9YnJlYWs7Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJlxuNCYmeihhLGMudHlwZSxjLm1lbW9pemVkUHJvcHMsYyk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRFcnJvckxvZ2dpbmc6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjp2YXIgYz1hLnR5cGU7Yj1hLnN0YXRlTm9kZTt2YXIgZD1hLnVwZGF0ZVF1ZXVlO251bGw9PT1kfHxudWxsPT09ZC5jYXB0dXJlZFZhbHVlcz9EKFwiMjY0XCIpOnZvaWQgMDt2YXIgZj1kLmNhcHR1cmVkVmFsdWVzO2QuY2FwdHVyZWRWYWx1ZXM9bnVsbDtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2gmJmUoYik7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHM7Yi5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zm9yKGM9MDtjPGYubGVuZ3RoO2MrKyl7ZD1mW2NdO3ZhciBsPWQudmFsdWUsZz1kLnN0YWNrO2NmKGEsZCk7Yi5jb21wb25lbnREaWRDYXRjaChsLHtjb21wb25lbnRTdGFjazpudWxsIT09Zz9nOlwiXCJ9KX1icmVhaztcbmNhc2UgMzpjPWEudXBkYXRlUXVldWU7bnVsbD09PWN8fG51bGw9PT1jLmNhcHR1cmVkVmFsdWVzP0QoXCIyNjRcIik6dm9pZCAwO2Y9Yy5jYXB0dXJlZFZhbHVlcztjLmNhcHR1cmVkVmFsdWVzPW51bGw7Zm9yKGM9MDtjPGYubGVuZ3RoO2MrKylkPWZbY10sY2YoYSxkKSxiKGQudmFsdWUpO2JyZWFrO2RlZmF1bHQ6RChcIjI2NVwiKX19LGNvbW1pdEF0dGFjaFJlZjpmdW5jdGlvbihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1sKGMpO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fSxjb21taXREZXRhY2hSZWY6ZnVuY3Rpb24oYSl7YT1hLnJlZjtudWxsIT09YSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EobnVsbCk6YS5jdXJyZW50PW51bGwpfX19dmFyIGVmPXt9O1xuZnVuY3Rpb24gZmYoYSxiKXtmdW5jdGlvbiBjKGEpe2E9PT1lZj9EKFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX12YXIgZD1hLmdldENoaWxkSG9zdENvbnRleHQsZT1hLmdldFJvb3RIb3N0Q29udGV4dDthPWIuY3JlYXRlQ3Vyc29yO3ZhciBmPWIucHVzaCxoPWIucG9wLGc9YShlZiksaz1hKGVmKSx2PWEoZWYpO3JldHVybntnZXRIb3N0Q29udGV4dDpmdW5jdGlvbigpe3JldHVybiBjKGcuY3VycmVudCl9LGdldFJvb3RIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKCl7cmV0dXJuIGModi5jdXJyZW50KX0scG9wSG9zdENvbnRhaW5lcjpmdW5jdGlvbihhKXtoKGcsYSk7aChrLGEpO2godixhKX0scG9wSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7ay5jdXJyZW50PT09YSYmKGgoZyxhKSxoKGssYSkpfSxwdXNoSG9zdENvbnRhaW5lcjpmdW5jdGlvbihhLGIpe2YodixiLGEpO2YoayxhLGEpO2YoZyxlZixhKTtiPWUoYik7aChnLGEpO2YoZyxiLGEpfSxwdXNoSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGI9XG5jKHYuY3VycmVudCksZT1jKGcuY3VycmVudCk7Yj1kKGUsYS50eXBlLGIpO2UhPT1iJiYoZihrLGEsYSksZihnLGIsYSkpfX19XG5mdW5jdGlvbiBnZihhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGM9bmV3IHhlKDUsbnVsbCxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2NbXCJyZXR1cm5cIl09YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gYyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBiPWYoYixhLnR5cGUsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9aChiLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZChhKXtmb3IoYT1hW1wicmV0dXJuXCJdO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hW1wicmV0dXJuXCJdO3A9YX12YXIgZT1hLnNob3VsZFNldFRleHRDb250ZW50O1xuYT1hLmh5ZHJhdGlvbjtpZighYSlyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7fSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbigpe0QoXCIxNzVcIil9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NlwiKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX19O3ZhciBmPWEuY2FuSHlkcmF0ZUluc3RhbmNlLGg9YS5jYW5IeWRyYXRlVGV4dEluc3RhbmNlLGc9YS5nZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcsaz1hLmdldEZpcnN0SHlkcmF0YWJsZUNoaWxkLHY9YS5oeWRyYXRlSW5zdGFuY2UsbD1hLmh5ZHJhdGVUZXh0SW5zdGFuY2UscD1udWxsLHo9bnVsbCxCPSExO3JldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe3o9XG5rKGEuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3A9YTtyZXR1cm4gQj0hMH0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3o9cD1udWxsO0I9ITF9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKGEpe2lmKEIpe3ZhciBkPXo7aWYoZCl7aWYoIWMoYSxkKSl7ZD1nKGQpO2lmKCFkfHwhYyhhLGQpKXthLmVmZmVjdFRhZ3w9MjtCPSExO3A9YTtyZXR1cm59YihwLHopfXA9YTt6PWsoZCl9ZWxzZSBhLmVmZmVjdFRhZ3w9MixCPSExLHA9YX19LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2I9dihhLnN0YXRlTm9kZSxhLnR5cGUsYS5tZW1vaXplZFByb3BzLGIsYyxhKTthLnVwZGF0ZVF1ZXVlPWI7cmV0dXJuIG51bGwhPT1iPyEwOiExfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gbChhLnN0YXRlTm9kZSxhLm1lbW9pemVkUHJvcHMsYSl9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe2lmKGEhPT1cbnApcmV0dXJuITE7aWYoIUIpcmV0dXJuIGQoYSksQj0hMCwhMTt2YXIgYz1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWMmJlwiYm9keVwiIT09YyYmIWUoYyxhLm1lbW9pemVkUHJvcHMpKWZvcihjPXo7YzspYihhLGMpLGM9ZyhjKTtkKGEpO3o9cD9nKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfX19XG5mdW5jdGlvbiBoZihhKXtmdW5jdGlvbiBiKGEsYixjKXthPWEuc3RhdGVOb2RlO2EuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iO2EuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Y31mdW5jdGlvbiBjKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jaGlsZENvbnRleHRUeXBlc31mdW5jdGlvbiBkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGUsZD1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBiO2M9Yy5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gYyllIGluIGQ/dm9pZCAwOkQoXCIxMDhcIixBYyhhKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIEEoe30sYixjKX12YXIgZT1hLmNyZWF0ZUN1cnNvcixmPWEucHVzaCxoPWEucG9wLGc9ZShrYSksaz1lKCExKSx2PWthO3JldHVybntnZXRVbm1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGMoYSk/XG52OmcuY3VycmVudH0sY2FjaGVDb250ZXh0OmIsZ2V0TWFza2VkQ29udGV4dDpmdW5jdGlvbihhLGMpe3ZhciBkPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWQpcmV0dXJuIGthO3ZhciBlPWEuc3RhdGVOb2RlO2lmKGUmJmUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWMpcmV0dXJuIGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGY9e30sZztmb3IoZyBpbiBkKWZbZ109Y1tnXTtlJiZiKGEsYyxmKTtyZXR1cm4gZn0saGFzQ29udGV4dENoYW5nZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gay5jdXJyZW50fSxpc0NvbnRleHRDb25zdW1lcjpmdW5jdGlvbihhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY29udGV4dFR5cGVzfSxpc0NvbnRleHRQcm92aWRlcjpjLHBvcENvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhKXtjKGEpJiYoaChrLGEpLGgoZyxhKSl9LHBvcFRvcExldmVsQ29udGV4dE9iamVjdDpmdW5jdGlvbihhKXtoKGssXG5hKTtoKGcsYSl9LHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3Q6ZnVuY3Rpb24oYSxiLGMpe251bGwhPWcuY3Vyc29yP0QoXCIxNjhcIik6dm9pZCAwO2YoZyxiLGEpO2YoayxjLGEpfSxwcm9jZXNzQ2hpbGRDb250ZXh0OmQscHVzaENvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhKXtpZighYyhhKSlyZXR1cm4hMTt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fGthO3Y9Zy5jdXJyZW50O2YoZyxiLGEpO2YoayxrLmN1cnJlbnQsYSk7cmV0dXJuITB9LGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtjP3ZvaWQgMDpEKFwiMTY5XCIpO2lmKGIpe3ZhciBlPWQoYSx2KTtjLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWU7aChrLGEpO2goZyxhKTtmKGcsZSxhKX1lbHNlIGgoayxhKTtmKGssYixhKX0sZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSl7Zm9yKDIhPT1cbnhkKGEpfHwyIT09YS50YWc/RChcIjE3MFwiKTp2b2lkIDA7MyE9PWEudGFnOyl7aWYoYyhhKSlyZXR1cm4gYS5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7KGE9YVtcInJldHVyblwiXSk/dm9pZCAwOkQoXCIxNzFcIil9cmV0dXJuIGEuc3RhdGVOb2RlLmNvbnRleHR9fX1cbmZ1bmN0aW9uIGpmKGEpe3ZhciBiPWEuY3JlYXRlQ3Vyc29yLGM9YS5wdXNoLGQ9YS5wb3AsZT1iKG51bGwpLGY9YihudWxsKSxoPWIoMCk7cmV0dXJue3B1c2hQcm92aWRlcjpmdW5jdGlvbihhKXt2YXIgYj1hLnR5cGUuX2NvbnRleHQ7YyhoLGIuX2NoYW5nZWRCaXRzLGEpO2MoZixiLl9jdXJyZW50VmFsdWUsYSk7YyhlLGEsYSk7Yi5fY3VycmVudFZhbHVlPWEucGVuZGluZ1Byb3BzLnZhbHVlO2IuX2NoYW5nZWRCaXRzPWEuc3RhdGVOb2RlfSxwb3BQcm92aWRlcjpmdW5jdGlvbihhKXt2YXIgYj1oLmN1cnJlbnQsYz1mLmN1cnJlbnQ7ZChlLGEpO2QoZixhKTtkKGgsYSk7YT1hLnR5cGUuX2NvbnRleHQ7YS5fY3VycmVudFZhbHVlPWM7YS5fY2hhbmdlZEJpdHM9Yn19fVxuZnVuY3Rpb24ga2YoKXt2YXIgYT1bXSxiPS0xO3JldHVybntjcmVhdGVDdXJzb3I6ZnVuY3Rpb24oYSl7cmV0dXJue2N1cnJlbnQ6YX19LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4tMT09PWJ9LHBvcDpmdW5jdGlvbihjKXswPmJ8fChjLmN1cnJlbnQ9YVtiXSxhW2JdPW51bGwsYi0tKX0scHVzaDpmdW5jdGlvbihjLGQpe2IrKzthW2JdPWMuY3VycmVudDtjLmN1cnJlbnQ9ZH0sY2hlY2tUaGF0U3RhY2tJc0VtcHR5OmZ1bmN0aW9uKCl7fSxyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXY6ZnVuY3Rpb24oKXt9fX1cbmZ1bmN0aW9uIGxmKGEpe2Z1bmN0aW9uIGIoKXtpZihudWxsIT09SSlmb3IodmFyIGE9SVtcInJldHVyblwiXTtudWxsIT09YTspTGMoYSksYT1hW1wicmV0dXJuXCJdO1lhPW51bGw7Wj0wO0k9bnVsbDtOYz0hMX1mdW5jdGlvbiBjKGEpe3JldHVybiBudWxsIT09eWEmJnlhLmhhcyhhKX1mdW5jdGlvbiBkKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hW1wicmV0dXJuXCJdLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmNTEyKSl7Yj1DYihiLGEsWik7dmFyIGU9YTtpZigxMDczNzQxODIzPT09Wnx8MTA3Mzc0MTgyMyE9PWUuZXhwaXJhdGlvblRpbWUpe2I6c3dpdGNoKGUudGFnKXtjYXNlIDM6Y2FzZSAyOnZhciBmPWUudXBkYXRlUXVldWU7Zj1udWxsPT09Zj8wOmYuZXhwaXJhdGlvblRpbWU7YnJlYWsgYjtkZWZhdWx0OmY9MH1mb3IodmFyIGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9XG5nLmV4cGlyYXRpb25UaW1lKSxnPWcuc2libGluZztlLmV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmNTEyKSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2V7TmM9ITA7YnJlYWt9fWVsc2V7YT1LYyhhKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTI1NTksYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PVxubnVsbCxjLmVmZmVjdFRhZ3w9NTEyKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha319cmV0dXJuIG51bGx9ZnVuY3Rpb24gZShhKXt2YXIgYj1XYShhLmFsdGVybmF0ZSxhLFopO251bGw9PT1iJiYoYj1kKGEpKTtuYy5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZihhLGMsZil7Y2E/RChcIjI0M1wiKTp2b2lkIDA7Y2E9ITA7aWYoYyE9PVp8fGEhPT1ZYXx8bnVsbD09PUkpYigpLFlhPWEsWj1jLEk9emUoWWEuY3VycmVudCxudWxsLFopLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGc9ITE7ZG97dHJ5e2lmKGYpZm9yKDtudWxsIT09SSYmIVMoKTspST1lKEkpO2Vsc2UgZm9yKDtudWxsIT09STspST1lKEkpfWNhdGNoKE9jKXtpZihudWxsPT09SSl7Zz0hMDtxKE9jKTticmVha31mPUk7dmFyIGg9ZltcInJldHVyblwiXTtpZihudWxsPT09aCl7Zz0hMDtxKE9jKTticmVha31KYyhoLGYsT2MpO0k9ZChmKX1icmVha313aGlsZSgxKTtcbmNhPSExO2lmKGd8fG51bGwhPT1JKXJldHVybiBudWxsO2lmKE5jKXJldHVybiBhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuY3VycmVudC5hbHRlcm5hdGU7RChcIjI2MlwiKX1mdW5jdGlvbiBoKGEsYixjLGQpe2E9e3ZhbHVlOmMsc291cmNlOmEsc3RhY2s6QmMoYSl9O1BlKGIse2V4cGlyYXRpb25UaW1lOmQscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6bnVsbCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTphLG5leHQ6bnVsbH0pO3YoYixkKX1mdW5jdGlvbiBnKGEsYil7YTp7Y2EmJiFaYT9EKFwiMjYzXCIpOnZvaWQgMDtmb3IodmFyIGQ9YVtcInJldHVyblwiXTtudWxsIT09ZDspe3N3aXRjaChkLnRhZyl7Y2FzZSAyOnZhciBlPWQuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNofHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRDYXRjaCYmIWMoZSkpe2goYSxkLGIsXG4xKTthPXZvaWQgMDticmVhayBhfWJyZWFrO2Nhc2UgMzpoKGEsZCxiLDEpO2E9dm9pZCAwO2JyZWFrIGF9ZD1kW1wicmV0dXJuXCJdfTM9PT1hLnRhZyYmaChhLGEsYiwxKTthPXZvaWQgMH1yZXR1cm4gYX1mdW5jdGlvbiBrKGEpe2E9MCE9PWlhP2lhOmNhP1phPzE6WjphLm1vZGUmMT96YT8xMCooKChsKCkrMTUpLzEwfDApKzEpOjI1KigoKGwoKSs1MDApLzI1fDApKzEpOjE7emEmJigwPT09ZGF8fGE+ZGEpJiYoZGE9YSk7cmV0dXJuIGF9ZnVuY3Rpb24gdihhLGMpe2E6e2Zvcig7bnVsbCE9PWE7KXtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5jKWEuZXhwaXJhdGlvblRpbWU9YztudWxsIT09YS5hbHRlcm5hdGUmJigwPT09YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWV8fGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPmMpJiYoYS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU9Yyk7aWYobnVsbD09PWFbXCJyZXR1cm5cIl0paWYoMz09PWEudGFnKXt2YXIgZD1cbmEuc3RhdGVOb2RlOyFjYSYmMCE9PVomJmM8WiYmYigpO2NhJiYhWmEmJllhPT09ZHx8QihkLGMpO0ZiPnhnJiZEKFwiMTg1XCIpfWVsc2V7Yz12b2lkIDA7YnJlYWsgYX1hPWFbXCJyZXR1cm5cIl19Yz12b2lkIDB9cmV0dXJuIGN9ZnVuY3Rpb24gbCgpe3llPUljKCktUGM7cmV0dXJuIHlnPSh5ZS8xMHwwKSsyfWZ1bmN0aW9uIHAoYSxiLGMsZCxlKXt2YXIgZj1pYTtpYT0xO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e2lhPWZ9fWZ1bmN0aW9uIHooYSl7aWYoMCE9PUdiKXtpZihhPkdiKXJldHVybjttZyhRYyl9dmFyIGI9SWMoKS1QYztHYj1hO1FjPWxnKFEse3RpbWVvdXQ6MTAqKGEtMiktYn0pfWZ1bmN0aW9uIEIoYSxiKXtpZihudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdClhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIsbnVsbD09PUs/KGxhPUs9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihLPUsubmV4dFNjaGVkdWxlZFJvb3Q9YSxLLm5leHRTY2hlZHVsZWRSb290PWxhKTtcbmVsc2V7dmFyIGM9YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09Y3x8YjxjKWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1UfHwoSj9IYiYmKGFhPWEsUD0xLEcoYSwxLCExKSk6MT09PWI/bigpOnooYikpfWZ1bmN0aW9uIHIoKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Sylmb3IodmFyIGM9SyxkPWxhO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1LP0QoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtsYT1LPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1sYSlsYT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsSy5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1LKXtLPWM7Sy5uZXh0U2NoZWR1bGVkUm9vdD1sYTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PVxuZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1LKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9YWE7bnVsbCE9PWMmJmM9PT1iJiYxPT09YT9GYisrOkZiPTA7YWE9YjtQPWF9ZnVuY3Rpb24gUShhKXt4KDAsITAsYSl9ZnVuY3Rpb24gbigpe3goMSwhMSxudWxsKX1mdW5jdGlvbiB4KGEsYixjKXskYT1jO3IoKTtpZihiKWZvcig7bnVsbCE9PWFhJiYwIT09UCYmKDA9PT1hfHxhPj1QKSYmKCFJYnx8bCgpPj1QKTspRyhhYSxQLCFJYikscigpO2Vsc2UgZm9yKDtudWxsIT09YWEmJjAhPT1QJiYoMD09PWF8fGE+PVApOylHKGFhLFAsITEpLHIoKTtudWxsIT09JGEmJihHYj0wLFFjPS0xKTswIT09UCYmeihQKTskYT1udWxsO0liPSExO1koKX1mdW5jdGlvbiBZKCl7RmI9MDtpZihudWxsIT09QWEpe3ZhciBhPUFhO0FhPW51bGw7Zm9yKHZhciBiPVxuMDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKHdnKXtCYXx8KEJhPSEwLEpiPXdnKX19fWlmKEJhKXRocm93IGE9SmIsSmI9bnVsbCxCYT0hMSxhO31mdW5jdGlvbiBHKGEsYixjKXtUP0QoXCIyNDVcIik6dm9pZCAwO1Q9ITA7Yz8oYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9SKGEsYyxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxjPWYoYSxiLCEwKSxudWxsIT09YyYmKFMoKT9hLmZpbmlzaGVkV29yaz1jOlIoYSxjLGIpKSkpOihjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1IoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9ZihhLGIsITEpLG51bGwhPT1jJiZSKGEsYyxiKSkpO1Q9ITF9ZnVuY3Rpb24gUihhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT1BYT9BYT1bZF06QWEucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1cbjA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7WmE9Y2E9ITA7Yz1iLnN0YXRlTm9kZTtjLmN1cnJlbnQ9PT1iP0QoXCIxNzdcIik6dm9pZCAwO2Q9Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWQ/RChcIjI2MVwiKTp2b2lkIDA7Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT1sKCk7bmMuY3VycmVudD1udWxsO2lmKDE8Yi5lZmZlY3RUYWcpaWYobnVsbCE9PWIubGFzdEVmZmVjdCl7Yi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yjt2YXIgZj1iLmZpcnN0RWZmZWN0fWVsc2UgZj1iO2Vsc2UgZj1iLmZpcnN0RWZmZWN0O3pnKGMuY29udGFpbmVySW5mbyk7Zm9yKHc9ZjtudWxsIT09dzspe3ZhciBoPSExLGs9dm9pZCAwO3RyeXtmb3IoO251bGwhPT13Oyl3LmVmZmVjdFRhZyYyMDQ4JiZEYih3LmFsdGVybmF0ZSx3KSx3PXcubmV4dEVmZmVjdH1jYXRjaChhYil7aD0hMCxrPWFifWgmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsayksbnVsbCE9PVxudyYmKHc9dy5uZXh0RWZmZWN0KSl9Zm9yKHc9ZjtudWxsIT09dzspe2g9ITE7az12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXc7KXt2YXIgcD13LmVmZmVjdFRhZztwJjE2JiZNYyh3KTtpZihwJjEyOCl7dmFyIG49dy5hbHRlcm5hdGU7bnVsbCE9PW4mJmtnKG4pfXN3aXRjaChwJjE0KXtjYXNlIDI6RWIodyk7dy5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpFYih3KTt3LmVmZmVjdFRhZyY9LTM7d2Uody5hbHRlcm5hdGUsdyk7YnJlYWs7Y2FzZSA0OndlKHcuYWx0ZXJuYXRlLHcpO2JyZWFrO2Nhc2UgODpnZyh3KX13PXcubmV4dEVmZmVjdH19Y2F0Y2goYWIpe2g9ITAsaz1hYn1oJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LGspLG51bGwhPT13JiYodz13Lm5leHRFZmZlY3QpKX1BZyhjLmNvbnRhaW5lckluZm8pO2MuY3VycmVudD1iO2Zvcih3PWY7bnVsbCE9PXc7KXtwPSExO249dm9pZCAwO3RyeXtmb3IoZj1jLGg9ZSxrPWQ7bnVsbCE9PXc7KXt2YXIgcj13LmVmZmVjdFRhZztcbnImMzYmJmhnKGYsdy5hbHRlcm5hdGUsdyxoLGspO3ImMjU2JiZpZyh3LHEpO3ImMTI4JiZqZyh3KTt2YXIgdD13Lm5leHRFZmZlY3Q7dy5uZXh0RWZmZWN0PW51bGw7dz10fX1jYXRjaChhYil7cD0hMCxuPWFifXAmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsbiksbnVsbCE9PXcmJih3PXcubmV4dEVmZmVjdCkpfWNhPVphPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBJZSYmSWUoYi5zdGF0ZU5vZGUpO2I9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzA9PT1iJiYoeWE9bnVsbCk7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifWZ1bmN0aW9uIFMoKXtyZXR1cm4gbnVsbD09PSRhfHwkYS50aW1lUmVtYWluaW5nKCk+Qmc/ITE6SWI9ITB9ZnVuY3Rpb24gcShhKXtudWxsPT09YWE/RChcIjI0NlwiKTp2b2lkIDA7YWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtCYXx8KEJhPSEwLEpiPWEpfXZhciB1PWtmKCksdD1mZihhLHUpLHk9aGYodSk7dT1qZih1KTt2YXIgSD1nZihhKSxcbldhPSRlKGEsdCx5LHUsSCx2LGspLmJlZ2luV29yayxDYj1hZihhLHQseSx1LEgpLmNvbXBsZXRlV29yazt0PWJmKHQseSx1LHYsYyk7dmFyIEpjPXQudGhyb3dFeGNlcHRpb24sS2M9dC51bndpbmRXb3JrLExjPXQudW53aW5kSW50ZXJydXB0ZWRXb3JrO3Q9ZGYoYSxnLHYsayxmdW5jdGlvbihhKXtudWxsPT09eWE/eWE9bmV3IFNldChbYV0pOnlhLmFkZChhKX0sbCk7dmFyIERiPXQuY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzLE1jPXQuY29tbWl0UmVzZXRUZXh0Q29udGVudCxFYj10LmNvbW1pdFBsYWNlbWVudCxnZz10LmNvbW1pdERlbGV0aW9uLHdlPXQuY29tbWl0V29yayxoZz10LmNvbW1pdExpZmVDeWNsZXMsaWc9dC5jb21taXRFcnJvckxvZ2dpbmcsamc9dC5jb21taXRBdHRhY2hSZWYsa2c9dC5jb21taXREZXRhY2hSZWYsSWM9YS5ub3csbGc9YS5zY2hlZHVsZURlZmVycmVkQ2FsbGJhY2ssbWc9YS5jYW5jZWxEZWZlcnJlZENhbGxiYWNrLHpnPWEucHJlcGFyZUZvckNvbW1pdCxcbkFnPWEucmVzZXRBZnRlckNvbW1pdCxQYz1JYygpLHlnPTIseWU9UGMsUmM9MCxpYT0wLGNhPSExLEk9bnVsbCxZYT1udWxsLFo9MCx3PW51bGwsWmE9ITEsTmM9ITEseWE9bnVsbCxsYT1udWxsLEs9bnVsbCxHYj0wLFFjPS0xLFQ9ITEsYWE9bnVsbCxQPTAsZGE9MCxJYj0hMSxCYT0hMSxKYj1udWxsLCRhPW51bGwsSj0hMSxIYj0hMSx6YT0hMSxBYT1udWxsLHhnPTFFMyxGYj0wLEJnPTE7cmV0dXJue3JlY2FsY3VsYXRlQ3VycmVudFRpbWU6bCxjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyOmssc2NoZWR1bGVXb3JrOnYscmVxdWVzdFdvcms6QixmbHVzaFJvb3Q6ZnVuY3Rpb24oYSxiKXtUP0QoXCIyNTNcIik6dm9pZCAwO2FhPWE7UD1iO0coYSxiLCExKTtuKCk7WSgpfSxiYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe3ZhciBjPUo7Sj0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoSj1jKXx8VHx8bigpfX0sdW5iYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe2lmKEomJiFIYil7SGI9XG4hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtIYj0hMX19cmV0dXJuIGEoYil9LGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1Q/RChcIjE4N1wiKTp2b2lkIDA7dmFyIGM9SjtKPSEwO3RyeXtyZXR1cm4gcChhLGIpfWZpbmFsbHl7Sj1jLG4oKX19LGZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1KO0o9ITA7dHJ5e3AoYSl9ZmluYWxseXsoSj1iKXx8VHx8eCgxLCExLG51bGwpfX0sZGVmZXJyZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe3ZhciBiPWlhO2lhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7aWE9Yn19LHN5bmNVcGRhdGVzOnAsaW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKGEsYixjKXtpZih6YSlyZXR1cm4gYShiLGMpO0p8fFR8fDA9PT1kYXx8KHgoZGEsITEsbnVsbCksZGE9MCk7dmFyIGQ9emEsZT1KO0o9emE9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXt6YT1kLChKPWUpfHxUfHxuKCl9fSxmbHVzaEludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbigpe1R8fFxuMD09PWRhfHwoeChkYSwhMSxudWxsKSxkYT0wKX0sY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjpmdW5jdGlvbigpe3ZhciBhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO2E8PVJjJiYoYT1SYysxKTtyZXR1cm4gUmM9YX0sbGVnYWN5Q29udGV4dDp5fX1cbmZ1bmN0aW9uIG1mKGEpe2Z1bmN0aW9uIGIoYSxiLGMsZCxlLGgpe2Q9Yi5jdXJyZW50O2lmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBsPWcoYyk7Yz1rKGMpP3YoYyxsKTpsfWVsc2UgYz1rYTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWg7UGUoZCx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6e2VsZW1lbnQ6YX0sY2FsbGJhY2s6dm9pZCAwPT09Yj9udWxsOmIsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtmKGQsZSk7cmV0dXJuIGV9dmFyIGM9YS5nZXRQdWJsaWNJbnN0YW5jZTthPWxmKGEpO3ZhciBkPWEucmVjYWxjdWxhdGVDdXJyZW50VGltZSxlPWEuY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcixmPWEuc2NoZWR1bGVXb3JrLGg9YS5sZWdhY3lDb250ZXh0LGc9aC5maW5kQ3VycmVudFVubWFza2VkQ29udGV4dCxrPWguaXNDb250ZXh0UHJvdmlkZXIsdj1cbmgucHJvY2Vzc0NoaWxkQ29udGV4dDtyZXR1cm57Y3JlYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjKXtiPW5ldyB4ZSgzLG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMscmVtYWluaW5nRXhwaXJhdGlvblRpbWU6MCxmaXJzdEJhdGNoOm51bGwsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07cmV0dXJuIGIuc3RhdGVOb2RlPWF9LHVwZGF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGMsZixoKXt2YXIgZz1jLmN1cnJlbnQsaz1kKCk7Zz1lKGcpO3JldHVybiBiKGEsYyxmLGssZyxoKX0sdXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZTpmdW5jdGlvbihhLGMsZSxmLGcpe3ZhciBoPWQoKTtyZXR1cm4gYihhLGMsZSxoLGYsZyl9LGZsdXNoUm9vdDphLmZsdXNoUm9vdCxcbnJlcXVlc3RXb3JrOmEucmVxdWVzdFdvcmssY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjphLmNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24sYmF0Y2hlZFVwZGF0ZXM6YS5iYXRjaGVkVXBkYXRlcyx1bmJhdGNoZWRVcGRhdGVzOmEudW5iYXRjaGVkVXBkYXRlcyxkZWZlcnJlZFVwZGF0ZXM6YS5kZWZlcnJlZFVwZGF0ZXMsc3luY1VwZGF0ZXM6YS5zeW5jVXBkYXRlcyxpbnRlcmFjdGl2ZVVwZGF0ZXM6YS5pbnRlcmFjdGl2ZVVwZGF0ZXMsZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM6YS5mbHVzaEludGVyYWN0aXZlVXBkYXRlcyxmbHVzaENvbnRyb2xsZWQ6YS5mbHVzaENvbnRyb2xsZWQsZmx1c2hTeW5jOmEuZmx1c2hTeW5jLGdldFB1YmxpY1Jvb3RJbnN0YW5jZTpmdW5jdGlvbihhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYyhhLmNoaWxkLnN0YXRlTm9kZSk7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fSxcbmZpbmRIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/RChcIjE4OFwiKTpEKFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPUJkKGIpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFsczpmdW5jdGlvbihhKXthPUNkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxpbmplY3RJbnRvRGV2VG9vbHM6ZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gSGUoQSh7fSxhLHtmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPUJkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfX19XG52YXIgbmY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDptZn0pLG9mPW5mJiZtZnx8bmYscGY9b2ZbXCJkZWZhdWx0XCJdP29mW1wiZGVmYXVsdFwiXTpvZjtmdW5jdGlvbiBxZihhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnJjLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fXZhciByZj1cIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93LHNmPXZvaWQgMDtzZj1yZj9mdW5jdGlvbigpe3JldHVybiBwZXJmb3JtYW5jZS5ub3coKX06ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX07dmFyIHRmPXZvaWQgMCx1Zj12b2lkIDA7XG5pZihtLmNhblVzZURPTSlpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgcmVxdWVzdElkbGVDYWxsYmFja3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGNhbmNlbElkbGVDYWxsYmFjayl7dmFyIHZmPW51bGwsd2Y9ITEseGY9LTEseWY9ITEsemY9MCxBZj0zMyxCZj0zMyxDZj12b2lkIDA7Q2Y9cmY/e2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3ZhciBhPXpmLXBlcmZvcm1hbmNlLm5vdygpO3JldHVybiAwPGE/YTowfX06e2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3ZhciBhPXpmLURhdGUubm93KCk7cmV0dXJuIDA8YT9hOjB9fTt2YXIgRGY9XCJfX3JlYWN0SWRsZUNhbGxiYWNrJFwiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGZ1bmN0aW9uKGEpe2lmKGEuc291cmNlPT09d2luZG93JiZhLmRhdGE9PT1EZil7d2Y9ITE7YT1zZigpO2lmKDA+PXpmLWEpaWYoLTEhPT1cbnhmJiZ4Zjw9YSlDZi5kaWRUaW1lb3V0PSEwO2Vsc2V7eWZ8fCh5Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRWYpKTtyZXR1cm59ZWxzZSBDZi5kaWRUaW1lb3V0PSExO3hmPS0xO2E9dmY7dmY9bnVsbDtudWxsIT09YSYmYShDZil9fSwhMSk7dmFyIEVmPWZ1bmN0aW9uKGEpe3lmPSExO3ZhciBiPWEtemYrQmY7YjxCZiYmQWY8QmY/KDg+YiYmKGI9OCksQmY9YjxBZj9BZjpiKTpBZj1iO3pmPWErQmY7d2Z8fCh3Zj0hMCx3aW5kb3cucG9zdE1lc3NhZ2UoRGYsXCIqXCIpKX07dGY9ZnVuY3Rpb24oYSxiKXt2Zj1hO251bGwhPWImJlwibnVtYmVyXCI9PT10eXBlb2YgYi50aW1lb3V0JiYoeGY9c2YoKStiLnRpbWVvdXQpO3lmfHwoeWY9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKEVmKSk7cmV0dXJuIDB9O3VmPWZ1bmN0aW9uKCl7dmY9bnVsbDt3Zj0hMTt4Zj0tMX19ZWxzZSB0Zj13aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjayx1Zj13aW5kb3cuY2FuY2VsSWRsZUNhbGxiYWNrO2Vsc2UgdGY9XG5mdW5jdGlvbihhKXtyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe2Eoe3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHl9LGRpZFRpbWVvdXQ6ITF9KX0pfSx1Zj1mdW5jdGlvbihhKXtjbGVhclRpbWVvdXQoYSl9O2Z1bmN0aW9uIEZmKGEpe3ZhciBiPVwiXCI7ZWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGw9PWF8fFwic3RyaW5nXCIhPT10eXBlb2YgYSYmXCJudW1iZXJcIiE9PXR5cGVvZiBhfHwoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHZihhLGIpe2E9QSh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZmKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhmKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitjO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBJZihhLGIpe3ZhciBjPWIudmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6bnVsbCE9Yz9jOmIuZGVmYXVsdFZhbHVlLHdhc011bHRpcGxlOiEhYi5tdWx0aXBsZX19ZnVuY3Rpb24gSmYoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0QoXCI5MVwiKTp2b2lkIDA7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz9EKFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6RChcIjkzXCIpLGI9YlswXSksYz1cIlwiK2IpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpcIlwiK2N9fVxuZnVuY3Rpb24gTGYoYSxiKXt2YXIgYz1iLnZhbHVlO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1iLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gTWYoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIE5mPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE9mKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gUGYoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP09mKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFFmPXZvaWQgMCxSZj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1OZi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtRZj1RZnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtRZi5pbm5lckhUTUw9XCJcXHgzY3N2Z1xceDNlXCIrYitcIlxceDNjL3N2Z1xceDNlXCI7Zm9yKGI9UWYuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gU2YoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBUZj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLFxuc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxVZj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoVGYpLmZvckVhY2goZnVuY3Rpb24oYSl7VWYuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtUZltiXT1UZlthXX0pfSk7XG5mdW5jdGlvbiBWZihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIik7dmFyIGU9Yzt2YXIgZj1iW2NdO2U9bnVsbD09Znx8XCJib29sZWFuXCI9PT10eXBlb2YgZnx8XCJcIj09PWY/XCJcIjpkfHxcIm51bWJlclwiIT09dHlwZW9mIGZ8fDA9PT1mfHxUZi5oYXNPd25Qcm9wZXJ0eShlKSYmVGZbZV0/KFwiXCIrZikudHJpbSgpOmYrXCJweFwiO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgV2Y9QSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIFhmKGEsYixjKXtiJiYoV2ZbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0QoXCIxMzdcIixhLGMoKSk6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj9EKFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOkQoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP0QoXCI2MlwiLGMoKSk6dm9pZCAwKX1cbmZ1bmN0aW9uIFlmKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgWmY9Qy50aGF0UmV0dXJucyhcIlwiKTtcbmZ1bmN0aW9uICRmKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPWtlKGEpO2I9dmFbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF07Yy5oYXNPd25Qcm9wZXJ0eShlKSYmY1tlXXx8KFwidG9wU2Nyb2xsXCI9PT1lP1pkKFwidG9wU2Nyb2xsXCIsXCJzY3JvbGxcIixhKTpcInRvcEZvY3VzXCI9PT1lfHxcInRvcEJsdXJcIj09PWU/KFpkKFwidG9wRm9jdXNcIixcImZvY3VzXCIsYSksWmQoXCJ0b3BCbHVyXCIsXCJibHVyXCIsYSksYy50b3BCbHVyPSEwLGMudG9wRm9jdXM9ITApOlwidG9wQ2FuY2VsXCI9PT1lPyhpYyhcImNhbmNlbFwiLCEwKSYmWmQoXCJ0b3BDYW5jZWxcIixcImNhbmNlbFwiLGEpLGMudG9wQ2FuY2VsPSEwKTpcInRvcENsb3NlXCI9PT1lPyhpYyhcImNsb3NlXCIsITApJiZaZChcInRvcENsb3NlXCIsXCJjbG9zZVwiLGEpLGMudG9wQ2xvc2U9ITApOmZlLmhhc093blByb3BlcnR5KGUpJiZXKGUsZmVbZV0sYSksY1tlXT0hMCl9fVxuZnVuY3Rpb24gYWcoYSxiLGMsZCl7Yz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtkPT09TmYuaHRtbCYmKGQ9T2YoYSkpO2Q9PT1OZi5odG1sP1wic2NyaXB0XCI9PT1hPyhhPWMuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIlxceDNjc2NyaXB0XFx4M2VcXHgzYy9zY3JpcHRcXHgzZVwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTphPVwic3RyaW5nXCI9PT10eXBlb2YgYi5pcz9jLmNyZWF0ZUVsZW1lbnQoYSx7aXM6Yi5pc30pOmMuY3JlYXRlRWxlbWVudChhKTphPWMuY3JlYXRlRWxlbWVudE5TKGQsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gYmcoYSxiKXtyZXR1cm4oOT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGEpfVxuZnVuY3Rpb24gY2coYSxiLGMsZCl7dmFyIGU9WWYoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO3ZhciBmPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGYgaW4gZ2UpZ2UuaGFzT3duUHJvcGVydHkoZikmJlcoZixnZVtmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VyhcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1coXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOlcoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW5wdXRcIjpXYyhhLGMpO2Y9VmMoYSxjKTtXKFwidG9wSW52YWxpZFwiLFxuXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUdmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOklmKGEsYyk7Zj1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOktmKGEsYyk7Zj1KZihhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfVhmKGIsZixaZik7dmFyIGg9ZixnO2ZvcihnIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGs9aFtnXTtcInN0eWxlXCI9PT1nP1ZmKGEsayxaZik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZSZihhLGspKTpcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWspJiZTZihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmXG5TZihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWcmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1nJiZcImF1dG9Gb2N1c1wiIT09ZyYmKHVhLmhhc093blByb3BlcnR5KGcpP251bGwhPWsmJiRmKGQsZyk6bnVsbCE9ayYmVWMoYSxnLGssZSkpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpsYyhhKTthZChhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmxjKGEpO01mKGEsYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixjLnZhbHVlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWMubXVsdGlwbGU7Yj1jLnZhbHVlO251bGwhPWI/SGYoYSwhIWMubXVsdGlwbGUsYiwhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJkhmKGEsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9fVxuZnVuY3Rpb24gZGcoYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPVZjKGEsYyk7ZD1WYyhhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9R2YoYSxjKTtkPUdmKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9SmYoYSxjKTtkPUpmKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9WGYoYixkLFpmKTtiPWE9dm9pZCAwO3ZhciBoPW51bGw7Zm9yKGEgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShhKSYmYy5oYXNPd25Qcm9wZXJ0eShhKSYmbnVsbCE9Y1thXSlpZihcInN0eWxlXCI9PT1hKXt2YXIgZz1jW2FdO2ZvcihiIGluIGcpZy5oYXNPd25Qcm9wZXJ0eShiKSYmKGh8fFxuKGg9e30pLGhbYl09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWEmJlwiY2hpbGRyZW5cIiE9PWEmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmXCJhdXRvRm9jdXNcIiE9PWEmJih1YS5oYXNPd25Qcm9wZXJ0eShhKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2goYSxudWxsKSk7Zm9yKGEgaW4gZCl7dmFyIGs9ZFthXTtnPW51bGwhPWM/Y1thXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShhKSYmayE9PWcmJihudWxsIT1rfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1hKWlmKGcpe2ZvcihiIGluIGcpIWcuaGFzT3duUHJvcGVydHkoYil8fGsmJmsuaGFzT3duUHJvcGVydHkoYil8fChofHwoaD17fSksaFtiXT1cIlwiKTtmb3IoYiBpbiBrKWsuaGFzT3duUHJvcGVydHkoYikmJmdbYl0hPT1rW2JdJiYoaHx8KGg9e30pLGhbYl09a1tiXSl9ZWxzZSBofHwoZnx8KGY9W10pLGYucHVzaChhLGgpKSxcbmg9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09YT8oaz1rP2suX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmchPT1rJiYoZj1mfHxbXSkucHVzaChhLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWE/Zz09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiYodWEuaGFzT3duUHJvcGVydHkoYSk/KG51bGwhPWsmJiRmKGUsYSksZnx8Zz09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goYSxrKSl9aCYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGgpO3JldHVybiBmfVxuZnVuY3Rpb24gZWcoYSxiLGMsZCxlKXtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmWWMoYSxlKTtZZihjLGQpO2Q9WWYoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBoPWJbZl0sZz1iW2YrMV07XCJzdHlsZVwiPT09aD9WZihhLGcsWmYpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/UmYoYSxnKTpcImNoaWxkcmVuXCI9PT1oP1NmKGEsZyk6VWMoYSxoLGcsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlpjKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGYoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZT12b2lkIDAsYj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz9IZihhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/XG5IZihhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSwhMCk6SGYoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fVxuZnVuY3Rpb24gZmcoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcih2YXIgZiBpbiBnZSlnZS5oYXNPd25Qcm9wZXJ0eShmKSYmVyhmLGdlW2ZdLGEpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpXKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VyhcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpXKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpXYyhhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpJZihhLFxuYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxjKSxXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpLCRmKGUsXCJvbkNoYW5nZVwiKX1YZihiLGMsWmYpO2Q9bnVsbDtmb3IodmFyIGggaW4gYyljLmhhc093blByb3BlcnR5KGgpJiYoZj1jW2hdLFwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiBmP2EudGV4dENvbnRlbnQhPT1mJiYoZD1bXCJjaGlsZHJlblwiLGZdKTpcIm51bWJlclwiPT09dHlwZW9mIGYmJmEudGV4dENvbnRlbnQhPT1cIlwiK2YmJihkPVtcImNoaWxkcmVuXCIsXCJcIitmXSk6dWEuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWYmJiRmKGUsaCkpO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpsYyhhKTthZChhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmxjKGEpO01mKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJlxuKGEub25jbGljaz1DKX1yZXR1cm4gZH1mdW5jdGlvbiBuZyhhLGIpe3JldHVybiBhLm5vZGVWYWx1ZSE9PWJ9XG52YXIgb2c9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDphZyxjcmVhdGVUZXh0Tm9kZTpiZyxzZXRJbml0aWFsUHJvcGVydGllczpjZyxkaWZmUHJvcGVydGllczpkZyx1cGRhdGVQcm9wZXJ0aWVzOmVnLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6ZmcsZGlmZkh5ZHJhdGVkVGV4dDpuZyx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpaYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9XG5jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lXFx4M2RcIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGVcXHgzZFwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVhhKGQpO2U/dm9pZCAwOkQoXCI5MFwiKTttYyhkKTtaYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGYoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhmKGEsISFjLm11bHRpcGxlLGIsITEpfX19KTtUYi5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KG9nKTt2YXIgcGc9bnVsbCxxZz1udWxsO1xuZnVuY3Rpb24gcmcoYSl7dGhpcy5fZXhwaXJhdGlvblRpbWU9WC5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uKCk7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1yZy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDpEKFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgc2c7WC51cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnJnLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnJnLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDpEKFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP0QoXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7WC5mbHVzaFJvb3QoYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07cmcucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIHNnKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9c2cucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnNnLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O2Z1bmN0aW9uIHRnKGEsYixjKXt0aGlzLl9pbnRlcm5hbFJvb3Q9WC5jcmVhdGVDb250YWluZXIoYSxiLGMpfXRnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgc2c7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO1gudXBkYXRlQ29udGFpbmVyKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG50Zy5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgc2c7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO1gudXBkYXRlQ29udGFpbmVyKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307dGcucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IHNnO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtYLnVwZGF0ZUNvbnRhaW5lcihiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xudGcucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHJnKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gdWcoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gdmcoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxudmFyIFg9cGYoe2dldFJvb3RIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVUeXBlO3N3aXRjaChiKXtjYXNlIDk6Y2FzZSAxMTphPShhPWEuZG9jdW1lbnRFbGVtZW50KT9hLm5hbWVzcGFjZVVSSTpQZihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yj04PT09Yj9hLnBhcmVudE5vZGU6YSxhPWIubmFtZXNwYWNlVVJJfHxudWxsLGI9Yi50YWdOYW1lLGE9UGYoYSxiKX1yZXR1cm4gYX0sZ2V0Q2hpbGRIb3N0Q29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBQZihhLGIpfSxnZXRQdWJsaWNJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYX0scHJlcGFyZUZvckNvbW1pdDpmdW5jdGlvbigpe3BnPVZkO3ZhciBhPWZhKCk7aWYobmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBjPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbmlmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goQil7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxoPS0xLGc9LTEsaz0wLHY9MCxsPWEscD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHo7Oyl7bCE9PWJ8fDAhPT1kJiYzIT09bC5ub2RlVHlwZXx8KGg9ZitkKTtsIT09ZXx8MCE9PWMmJjMhPT1sLm5vZGVUeXBlfHwoZz1mK2MpOzM9PT1sLm5vZGVUeXBlJiYoZis9bC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHo9bC5maXJzdENoaWxkKSlicmVhaztwPWw7bD16fWZvcig7Oyl7aWYobD09PWEpYnJlYWsgYjtwPT09YiYmKytrPT09ZCYmKGg9Zik7cD09PWUmJisrdj09PWMmJihnPWYpO2lmKG51bGwhPT0oej1sLm5leHRTaWJsaW5nKSlicmVhaztsPXA7cD1sLnBhcmVudE5vZGV9bD16fWI9LTE9PT1ofHwtMT09PWc/bnVsbDpcbntzdGFydDpoLGVuZDpnfX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtxZz17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifTtXZCghMSl9LHJlc2V0QWZ0ZXJDb21taXQ6ZnVuY3Rpb24oKXt2YXIgYT1xZyxiPWZhKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmamEoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihuZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKHdpbmRvdy5nZXRTZWxlY3Rpb24pe2I9d2luZG93LmdldFNlbGVjdGlvbigpO3ZhciBlPWNbbWIoKV0ubGVuZ3RoO2E9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2E6TWF0aC5taW4oZC5lbmQsZSk7IWIuZXh0ZW5kJiZhPlxuZCYmKGU9ZCxkPWEsYT1lKTtlPW1lKGMsYSk7dmFyIGY9bWUoYyxkKTtpZihlJiZmJiYoMSE9PWIucmFuZ2VDb3VudHx8Yi5hbmNob3JOb2RlIT09ZS5ub2RlfHxiLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxiLmZvY3VzTm9kZSE9PWYubm9kZXx8Yi5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSl7dmFyIGg9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtoLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCk7Yi5yZW1vdmVBbGxSYW5nZXMoKTthPmQ/KGIuYWRkUmFuZ2UoaCksYi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KGguc2V0RW5kKGYubm9kZSxmLm9mZnNldCksYi5hZGRSYW5nZShoKSl9fWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO2MuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsXG5hLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfXFnPW51bGw7V2QocGcpO3BnPW51bGx9LGNyZWF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT1hZyhhLGIsYyxkKTthW0ZdPWU7YVtUYV09YjtyZXR1cm4gYX0sYXBwZW5kSW5pdGlhbENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sZmluYWxpemVJbml0aWFsQ2hpbGRyZW46ZnVuY3Rpb24oYSxiLGMsZCl7Y2coYSxiLGMsZCk7cmV0dXJuIHZnKGIsYyl9LHByZXBhcmVVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gZGcoYSxiLGMsZCxlKX0sc2hvdWxkU2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PVxudHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfSxzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlOmZ1bmN0aW9uKGEsYil7cmV0dXJuISFiLmhpZGRlbn0sY3JlYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQpe2E9YmcoYSxiKTthW0ZdPWQ7cmV0dXJuIGF9LG5vdzpzZixtdXRhdGlvbjp7Y29tbWl0TW91bnQ6ZnVuY3Rpb24oYSxiLGMpe3ZnKGIsYykmJmEuZm9jdXMoKX0sY29tbWl0VXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YVtUYV09ZTtlZyhhLGIsYyxkLGUpfSxyZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe1NmKGEsXCJcIil9LGNvbW1pdFRleHRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMpe2Eubm9kZVZhbHVlPWN9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixhKTphLmFwcGVuZENoaWxkKGIpfSxcbmluc2VydEJlZm9yZTpmdW5jdGlvbihhLGIsYyl7YS5pbnNlcnRCZWZvcmUoYixjKX0saW5zZXJ0SW5Db250YWluZXJCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixjKTphLmluc2VydEJlZm9yZShiLGMpfSxyZW1vdmVDaGlsZDpmdW5jdGlvbihhLGIpe2EucmVtb3ZlQ2hpbGQoYil9LHJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKTphLnJlbW92ZUNoaWxkKGIpfX0saHlkcmF0aW9uOntjYW5IeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMSE9PWEubm9kZVR5cGV8fGIudG9Mb3dlckNhc2UoKSE9PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmF9LGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cIlwiPT09Ynx8MyE9PWEubm9kZVR5cGU/bnVsbDphfSxnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmc6ZnVuY3Rpb24oYSl7Zm9yKGE9XG5hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZDpmdW5jdGlvbihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUsZil7YVtGXT1mO2FbVGFdPWM7cmV0dXJuIGZnKGEsYixjLGUsZCl9LGh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2FbRl09YztyZXR1cm4gbmcoYSxiKX0sZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LFxuZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fX0sc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrOnRmLGNhbmNlbERlZmVycmVkQ2FsbGJhY2s6dWZ9KSxDZz1YO2FjPUNnLmJhdGNoZWRVcGRhdGVzO2JjPUNnLmludGVyYWN0aXZlVXBkYXRlcztjYz1DZy5mbHVzaEludGVyYWN0aXZlVXBkYXRlcztcbmZ1bmN0aW9uIERnKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgdGcoYSwhMSxiKX1cbmZ1bmN0aW9uIEVnKGEsYixjLGQsZSl7dWcoYyk/dm9pZCAwOkQoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1YLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPURnKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1YLnVuYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIFguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBGZyhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO3VnKGIpP3ZvaWQgMDpEKFwiMjAwXCIpO3JldHVybiBxZihhLGIsbnVsbCxjKX1cbnZhciBHZz17Y3JlYXRlUG9ydGFsOkZnLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP251bGw6MT09PWEubm9kZVR5cGU/YTpYLmZpbmRIb3N0SW5zdGFuY2UoYSl9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBFZyhudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gRWcobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj9EKFwiMzhcIik6dm9pZCAwO3JldHVybiBFZyhhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXt1ZyhhKT92b2lkIDA6RChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFgudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe0VnKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPVxubnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gRmcuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOlguYmF0Y2hlZFVwZGF0ZXMsdW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzOlguZGVmZXJyZWRVcGRhdGVzLGZsdXNoU3luYzpYLmZsdXNoU3luYyx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6WC5mbHVzaENvbnRyb2xsZWQsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50UGx1Z2luSHViOlJhLEV2ZW50UGx1Z2luUmVnaXN0cnk6Q2EsRXZlbnRQcm9wYWdhdG9yczprYixSZWFjdENvbnRyb2xsZWRDb21wb25lbnQ6JGIsUmVhY3RET01Db21wb25lbnRUcmVlOmJiLFJlYWN0RE9NRXZlbnRMaXN0ZW5lcjokZH0sdW5zdGFibGVfY3JlYXRlUm9vdDpmdW5jdGlvbihhLGIpe3JldHVybiBuZXcgdGcoYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9fTtcblguaW5qZWN0SW50b0RldlRvb2xzKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpVYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjMuMlwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO3ZhciBIZz1PYmplY3QuZnJlZXplKHtkZWZhdWx0OkdnfSksSWc9SGcmJkdnfHxIZzttb2R1bGUuZXhwb3J0cz1JZ1tcImRlZmF1bHRcIl0/SWdbXCJkZWZhdWx0XCJdOklnO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4zLjJcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxwPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKSxxPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLHI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLHQ9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHU9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdj1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHc9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx4PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDkseT1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsej1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsQT1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZvcndhcmRfcmVmXCIpOlxuNjAxMTIsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQyhhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJodHRwOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50XFx4M2RcIithLGM9MDtjPGI7YysrKWUrPVwiXFx4MjZhcmdzW11cXHgzZFwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7bighMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGUpfXZhciBEPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fTtcbmZ1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RH1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9DKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fER9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7bShILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPXtjdXJyZW50Om51bGx9LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBMKGEsYixlKXt2YXIgYz12b2lkIDAsZD17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilKLmNhbGwoYixjKSYmIUsuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaz1BcnJheShmKSxsPTA7bDxmO2wrKylrW2xdPWFyZ3VtZW50c1tsKzJdO2QuY2hpbGRyZW49a31pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtjXSYmKGRbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnQsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOkkuY3VycmVudH19XG5mdW5jdGlvbiBNKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT10fWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCJcXHgzZFwiOlwiXFx4M2QwXCIsXCI6XCI6XCJcXHgzZDJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE49L1xcLysvZyxPPVtdO2Z1bmN0aW9uIFAoYSxiLGUsYyl7aWYoTy5sZW5ndGgpe3ZhciBkPU8ucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1lO2QuY29udGV4dD1jO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6Yyxjb3VudDowfX1mdW5jdGlvbiBRKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+Ty5sZW5ndGgmJk8ucHVzaChhKX1cbmZ1bmN0aW9uIFIoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHQ6Y2FzZSB1Omc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1MoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZD1hW2hdO3ZhciBmPWIrUyhkLGgpO2crPVIoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP2Y9bnVsbDooZj1CJiZhW0JdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLFxuaD0wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitTKGQsaCsrKSxnKz1SKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLEMoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFMoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFQoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gVShhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9WKGEsYyxlLHEudGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YSYmKE0oYSkmJihiPWQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE4sXCIkXFx4MjYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKE4sXCIkXFx4MjYvXCIpK1wiL1wiKTtiPVAoYixnLGMsZCk7bnVsbD09YXx8UihhLFwiXCIsVSxiKTtRKGIpfVxudmFyIFc9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VihhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9UChudWxsLG51bGwsYixlKTtudWxsPT1hfHxSKGEsXCJcIixULGIpO1EoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPzA6UihhLFwiXCIscS50aGF0UmV0dXJuc051bGwsbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VihhLGIsbnVsbCxxLnRoYXRSZXR1cm5zQXJndW1lbnQpO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe00oYSk/dm9pZCAwOkMoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkUsUHVyZUNvbXBvbmVudDpHLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp5LFxuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2RlZmF1bHRWYWx1ZTphLF9jdXJyZW50VmFsdWU6YSxfY2hhbmdlZEJpdHM6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOngsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QSxyZW5kZXI6YX19LEZyYWdtZW50OnYsU3RyaWN0TW9kZTp3LHVuc3RhYmxlX0FzeW5jTW9kZTp6LGNyZWF0ZUVsZW1lbnQ6TCxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGUpe251bGw9PT1hfHx2b2lkIDA9PT1hP0MoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGQ9bSh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1JLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgaz12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiZcbihrPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpSi5jYWxsKGIsYykmJiFLLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1rP2tbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxjKXtrPUFycmF5KGMpO2Zvcih2YXIgbD0wO2w8YztsKyspa1tsXT1hcmd1bWVudHNbbCsyXTtkLmNoaWxkcmVuPWt9cmV0dXJueyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TC5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok0sdmVyc2lvbjpcIjE2LjMuMlwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpJLGFzc2lnbjptfX0sWD1PYmplY3QuZnJlZXplKHtkZWZhdWx0Old9KSxcblk9WCYmV3x8WDttb2R1bGUuZXhwb3J0cz1ZW1wiZGVmYXVsdFwiXT9ZW1wiZGVmYXVsdFwiXTpZO1xuIiwiaW1wb3J0ICcuL3N0eWxlcy9zdHlsZXMuc2Nzcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEFwcFJvdXRlciBmcm9tICcuL2NvbXBvbmVudHMvcm91dGVycy9BcHBSb3V0ZXIuanMnO1xuXG5cblJlYWN0RE9NLnJlbmRlcig8QXBwUm91dGVyLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwXCIpKTsiXSwic291cmNlUm9vdCI6IiJ9