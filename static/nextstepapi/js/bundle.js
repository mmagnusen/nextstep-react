!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=237)}([function(e,t,n){e.exports=n(229)()},function(e,t,n){"use strict";e.exports=n(236)},function(e,t,n){"use strict";e.exports=n(226)},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,u,s){if(r(t),!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,a,u,s],f=0;(l=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){e.exports=function(){"use strict";var e=Array.prototype.slice;function t(e,t){t&&(e.prototype=Object.create(t.prototype)),e.prototype.constructor=e}function n(e){return a(e)?e:V(e)}function r(e){return u(e)?e:J(e)}function o(e){return s(e)?e:$(e)}function i(e){return a(e)&&!l(e)?e:G(e)}function a(e){return!(!e||!e[f])}function u(e){return!(!e||!e[p])}function s(e){return!(!e||!e[d])}function l(e){return u(e)||s(e)}function c(e){return!(!e||!e[h])}t(r,n),t(o,n),t(i,n),n.isIterable=a,n.isKeyed=u,n.isIndexed=s,n.isAssociative=l,n.isOrdered=c,n.Keyed=r,n.Indexed=o,n.Set=i;var f="@@__IMMUTABLE_ITERABLE__@@",p="@@__IMMUTABLE_KEYED__@@",d="@@__IMMUTABLE_INDEXED__@@",h="@@__IMMUTABLE_ORDERED__@@",y=5,m=1<<y,g=m-1,v={},_={value:!1},b={value:!1};function w(e){return e.value=!1,e}function C(e){e&&(e.value=!0)}function E(){}function S(e,t){t=t||0;for(var n=Math.max(0,e.length-t),r=new Array(n),o=0;o<n;o++)r[o]=e[o+t];return r}function k(e){return void 0===e.size&&(e.size=e.__iterate(O)),e.size}function x(e,t){if("number"!=typeof t){var n=t>>>0;if(""+n!==t||4294967295===n)return NaN;t=n}return t<0?k(e)+t:t}function O(){return!0}function T(e,t,n){return(0===e||void 0!==n&&e<=-n)&&(void 0===t||void 0!==n&&t>=n)}function M(e,t){return D(e,t,0)}function R(e,t){return D(e,t,t)}function D(e,t,n){return void 0===e?n:e<0?Math.max(0,t+e):void 0===t?e:Math.min(t,e)}var j=0,P=1,A=2,L="function"==typeof Symbol&&Symbol.iterator,N="@@iterator",I=L||N;function F(e){this.next=e}function B(e,t,n,r){var o=0===e?t:1===e?n:[t,n];return r?r.value=o:r={value:o,done:!1},r}function U(){return{value:void 0,done:!0}}function K(e){return!!z(e)}function q(e){return e&&"function"==typeof e.next}function H(e){var t=z(e);return t&&t.call(e)}function z(e){var t=e&&(L&&e[L]||e[N]);if("function"==typeof t)return t}function W(e){return e&&"number"==typeof e.length}function V(e){return null===e||void 0===e?ie():a(e)?e.toSeq():function(e){var t=se(e)||"object"==typeof e&&new te(e);if(!t)throw new TypeError("Expected Array or iterable object of values, or keyed object: "+e);return t}(e)}function J(e){return null===e||void 0===e?ie().toKeyedSeq():a(e)?u(e)?e.toSeq():e.fromEntrySeq():ae(e)}function $(e){return null===e||void 0===e?ie():a(e)?u(e)?e.entrySeq():e.toIndexedSeq():ue(e)}function G(e){return(null===e||void 0===e?ie():a(e)?u(e)?e.entrySeq():e:ue(e)).toSetSeq()}F.prototype.toString=function(){return"[Iterator]"},F.KEYS=j,F.VALUES=P,F.ENTRIES=A,F.prototype.inspect=F.prototype.toSource=function(){return this.toString()},F.prototype[I]=function(){return this},t(V,n),V.of=function(){return V(arguments)},V.prototype.toSeq=function(){return this},V.prototype.toString=function(){return this.__toString("Seq {","}")},V.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},V.prototype.__iterate=function(e,t){return le(this,e,t,!0)},V.prototype.__iterator=function(e,t){return ce(this,e,t,!0)},t(J,V),J.prototype.toKeyedSeq=function(){return this},t($,V),$.of=function(){return $(arguments)},$.prototype.toIndexedSeq=function(){return this},$.prototype.toString=function(){return this.__toString("Seq [","]")},$.prototype.__iterate=function(e,t){return le(this,e,t,!1)},$.prototype.__iterator=function(e,t){return ce(this,e,t,!1)},t(G,V),G.of=function(){return G(arguments)},G.prototype.toSetSeq=function(){return this},V.isSeq=oe,V.Keyed=J,V.Set=G,V.Indexed=$;var Q,Y,X,Z="@@__IMMUTABLE_SEQ__@@";function ee(e){this._array=e,this.size=e.length}function te(e){var t=Object.keys(e);this._object=e,this._keys=t,this.size=t.length}function ne(e){this._iterable=e,this.size=e.length||e.size}function re(e){this._iterator=e,this._iteratorCache=[]}function oe(e){return!(!e||!e[Z])}function ie(){return Q||(Q=new ee([]))}function ae(e){var t=Array.isArray(e)?new ee(e).fromEntrySeq():q(e)?new re(e).fromEntrySeq():K(e)?new ne(e).fromEntrySeq():"object"==typeof e?new te(e):void 0;if(!t)throw new TypeError("Expected Array or iterable object of [k, v] entries, or keyed object: "+e);return t}function ue(e){var t=se(e);if(!t)throw new TypeError("Expected Array or iterable object of values: "+e);return t}function se(e){return W(e)?new ee(e):q(e)?new re(e):K(e)?new ne(e):void 0}function le(e,t,n,r){var o=e._cache;if(o){for(var i=o.length-1,a=0;a<=i;a++){var u=o[n?i-a:a];if(!1===t(u[1],r?u[0]:a,e))return a+1}return a}return e.__iterateUncached(t,n)}function ce(e,t,n,r){var o=e._cache;if(o){var i=o.length-1,a=0;return new F(function(){var e=o[n?i-a:a];return a++>i?{value:void 0,done:!0}:B(t,r?e[0]:a-1,e[1])})}return e.__iteratorUncached(t,n)}function fe(e,t){return t?function e(t,n,r,o){return Array.isArray(n)?t.call(o,r,$(n).map(function(r,o){return e(t,r,o,n)})):de(n)?t.call(o,r,J(n).map(function(r,o){return e(t,r,o,n)})):n}(t,e,"",{"":e}):pe(e)}function pe(e){return Array.isArray(e)?$(e).map(pe).toList():de(e)?J(e).map(pe).toMap():e}function de(e){return e&&(e.constructor===Object||void 0===e.constructor)}function he(e,t){if(e===t||e!=e&&t!=t)return!0;if(!e||!t)return!1;if("function"==typeof e.valueOf&&"function"==typeof t.valueOf){if(e=e.valueOf(),t=t.valueOf(),e===t||e!=e&&t!=t)return!0;if(!e||!t)return!1}return!("function"!=typeof e.equals||"function"!=typeof t.equals||!e.equals(t))}function ye(e,t){if(e===t)return!0;if(!a(t)||void 0!==e.size&&void 0!==t.size&&e.size!==t.size||void 0!==e.__hash&&void 0!==t.__hash&&e.__hash!==t.__hash||u(e)!==u(t)||s(e)!==s(t)||c(e)!==c(t))return!1;if(0===e.size&&0===t.size)return!0;var n=!l(e);if(c(e)){var r=e.entries();return t.every(function(e,t){var o=r.next().value;return o&&he(o[1],e)&&(n||he(o[0],t))})&&r.next().done}var o=!1;if(void 0===e.size)if(void 0===t.size)"function"==typeof e.cacheResult&&e.cacheResult();else{o=!0;var i=e;e=t,t=i}var f=!0,p=t.__iterate(function(t,r){if(n?!e.has(t):o?!he(t,e.get(r,v)):!he(e.get(r,v),t))return f=!1,!1});return f&&e.size===p}function me(e,t){if(!(this instanceof me))return new me(e,t);if(this._value=e,this.size=void 0===t?1/0:Math.max(0,t),0===this.size){if(Y)return Y;Y=this}}function ge(e,t){if(!e)throw new Error(t)}function ve(e,t,n){if(!(this instanceof ve))return new ve(e,t,n);if(ge(0!==n,"Cannot step a Range by 0"),e=e||0,void 0===t&&(t=1/0),n=void 0===n?1:Math.abs(n),t<e&&(n=-n),this._start=e,this._end=t,this._step=n,this.size=Math.max(0,Math.ceil((t-e)/n-1)+1),0===this.size){if(X)return X;X=this}}function _e(){throw TypeError("Abstract")}function be(){}function we(){}function Ce(){}V.prototype[Z]=!0,t(ee,$),ee.prototype.get=function(e,t){return this.has(e)?this._array[x(this,e)]:t},ee.prototype.__iterate=function(e,t){for(var n=this._array,r=n.length-1,o=0;o<=r;o++)if(!1===e(n[t?r-o:o],o,this))return o+1;return o},ee.prototype.__iterator=function(e,t){var n=this._array,r=n.length-1,o=0;return new F(function(){return o>r?{value:void 0,done:!0}:B(e,o,n[t?r-o++:o++])})},t(te,J),te.prototype.get=function(e,t){return void 0===t||this.has(e)?this._object[e]:t},te.prototype.has=function(e){return this._object.hasOwnProperty(e)},te.prototype.__iterate=function(e,t){for(var n=this._object,r=this._keys,o=r.length-1,i=0;i<=o;i++){var a=r[t?o-i:i];if(!1===e(n[a],a,this))return i+1}return i},te.prototype.__iterator=function(e,t){var n=this._object,r=this._keys,o=r.length-1,i=0;return new F(function(){var a=r[t?o-i:i];return i++>o?{value:void 0,done:!0}:B(e,a,n[a])})},te.prototype[h]=!0,t(ne,$),ne.prototype.__iterateUncached=function(e,t){if(t)return this.cacheResult().__iterate(e,t);var n=this._iterable,r=H(n),o=0;if(q(r))for(var i;!(i=r.next()).done&&!1!==e(i.value,o++,this););return o},ne.prototype.__iteratorUncached=function(e,t){if(t)return this.cacheResult().__iterator(e,t);var n=this._iterable,r=H(n);if(!q(r))return new F(U);var o=0;return new F(function(){var t=r.next();return t.done?t:B(e,o++,t.value)})},t(re,$),re.prototype.__iterateUncached=function(e,t){if(t)return this.cacheResult().__iterate(e,t);for(var n,r=this._iterator,o=this._iteratorCache,i=0;i<o.length;)if(!1===e(o[i],i++,this))return i;for(;!(n=r.next()).done;){var a=n.value;if(o[i]=a,!1===e(a,i++,this))break}return i},re.prototype.__iteratorUncached=function(e,t){if(t)return this.cacheResult().__iterator(e,t);var n=this._iterator,r=this._iteratorCache,o=0;return new F(function(){if(o>=r.length){var t=n.next();if(t.done)return t;r[o]=t.value}return B(e,o,r[o++])})},t(me,$),me.prototype.toString=function(){return 0===this.size?"Repeat []":"Repeat [ "+this._value+" "+this.size+" times ]"},me.prototype.get=function(e,t){return this.has(e)?this._value:t},me.prototype.includes=function(e){return he(this._value,e)},me.prototype.slice=function(e,t){var n=this.size;return T(e,t,n)?this:new me(this._value,R(t,n)-M(e,n))},me.prototype.reverse=function(){return this},me.prototype.indexOf=function(e){return he(this._value,e)?0:-1},me.prototype.lastIndexOf=function(e){return he(this._value,e)?this.size:-1},me.prototype.__iterate=function(e,t){for(var n=0;n<this.size;n++)if(!1===e(this._value,n,this))return n+1;return n},me.prototype.__iterator=function(e,t){var n=this,r=0;return new F(function(){return r<n.size?B(e,r++,n._value):{value:void 0,done:!0}})},me.prototype.equals=function(e){return e instanceof me?he(this._value,e._value):ye(e)},t(ve,$),ve.prototype.toString=function(){return 0===this.size?"Range []":"Range [ "+this._start+"..."+this._end+(this._step>1?" by "+this._step:"")+" ]"},ve.prototype.get=function(e,t){return this.has(e)?this._start+x(this,e)*this._step:t},ve.prototype.includes=function(e){var t=(e-this._start)/this._step;return t>=0&&t<this.size&&t===Math.floor(t)},ve.prototype.slice=function(e,t){return T(e,t,this.size)?this:(e=M(e,this.size),(t=R(t,this.size))<=e?new ve(0,0):new ve(this.get(e,this._end),this.get(t,this._end),this._step))},ve.prototype.indexOf=function(e){var t=e-this._start;if(t%this._step==0){var n=t/this._step;if(n>=0&&n<this.size)return n}return-1},ve.prototype.lastIndexOf=function(e){return this.indexOf(e)},ve.prototype.__iterate=function(e,t){for(var n=this.size-1,r=this._step,o=t?this._start+n*r:this._start,i=0;i<=n;i++){if(!1===e(o,i,this))return i+1;o+=t?-r:r}return i},ve.prototype.__iterator=function(e,t){var n=this.size-1,r=this._step,o=t?this._start+n*r:this._start,i=0;return new F(function(){var a=o;return o+=t?-r:r,i>n?{value:void 0,done:!0}:B(e,i++,a)})},ve.prototype.equals=function(e){return e instanceof ve?this._start===e._start&&this._end===e._end&&this._step===e._step:ye(this,e)},t(_e,n),t(be,_e),t(we,_e),t(Ce,_e),_e.Keyed=be,_e.Indexed=we,_e.Set=Ce;var Ee="function"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(e,t){var n=65535&(e|=0),r=65535&(t|=0);return n*r+((e>>>16)*r+n*(t>>>16)<<16>>>0)|0};function Se(e){return e>>>1&1073741824|3221225471&e}function ke(e){if(!1===e||null===e||void 0===e)return 0;if("function"==typeof e.valueOf&&(!1===(e=e.valueOf())||null===e||void 0===e))return 0;if(!0===e)return 1;var t,n,r=typeof e;if("number"===r){var o=0|e;for(o!==e&&(o^=4294967295*e);e>4294967295;)o^=e/=4294967295;return Se(o)}if("string"===r)return e.length>Pe?(void 0===(n=Ne[t=e])&&(n=xe(t),Le===Ae&&(Le=0,Ne={}),Le++,Ne[t]=n),n):xe(e);if("function"==typeof e.hashCode)return e.hashCode();if("object"===r)return function(e){var t;if(Re&&void 0!==(t=Oe.get(e)))return t;if(void 0!==(t=e[je]))return t;if(!Me){if(void 0!==(t=e.propertyIsEnumerable&&e.propertyIsEnumerable[je]))return t;if(void 0!==(t=function(e){if(e&&e.nodeType>0)switch(e.nodeType){case 1:return e.uniqueID;case 9:return e.documentElement&&e.documentElement.uniqueID}}(e)))return t}if(t=++De,1073741824&De&&(De=0),Re)Oe.set(e,t);else{if(void 0!==Te&&!1===Te(e))throw new Error("Non-extensible objects are not allowed as keys.");if(Me)Object.defineProperty(e,je,{enumerable:!1,configurable:!1,writable:!1,value:t});else if(void 0!==e.propertyIsEnumerable&&e.propertyIsEnumerable===e.constructor.prototype.propertyIsEnumerable)e.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},e.propertyIsEnumerable[je]=t;else{if(void 0===e.nodeType)throw new Error("Unable to set a non-enumerable property on object.");e[je]=t}}return t}(e);if("function"==typeof e.toString)return xe(e.toString());throw new Error("Value type "+r+" cannot be hashed.")}function xe(e){for(var t=0,n=0;n<e.length;n++)t=31*t+e.charCodeAt(n)|0;return Se(t)}var Oe,Te=Object.isExtensible,Me=function(){try{return Object.defineProperty({},"@",{}),!0}catch(e){return!1}}(),Re="function"==typeof WeakMap;Re&&(Oe=new WeakMap);var De=0,je="__immutablehash__";"function"==typeof Symbol&&(je=Symbol(je));var Pe=16,Ae=255,Le=0,Ne={};function Ie(e){ge(e!==1/0,"Cannot perform this action with an infinite size.")}function Fe(e){return null===e||void 0===e?Xe():Be(e)&&!c(e)?e:Xe().withMutations(function(t){var n=r(e);Ie(n.size),n.forEach(function(e,n){return t.set(n,e)})})}function Be(e){return!(!e||!e[Ke])}t(Fe,be),Fe.prototype.toString=function(){return this.__toString("Map {","}")},Fe.prototype.get=function(e,t){return this._root?this._root.get(0,void 0,e,t):t},Fe.prototype.set=function(e,t){return Ze(this,e,t)},Fe.prototype.setIn=function(e,t){return this.updateIn(e,v,function(){return t})},Fe.prototype.remove=function(e){return Ze(this,e,v)},Fe.prototype.deleteIn=function(e){return this.updateIn(e,function(){return v})},Fe.prototype.update=function(e,t,n){return 1===arguments.length?e(this):this.updateIn([e],t,n)},Fe.prototype.updateIn=function(e,t,n){n||(n=t,t=void 0);var r=function e(t,n,r,o){var i=t===v,a=n.next();if(a.done){var u=i?r:t,s=o(u);return s===u?t:s}ge(i||t&&t.set,"invalid keyPath");var l=a.value,c=i?v:t.get(l,v),f=e(c,n,r,o);return f===c?t:f===v?t.remove(l):(i?Xe():t).set(l,f)}(this,nn(e),t,n);return r===v?void 0:r},Fe.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):Xe()},Fe.prototype.merge=function(){return rt(this,void 0,arguments)},Fe.prototype.mergeWith=function(t){var n=e.call(arguments,1);return rt(this,t,n)},Fe.prototype.mergeIn=function(t){var n=e.call(arguments,1);return this.updateIn(t,Xe(),function(e){return"function"==typeof e.merge?e.merge.apply(e,n):n[n.length-1]})},Fe.prototype.mergeDeep=function(){return rt(this,ot,arguments)},Fe.prototype.mergeDeepWith=function(t){var n=e.call(arguments,1);return rt(this,it(t),n)},Fe.prototype.mergeDeepIn=function(t){var n=e.call(arguments,1);return this.updateIn(t,Xe(),function(e){return"function"==typeof e.mergeDeep?e.mergeDeep.apply(e,n):n[n.length-1]})},Fe.prototype.sort=function(e){return Mt(Wt(this,e))},Fe.prototype.sortBy=function(e,t){return Mt(Wt(this,t,e))},Fe.prototype.withMutations=function(e){var t=this.asMutable();return e(t),t.wasAltered()?t.__ensureOwner(this.__ownerID):this},Fe.prototype.asMutable=function(){return this.__ownerID?this:this.__ensureOwner(new E)},Fe.prototype.asImmutable=function(){return this.__ensureOwner()},Fe.prototype.wasAltered=function(){return this.__altered},Fe.prototype.__iterator=function(e,t){return new $e(this,e,t)},Fe.prototype.__iterate=function(e,t){var n=this,r=0;return this._root&&this._root.iterate(function(t){return r++,e(t[1],t[0],n)},t),r},Fe.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?Ye(this.size,this._root,e,this.__hash):(this.__ownerID=e,this.__altered=!1,this)},Fe.isMap=Be;var Ue,Ke="@@__IMMUTABLE_MAP__@@",qe=Fe.prototype;function He(e,t){this.ownerID=e,this.entries=t}function ze(e,t,n){this.ownerID=e,this.bitmap=t,this.nodes=n}function We(e,t,n){this.ownerID=e,this.count=t,this.nodes=n}function Ve(e,t,n){this.ownerID=e,this.keyHash=t,this.entries=n}function Je(e,t,n){this.ownerID=e,this.keyHash=t,this.entry=n}function $e(e,t,n){this._type=t,this._reverse=n,this._stack=e._root&&Qe(e._root)}function Ge(e,t){return B(e,t[0],t[1])}function Qe(e,t){return{node:e,index:0,__prev:t}}function Ye(e,t,n,r){var o=Object.create(qe);return o.size=e,o._root=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Xe(){return Ue||(Ue=Ye(0))}function Ze(e,t,n){var r,o;if(e._root){var i=w(_),a=w(b);if(r=et(e._root,e.__ownerID,0,void 0,t,n,i,a),!a.value)return e;o=e.size+(i.value?n===v?-1:1:0)}else{if(n===v)return e;o=1,r=new He(e.__ownerID,[[t,n]])}return e.__ownerID?(e.size=o,e._root=r,e.__hash=void 0,e.__altered=!0,e):r?Ye(o,r):Xe()}function et(e,t,n,r,o,i,a,u){return e?e.update(t,n,r,o,i,a,u):i===v?e:(C(u),C(a),new Je(t,r,[o,i]))}function tt(e){return e.constructor===Je||e.constructor===Ve}function nt(e,t,n,r,o){if(e.keyHash===r)return new Ve(t,r,[e.entry,o]);var i,a=(0===n?e.keyHash:e.keyHash>>>n)&g,u=(0===n?r:r>>>n)&g,s=a===u?[nt(e,t,n+y,r,o)]:(i=new Je(t,r,o),a<u?[e,i]:[i,e]);return new ze(t,1<<a|1<<u,s)}function rt(e,t,n){for(var o=[],i=0;i<n.length;i++){var u=n[i],s=r(u);a(u)||(s=s.map(function(e){return fe(e)})),o.push(s)}return at(e,t,o)}function ot(e,t,n){return e&&e.mergeDeep&&a(t)?e.mergeDeep(t):he(e,t)?e:t}function it(e){return function(t,n,r){if(t&&t.mergeDeepWith&&a(n))return t.mergeDeepWith(e,n);var o=e(t,n,r);return he(t,o)?t:o}}function at(e,t,n){return 0===(n=n.filter(function(e){return 0!==e.size})).length?e:0!==e.size||e.__ownerID||1!==n.length?e.withMutations(function(e){for(var r=t?function(n,r){e.update(r,v,function(e){return e===v?n:t(e,n,r)})}:function(t,n){e.set(n,t)},o=0;o<n.length;o++)n[o].forEach(r)}):e.constructor(n[0])}function ut(e){return e=(e=(858993459&(e-=e>>1&1431655765))+(e>>2&858993459))+(e>>4)&252645135,e+=e>>8,127&(e+=e>>16)}function st(e,t,n,r){var o=r?e:S(e);return o[t]=n,o}qe[Ke]=!0,qe.delete=qe.remove,qe.removeIn=qe.deleteIn,He.prototype.get=function(e,t,n,r){for(var o=this.entries,i=0,a=o.length;i<a;i++)if(he(n,o[i][0]))return o[i][1];return r},He.prototype.update=function(e,t,n,r,o,i,a){for(var u=o===v,s=this.entries,l=0,c=s.length;l<c&&!he(r,s[l][0]);l++);var f=l<c;if(f?s[l][1]===o:u)return this;if(C(a),(u||!f)&&C(i),!u||1!==s.length){if(!f&&!u&&s.length>=lt)return function(e,t,n,r){e||(e=new E);for(var o=new Je(e,ke(n),[n,r]),i=0;i<t.length;i++){var a=t[i];o=o.update(e,0,void 0,a[0],a[1])}return o}(e,s,r,o);var p=e&&e===this.ownerID,d=p?s:S(s);return f?u?l===c-1?d.pop():d[l]=d.pop():d[l]=[r,o]:d.push([r,o]),p?(this.entries=d,this):new He(e,d)}},ze.prototype.get=function(e,t,n,r){void 0===t&&(t=ke(n));var o=1<<((0===e?t:t>>>e)&g),i=this.bitmap;return 0==(i&o)?r:this.nodes[ut(i&o-1)].get(e+y,t,n,r)},ze.prototype.update=function(e,t,n,r,o,i,a){void 0===n&&(n=ke(r));var u=(0===t?n:n>>>t)&g,s=1<<u,l=this.bitmap,c=0!=(l&s);if(!c&&o===v)return this;var f=ut(l&s-1),p=this.nodes,d=c?p[f]:void 0,h=et(d,e,t+y,n,r,o,i,a);if(h===d)return this;if(!c&&h&&p.length>=ct)return function(e,t,n,r,o){for(var i=0,a=new Array(m),u=0;0!==n;u++,n>>>=1)a[u]=1&n?t[i++]:void 0;return a[r]=o,new We(e,i+1,a)}(e,p,l,u,h);if(c&&!h&&2===p.length&&tt(p[1^f]))return p[1^f];if(c&&h&&1===p.length&&tt(h))return h;var _=e&&e===this.ownerID,b=c?h?l:l^s:l|s,w=c?h?st(p,f,h,_):function(e,t,n){var r=e.length-1;if(n&&t===r)return e.pop(),e;for(var o=new Array(r),i=0,a=0;a<r;a++)a===t&&(i=1),o[a]=e[a+i];return o}(p,f,_):function(e,t,n,r){var o=e.length+1;if(r&&t+1===o)return e[t]=n,e;for(var i=new Array(o),a=0,u=0;u<o;u++)u===t?(i[u]=n,a=-1):i[u]=e[u+a];return i}(p,f,h,_);return _?(this.bitmap=b,this.nodes=w,this):new ze(e,b,w)},We.prototype.get=function(e,t,n,r){void 0===t&&(t=ke(n));var o=(0===e?t:t>>>e)&g,i=this.nodes[o];return i?i.get(e+y,t,n,r):r},We.prototype.update=function(e,t,n,r,o,i,a){void 0===n&&(n=ke(r));var u=(0===t?n:n>>>t)&g,s=o===v,l=this.nodes,c=l[u];if(s&&!c)return this;var f=et(c,e,t+y,n,r,o,i,a);if(f===c)return this;var p=this.count;if(c){if(!f&&--p<ft)return function(e,t,n,r){for(var o=0,i=0,a=new Array(n),u=0,s=1,l=t.length;u<l;u++,s<<=1){var c=t[u];void 0!==c&&u!==r&&(o|=s,a[i++]=c)}return new ze(e,o,a)}(e,l,p,u)}else p++;var d=e&&e===this.ownerID,h=st(l,u,f,d);return d?(this.count=p,this.nodes=h,this):new We(e,p,h)},Ve.prototype.get=function(e,t,n,r){for(var o=this.entries,i=0,a=o.length;i<a;i++)if(he(n,o[i][0]))return o[i][1];return r},Ve.prototype.update=function(e,t,n,r,o,i,a){void 0===n&&(n=ke(r));var u=o===v;if(n!==this.keyHash)return u?this:(C(a),C(i),nt(this,e,t,n,[r,o]));for(var s=this.entries,l=0,c=s.length;l<c&&!he(r,s[l][0]);l++);var f=l<c;if(f?s[l][1]===o:u)return this;if(C(a),(u||!f)&&C(i),u&&2===c)return new Je(e,this.keyHash,s[1^l]);var p=e&&e===this.ownerID,d=p?s:S(s);return f?u?l===c-1?d.pop():d[l]=d.pop():d[l]=[r,o]:d.push([r,o]),p?(this.entries=d,this):new Ve(e,this.keyHash,d)},Je.prototype.get=function(e,t,n,r){return he(n,this.entry[0])?this.entry[1]:r},Je.prototype.update=function(e,t,n,r,o,i,a){var u=o===v,s=he(r,this.entry[0]);return(s?o===this.entry[1]:u)?this:(C(a),u?void C(i):s?e&&e===this.ownerID?(this.entry[1]=o,this):new Je(e,this.keyHash,[r,o]):(C(i),nt(this,e,t,ke(r),[r,o])))},He.prototype.iterate=Ve.prototype.iterate=function(e,t){for(var n=this.entries,r=0,o=n.length-1;r<=o;r++)if(!1===e(n[t?o-r:r]))return!1},ze.prototype.iterate=We.prototype.iterate=function(e,t){for(var n=this.nodes,r=0,o=n.length-1;r<=o;r++){var i=n[t?o-r:r];if(i&&!1===i.iterate(e,t))return!1}},Je.prototype.iterate=function(e,t){return e(this.entry)},t($e,F),$e.prototype.next=function(){for(var e=this._type,t=this._stack;t;){var n,r=t.node,o=t.index++;if(r.entry){if(0===o)return Ge(e,r.entry)}else if(r.entries){if(n=r.entries.length-1,o<=n)return Ge(e,r.entries[this._reverse?n-o:o])}else if(n=r.nodes.length-1,o<=n){var i=r.nodes[this._reverse?n-o:o];if(i){if(i.entry)return Ge(e,i.entry);t=this._stack=Qe(i,t)}continue}t=this._stack=this._stack.__prev}return{value:void 0,done:!0}};var lt=m/4,ct=m/2,ft=m/4;function pt(e){var t=Ct();if(null===e||void 0===e)return t;if(dt(e))return e;var n=o(e),r=n.size;return 0===r?t:(Ie(r),r>0&&r<m?wt(0,r,y,null,new mt(n.toArray())):t.withMutations(function(e){e.setSize(r),n.forEach(function(t,n){return e.set(n,t)})}))}function dt(e){return!(!e||!e[ht])}t(pt,we),pt.of=function(){return this(arguments)},pt.prototype.toString=function(){return this.__toString("List [","]")},pt.prototype.get=function(e,t){if((e=x(this,e))>=0&&e<this.size){var n=kt(this,e+=this._origin);return n&&n.array[e&g]}return t},pt.prototype.set=function(e,t){return function(e,t,n){if((t=x(e,t))!=t)return e;if(t>=e.size||t<0)return e.withMutations(function(e){t<0?xt(e,t).set(0,n):xt(e,0,t+1).set(t,n)});t+=e._origin;var r=e._tail,o=e._root,i=w(b);return t>=Tt(e._capacity)?r=Et(r,e.__ownerID,0,t,n,i):o=Et(o,e.__ownerID,e._level,t,n,i),i.value?e.__ownerID?(e._root=o,e._tail=r,e.__hash=void 0,e.__altered=!0,e):wt(e._origin,e._capacity,e._level,o,r):e}(this,e,t)},pt.prototype.remove=function(e){return this.has(e)?0===e?this.shift():e===this.size-1?this.pop():this.splice(e,1):this},pt.prototype.insert=function(e,t){return this.splice(e,0,t)},pt.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=y,this._root=this._tail=null,this.__hash=void 0,this.__altered=!0,this):Ct()},pt.prototype.push=function(){var e=arguments,t=this.size;return this.withMutations(function(n){xt(n,0,t+e.length);for(var r=0;r<e.length;r++)n.set(t+r,e[r])})},pt.prototype.pop=function(){return xt(this,0,-1)},pt.prototype.unshift=function(){var e=arguments;return this.withMutations(function(t){xt(t,-e.length);for(var n=0;n<e.length;n++)t.set(n,e[n])})},pt.prototype.shift=function(){return xt(this,1)},pt.prototype.merge=function(){return Ot(this,void 0,arguments)},pt.prototype.mergeWith=function(t){var n=e.call(arguments,1);return Ot(this,t,n)},pt.prototype.mergeDeep=function(){return Ot(this,ot,arguments)},pt.prototype.mergeDeepWith=function(t){var n=e.call(arguments,1);return Ot(this,it(t),n)},pt.prototype.setSize=function(e){return xt(this,0,e)},pt.prototype.slice=function(e,t){var n=this.size;return T(e,t,n)?this:xt(this,M(e,n),R(t,n))},pt.prototype.__iterator=function(e,t){var n=0,r=bt(this,t);return new F(function(){var t=r();return t===_t?{value:void 0,done:!0}:B(e,n++,t)})},pt.prototype.__iterate=function(e,t){for(var n,r=0,o=bt(this,t);(n=o())!==_t&&!1!==e(n,r++,this););return r},pt.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?wt(this._origin,this._capacity,this._level,this._root,this._tail,e,this.__hash):(this.__ownerID=e,this)},pt.isList=dt;var ht="@@__IMMUTABLE_LIST__@@",yt=pt.prototype;function mt(e,t){this.array=e,this.ownerID=t}yt[ht]=!0,yt.delete=yt.remove,yt.setIn=qe.setIn,yt.deleteIn=yt.removeIn=qe.removeIn,yt.update=qe.update,yt.updateIn=qe.updateIn,yt.mergeIn=qe.mergeIn,yt.mergeDeepIn=qe.mergeDeepIn,yt.withMutations=qe.withMutations,yt.asMutable=qe.asMutable,yt.asImmutable=qe.asImmutable,yt.wasAltered=qe.wasAltered,mt.prototype.removeBefore=function(e,t,n){if(n===t?1<<t:0===this.array.length)return this;var r=n>>>t&g;if(r>=this.array.length)return new mt([],e);var o,i=0===r;if(t>0){var a=this.array[r];if((o=a&&a.removeBefore(e,t-y,n))===a&&i)return this}if(i&&!o)return this;var u=St(this,e);if(!i)for(var s=0;s<r;s++)u.array[s]=void 0;return o&&(u.array[r]=o),u},mt.prototype.removeAfter=function(e,t,n){if(n===(t?1<<t:0)||0===this.array.length)return this;var r,o=n-1>>>t&g;if(o>=this.array.length)return this;if(t>0){var i=this.array[o];if((r=i&&i.removeAfter(e,t-y,n))===i&&o===this.array.length-1)return this}var a=St(this,e);return a.array.splice(o+1),r&&(a.array[o]=r),a};var gt,vt,_t={};function bt(e,t){var n=e._origin,r=e._capacity,o=Tt(r),i=e._tail;return a(e._root,e._level,0);function a(e,u,s){return 0===u?function(e,a){var u=a===o?i&&i.array:e&&e.array,s=a>n?0:n-a,l=r-a;return l>m&&(l=m),function(){if(s===l)return _t;var e=t?--l:s++;return u&&u[e]}}(e,s):function(e,o,i){var u,s=e&&e.array,l=i>n?0:n-i>>o,c=1+(r-i>>o);return c>m&&(c=m),function(){for(;;){if(u){var e=u();if(e!==_t)return e;u=null}if(l===c)return _t;var n=t?--c:l++;u=a(s&&s[n],o-y,i+(n<<o))}}}(e,u,s)}}function wt(e,t,n,r,o,i,a){var u=Object.create(yt);return u.size=t-e,u._origin=e,u._capacity=t,u._level=n,u._root=r,u._tail=o,u.__ownerID=i,u.__hash=a,u.__altered=!1,u}function Ct(){return gt||(gt=wt(0,0,y))}function Et(e,t,n,r,o,i){var a,u=r>>>n&g,s=e&&u<e.array.length;if(!s&&void 0===o)return e;if(n>0){var l=e&&e.array[u],c=Et(l,t,n-y,r,o,i);return c===l?e:((a=St(e,t)).array[u]=c,a)}return s&&e.array[u]===o?e:(C(i),a=St(e,t),void 0===o&&u===a.array.length-1?a.array.pop():a.array[u]=o,a)}function St(e,t){return t&&e&&t===e.ownerID?e:new mt(e?e.array.slice():[],t)}function kt(e,t){if(t>=Tt(e._capacity))return e._tail;if(t<1<<e._level+y){for(var n=e._root,r=e._level;n&&r>0;)n=n.array[t>>>r&g],r-=y;return n}}function xt(e,t,n){void 0!==t&&(t|=0),void 0!==n&&(n|=0);var r=e.__ownerID||new E,o=e._origin,i=e._capacity,a=o+t,u=void 0===n?i:n<0?i+n:o+n;if(a===o&&u===i)return e;if(a>=u)return e.clear();for(var s=e._level,l=e._root,c=0;a+c<0;)l=new mt(l&&l.array.length?[void 0,l]:[],r),c+=1<<(s+=y);c&&(a+=c,o+=c,u+=c,i+=c);for(var f=Tt(i),p=Tt(u);p>=1<<s+y;)l=new mt(l&&l.array.length?[l]:[],r),s+=y;var d=e._tail,h=p<f?kt(e,u-1):p>f?new mt([],r):d;if(d&&p>f&&a<i&&d.array.length){for(var m=l=St(l,r),v=s;v>y;v-=y){var _=f>>>v&g;m=m.array[_]=St(m.array[_],r)}m.array[f>>>y&g]=d}if(u<i&&(h=h&&h.removeAfter(r,0,u)),a>=p)a-=p,u-=p,s=y,l=null,h=h&&h.removeBefore(r,0,a);else if(a>o||p<f){for(c=0;l;){var b=a>>>s&g;if(b!==p>>>s&g)break;b&&(c+=(1<<s)*b),s-=y,l=l.array[b]}l&&a>o&&(l=l.removeBefore(r,s,a-c)),l&&p<f&&(l=l.removeAfter(r,s,p-c)),c&&(a-=c,u-=c)}return e.__ownerID?(e.size=u-a,e._origin=a,e._capacity=u,e._level=s,e._root=l,e._tail=h,e.__hash=void 0,e.__altered=!0,e):wt(a,u,s,l,h)}function Ot(e,t,n){for(var r=[],i=0,u=0;u<n.length;u++){var s=n[u],l=o(s);l.size>i&&(i=l.size),a(s)||(l=l.map(function(e){return fe(e)})),r.push(l)}return i>e.size&&(e=e.setSize(i)),at(e,t,r)}function Tt(e){return e<m?0:e-1>>>y<<y}function Mt(e){return null===e||void 0===e?jt():Rt(e)?e:jt().withMutations(function(t){var n=r(e);Ie(n.size),n.forEach(function(e,n){return t.set(n,e)})})}function Rt(e){return Be(e)&&c(e)}function Dt(e,t,n,r){var o=Object.create(Mt.prototype);return o.size=e?e.size:0,o._map=e,o._list=t,o.__ownerID=n,o.__hash=r,o}function jt(){return vt||(vt=Dt(Xe(),Ct()))}function Pt(e,t,n){var r,o,i=e._map,a=e._list,u=i.get(t),s=void 0!==u;if(n===v){if(!s)return e;a.size>=m&&a.size>=2*i.size?(o=a.filter(function(e,t){return void 0!==e&&u!==t}),r=o.toKeyedSeq().map(function(e){return e[0]}).flip().toMap(),e.__ownerID&&(r.__ownerID=o.__ownerID=e.__ownerID)):(r=i.remove(t),o=u===a.size-1?a.pop():a.set(u,void 0))}else if(s){if(n===a.get(u)[1])return e;r=i,o=a.set(u,[t,n])}else r=i.set(t,a.size),o=a.set(a.size,[t,n]);return e.__ownerID?(e.size=r.size,e._map=r,e._list=o,e.__hash=void 0,e):Dt(r,o)}function At(e,t){this._iter=e,this._useKeys=t,this.size=e.size}function Lt(e){this._iter=e,this.size=e.size}function Nt(e){this._iter=e,this.size=e.size}function It(e){this._iter=e,this.size=e.size}function Ft(e){var t=Zt(e);return t._iter=e,t.size=e.size,t.flip=function(){return e},t.reverse=function(){var t=e.reverse.apply(this);return t.flip=function(){return e.reverse()},t},t.has=function(t){return e.includes(t)},t.includes=function(t){return e.has(t)},t.cacheResult=en,t.__iterateUncached=function(t,n){var r=this;return e.__iterate(function(e,n){return!1!==t(n,e,r)},n)},t.__iteratorUncached=function(t,n){if(t===A){var r=e.__iterator(t,n);return new F(function(){var e=r.next();if(!e.done){var t=e.value[0];e.value[0]=e.value[1],e.value[1]=t}return e})}return e.__iterator(t===P?j:P,n)},t}function Bt(e,t,n){var r=Zt(e);return r.size=e.size,r.has=function(t){return e.has(t)},r.get=function(r,o){var i=e.get(r,v);return i===v?o:t.call(n,i,r,e)},r.__iterateUncached=function(r,o){var i=this;return e.__iterate(function(e,o,a){return!1!==r(t.call(n,e,o,a),o,i)},o)},r.__iteratorUncached=function(r,o){var i=e.__iterator(A,o);return new F(function(){var o=i.next();if(o.done)return o;var a=o.value,u=a[0];return B(r,u,t.call(n,a[1],u,e),o)})},r}function Ut(e,t){var n=Zt(e);return n._iter=e,n.size=e.size,n.reverse=function(){return e},e.flip&&(n.flip=function(){var t=Ft(e);return t.reverse=function(){return e.flip()},t}),n.get=function(n,r){return e.get(t?n:-1-n,r)},n.has=function(n){return e.has(t?n:-1-n)},n.includes=function(t){return e.includes(t)},n.cacheResult=en,n.__iterate=function(t,n){var r=this;return e.__iterate(function(e,n){return t(e,n,r)},!n)},n.__iterator=function(t,n){return e.__iterator(t,!n)},n}function Kt(e,t,n,r){var o=Zt(e);return r&&(o.has=function(r){var o=e.get(r,v);return o!==v&&!!t.call(n,o,r,e)},o.get=function(r,o){var i=e.get(r,v);return i!==v&&t.call(n,i,r,e)?i:o}),o.__iterateUncached=function(o,i){var a=this,u=0;return e.__iterate(function(e,i,s){if(t.call(n,e,i,s))return u++,o(e,r?i:u-1,a)},i),u},o.__iteratorUncached=function(o,i){var a=e.__iterator(A,i),u=0;return new F(function(){for(;;){var i=a.next();if(i.done)return i;var s=i.value,l=s[0],c=s[1];if(t.call(n,c,l,e))return B(o,r?l:u++,c,i)}})},o}function qt(e,t,n,r){var o=e.size;if(void 0!==t&&(t|=0),void 0!==n&&(n|=0),T(t,n,o))return e;var i=M(t,o),a=R(n,o);if(i!=i||a!=a)return qt(e.toSeq().cacheResult(),t,n,r);var u,s=a-i;s==s&&(u=s<0?0:s);var l=Zt(e);return l.size=0===u?u:e.size&&u||void 0,!r&&oe(e)&&u>=0&&(l.get=function(t,n){return(t=x(this,t))>=0&&t<u?e.get(t+i,n):n}),l.__iterateUncached=function(t,n){var o=this;if(0===u)return 0;if(n)return this.cacheResult().__iterate(t,n);var a=0,s=!0,l=0;return e.__iterate(function(e,n){if(!s||!(s=a++<i))return l++,!1!==t(e,r?n:l-1,o)&&l!==u}),l},l.__iteratorUncached=function(t,n){if(0!==u&&n)return this.cacheResult().__iterator(t,n);var o=0!==u&&e.__iterator(t,n),a=0,s=0;return new F(function(){for(;a++<i;)o.next();if(++s>u)return{value:void 0,done:!0};var e=o.next();return r||t===P?e:B(t,s-1,t===j?void 0:e.value[1],e)})},l}function Ht(e,t,n,r){var o=Zt(e);return o.__iterateUncached=function(o,i){var a=this;if(i)return this.cacheResult().__iterate(o,i);var u=!0,s=0;return e.__iterate(function(e,i,l){if(!u||!(u=t.call(n,e,i,l)))return s++,o(e,r?i:s-1,a)}),s},o.__iteratorUncached=function(o,i){var a=this;if(i)return this.cacheResult().__iterator(o,i);var u=e.__iterator(A,i),s=!0,l=0;return new F(function(){var e,i,c;do{if((e=u.next()).done)return r||o===P?e:B(o,l++,o===j?void 0:e.value[1],e);var f=e.value;i=f[0],c=f[1],s&&(s=t.call(n,c,i,a))}while(s);return o===A?e:B(o,i,c,e)})},o}function zt(e,t,n){var r=Zt(e);return r.__iterateUncached=function(r,o){var i=0,u=!1;return function e(s,l){var c=this;s.__iterate(function(o,s){return(!t||l<t)&&a(o)?e(o,l+1):!1===r(o,n?s:i++,c)&&(u=!0),!u},o)}(e,0),i},r.__iteratorUncached=function(r,o){var i=e.__iterator(r,o),u=[],s=0;return new F(function(){for(;i;){var e=i.next();if(!1===e.done){var l=e.value;if(r===A&&(l=l[1]),t&&!(u.length<t)||!a(l))return n?e:B(r,s++,l,e);u.push(i),i=l.__iterator(r,o)}else i=u.pop()}return{value:void 0,done:!0}})},r}function Wt(e,t,n){t||(t=tn);var r=u(e),o=0,i=e.toSeq().map(function(t,r){return[r,t,o++,n?n(t,r,e):t]}).toArray();return i.sort(function(e,n){return t(e[3],n[3])||e[2]-n[2]}).forEach(r?function(e,t){i[t].length=2}:function(e,t){i[t]=e[1]}),r?J(i):s(e)?$(i):G(i)}function Vt(e,t,n){if(t||(t=tn),n){var r=e.toSeq().map(function(t,r){return[t,n(t,r,e)]}).reduce(function(e,n){return Jt(t,e[1],n[1])?n:e});return r&&r[0]}return e.reduce(function(e,n){return Jt(t,e,n)?n:e})}function Jt(e,t,n){var r=e(n,t);return 0===r&&n!==t&&(void 0===n||null===n||n!=n)||r>0}function $t(e,t,r){var o=Zt(e);return o.size=new ee(r).map(function(e){return e.size}).min(),o.__iterate=function(e,t){for(var n,r=this.__iterator(P,t),o=0;!(n=r.next()).done&&!1!==e(n.value,o++,this););return o},o.__iteratorUncached=function(e,o){var i=r.map(function(e){return e=n(e),H(o?e.reverse():e)}),a=0,u=!1;return new F(function(){var n;return u||(n=i.map(function(e){return e.next()}),u=n.some(function(e){return e.done})),u?{value:void 0,done:!0}:B(e,a++,t.apply(null,n.map(function(e){return e.value})))})},o}function Gt(e,t){return oe(e)?t:e.constructor(t)}function Qt(e){if(e!==Object(e))throw new TypeError("Expected [K, V] tuple: "+e)}function Yt(e){return Ie(e.size),k(e)}function Xt(e){return u(e)?r:s(e)?o:i}function Zt(e){return Object.create((u(e)?J:s(e)?$:G).prototype)}function en(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):V.prototype.cacheResult.call(this)}function tn(e,t){return e>t?1:e<t?-1:0}function nn(e){var t=H(e);if(!t){if(!W(e))throw new TypeError("Expected iterable or array-like: "+e);t=H(n(e))}return t}function rn(e,t){var n,r=function(i){if(i instanceof r)return i;if(!(this instanceof r))return new r(i);if(!n){n=!0;var a=Object.keys(e);!function(e,t){try{t.forEach(function(e,t){Object.defineProperty(e,t,{get:function(){return this.get(t)},set:function(e){ge(this.__ownerID,"Cannot set on an immutable record."),this.set(t,e)}})}.bind(void 0,e))}catch(e){}}(o,a),o.size=a.length,o._name=t,o._keys=a,o._defaultValues=e}this._map=Fe(i)},o=r.prototype=Object.create(on);return o.constructor=r,r}t(Mt,Fe),Mt.of=function(){return this(arguments)},Mt.prototype.toString=function(){return this.__toString("OrderedMap {","}")},Mt.prototype.get=function(e,t){var n=this._map.get(e);return void 0!==n?this._list.get(n)[1]:t},Mt.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this):jt()},Mt.prototype.set=function(e,t){return Pt(this,e,t)},Mt.prototype.remove=function(e){return Pt(this,e,v)},Mt.prototype.wasAltered=function(){return this._map.wasAltered()||this._list.wasAltered()},Mt.prototype.__iterate=function(e,t){var n=this;return this._list.__iterate(function(t){return t&&e(t[1],t[0],n)},t)},Mt.prototype.__iterator=function(e,t){return this._list.fromEntrySeq().__iterator(e,t)},Mt.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e),n=this._list.__ensureOwner(e);return e?Dt(t,n,e,this.__hash):(this.__ownerID=e,this._map=t,this._list=n,this)},Mt.isOrderedMap=Rt,Mt.prototype[h]=!0,Mt.prototype.delete=Mt.prototype.remove,t(At,J),At.prototype.get=function(e,t){return this._iter.get(e,t)},At.prototype.has=function(e){return this._iter.has(e)},At.prototype.valueSeq=function(){return this._iter.valueSeq()},At.prototype.reverse=function(){var e=this,t=Ut(this,!0);return this._useKeys||(t.valueSeq=function(){return e._iter.toSeq().reverse()}),t},At.prototype.map=function(e,t){var n=this,r=Bt(this,e,t);return this._useKeys||(r.valueSeq=function(){return n._iter.toSeq().map(e,t)}),r},At.prototype.__iterate=function(e,t){var n,r=this;return this._iter.__iterate(this._useKeys?function(t,n){return e(t,n,r)}:(n=t?Yt(this):0,function(o){return e(o,t?--n:n++,r)}),t)},At.prototype.__iterator=function(e,t){if(this._useKeys)return this._iter.__iterator(e,t);var n=this._iter.__iterator(P,t),r=t?Yt(this):0;return new F(function(){var o=n.next();return o.done?o:B(e,t?--r:r++,o.value,o)})},At.prototype[h]=!0,t(Lt,$),Lt.prototype.includes=function(e){return this._iter.includes(e)},Lt.prototype.__iterate=function(e,t){var n=this,r=0;return this._iter.__iterate(function(t){return e(t,r++,n)},t)},Lt.prototype.__iterator=function(e,t){var n=this._iter.__iterator(P,t),r=0;return new F(function(){var t=n.next();return t.done?t:B(e,r++,t.value,t)})},t(Nt,G),Nt.prototype.has=function(e){return this._iter.includes(e)},Nt.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate(function(t){return e(t,t,n)},t)},Nt.prototype.__iterator=function(e,t){var n=this._iter.__iterator(P,t);return new F(function(){var t=n.next();return t.done?t:B(e,t.value,t.value,t)})},t(It,J),It.prototype.entrySeq=function(){return this._iter.toSeq()},It.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate(function(t){if(t){Qt(t);var r=a(t);return e(r?t.get(1):t[1],r?t.get(0):t[0],n)}},t)},It.prototype.__iterator=function(e,t){var n=this._iter.__iterator(P,t);return new F(function(){for(;;){var t=n.next();if(t.done)return t;var r=t.value;if(r){Qt(r);var o=a(r);return B(e,o?r.get(0):r[0],o?r.get(1):r[1],t)}}})},Lt.prototype.cacheResult=At.prototype.cacheResult=Nt.prototype.cacheResult=It.prototype.cacheResult=en,t(rn,be),rn.prototype.toString=function(){return this.__toString(un(this)+" {","}")},rn.prototype.has=function(e){return this._defaultValues.hasOwnProperty(e)},rn.prototype.get=function(e,t){if(!this.has(e))return t;var n=this._defaultValues[e];return this._map?this._map.get(e,n):n},rn.prototype.clear=function(){if(this.__ownerID)return this._map&&this._map.clear(),this;var e=this.constructor;return e._empty||(e._empty=an(this,Xe()))},rn.prototype.set=function(e,t){if(!this.has(e))throw new Error('Cannot set unknown key "'+e+'" on '+un(this));var n=this._map&&this._map.set(e,t);return this.__ownerID||n===this._map?this:an(this,n)},rn.prototype.remove=function(e){if(!this.has(e))return this;var t=this._map&&this._map.remove(e);return this.__ownerID||t===this._map?this:an(this,t)},rn.prototype.wasAltered=function(){return this._map.wasAltered()},rn.prototype.__iterator=function(e,t){var n=this;return r(this._defaultValues).map(function(e,t){return n.get(t)}).__iterator(e,t)},rn.prototype.__iterate=function(e,t){var n=this;return r(this._defaultValues).map(function(e,t){return n.get(t)}).__iterate(e,t)},rn.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map&&this._map.__ensureOwner(e);return e?an(this,t,e):(this.__ownerID=e,this._map=t,this)};var on=rn.prototype;function an(e,t,n){var r=Object.create(Object.getPrototypeOf(e));return r._map=t,r.__ownerID=n,r}function un(e){return e._name||e.constructor.name||"Record"}function sn(e){return null===e||void 0===e?yn():ln(e)&&!c(e)?e:yn().withMutations(function(t){var n=i(e);Ie(n.size),n.forEach(function(e){return t.add(e)})})}function ln(e){return!(!e||!e[fn])}on.delete=on.remove,on.deleteIn=on.removeIn=qe.removeIn,on.merge=qe.merge,on.mergeWith=qe.mergeWith,on.mergeIn=qe.mergeIn,on.mergeDeep=qe.mergeDeep,on.mergeDeepWith=qe.mergeDeepWith,on.mergeDeepIn=qe.mergeDeepIn,on.setIn=qe.setIn,on.update=qe.update,on.updateIn=qe.updateIn,on.withMutations=qe.withMutations,on.asMutable=qe.asMutable,on.asImmutable=qe.asImmutable,t(sn,Ce),sn.of=function(){return this(arguments)},sn.fromKeys=function(e){return this(r(e).keySeq())},sn.prototype.toString=function(){return this.__toString("Set {","}")},sn.prototype.has=function(e){return this._map.has(e)},sn.prototype.add=function(e){return dn(this,this._map.set(e,!0))},sn.prototype.remove=function(e){return dn(this,this._map.remove(e))},sn.prototype.clear=function(){return dn(this,this._map.clear())},sn.prototype.union=function(){var t=e.call(arguments,0);return 0===(t=t.filter(function(e){return 0!==e.size})).length?this:0!==this.size||this.__ownerID||1!==t.length?this.withMutations(function(e){for(var n=0;n<t.length;n++)i(t[n]).forEach(function(t){return e.add(t)})}):this.constructor(t[0])},sn.prototype.intersect=function(){var t=e.call(arguments,0);if(0===t.length)return this;t=t.map(function(e){return i(e)});var n=this;return this.withMutations(function(e){n.forEach(function(n){t.every(function(e){return e.includes(n)})||e.remove(n)})})},sn.prototype.subtract=function(){var t=e.call(arguments,0);if(0===t.length)return this;t=t.map(function(e){return i(e)});var n=this;return this.withMutations(function(e){n.forEach(function(n){t.some(function(e){return e.includes(n)})&&e.remove(n)})})},sn.prototype.merge=function(){return this.union.apply(this,arguments)},sn.prototype.mergeWith=function(t){var n=e.call(arguments,1);return this.union.apply(this,n)},sn.prototype.sort=function(e){return mn(Wt(this,e))},sn.prototype.sortBy=function(e,t){return mn(Wt(this,t,e))},sn.prototype.wasAltered=function(){return this._map.wasAltered()},sn.prototype.__iterate=function(e,t){var n=this;return this._map.__iterate(function(t,r){return e(r,r,n)},t)},sn.prototype.__iterator=function(e,t){return this._map.map(function(e,t){return t}).__iterator(e,t)},sn.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e);return e?this.__make(t,e):(this.__ownerID=e,this._map=t,this)},sn.isSet=ln;var cn,fn="@@__IMMUTABLE_SET__@@",pn=sn.prototype;function dn(e,t){return e.__ownerID?(e.size=t.size,e._map=t,e):t===e._map?e:0===t.size?e.__empty():e.__make(t)}function hn(e,t){var n=Object.create(pn);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function yn(){return cn||(cn=hn(Xe()))}function mn(e){return null===e||void 0===e?wn():gn(e)?e:wn().withMutations(function(t){var n=i(e);Ie(n.size),n.forEach(function(e){return t.add(e)})})}function gn(e){return ln(e)&&c(e)}pn[fn]=!0,pn.delete=pn.remove,pn.mergeDeep=pn.merge,pn.mergeDeepWith=pn.mergeWith,pn.withMutations=qe.withMutations,pn.asMutable=qe.asMutable,pn.asImmutable=qe.asImmutable,pn.__empty=yn,pn.__make=hn,t(mn,sn),mn.of=function(){return this(arguments)},mn.fromKeys=function(e){return this(r(e).keySeq())},mn.prototype.toString=function(){return this.__toString("OrderedSet {","}")},mn.isOrderedSet=gn;var vn,_n=mn.prototype;function bn(e,t){var n=Object.create(_n);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function wn(){return vn||(vn=bn(jt()))}function Cn(e){return null===e||void 0===e?Tn():En(e)?e:Tn().unshiftAll(e)}function En(e){return!(!e||!e[kn])}_n[h]=!0,_n.__empty=wn,_n.__make=bn,t(Cn,we),Cn.of=function(){return this(arguments)},Cn.prototype.toString=function(){return this.__toString("Stack [","]")},Cn.prototype.get=function(e,t){var n=this._head;for(e=x(this,e);n&&e--;)n=n.next;return n?n.value:t},Cn.prototype.peek=function(){return this._head&&this._head.value},Cn.prototype.push=function(){if(0===arguments.length)return this;for(var e=this.size+arguments.length,t=this._head,n=arguments.length-1;n>=0;n--)t={value:arguments[n],next:t};return this.__ownerID?(this.size=e,this._head=t,this.__hash=void 0,this.__altered=!0,this):On(e,t)},Cn.prototype.pushAll=function(e){if(0===(e=o(e)).size)return this;Ie(e.size);var t=this.size,n=this._head;return e.reverse().forEach(function(e){t++,n={value:e,next:n}}),this.__ownerID?(this.size=t,this._head=n,this.__hash=void 0,this.__altered=!0,this):On(t,n)},Cn.prototype.pop=function(){return this.slice(1)},Cn.prototype.unshift=function(){return this.push.apply(this,arguments)},Cn.prototype.unshiftAll=function(e){return this.pushAll(e)},Cn.prototype.shift=function(){return this.pop.apply(this,arguments)},Cn.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):Tn()},Cn.prototype.slice=function(e,t){if(T(e,t,this.size))return this;var n=M(e,this.size),r=R(t,this.size);if(r!==this.size)return we.prototype.slice.call(this,e,t);for(var o=this.size-n,i=this._head;n--;)i=i.next;return this.__ownerID?(this.size=o,this._head=i,this.__hash=void 0,this.__altered=!0,this):On(o,i)},Cn.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?On(this.size,this._head,e,this.__hash):(this.__ownerID=e,this.__altered=!1,this)},Cn.prototype.__iterate=function(e,t){if(t)return this.reverse().__iterate(e);for(var n=0,r=this._head;r&&!1!==e(r.value,n++,this);)r=r.next;return n},Cn.prototype.__iterator=function(e,t){if(t)return this.reverse().__iterator(e);var n=0,r=this._head;return new F(function(){if(r){var t=r.value;return r=r.next,B(e,n++,t)}return{value:void 0,done:!0}})},Cn.isStack=En;var Sn,kn="@@__IMMUTABLE_STACK__@@",xn=Cn.prototype;function On(e,t,n,r){var o=Object.create(xn);return o.size=e,o._head=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Tn(){return Sn||(Sn=On(0))}function Mn(e,t){var n=function(n){e.prototype[n]=t[n]};return Object.keys(t).forEach(n),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(t).forEach(n),e}xn[kn]=!0,xn.withMutations=qe.withMutations,xn.asMutable=qe.asMutable,xn.asImmutable=qe.asImmutable,xn.wasAltered=qe.wasAltered,n.Iterator=F,Mn(n,{toArray:function(){Ie(this.size);var e=new Array(this.size||0);return this.valueSeq().__iterate(function(t,n){e[n]=t}),e},toIndexedSeq:function(){return new Lt(this)},toJS:function(){return this.toSeq().map(function(e){return e&&"function"==typeof e.toJS?e.toJS():e}).__toJS()},toJSON:function(){return this.toSeq().map(function(e){return e&&"function"==typeof e.toJSON?e.toJSON():e}).__toJS()},toKeyedSeq:function(){return new At(this,!0)},toMap:function(){return Fe(this.toKeyedSeq())},toObject:function(){Ie(this.size);var e={};return this.__iterate(function(t,n){e[n]=t}),e},toOrderedMap:function(){return Mt(this.toKeyedSeq())},toOrderedSet:function(){return mn(u(this)?this.valueSeq():this)},toSet:function(){return sn(u(this)?this.valueSeq():this)},toSetSeq:function(){return new Nt(this)},toSeq:function(){return s(this)?this.toIndexedSeq():u(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return Cn(u(this)?this.valueSeq():this)},toList:function(){return pt(u(this)?this.valueSeq():this)},toString:function(){return"[Iterable]"},__toString:function(e,t){return 0===this.size?e+t:e+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+t},concat:function(){var t=e.call(arguments,0);return Gt(this,function(e,t){var n=u(e),o=[e].concat(t).map(function(e){return a(e)?n&&(e=r(e)):e=n?ae(e):ue(Array.isArray(e)?e:[e]),e}).filter(function(e){return 0!==e.size});if(0===o.length)return e;if(1===o.length){var i=o[0];if(i===e||n&&u(i)||s(e)&&s(i))return i}var l=new ee(o);return n?l=l.toKeyedSeq():s(e)||(l=l.toSetSeq()),(l=l.flatten(!0)).size=o.reduce(function(e,t){if(void 0!==e){var n=t.size;if(void 0!==n)return e+n}},0),l}(this,t))},includes:function(e){return this.some(function(t){return he(t,e)})},entries:function(){return this.__iterator(A)},every:function(e,t){Ie(this.size);var n=!0;return this.__iterate(function(r,o,i){if(!e.call(t,r,o,i))return n=!1,!1}),n},filter:function(e,t){return Gt(this,Kt(this,e,t,!0))},find:function(e,t,n){var r=this.findEntry(e,t);return r?r[1]:n},findEntry:function(e,t){var n;return this.__iterate(function(r,o,i){if(e.call(t,r,o,i))return n=[o,r],!1}),n},findLastEntry:function(e,t){return this.toSeq().reverse().findEntry(e,t)},forEach:function(e,t){return Ie(this.size),this.__iterate(t?e.bind(t):e)},join:function(e){Ie(this.size),e=void 0!==e?""+e:",";var t="",n=!0;return this.__iterate(function(r){n?n=!1:t+=e,t+=null!==r&&void 0!==r?r.toString():""}),t},keys:function(){return this.__iterator(j)},map:function(e,t){return Gt(this,Bt(this,e,t))},reduce:function(e,t,n){var r,o;return Ie(this.size),arguments.length<2?o=!0:r=t,this.__iterate(function(t,i,a){o?(o=!1,r=t):r=e.call(n,r,t,i,a)}),r},reduceRight:function(e,t,n){var r=this.toKeyedSeq().reverse();return r.reduce.apply(r,arguments)},reverse:function(){return Gt(this,Ut(this,!0))},slice:function(e,t){return Gt(this,qt(this,e,t,!0))},some:function(e,t){return!this.every(An(e),t)},sort:function(e){return Gt(this,Wt(this,e))},values:function(){return this.__iterator(P)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some(function(){return!0})},count:function(e,t){return k(e?this.toSeq().filter(e,t):this)},countBy:function(e,t){return function(e,t,n){var r=Fe().asMutable();return e.__iterate(function(o,i){r.update(t.call(n,o,i,e),0,function(e){return e+1})}),r.asImmutable()}(this,e,t)},equals:function(e){return ye(this,e)},entrySeq:function(){var e=this;if(e._cache)return new ee(e._cache);var t=e.toSeq().map(Pn).toIndexedSeq();return t.fromEntrySeq=function(){return e.toSeq()},t},filterNot:function(e,t){return this.filter(An(e),t)},findLast:function(e,t,n){return this.toKeyedSeq().reverse().find(e,t,n)},first:function(){return this.find(O)},flatMap:function(e,t){return Gt(this,function(e,t,n){var r=Xt(e);return e.toSeq().map(function(o,i){return r(t.call(n,o,i,e))}).flatten(!0)}(this,e,t))},flatten:function(e){return Gt(this,zt(this,e,!0))},fromEntrySeq:function(){return new It(this)},get:function(e,t){return this.find(function(t,n){return he(n,e)},void 0,t)},getIn:function(e,t){for(var n,r=this,o=nn(e);!(n=o.next()).done;){var i=n.value;if((r=r&&r.get?r.get(i,v):v)===v)return t}return r},groupBy:function(e,t){return function(e,t,n){var r=u(e),o=(c(e)?Mt():Fe()).asMutable();e.__iterate(function(i,a){o.update(t.call(n,i,a,e),function(e){return(e=e||[]).push(r?[a,i]:i),e})});var i=Xt(e);return o.map(function(t){return Gt(e,i(t))})}(this,e,t)},has:function(e){return this.get(e,v)!==v},hasIn:function(e){return this.getIn(e,v)!==v},isSubset:function(e){return e="function"==typeof e.includes?e:n(e),this.every(function(t){return e.includes(t)})},isSuperset:function(e){return(e="function"==typeof e.isSubset?e:n(e)).isSubset(this)},keySeq:function(){return this.toSeq().map(jn).toIndexedSeq()},last:function(){return this.toSeq().reverse().first()},max:function(e){return Vt(this,e)},maxBy:function(e,t){return Vt(this,t,e)},min:function(e){return Vt(this,e?Ln(e):Fn)},minBy:function(e,t){return Vt(this,t?Ln(t):Fn,e)},rest:function(){return this.slice(1)},skip:function(e){return this.slice(Math.max(0,e))},skipLast:function(e){return Gt(this,this.toSeq().reverse().skip(e).reverse())},skipWhile:function(e,t){return Gt(this,Ht(this,e,t,!0))},skipUntil:function(e,t){return this.skipWhile(An(e),t)},sortBy:function(e,t){return Gt(this,Wt(this,t,e))},take:function(e){return this.slice(0,Math.max(0,e))},takeLast:function(e){return Gt(this,this.toSeq().reverse().take(e).reverse())},takeWhile:function(e,t){return Gt(this,function(e,t,n){var r=Zt(e);return r.__iterateUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterate(r,o);var a=0;return e.__iterate(function(e,o,u){return t.call(n,e,o,u)&&++a&&r(e,o,i)}),a},r.__iteratorUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterator(r,o);var a=e.__iterator(A,o),u=!0;return new F(function(){if(!u)return{value:void 0,done:!0};var e=a.next();if(e.done)return e;var o=e.value,s=o[0],l=o[1];return t.call(n,l,s,i)?r===A?e:B(r,s,l,e):(u=!1,{value:void 0,done:!0})})},r}(this,e,t))},takeUntil:function(e,t){return this.takeWhile(An(e),t)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=function(e){if(e.size===1/0)return 0;var t=c(e),n=u(e),r=t?1:0;return function(e,t){return t=Ee(t,3432918353),t=Ee(t<<15|t>>>-15,461845907),t=Ee(t<<13|t>>>-13,5),t=Ee((t=(t+3864292196|0)^e)^t>>>16,2246822507),t=Se((t=Ee(t^t>>>13,3266489909))^t>>>16)}(e.__iterate(n?t?function(e,t){r=31*r+Bn(ke(e),ke(t))|0}:function(e,t){r=r+Bn(ke(e),ke(t))|0}:t?function(e){r=31*r+ke(e)|0}:function(e){r=r+ke(e)|0}),r)}(this))}});var Rn=n.prototype;Rn[f]=!0,Rn[I]=Rn.values,Rn.__toJS=Rn.toArray,Rn.__toStringMapper=Nn,Rn.inspect=Rn.toSource=function(){return this.toString()},Rn.chain=Rn.flatMap,Rn.contains=Rn.includes,function(){try{Object.defineProperty(Rn,"length",{get:function(){if(!n.noLengthWarning){var e;try{throw new Error}catch(t){e=t.stack}if(-1===e.indexOf("_wrapObject"))return console&&console.warn&&console.warn("iterable.length has been deprecated, use iterable.size or iterable.count(). This warning will become a silent error in a future version. "+e),this.size}}})}catch(e){}}(),Mn(r,{flip:function(){return Gt(this,Ft(this))},findKey:function(e,t){var n=this.findEntry(e,t);return n&&n[0]},findLastKey:function(e,t){return this.toSeq().reverse().findKey(e,t)},keyOf:function(e){return this.findKey(function(t){return he(t,e)})},lastKeyOf:function(e){return this.findLastKey(function(t){return he(t,e)})},mapEntries:function(e,t){var n=this,r=0;return Gt(this,this.toSeq().map(function(o,i){return e.call(t,[i,o],r++,n)}).fromEntrySeq())},mapKeys:function(e,t){var n=this;return Gt(this,this.toSeq().flip().map(function(r,o){return e.call(t,r,o,n)}).flip())}});var Dn=r.prototype;function jn(e,t){return t}function Pn(e,t){return[t,e]}function An(e){return function(){return!e.apply(this,arguments)}}function Ln(e){return function(){return-e.apply(this,arguments)}}function Nn(e){return"string"==typeof e?JSON.stringify(e):e}function In(){return S(arguments)}function Fn(e,t){return e<t?1:e>t?-1:0}function Bn(e,t){return e^t+2654435769+(e<<6)+(e>>2)|0}return Dn[p]=!0,Dn[I]=Rn.entries,Dn.__toJS=Rn.toObject,Dn.__toStringMapper=function(e,t){return JSON.stringify(t)+": "+Nn(e)},Mn(o,{toKeyedSeq:function(){return new At(this,!1)},filter:function(e,t){return Gt(this,Kt(this,e,t,!1))},findIndex:function(e,t){var n=this.findEntry(e,t);return n?n[0]:-1},indexOf:function(e){var t=this.toKeyedSeq().keyOf(e);return void 0===t?-1:t},lastIndexOf:function(e){var t=this.toKeyedSeq().reverse().keyOf(e);return void 0===t?-1:t},reverse:function(){return Gt(this,Ut(this,!1))},slice:function(e,t){return Gt(this,qt(this,e,t,!1))},splice:function(e,t){var n=arguments.length;if(t=Math.max(0|t,0),0===n||2===n&&!t)return this;e=M(e,e<0?this.count():this.size);var r=this.slice(0,e);return Gt(this,1===n?r:r.concat(S(arguments,2),this.slice(e+t)))},findLastIndex:function(e,t){var n=this.toKeyedSeq().findLastKey(e,t);return void 0===n?-1:n},first:function(){return this.get(0)},flatten:function(e){return Gt(this,zt(this,e,!1))},get:function(e,t){return(e=x(this,e))<0||this.size===1/0||void 0!==this.size&&e>this.size?t:this.find(function(t,n){return n===e},void 0,t)},has:function(e){return(e=x(this,e))>=0&&(void 0!==this.size?this.size===1/0||e<this.size:-1!==this.indexOf(e))},interpose:function(e){return Gt(this,function(e,t){var n=Zt(e);return n.size=e.size&&2*e.size-1,n.__iterateUncached=function(n,r){var o=this,i=0;return e.__iterate(function(e,r){return(!i||!1!==n(t,i++,o))&&!1!==n(e,i++,o)},r),i},n.__iteratorUncached=function(n,r){var o,i=e.__iterator(P,r),a=0;return new F(function(){return(!o||a%2)&&(o=i.next()).done?o:a%2?B(n,a++,t):B(n,a++,o.value,o)})},n}(this,e))},interleave:function(){var e=[this].concat(S(arguments)),t=$t(this.toSeq(),$.of,e),n=t.flatten(!0);return t.size&&(n.size=t.size*e.length),Gt(this,n)},last:function(){return this.get(-1)},skipWhile:function(e,t){return Gt(this,Ht(this,e,t,!1))},zip:function(){return Gt(this,$t(this,In,[this].concat(S(arguments))))},zipWith:function(e){var t=S(arguments);return t[0]=this,Gt(this,$t(this,e,t))}}),o.prototype[d]=!0,o.prototype[h]=!0,Mn(i,{get:function(e,t){return this.has(e)?e:t},includes:function(e){return this.has(e)},keySeq:function(){return this.valueSeq()}}),i.prototype.has=Rn.includes,Mn(J,r.prototype),Mn($,o.prototype),Mn(G,i.prototype),Mn(be,r.prototype),Mn(we,o.prototype),Mn(Ce,i.prototype),{Iterable:n,Seq:V,Collection:_e,Map:Fe,OrderedMap:Mt,List:pt,Stack:Cn,Set:sn,OrderedSet:mn,Record:rn,Range:ve,Repeat:me,is:he,fromJS:fe}}()},function(e,t,n){"use strict";var r=n(11)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var o=n(76),i=n(49),a=n(175),u=n(5),s=n(28),l=u.OrderedSet,c=u.Record,f=u.Stack,p=c({allowUndo:!0,currentContent:null,decorator:null,directionMap:null,forceSelection:!1,inCompositionMode:!1,inlineStyleOverride:null,lastChangeType:null,nativelyRenderedContent:null,redoStack:f(),selection:null,treeMap:null,undoStack:f()}),d=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._immutable=t}return e.createEmpty=function(t){return e.createWithContent(i.createFromText(""),t)},e.createWithContent=function(t,n){var r=t.getBlockMap().first().getKey();return e.create({currentContent:t,undoStack:f(),redoStack:f(),decorator:n||null,selection:s.createEmpty(r)})},e.create=function(t){var n=t.currentContent,o=t.decorator,i=r({},t,{treeMap:y(n,o),directionMap:a.getDirectionMap(n)});return new e(new p(i))},e.set=function(t,n){return new e(t.getImmutable().withMutations(function(e){var r=e.get("decorator"),i=r;null===n.decorator?i=null:n.decorator&&(i=n.decorator);var a=n.currentContent||t.getCurrentContent();if(i!==r){var u,s=e.get("treeMap");return u=i&&r?function(e,t,n,r,i){return n.merge(t.toSeq().filter(function(t){return r.getDecorations(t,e)!==i.getDecorations(t,e)}).map(function(t){return o.generate(e,t,r)}))}(a,a.getBlockMap(),s,i,r):y(a,i),void e.merge({decorator:i,treeMap:u,nativelyRenderedContent:null})}a!==t.getCurrentContent()&&e.set("treeMap",function(e,t,n,r){var i=e.getCurrentContent().set("entityMap",n),a=i.getBlockMap();return e.getImmutable().get("treeMap").merge(t.toSeq().filter(function(e,t){return e!==a.get(t)}).map(function(e){return o.generate(i,e,r)}))}(t,a.getBlockMap(),a.getEntityMap(),i)),e.merge(n)}))},e.prototype.toJS=function(){return this.getImmutable().toJS()},e.prototype.getAllowUndo=function(){return this.getImmutable().get("allowUndo")},e.prototype.getCurrentContent=function(){return this.getImmutable().get("currentContent")},e.prototype.getUndoStack=function(){return this.getImmutable().get("undoStack")},e.prototype.getRedoStack=function(){return this.getImmutable().get("redoStack")},e.prototype.getSelection=function(){return this.getImmutable().get("selection")},e.prototype.getDecorator=function(){return this.getImmutable().get("decorator")},e.prototype.isInCompositionMode=function(){return this.getImmutable().get("inCompositionMode")},e.prototype.mustForceSelection=function(){return this.getImmutable().get("forceSelection")},e.prototype.getNativelyRenderedContent=function(){return this.getImmutable().get("nativelyRenderedContent")},e.prototype.getLastChangeType=function(){return this.getImmutable().get("lastChangeType")},e.prototype.getInlineStyleOverride=function(){return this.getImmutable().get("inlineStyleOverride")},e.setInlineStyleOverride=function(t,n){return e.set(t,{inlineStyleOverride:n})},e.prototype.getCurrentInlineStyle=function(){var e=this.getInlineStyleOverride();if(null!=e)return e;var t=this.getCurrentContent(),n=this.getSelection();return n.isCollapsed()?function(e,t){var n=t.getStartKey(),r=t.getStartOffset(),o=e.getBlockForKey(n);if(r>0)return o.getInlineStyleAt(r-1);if(o.getLength())return o.getInlineStyleAt(0);return m(e,n)}(t,n):function(e,t){var n=t.getStartKey(),r=t.getStartOffset(),o=e.getBlockForKey(n);if(r<o.getLength())return o.getInlineStyleAt(r);if(r>0)return o.getInlineStyleAt(r-1);return m(e,n)}(t,n)},e.prototype.getBlockTree=function(e){return this.getImmutable().getIn(["treeMap",e])},e.prototype.isSelectionAtStartOfContent=function(){var e=this.getCurrentContent().getBlockMap().first().getKey();return this.getSelection().hasEdgeWithin(e,0,0)},e.prototype.isSelectionAtEndOfContent=function(){var e=this.getCurrentContent().getBlockMap().last(),t=e.getLength();return this.getSelection().hasEdgeWithin(e.getKey(),t,t)},e.prototype.getDirectionMap=function(){return this.getImmutable().get("directionMap")},e.acceptSelection=function(e,t){return h(e,t,!1)},e.forceSelection=function(e,t){return t.getHasFocus()||(t=t.set("hasFocus",!0)),h(e,t,!0)},e.moveSelectionToEnd=function(t){var n=t.getCurrentContent().getLastBlock(),r=n.getKey(),o=n.getLength();return e.acceptSelection(t,new s({anchorKey:r,anchorOffset:o,focusKey:r,focusOffset:o,isBackward:!1}))},e.moveFocusToEnd=function(t){var n=e.moveSelectionToEnd(t);return e.forceSelection(n,n.getSelection())},e.push=function(t,n,r){if(t.getCurrentContent()===n)return t;var o="insert-characters"!==r,i=a.getDirectionMap(n,t.getDirectionMap());if(!t.getAllowUndo())return e.set(t,{currentContent:n,directionMap:i,lastChangeType:r,selection:n.getSelectionAfter(),forceSelection:o,inlineStyleOverride:null});var u=t.getSelection(),s=t.getCurrentContent(),l=t.getUndoStack(),c=n;u!==s.getSelectionAfter()||function(e,t){var n=e.getLastChangeType();return t!==n||"insert-characters"!==t&&"backspace-character"!==t&&"delete-character"!==t}(t,r)?(l=l.push(s),c=c.set("selectionBefore",u)):"insert-characters"!==r&&"backspace-character"!==r&&"delete-character"!==r||(c=c.set("selectionBefore",s.getSelectionBefore()));var p=t.getInlineStyleOverride();-1===["adjust-depth","change-block-type","split-block"].indexOf(r)&&(p=null);var d={currentContent:c,directionMap:i,undoStack:l,redoStack:f(),lastChangeType:r,selection:n.getSelectionAfter(),forceSelection:o,inlineStyleOverride:p};return e.set(t,d)},e.undo=function(t){if(!t.getAllowUndo())return t;var n=t.getUndoStack(),r=n.peek();if(!r)return t;var o=t.getCurrentContent(),i=a.getDirectionMap(r,t.getDirectionMap());return e.set(t,{currentContent:r,directionMap:i,undoStack:n.shift(),redoStack:t.getRedoStack().push(o),forceSelection:!0,inlineStyleOverride:null,lastChangeType:"undo",nativelyRenderedContent:null,selection:o.getSelectionBefore()})},e.redo=function(t){if(!t.getAllowUndo())return t;var n=t.getRedoStack(),r=n.peek();if(!r)return t;var o=t.getCurrentContent(),i=a.getDirectionMap(r,t.getDirectionMap());return e.set(t,{currentContent:r,directionMap:i,undoStack:t.getUndoStack().push(o),redoStack:n.shift(),forceSelection:!0,inlineStyleOverride:null,lastChangeType:"redo",nativelyRenderedContent:null,selection:r.getSelectionAfter()})},e.prototype.getImmutable=function(){return this._immutable},e}();function h(e,t,n){return d.set(e,{selection:t,forceSelection:n,nativelyRenderedContent:null,inlineStyleOverride:null})}function y(e,t){return e.getBlockMap().map(function(n){return o.generate(e,n,t)}).toOrderedMap()}function m(e,t){var n=e.getBlockMap().reverse().skipUntil(function(e,n){return n===t}).skip(1).skipUntil(function(e,t){return e.getLength()}).first();return n?n.getInlineStyleAt(n.getLength()-1):l()}e.exports=d},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(235)},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(s=new Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";var r=n(12),o=n(186),i=n(23),a=n(5),u=n(185),s=n(183),l=n(37),c=n(180),f=n(179),p=n(4),d=n(178),h=n(79),y=n(177),m=n(176),g=a.OrderedSet,v={replaceText:function(e,t,n,o,i){var a=h(e,t),u=y(a,t),s=r.create({style:o||g(),entity:i||null});return f(u,u.getSelectionAfter(),n,s)},insertText:function(e,t,n,r,o){return t.isCollapsed()||p(!1),v.replaceText(e,t,n,r,o)},moveText:function(e,t,n){var r=l(e,t),o=v.removeRange(e,t,"backward");return v.replaceWithFragment(o,n,r)},replaceWithFragment:function(e,t,n){var r=h(e,t),o=y(r,t);return c(o,o.getSelectionAfter(),n)},removeRange:function(e,t,n){var r,o,a=void 0,u=void 0;t.getIsBackward()&&(t=t.merge({anchorKey:t.getFocusKey(),anchorOffset:t.getFocusOffset(),focusKey:t.getAnchorKey(),focusOffset:t.getAnchorOffset(),isBackward:!1})),r=t.getAnchorKey(),o=t.getFocusKey(),a=e.getBlockForKey(r),u=e.getBlockForKey(o);var l=t.getStartOffset(),c=t.getEndOffset(),f=a.getEntityAt(l),p=u.getEntityAt(c-1);if(r===o&&f&&f===p){var d=s(e.getEntityMap(),a,u,t,n);return y(e,d)}var m=t;i.draft_segmented_entities_behavior&&(m=s(e.getEntityMap(),a,u,t,n));var g=h(e,m);return y(g,m)},splitBlock:function(e,t){var n=h(e,t),r=y(n,t);return m(r,r.getSelectionAfter())},applyInlineStyle:function(e,t,n){return o.add(e,t,n)},removeInlineStyle:function(e,t,n){return o.remove(e,t,n)},setBlockType:function(e,t,n){return d(e,t,function(e){return e.merge({type:n,depth:0})})},setBlockData:function(e,t,n){return d(e,t,function(e){return e.merge({data:n})})},mergeBlockData:function(e,t,n){return d(e,t,function(e){return e.merge({data:e.getData().merge(n)})})},applyEntity:function(e,t,n){var r=h(e,t);return u(r,t,n)}};e.exports=v},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),s=1;s<arguments.length;s++){for(var l in n=Object(arguments[s]))o.call(n,l)&&(u[l]=n[l]);if(r){a=r(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(u[a[c]]=n[a[c]])}}return u}},function(e,t,n){"use strict";var r=n(5),o=r.Map,i=r.OrderedSet,a=r.Record,u=i(),s={style:u,entity:null},l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getStyle=function(){return this.get("style")},t.prototype.getEntity=function(){return this.get("entity")},t.prototype.hasStyle=function(e){return this.getStyle().includes(e)},t.applyStyle=function(e,n){var r=e.set("style",e.getStyle().add(n));return t.create(r)},t.removeStyle=function(e,n){var r=e.set("style",e.getStyle().remove(n));return t.create(r)},t.applyEntity=function(e,n){var r=e.getEntity()===n?e:e.set("entity",n);return t.create(r)},t.create=function(e){if(!e)return c;var n=o({style:u,entity:null}).merge(e),r=f.get(n);if(r)return r;var i=new t(n);return f=f.set(n,i),i},t}(a(s)),c=new l,f=o([[o(s),c]]);l.EMPTY=c,e.exports=l},function(e,t,n){"use strict";var r=n(12),o=n(5),i=n(33),a=o.List,u=o.Map,s=o.OrderedSet,l=o.Record,c=o.Repeat,f=s(),p={parent:null,characterList:a(),data:u(),depth:0,key:"",text:"",type:"unstyled",children:a(),prevSibling:null,nextSibling:null},d=function(e,t){return e.getStyle()===t.getStyle()},h=function(e,t){return e.getEntity()===t.getEntity()},y=function(e){if(!e)return e;var t=e.characterList,n=e.text;return n&&!t&&(e.characterList=a(c(r.EMPTY,n.length))),e},m=function(e){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:p;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,y(n)))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getKey=function(){return this.get("key")},t.prototype.getType=function(){return this.get("type")},t.prototype.getText=function(){return this.get("text")},t.prototype.getCharacterList=function(){return this.get("characterList")},t.prototype.getLength=function(){return this.getText().length},t.prototype.getDepth=function(){return this.get("depth")},t.prototype.getData=function(){return this.get("data")},t.prototype.getInlineStyleAt=function(e){var t=this.getCharacterList().get(e);return t?t.getStyle():f},t.prototype.getEntityAt=function(e){var t=this.getCharacterList().get(e);return t?t.getEntity():null},t.prototype.getChildKeys=function(){return this.get("children")},t.prototype.getParentKey=function(){return this.get("parent")},t.prototype.getPrevSiblingKey=function(){return this.get("prevSibling")},t.prototype.getNextSiblingKey=function(){return this.get("nextSibling")},t.prototype.findStyleRanges=function(e,t){i(this.getCharacterList(),d,e,t)},t.prototype.findEntityRanges=function(e,t){i(this.getCharacterList(),h,e,t)},t}(l(p));e.exports=m},function(e,t,n){"use strict";var r=n(92),o=n(224),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function u(e){return null!==e&&"object"==typeof e}function s(e){return"[object Function]"===i.call(e)}function l(e,t){if(null!==e&&void 0!==e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:s,isStream:function(e){return u(e)&&s(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)l(arguments[r],n);return t},extend:function(e,t,n){return l(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";e.exports=function(e){if(null!=e)return e;throw new Error("Got unexpected null or undefined")}},function(e,t,n){"use strict";var r=n(165),o=n(162),i=n(161),a=n(160);function u(e,t,n,r){if(e===n)return!0;if(!n.startsWith(e))return!1;var i=n.slice(e.length);return!!t&&(i=r?r(i):i,o.contains(i,t))}function s(e){return"Windows"===r.platformName?e.replace(/^\s*NT/,""):e}var l={isBrowser:function(e){return u(r.browserName,r.browserFullVersion,e)},isBrowserArchitecture:function(e){return u(r.browserArchitecture,null,e)},isDevice:function(e){return u(r.deviceName,null,e)},isEngine:function(e){return u(r.engineName,r.engineVersion,e)},isPlatform:function(e){return u(r.platformName,r.platformFullVersion,e,s)},isPlatformArchitecture:function(e){return u(r.platformArchitecture,null,e)}};e.exports=i(l,a)},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r,o=i(n(1));i(n(7)),n(22);function i(e){return e&&e.__esModule?e:{default:e}}function a(e){return o.default.createElement("footer",null,o.default.createElement("h1",null,"The Next Step"),o.default.createElement("p",null,"Tech Jobs For Tech People"))}(r=n(2).enterModule)&&r(e);var u,s,l=a;t.default=l,u=n(2).default,s=n(2).leaveModule,u&&(u.register(a,"Footer","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Footer.js"),u.register(l,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Footer.js"),s(e))}).call(this,n(9)(e))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(7),_reactDom2=_interopRequireDefault(_reactDom),_reactRouterDom=__webpack_require__(22),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var Header=function(_React$Component){function Header(e){_classCallCheck(this,Header);var t=_possibleConstructorReturn(this,(Header.__proto__||Object.getPrototypeOf(Header)).call(this,e)),n=localStorage.getItem("responseToken");return t.state={token:n},t}return _inherits(Header,_React$Component),_createClass(Header,[{key:"render",value:function(){return _react2.default.createElement("header",null,_react2.default.createElement("div",{id:"header-inner"},_react2.default.createElement("div",{id:"header-title-container"},_react2.default.createElement("h1",null,"The Next Step")),_react2.default.createElement("nav",null,_react2.default.createElement(_reactRouterDom.NavLink,{to:"/",activeClassName:"is-active",exact:!0},"Home "),_react2.default.createElement(_reactRouterDom.NavLink,{to:"/contact",activeClassName:"is-active",exact:!0},"Contact "),this.state.token?_react2.default.createElement(_reactRouterDom.NavLink,{to:"/employer_dashboard",activeClassName:"is-active",exact:!0},"Employer Dashboard "):_react2.default.createElement(_reactRouterDom.NavLink,{to:"/my_account",activeClassName:"is-active",exact:!0},"Login/Register "))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Header}(_react2.default.Component),_default=Header,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(Header,"Header","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Header.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Header.js"),leaveModule(module))}).call(this,__webpack_require__(9)(module))},function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r={},o=Math.pow(2,24);e.exports=function(){for(var e=void 0;void 0===e||r.hasOwnProperty(e)||!isNaN(+e);)e=Math.floor(Math.random()*o).toString(32);return r[e]=!0,e}},function(e,t,n){"use strict";n.r(t);var r=n(3),o=n.n(r),i=n(1),a=n.n(i),u=n(0),s=n.n(u),l=n(100),c=n.n(l),f=n(8),p=n.n(f),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var y=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=h(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},h(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:d({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;p()(null==n||1===a.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?a.a.Children.only(e):null},t}(a.a.Component);y.propTypes={history:s.a.object.isRequired,children:s.a.node},y.contextTypes={router:s.a.object},y.childContextTypes={router:s.a.object.isRequired};var m=y,g=m;function v(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var _=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=v(this,e.call.apply(e,[this].concat(i))),r.history=c()(r.props),v(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(g,{history:this.history,children:this.props.children})},t}(a.a.Component);_.propTypes={basename:s.a.string,forceRefresh:s.a.bool,getUserConfirmation:s.a.func,keyLength:s.a.number,children:s.a.node};var b=_,w=n(99),C=n.n(w);function E(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var S=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=E(this,e.call.apply(e,[this].concat(i))),r.history=C()(r.props),E(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(g,{history:this.history,children:this.props.children})},t}(a.a.Component);S.propTypes={basename:s.a.string,getUserConfirmation:s.a.func,hashType:s.a.oneOf(["hashbang","noslash","slash"]),children:s.a.node};var k=S,x=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function O(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var T=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},M=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=O(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!T(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},O(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);p()(this.context.router,"You should not use <Link> outside a <Router>");var o=this.context.router.history.createHref("string"==typeof t?{pathname:t}:t);return a.a.createElement("a",x({},r,{onClick:this.handleClick,href:o,ref:n}))},t}(a.a.Component);M.propTypes={onClick:s.a.func,target:s.a.string,replace:s.a.bool,to:s.a.oneOfType([s.a.string,s.a.object]).isRequired,innerRef:s.a.oneOfType([s.a.string,s.a.func])},M.defaultProps={replace:!1},M.contextTypes={router:s.a.shape({history:s.a.shape({push:s.a.func.isRequired,replace:s.a.func.isRequired,createHref:s.a.func.isRequired}).isRequired}).isRequired};var R=M,D=n(98),j=n.n(D);function P(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var A=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=P(this,e.call.apply(e,[this].concat(i))),r.history=j()(r.props),P(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(m,{history:this.history,children:this.props.children})},t}(a.a.Component);A.propTypes={initialEntries:s.a.array,initialIndex:s.a.number,getUserConfirmation:s.a.func,keyLength:s.a.number,children:s.a.node};var L=A,N=n(97),I=n.n(N),F={},B=0,U=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof t&&(t={path:t});var n=t,r=n.path,o=void 0===r?"/":r,i=n.exact,a=void 0!==i&&i,u=n.strict,s=void 0!==u&&u,l=n.sensitive,c=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=F[n]||(F[n]={});if(r[e])return r[e];var o=[],i={re:I()(e,o,t),keys:o};return B<1e4&&(r[e]=i,B++),i}(o,{end:a,strict:s,sensitive:void 0!==l&&l}),f=c.re,p=c.keys,d=f.exec(e);if(!d)return null;var h=d[0],y=d.slice(1),m=e===h;return a&&!m?null:{path:o,url:"/"===o&&""===h?"/":h,isExact:m,params:p.reduce(function(e,t,n){return e[t.name]=y[n],e},{})}},K=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function q(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var H=function(e){return 0===a.a.Children.count(e)},z=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=q(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},q(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:K({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,i=e.strict,a=e.exact,u=e.sensitive;if(n)return n;p()(t,"You should not use <Route> or withRouter() outside a <Router>");var s=t.route,l=(r||s.location).pathname;return o?U(l,{path:o,strict:i,exact:a,sensitive:u}):s.match},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!H(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!H(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,i=this.context.router,u=i.history,s=i.route,l=i.staticContext,c={match:e,location:this.props.location||s.location,history:u,staticContext:l};return r?e?a.a.createElement(r,c):null:o?e?o(c):null:n?"function"==typeof n?n(c):H(n)?null:a.a.Children.only(n):null},t}(a.a.Component);z.propTypes={computedMatch:s.a.object,path:s.a.string,exact:s.a.bool,strict:s.a.bool,sensitive:s.a.bool,component:s.a.func,render:s.a.func,children:s.a.oneOfType([s.a.func,s.a.node]),location:s.a.object},z.contextTypes={router:s.a.shape({history:s.a.object.isRequired,route:s.a.object.isRequired,staticContext:s.a.object})},z.childContextTypes={router:s.a.object.isRequired};var W=z,V=W,J=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},$="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var G=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,i=e.activeClassName,u=e.className,s=e.activeStyle,l=e.style,c=e.isActive,f=e.ariaCurrent,p=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","ariaCurrent"]);return a.a.createElement(V,{path:"object"===(void 0===t?"undefined":$(t))?t.pathname:t,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(c?c(r,n):r);return a.a.createElement(R,J({to:t,className:o?[u,i].filter(function(e){return e}).join(" "):u,style:o?J({},l,s):l,"aria-current":o&&f},p))}})};G.propTypes={to:R.propTypes.to,exact:s.a.bool,strict:s.a.bool,location:s.a.object,activeClassName:s.a.string,className:s.a.string,activeStyle:s.a.object,style:s.a.object,isActive:s.a.func,ariaCurrent:s.a.oneOf(["page","step","location","true"])},G.defaultProps={activeClassName:"active",ariaCurrent:"true"};var Q=G;var Y=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(a.a.Component);Y.propTypes={when:s.a.bool,message:s.a.oneOfType([s.a.func,s.a.string]).isRequired},Y.defaultProps={when:!0},Y.contextTypes={router:s.a.shape({history:s.a.shape({block:s.a.func.isRequired}).isRequired}).isRequired};var X=Y,Z=n(55),ee=n(54),te=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ne=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=te({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Object(Z.default)(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},re=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Object(ee.default)(e.state,t.state)};"undefined"==typeof window||!window.document||window.document.createElement,"function"==typeof Symbol&&Symbol.iterator,Object.assign,Object.assign,"function"==typeof Symbol&&Symbol.iterator,Object.assign;var oe=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=ne(e.to),n=ne(this.props.to);re(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.perform=function(){var e=this.context.router.history,t=this.props,n=t.push,r=t.to;n?e.push(r):e.replace(r)},t.prototype.render=function(){return null},t}(a.a.Component);oe.propTypes={push:s.a.bool,from:s.a.string,to:s.a.oneOfType([s.a.string,s.a.object]).isRequired},oe.defaultProps={push:!1},oe.contextTypes={router:s.a.shape({history:s.a.shape({push:s.a.func.isRequired,replace:s.a.func.isRequired}).isRequired,staticContext:s.a.object}).isRequired};var ie=oe,ae=n(19),ue=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function se(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var le=function(e,t){return e?ue({},t,{pathname:Object(ae.addLeadingSlash)(e)+t.pathname}):t},ce=function(e){return"string"==typeof e?Object(ae.parsePath)(e):(n=(t=e).pathname,r=void 0===n?"/":n,o=t.search,i=void 0===o?"":o,a=t.hash,u=void 0===a?"":a,{pathname:r,search:"?"===i?"":i,hash:"#"===u?"":u});var t,n,r,o,i,a,u},fe=function(e){return"string"==typeof e?e:Object(ae.createPath)(e)},pe=function(e){return function(){p()(!1,"You cannot %s with <StaticRouter>",e)}},de=function(){},he=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=se(this,e.call.apply(e,[this].concat(i))),r.createHref=function(e){return Object(ae.addLeadingSlash)(r.props.basename+fe(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=le(n,ce(e)),o.url=fe(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=le(n,ce(e)),o.url=fe(o.location)},r.handleListen=function(){return de},r.handleBlock=function(){return de},se(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=Object(ae.addLeadingSlash)(e);return 0!==t.pathname.indexOf(n)?t:ue({},t,{pathname:t.pathname.substr(n.length)})}(t,ce(n)),push:this.handlePush,replace:this.handleReplace,go:pe("go"),goBack:pe("goBack"),goForward:pe("goForward"),listen:this.handleListen,block:this.handleBlock};return a.a.createElement(m,ue({},r,{history:o}))},t}(a.a.Component);he.propTypes={basename:s.a.string,context:s.a.object.isRequired,location:s.a.oneOfType([s.a.string,s.a.object])},he.defaultProps={basename:"",location:"/"},he.childContextTypes={router:s.a.object.isRequired};var ye=he;var me=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){o()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,o=void 0;return a.a.Children.forEach(t,function(t){if(a.a.isValidElement(t)){var i=t.props,u=i.path,s=i.exact,l=i.strict,c=i.sensitive,f=i.from,p=u||f;null==r&&(o=t,r=p?U(n.pathname,{path:p,exact:s,strict:l,sensitive:c}):e.match)}}),r?a.a.cloneElement(o,{location:n,computedMatch:r}):null},t}(a.a.Component);me.contextTypes={router:s.a.shape({route:s.a.object.isRequired}).isRequired},me.propTypes={children:s.a.node,location:s.a.object};var ge=me,ve=U,_e=n(96),be=n.n(_e),we=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Ce=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return a.a.createElement(W,{render:function(t){return a.a.createElement(e,we({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:s.a.func},be()(t,e)};n.d(t,"BrowserRouter",function(){return b}),n.d(t,"HashRouter",function(){return k}),n.d(t,"Link",function(){return R}),n.d(t,"MemoryRouter",function(){return L}),n.d(t,"NavLink",function(){return Q}),n.d(t,"Prompt",function(){return X}),n.d(t,"Redirect",function(){return ie}),n.d(t,"Route",function(){return V}),n.d(t,"Router",function(){return g}),n.d(t,"StaticRouter",function(){return ye}),n.d(t,"Switch",function(){return ge}),n.d(t,"matchPath",function(){return ve}),n.d(t,"withRouter",function(){return Ce})},function(e,t,n){"use strict";var r=n(187);e.exports=r},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(7),_reactDom2=_interopRequireDefault(_reactDom),_SingleJob=__webpack_require__(93),_SingleJob2=_interopRequireDefault(_SingleJob),_reactRouterDom=__webpack_require__(22),_axios=__webpack_require__(29),_axios2=_interopRequireDefault(_axios),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var JobsPage=function(_React$Component){function JobsPage(e){_classCallCheck(this,JobsPage);var t=_possibleConstructorReturn(this,(JobsPage.__proto__||Object.getPrototypeOf(JobsPage)).call(this,e));return t.state={jobs:[],tempJobs:[{id:1,jobTitle:"Fullstack Developer",jobHours:"Full-time",jobArea:"Front-End",jobCompany:"Monzo"},{id:2,jobTitle:"Junior Designer",jobHours:"Part-time",jobArea:"Full-stack",jobCompany:"Facebook"},{id:3,jobTitle:"Experienced CTO",jobHours:"Full-time",jobArea:"Designer",jobCompany:"Google"},{id:4,jobTitle:"Front-end Lead",jobHours:"Part-time",jobArea:"Back-end",jobCompany:"Deliveroo"},{id:5,jobTitle:"QA Tester",jobHours:"Full-time",jobArea:"Front-End",jobCompany:"Instagram"},{id:6,jobTitle:"Fullstack Developer",jobHours:"Part-time",jobArea:"Back-end",jobCompany:"Twitter"},{id:7,jobTitle:"Junior Designer",jobHours:"Full-time",jobArea:"Full-stack",jobCompany:"Apple"},{id:8,jobTitle:"Experienced CTO",jobHours:"Part-time",jobArea:"Back-end",jobCompany:"Apple"},{id:9,jobTitle:"Junior Designer",jobHours:"Full-time",jobArea:"Front-End",jobCompany:"Monzo"},{id:10,jobTitle:"Front-end Lead",jobHours:"Part-time",jobArea:"Back-end",jobCompany:"Instagram"},{id:11,jobTitle:"Fullstack Developer",jobHours:"Full-time",jobArea:"",jobCompany:"Deliveroo"},{id:12,jobTitle:"Experienced CTO",jobHours:"Part-time",jobArea:"Designer",jobCompany:"Twitter"},{id:13,jobTitle:"Front-end Lead",jobHours:"Full-time",jobArea:"Front-End",jobCompany:"Instagram"},{id:14,jobTitle:"QA Tester",jobHours:"Part-time",jobArea:"",jobCompany:"Apple"},{id:15,jobTitle:"Junior Designer",jobHours:"Full-time",jobArea:"Back-end",jobCompany:"Monzo"},{id:16,jobTitle:"QA Tester",jobHours:"Part-time",jobArea:"Back-end",jobCompany:"Deliveroo"},{id:17,jobTitle:"Fullstack Developer",jobHours:"Full-time",jobArea:"",jobCompany:"Instagram"},{id:18,jobTitle:"Experienced CTO",jobHours:"Part-time",jobArea:"Front-End",jobCompany:"Google"},{id:19,jobTitle:"Junior Designer",jobHours:"Full-time",jobArea:"Designer",jobCompany:"Apple"},{id:20,jobTitle:"Front-end Lead",jobHours:"Part-time",jobArea:"Back-end",jobCompany:"Deliveroo"},{id:21,jobTitle:"Fullstack Developer",jobHours:"Full-time",jobArea:"Back-end",jobCompany:"Monzo"},{id:22,jobTitle:"Experienced CTO",jobHours:"Part-time",jobArea:"Front-End",jobCompany:"Twitter"},{id:23,jobTitle:"Front-end Lead",jobHours:"Full-time",jobArea:"Designer",jobCompany:"Instagram"},{id:24,jobTitle:"Junior Designer",jobHours:"Full-time",jobArea:"Back-end",jobCompany:"Google"},{id:25,jobTitle:"Front-end Lead",jobHours:"Full-time",jobArea:"Back-end",jobCompany:"Google"},{id:26,jobTitle:"Front-end Lead",jobHours:"Full-time",jobArea:"Designer",jobCompany:"Twitter"}]},t}return _inherits(JobsPage,_React$Component),_createClass(JobsPage,[{key:"componentDidMount",value:function(){var e=this;_axios2.default.get("http://127.0.0.1:8000/job/api/jobs/").then(function(t){0===t.data.length&&console.log("there are no users that match your search"),e.setState({jobs:t.data}),console.log(e.state.jobs)}).catch(function(e){console.log(e)})}},{key:"render",value:function(){return _react2.default.createElement("div",{id:"jobs-page"},_react2.default.createElement("div",{id:"jobs-page-title"},_react2.default.createElement("h1",null,"TECH JOBS")),_react2.default.createElement("div",{id:"all-jobs"},this.state.jobs.map(function(e){return _react2.default.createElement(_reactRouterDom.Link,{to:"/job_post/"+e.id,key:e.title},_react2.default.createElement(_SingleJob2.default,{jobTitle:e.title,jobHours:e.hours,jobArea:e.area,jobSlug:e.slug,jobCompany:e.posted_by_company}))})))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),JobsPage}(_react2.default.Component),_default=JobsPage,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(JobsPage,"JobsPage","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/jobs/JobsPage.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/jobs/JobsPage.js"),leaveModule(module))}).call(this,__webpack_require__(9)(module))},function(e,t,n){"use strict";var r=n(4),o=55296,i=56319,a=56320,u=57343,s=/[\uD800-\uDFFF]/;function l(e){return o<=e&&e<=u}function c(e){return s.test(e)}function f(e,t){return 1+l(e.charCodeAt(t))}function p(e,t,n){if(t=t||0,n=void 0===n?1/0:n||0,!c(e))return e.substr(t,n);var r=e.length;if(r<=0||t>r||n<=0)return"";var o=0;if(t>0){for(;t>0&&o<r;t--)o+=f(e,o);if(o>=r)return""}else if(t<0){for(o=r;t<0&&0<o;t++)o-=f(e,o-1);o<0&&(o=0)}var i=r;if(n<r)for(i=o;n>0&&i<r;n--)i+=f(e,i);return e.substring(o,i)}var d={getCodePoints:function(e){for(var t=[],n=0;n<e.length;n+=f(e,n))t.push(e.codePointAt(n));return t},getUTF16Length:f,hasSurrogateUnit:c,isCodeUnitInSurrogateRange:l,isSurrogatePair:function(e,t){if(0<=t&&t<e.length||r(!1),t+1===e.length)return!1;var n=e.charCodeAt(t),s=e.charCodeAt(t+1);return o<=n&&n<=i&&a<=s&&s<=u},strlen:function(e){if(!c(e))return e.length;for(var t=0,n=0;n<e.length;n+=f(e,n))t++;return t},substring:function(e,t,n){t=t||0,n=void 0===n?1/0:n||0,t<0&&(t=0),n<0&&(n=0);var r=Math.abs(n-t);return p(e,t=t<n?t:n,r)},substr:p};e.exports=d},function(e,t,n){"use strict";var r=n(12),o=n(5),i=n(33),a=o.List,u=o.Map,s=o.OrderedSet,l=o.Record,c=o.Repeat,f=s(),p=function(e){if(!e)return e;var t=e.characterList,n=e.text;return n&&!t&&(e.characterList=a(c(r.EMPTY,n.length))),e},d=function(e){function t(n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,p(n)))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getKey=function(){return this.get("key")},t.prototype.getType=function(){return this.get("type")},t.prototype.getText=function(){return this.get("text")},t.prototype.getCharacterList=function(){return this.get("characterList")},t.prototype.getLength=function(){return this.getText().length},t.prototype.getDepth=function(){return this.get("depth")},t.prototype.getData=function(){return this.get("data")},t.prototype.getInlineStyleAt=function(e){var t=this.getCharacterList().get(e);return t?t.getStyle():f},t.prototype.getEntityAt=function(e){var t=this.getCharacterList().get(e);return t?t.getEntity():null},t.prototype.findStyleRanges=function(e,t){i(this.getCharacterList(),h,e,t)},t.prototype.findEntityRanges=function(e,t){i(this.getCharacterList(),y,e,t)},t}(l({key:"",type:"unstyled",text:"",characterList:a(),depth:0,data:u()}));function h(e,t){return e.getStyle()===t.getStyle()}function y(e,t){return e.getEntity()===t.getEntity()}e.exports=d},function(e,t,n){"use strict";function r(e){return e.replace(/\//g,"-")}e.exports=function(e){return"object"==typeof e?Object.keys(e).filter(function(t){return e[t]}).map(r).join(" "):Array.prototype.map.call(arguments,r).join(" ")}},function(e,t,n){"use strict";var r=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.serialize=function(){return"Anchor: "+this.getAnchorKey()+":"+this.getAnchorOffset()+", Focus: "+this.getFocusKey()+":"+this.getFocusOffset()+", Is Backward: "+String(this.getIsBackward())+", Has Focus: "+String(this.getHasFocus())},t.prototype.getAnchorKey=function(){return this.get("anchorKey")},t.prototype.getAnchorOffset=function(){return this.get("anchorOffset")},t.prototype.getFocusKey=function(){return this.get("focusKey")},t.prototype.getFocusOffset=function(){return this.get("focusOffset")},t.prototype.getIsBackward=function(){return this.get("isBackward")},t.prototype.getHasFocus=function(){return this.get("hasFocus")},t.prototype.hasEdgeWithin=function(e,t,n){var r=this.getAnchorKey(),o=this.getFocusKey();if(r===o&&r===e){var i=this.getStartOffset();return t<=this.getEndOffset()&&i<=n}if(e!==r&&e!==o)return!1;var a=e===r?this.getAnchorOffset():this.getFocusOffset();return t<=a&&n>=a},t.prototype.isCollapsed=function(){return this.getAnchorKey()===this.getFocusKey()&&this.getAnchorOffset()===this.getFocusOffset()},t.prototype.getStartKey=function(){return this.getIsBackward()?this.getFocusKey():this.getAnchorKey()},t.prototype.getStartOffset=function(){return this.getIsBackward()?this.getFocusOffset():this.getAnchorOffset()},t.prototype.getEndKey=function(){return this.getIsBackward()?this.getAnchorKey():this.getFocusKey()},t.prototype.getEndOffset=function(){return this.getIsBackward()?this.getAnchorOffset():this.getFocusOffset()},t.createEmpty=function(e){return new t({anchorKey:e,anchorOffset:0,focusKey:e,focusOffset:0,isBackward:!1,hasFocus:!1})},t}((0,n(5).Record)({anchorKey:"",anchorOffset:0,focusKey:"",focusOffset:0,isBackward:!1,hasFocus:!1}));e.exports=r},function(e,t,n){e.exports=n(225)},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=n(10);e.exports=function(e,t,n){var o=e.getSelection(),i=e.getCurrentContent(),a=o;if(o.isCollapsed()){if("forward"===n){if(e.isSelectionAtEndOfContent())return i}else if(e.isSelectionAtStartOfContent())return i;if((a=t(e))===o)return i}return r.removeRange(i,a,n)}},function(e,t,n){"use strict";e.exports=function(e){return"handled"===e||!0===e}},function(e,t,n){"use strict";e.exports=function(e,t,n,r){if(e.size){var o=0;e.reduce(function(e,i,a){return t(e,i)||(n(e)&&r(o,a),o=a),i}),n(e.last())&&r(o,e.count())}}},function(e,t,n){"use strict";var r=n(5).OrderedMap,o={createFromArray:function(e){return r(e.map(function(e){return[e.getKey(),e]}))}};e.exports=o},function(e,t,n){"use strict";var r={encode:function(e,t,n){return e+"-"+t+"-"+n},decode:function(e){var t=e.split("-"),n=t[0],r=t[1],o=t[2];return{blockKey:n,decoratorKey:parseInt(r,10),leafKey:parseInt(o,10)}}};e.exports=r},function(e,t,n){"use strict";var r=n(11)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(75),i=n(5),a=n(4),u=(0,i.Map)(),s=0;function l(e,t){console.warn("WARNING: "+e+' will be deprecated soon!\nPlease use "'+t+'" instead.')}var c={getLastCreatedEntityKey:function(){return l("DraftEntity.getLastCreatedEntityKey","contentState.getLastCreatedEntityKey"),c.__getLastCreatedEntityKey()},create:function(e,t,n){return l("DraftEntity.create","contentState.createEntity"),c.__create(e,t,n)},add:function(e){return l("DraftEntity.add","contentState.addEntity"),c.__add(e)},get:function(e){return l("DraftEntity.get","contentState.getEntity"),c.__get(e)},mergeData:function(e,t){return l("DraftEntity.mergeData","contentState.mergeEntityData"),c.__mergeData(e,t)},replaceData:function(e,t){return l("DraftEntity.replaceData","contentState.replaceEntityData"),c.__replaceData(e,t)},__getLastCreatedEntityKey:function(){return""+s},__create:function(e,t,n){return c.__add(new o({type:e,mutability:t,data:n||{}}))},__add:function(e){var t=""+ ++s;return u=u.set(t,e),t},__get:function(e){var t=u.get(e);return t||a(!1),t},__mergeData:function(e,t){var n=c.__get(e),o=r({},n.getData(),t),i=n.set("data",o);return u=u.set(e,i),i},__replaceData:function(e,t){var n=c.__get(e).set("data",t);return u=u.set(e,n),n}};e.exports=c},function(e,t,n){"use strict";var r=n(80),o=n(79);e.exports=function(e,t){var n=t.getStartKey(),i=t.getStartOffset(),a=t.getEndKey(),u=t.getEndOffset(),s=o(e,t).getBlockMap(),l=s.keySeq(),c=l.indexOf(n),f=l.indexOf(a)+1;return r(s.slice(c,f).map(function(e,t){var r=e.getText(),o=e.getCharacterList();return n===a?e.merge({text:r.slice(i,u),characterList:o.slice(i,u)}):t===n?e.merge({text:r.slice(i),characterList:o.slice(i)}):t===a?e.merge({text:r.slice(0,u),characterList:o.slice(0,u)}):e}))}},function(e,t,n){"use strict";var r=n(232);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.getSelection(),r=e.getCurrentContent(),o=n.getStartKey(),i=n.getStartOffset(),a=o,u=0;if(t>i){var s=r.getKeyBefore(o);null==s?a=o:(a=s,u=r.getBlockForKey(s).getText().length)}else u=i-t;return n.merge({focusKey:a,focusOffset:u,isBackward:!0})}},function(e,t,n){"use strict";var r=n(16).isPlatform("Mac OS X"),o={isCtrlKeyCommand:function(e){return!!e.ctrlKey&&!e.altKey},isOptionKeyCommand:function(e){return r&&e.altKey},hasCommandModifier:function(e){return r?!!e.metaKey&&!e.altKey:o.isCtrlKeyCommand(e)}};e.exports=o},function(e,t,n){"use strict";var r=n(68);e.exports=function(e){for(var t=e;t&&t!==document.documentElement;){var n=r(t);if(null!=n)return n;t=t.parentNode}return null}},function(e,t,n){"use strict";var r=n(152),o=n(151);e.exports=function(e){var t=r(e.ownerDocument||e.document);e.Window&&e instanceof e.Window&&(e=t);var n=o(e),i=e===t?e.ownerDocument.documentElement:e,a=e.scrollWidth-i.clientWidth,u=e.scrollHeight-i.clientHeight;return n.x=Math.max(0,Math.min(n.x,a)),n.y=Math.max(0,Math.min(n.y,u)),n}},function(e,t,n){"use strict";function r(e,t){var n=o.get(e,t);return"auto"===n||"scroll"===n}var o={get:n(157),getScrollParent:function(e){if(!e)return null;for(var t=e.ownerDocument;e&&e!==t.body;){if(r(e,"overflow")||r(e,"overflowY")||r(e,"overflowX"))return e;e=e.parentNode}return t.defaultView||t.parentWindow}};e.exports=o},function(e,t,n){"use strict";function r(e,t){return t&&"MUTABLE"===e.__get(t).getMutability()?t:null}e.exports=function(e,t){var n;if(t.isCollapsed()){var o=t.getAnchorKey(),i=t.getAnchorOffset();return i>0?(n=e.getBlockForKey(o).getEntityAt(i-1))!==e.getBlockForKey(o).getEntityAt(i)?null:r(e.getEntityMap(),n):null}var a=t.getStartKey(),u=t.getStartOffset(),s=e.getBlockForKey(a);return n=u===s.getLength()?null:s.getEntityAt(u),r(e.getEntityMap(),n)}},function(e,t,n){"use strict";e.exports={BACKSPACE:8,TAB:9,RETURN:13,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46,COMMA:188,PERIOD:190,A:65,Z:90,ZERO:48,NUMPAD_0:96,NUMPAD_9:105}},function(e,t,n){"use strict";var r=n(5).Map,o=n(1),i=n(27),a=r({"header-one":{element:"h1"},"header-two":{element:"h2"},"header-three":{element:"h3"},"header-four":{element:"h4"},"header-five":{element:"h5"},"header-six":{element:"h6"},"unordered-list-item":{element:"li",wrapper:o.createElement("ul",{className:i("public/DraftStyleDefault/ul")})},"ordered-list-item":{element:"li",wrapper:o.createElement("ol",{className:i("public/DraftStyleDefault/ol")})},blockquote:{element:"blockquote"},atomic:{element:"figure"},"code-block":{element:"pre",wrapper:o.createElement("pre",{className:i("public/DraftStyleDefault/pre")})},unstyled:{element:"div",aliasedElements:["p"]}});e.exports=a},function(e,t,n){"use strict";var r=n(4),o="LTR",i="RTL",a=null;function u(e){return e===o||e===i}function s(e){return u(e)||r(!1),e===o?"ltr":"rtl"}function l(e){a=e}var c={NEUTRAL:"NEUTRAL",LTR:o,RTL:i,isStrong:u,getHTMLDir:s,getHTMLDirIfDifferent:function(e,t){return u(e)||r(!1),u(t)||r(!1),e===t?null:s(e)},setGlobalDir:l,initGlobalDir:function(){l(o)},getGlobalDir:function(){return a||this.initGlobalDir(),a||r(!1),a}};e.exports=c},function(e,t,n){"use strict";var r=new RegExp("\r","g");e.exports=function(e){return e.replace(r,"")}},function(e,t,n){"use strict";var r=n(34),o=n(12),i=n(26),a=n(13),u=n(36),s=n(23),l=n(5),c=n(28),f=n(21),p=n(48),d=l.List,h=l.Record,y=l.Repeat,m=s.draft_tree_data_support?a:i,g=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getEntityMap=function(){return u},t.prototype.getBlockMap=function(){return this.get("blockMap")},t.prototype.getSelectionBefore=function(){return this.get("selectionBefore")},t.prototype.getSelectionAfter=function(){return this.get("selectionAfter")},t.prototype.getBlockForKey=function(e){return this.getBlockMap().get(e)},t.prototype.getKeyBefore=function(e){return this.getBlockMap().reverse().keySeq().skipUntil(function(t){return t===e}).skip(1).first()},t.prototype.getKeyAfter=function(e){return this.getBlockMap().keySeq().skipUntil(function(t){return t===e}).skip(1).first()},t.prototype.getBlockAfter=function(e){return this.getBlockMap().skipUntil(function(t,n){return n===e}).skip(1).first()},t.prototype.getBlockBefore=function(e){return this.getBlockMap().reverse().skipUntil(function(t,n){return n===e}).skip(1).first()},t.prototype.getBlocksAsArray=function(){return this.getBlockMap().toArray()},t.prototype.getFirstBlock=function(){return this.getBlockMap().first()},t.prototype.getLastBlock=function(){return this.getBlockMap().last()},t.prototype.getPlainText=function(e){return this.getBlockMap().map(function(e){return e?e.getText():""}).join(e||"\n")},t.prototype.getLastCreatedEntityKey=function(){return u.__getLastCreatedEntityKey()},t.prototype.hasText=function(){var e=this.getBlockMap();return e.size>1||e.first().getLength()>0},t.prototype.createEntity=function(e,t,n){return u.__create(e,t,n),this},t.prototype.mergeEntityData=function(e,t){return u.__mergeData(e,t),this},t.prototype.replaceEntityData=function(e,t){return u.__replaceData(e,t),this},t.prototype.addEntity=function(e){return u.__add(e),this},t.prototype.getEntity=function(e){return u.__get(e)},t.createFromBlockArray=function(e,n){var o=Array.isArray(e)?e:e.contentBlocks,i=r.createFromArray(o),a=i.isEmpty()?new c:c.createEmpty(i.first().getKey());return new t({blockMap:i,entityMap:n||u,selectionBefore:a,selectionAfter:a})},t.createFromText=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:/\r\n?|\n/g,r=e.split(n).map(function(e){return e=p(e),new m({key:f(),text:e,type:"unstyled",characterList:d(y(o.EMPTY,e.length))})});return t.createFromBlockArray(r)},t}(h({entityMap:null,blockMap:null,selectionBefore:null,selectionAfter:null}));e.exports=g},function(e,t,n){"use strict";(function(t){var r=n(14),o=n(222),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,s={adapter:("undefined"!=typeof XMLHttpRequest?u=n(90):void 0!==t&&(u=n(90)),u),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){s.headers[e]={}}),r.forEach(["post","put","patch"],function(e){s.headers[e]=r.merge(i)}),e.exports=s}).call(this,n(91))},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(3),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,i.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):((0,i.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n(55)),i=u(n(54)),a=n(19);function u(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,i){var u=void 0;"string"==typeof e?(u=(0,a.parsePath)(e)).state=t:(void 0===(u=r({},e)).pathname&&(u.pathname=""),u.search?"?"!==u.search.charAt(0)&&(u.search="?"+u.search):u.search="",u.hash?"#"!==u.hash.charAt(0)&&(u.hash="#"+u.hash):u.hash="",void 0!==t&&void 0===u.state&&(u.state=t));try{u.pathname=decodeURI(u.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+u.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(u.key=n),i?u.pathname?"/"!==u.pathname.charAt(0)&&(u.pathname=(0,o.default)(u.pathname,i.pathname)):u.pathname=i.pathname:u.pathname||(u.pathname="/"),u},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,i.default)(e.state,t.state)}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";n.r(t);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var o=void 0===t?"undefined":r(t);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var i=t.valueOf(),a=n.valueOf();if(i!==t||a!==n)return e(i,a);var u=Object.keys(t),s=Object.keys(n);return u.length===s.length&&u.every(function(r){return e(t[r],n[r])})}return!1}},function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}n.r(t),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],i=t&&t.split("/")||[],a=e&&r(e),u=t&&r(t),s=a||u;if(e&&r(e)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";var l=void 0;if(i.length){var c=i[i.length-1];l="."===c||".."===c||""===c}else l=!1;for(var f=0,p=i.length;p>=0;p--){var d=i[p];"."===d?o(i,p):".."===d?(o(i,p),f++):f&&(o(i,p),f--)}if(!s)for(;f--;f)i.unshift("..");!s||""===i[0]||i[0]&&r(i[0])||i.unshift("");var h=i.join("/");return l&&"/"!==h.substr(-1)&&(h+="/"),h}},function(e,t,n){"use strict";var r={stringify:function(e){return"_"+String(e)},unstringify:function(e){return e.slice(1)}};e.exports=r},function(e,t,n){"use strict";var r=n(40),o=n(45),i=n(16),a=i.isPlatform("Mac OS X"),u=i.isPlatform("Windows"),s=a&&i.isBrowser("Firefox < 29"),l=r.hasCommandModifier,c=r.isCtrlKeyCommand;function f(e){return a&&e.altKey||c(e)}e.exports=function(e){switch(e.keyCode){case 66:return l(e)?"bold":null;case 68:return c(e)?"delete":null;case 72:return c(e)?"backspace":null;case 73:return l(e)?"italic":null;case 74:return l(e)?"code":null;case 75:return!u&&c(e)?"secondary-cut":null;case 77:case 79:return c(e)?"split-block":null;case 84:return a&&c(e)?"transpose-characters":null;case 85:return l(e)?"underline":null;case 87:return a&&c(e)?"backspace-word":null;case 89:return c(e)?u?"redo":"secondary-paste":null;case 90:return function(e){return l(e)?e.shiftKey?"redo":"undo":null}(e)||null;case o.RETURN:return"split-block";case o.DELETE:return function(e){return u&&e.shiftKey?null:f(e)?"delete-word":"delete"}(e);case o.BACKSPACE:return function(e){return l(e)&&a?"backspace-to-start-of-line":f(e)?"backspace-word":"backspace"}(e);case o.LEFT:return s&&l(e)?"move-selection-to-start-of-block":null;case o.RIGHT:return s&&l(e)?"move-selection-to-end-of-block":null;default:return null}}},function(e,t,n){"use strict";var r=n(10),o=n(6),i=(n(28),n(116)),a=n(15),u={currentBlockContainsLink:function(e){var t=e.getSelection(),n=e.getCurrentContent(),r=n.getEntityMap();return n.getBlockForKey(t.getAnchorKey()).getCharacterList().slice(t.getStartOffset(),t.getEndOffset()).some(function(e){var t=e.getEntity();return!!t&&"LINK"===r.__get(t).getType()})},getCurrentBlockType:function(e){var t=e.getSelection();return e.getCurrentContent().getBlockForKey(t.getStartKey()).getType()},getDataObjectForLinkURL:function(e){return{url:e.toString()}},handleKeyCommand:function(e,t){switch(t){case"bold":return u.toggleInlineStyle(e,"BOLD");case"italic":return u.toggleInlineStyle(e,"ITALIC");case"underline":return u.toggleInlineStyle(e,"UNDERLINE");case"code":return u.toggleCode(e);case"backspace":case"backspace-word":case"backspace-to-start-of-line":return u.onBackspace(e);case"delete":case"delete-word":case"delete-to-end-of-block":return u.onDelete(e);default:return null}},insertSoftNewline:function(e){var t=r.insertText(e.getCurrentContent(),e.getSelection(),"\n",e.getCurrentInlineStyle(),null),n=o.push(e,t,"insert-characters");return o.forceSelection(n,t.getSelectionAfter())},onBackspace:function(e){var t=e.getSelection();if(!t.isCollapsed()||t.getAnchorOffset()||t.getFocusOffset())return null;var n=e.getCurrentContent(),r=t.getStartKey(),i=n.getBlockBefore(r);if(i&&"atomic"===i.getType()){var a=n.getBlockMap().delete(i.getKey()),s=n.merge({blockMap:a,selectionAfter:t});if(s!==n)return o.push(e,s,"remove-range")}var l=u.tryToRemoveBlockStyle(e);return l?o.push(e,l,"change-block-type"):null},onDelete:function(e){var t=e.getSelection();if(!t.isCollapsed())return null;var n=e.getCurrentContent(),i=t.getStartKey(),a=n.getBlockForKey(i).getLength();if(t.getStartOffset()<a)return null;var u=n.getBlockAfter(i);if(!u||"atomic"!==u.getType())return null;var s=t.merge({focusKey:u.getKey(),focusOffset:u.getLength()}),l=r.removeRange(n,s,"forward");return l!==n?o.push(e,l,"remove-range"):null},onTab:function(e,t,n){var r=t.getSelection(),a=r.getAnchorKey();if(a!==r.getFocusKey())return t;var u=t.getCurrentContent(),s=u.getBlockForKey(a),l=s.getType();if("unordered-list-item"!==l&&"ordered-list-item"!==l)return t;e.preventDefault();var c=u.getBlockBefore(a);if(!c)return t;var f=c.getType();if("unordered-list-item"!==f&&"ordered-list-item"!==f)return t;var p=s.getDepth();if(!e.shiftKey&&p===n)return t;n=Math.min(c.getDepth()+1,n);var d=i(u,r,e.shiftKey?-1:1,n);return o.push(t,d,"adjust-depth")},toggleBlockType:function(e,t){var n=e.getSelection(),i=n.getStartKey(),u=n.getEndKey(),s=e.getCurrentContent(),l=n;if(i!==u&&0===n.getEndOffset()){var c=a(s.getBlockBefore(u));u=c.getKey(),l=l.merge({anchorKey:i,anchorOffset:n.getStartOffset(),focusKey:u,focusOffset:c.getLength(),isBackward:!1})}if(s.getBlockMap().skipWhile(function(e,t){return t!==i}).reverse().skipWhile(function(e,t){return t!==u}).some(function(e){return"atomic"===e.getType()}))return e;var f=s.getBlockForKey(i).getType()===t?"unstyled":t;return o.push(e,r.setBlockType(s,l,f),"change-block-type")},toggleCode:function(e){var t=e.getSelection(),n=t.getAnchorKey(),r=t.getFocusKey();return t.isCollapsed()||n!==r?u.toggleBlockType(e,"code-block"):u.toggleInlineStyle(e,"CODE")},toggleInlineStyle:function(e,t){var n=e.getSelection(),i=e.getCurrentInlineStyle();if(n.isCollapsed())return o.setInlineStyleOverride(e,i.has(t)?i.remove(t):i.add(t));var a,u=e.getCurrentContent();return a=i.has(t)?r.removeInlineStyle(u,n,t):r.applyInlineStyle(u,n,t),o.push(e,a,"change-inline-style")},toggleLink:function(e,t,n){var i=r.applyEntity(e.getCurrentContent(),t,n);return o.push(e,i,"apply-entity")},tryToRemoveBlockStyle:function(e){var t=e.getSelection(),n=t.getAnchorOffset();if(t.isCollapsed()&&0===n){var o=t.getAnchorKey(),i=e.getCurrentContent(),a=i.getBlockForKey(o),u=i.getFirstBlock();if(a.getLength()>0&&a!==u)return null;var s=a.getType(),l=i.getBlockBefore(o);if("code-block"===s&&l&&"code-block"===l.getType()&&0!==l.getLength())return null;if("unstyled"!==s)return r.setBlockType(i,t,"unstyled")}return null}};e.exports=u},function(e,t,n){"use strict";var r=n(16),o=n(4),i=r.isBrowser("IE <= 9");e.exports=function(e){var t,n=null;return!i&&document.implementation&&document.implementation.createHTMLDocument&&((t=document.implementation.createHTMLDocument("foo")).documentElement||o(!1),t.documentElement.innerHTML=e,n=t.getElementsByTagName("body")[0]),n}},function(e,t,n){"use strict";var r,o=i||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(11);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=n(12),s=n(26),l=n(13),c=n(46),f=n(36),p=n(23),d=n(5),h=n(5).Set,y=n(117),m=n(27),g=n(21),v=n(59),_=n(4),b=n(48),w=p.draft_tree_data_support,C=d.List,E=d.OrderedSet,S=new RegExp("\r","g"),k=new RegExp("\n","g"),x=new RegExp("&nbsp;","g"),O=new RegExp("&#13;?","g"),T=new RegExp("&#8203;?","g"),M=["bold","bolder","500","600","700","800","900"],R=["light","lighter","100","200","300","400"],D={b:"BOLD",code:"CODE",del:"STRIKETHROUGH",em:"ITALIC",i:"ITALIC",s:"STRIKETHROUGH",strike:"STRIKETHROUGH",strong:"BOLD",u:"UNDERLINE"},j=(a(r={},m("public/DraftStyleDefault/depth0"),0),a(r,m("public/DraftStyleDefault/depth1"),1),a(r,m("public/DraftStyleDefault/depth2"),2),a(r,m("public/DraftStyleDefault/depth3"),3),a(r,m("public/DraftStyleDefault/depth4"),4),r),P=["className","href","rel","target","title"],A=["alt","className","height","src","width"],L=void 0,N={text:"",inlines:[],entities:[],blocks:[]},I={children:C(),depth:0,key:"",type:""},F=function(e,t){return"li"===e?"ol"===t?"ordered-list-item":"unordered-list-item":null},B=function(e,t,n){var r=n.filter(function(t){return t.element===e||t.wrapper===e||t.aliasedElements&&t.aliasedElements.some(function(t){return t===e})}).keySeq().toSet().toArray().sort();switch(r.length){case 0:return"unstyled";case 1:return r[0];default:return function(e,t,n){for(var r=0;r<n.length;r++){var o=n[r](e,t);if(o)return o}return null}(e,t,[F])||"unstyled"}},U=function(e,t,n){var r=e.text.slice(-1),o=t.text.slice(0,1);if("\r"!==r||"\r"!==o||n||(e.text=e.text.slice(0,-1),e.inlines.pop(),e.entities.pop(),e.blocks.pop()),"\r"===r){if(" "===t.text||"\n"===t.text)return e;" "!==o&&"\n"!==o||(t.text=t.text.slice(1),t.inlines.shift(),t.entities.shift())}return{text:e.text+t.text,inlines:e.inlines.concat(t.inlines),entities:e.entities.concat(t.entities),blocks:e.blocks.concat(t.blocks)}},K=function(e){e instanceof HTMLAnchorElement||_(!1);var t=e.protocol;return"http:"===t||"https:"===t||"mailto:"===t},q=function(){return o({},N,{text:"\n",inlines:[E()],entities:new Array(1)})},H=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return{text:"\r",inlines:[E()],entities:new Array(1),blocks:[function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return o({},I,e)}({parent:n,key:g(),type:e,depth:Math.max(0,Math.min(4,t))})]}},z=function e(t,n,r,i,a,u,s,l,c,p){var d=L,h=n.nodeName.toLowerCase(),m=t,g="unstyled",v=!1,_=a&&B(a,i,l),b=o({},N),C=void 0;if("#text"===h){var S=n.textContent,x=S.trim();if(i&&""===x&&n.parentElement){var O=n.parentElement.nodeName.toLowerCase();if("ol"===O||"ul"===O)return{chunk:o({},N),entityMap:t}}return""===x&&"pre"!==a?{chunk:function(e){var t=new Array(1);return e&&(t[0]=e),o({},N,{text:" ",inlines:[E()],entities:t})}(c),entityMap:t}:("pre"!==a&&(S=S.replace(k," ")),L=h,{chunk:{text:S,inlines:Array(S.length).fill(r),entities:Array(S.length).fill(c),blocks:[]},entityMap:t})}if(L=h,"br"===h)return"br"!==d||a&&"unstyled"!==_?{chunk:q(),entityMap:t}:{chunk:H("unstyled",s,p),entityMap:t};if("img"===h&&n instanceof HTMLImageElement&&n.attributes.getNamedItem("src")&&n.attributes.getNamedItem("src").value){var T=n,I={};A.forEach(function(e){var t=T.getAttribute(e);t&&(I[e]=t)}),n.textContent="📷",c=f.__create("IMAGE","MUTABLE",I||{})}r=function(e,t,n){var r=D[e];if(r)n=n.add(r).toOrderedSet();else if(t instanceof HTMLElement){var o=t;n=n.withMutations(function(e){var t=o.style.fontWeight,n=o.style.fontStyle,r=o.style.textDecoration;M.indexOf(t)>=0?e.add("BOLD"):R.indexOf(t)>=0&&e.remove("BOLD"),"italic"===n?e.add("ITALIC"):"normal"===n&&e.remove("ITALIC"),"underline"===r&&e.add("UNDERLINE"),"line-through"===r&&e.add("STRIKETHROUGH"),"none"===r&&(e.remove("UNDERLINE"),e.remove("STRIKETHROUGH"))}).toOrderedSet()}return n}(h,n,r),"ul"!==h&&"ol"!==h||(i&&(s+=1),i=h),!w&&"li"===h&&n instanceof HTMLElement&&(s=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Object.keys(j).some(function(n){e.classList.contains(n)&&(t=j[n])}),t}(n,s));var F=B(h,i,l),z=i&&"li"===a&&"li"===h,W=(!a||w)&&-1!==u.indexOf(h);(z||W)&&(C=(b=H(F,s,p)).blocks[0].key,a=h,v=!w),z&&(g="ul"===i?"unordered-list-item":"ordered-list-item");var V=n.firstChild;null!=V&&(h=V.nodeName.toLowerCase());for(var J=null;V;){V instanceof HTMLAnchorElement&&V.href&&K(V)?function(){var e=V,t={};P.forEach(function(n){var r=e.getAttribute(n);r&&(t[n]=r)}),t.url=new y(e.href).toString(),J=f.__create("LINK","MUTABLE",t||{})}():J=void 0;var $=e(m,V,r,i,a,u,s,l,J||c,w?C:null),G=$.chunk;m=$.entityMap,b=U(b,G,w);var Q=V.nextSibling;!p&&Q&&u.indexOf(h)>=0&&a&&(b=U(b,q())),Q&&(h=Q.nodeName.toLowerCase()),V=Q}return v&&(b=U(b,H(g,s,p))),{chunk:b,entityMap:m}},W=function(e,t,n,r){e=e.trim().replace(S,"").replace(x," ").replace(O,"").replace(T,"");var i=function(e){var t=e.get("unstyled").element,n=h([]);return e.forEach(function(e){e.aliasedElements&&e.aliasedElements.forEach(function(e){n=n.add(e)}),n=n.add(e.element)}),n.filter(function(e){return e&&e!==t}).toArray().sort()}(n),a=t(e);if(!a)return null;L=null;var u=function(e,t){return t.some(function(t){return-1!==e.indexOf("<"+t)})}(e,i)?i:["div"],s=z(r,a,E(),"ul",null,u,-1,n),l=s.chunk,c=s.entityMap;return 0===l.text.indexOf("\r")&&(l={text:l.text.slice(1),inlines:l.inlines.slice(1),entities:l.entities.slice(1),blocks:l.blocks}),"\r"===l.text.slice(-1)&&(l.text=l.text.slice(0,-1),l.inlines=l.inlines.slice(0,-1),l.entities=l.entities.slice(0,-1),l.blocks.pop()),0===l.blocks.length&&l.blocks.push(o({},N,{type:"unstyled",depth:0})),l.text.split("\r").length===l.blocks.length+1&&l.blocks.unshift({type:"unstyled",depth:0}),{chunk:l,entityMap:c}};e.exports=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:v,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c,r=W(e,t,n,f);if(null==r)return null;var o=r.chunk,i=r.entityMap;return{contentBlocks:function(e){if(!e||!e.text||!Array.isArray(e.blocks))return null;var t=0,n=e.blocks,r=e.inlines,o=e.entities,i=w?l:s;return e.text.split("\r").reduce(function(e,a,s){a=b(a);var c=n[s],f=t+a.length,p=r.slice(t,f),d=o.slice(t,f),h=C(p.map(function(e,t){var n={style:e,entity:null};return d[t]&&(n.entity=d[t]),u.create(n)}));t=f+1;var y=c.depth,m=c.type,v=c.parent,_=c.key||g(),w=null;if(v){var E=e.cacheRef[v],S=e.contentBlocks[E];if(S.getChildKeys().isEmpty()&&S.getText()){var k=S.getCharacterList(),x=S.getText();w=g();var O=new l({key:w,text:x,characterList:k,parent:v,nextSibling:_});e.contentBlocks.push(O),S=S.withMutations(function(e){e.set("characterList",C()).set("text","").set("children",S.children.push(O.getKey()))})}e.contentBlocks[E]=S.set("children",S.children.push(_))}var T=new i({key:_,parent:v,type:m,depth:y,text:a,characterList:h,prevSibling:w||(0===s||n[s-1].parent!==v?null:n[s-1].key),nextSibling:s===n.length-1||n[s+1].parent!==v?null:n[s+1].key});return e.contentBlocks.push(T),e.cacheRef[T.key]=s,e},{cacheRef:{},contentBlocks:[]}).contentBlocks}(o),entityMap:i}}},function(e,t,n){"use strict";e.exports=function(e,t){var n,r=e.getSelection(),o=r.getStartKey(),i=r.getStartOffset(),a=e.getCurrentContent(),u=o;return t>a.getBlockForKey(o).getText().length-i?(u=a.getKeyAfter(o),n=0):n=i+t,r.merge({focusKey:u,focusOffset:n})}},function(e,t,n){"use strict";var r="\\s|(?![_])"+n(128).getPunctuation(),o=new RegExp("^(?:"+r+")*(?:['‘’]|(?!"+r+").)*(?:(?!"+r+").)"),i=new RegExp("(?:(?!"+r+").)(?:['‘’]|(?!"+r+").)*(?:"+r+")*$");function a(e,t){var n=t?i.exec(e):o.exec(e);return n?n[0]:e}var u={getBackward:function(e){return a(e,!0)},getForward:function(e){return a(e,!1)}};e.exports=u},function(e,t,n){"use strict";var r=n(41),o=n(68),i=n(66),a=n(4),u=n(15);function s(e,t,n){var i=t,s=r(i);if(null!=s||e&&(e===i||e.firstChild===i)||a(!1),e===i&&((i=i.firstChild)instanceof Element&&"true"===i.getAttribute("data-contents")||a(!1),n>0&&(n=i.childNodes.length)),0===n){var c=null;if(null!=s)c=s;else{var f=function(e){for(;e.firstChild&&(e.firstChild instanceof Element&&"true"===e.firstChild.getAttribute("data-blocks")||o(e.firstChild));)e=e.firstChild;return e}(i);c=u(o(f))}return{key:c,offset:0}}var p=i.childNodes[n-1],d=null,h=null;if(o(p)){var y=function(e){for(;e.lastChild&&(e.lastChild instanceof Element&&"true"===e.lastChild.getAttribute("data-blocks")||o(e.lastChild));)e=e.lastChild;return e}(p);d=u(o(y)),h=l(y)}else d=u(s),h=l(p);return{key:d,offset:h}}function l(e){var t=e.textContent;return"\n"===t?0:t.length}e.exports=function(e,t,n,o,a,l){var c=n.nodeType===Node.TEXT_NODE,f=a.nodeType===Node.TEXT_NODE;if(c&&f)return{selectionState:i(e,u(r(n)),o,u(r(a)),l),needsRecovery:!1};var p=null,d=null,h=!0;return c?(p={key:u(r(n)),offset:o},d=s(t,a,l)):f?(d={key:u(r(a)),offset:l},p=s(t,n,o)):(p=s(t,n,o),d=s(t,a,l),n===a&&o===l&&(h=!!n.firstChild&&"BR"!==n.firstChild.nodeName)),{selectionState:i(e,p.key,p.offset,d.key,d.offset),needsRecovery:h}}},function(e,t,n){"use strict";var r=n(16),o=n(4);var i=r.isBrowser("Chrome")?function(e){for(var t=e.cloneRange(),n=[],r=e.endContainer;null!=r;r=r.parentNode){var i=r===e.commonAncestorContainer;i?t.setStart(e.startContainer,e.startOffset):t.setStart(t.endContainer,0);var a,u=Array.from(t.getClientRects());if(n.push(u),i)return n.reverse(),(a=[]).concat.apply(a,n);t.setEndBefore(r)}o(!1)}:function(e){return Array.from(e.getClientRects())};e.exports=i},function(e,t,n){"use strict";var r=n(37);e.exports=function(e){var t=e.getSelection();return t.isCollapsed()?null:r(e.getCurrentContent(),t)}},function(e,t,n){"use strict";var r=n(35),o=n(15);e.exports=function(e,t,n,i,a){var u=o(e.getSelection()),s=r.decode(t),l=s.blockKey,c=e.getBlockTree(l).getIn([s.decoratorKey,"leaves",s.leafKey]),f=r.decode(i),p=f.blockKey,d=e.getBlockTree(p).getIn([f.decoratorKey,"leaves",f.leafKey]),h=c.get("start"),y=d.get("start"),m=c?h+n:null,g=d?y+a:null;if(u.getAnchorKey()===l&&u.getAnchorOffset()===m&&u.getFocusKey()===p&&u.getFocusOffset()===g)return u;var v=!1;if(l===p){var _=c.get("end"),b=d.get("end");v=y===h&&b===_?a<n:y<h}else v=e.getCurrentContent().getBlockMap().keySeq().skipUntil(function(e){return e===l||e===p}).first()===p;return u.merge({anchorKey:l,anchorOffset:m,focusKey:p,focusOffset:g,isBackward:v})}},function(e,t,n){"use strict";(function(t){var r=n(4),o=/\.textClipping$/,i={"text/plain":!0,"text/html":!0,"text/rtf":!0},a=5e3;e.exports=function(e,n){var u=0,s=[];e.forEach(function(l){!function(e,n){if(t.FileReader&&(!e.type||e.type in i)){if(""===e.type){var a="";return o.test(e.name)&&(a=e.name.replace(o,"")),void n(a)}var u=new FileReader;u.onload=function(){var e=u.result;"string"!=typeof e&&r(!1),n(e)},u.onerror=function(){n("")},u.readAsText(e)}else n("")}(l,function(t){u++,t&&s.push(t.slice(0,a)),u==e.length&&n(s.join("\r"))})})}}).call(this,n(20))},function(e,t,n){"use strict";e.exports=function e(t){if(t instanceof Element){var n=t.getAttribute("data-offset-key");if(n)return n;for(var r=0;r<t.childNodes.length;r++){var o=e(t.childNodes[r]);if(o)return o}}return null}},function(e,t,n){"use strict";var r=n(147),o=n(146),i=n(30),a=new RegExp("\r\n","g"),u={"text/rtf":1,"text/html":1};function s(e){if("file"==e.kind)return e.getAsFile()}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.data=t,this.types=t.types?o(t.types):[]}return e.prototype.isRichText=function(){return!(!this.getHTML()||!this.getText())||!this.isImage()&&this.types.some(function(e){return u[e]})},e.prototype.getText=function(){var e;return this.data.getData&&(this.types.length?-1!=this.types.indexOf("text/plain")&&(e=this.data.getData("text/plain")):e=this.data.getData("Text")),e?e.replace(a,"\n"):null},e.prototype.getHTML=function(){if(this.data.getData){if(!this.types.length)return this.data.getData("Text");if(-1!=this.types.indexOf("text/html"))return this.data.getData("text/html")}},e.prototype.isLink=function(){return this.types.some(function(e){return-1!=e.indexOf("Url")||-1!=e.indexOf("text/uri-list")||e.indexOf("text/x-moz-url")})},e.prototype.getLink=function(){return this.data.getData?-1!=this.types.indexOf("text/x-moz-url")?this.data.getData("text/x-moz-url").split("\n")[0]:-1!=this.types.indexOf("text/uri-list")?this.data.getData("text/uri-list"):this.data.getData("url"):null},e.prototype.isImage=function(){var e=this.types.some(function(e){return-1!=e.indexOf("application/x-moz-file")});if(e)return!0;for(var t=this.getFiles(),n=0;n<t.length;n++){var o=t[n].type;if(!r.isImage(o))return!1}return!0},e.prototype.getCount=function(){return this.data.hasOwnProperty("items")?this.data.items.length:this.data.hasOwnProperty("mozItemCount")?this.data.mozItemCount:this.data.files?this.data.files.length:null},e.prototype.getFiles=function(){return this.data.items?Array.prototype.slice.call(this.data.items).map(s).filter(i.thatReturnsArgument):this.data.files?Array.prototype.slice.call(this.data.files):[]},e.prototype.hasFiles=function(){return this.getFiles().length>0},e}();e.exports=l},function(e,t,n){"use strict";function r(e,t){return!!t&&(e===t.documentElement||e===t.body)}var o={getTop:function(e){var t=e.ownerDocument;return r(e,t)?t.body.scrollTop||t.documentElement.scrollTop:e.scrollTop},setTop:function(e,t){var n=e.ownerDocument;r(e,n)?n.body.scrollTop=n.documentElement.scrollTop=t:e.scrollTop=t},getLeft:function(e){var t=e.ownerDocument;return r(e,t)?t.body.scrollLeft||t.documentElement.scrollLeft:e.scrollLeft},setLeft:function(e,t){var n=e.ownerDocument;r(e,n)?n.body.scrollLeft=n.documentElement.scrollLeft=t:e.scrollLeft=t}};e.exports=o},function(e,t,n){"use strict";var r=n(11)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var o=n(167),i=n(35),a=n(1),u=n(7),s=n(70),l=n(43),c=n(74),f=n(47),p=n(27),d=n(154),h=n(42),y=n(150),m=n(4),g=n(15),v=function(e,t){return e.getAnchorKey()===t||e.getFocusKey()===t},_=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.shouldComponentUpdate=function(e){return this.props.block!==e.block||this.props.tree!==e.tree||this.props.direction!==e.direction||v(e.selection,e.block.getKey())&&e.forceSelection},t.prototype.componentDidMount=function(){var e=this.props.selection,t=e.getEndKey();if(e.getHasFocus()&&t===this.props.block.getKey()){var n=u.findDOMNode(this),r=l.getScrollParent(n),o=h(r),i=void 0;if(r===window){var a=d(n);(i=a.y+a.height-y().height)>0&&window.scrollTo(o.x,o.y+i+10)}else{n instanceof HTMLElement||m(!1),(i=n.offsetHeight+n.offsetTop-(r.offsetHeight+o.y))>0&&s.setTop(r,s.getTop(r)+i+10)}}},t.prototype._renderChildren=function(){var e=this,t=this.props.block,n=t.getKey(),u=t.getText(),s=this.props.tree.size-1,l=v(this.props.selection,n);return this.props.tree.map(function(p,d){var h=p.get("leaves"),y=h.size-1,m=h.map(function(r,c){var f=i.encode(n,d,c),p=r.get("start"),h=r.get("end");return a.createElement(o,{key:f,offsetKey:f,block:t,start:p,selection:l?e.props.selection:null,forceSelection:e.props.forceSelection,text:u.slice(p,h),styleSet:t.getInlineStyleAt(p),customStyleMap:e.props.customStyleMap,customStyleFn:e.props.customStyleFn,isLast:d===s&&c===y})}).toArray(),v=p.get("decoratorKey");if(null==v)return m;if(!e.props.decorator)return m;var _=g(e.props.decorator),b=_.getComponentForKey(v);if(!b)return m;var w=_.getPropsForKey(v),C=i.encode(n,d,0),E=u.slice(h.first().get("start"),h.last().get("end")),S=f.getHTMLDirIfDifferent(c.getDirection(E),e.props.direction);return a.createElement(b,r({},w,{contentState:e.props.contentState,decoratedText:E,dir:S,key:C,entityKey:t.getEntityAt(p.get("start")),offsetKey:C}),m)}).toArray()},t.prototype.render=function(){var e=this.props,t=e.direction,n=e.offsetKey,r=p({"public/DraftStyleDefault/block":!0,"public/DraftStyleDefault/ltr":"LTR"===t,"public/DraftStyleDefault/rtl":"RTL"===t});return a.createElement("div",{"data-offset-key":n,className:r},this._renderChildren())},t}(a.Component);e.exports=_},function(e,t,n){"use strict";e.exports=function(e){var t=e.getSelection(),n=t.getAnchorKey(),r=e.getBlockTree(n),o=t.getStartOffset(),i=!1;return r.some(function(e){return o===e.get("start")?(i=!0,!0):o<e.get("end")&&e.get("leaves").some(function(e){var t=e.get("start");return o===t&&(i=!0,!0)})}),i}},function(e,t,n){"use strict";e.exports={BOLD:{fontWeight:"bold"},CODE:{fontFamily:"monospace",wordWrap:"break-word"},ITALIC:{fontStyle:"italic"},STRIKETHROUGH:{textDecoration:"line-through"},UNDERLINE:{textDecoration:"underline"}}},function(e,t,n){"use strict";var r=n(47),o=n(4),i="֐־׀׃׆׈-׏א-ת׫-ׯװ-ײ׳-״׵-׿߀-߉ߊ-ߪߴ-ߵߺ߻-߿ࠀ-ࠕࠚࠤࠨ࠮-࠯࠰-࠾࠿ࡀ-ࡘ࡜-࡝࡞࡟-࢟‏יִײַ-ﬨשׁ-זּ﬷טּ-לּ﬽מּ﬿נּ-סּ﭂ףּ-פּ﭅צּ-ﭏ",a="؈؋؍؛؜؝؞-؟ؠ-ؿـف-ي٭ٮ-ٯٱ-ۓ۔ەۥ-ۦۮ-ۯۺ-ۼ۽-۾ۿ܀-܍܎܏ܐܒ-ܯ݋-݌ݍ-ޥޱ޲-޿ࢠ-ࢲࢳ-ࣣﭐ-ﮱ﮲-﯁﯂-﯒ﯓ-ﴽ﵀-﵏ﵐ-ﶏ﶐-﶑ﶒ-ﷇ﷈-﷏ﷰ-ﷻ﷼﷾-﷿ﹰ-ﹴ﹵ﹶ-ﻼ﻽-﻾",u=new RegExp("["+"A-Za-zªµºÀ-ÖØ-öø-ƺƻƼ-ƿǀ-ǃǄ-ʓʔʕ-ʯʰ-ʸʻ-ˁː-ˑˠ-ˤˮͰ-ͳͶ-ͷͺͻ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҂Ҋ-ԯԱ-Ֆՙ՚-՟ա-և։ःऄ-हऻऽा-ीॉ-ौॎ-ॏॐक़-ॡ।-॥०-९॰ॱॲ-ঀং-ঃঅ-ঌএ-ঐও-নপ-রলশ-হঽা-ীে-ৈো-ৌৎৗড়-ঢ়য়-ৡ০-৯ৰ-ৱ৴-৹৺ਃਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹਾ-ੀਖ਼-ੜਫ਼੦-੯ੲ-ੴઃઅ-ઍએ-ઑઓ-નપ-રલ-ળવ-હઽા-ીૉો-ૌૐૠ-ૡ૦-૯૰ଂ-ଃଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହଽାୀେ-ୈୋ-ୌୗଡ଼-ଢ଼ୟ-ୡ୦-୯୰ୱ୲-୷ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹா-ிு-ூெ-ைொ-ௌௐௗ௦-௯௰-௲ఁ-ఃఅ-ఌఎ-ఐఒ-నప-హఽు-ౄౘ-ౙౠ-ౡ౦-౯౿ಂ-ಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽಾಿೀ-ೄೆೇ-ೈೊ-ೋೕ-ೖೞೠ-ೡ೦-೯ೱ-ೲം-ഃഅ-ഌഎ-ഐഒ-ഺഽാ-ീെ-ൈൊ-ൌൎൗൠ-ൡ൦-൯൰-൵൹ൺ-ൿං-ඃඅ-ඖක-නඳ-රලව-ෆා-ෑෘ-ෟ෦-෯ෲ-ෳ෴ก-ะา-ำเ-ๅๆ๏๐-๙๚-๛ກ-ຂຄງ-ຈຊຍດ-ທນ-ຟມ-ຣລວສ-ຫອ-ະາ-ຳຽເ-ໄໆ໐-໙ໜ-ໟༀ༁-༃༄-༒༓༔༕-༗༚-༟༠-༩༪-༳༴༶༸༾-༿ཀ-ཇཉ-ཬཿ྅ྈ-ྌ྾-࿅࿇-࿌࿎-࿏࿐-࿔࿕-࿘࿙-࿚က-ဪါ-ာေးျ-ြဿ၀-၉၊-၏ၐ-ၕၖ-ၗၚ-ၝၡၢ-ၤၥ-ၦၧ-ၭၮ-ၰၵ-ႁႃ-ႄႇ-ႌႎႏ႐-႙ႚ-ႜ႞-႟Ⴀ-ჅჇჍა-ჺ჻ჼჽ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፠-፨፩-፼ᎀ-ᎏᎠ-Ᏼᐁ-ᙬ᙭-᙮ᙯ-ᙿᚁ-ᚚᚠ-ᛪ᛫-᛭ᛮ-ᛰᛱ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱ᜵-᜶ᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳាើ-ៅះ-ៈ។-៖ៗ៘-៚ៜ០-៩᠐-᠙ᠠ-ᡂᡃᡄ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᤣ-ᤦᤩ-ᤫᤰ-ᤱᤳ-ᤸ᥆-᥏ᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧀᧁ-ᧇᧈ-ᧉ᧐-᧙᧚ᨀ-ᨖᨙ-ᨚ᨞-᨟ᨠ-ᩔᩕᩗᩡᩣ-ᩤᩭ-ᩲ᪀-᪉᪐-᪙᪠-᪦ᪧ᪨-᪭ᬄᬅ-ᬳᬵᬻᬽ-ᭁᭃ-᭄ᭅ-ᭋ᭐-᭙᭚-᭠᭡-᭪᭴-᭼ᮂᮃ-ᮠᮡᮦ-ᮧ᮪ᮮ-ᮯ᮰-᮹ᮺ-ᯥᯧᯪ-ᯬᯮ᯲-᯳᯼-᯿ᰀ-ᰣᰤ-ᰫᰴ-ᰵ᰻-᰿᱀-᱉ᱍ-ᱏ᱐-᱙ᱚ-ᱷᱸ-ᱽ᱾-᱿᳀-᳇᳓᳡ᳩ-ᳬᳮ-ᳱᳲ-ᳳᳵ-ᳶᴀ-ᴫᴬ-ᵪᵫ-ᵷᵸᵹ-ᶚᶛ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ‎ⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℴℵ-ℸℹℼ-ℿⅅ-ⅉⅎ⅏Ⅰ-ↂↃ-ↄↅ-ↈ⌶-⍺⎕⒜-ⓩ⚬⠀-⣿Ⰰ-Ⱞⰰ-ⱞⱠ-ⱻⱼ-ⱽⱾ-ⳤⳫ-ⳮⳲ-ⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯ⵰ⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々〆〇〡-〩〮-〯〱-〵〸-〺〻〼ぁ-ゖゝ-ゞゟァ-ヺー-ヾヿㄅ-ㄭㄱ-ㆎ㆐-㆑㆒-㆕㆖-㆟ㆠ-ㆺㇰ-ㇿ㈀-㈜㈠-㈩㈪-㉇㉈-㉏㉠-㉻㉿㊀-㊉㊊-㊰㋀-㋋㋐-㋾㌀-㍶㍻-㏝㏠-㏾㐀-䶵一-鿌ꀀ-ꀔꀕꀖ-ꒌꓐ-ꓷꓸ-ꓽ꓾-꓿ꔀ-ꘋꘌꘐ-ꘟ꘠-꘩ꘪ-ꘫꙀ-ꙭꙮꚀ-ꚛꚜ-ꚝꚠ-ꛥꛦ-ꛯ꛲-꛷Ꜣ-ꝯꝰꝱ-ꞇ꞉-꞊Ꞌ-ꞎꞐ-ꞭꞰ-Ʇꟷꟸ-ꟹꟺꟻ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꠣ-ꠤꠧ꠰-꠵꠶-꠷ꡀ-ꡳꢀ-ꢁꢂ-ꢳꢴ-ꣃ꣎-꣏꣐-꣙ꣲ-ꣷ꣸-꣺ꣻ꤀-꤉ꤊ-ꤥ꤮-꤯ꤰ-ꥆꥒ-꥓꥟ꥠ-ꥼꦃꦄ-ꦲꦴ-ꦵꦺ-ꦻꦽ-꧀꧁-꧍ꧏ꧐-꧙꧞-꧟ꧠ-ꧤꧦꧧ-ꧯ꧰-꧹ꧺ-ꧾꨀ-ꨨꨯ-ꨰꨳ-ꨴꩀ-ꩂꩄ-ꩋꩍ꩐-꩙꩜-꩟ꩠ-ꩯꩰꩱ-ꩶ꩷-꩹ꩺꩻꩽꩾ-ꪯꪱꪵ-ꪶꪹ-ꪽꫀꫂꫛ-ꫜꫝ꫞-꫟ꫠ-ꫪꫫꫮ-ꫯ꫰-꫱ꫲꫳ-ꫴꫵꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚ꭛ꭜ-ꭟꭤ-ꭥꯀ-ꯢꯣ-ꯤꯦ-ꯧꯩ-ꯪ꯫꯬꯰-꯹가-힣ힰ-ퟆퟋ-ퟻ-豈-舘並-龎ﬀ-ﬆﬓ-ﬗＡ-Ｚａ-ｚｦ-ｯｰｱ-ﾝﾞ-ﾟﾠ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ"+i+a+"]"),s=new RegExp("["+i+a+"]");function l(e){var t=u.exec(e);return null==t?null:t[0]}function c(e){var t=l(e);return null==t?r.NEUTRAL:s.exec(t)?r.RTL:r.LTR}function f(e,t){if(t=t||r.NEUTRAL,!e.length)return t;var n=c(e);return n===r.NEUTRAL?t:n}function p(e,t){return t||(t=r.getGlobalDir()),r.isStrong(t)||o(!1),f(e,t)}var d={firstStrongChar:l,firstStrongCharDir:c,resolveBlockDir:f,getDirection:p,isDirectionLTR:function(e,t){return p(e,t)===r.LTR},isDirectionRTL:function(e,t){return p(e,t)===r.RTL}};e.exports=d},function(e,t,n){"use strict";var r=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getType=function(){return this.get("type")},t.prototype.getMutability=function(){return this.get("mutability")},t.prototype.getData=function(){return this.get("data")},t}((0,n(5).Record)({type:"TOKEN",mutability:"IMMUTABLE",data:Object}));e.exports=r},function(e,t,n){"use strict";var r=n(5),o=n(30),i=n(33),a=r.List,u=r.Repeat,s=r.Record,l=o.thatReturnsTrue,c=s({start:null,end:null}),f=s({start:null,end:null,decoratorKey:null,leaves:null}),p={generate:function(e,t,n){var r=t.getLength();if(!r)return a.of(new f({start:0,end:0,decoratorKey:null,leaves:a.of(new c({start:0,end:0}))}));var o=[],s=n?n.getDecorations(t,e):a(u(null,r)),p=t.getCharacterList();return i(s,d,l,function(e,t){var n,r,u,h;o.push(new f({start:e,end:t,decoratorKey:s.get(e),leaves:(n=p.slice(e,t).toList(),r=e,u=[],h=n.map(function(e){return e.getStyle()}).toList(),i(h,d,l,function(e,t){u.push(new c({start:e+r,end:t+r}))}),a(u))}))}),a(o)},getFingerprint:function(e){return e.map(function(e){var t=e.get("decoratorKey");return(null!==t?t+"."+(e.get("end")-e.get("start")):"")+"."+e.get("leaves").size}).join("-")}};function d(e,t){return e===t}e.exports=p},function(e,t,n){"use strict";var r=n(13);e.exports=function(e,t){if(!(e instanceof r))return null;var n=e.getNextSiblingKey();if(n)return n;var o=e.getParentKey();if(!o)return null;for(var i=t.get(o);i&&!i.getNextSiblingKey();){var a=i.getParentKey();i=a?t.get(a):null}return i?i.getNextSiblingKey():null}},function(e,t,n){"use strict";e.exports=function(e,t,n){if(n===e.count())t.forEach(function(t){e=e.push(t)});else if(0===n)t.reverse().forEach(function(t){e=e.unshift(t)});else{var r=e.slice(0,n),o=e.slice(n);e=r.concat(t,o).toList()}return e}},function(e,t,n){"use strict";var r=n(12),o=n(33),i=n(4);function a(e,t,n){var a=t.getCharacterList(),u=n>0?a.get(n-1):void 0,s=n<a.count()?a.get(n):void 0,l=u?u.getEntity():void 0,c=s?s.getEntity():void 0;if(c&&c===l&&"MUTABLE"!==e.__get(c).getMutability()){for(var f,p=function(e,t,n){var r;return o(e,function(e,t){return e.getEntity()===t.getEntity()},function(e){return e.getEntity()===t},function(e,t){e<=n&&t>=n&&(r={start:e,end:t})}),"object"!=typeof r&&i(!1),r}(a,c,n),d=p.start,h=p.end;d<h;)f=a.get(d),a=a.set(d,r.applyEntity(f,null)),d++;return t.set("characterList",a)}return t}e.exports=function(e,t){var n=e.getBlockMap(),r=e.getEntityMap(),o={},i=t.getStartKey(),u=t.getStartOffset(),s=n.get(i),l=a(r,s,u);l!==s&&(o[i]=l);var c=t.getEndKey(),f=t.getEndOffset(),p=n.get(c);i===c&&(p=l);var d=a(r,p,f);return d!==p&&(o[c]=d),Object.keys(o).length?e.merge({blockMap:n.merge(o),selectionAfter:t}):e.set("selectionAfter",t)}},function(e,t,n){"use strict";var r=n(13),o=n(5),i=n(21),a=o.OrderedMap;e.exports=function(e){return e.first()instanceof r?function(e){var t={},n=void 0;return a(e.withMutations(function(e){e.forEach(function(r,o){var a=r.getKey(),u=r.getNextSiblingKey(),s=r.getPrevSiblingKey(),l=r.getChildKeys(),c=r.getParentKey(),f=i();if(t[a]=f,u&&(e.get(u)?e.setIn([u,"prevSibling"],f):e.setIn([a,"nextSibling"],null)),s&&(e.get(s)?e.setIn([s,"nextSibling"],f):e.setIn([a,"prevSibling"],null)),c&&e.get(c)){var p=e.get(c).getChildKeys();e.setIn([c,"children"],p.set(p.indexOf(r.getKey()),f))}else e.setIn([a,"parent"],null),n&&(e.setIn([n.getKey(),"nextSibling"],f),e.setIn([a,"prevSibling"],t[n.getKey()])),n=e.get(a);l.forEach(function(t){e.get(t)?e.setIn([t,"parent"],f):e.setIn([a,"children"],r.getChildKeys().filter(function(e){return e!==t}))})})}).toArray().map(function(e){return[t[e.getKey()],e.set("key",t[e.getKey()])]}))}(e):function(e){return a(e.toArray().map(function(e){var t=i();return[t,e.set("key",t)]}))}(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.canUseDOM=void 0;var r,o=n(191);var i=((r=o)&&r.__esModule?r:{default:r}).default,a=i.canUseDOM?window.HTMLElement:{};t.canUseDOM=i.canUseDOM;t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertNodeList=u,t.setElement=function(e){var t=e;if("string"==typeof t){var n=document.querySelectorAll(t);u(n,t),t="length"in n?n[0]:n}return a=t||a},t.validateElement=s,t.hide=function(e){s(e)&&(e||a).setAttribute("aria-hidden","true")},t.show=function(e){s(e)&&(e||a).removeAttribute("aria-hidden")},t.documentNotReadyOrSSRTesting=function(){a=null},t.resetForTesting=function(){a=null};var r,o=n(3),i=(r=o)&&r.__esModule?r:{default:r};var a=null;function u(e,t){if(!e||!e.length)throw new Error("react-modal: No elements were found for selector "+t+".")}function s(e){return!(!e&&!a)||((0,i.default)(!1,["react-modal: App element is not defined.","Please use `Modal.setAppElement(el)` or set `appElement={el}`.","This is needed so screen readers don't see main content","when modal is opened. It is not recommended, but you can opt-out","by setting `ariaHideApp={false}`."].join(" ")),!1)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return[].slice.call(e.querySelectorAll("*"),0).filter(a)};
/*!
 * Adapted from jQuery UI core
 *
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
var r=/input|select|textarea|button|object/;function o(e){var t=e.offsetWidth<=0&&e.offsetHeight<=0;if(t&&!e.innerHTML)return!0;var n=window.getComputedStyle(e);return t?"visible"!==n.getPropertyValue("overflow"):"none"==n.getPropertyValue("display")}function i(e,t){var n=e.nodeName.toLowerCase();return(r.test(n)&&!e.disabled||"a"===n&&e.href||t)&&function(e){for(var t=e;t&&t!==document.body;){if(o(t))return!1;t=t.parentNode}return!0}(e)}function a(e){var t=e.getAttribute("tabindex");null===t&&(t=void 0);var n=isNaN(t);return(n||t>=0)&&i(e,!n)}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(196),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default,e.exports=t.default},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactRouterDom=__webpack_require__(22),_Header=__webpack_require__(18),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(17),_Footer2=_interopRequireDefault(_Footer),_JobsPage=__webpack_require__(24),_JobsPage2=_interopRequireDefault(_JobsPage),_axios=__webpack_require__(29),_axios2=_interopRequireDefault(_axios),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var Login=function(_React$Component){function Login(e){_classCallCheck(this,Login);var t=_possibleConstructorReturn(this,(Login.__proto__||Object.getPrototypeOf(Login)).call(this,e));return t.submitLoginForm=t.submitLoginForm.bind(t),t.handleEmailChange=t.handleEmailChange.bind(t),t.handlePasswordChange=t.handlePasswordChange.bind(t),t.state={email:"",password:"",responseData:{},redirectToDashboard:!1},t}return _inherits(Login,_React$Component),_createClass(Login,[{key:"submitLoginForm",value:function(e){var t=this;e.preventDefault(),(0,_axios2.default)({method:"post",url:"http://127.0.0.1:8000/token-auth/",data:{email:this.state.email,password:this.state.password},responseType:"json"}).then(function(e){if(200===e.status)return t.setState({redirectToDashboard:!0}),t.setState({responseData:e.data}),localStorage.setItem("responseToken",e.data.token),localStorage.setItem("responseEmail",e.data.user.email),console.log(t.state.responseData),_react2.default.createElement(_reactRouterDom.Redirect,{to:"/employer_dashboard"})}).catch(function(e){console.log("this is an error yo",e)})}},{key:"handleEmailChange",value:function(e){e.preventDefault(),this.setState({email:e.target.value})}},{key:"handlePasswordChange",value:function(e){e.preventDefault(),this.setState({password:e.target.value})}},{key:"render",value:function(){return this.state.redirectToDashboard?_react2.default.createElement(_reactRouterDom.Redirect,{to:"/employer_dashboard"}):_react2.default.createElement("div",{id:"login-wrapper"},_react2.default.createElement("form",{onSubmit:this.submitLoginForm,id:"login-form"},_react2.default.createElement("div",{id:"login-header"},_react2.default.createElement("h1",null,"Login")),_react2.default.createElement("div",{id:"login-body"},_react2.default.createElement("fieldset",null,_react2.default.createElement("label",{for:"email_field"},"Email"),_react2.default.createElement("input",{type:"email",id:"email_field",onChange:this.handleEmailChange,className:"login-input login-input-one"})),_react2.default.createElement("fieldset",null,_react2.default.createElement("label",{for:"password_field"},"Password"),_react2.default.createElement("input",{type:"password",id:"password_field",onChange:this.handlePasswordChange,className:"login-input login-input-two"})),_react2.default.createElement("fieldset",null,_react2.default.createElement("input",{type:"submit",id:"login-submit"})))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Login}(_react2.default.Component),_default=Login,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(Login,"Login","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Login.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Login.js"),leaveModule(module))}).call(this,__webpack_require__(9)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(7),_reactDom2=_interopRequireDefault(_reactDom),_reactRouterDom=__webpack_require__(22),_Header=__webpack_require__(18),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(17),_Footer2=_interopRequireDefault(_Footer),_JobsPage=__webpack_require__(24),_JobsPage2=_interopRequireDefault(_JobsPage),_axios=__webpack_require__(29),_axios2=_interopRequireDefault(_axios),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var Register=function(_React$Component){function Register(e){_classCallCheck(this,Register);var t=_possibleConstructorReturn(this,(Register.__proto__||Object.getPrototypeOf(Register)).call(this,e));return t.submitRegisterForm=t.submitRegisterForm.bind(t),t.handleFirstNameChange=t.handleFirstNameChange.bind(t),t.handleLastNameChange=t.handleLastNameChange.bind(t),t.handleEmailChange=t.handleEmailChange.bind(t),t.handlePasswordChange=t.handlePasswordChange.bind(t),t.handleUserTypeEmployee=t.handleUserTypeEmployee.bind(t),t.handleUserTypeEmployer=t.handleUserTypeEmployer.bind(t),t.state={first_name:"",last_name:"",email:"",password:"",user_type:"",redirectToDashboard:!1},t}return _inherits(Register,_React$Component),_createClass(Register,[{key:"submitRegisterForm",value:function(e){var t=this;e.preventDefault();_axios2.default.defaults.xsrfCookieName="csrftoken",_axios2.default.defaults.xsrfHeaderName="X-CSRFToken",this.state.email?(this.state.password,console.log("")):console.log("email cannot be empty"),(0,_axios2.default)({method:"post",url:"http://127.0.0.1:8000/authenticate/users/",data:{first_name:this.state.first_name,last_name:this.state.last_name,email:this.state.email,password:this.state.password,user_type:this.state.user_type},responseType:"json"}).then(function(e){if(201===e.status)return console.log("good email and password"),t.setState({redirectToDashboard:!0}),_react2.default.createElement(_reactRouterDom.Redirect,{to:"/employer_dashboard"})}).catch(function(e){console.log("this is an error yo",e)})}},{key:"handleFirstNameChange",value:function(e){this.setState({first_name:e.target.value})}},{key:"handleLastNameChange",value:function(e){this.setState({last_name:e.target.value})}},{key:"handleEmailChange",value:function(e){this.setState({email:e.target.value})}},{key:"handlePasswordChange",value:function(e){this.setState({password:e.target.value})}},{key:"handleUserTypeEmployee",value:function(e){this.setState({user_type:"employee"})}},{key:"handleUserTypeEmployer",value:function(e){this.setState({user_type:"emmployer"})}},{key:"render",value:function(){return this.state.redirectToDashboard?_react2.default.createElement(_reactRouterDom.Redirect,{to:"/employer_dashboard"}):_react2.default.createElement("div",{id:"register_wrapper"},_react2.default.createElement("form",{onSubmit:this.submitRegisterForm,id:"register-form"},_react2.default.createElement("div",{id:"register-header"},_react2.default.createElement("h1",null,"Register")),_react2.default.createElement("div",{id:"register-body"},_react2.default.createElement("fieldset",null,_react2.default.createElement("label",{for:"id_first_name"},"First Name"),_react2.default.createElement("input",{type:"text",name:"first_name",id:"id_first_name",className:"register-input",maxlength:"32",onChange:this.handleFirstNameChange,value:this.state.first_name})),_react2.default.createElement("fieldset",null,_react2.default.createElement("label",{for:"id_last_name"},"Last Name"),_react2.default.createElement("input",{type:"text",name:"last_name",id:"id_last_name",className:"register-input",onChange:this.handleLastNameChange,value:this.state.last_name,maxlength:"32"})),_react2.default.createElement("fieldset",null,_react2.default.createElement("label",{for:"email_field"},"Email:"),_react2.default.createElement("input",{type:"email",id:"email_field",onChange:this.handleEmailChange,value:this.state.email,className:"register-input register-input-one"})),_react2.default.createElement("fieldset",null,_react2.default.createElement("label",{for:"password_field"},"Password:"),_react2.default.createElement("input",{type:"password",id:"password_field",onChange:this.handlePasswordChange,value:this.state.password,className:"register-input register-input-two"})),_react2.default.createElement("fieldset",null,_react2.default.createElement("p",null,"Are you an:"),_react2.default.createElement("div",null,_react2.default.createElement("label",{for:"typeEmployee"},"Employee"),_react2.default.createElement("input",{type:"radio",name:"user_type",value:"employee",id:"typeEmployee",onChange:this.handleUserTypeEmployee})),_react2.default.createElement("div",null,_react2.default.createElement("label",{for:"typeEmployer"},"Employer"),_react2.default.createElement("input",{type:"radio",name:"user_type",value:"employer",id:"typeEmployer",onChange:this.handleUserTypeEmployer}))),_react2.default.createElement("fieldset",null,_react2.default.createElement("input",{type:"submit",id:"register-submit"})))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Register}(_react2.default.Component),_default=Register,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(Register,"Register","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Register.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Register.js"),leaveModule(module))}).call(this,__webpack_require__(9)(module))},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";var r=n(220);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(14),o=n(221),i=n(219),a=n(218),u=n(217),s=n(89),l="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(216);e.exports=function(e){return new Promise(function(t,c){var f=e.data,p=e.headers;r.isFormData(f)&&delete p["Content-Type"];var d=new XMLHttpRequest,h="onreadystatechange",y=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||u(e.url)||(d=new window.XDomainRequest,h="onload",y=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var m=e.auth.username||"",g=e.auth.password||"";p.Authorization="Basic "+l(m+":"+g)}if(d.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[h]=function(){if(d&&(4===d.readyState||y)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:e,request:d};o(t,c,r),d=null}},d.onerror=function(){c(s("Network Error",e,null,d)),d=null},d.ontimeout=function(){c(s("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var v=n(215),_=(e.withCredentials||u(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;_&&(p[e.xsrfHeaderName]=_)}if("setRequestHeader"in d&&r.forEach(p,function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete p[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),c(e),d=null)}),void 0===f&&(f=null),d.send(f)})}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var s,l=[],c=!1,f=-1;function p(){c&&s&&(c=!1,s.length?l=s.concat(l):f=-1,l.length&&d())}function d(){if(!c){var e=u(p);c=!0;for(var t=l.length;t;){for(s=l,l=[];++f<t;)s&&s[f].run();f=-1,t=l.length}s=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new h(e,t)),1!==l.length||c||u(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r,o=i(n(1));i(n(7));function i(e){return e&&e.__esModule?e:{default:e}}function a(e){return o.default.createElement("div",{className:"single-job"},o.default.createElement("div",{className:"front-list-title"},o.default.createElement("h2",null,e.jobTitle),o.default.createElement("p",null,e.jobCompany)),o.default.createElement("div",{className:"front-list-middle"},o.default.createElement("p",null,e.jobSlug),o.default.createElement("div",{className:"front-list-details"},o.default.createElement("div",{className:"front-list-description-group"},o.default.createElement("i",{className:"far fa-clock front-list-icon"}),o.default.createElement("p",null,e.jobHours)),o.default.createElement("div",{className:"front-list-description-group"},o.default.createElement("i",{className:"fas fa-flask front-list-icon"}),o.default.createElement("p",null,e.jobArea)),o.default.createElement("div",{className:"front-list-description-group"},o.default.createElement("i",{className:"fas fa-map-marker-alt front-list-icon"}),o.default.createElement("p",null,"Location: London")),o.default.createElement("div",{className:"front-list-description-group"},o.default.createElement("i",{className:"fas fa-dollar-sign front-list-icon"}),o.default.createElement("p",null,"Salary: Negotiable")))),o.default.createElement("div",{className:"front-listing-company-logo"},o.default.createElement("i",{className:"far fa-building"})))}(r=n(2).enterModule)&&r(e);var u,s,l=a;t.default=l,u=n(2).default,s=n(2).leaveModule,u&&(u.register(a,"SingleJob","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/jobs/SingleJob.js"),u.register(l,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/jobs/SingleJob.js"),s(e))}).call(this,n(9)(e))},function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,u=a&&a(Object);return function s(l,c,f){if("string"!=typeof c){if(u){var p=a(c);p&&p!==u&&s(l,p,f)}var d=r(c);o&&(d=d.concat(o(c)));for(var h=0;h<d.length;++h){var y=d[h];if(!(e[y]||t[y]||f&&f[y])){var m=i(c,y);try{n(l,y,m)}catch(e){}}}return l}return l}}()},function(e,t,n){var r=n(227);e.exports=d,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t))},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(u+=e.slice(a,d),a=d+f.length,p)u+=p[1];else{var h=e[a],y=n[2],m=n[3],g=n[4],v=n[5],_=n[6],b=n[7];u&&(r.push(u),u="");var w=null!=y&&null!=h&&h!==y,C="+"===_||"*"===_,E="?"===_||"*"===_,S=n[2]||c,k=g||v;r.push({name:m||i++,prefix:y||"",delimiter:S,optional:E,repeat:C,partial:w,asterisk:!!b,pattern:k?l(k):b?".*":"[^"+s(S)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",u=n||{},s=(o||{}).pretty?a:encodeURIComponent,l=0;l<e.length;l++){var c=e[l];if("string"!=typeof c){var f,p=u[c.name];if(null==p){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=s(p[d]),!t[l].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===d?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(p).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):s(p),!t[l].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function s(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function l(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var l=e[u];if("string"==typeof l)a+=s(l);else{var p=s(l.prefix),d="(?:"+l.pattern+")";t.push(l),l.repeat&&(d+="(?:"+p+d+")*"),a+=d=l.optional?l.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=s(n.delimiter||"/"),y=a.slice(-h.length)===h;return o||(a=(y?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&y?"":"(?="+h+"|$)",c(new RegExp("^"+a,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(d(e[o],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=l(n(3)),a=n(19),u=n(52),s=l(n(51));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e,t,n){return Math.min(Math.max(e,t),n)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,l=void 0===n?["/"]:n,f=e.initialIndex,p=void 0===f?0:f,d=e.keyLength,h=void 0===d?6:d,y=(0,s.default)(),m=function(e){o(C,e),C.length=C.entries.length,y.notifyListeners(C.location,C.action)},g=function(){return Math.random().toString(36).substr(2,h)},v=c(p,0,l.length-1),_=l.map(function(e){return"string"==typeof e?(0,u.createLocation)(e,void 0,g()):(0,u.createLocation)(e,void 0,e.key||g())}),b=a.createPath,w=function(e){var n=c(C.index+e,0,C.entries.length-1),r=C.entries[n];y.confirmTransitionTo(r,"POP",t,function(e){e?m({action:"POP",location:r,index:n}):m()})},C={length:_.length,action:"POP",location:_[v],index:v,entries:_,createHref:b,push:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,u.createLocation)(e,n,g(),C.location);y.confirmTransitionTo(o,"PUSH",t,function(e){if(e){var t=C.index+1,n=C.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),m({action:"PUSH",location:o,index:t,entries:n})}})},replace:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,u.createLocation)(e,n,g(),C.location);y.confirmTransitionTo(o,"REPLACE",t,function(e){e&&(C.entries[C.index]=o,m({action:"REPLACE",location:o}))})},go:w,goBack:function(){return w(-1)},goForward:function(){return w(1)},canGo:function(e){var t=C.index+e;return t>=0&&t<C.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return y.setPrompt(e)},listen:function(e){return y.appendListener(e)}};return C}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=c(n(3)),i=c(n(8)),a=n(52),u=n(19),s=c(n(51)),l=n(94);function c(e){return e&&e.__esModule?e:{default:e}}var f={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,u.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:u.stripLeadingSlash,decodePath:u.addLeadingSlash},slash:{encodePath:u.addLeadingSlash,decodePath:u.addLeadingSlash}},p=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},d=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(l.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,l.supportsGoWithoutReloadUsingHash)(),c=e.getUserConfirmation,h=void 0===c?l.getConfirmation:c,y=e.hashType,m=void 0===y?"slash":y,g=e.basename?(0,u.stripTrailingSlash)((0,u.addLeadingSlash)(e.basename)):"",v=f[m],_=v.encodePath,b=v.decodePath,w=function(){var e=b(p());return(0,o.default)(!g||(0,u.hasBasename)(e,g),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+g+'".'),g&&(e=(0,u.stripBasename)(e,g)),(0,a.createLocation)(e)},C=(0,s.default)(),E=function(e){r(I,e),I.length=t.length,C.notifyListeners(I.location,I.action)},S=!1,k=null,x=function(){var e=p(),t=_(e);if(e!==t)d(t);else{var n=w(),r=I.location;if(!S&&(0,a.locationsAreEqual)(r,n))return;if(k===(0,u.createPath)(n))return;k=null,O(n)}},O=function(e){S?(S=!1,E()):C.confirmTransitionTo(e,"POP",h,function(t){t?E({action:"POP",location:e}):T(e)})},T=function(e){var t=I.location,n=j.lastIndexOf((0,u.createPath)(t));-1===n&&(n=0);var r=j.lastIndexOf((0,u.createPath)(e));-1===r&&(r=0);var o=n-r;o&&(S=!0,P(o))},M=p(),R=_(M);M!==R&&d(R);var D=w(),j=[(0,u.createPath)(D)],P=function(e){(0,o.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},A=0,L=function(e){1===(A+=e)?(0,l.addEventListener)(window,"hashchange",x):0===A&&(0,l.removeEventListener)(window,"hashchange",x)},N=!1,I={length:t.length,action:"POP",location:D,createHref:function(e){return"#"+_(g+(0,u.createPath)(e))},push:function(e,t){(0,o.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,I.location);C.confirmTransitionTo(n,"PUSH",h,function(e){if(e){var t=(0,u.createPath)(n),r=_(g+t);if(p()!==r){k=t,function(e){window.location.hash=e}(r);var i=j.lastIndexOf((0,u.createPath)(I.location)),a=j.slice(0,-1===i?0:i+1);a.push(t),j=a,E({action:"PUSH",location:n})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),E()}})},replace:function(e,t){(0,o.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,I.location);C.confirmTransitionTo(n,"REPLACE",h,function(e){if(e){var t=(0,u.createPath)(n),r=_(g+t);p()!==r&&(k=t,d(r));var o=j.indexOf((0,u.createPath)(I.location));-1!==o&&(j[o]=t),E({action:"REPLACE",location:n})}})},go:P,goBack:function(){return P(-1)},goForward:function(){return P(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=C.setPrompt(e);return N||(L(1),N=!0),function(){return N&&(N=!1,L(-1)),t()}},listen:function(e){var t=C.appendListener(e);return L(1),function(){L(-1),t()}}};return I}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=f(n(3)),a=f(n(8)),u=n(52),s=n(19),l=f(n(51)),c=n(94);function f(e){return e&&e.__esModule?e:{default:e}}var p=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(c.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,c.supportsHistory)(),f=!(0,c.supportsPopStateOnHashChange)(),d=e.forceRefresh,h=void 0!==d&&d,y=e.getUserConfirmation,m=void 0===y?c.getConfirmation:y,g=e.keyLength,v=void 0===g?6:g,_=e.basename?(0,s.stripTrailingSlash)((0,s.addLeadingSlash)(e.basename)):"",b=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return(0,i.default)(!_||(0,s.hasBasename)(a,_),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+_+'".'),_&&(a=(0,s.stripBasename)(a,_)),(0,u.createLocation)(a,r,n)},w=function(){return Math.random().toString(36).substr(2,v)},C=(0,l.default)(),E=function(e){o(N,e),N.length=t.length,C.notifyListeners(N.location,N.action)},S=function(e){(0,c.isExtraneousPopstateEvent)(e)||O(b(e.state))},k=function(){O(b(p()))},x=!1,O=function(e){x?(x=!1,E()):C.confirmTransitionTo(e,"POP",m,function(t){t?E({action:"POP",location:e}):T(e)})},T=function(e){var t=N.location,n=R.indexOf(t.key);-1===n&&(n=0);var r=R.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(x=!0,j(o))},M=b(p()),R=[M.key],D=function(e){return _+(0,s.createPath)(e)},j=function(e){t.go(e)},P=0,A=function(e){1===(P+=e)?((0,c.addEventListener)(window,"popstate",S),f&&(0,c.addEventListener)(window,"hashchange",k)):0===P&&((0,c.removeEventListener)(window,"popstate",S),f&&(0,c.removeEventListener)(window,"hashchange",k))},L=!1,N={length:t.length,action:"POP",location:M,createHref:D,push:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,u.createLocation)(e,o,w(),N.location);C.confirmTransitionTo(a,"PUSH",m,function(e){if(e){var r=D(a),o=a.key,u=a.state;if(n)if(t.pushState({key:o,state:u},null,r),h)window.location.href=r;else{var s=R.indexOf(N.location.key),l=R.slice(0,-1===s?0:s+1);l.push(a.key),R=l,E({action:"PUSH",location:a})}else(0,i.default)(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,u.createLocation)(e,o,w(),N.location);C.confirmTransitionTo(a,"REPLACE",m,function(e){if(e){var r=D(a),o=a.key,u=a.state;if(n)if(t.replaceState({key:o,state:u},null,r),h)window.location.replace(r);else{var s=R.indexOf(N.location.key);-1!==s&&(R[s]=a.key),E({action:"REPLACE",location:a})}else(0,i.default)(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:j,goBack:function(){return j(-1)},goForward:function(){return j(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=C.setPrompt(e);return L||(A(1),L=!0),function(){return L&&(L=!1,A(-1)),t()}},listen:function(e){var t=C.appendListener(e);return A(1),function(){A(-1),t()}}};return N}},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactModal=__webpack_require__(84),_reactModal2=_interopRequireDefault(_reactModal),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module),_reactModal2.default.setAppElement("#app");var NewCompanyModal=function(_React$Component){function NewCompanyModal(e){_classCallCheck(this,NewCompanyModal);var t=_possibleConstructorReturn(this,(NewCompanyModal.__proto__||Object.getPrototypeOf(NewCompanyModal)).call(this,e));return t.state={},t}return _inherits(NewCompanyModal,_React$Component),_createClass(NewCompanyModal,[{key:"render",value:function(){return _react2.default.createElement(_reactModal2.default,{isOpen:this.props.newCompanyModalIsOpen,contentLabel:"learn-path-modal",onRequestClose:this.props.closeNewCompanyModal},_react2.default.createElement("form",null,_react2.default.createElement("fieldset",null,_react2.default.createElement("label",{for:"new-company-modal-company-name"},"Company Name:"),_react2.default.createElement("input",{type:"text",id:"new-company-modal-company-name"})),_react2.default.createElement("fieldset",null,_react2.default.createElement("label",{for:"new-company-modal-company-description"},"Company Description:"),_react2.default.createElement("textarea",{id:"new-company-modal-company-description"})),_react2.default.createElement("input",{type:"submit"})))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),NewCompanyModal}(_react2.default.Component),_default=NewCompanyModal,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(NewCompanyModal,"NewCompanyModal","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/companies/NewCompanyModal.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/companies/NewCompanyModal.js"),leaveModule(module))}).call(this,__webpack_require__(9)(module))},function(e,t,n){"use strict";var r=n(64);e.exports=function(e){var t=r(e),n=0,o=0,i=0,a=0;if(t.length){if(t.length>1&&0===t[0].width){var u=t[1];n=u.top,o=u.right,i=u.bottom,a=u.left}else{var s=t[0];n=s.top,o=s.right,i=s.bottom,a=s.left}for(var l=1;l<t.length;l++){var c=t[l];0!==c.height&&0!==c.width&&(n=Math.min(n,c.top),o=Math.max(o,c.right),i=Math.max(i,c.bottom),a=Math.min(a,c.left))}}return{top:n,right:o,bottom:i,left:a,width:o-a,height:i-n}}},function(e,t,n){"use strict";var r=n(102);e.exports=function(e){var t=e.getSelection();if(!t.rangeCount)return null;var n=t.getRangeAt(0),o=r(n),i=o.top,a=o.right,u=o.bottom,s=o.left;return 0===i&&0===a&&0===u&&0===s?null:o}},function(e,t,n){"use strict";var r=n(5).OrderedSet,o=n(25).substr,i=r();e.exports=function(e,t){var n=Array(e.length).fill(i);return t&&t.forEach(function(t){for(var r=o(e,0,t.offset).length,i=r+o(e,t.offset,t.length).length;r<i;)n[r]=n[r].add(t.style),r++}),n}},function(e,t,n){"use strict";var r=n(25).substr;e.exports=function(e,t){var n=Array(e.length).fill(null);return t&&t.forEach(function(t){for(var o=r(e,0,t.offset).length,i=o+r(e,t.offset,t.length).length,a=o;a<i;a++)n[a]=t.key}),n}},function(e,t,n){"use strict";var r=n(12),o=n(5).List;e.exports=function(e,t){var n=e.map(function(e,n){var o=t[n];return r.create({style:e,entity:o})});return o(n)}},function(e,t,n){"use strict";var r=n(11)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(4),i=function(e){if(!e||!e.type)return!1;var t=e.type;return"unordered-list-item"===t||"ordered-list-item"===t},a={fromRawTreeStateToRawState:function(e){var t=e.blocks,n=[];return Array.isArray(t)||o(!1),Array.isArray(t)&&t.length?(function(e,t){for(var n=[].concat(e).reverse();n.length;){var r=n.pop();t(r);var i=r.children;Array.isArray(i)||o(!1),n=n.concat([].concat(i.reverse()))}}(t,function(e){var t=r({},e);i(e)&&(t.depth=t.depth||0,function(e){Array.isArray(e.children)&&(e.children=e.children.map(function(t){return t.type===e.type?r({},t,{depth:(e.depth||0)+1}):t}))}(e)),delete t.children,n.push(t)}),e.blocks=n,r({},e,{blocks:n})):e},fromRawStateToRawTreeState:function(e){var t={},n=[];return e.blocks.forEach(function(e){var a=i(e),u=e.depth||0,s=r({},e,{children:[]});if(!a)return t={},void n.push(s);if(t[u]=s,u>0){var l=t[u-1];return l||o(!1),void l.children.push(s)}n.push(s)}),r({},e,{blocks:n})}};e.exports=a},function(e,t,n){"use strict";var r=n(11)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(26),i=n(13),a=n(49),u=n(36),s=n(23),l=n(107),c=n(5),f=n(28),p=n(106),d=n(105),h=n(104),y=n(21),m=n(4),g=s.draft_tree_data_support,v=c.List,_=c.Map,b=c.OrderedMap,w=function(e,t){var n=e.key,r=e.type,o=e.data;return{text:e.text,depth:e.depth||0,type:r||"unstyled",key:n||y(),data:_(o),characterList:C(e,t)}},C=function(e,t){var n=e.text,o=e.entityRanges,i=e.inlineStyleRanges,a=o||[];return p(h(n,i||[]),d(n,a.filter(function(e){return t.hasOwnProperty(e.key)}).map(function(e){return r({},e,{key:t[e.key]})})))},E=function(e){return r({},e,{key:e.key||y()})},S=function(e,t,n){var o=t.map(function(e){return r({},e,{parentRef:n})});return e.concat(o.reverse())},k=function(e,t){var n=Array.isArray(e.blocks[0].children),a=g&&!n?l.fromRawStateToRawTreeState(e).blocks:e.blocks;return g?function(e,t){return e.map(E).reduce(function(n,o,a){Array.isArray(o.children)||m(!1);var u=o.children.map(E),s=new i(r({},w(o,t),{prevSibling:0===a?null:e[a-1].key,nextSibling:a===e.length-1?null:e[a+1].key,children:v(u.map(function(e){return e.key}))}));n=n.set(s.getKey(),s);for(var l=S([],u,s);l.length>0;){var c=l.pop(),f=c.parentRef,p=f.getChildKeys(),d=p.indexOf(c.key),h=Array.isArray(c.children);if(!h){h||m(!1);break}var y=c.children.map(E),g=new i(r({},w(c,t),{parent:f.getKey(),children:v(y.map(function(e){return e.key})),prevSibling:0===d?null:p.get(d-1),nextSibling:d===p.size-1?null:p.get(d+1)}));n=n.set(g.getKey(),g),l=S(l,y,g)}return n},b())}(a,t):function(e,t){return b(e.map(function(e){var n=new o(w(e,t));return[n.getKey(),n]}))}(n?l.fromRawTreeStateToRawState(e).blocks:a,t)};e.exports=function(e){Array.isArray(e.blocks)||m(!1);var t=function(e){var t=e.entityMap,n={};return Object.keys(t).forEach(function(e){var r=t[e],o=r.type,i=r.mutability,a=r.data;n[e]=u.__create(o,i,a||{})}),n}(e),n=k(e,t),r=n.isEmpty()?new f:f.createEmpty(n.first().getKey());return new a({blockMap:n,entityMap:t,selectionBefore:r,selectionAfter:r})}},function(e,t,n){"use strict";var r=n(25),o=n(33),i=function(e,t){return e===t},a=function(e){return!!e},u=[];e.exports=function(e){var t=e.getCharacterList().map(function(e){return e.getStyle()}).toList(),n=t.flatten().toSet().map(function(n){return function(e,t,n){var u=[],s=t.map(function(e){return e.has(n)}).toList();return o(s,i,a,function(t,o){var i=e.getText();u.push({offset:r.strlen(i.slice(0,t)),length:r.strlen(i.slice(t,o)),style:n})}),u}(e,t,n)});return Array.prototype.concat.apply(u,n.toJS())}},function(e,t,n){"use strict";var r=n(56),o=n(25).strlen;e.exports=function(e,t){var n=[];return e.findEntityRanges(function(e){return!!e.getEntity()},function(i,a){var u=e.getText(),s=e.getEntityAt(i);n.push({offset:o(u.slice(0,i)),length:o(u.slice(i,a)),key:Number(t[r.stringify(s)])})}),n}},function(e,t,n){"use strict";var r=n(11)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(26),i=n(13),a=n(56),u=n(110),s=n(109),l=n(4),c=function(e,t){return{key:e.getKey(),text:e.getText(),type:e.getType(),depth:e.getDepth(),inlineStyleRanges:s(e),entityRanges:u(e,t),data:e.getData().toObject()}},f=function(e,t){var n=t.entityMap,u=[],s={},f={},p=0;return e.getBlockMap().forEach(function(e){e.findEntityRanges(function(e){return null!==e.getEntity()},function(t){var r=e.getEntityAt(t),o=a.stringify(r);f[o]||(f[o]=r,n[o]=""+p,p++)}),function(e,t,n,a){if(e instanceof o)n.push(c(e,t));else{e instanceof i||l(!1);var u=e.getParentKey(),s=a[e.getKey()]=r({},c(e,t),{children:[]});u?a[u].children.push(s):n.push(s)}}(e,n,u,s)}),{blocks:u,entityMap:n}};e.exports=function(e){var t={entityMap:{},blocks:[]};return t=function(e,t){var n=t.blocks,r=t.entityMap,o={};return Object.keys(r).forEach(function(t,n){var r=e.getEntity(a.unstringify(t));o[n]={type:r.getType(),mutability:r.getMutability(),data:r.getData()}}),{blocks:n,entityMap:o}}(e,t=f(e,t))}},function(e,t,n){"use strict";var r=n(1),o=n(27),i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.shouldComponentUpdate=function(e){return this.props.text!==e.text||this.props.editorState.getSelection().getHasFocus()!==e.editorState.getSelection().getHasFocus()},t.prototype.render=function(){var e=this.props.editorState.getSelection().getHasFocus(),t=o({"public/DraftEditorPlaceholder/root":!0,"public/DraftEditorPlaceholder/hasFocus":e});return r.createElement("div",{className:t},r.createElement("div",{className:o("public/DraftEditorPlaceholder/inner"),id:this.props.accessibilityID,style:{whiteSpace:"pre-wrap"}},this.props.text))},t}(r.Component);e.exports=i},function(e,t,n){"use strict";(function(t){var r=n(63);e.exports=function(e,n){var o=t.getSelection();return 0===o.rangeCount?{selectionState:e.getSelection().set("hasFocus",!1),needsRecovery:!1}:r(e,n,o.anchorNode,o.anchorOffset,o.focusNode,o.focusOffset)}}).call(this,n(20))},function(e,t,n){"use strict";var r=n(6),o=n(7),i=n(113),a=n(4);e.exports=function(e){if(!e._blockSelectEvents&&e._latestEditorState===e.props.editorState){var t=e.props.editorState,n=o.findDOMNode(e.editorContainer);n||a(!1),n.firstChild instanceof HTMLElement||a(!1);var u=i(t,n.firstChild),s=u.selectionState;s!==t.getSelection()&&(t=u.needsRecovery?r.forceSelection(t,s):r.acceptSelection(t,s),e.update(t))}}},function(e,t,n){"use strict";var r=/\r\n?|\n/g;e.exports=function(e){return e.split(r)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r){var o=t.getStartKey(),i=t.getEndKey(),a=e.getBlockMap(),u=a.toSeq().skipUntil(function(e,t){return t===o}).takeUntil(function(e,t){return t===i}).concat([[i,a.get(i)]]).map(function(e){var t=e.getDepth()+n;return t=Math.max(0,Math.min(t,r)),e.set("depth",t)});return a=a.merge(u),e.merge({blockMap:a,selectionBefore:t,selectionAfter:t})}},function(e,t,n){"use strict";var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._uri=t}return e.prototype.toString=function(){return this._uri},e}();e.exports=r},function(e,t,n){"use strict";var r=n(11)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=(n(12),n(26)),i=n(13),a=n(23),u=n(5),s=n(60),l=n(21),c=n(59),f=n(48),p=u.List,d=u.Repeat,h=a.draft_tree_data_support,y=h?i:o,m={processHTML:function(e,t){return s(e,c,t)},processText:function(e,t,n){return e.reduce(function(e,o,i){o=f(o);var a=l(),u={key:a,type:n,text:o,characterList:p(d(t,o.length))};if(h&&0!==i){var s=i-1,c=e[s]=e[s].merge({nextSibling:a});u=r({},u,{prevSibling:c.getKey()})}return e.push(new y(u)),e},[])}};e.exports=m},function(e,t,n){"use strict";var r=n(34),o=n(12),i=n(69),a=n(10),u=n(118),s=n(6),l=n(58),c=n(44),f=n(67),p=n(32),d=n(115);function h(e,t,n){var r=a.replaceWithFragment(e.getCurrentContent(),e.getSelection(),t);return s.push(e,r.set("entityMap",n),"insert-fragment")}e.exports=function(e,t){t.preventDefault();var n=new i(t.clipboardData);if(!n.isRichText()){var y=n.getFiles(),m=n.getText();if(y.length>0){if(e.props.handlePastedFiles&&p(e.props.handlePastedFiles(y)))return;return void f(y,function(t){if(t=t||m){var n=e._latestEditorState,i=d(t),f=o.create({style:n.getCurrentInlineStyle(),entity:c(n.getCurrentContent(),n.getSelection())}),p=l.getCurrentBlockType(n),h=u.processText(i,f,p),y=r.createFromArray(h),g=a.replaceWithFragment(n.getCurrentContent(),n.getSelection(),y);e.update(s.push(n,g,"insert-fragment"))}})}}var g=[],v=n.getText(),_=n.getHTML(),b=e._latestEditorState;if(!e.props.handlePastedText||!p(e.props.handlePastedText(v,_,b))){if(v&&(g=d(v)),!e.props.stripPastedStyles){var w=e.getClipboard();if(n.isRichText()&&w){if(-1!==_.indexOf(e.getEditorKey())||1===g.length&&1===w.size&&w.first().getText()===v)return void e.update(h(e._latestEditorState,w))}else if(w&&n.types.includes("com.apple.webarchive")&&!n.types.includes("text/html")&&function(e,t){return e.length===t.size&&t.valueSeq().every(function(t,n){return t.getText()===e[n]})}(g,w))return void e.update(h(e._latestEditorState,w));if(_){var C=u.processHTML(_,e.props.blockRenderMap);if(C){var E=C.contentBlocks,S=C.entityMap;if(E){var k=r.createFromArray(E);return void e.update(h(e._latestEditorState,k,S))}}}e.setClipboard(null)}if(g.length){var x=o.create({style:b.getCurrentInlineStyle(),entity:c(b.getCurrentContent(),b.getSelection())}),O=l.getCurrentBlockType(b),T=u.processText(g,x,O),M=r.createFromArray(T);e.update(h(e._latestEditorState,M))}}}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t,n){var o=r.undo(t);if("spellcheck-change"!==t.getLastChangeType())e.preventDefault(),t.getNativelyRenderedContent()?(n(r.set(t,{nativelyRenderedContent:null})),setTimeout(function(){n(o)},0)):n(o);else{var i=o.getCurrentContent();n(r.set(o,{nativelyRenderedContent:i}))}}},function(e,t,n){"use strict";var r=n(10),o=n(6),i=n(37);e.exports=function(e){var t=e.getSelection();if(!t.isCollapsed())return e;var n=t.getAnchorOffset();if(0===n)return e;var a,u,s=t.getAnchorKey(),l=e.getCurrentContent(),c=l.getBlockForKey(s).getLength();if(c<=1)return e;n===c?(a=t.set("anchorOffset",n-1),u=t):u=(a=t.set("focusOffset",n+1)).set("anchorOffset",n+1);var f=i(l,a),p=r.removeRange(l,a,"backward"),d=p.getSelectionAfter(),h=d.getAnchorOffset()-1,y=d.merge({anchorOffset:h,focusOffset:h}),m=r.replaceWithFragment(p,y,f),g=o.push(e,m,"insert-fragment");return o.acceptSelection(g,u)}},function(e,t,n){"use strict";var r=n(6),o=n(25),i=n(61),a=n(31);e.exports=function(e){var t=a(e,function(e){var t=e.getSelection(),n=e.getCurrentContent(),r=t.getAnchorKey(),a=t.getAnchorOffset(),u=n.getBlockForKey(r).getText()[a];return i(e,u?o.getUTF16Length(u,0):1)},"forward");if(t===e.getCurrentContent())return e;var n=e.getSelection();return r.push(e,t.set("selectionBefore",n),n.isCollapsed()?"delete-character":"remove-range")}},function(e,t,n){"use strict";var r=n(6),o=n(25),i=n(39),a=n(31);e.exports=function(e){var t=a(e,function(e){var t=e.getSelection(),n=e.getCurrentContent(),r=t.getAnchorKey(),a=t.getAnchorOffset(),u=n.getBlockForKey(r).getText()[a-1];return i(e,u?o.getUTF16Length(u,0):1)},"backward");if(t===e.getCurrentContent())return e;var n=e.getSelection();return r.push(e,t.set("selectionBefore",n),n.isCollapsed()?"backspace-character":"remove-range")}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e){var t=e.getSelection(),n=t.getStartKey();return r.set(e,{selection:t.merge({anchorKey:n,anchorOffset:0,focusKey:n,focusOffset:0,isBackward:!1}),forceSelection:!0})}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e){var t=e.getSelection(),n=t.getEndKey(),o=e.getCurrentContent().getBlockForKey(n).getLength();return r.set(e,{selection:t.merge({anchorKey:n,anchorOffset:o,focusKey:n,focusOffset:o,isBackward:!1}),forceSelection:!0})}},function(e,t,n){"use strict";var r=n(10),o=n(6);e.exports=function(e){var t=r.splitBlock(e.getCurrentContent(),e.getSelection());return o.push(e,t,"split-block")}},function(e,t,n){"use strict";var r=n(62),o=n(6),i=n(61),a=n(31);e.exports=function(e){var t=a(e,function(e){var t=e.getSelection(),n=t.getStartOffset(),o=t.getStartKey(),a=e.getCurrentContent().getBlockForKey(o).getText().slice(n),u=r.getForward(a);return i(e,u.length||1)},"forward");return t===e.getCurrentContent()?e:o.push(e,t,"remove-range")}},function(e,t,n){"use strict";e.exports={getPunctuation:function(){return"[.,+*?$|#{}()'\\^\\-\\[\\]\\\\\\/!@%\"~=<>_:;・、。〈-】〔-〟：-？！-／［-｀｛-･⸮؟٪-٬؛،؍﴾﴿᠁।၊။‐-‧‰-⁞¡-±´-¸º»¿]"}}},function(e,t,n){"use strict";var r=n(62),o=n(6),i=n(39),a=n(31);e.exports=function(e){var t=a(e,function(e){var t=e.getSelection(),n=t.getStartOffset();if(0===n)return i(e,1);var o=t.getStartKey(),a=e.getCurrentContent().getBlockForKey(o).getText().slice(0,n),u=r.getBackward(a);return i(e,u.length||1)},"backward");return t===e.getCurrentContent()?e:o.push(e,t,"remove-range")}},function(e,t,n){"use strict";var r=n(25),o=n(64),i=n(4);function a(e,t){for(var n=1/0,r=1/0,o=-1/0,i=-1/0,a=0;a<e.length;a++){var u=e[a];0!==u.width&&1!==u.width&&(n=Math.min(n,u.top),r=Math.min(r,u.bottom),o=Math.max(o,u.top),i=Math.max(i,u.bottom))}return o<=r&&o-n<t&&i-r<t}function u(e){switch(e.nodeType){case Node.DOCUMENT_TYPE_NODE:return 0;case Node.TEXT_NODE:case Node.PROCESSING_INSTRUCTION_NODE:case Node.COMMENT_NODE:return e.length;default:return e.childNodes.length}}e.exports=function(e){e.collapsed||i(!1);var t=(e=e.cloneRange()).startContainer;1!==t.nodeType&&(t=t.parentNode);var n=function(e){var t=getComputedStyle(e),n=document.createElement("div");n.style.fontFamily=t.fontFamily,n.style.fontSize=t.fontSize,n.style.fontStyle=t.fontStyle,n.style.fontWeight=t.fontWeight,n.style.lineHeight=t.lineHeight,n.style.position="absolute",n.textContent="M";var r=document.body;r||i(!1),r.appendChild(n);var o=n.getBoundingClientRect();return r.removeChild(n),o.height}(t),s=e.endContainer,l=e.endOffset;for(e.setStart(e.startContainer,0);a(o(e),n)&&(s=e.startContainer,l=e.startOffset,s.parentNode||i(!1),e.setStartBefore(s),1!==s.nodeType||"inline"===getComputedStyle(s).display););for(var c=s,f=l-1;;){for(var p=c.nodeValue,d=f;d>=0;d--)if(!(null!=p&&d>0&&r.isSurrogatePair(p,d-1))){if(e.setStart(c,d),!a(o(e),n))break;s=c,l=d}if(-1===d||0===c.childNodes.length)break;f=u(c=c.childNodes[d])}return e.setStart(s,l),e}},function(e,t,n){"use strict";(function(t){var r=n(6),o=n(130),i=n(63),a=n(39),u=n(31);e.exports=function(e){var n=u(e,function(e){var n=e.getSelection();if(n.isCollapsed()&&0===n.getAnchorOffset())return a(e,1);var r=t.getSelection().getRangeAt(0);return r=o(r),i(e,null,r.endContainer,r.endOffset,r.startContainer,r.startOffset).selectionState},"backward");return n===e.getCurrentContent()?e:r.push(e,n,"remove-range")}}).call(this,n(20))},function(e,t,n){"use strict";var r=n(10),o=n(6),i=n(37),a=n(15),u=null,s={cut:function(e){var t=e.getCurrentContent(),n=e.getSelection(),s=null;if(n.isCollapsed()){var l=n.getAnchorKey(),c=t.getBlockForKey(l).getLength();if(c===n.getAnchorOffset())return e;s=n.set("focusOffset",c)}else s=n;s=a(s),u=i(t,s);var f=r.removeRange(t,s,"forward");return f===t?e:o.push(e,f,"remove-range")},paste:function(e){if(!u)return e;var t=r.replaceWithFragment(e.getCurrentContent(),e.getSelection(),u);return o.push(e,t,"insert-fragment")}};e.exports=s},function(e,t,n){"use strict";var r=n(10),o=n(6),i=n(40),a=n(45),u=n(132),s=n(16),l=n(32),c=n(131),f=n(129),p=n(127),d=n(126),h=n(125),y=n(124),m=n(123),g=n(122),v=n(121),_=n(120),b=i.isOptionKeyCommand,w=s.isBrowser("Chrome");e.exports=function(e,t){var n=t.which,i=e._latestEditorState;switch(n){case a.RETURN:if(t.preventDefault(),e.props.handleReturn&&l(e.props.handleReturn(t,i)))return;break;case a.ESC:return t.preventDefault(),void(e.props.onEscape&&e.props.onEscape(t));case a.TAB:return void(e.props.onTab&&e.props.onTab(t));case a.UP:return void(e.props.onUpArrow&&e.props.onUpArrow(t));case a.RIGHT:return void(e.props.onRightArrow&&e.props.onRightArrow(t));case a.DOWN:return void(e.props.onDownArrow&&e.props.onDownArrow(t));case a.LEFT:return void(e.props.onLeftArrow&&e.props.onLeftArrow(t));case a.SPACE:if(w&&b(t)){t.preventDefault();var s=r.replaceText(i.getCurrentContent(),i.getSelection()," ");return void e.update(o.push(i,s,"insert-characters"))}}var C=e.props.keyBindingFn(t);if(C)if("undo"!==C){if(t.preventDefault(),!e.props.handleKeyCommand||!l(e.props.handleKeyCommand(C,i))){var E=function(e,t){switch(e){case"redo":return o.redo(t);case"delete":return g(t);case"delete-word":return p(t);case"backspace":return m(t);case"backspace-word":return f(t);case"backspace-to-start-of-line":return c(t);case"split-block":return d(t);case"transpose-characters":return v(t);case"move-selection-to-start-of-block":return y(t);case"move-selection-to-end-of-block":return h(t);case"secondary-cut":return u.cut(t);case"secondary-paste":return u.paste(t);default:return t}}(C,i);E!==i&&e.update(E)}}else _(t,i,e.update)}},function(e,t,n){"use strict";(function(t){var r=n(23),o=n(10),i=n(35),a=n(6),u=n(16),s=n(41),l=n(15),c=u.isEngine("Gecko"),f="\n\n";e.exports=function(e){void 0!==e._pendingStateFromBeforeInput&&(e.update(e._pendingStateFromBeforeInput),e._pendingStateFromBeforeInput=void 0);var n=t.getSelection(),u=n.anchorNode,p=n.isCollapsed,d=u.nodeType!==Node.TEXT_NODE,h=u.nodeType!==Node.TEXT_NODE&&u.nodeType!==Node.ELEMENT_NODE;if(r.draft_killswitch_allow_nontextnodes){if(d)return}else if(h)return;if(u.nodeType===Node.TEXT_NODE&&(null!==u.previousSibling||null!==u.nextSibling)){var y=u.parentNode;u.nodeValue=y.textContent;for(var m=y.firstChild;null!==m;m=m.nextSibling)m!==u&&y.removeChild(m)}var g=u.textContent,v=e._latestEditorState,_=l(s(u)),b=i.decode(_),w=b.blockKey,C=b.decoratorKey,E=b.leafKey,S=v.getBlockTree(w).getIn([C,"leaves",E]),k=S.start,x=S.end,O=v.getCurrentContent(),T=O.getBlockForKey(w),M=T.getText().slice(k,x);if(g.endsWith(f)&&(g=g.slice(0,-1)),g!==M){var R,D,j,P,A=v.getSelection(),L=A.merge({anchorOffset:k,focusOffset:x,isBackward:!1}),N=T.getEntityAt(k),I=N&&O.getEntity(N),F="MUTABLE"===(I&&I.getMutability()),B=F?"spellcheck-change":"apply-entity",U=o.replaceText(O,L,g,T.getInlineStyleAt(k),F?T.getEntityAt(k):null);if(c)R=n.anchorOffset,D=n.focusOffset,P=(j=k+Math.min(R,D))+Math.abs(R-D),R=j,D=P;else{var K=g.length-M.length;j=A.getStartOffset(),P=A.getEndOffset(),R=p?P+K:j,D=P+K}var q=U.merge({selectionBefore:O.getSelectionAfter(),selectionAfter:A.merge({anchorOffset:R,focusOffset:D})});e.update(a.push(v,q,B))}}}).call(this,n(20))},function(e,t,n){"use strict";var r=n(6),o=n(16);e.exports=function(e,t){var n=e._latestEditorState,i=n.getSelection();if(!i.getHasFocus()){var a=i.set("hasFocus",!0);e.props.onFocus&&e.props.onFocus(t),o.isBrowser("Chrome < 60.0.3081.0")?e.update(r.forceSelection(n,a)):e.update(r.acceptSelection(n,a))}}},function(e,t,n){"use strict";e.exports=function(e){e._internalDrag=!0,e.setMode("drag")}},function(e,t,n){"use strict";e.exports=function(e,t){e._internalDrag=!1,e.setMode("drag"),t.preventDefault()}},function(e,t,n){"use strict";var r=n(10),o=n(6),i=n(43),a=n(65),u=n(42);e.exports=function(e,t){var n=e._latestEditorState,s=n.getSelection(),l=t.target,c=void 0;if(s.isCollapsed())t.preventDefault();else{l instanceof Node&&(c=u(i.getScrollParent(l)));var f=a(n);e.setClipboard(f),e.setMode("cut"),setTimeout(function(){e.restoreEditorDOM(c),e.exitCurrentMode(),e.update(function(e){var t=r.removeRange(e.getCurrentContent(),e.getSelection(),"forward");return o.push(e,t,"remove-range")}(n))},0)}}},function(e,t,n){"use strict";var r=n(65);e.exports=function(e,t){e._latestEditorState.getSelection().isCollapsed()?t.preventDefault():e.setClipboard(r(e._latestEditorState))}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t){e.setMode("composite"),e.update(r.set(e._latestEditorState,{inCompositionMode:!0})),e._onCompositionStart(t)}},function(e,t,n){"use strict";(function(t){var r=n(6),o=n(38),i=n(53);e.exports=function(e,n){if(i()===document.body){var a=t.getSelection(),u=e.editor;1===a.rangeCount&&o(u,a.anchorNode)&&o(u,a.focusNode)&&a.removeAllRanges()}var s=e._latestEditorState,l=s.getSelection();if(l.getHasFocus()){var c=l.set("hasFocus",!1);e.props.onBlur&&e.props.onBlur(n),e.update(r.acceptSelection(s,c))}}}).call(this,n(20))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,o,i,a,u,s=1,l={},c=!1,f=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){h(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){h(e.data)},r=function(e){i.port2.postMessage(e)}):f&&"onreadystatechange"in f.createElement("script")?(o=f.documentElement,r=function(e){var t=f.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,o.removeChild(t),t=null},o.appendChild(t)}):r=function(e){setTimeout(h,0,e)}:(a="setImmediate$"+Math.random()+"$",u=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&h(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",u,!1):e.attachEvent("onmessage",u),r=function(t){e.postMessage(a+t,"*")}),p.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return l[s]=o,r(s),s++},p.clearImmediate=d}function d(e){delete l[e]}function h(e){if(c)setTimeout(h,0,e);else{var t=l[e];if(t){c=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{d(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(20),n(91))},function(e,t,n){"use strict";(function(t){n(142),e.exports=t.setImmediate}).call(this,n(20))},function(e,t,n){"use strict";(function(t){var r=n(76),o=n(10),i=n(6),a=n(16),u=n(44),s=n(32),l=n(72),c=n(15),f=n(143),p="'",d="/",h=a.isBrowser("Firefox");function y(e,t,n,r){var a=o.replaceText(e.getCurrentContent(),e.getSelection(),t,n,r);return i.push(e,a,"insert-characters")}e.exports=function(e,n){void 0!==e._pendingStateFromBeforeInput&&(e.update(e._pendingStateFromBeforeInput),e._pendingStateFromBeforeInput=void 0);var o=e._latestEditorState,a=n.data;if(a)if(e.props.handleBeforeInput&&s(e.props.handleBeforeInput(a,o)))n.preventDefault();else{var m=o.getSelection(),g=m.getStartOffset(),v=m.getEndOffset(),_=m.getAnchorKey();if(!m.isCollapsed())return n.preventDefault(),void(a===o.getCurrentContent().getPlainText().slice(g,v)?e.update(i.forceSelection(o,m.merge({focusOffset:v}))):e.update(y(o,a,o.getCurrentInlineStyle(),u(o.getCurrentContent(),o.getSelection()))));var b,w=y(o,a,o.getCurrentInlineStyle(),u(o.getCurrentContent(),o.getSelection())),C=!1;if(C||(C=l(e._latestCommittedEditorState)),!C){var E=t.getSelection();if(E.anchorNode&&E.anchorNode.nodeType===Node.TEXT_NODE){var S=E.anchorNode.parentNode;C="SPAN"===S.nodeName&&S.firstChild.nodeType===Node.TEXT_NODE&&-1!==S.firstChild.nodeValue.indexOf("\t")}}if(C||(C=r.getFingerprint(o.getBlockTree(_))!==r.getFingerprint(w.getBlockTree(_))),C||(b=a,C=h&&(b==p||b==d)),C||(C=c(w.getDirectionMap()).get(_)!==c(o.getDirectionMap()).get(_)),C)return n.preventDefault(),void e.update(w);w=i.set(w,{nativelyRenderedContent:w.getCurrentContent()}),e._pendingStateFromBeforeInput=w,f(function(){void 0!==e._pendingStateFromBeforeInput&&(e.update(e._pendingStateFromBeforeInput),e._pendingStateFromBeforeInput=void 0)})}}}).call(this,n(20))},function(e,t,n){"use strict";var r={onBeforeInput:n(144),onBlur:n(141),onCompositionStart:n(140),onCopy:n(139),onCut:n(138),onDragOver:n(137),onDragStart:n(136),onFocus:n(135),onInput:n(134),onKeyDown:n(133),onPaste:n(119),onSelect:n(114)};e.exports=r},function(e,t,n){"use strict";var r=n(4);e.exports=function(e){return function(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"length"in e&&!("setInterval"in e)&&"number"!=typeof e.nodeType&&(Array.isArray(e)||"callee"in e||"item"in e)}(e)?Array.isArray(e)?e.slice():function(e){var t=e.length;if((Array.isArray(e)||"object"!=typeof e&&"function"!=typeof e)&&r(!1),"number"!=typeof t&&r(!1),0===t||t-1 in e||r(!1),"function"==typeof e.callee&&r(!1),e.hasOwnProperty)try{return Array.prototype.slice.call(e)}catch(e){}for(var n=Array(t),o=0;o<t;o++)n[o]=e[o];return n}(e):[e]}},function(e,t,n){"use strict";var r={isImage:function(e){return"image"===o(e)[0]},isJpeg:function(e){var t=o(e);return r.isImage(e)&&("jpeg"===t[1]||"pjpeg"===t[1])}};function o(e){return e.split("/")}e.exports=r},function(e,t,n){"use strict";var r=n(69),o=n(10),i=n(6),a=n(41),u=n(67),s=n(66),l=n(32),c=n(15);var f={onDragEnd:function(e){e.exitCurrentMode()},onDrop:function(e,t){var n=new r(t.nativeEvent.dataTransfer),f=e._latestEditorState,d=function(e,t){var n=null,r=null;if("function"==typeof document.caretRangeFromPoint){var o=document.caretRangeFromPoint(e.x,e.y);n=o.startContainer,r=o.startOffset}else{if(!e.rangeParent)return null;n=e.rangeParent,r=e.rangeOffset}n=c(n),r=c(r);var i=c(a(n));return s(t,i,r,i,r)}(t.nativeEvent,f);if(t.preventDefault(),e.exitCurrentMode(),null!=d){var h=n.getFiles();if(h.length>0){if(e.props.handleDroppedFiles&&l(e.props.handleDroppedFiles(d,h)))return;u(h,function(t){t&&e.update(p(f,d,t))})}else{var y=e._internalDrag?"internal":"external";e.props.handleDrop&&l(e.props.handleDrop(d,n,y))||(e._internalDrag?e.update(function(e,t){var n=o.moveText(e.getCurrentContent(),e.getSelection(),t);return i.push(e,n,"insert-fragment")}(f,d)):e.update(p(f,d,n.getText())))}}}};function p(e,t,n){var r=o.insertText(e.getCurrentContent(),t,n,e.getCurrentInlineStyle());return i.push(e,r,"insert-fragment")}e.exports=f},function(e,t,n){"use strict";e.exports=function(e){e||(e="");var t=void 0,n=arguments.length;if(n>1)for(var r=1;r<n;r++)(t=arguments[r])&&(e=(e?e+" ":"")+t);return e}},function(e,t,n){"use strict";function r(){var e=void 0;return document.documentElement&&(e=document.documentElement.clientWidth),!e&&document.body&&(e=document.body.clientWidth),e||0}function o(){var e=void 0;return document.documentElement&&(e=document.documentElement.clientHeight),!e&&document.body&&(e=document.body.clientHeight),e||0}function i(){return{width:window.innerWidth||r(),height:window.innerHeight||o()}}i.withoutScrollbars=function(){return{width:r(),height:o()}},e.exports=i},function(e,t,n){"use strict";e.exports=function(e){return e.Window&&e instanceof e.Window?{x:e.pageXOffset||e.document.documentElement.scrollLeft,y:e.pageYOffset||e.document.documentElement.scrollTop}:{x:e.scrollLeft,y:e.scrollTop}}},function(e,t,n){"use strict";var r="undefined"!=typeof navigator&&navigator.userAgent.indexOf("AppleWebKit")>-1;e.exports=function(e){return(e=e||document).scrollingElement?e.scrollingElement:r||"CSS1Compat"!==e.compatMode?e.body:e.documentElement}},function(e,t,n){"use strict";var r=n(38);e.exports=function(e){var t=e.ownerDocument.documentElement;if(!("getBoundingClientRect"in e&&r(t,e)))return{left:0,right:0,top:0,bottom:0};var n=e.getBoundingClientRect();return{left:Math.round(n.left)-t.clientLeft,right:Math.round(n.right)-t.clientLeft,top:Math.round(n.top)-t.clientTop,bottom:Math.round(n.bottom)-t.clientTop}}},function(e,t,n){"use strict";var r=n(153);e.exports=function(e){var t=r(e);return{x:t.left,y:t.top,width:t.right-t.left,height:t.bottom-t.top}}},function(e,t,n){"use strict";var r=/([A-Z])/g;e.exports=function(e){return e.replace(r,"-$1").toLowerCase()}},function(e,t,n){"use strict";var r=/-(.)/g;e.exports=function(e){return e.replace(r,function(e,t){return t.toUpperCase()})}},function(e,t,n){"use strict";var r=n(156),o=n(155);function i(e){return null==e?e:String(e)}e.exports=function(e,t){var n=void 0;if(window.getComputedStyle&&(n=window.getComputedStyle(e,null)))return i(n.getPropertyValue(o(t)));if(document.defaultView&&document.defaultView.getComputedStyle){if(n=document.defaultView.getComputedStyle(e,null))return i(n.getPropertyValue(o(t)));if("display"===t)return"none"}return e.currentStyle?i("float"===t?e.currentStyle.cssFloat||e.currentStyle.styleFloat:e.currentStyle[r(t)]):i(e.style&&e.style[r(t)])}},function(e,t,n){"use strict";e.exports={logSelectionStateFailure:function(){return null}}},function(e,t,n){"use strict";(function(t){var r=n(158),o=n(38),i=n(53),a=n(4);function u(e,t){if(!e)return"[empty]";var n=function e(t,n){var r=void 0!==n?n(t):[];if(t.nodeType===Node.TEXT_NODE){var o=t.textContent.length;return document.createTextNode("[text "+o+(r.length?" | "+r.join(", "):"")+"]")}var i=t.cloneNode();1===i.nodeType&&r.length&&i.setAttribute("data-labels",r.join(", "));var a=t.childNodes;for(var u=0;u<a.length;u++)i.appendChild(e(a[u],n));return i}(e,t);return n.nodeType===Node.TEXT_NODE?n.textContent:(n instanceof Element||a(!1),n.outerHTML)}function s(e,t){for(var n=e;n;){if(n instanceof Element&&n.hasAttribute("contenteditable"))return u(n,t);n=n.parentNode}return"Could not find contentEditable parent of node"}function l(e){return null===e.nodeValue?e.childNodes.length:e.nodeValue.length}function c(e,t,n,a){var u=i();if(e.extend&&o(u,t)){n>l(t)&&r.logSelectionStateFailure({anonymizedDom:s(t),extraParams:JSON.stringify({offset:n}),selectionState:JSON.stringify(a.toJS())});var c=t===e.focusNode;try{e.extend(t,n)}catch(o){throw r.logSelectionStateFailure({anonymizedDom:s(t,function(t){var n=[];return t===u&&n.push("active element"),t===e.anchorNode&&n.push("selection anchor node"),t===e.focusNode&&n.push("selection focus node"),n}),extraParams:JSON.stringify({activeElementName:u?u.nodeName:null,nodeIsFocus:t===e.focusNode,nodeWasFocus:c,selectionRangeCount:e.rangeCount,selectionAnchorNodeName:e.anchorNode?e.anchorNode.nodeName:null,selectionAnchorOffset:e.anchorOffset,selectionFocusNodeName:e.focusNode?e.focusNode.nodeName:null,selectionFocusOffset:e.focusOffset,message:o?""+o:null,offset:n},null,2),selectionState:JSON.stringify(a.toJS(),null,2)}),o}}else{var f=e.getRangeAt(0);f.setEnd(t,n),e.addRange(f.cloneRange())}}function f(e,t,n,o){var i=document.createRange();n>l(t)&&r.logSelectionStateFailure({anonymizedDom:s(t),extraParams:JSON.stringify({offset:n}),selectionState:JSON.stringify(o.toJS())}),i.setStart(t,n),e.addRange(i)}e.exports=function(e,n,r,i,a){if(o(document.documentElement,n)){var u=t.getSelection(),s=e.getAnchorKey(),l=e.getAnchorOffset(),p=e.getFocusKey(),d=e.getFocusOffset(),h=e.getIsBackward();if(!u.extend&&h){var y=s,m=l;s=p,l=d,p=y,d=m,h=!1}var g=s===r&&i<=l&&a>=l,v=p===r&&i<=d&&a>=d;if(g&&v)return u.removeAllRanges(),f(u,n,l-i,e),void c(u,n,d-i,e);if(h){if(v&&(u.removeAllRanges(),f(u,n,d-i,e)),g){var _=u.focusNode,b=u.focusOffset;u.removeAllRanges(),f(u,n,l-i,e),c(u,_,b,e)}}else g&&(u.removeAllRanges(),f(u,n,l-i,e)),v&&c(u,n,d-i,e)}}}).call(this,n(20))},function(e,t,n){"use strict";e.exports=function(e){var t={};return function(n){return t.hasOwnProperty(n)||(t[n]=e.call(this,n)),t[n]}}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){if(!e)return null;var o={};for(var i in e)r.call(e,i)&&(o[i]=t.call(n,e[i],i,e));return o}},function(e,t,n){"use strict";var r=n(4),o=/\./,i=/\|\|/,a=/\s+\-\s+/,u=/^(<=|<|=|>=|~>|~|>|)?\s*(.+)/,s=/^(\d*)(.*)/;function l(e,t){var n=e.split(i);return n.length>1?n.some(function(e){return b.contains(e,t)}):function(e,t){var n=e.split(a);if(n.length>0&&n.length<=2||r(!1),1===n.length)return c(n[0],t);var o=n[0],i=n[1];return y(o)&&y(i)||r(!1),c(">="+o,t)&&c("<="+i,t)}(e=n[0].trim(),t)}function c(e,t){if(""===(e=e.trim()))return!0;var n,r=t.split(o),i=d(e),a=i.modifier,u=i.rangeComponents;switch(a){case"<":return f(r,u);case"<=":return-1===(n=_(r,u))||0===n;case">=":return p(r,u);case">":return function(e,t){return 1===_(e,t)}(r,u);case"~":case"~>":return function(e,t){var n=t.slice(),r=t.slice();r.length>1&&r.pop();var o=r.length-1,i=parseInt(r[o],10);h(i)&&(r[o]=i+1+"");return p(e,n)&&f(e,r)}(r,u);default:return function(e,t){return 0===_(e,t)}(r,u)}}function f(e,t){return-1===_(e,t)}function p(e,t){var n=_(e,t);return 1===n||0===n}function d(e){var t=e.split(o),n=t[0].match(u);return n||r(!1),{modifier:n[1],rangeComponents:[n[2]].concat(t.slice(1))}}function h(e){return!isNaN(e)&&isFinite(e)}function y(e){return!d(e).modifier}function m(e,t){for(var n=e.length;n<t;n++)e[n]="0"}function g(e,t){var n=e.match(s)[1],r=t.match(s)[1],o=parseInt(n,10),i=parseInt(r,10);return h(o)&&h(i)&&o!==i?v(o,i):v(e,t)}function v(e,t){return typeof e!=typeof t&&r(!1),e>t?1:e<t?-1:0}function _(e,t){for(var n=function(e,t){m(e=e.slice(),(t=t.slice()).length);for(var n=0;n<t.length;n++){var r=t[n].match(/^[x*]$/i);if(r&&(t[n]=e[n]="0","*"===r[0]&&n===t.length-1))for(var o=n;o<e.length;o++)e[o]="0"}return m(t,e.length),[e,t]}(e,t),r=n[0],o=n[1],i=0;i<o.length;i++){var a=g(r[i],o[i]);if(a)return a}return 0}var b={contains:function(e,t){return l(e.trim(),t.trim())}};e.exports=b},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){var r;
/*!
 * UAParser.js v0.7.18
 * Lightweight JavaScript-based User-Agent string parser
 * https://github.com/faisalman/ua-parser-js
 *
 * Copyright © 2012-2016 Faisal Salman <fyzlman@gmail.com>
 * Dual licensed under GPLv2 or MIT
 */
/*!
 * UAParser.js v0.7.18
 * Lightweight JavaScript-based User-Agent string parser
 * https://github.com/faisalman/ua-parser-js
 *
 * Copyright © 2012-2016 Faisal Salman <fyzlman@gmail.com>
 * Dual licensed under GPLv2 or MIT
 */
!function(o,i){"use strict";var a="model",u="name",s="type",l="vendor",c="version",f="mobile",p="tablet",d={extend:function(e,t){var n={};for(var r in e)t[r]&&t[r].length%2==0?n[r]=t[r].concat(e[r]):n[r]=e[r];return n},has:function(e,t){return"string"==typeof e&&-1!==t.toLowerCase().indexOf(e.toLowerCase())},lowerize:function(e){return e.toLowerCase()},major:function(e){return"string"==typeof e?e.replace(/[^\d\.]/g,"").split(".")[0]:void 0},trim:function(e){return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}},h={rgx:function(e,t){for(var n,r,o,i,a,u,s=0;s<t.length&&!a;){var l=t[s],c=t[s+1];for(n=r=0;n<l.length&&!a;)if(a=l[n++].exec(e))for(o=0;o<c.length;o++)u=a[++r],"object"==typeof(i=c[o])&&i.length>0?2==i.length?"function"==typeof i[1]?this[i[0]]=i[1].call(this,u):this[i[0]]=i[1]:3==i.length?"function"!=typeof i[1]||i[1].exec&&i[1].test?this[i[0]]=u?u.replace(i[1],i[2]):void 0:this[i[0]]=u?i[1].call(this,u,i[2]):void 0:4==i.length&&(this[i[0]]=u?i[3].call(this,u.replace(i[1],i[2])):void 0):this[i]=u||void 0;s+=2}},str:function(e,t){for(var n in t)if("object"==typeof t[n]&&t[n].length>0){for(var r=0;r<t[n].length;r++)if(d.has(t[n][r],e))return"?"===n?void 0:n}else if(d.has(t[n],e))return"?"===n?void 0:n;return e}},y={browser:{oldsafari:{version:{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}}},device:{amazon:{model:{"Fire Phone":["SD","KF"]}},sprint:{model:{"Evo Shift 4G":"7373KT"},vendor:{HTC:"APA",Sprint:"Sprint"}}},os:{windows:{version:{ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2000:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"}}}},m={browser:[[/(opera\smini)\/([\w\.-]+)/i,/(opera\s[mobiletab]+).+version\/([\w\.-]+)/i,/(opera).+version\/([\w\.]+)/i,/(opera)[\/\s]+([\w\.]+)/i],[u,c],[/(opios)[\/\s]+([\w\.]+)/i],[[u,"Opera Mini"],c],[/\s(opr)\/([\w\.]+)/i],[[u,"Opera"],c],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]*)/i,/(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i,/(?:ms|\()(ie)\s([\w\.]+)/i,/(rekonq)\/([\w\.]*)/i,/(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark)\/([\w\.-]+)/i],[u,c],[/(trident).+rv[:\s]([\w\.]+).+like\sgecko/i],[[u,"IE"],c],[/(edge|edgios|edgea)\/((\d+)?[\w\.]+)/i],[[u,"Edge"],c],[/(yabrowser)\/([\w\.]+)/i],[[u,"Yandex"],c],[/(puffin)\/([\w\.]+)/i],[[u,"Puffin"],c],[/((?:[\s\/])uc?\s?browser|(?:juc.+)ucweb)[\/\s]?([\w\.]+)/i],[[u,"UCBrowser"],c],[/(comodo_dragon)\/([\w\.]+)/i],[[u,/_/g," "],c],[/(micromessenger)\/([\w\.]+)/i],[[u,"WeChat"],c],[/(qqbrowserlite)\/([\w\.]+)/i],[u,c],[/(QQ)\/([\d\.]+)/i],[u,c],[/m?(qqbrowser)[\/\s]?([\w\.]+)/i],[u,c],[/(BIDUBrowser)[\/\s]?([\w\.]+)/i],[u,c],[/(2345Explorer)[\/\s]?([\w\.]+)/i],[u,c],[/(MetaSr)[\/\s]?([\w\.]+)/i],[u],[/(LBBROWSER)/i],[u],[/xiaomi\/miuibrowser\/([\w\.]+)/i],[c,[u,"MIUI Browser"]],[/;fbav\/([\w\.]+);/i],[c,[u,"Facebook"]],[/headlesschrome(?:\/([\w\.]+)|\s)/i],[c,[u,"Chrome Headless"]],[/\swv\).+(chrome)\/([\w\.]+)/i],[[u,/(.+)/,"$1 WebView"],c],[/((?:oculus|samsung)browser)\/([\w\.]+)/i],[[u,/(.+(?:g|us))(.+)/,"$1 $2"],c],[/android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i],[c,[u,"Android Browser"]],[/(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i],[u,c],[/(dolfin)\/([\w\.]+)/i],[[u,"Dolphin"],c],[/((?:android.+)crmo|crios)\/([\w\.]+)/i],[[u,"Chrome"],c],[/(coast)\/([\w\.]+)/i],[[u,"Opera Coast"],c],[/fxios\/([\w\.-]+)/i],[c,[u,"Firefox"]],[/version\/([\w\.]+).+?mobile\/\w+\s(safari)/i],[c,[u,"Mobile Safari"]],[/version\/([\w\.]+).+?(mobile\s?safari|safari)/i],[c,u],[/webkit.+?(gsa)\/([\w\.]+).+?(mobile\s?safari|safari)(\/[\w\.]+)/i],[[u,"GSA"],c],[/webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i],[u,[c,h.str,y.browser.oldsafari.version]],[/(konqueror)\/([\w\.]+)/i,/(webkit|khtml)\/([\w\.]+)/i],[u,c],[/(navigator|netscape)\/([\w\.-]+)/i],[[u,"Netscape"],c],[/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,/(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([\w\.-]+)$/i,/(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,/(links)\s\(([\w\.]+)/i,/(gobrowser)\/?([\w\.]*)/i,/(ice\s?browser)\/v?([\w\._]+)/i,/(mosaic)[\/\s]([\w\.]+)/i],[u,c]],cpu:[[/(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i],[["architecture","amd64"]],[/(ia32(?=;))/i],[["architecture",d.lowerize]],[/((?:i[346]|x)86)[;\)]/i],[["architecture","ia32"]],[/windows\s(ce|mobile);\sppc;/i],[["architecture","arm"]],[/((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i],[["architecture",/ower/,"",d.lowerize]],[/(sun4\w)[;\)]/i],[["architecture","sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+;))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i],[["architecture",d.lowerize]]],device:[[/\((ipad|playbook);[\w\s\);-]+(rim|apple)/i],[a,l,[s,p]],[/applecoremedia\/[\w\.]+ \((ipad)/],[a,[l,"Apple"],[s,p]],[/(apple\s{0,1}tv)/i],[[a,"Apple TV"],[l,"Apple"]],[/(archos)\s(gamepad2?)/i,/(hp).+(touchpad)/i,/(hp).+(tablet)/i,/(kindle)\/([\w\.]+)/i,/\s(nook)[\w\s]+build\/(\w+)/i,/(dell)\s(strea[kpr\s\d]*[\dko])/i],[l,a,[s,p]],[/(kf[A-z]+)\sbuild\/.+silk\//i],[a,[l,"Amazon"],[s,p]],[/(sd|kf)[0349hijorstuw]+\sbuild\/.+silk\//i],[[a,h.str,y.device.amazon.model],[l,"Amazon"],[s,f]],[/\((ip[honed|\s\w*]+);.+(apple)/i],[a,l,[s,f]],[/\((ip[honed|\s\w*]+);/i],[a,[l,"Apple"],[s,f]],[/(blackberry)[\s-]?(\w+)/i,/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[\s_-]?([\w-]*)/i,/(hp)\s([\w\s]+\w)/i,/(asus)-?(\w+)/i],[l,a,[s,f]],[/\(bb10;\s(\w+)/i],[a,[l,"BlackBerry"],[s,f]],[/android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone)/i],[a,[l,"Asus"],[s,p]],[/(sony)\s(tablet\s[ps])\sbuild\//i,/(sony)?(?:sgp.+)\sbuild\//i],[[l,"Sony"],[a,"Xperia Tablet"],[s,p]],[/android.+\s([c-g]\d{4}|so[-l]\w+)\sbuild\//i],[a,[l,"Sony"],[s,f]],[/\s(ouya)\s/i,/(nintendo)\s([wids3u]+)/i],[l,a,[s,"console"]],[/android.+;\s(shield)\sbuild/i],[a,[l,"Nvidia"],[s,"console"]],[/(playstation\s[34portablevi]+)/i],[a,[l,"Sony"],[s,"console"]],[/(sprint\s(\w+))/i],[[l,h.str,y.device.sprint.vendor],[a,h.str,y.device.sprint.model],[s,f]],[/(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i],[l,a,[s,p]],[/(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i,/(zte)-(\w*)/i,/(alcatel|geeksphone|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]*)/i],[l,[a,/_/g," "],[s,f]],[/(nexus\s9)/i],[a,[l,"HTC"],[s,p]],[/d\/huawei([\w\s-]+)[;\)]/i,/(nexus\s6p)/i],[a,[l,"Huawei"],[s,f]],[/(microsoft);\s(lumia[\s\w]+)/i],[l,a,[s,f]],[/[\s\(;](xbox(?:\sone)?)[\s\);]/i],[a,[l,"Microsoft"],[s,"console"]],[/(kin\.[onetw]{3})/i],[[a,/\./g," "],[l,"Microsoft"],[s,f]],[/\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?:?(\s4g)?)[\w\s]+build\//i,/mot[\s-]?(\w*)/i,/(XT\d{3,4}) build\//i,/(nexus\s6)/i],[a,[l,"Motorola"],[s,f]],[/android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i],[a,[l,"Motorola"],[s,p]],[/hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i],[[l,d.trim],[a,d.trim],[s,"smarttv"]],[/hbbtv.+maple;(\d+)/i],[[a,/^/,"SmartTV"],[l,"Samsung"],[s,"smarttv"]],[/\(dtv[\);].+(aquos)/i],[a,[l,"Sharp"],[s,"smarttv"]],[/android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i,/((SM-T\w+))/i],[[l,"Samsung"],a,[s,p]],[/smart-tv.+(samsung)/i],[l,[s,"smarttv"],a],[/((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i,/(sam[sung]*)[\s-]*(\w+-?[\w-]*)/i,/sec-((sgh\w+))/i],[[l,"Samsung"],a,[s,f]],[/sie-(\w*)/i],[a,[l,"Siemens"],[s,f]],[/(maemo|nokia).*(n900|lumia\s\d+)/i,/(nokia)[\s_-]?([\w-]*)/i],[[l,"Nokia"],a,[s,f]],[/android\s3\.[\s\w;-]{10}(a\d{3})/i],[a,[l,"Acer"],[s,p]],[/android.+([vl]k\-?\d{3})\s+build/i],[a,[l,"LG"],[s,p]],[/android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i],[[l,"LG"],a,[s,p]],[/(lg) netcast\.tv/i],[l,a,[s,"smarttv"]],[/(nexus\s[45])/i,/lg[e;\s\/-]+(\w*)/i,/android.+lg(\-?[\d\w]+)\s+build/i],[a,[l,"LG"],[s,f]],[/android.+(ideatab[a-z0-9\-\s]+)/i],[a,[l,"Lenovo"],[s,p]],[/linux;.+((jolla));/i],[l,a,[s,f]],[/((pebble))app\/[\d\.]+\s/i],[l,a,[s,"wearable"]],[/android.+;\s(oppo)\s?([\w\s]+)\sbuild/i],[l,a,[s,f]],[/crkey/i],[[a,"Chromecast"],[l,"Google"]],[/android.+;\s(glass)\s\d/i],[a,[l,"Google"],[s,"wearable"]],[/android.+;\s(pixel c)\s/i],[a,[l,"Google"],[s,p]],[/android.+;\s(pixel xl|pixel)\s/i],[a,[l,"Google"],[s,f]],[/android.+;\s(\w+)\s+build\/hm\1/i,/android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i,/android.+(mi[\s\-_]*(?:one|one[\s_]plus|note lte)?[\s_]*(?:\d?\w?)[\s_]*(?:plus)?)\s+build/i,/android.+(redmi[\s\-_]*(?:note)?(?:[\s_]*[\w\s]+))\s+build/i],[[a,/_/g," "],[l,"Xiaomi"],[s,f]],[/android.+(mi[\s\-_]*(?:pad)(?:[\s_]*[\w\s]+))\s+build/i],[[a,/_/g," "],[l,"Xiaomi"],[s,p]],[/android.+;\s(m[1-5]\snote)\sbuild/i],[a,[l,"Meizu"],[s,p]],[/android.+a000(1)\s+build/i,/android.+oneplus\s(a\d{4})\s+build/i],[a,[l,"OnePlus"],[s,f]],[/android.+[;\/]\s*(RCT[\d\w]+)\s+build/i],[a,[l,"RCA"],[s,p]],[/android.+[;\/\s]+(Venue[\d\s]{2,7})\s+build/i],[a,[l,"Dell"],[s,p]],[/android.+[;\/]\s*(Q[T|M][\d\w]+)\s+build/i],[a,[l,"Verizon"],[s,p]],[/android.+[;\/]\s+(Barnes[&\s]+Noble\s+|BN[RT])(V?.*)\s+build/i],[[l,"Barnes & Noble"],a,[s,p]],[/android.+[;\/]\s+(TM\d{3}.*\b)\s+build/i],[a,[l,"NuVision"],[s,p]],[/android.+;\s(k88)\sbuild/i],[a,[l,"ZTE"],[s,p]],[/android.+[;\/]\s*(gen\d{3})\s+build.*49h/i],[a,[l,"Swiss"],[s,f]],[/android.+[;\/]\s*(zur\d{3})\s+build/i],[a,[l,"Swiss"],[s,p]],[/android.+[;\/]\s*((Zeki)?TB.*\b)\s+build/i],[a,[l,"Zeki"],[s,p]],[/(android).+[;\/]\s+([YR]\d{2})\s+build/i,/android.+[;\/]\s+(Dragon[\-\s]+Touch\s+|DT)(\w{5})\sbuild/i],[[l,"Dragon Touch"],a,[s,p]],[/android.+[;\/]\s*(NS-?\w{0,9})\sbuild/i],[a,[l,"Insignia"],[s,p]],[/android.+[;\/]\s*((NX|Next)-?\w{0,9})\s+build/i],[a,[l,"NextBook"],[s,p]],[/android.+[;\/]\s*(Xtreme\_)?(V(1[045]|2[015]|30|40|60|7[05]|90))\s+build/i],[[l,"Voice"],a,[s,f]],[/android.+[;\/]\s*(LVTEL\-)?(V1[12])\s+build/i],[[l,"LvTel"],a,[s,f]],[/android.+[;\/]\s*(V(100MD|700NA|7011|917G).*\b)\s+build/i],[a,[l,"Envizen"],[s,p]],[/android.+[;\/]\s*(Le[\s\-]+Pan)[\s\-]+(\w{1,9})\s+build/i],[l,a,[s,p]],[/android.+[;\/]\s*(Trio[\s\-]*.*)\s+build/i],[a,[l,"MachSpeed"],[s,p]],[/android.+[;\/]\s*(Trinity)[\-\s]*(T\d{3})\s+build/i],[l,a,[s,p]],[/android.+[;\/]\s*TU_(1491)\s+build/i],[a,[l,"Rotor"],[s,p]],[/android.+(KS(.+))\s+build/i],[a,[l,"Amazon"],[s,p]],[/android.+(Gigaset)[\s\-]+(Q\w{1,9})\s+build/i],[l,a,[s,p]],[/\s(tablet|tab)[;\/]/i,/\s(mobile)(?:[;\/]|\ssafari)/i],[[s,d.lowerize],l,a],[/(android[\w\.\s\-]{0,9});.+build/i],[a,[l,"Generic"]]],engine:[[/windows.+\sedge\/([\w\.]+)/i],[c,[u,"EdgeHTML"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i,/(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,/(icab)[\/\s]([23]\.[\d\.]+)/i],[u,c],[/rv\:([\w\.]{1,9}).+(gecko)/i],[c,u]],os:[[/microsoft\s(windows)\s(vista|xp)/i],[u,c],[/(windows)\snt\s6\.2;\s(arm)/i,/(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s\w]*)/i,/(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i],[u,[c,h.str,y.os.windows.version]],[/(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i],[[u,"Windows"],[c,h.str,y.os.windows.version]],[/\((bb)(10);/i],[[u,"BlackBerry"],c],[/(blackberry)\w*\/?([\w\.]*)/i,/(tizen)[\/\s]([\w\.]+)/i,/(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]*)/i,/linux;.+(sailfish);/i],[u,c],[/(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]*)/i],[[u,"Symbian"],c],[/\((series40);/i],[u],[/mozilla.+\(mobile;.+gecko.+firefox/i],[[u,"Firefox OS"],c],[/(nintendo|playstation)\s([wids34portablevu]+)/i,/(mint)[\/\s\(]?(\w*)/i,/(mageia|vectorlinux)[;\s]/i,/(joli|[kxln]?ubuntu|debian|suse|opensuse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]*)/i,/(hurd|linux)\s?([\w\.]*)/i,/(gnu)\s?([\w\.]*)/i],[u,c],[/(cros)\s[\w]+\s([\w\.]+\w)/i],[[u,"Chromium OS"],c],[/(sunos)\s?([\w\.\d]*)/i],[[u,"Solaris"],c],[/\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]*)/i],[u,c],[/(haiku)\s(\w+)/i],[u,c],[/cfnetwork\/.+darwin/i,/ip[honead]{2,4}(?:.*os\s([\w]+)\slike\smac|;\sopera)/i],[[c,/_/g,"."],[u,"iOS"]],[/(mac\sos\sx)\s?([\w\s\.]*)/i,/(macintosh|mac(?=_powerpc)\s)/i],[[u,"Mac OS"],[c,/_/g,"."]],[/((?:open)?solaris)[\/\s-]?([\w\.]*)/i,/(aix)\s((\d)(?=\.|\)|\s)[\w\.])*/i,/(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i,/(unix)\s?([\w\.]*)/i],[u,c]]},g=function(e,t){if("object"==typeof e&&(t=e,e=void 0),!(this instanceof g))return new g(e,t).getResult();var n=e||(o&&o.navigator&&o.navigator.userAgent?o.navigator.userAgent:""),r=t?d.extend(m,t):m;return this.getBrowser=function(){var e={name:void 0,version:void 0};return h.rgx.call(e,n,r.browser),e.major=d.major(e.version),e},this.getCPU=function(){var e={architecture:void 0};return h.rgx.call(e,n,r.cpu),e},this.getDevice=function(){var e={vendor:void 0,model:void 0,type:void 0};return h.rgx.call(e,n,r.device),e},this.getEngine=function(){var e={name:void 0,version:void 0};return h.rgx.call(e,n,r.engine),e},this.getOS=function(){var e={name:void 0,version:void 0};return h.rgx.call(e,n,r.os),e},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return n},this.setUA=function(e){return n=e,this},this};g.VERSION="0.7.18",g.BROWSER={NAME:u,MAJOR:"major",VERSION:c},g.CPU={ARCHITECTURE:"architecture"},g.DEVICE={MODEL:a,VENDOR:l,TYPE:s,CONSOLE:"console",MOBILE:f,SMARTTV:"smarttv",TABLET:p,WEARABLE:"wearable",EMBEDDED:"embedded"},g.ENGINE={NAME:u,VERSION:c},g.OS={NAME:u,VERSION:c},void 0!==t?(void 0!==e&&e.exports&&(t=e.exports=g),t.UAParser=g):n(163)?void 0===(r=function(){return g}.call(t,n,t,e))||(e.exports=r):o&&(o.UAParser=g);var v=o&&(o.jQuery||o.Zepto);if(void 0!==v){var _=new g;v.ua=_.getResult(),v.ua.get=function(){return _.getUA()},v.ua.set=function(e){_.setUA(e);var t=_.getResult();for(var n in t)v.ua[n]=t[n]}}}("object"==typeof window?window:this)},function(e,t,n){"use strict";var r="Unknown",o={"Mac OS":"Mac OS X"};var i,a=(new(n(164))).getResult(),u=function(e){if(!e)return{major:"",minor:""};var t=e.split(".");return{major:t[0],minor:t[1]}}(a.browser.version),s={browserArchitecture:a.cpu.architecture||r,browserFullVersion:a.browser.version||r,browserMinorVersion:u.minor||r,browserName:a.browser.name||r,browserVersion:a.browser.major||r,deviceName:a.device.model||r,engineName:a.engine.name||r,engineVersion:a.engine.version||r,platformArchitecture:a.cpu.architecture||r,platformName:(i=a.os.name,o[i]||i||r),platformVersion:a.os.version||r,platformFullVersion:a.os.version||r};e.exports=s},function(e,t,n){"use strict";var r=n(1),o=n(7),i=n(16),a=n(4),u=i.isBrowser("IE <= 11");var s=u?r.createElement("span",{key:"A","data-text":"true"},"\n"):r.createElement("br",{key:"A","data-text":"true"}),l=u?r.createElement("span",{key:"B","data-text":"true"},"\n"):r.createElement("br",{key:"B","data-text":"true"}),c=function(e){function t(n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n));return r._forceFlag=!1,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.shouldComponentUpdate=function(e){var t=o.findDOMNode(this),n=""===e.children;return t instanceof Element||a(!1),n?!function(e){return u?"\n"===e.textContent:"BR"===e.tagName}(t):t.textContent!==e.children},t.prototype.componentDidMount=function(){this._forceFlag=!this._forceFlag},t.prototype.componentDidUpdate=function(){this._forceFlag=!this._forceFlag},t.prototype.render=function(){return""===this.props.children?this._forceFlag?s:l:r.createElement("span",{key:this._forceFlag?"A":"B","data-text":"true"},this.props.children)},t}(r.Component);e.exports=c},function(e,t,n){"use strict";var r=n(11);var o=n(166),i=n(1),a=n(7),u=n(4),s=n(159),l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype._setSelection=function(){var e=this.props.selection;if(null!=e&&e.getHasFocus()){var t=this.props,n=t.block,r=t.start,o=t.text,i=n.getKey(),l=r+o.length;if(e.hasEdgeWithin(i,r,l)){var c=a.findDOMNode(this);c||u(!1);var f=c.firstChild;f||u(!1);var p=void 0;f.nodeType===Node.TEXT_NODE?p=f:"BR"===f.tagName?p=c:(p=f.firstChild)||u(!1),s(e,p,i,r,l)}}},t.prototype.shouldComponentUpdate=function(e){var t=a.findDOMNode(this.leaf);return t||u(!1),t.textContent!==e.text||e.styleSet!==this.props.styleSet||e.forceSelection},t.prototype.componentDidUpdate=function(){this._setSelection()},t.prototype.componentDidMount=function(){this._setSelection()},t.prototype.render=function(){var e=this,t=this.props.block,n=this.props.text;n.endsWith("\n")&&this.props.isLast&&(n+="\n");var a=this.props,u=a.customStyleMap,s=a.customStyleFn,l=a.offsetKey,c=a.styleSet,f=c.reduce(function(e,t){var n={},o=u[t];return void 0!==o&&e.textDecoration!==o.textDecoration&&(n.textDecoration=[e.textDecoration,o.textDecoration].join(" ").trim()),r(e,o,n)},{});if(s){var p=s(c,t);f=r(f,p)}return i.createElement("span",{"data-offset-key":l,ref:function(t){return e.leaf=t},style:f},i.createElement(o,null,n))},t}(i.Component);e.exports=l},function(e,t,n){"use strict";var r=n(11)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var o=n(71),i=n(35),a=(n(6),n(1)),u=n(27),s=n(149),l=n(15),c=function(e,t,n,r){return u({"public/DraftStyleDefault/unorderedListItem":"unordered-list-item"===e,"public/DraftStyleDefault/orderedListItem":"ordered-list-item"===e,"public/DraftStyleDefault/reset":n,"public/DraftStyleDefault/depth0":0===t,"public/DraftStyleDefault/depth1":1===t,"public/DraftStyleDefault/depth2":2===t,"public/DraftStyleDefault/depth3":3===t,"public/DraftStyleDefault/depth4":4===t,"public/DraftStyleDefault/listLTR":"LTR"===r,"public/DraftStyleDefault/listRTL":"RTL"===r})},f=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.shouldComponentUpdate=function(e){var t=this.props.editorState,n=e.editorState;if(t.getDirectionMap()!==n.getDirectionMap())return!0;if(t.getSelection().getHasFocus()!==n.getSelection().getHasFocus())return!0;var r=n.getNativelyRenderedContent(),o=t.isInCompositionMode(),i=n.isInCompositionMode();if(t===n||null!==r&&n.getCurrentContent()===r||o&&i)return!1;var a=t.getCurrentContent(),u=n.getCurrentContent(),s=t.getDecorator(),l=n.getDecorator();return o!==i||a!==u||s!==l||n.mustForceSelection()},t.prototype.render=function(){for(var e=this.props,t=e.blockRenderMap,n=e.blockRendererFn,u=e.blockStyleFn,f=e.customStyleMap,p=e.customStyleFn,d=e.editorState,h=e.editorKey,y=e.textDirectionality,m=d.getCurrentContent(),g=d.getSelection(),v=d.mustForceSelection(),_=d.getDecorator(),b=l(d.getDirectionMap()),w=m.getBlocksAsArray(),C=[],E=null,S=null,k=0;k<w.length;k++){var x=w[k],O=x.getKey(),T=x.getType(),M=n(x),R=void 0,D=void 0,j=void 0;M&&(R=M.component,D=M.props,j=M.editable);var P=y||b.get(O),A=i.encode(O,0,0),L={contentState:m,block:x,blockProps:D,blockStyleFn:u,customStyleMap:f,customStyleFn:p,decorator:_,direction:P,forceSelection:v,key:O,offsetKey:A,selection:g,tree:d.getBlockTree(O)},N=t.get(T)||t.get("unstyled"),I=N.wrapper,F=N.element||t.get("unstyled").element,B=x.getDepth(),U="";if(u&&(U=u(x)),"li"===F)U=s(U,c(T,B,S!==I||null===E||B>E,P));var K=R||o,q={className:U,"data-block":!0,"data-editor":h,"data-offset-key":A,key:O};void 0!==j&&(q=r({},q,{contentEditable:j,suppressContentEditableWarning:!0}));var H=a.createElement(F,q,a.createElement(K,L));C.push({block:H,wrapperTemplate:I,key:O,offsetKey:A}),E=I?x.getDepth():null,S=I}for(var z=[],W=0;W<C.length;){var V=C[W];if(V.wrapperTemplate){var J=[];do{J.push(C[W].block),W++}while(W<C.length&&C[W].wrapperTemplate===V.wrapperTemplate);var $=a.cloneElement(V.wrapperTemplate,{key:V.key+"-wrap","data-offset-key":V.offsetKey},J);z.push($)}else z.push(V.block),W++}return a.createElement("div",{"data-contents":"true"},z)},t}(a.Component);e.exports=f},function(e,t,n){"use strict";var r=n(168);e.exports=r},function(e,t,n){"use strict";var r=n(23),o=n(10),i=n(6),a=n(45),u=n(44),s=n(32),l=n(72),c=!1,f=!1,p="",d={onBeforeInput:function(e,t){p=(p||"")+t.data},onCompositionStart:function(e){f=!0},onCompositionEnd:function(e){c=!1,f=!1,setTimeout(function(){c||d.resolveComposition(e)},20)},onKeyDown:function(e,t){if(!f)return d.resolveComposition(e),void e._onKeyDown(t);t.which!==a.RIGHT&&t.which!==a.LEFT||t.preventDefault()},onKeyPress:function(e,t){t.which===a.RETURN&&t.preventDefault()},resolveComposition:function(e){if(!f){c=!0;var t=p;p="";var n=i.set(e._latestEditorState,{inCompositionMode:!1}),a=n.getCurrentInlineStyle(),d=u(n.getCurrentContent(),n.getSelection()),h=!t||l(n)||a.size>0||null!==d;if(h&&e.restoreEditorDOM(),e.exitCurrentMode(),t){if(r.draft_handlebeforeinput_composed_text&&e.props.handleBeforeInput&&s(e.props.handleBeforeInput(t,n)))return;var y=o.replaceText(n.getCurrentContent(),n.getSelection(),t,a,d);e.update(i.push(n,y,"insert-characters"))}else h&&e.update(i.set(n,{nativelyRenderedContent:null,forceSelection:!0}))}}};e.exports=d},function(e,t,n){"use strict";var r=n(11)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var o=n(46),i=n(73),a=n(170),u=n(169),s=n(148),l=n(145),c=n(112),f=n(6),p=n(1),d=n(7),h=n(70),y=n(43),m=n(16),g=n(27),v=n(30),_=n(21),b=n(57),w=n(42),C=n(4),E=n(15),S=m.isBrowser("IE"),k=!S,x={edit:l,composite:a,drag:s,cut:null,render:null},O=function(e){function t(n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n));return r.focus=function(e){var t=r.props.editorState,n=t.getSelection().getHasFocus(),o=d.findDOMNode(r.editor);if(o){var i=y.getScrollParent(o),a=e||w(i),u=a.x,s=a.y;o instanceof HTMLElement||C(!1),o.focus(),i===window?window.scrollTo(u,s):h.setTop(i,s),n||r.update(f.forceSelection(t,t.getSelection()))}},r.blur=function(){var e=d.findDOMNode(r.editor);e instanceof HTMLElement||C(!1),e.blur()},r.setMode=function(e){r._handler=x[e]},r.exitCurrentMode=function(){r.setMode("edit")},r.restoreEditorDOM=function(e){r.setState({contentsKey:r.state.contentsKey+1},function(){r.focus(e)})},r.setClipboard=function(e){r._clipboard=e},r.getClipboard=function(){return r._clipboard},r.update=function(e){r._latestEditorState=e,r.props.onChange(e)},r.onDragEnter=function(){r._dragCount++},r.onDragLeave=function(){r._dragCount--,0===r._dragCount&&r.exitCurrentMode()},r._blockSelectEvents=!1,r._clipboard=null,r._handler=null,r._dragCount=0,r._editorKey=n.editorKey||_(),r._placeholderAccessibilityID="placeholder-"+r._editorKey,r._latestEditorState=n.editorState,r._latestCommittedEditorState=n.editorState,r._onBeforeInput=r._buildHandler("onBeforeInput"),r._onBlur=r._buildHandler("onBlur"),r._onCharacterData=r._buildHandler("onCharacterData"),r._onCompositionEnd=r._buildHandler("onCompositionEnd"),r._onCompositionStart=r._buildHandler("onCompositionStart"),r._onCopy=r._buildHandler("onCopy"),r._onCut=r._buildHandler("onCut"),r._onDragEnd=r._buildHandler("onDragEnd"),r._onDragOver=r._buildHandler("onDragOver"),r._onDragStart=r._buildHandler("onDragStart"),r._onDrop=r._buildHandler("onDrop"),r._onInput=r._buildHandler("onInput"),r._onFocus=r._buildHandler("onFocus"),r._onKeyDown=r._buildHandler("onKeyDown"),r._onKeyPress=r._buildHandler("onKeyPress"),r._onKeyUp=r._buildHandler("onKeyUp"),r._onMouseDown=r._buildHandler("onMouseDown"),r._onMouseUp=r._buildHandler("onMouseUp"),r._onPaste=r._buildHandler("onPaste"),r._onSelect=r._buildHandler("onSelect"),r.getEditorKey=function(){return r._editorKey},r.state={contentsKey:0},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype._buildHandler=function(e){var t=this;return function(n){if(!t.props.readOnly){var r=t._handler&&t._handler[e];r&&r(t,n)}}},t.prototype._showPlaceholder=function(){return!!this.props.placeholder&&!this.props.editorState.isInCompositionMode()&&!this.props.editorState.getCurrentContent().hasText()},t.prototype._renderPlaceholder=function(){if(this._showPlaceholder()){var e={text:E(this.props.placeholder),editorState:this.props.editorState,textAlignment:this.props.textAlignment,accessibilityID:this._placeholderAccessibilityID};return p.createElement(c,e)}return null},t.prototype.render=function(){var e=this,t=this.props,n=t.blockRenderMap,o=t.blockRendererFn,a=t.blockStyleFn,s=t.customStyleFn,l=t.customStyleMap,c=t.editorState,f=t.readOnly,d=t.textAlignment,h=t.textDirectionality,y=g({"DraftEditor/root":!0,"DraftEditor/alignLeft":"left"===d,"DraftEditor/alignRight":"right"===d,"DraftEditor/alignCenter":"center"===d}),m=this.props.role||"textbox",v="combobox"===m?!!this.props.ariaExpanded:null,_={blockRenderMap:n,blockRendererFn:o,blockStyleFn:a,customStyleMap:r({},i,l),customStyleFn:s,editorKey:this._editorKey,editorState:c,key:"contents"+this.state.contentsKey,textDirectionality:h};return p.createElement("div",{className:y},this._renderPlaceholder(),p.createElement("div",{className:g("DraftEditor/editorContainer"),ref:function(t){return e.editorContainer=t}},p.createElement("div",{"aria-activedescendant":f?null:this.props.ariaActiveDescendantID,"aria-autocomplete":f?null:this.props.ariaAutoComplete,"aria-controls":f?null:this.props.ariaControls,"aria-describedby":this.props.ariaDescribedBy||this._placeholderAccessibilityID,"aria-expanded":f?null:v,"aria-label":this.props.ariaLabel,"aria-labelledby":this.props.ariaLabelledBy,"aria-multiline":this.props.ariaMultiline,autoCapitalize:this.props.autoCapitalize,autoComplete:this.props.autoComplete,autoCorrect:this.props.autoCorrect,className:g({notranslate:!f,"public/DraftEditor/content":!0}),contentEditable:!f,"data-testid":this.props.webDriverTestID,onBeforeInput:this._onBeforeInput,onBlur:this._onBlur,onCompositionEnd:this._onCompositionEnd,onCompositionStart:this._onCompositionStart,onCopy:this._onCopy,onCut:this._onCut,onDragEnd:this._onDragEnd,onDragEnter:this.onDragEnter,onDragLeave:this.onDragLeave,onDragOver:this._onDragOver,onDragStart:this._onDragStart,onDrop:this._onDrop,onFocus:this._onFocus,onInput:this._onInput,onKeyDown:this._onKeyDown,onKeyPress:this._onKeyPress,onKeyUp:this._onKeyUp,onMouseUp:this._onMouseUp,onPaste:this._onPaste,onSelect:this._onSelect,ref:function(t){return e.editor=t},role:f?null:m,spellCheck:k&&this.props.spellCheck,style:{outline:"none",userSelect:"text",WebkitUserSelect:"text",whiteSpace:"pre-wrap",wordWrap:"break-word"},suppressContentEditableWarning:!0,tabIndex:this.props.tabIndex},p.createElement(u,_))))},t.prototype.componentDidMount=function(){this.setMode("edit"),S&&document.execCommand("AutoUrlDetect",!1,!1)},t.prototype.componentWillUpdate=function(e){this._blockSelectEvents=!0,this._latestEditorState=e.editorState},t.prototype.componentDidUpdate=function(){this._blockSelectEvents=!1,this._latestCommittedEditorState=this.props.editorState},t}(p.Component);O.defaultProps={blockRenderMap:o,blockRendererFn:v.thatReturnsNull,blockStyleFn:v.thatReturns(""),keyBindingFn:b,readOnly:!1,spellCheck:!1,stripPastedStyles:!1},e.exports=O},function(e,t,n){"use strict";var r=n(5).List,o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._decorators=t.slice()}return e.prototype.getDecorations=function(e,t){var n=Array(e.getText().length).fill(null);return this._decorators.forEach(function(r,o){var i=0;(0,r.strategy)(e,function(e,t){(function(e,t,n){for(var r=t;r<n;r++)if(null!=e[r])return!1;return!0})(n,e,t)&&(function(e,t,n,r){for(var o=t;o<n;o++)e[o]=r}(n,e,t,o+"."+i),i++)},t)}),r(n)},e.prototype.getComponentForKey=function(e){var t=parseInt(e.split(".")[0],10);return this._decorators[t].component},e.prototype.getPropsForKey=function(e){var t=parseInt(e.split(".")[0],10);return this._decorators[t].props},e}();e.exports=o},function(e,t,n){"use strict";var r=n(13),o=n(5),i=n(77),a=n(4),u=o.OrderedMap,s=o.List,l=function(e,t,n){if(e){var r=t.get(e);r&&t.set(e,n(r))}};e.exports=function(e,t,n,o){"replace"===o&&a(!1);var c=n.getKey(),f=t.getKey();f===c&&a(!1);var p=e.getBlockMap(),d=t instanceof r,h=[t],y=p.delete(f);d&&(h=[],y=p.withMutations(function(e){var n=t.getNextSiblingKey(),r=i(t,e);e.toSeq().skipUntil(function(e){return e.getKey()===f}).takeWhile(function(e){var t=e.getKey(),o=t===f,i=n&&t!==n,a=!n&&e.getParentKey()&&(!r||t!==r);return!!(o||i||a)}).forEach(function(t){h.push(t),e.delete(t.getKey())})}));var m=y.toSeq().takeUntil(function(e){return e===n}),g=y.toSeq().skipUntil(function(e){return e===n}).skip(1),v=h.map(function(e){return[e.getKey(),e]}),_=u();if("before"===o){var b=e.getBlockBefore(c);b&&b.getKey()===t.getKey()&&a(!1),_=m.concat([].concat(v,[[c,n]]),g).toOrderedMap()}else if("after"===o){var w=e.getBlockAfter(c);w&&w.getKey()===f&&a(!1),_=m.concat([[c,n]].concat(v),g).toOrderedMap()}return e.merge({blockMap:function(e,t,n,r,o){if(!o)return e;var i="after"===r,a=t.getKey(),u=n.getKey(),c=t.getParentKey(),f=t.getNextSiblingKey(),p=t.getPrevSiblingKey(),d=n.getParentKey(),h=i?n.getNextSiblingKey():u,y=i?u:n.getPrevSiblingKey();return e.withMutations(function(e){l(c,e,function(e){var t=e.getChildKeys();return e.merge({children:t.delete(t.indexOf(a))})}),l(p,e,function(e){return e.merge({nextSibling:f})}),l(f,e,function(e){return e.merge({prevSibling:p})}),l(h,e,function(e){return e.merge({prevSibling:a})}),l(y,e,function(e){return e.merge({nextSibling:a})}),l(d,e,function(e){var t=e.getChildKeys(),n=t.indexOf(u),r=i?n+1:0!==n?n-1:0,o=t.toArray();return o.splice(r,0,a),e.merge({children:s(o)})}),l(a,e,function(e){return e.merge({nextSibling:h,prevSibling:y,parent:d})})})}(_,t,n,o,d),selectionBefore:e.getSelectionAfter(),selectionAfter:e.getSelectionAfter().merge({anchorKey:f,focusKey:f})})}},function(e,t,n){"use strict";var r=n(74),o=n(47),i=n(4),a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t?o.isStrong(t)||i(!1):t=o.getGlobalDir(),this._defaultDir=t,this.reset()}return e.prototype.reset=function(){this._lastDir=this._defaultDir},e.prototype.getDirection=function(e){return this._lastDir=r.getDirection(e,this._lastDir),this._lastDir},e}();e.exports=a},function(e,t,n){"use strict";var r,o=n(5),i=n(174),a=n(15),u=o.OrderedMap,s={getDirectionMap:function(e,t){r?r.reset():r=new i;var n=e.getBlockMap(),s=n.valueSeq().map(function(e){return a(r).getDirection(e.getText())}),l=u(n.keySeq().zip(s));return null!=t&&o.is(t,l)?t:l}};e.exports=s},function(e,t,n){"use strict";var r=n(13),o=n(5),i=n(21),a=n(4),u=o.List,s=o.Map,l=function(e,t,n){if(e){var r=t.get(e);r&&t.set(e,n(r))}};e.exports=function(e,t){t.isCollapsed()||a(!1);var n=t.getAnchorKey(),o=t.getAnchorOffset(),c=e.getBlockMap(),f=c.get(n),p=f.getText(),d=f.getCharacterList(),h=i(),y=f instanceof r,m=f.merge({text:p.slice(0,o),characterList:d.slice(0,o)}),g=m.merge({key:h,text:p.slice(o),characterList:d.slice(o),data:s()}),v=c.toSeq().takeUntil(function(e){return e===f}),_=c.toSeq().skipUntil(function(e){return e===f}).rest(),b=v.concat([[n,m],[h,g]],_).toOrderedMap();return y&&(f.getChildKeys().isEmpty()||a(!1),b=function(e,t,n){return e.withMutations(function(e){var r=t.getKey(),o=n.getKey();l(t.getParentKey(),e,function(e){var t=e.getChildKeys(),n=t.indexOf(r)+1,i=t.toArray();return i.splice(n,0,o),e.merge({children:u(i)})}),l(t.getNextSiblingKey(),e,function(e){return e.merge({prevSibling:o})}),l(r,e,function(e){return e.merge({nextSibling:o})}),l(o,e,function(e){return e.merge({prevSibling:r})})})}(b,m,g)),e.merge({blockMap:b,selectionBefore:t,selectionAfter:t.merge({anchorKey:h,anchorOffset:0,focusKey:h,focusOffset:0,isBackward:!1})})}},function(e,t,n){"use strict";var r=n(13),o=n(5),i=n(77),a=(o.List,o.Map),u=function(e,t,n){if(e){var r=t.get(e);r&&t.set(e,n(r))}},s=function(e,t){var n=[];if(!e)return n;for(var r=t.get(e);r&&r.getParentKey();){var o=r.getParentKey();o&&n.push(o),r=o?t.get(o):null}return n},l=function(e,t,n){if(!e)return null;for(var r=n.get(e.getKey()).getNextSiblingKey();r&&!t.get(r);)r=n.get(r).getNextSiblingKey()||null;return r},c=function(e,t,n){if(!e)return null;for(var r=n.get(e.getKey()).getPrevSiblingKey();r&&!t.get(r);)r=n.get(r).getPrevSiblingKey()||null;return r},f=function(e,t,n,r){return e.withMutations(function(e){u(t.getKey(),e,function(n){return n.merge({nextSibling:l(t,e,r),prevSibling:c(t,e,r)})}),u(n.getKey(),e,function(t){return t.merge({nextSibling:l(n,e,r),prevSibling:c(n,e,r)})}),s(t.getKey(),r).forEach(function(t){return u(t,e,function(t){return t.merge({children:t.getChildKeys().filter(function(t){return e.get(t)}),nextSibling:l(t,e,r),prevSibling:c(t,e,r)})})}),u(t.getNextSiblingKey(),e,function(e){return e.merge({prevSibling:t.getPrevSiblingKey()})}),u(t.getPrevSiblingKey(),e,function(n){return n.merge({nextSibling:l(t,e,r)})}),u(n.getNextSiblingKey(),e,function(t){return t.merge({prevSibling:c(n,e,r)})}),u(n.getPrevSiblingKey(),e,function(e){return e.merge({nextSibling:n.getNextSiblingKey()})}),s(n.getKey(),r).forEach(function(t){u(t,e,function(t){return t.merge({children:t.getChildKeys().filter(function(t){return e.get(t)}),nextSibling:l(t,e,r),prevSibling:c(t,e,r)})})}),function(e,t){var n=[];if(!e)return n;for(var r=i(e,t);r&&t.get(r);){var o=t.get(r);n.push(r),r=o.getParentKey()?i(o,t):null}return n}(n,r).forEach(function(t){return u(t,e,function(t){return t.merge({nextSibling:l(t,e,r),prevSibling:c(t,e,r)})})})})},p=function(e,t,n){if(0===t)for(;t<n;)e=e.shift(),t++;else if(n===e.count())for(;n>t;)e=e.pop(),n--;else{var r=e.slice(0,t),o=e.slice(n);e=r.concat(o).toList()}return e};e.exports=function(e,t){if(t.isCollapsed())return e;var n=e.getBlockMap(),o=t.getStartKey(),u=t.getStartOffset(),l=t.getEndKey(),c=t.getEndOffset(),d=n.get(o),h=n.get(l),y=d instanceof r,m=[];if(y){var g=h.getChildKeys(),v=s(l,n);h.getNextSiblingKey()&&(m=m.concat(v)),g.isEmpty()||(m=m.concat(v.concat([l]))),m=m.concat(s(i(h,n),n))}var _=void 0;_=d===h?p(d.getCharacterList(),u,c):d.getCharacterList().slice(0,u).concat(h.getCharacterList().slice(c));var b=d.merge({text:d.getText().slice(0,u)+h.getText().slice(c),characterList:_}),w=n.toSeq().skipUntil(function(e,t){return t===o}).takeUntil(function(e,t){return t===l}).filter(function(e,t){return-1===m.indexOf(t)}).concat(a([[l,null]])).map(function(e,t){return t===o?b:null}),C=n.merge(w).filter(function(e){return!!e});return y&&(C=f(C,d,h,n)),e.merge({blockMap:C,selectionBefore:t,selectionAfter:t.merge({anchorKey:o,anchorOffset:u,focusKey:o,focusOffset:u,isBackward:!1})})}},function(e,t,n){"use strict";var r=n(5).Map;e.exports=function(e,t,n){var o=t.getStartKey(),i=t.getEndKey(),a=e.getBlockMap(),u=a.toSeq().skipUntil(function(e,t){return t===o}).takeUntil(function(e,t){return t===i}).concat(r([[i,a.get(i)]])).map(n);return e.merge({blockMap:a.merge(u),selectionBefore:t,selectionAfter:t})}},function(e,t,n){"use strict";var r=n(5),o=n(78),i=n(4),a=r.Repeat;e.exports=function(e,t,n,r){t.isCollapsed()||i(!1);var u=n.length;if(!u)return e;var s=e.getBlockMap(),l=t.getStartKey(),c=t.getStartOffset(),f=s.get(l),p=f.getText(),d=f.merge({text:p.slice(0,c)+n+p.slice(c,f.getLength()),characterList:o(f.getCharacterList(),a(r,u).toList(),c)}),h=c+u;return e.merge({blockMap:s.set(l,d),selectionAfter:t.merge({anchorOffset:h,focusOffset:h})})}},function(e,t,n){"use strict";var r=n(34),o=n(13),i=n(5),a=n(78),u=n(4),s=n(80),l=i.List,c=function(e,t,n,i,a,u){var s=n.first()instanceof o,c=[],f=i.size,p=n.get(a),d=i.first(),h=i.last(),y=h.getLength(),m=h.getKey(),g=s&&(!p.getChildKeys().isEmpty()||!d.getChildKeys().isEmpty());n.forEach(function(e,t){t===a?(g?c.push(e):c.push(function(e,t,n){var r=e.getText(),o=e.getCharacterList(),i=r.slice(0,t),a=o.slice(0,t),u=n.first();return e.merge({text:i+u.getText(),characterList:a.concat(u.getCharacterList()),type:i?e.getType():u.getType(),data:u.getData()})}(e,u,i)),i.slice(g?0:1,f-1).forEach(function(e){return c.push(e)}),c.push(function(e,t,n){var r=e.getText(),o=e.getCharacterList(),i=r.length,a=r.slice(t,i),u=o.slice(t,i),s=n.last();return s.merge({text:s.getText()+a,characterList:s.getCharacterList().concat(u),data:s.getData()})}(e,u,i))):c.push(e)});var v=r.createFromArray(c);return s&&(v=function(e,t,n,r){return e.withMutations(function(t){var o=n.getKey(),i=r.getKey(),a=n.getNextSiblingKey(),u=n.getParentKey(),s=function(e,t){var n=e.getKey(),r=e,o=[];for(t.get(n)&&o.push(n);r&&r.getNextSiblingKey();){var i=r.getNextSiblingKey();if(!i)break;o.push(i),r=t.get(i)}return o}(r,e),c=s[s.length-1];if(t.get(i)?(t.setIn([o,"nextSibling"],i),t.setIn([i,"prevSibling"],o)):(t.setIn([o,"nextSibling"],r.getNextSiblingKey()),t.setIn([r.getNextSiblingKey(),"prevSibling"],o)),t.setIn([c,"nextSibling"],a),a&&t.setIn([a,"prevSibling"],c),s.forEach(function(e){return t.setIn([e,"parent"],u)}),u){var f=e.get(u).getChildKeys(),p=f.indexOf(o)+1,d=f.toArray();d.splice.apply(d,[p,0].concat(s)),t.setIn([u,"children"],l(d))}})}(v,0,p,d)),e.merge({blockMap:v,selectionBefore:t,selectionAfter:t.merge({anchorKey:m,anchorOffset:y,focusKey:m,focusOffset:y,isBackward:!1})})};e.exports=function(e,t,n){t.isCollapsed()||u(!1);var r=e.getBlockMap(),i=s(n),l=t.getStartKey(),f=t.getStartOffset(),p=r.get(l);return p instanceof o&&(p.getChildKeys().isEmpty()||u(!1)),1===i.size?function(e,t,n,r,o,i){var u=n.get(o),s=u.getText(),l=u.getCharacterList(),c=o,f=i+r.getText().length,p=u.merge({text:s.slice(0,i)+r.getText()+s.slice(i),characterList:a(l,r.getCharacterList(),i),data:r.getData()});return e.merge({blockMap:n.set(o,p),selectionBefore:t,selectionAfter:t.merge({anchorKey:c,anchorOffset:f,focusKey:c,focusOffset:f,isBackward:!1})})}(e,t,r,i.first(),l,f):c(e,t,r,i,l,f)}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t){var n=[];return e.findEntityRanges(function(e){return e.getEntity()===t},function(e,t){n.push({start:e,end:t})}),n.length||r(!1),n}},function(e,t,n){"use strict";e.exports={getRemovalRange:function(e,t,n,r,o){var i=n.split(" ");i=i.map(function(e,t){if("forward"===o){if(t>0)return" "+e}else if(t<i.length-1)return e+" ";return e});for(var a,u=r,s=null,l=null,c=0;c<i.length;c++){if(e<(a=u+i[c].length)&&u<t)null!==s?l=a:(s=u,l=a);else if(null!==s)break;u=a}var f=r+n.length,p=s===r,d=l===f;return(!p&&d||p&&!d)&&("forward"===o?l!==f&&l++:s!==r&&s--),{start:s,end:l}}}},function(e,t,n){"use strict";var r=n(182),o=n(181),i=n(4);function a(e,t,n,a,u,s,l){var c=n.getStartOffset(),f=n.getEndOffset(),p=e.__get(u).getMutability(),d=l?c:f;if("MUTABLE"===p)return n;var h=o(t,u).filter(function(e){return d<=e.end&&d>=e.start});1!=h.length&&i(!1);var y=h[0];if("IMMUTABLE"===p)return n.merge({anchorOffset:y.start,focusOffset:y.end,isBackward:!1});s||(l?f=y.end:c=y.start);var m=r.getRemovalRange(c,f,t.getText().slice(y.start,y.end),y.start,a);return n.merge({anchorOffset:m.start,focusOffset:m.end,isBackward:!1})}e.exports=function(e,t,n,r,o){var i=r.getStartOffset(),u=r.getEndOffset(),s=t.getEntityAt(i),l=n.getEntityAt(u-1);if(!s&&!l)return r;var c=r;if(s&&s===l)c=a(e,t,c,o,s,!0,!0);else if(s&&l){var f=a(e,t,c,o,s,!1,!0),p=a(e,n,c,o,l,!1,!1);c=c.merge({anchorOffset:f.getAnchorOffset(),focusOffset:p.getFocusOffset(),isBackward:!1})}else if(s){var d=a(e,t,c,o,s,!1,!0);c=c.merge({anchorOffset:d.getStartOffset(),isBackward:!1})}else if(l){var h=a(e,n,c,o,l,!1,!1);c=c.merge({focusOffset:h.getEndOffset(),isBackward:!1})}return c}},function(e,t,n){"use strict";var r=n(12);e.exports=function(e,t,n,o){for(var i=e.getCharacterList();t<n;)i=i.set(t,r.applyEntity(i.get(t),o)),t++;return e.set("characterList",i)}},function(e,t,n){"use strict";var r=n(5),o=n(184);e.exports=function(e,t,n){var i=e.getBlockMap(),a=t.getStartKey(),u=t.getStartOffset(),s=t.getEndKey(),l=t.getEndOffset(),c=i.skipUntil(function(e,t){return t===a}).takeUntil(function(e,t){return t===s}).toOrderedMap().merge(r.OrderedMap([[s,i.get(s)]])).map(function(e,t){var r=t===a?u:0,i=t===s?l:e.getLength();return o(e,r,i,n)});return e.merge({blockMap:i.merge(c),selectionBefore:t,selectionAfter:t})}},function(e,t,n){"use strict";var r=n(12),o=n(5).Map,i={add:function(e,t,n){return a(e,t,n,!0)},remove:function(e,t,n){return a(e,t,n,!1)}};function a(e,t,n,i){var a=e.getBlockMap(),u=t.getStartKey(),s=t.getStartOffset(),l=t.getEndKey(),c=t.getEndOffset(),f=a.skipUntil(function(e,t){return t===u}).takeUntil(function(e,t){return t===l}).concat(o([[l,a.get(l)]])).map(function(e,t){var o,a;u===l?(o=s,a=c):(o=t===u?s:0,a=t===l?c:e.getLength());for(var f,p=e.getCharacterList();o<a;)f=p.get(o),p=p.set(o,i?r.applyStyle(f,n):r.removeStyle(f,n)),o++;return e.set("characterList",p)});return e.merge({blockMap:a.merge(f),selectionBefore:t,selectionAfter:t})}e.exports=i},function(e,t,n){"use strict";e.exports={draft_killswitch_allow_nontextnodes:!1,draft_segmented_entities_behavior:!1,draft_handlebeforeinput_composed_text:!1,draft_tree_data_support:!1}},function(e,t,n){"use strict";var r=n(11)||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(34),i=n(12),a=n(26),u=n(13),s=n(23),l=n(10),c=n(6),f=n(5),p=(n(28),n(21)),d=n(173),h=s.draft_tree_data_support,y=h?u:a,m=f.List,g=f.Repeat,v={insertAtomicBlock:function(e,t,n){var a=e.getCurrentContent(),u=e.getSelection(),s=l.removeRange(a,u,"backward"),f=s.getSelectionAfter(),d=l.splitBlock(s,f),v=d.getSelectionAfter(),_=l.setBlockType(d,v,"atomic"),b=i.create({entity:t}),w={key:p(),type:"atomic",text:n,characterList:m(g(b,n.length))},C={key:p(),type:"unstyled"};h&&(w=r({},w,{nextSibling:C.key}),C=r({},C,{prevSibling:w.key}));var E=[new y(w),new y(C)],S=o.createFromArray(E),k=l.replaceWithFragment(_,v,S),x=k.merge({selectionBefore:u,selectionAfter:k.getSelectionAfter().set("hasFocus",!0)});return c.push(e,x,"insert-fragment")},moveAtomicBlock:function(e,t,n,r){var o=e.getCurrentContent(),i=e.getSelection(),a=void 0;if("before"===r||"after"===r){var u=o.getBlockForKey("before"===r?n.getStartKey():n.getEndKey());a=d(o,t,u,r)}else{var s=l.removeRange(o,n,"backward"),f=s.getSelectionAfter(),p=s.getBlockForKey(f.getFocusKey());if(0===f.getStartOffset())a=d(s,t,p,"before");else if(f.getEndOffset()===p.getLength())a=d(s,t,p,"after");else{var h=l.splitBlock(s,f),y=h.getSelectionAfter(),m=h.getBlockForKey(y.getFocusKey());a=d(h,t,m,"before")}}var g=a.merge({selectionBefore:i,selectionAfter:a.getSelectionAfter().set("hasFocus",!0)});return c.push(e,g,"move-block")}};e.exports=v},function(e,t,n){"use strict";var r=n(188),o=n(34),i=n(12),a=n(172),u=n(26),s=n(49),l=n(46),c=n(73),f=n(171),p=n(71),d=n(36),h=n(10),y=n(75),m=n(6),g=n(40),v=n(58),_=n(28),b=n(111),w={Editor:f,EditorBlock:p,EditorState:m,CompositeDecorator:a,Entity:d,EntityInstance:y,BlockMapBuilder:o,CharacterMetadata:i,ContentBlock:u,ContentState:s,SelectionState:_,AtomicBlockUtils:r,KeyBindingUtil:g,Modifier:h,RichUtils:v,DefaultDraftBlockRenderMap:l,DefaultDraftInlineStyle:c,convertFromHTML:n(60),convertFromRaw:n(108),convertToRaw:b,genKey:n(21),getDefaultKeyBinding:n(57),getVisibleSelectionRect:n(103)};e.exports=w},function(e,t,n){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!==e&&void 0!==e&&this.setState(e)}function o(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!==n&&void 0!==n?n:null}.bind(this))}function i(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function a(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,a=null,u=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?u="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(u="UNSAFE_componentWillUpdate"),null!==n||null!==a||null!==u){var s=e.displayName||e.name,l="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+s+" uses "+l+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+(null!==u?"\n  "+u:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=i;var c=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;c.call(this,e,t,r)}}return e}n.r(t),n.d(t,"polyfill",function(){return a}),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,i.__suppressDeprecationWarning=!0},function(e,t,n){var r;
/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/
/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/
!function(){"use strict";var o=!("undefined"==typeof window||!window.document||!window.document.createElement),i={canUseDOM:o,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:o&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:o&&!!window.screen};void 0===(r=function(){return i}.call(t,n,t,e))||(e.exports=r)}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dumpClassLists=function(){0};var r={},o={};t.add=function(e,t){return n=e.classList,i="html"==e.nodeName.toLowerCase()?r:o,void t.split(" ").forEach(function(e){!function(e,t){e[t]||(e[t]=0),e[t]+=1}(i,e),n.add(e)});var n,i},t.remove=function(e,t){return n=e.classList,i="html"==e.nodeName.toLowerCase()?r:o,void t.split(" ").forEach(function(e){!function(e,t){e[t]&&(e[t]-=1)}(i,e),0===i[e]&&n.remove(e)});var n,i}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=(0,i.default)(e);if(!n.length)return void t.preventDefault();var r,o=t.shiftKey,a=n[0],u=n[n.length-1];if(e===document.activeElement){if(!o)return;r=u}u!==document.activeElement||o||(r=a);a===document.activeElement&&o&&(r=u);if(r)return t.preventDefault(),void r.focus();var s=/(\bChrome\b|\bSafari\b)\//.exec(navigator.userAgent);if(null==s||"Chrome"==s[1]||null!=/\biPod\b|\biPad\b/g.exec(navigator.userAgent))return;var l=n.indexOf(document.activeElement);l>-1&&(l+=o?-1:1);t.preventDefault(),n[l].focus()};var r,o=n(83),i=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.handleBlur=l,t.handleFocus=c,t.markForFocusLater=function(){a.push(document.activeElement)},t.returnFocus=function(){var e=null;try{return void(0!==a.length&&(e=a.pop()).focus())}catch(t){console.warn(["You tried to return focus to",e,"but it is not in the DOM anymore"].join(" "))}},t.popWithoutFocus=function(){a.length>0&&a.pop()},t.setupScopedFocus=function(e){u=e,window.addEventListener?(window.addEventListener("blur",l,!1),document.addEventListener("focus",c,!0)):(window.attachEvent("onBlur",l),document.attachEvent("onFocus",c))},t.teardownScopedFocus=function(){u=null,window.addEventListener?(window.removeEventListener("blur",l),document.removeEventListener("focus",c)):(window.detachEvent("onBlur",l),document.detachEvent("onFocus",c))};var r,o=n(83),i=(r=o)&&r.__esModule?r:{default:r};var a=[],u=null,s=!1;function l(){s=!0}function c(){if(s){if(s=!1,!u)return;setTimeout(function(){u.contains(document.activeElement)||((0,i.default)(u)[0]||u).focus()},0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),u=y(a),s=y(n(0)),l=h(n(194)),c=y(n(193)),f=h(n(82)),p=h(n(192)),d=y(n(81));function h(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function y(e){return e&&e.__esModule?e:{default:e}}var m={overlay:"ReactModal__Overlay",content:"ReactModal__Content"},g=9,v=27,_=0,b=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.setOverlayRef=function(e){n.overlay=e,n.props.overlayRef&&n.props.overlayRef(e)},n.setContentRef=function(e){n.content=e,n.props.contentRef&&n.props.contentRef(e)},n.afterClose=function(){var e=n.props,t=e.appElement,r=e.ariaHideApp,o=e.htmlOpenClassName,i=e.bodyOpenClassName;p.remove(document.body,i),o&&p.remove(document.getElementsByTagName("html")[0],o),r&&_>0&&0===(_-=1)&&f.show(t),n.props.shouldFocusAfterRender&&(n.props.shouldReturnFocusAfterClose?(l.returnFocus(),l.teardownScopedFocus()):l.popWithoutFocus())},n.open=function(){n.beforeOpen(),n.state.afterOpen&&n.state.beforeClose?(clearTimeout(n.closeTimer),n.setState({beforeClose:!1})):(n.props.shouldFocusAfterRender&&(l.setupScopedFocus(n.node),l.markForFocusLater()),n.setState({isOpen:!0},function(){n.setState({afterOpen:!0}),n.props.isOpen&&n.props.onAfterOpen&&n.props.onAfterOpen()}))},n.close=function(){n.props.closeTimeoutMS>0?n.closeWithTimeout():n.closeWithoutTimeout()},n.focusContent=function(){return n.content&&!n.contentHasFocus()&&n.content.focus()},n.closeWithTimeout=function(){var e=Date.now()+n.props.closeTimeoutMS;n.setState({beforeClose:!0,closesAt:e},function(){n.closeTimer=setTimeout(n.closeWithoutTimeout,n.state.closesAt-Date.now())})},n.closeWithoutTimeout=function(){n.setState({beforeClose:!1,isOpen:!1,afterOpen:!1,closesAt:null},n.afterClose)},n.handleKeyDown=function(e){e.keyCode===g&&(0,c.default)(n.content,e),n.props.shouldCloseOnEsc&&e.keyCode===v&&(e.stopPropagation(),n.requestClose(e))},n.handleOverlayOnClick=function(e){null===n.shouldClose&&(n.shouldClose=!0),n.shouldClose&&n.props.shouldCloseOnOverlayClick&&(n.ownerHandlesClose()?n.requestClose(e):n.focusContent()),n.shouldClose=null},n.handleContentOnMouseUp=function(){n.shouldClose=!1},n.handleOverlayOnMouseDown=function(e){n.props.shouldCloseOnOverlayClick||e.target!=n.overlay||e.preventDefault()},n.handleContentOnClick=function(){n.shouldClose=!1},n.handleContentOnMouseDown=function(){n.shouldClose=!1},n.requestClose=function(e){return n.ownerHandlesClose()&&n.props.onRequestClose(e)},n.ownerHandlesClose=function(){return n.props.onRequestClose},n.shouldBeClosed=function(){return!n.state.isOpen&&!n.state.beforeClose},n.contentHasFocus=function(){return document.activeElement===n.content||n.content.contains(document.activeElement)},n.buildClassName=function(e,t){var r="object"===(void 0===t?"undefined":o(t))?t:{base:m[e],afterOpen:m[e]+"--after-open",beforeClose:m[e]+"--before-close"},i=r.base;return n.state.afterOpen&&(i=i+" "+r.afterOpen),n.state.beforeClose&&(i=i+" "+r.beforeClose),"string"==typeof t&&t?i+" "+t:i},n.ariaAttributes=function(e){return Object.keys(e).reduce(function(t,n){return t["aria-"+n]=e[n],t},{})},n.state={afterOpen:!1,beforeClose:!1},n.shouldClose=null,n.moveFromContentToOverlay=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),i(t,[{key:"componentDidMount",value:function(){this.props.isOpen&&this.open()}},{key:"componentDidUpdate",value:function(e,t){this.props.isOpen&&!e.isOpen?this.open():!this.props.isOpen&&e.isOpen&&this.close(),this.props.shouldFocusAfterRender&&this.state.isOpen&&!t.isOpen&&this.focusContent()}},{key:"componentWillUnmount",value:function(){this.afterClose(),clearTimeout(this.closeTimer)}},{key:"beforeOpen",value:function(){var e=this.props,t=e.appElement,n=e.ariaHideApp,r=e.htmlOpenClassName,o=e.bodyOpenClassName;p.add(document.body,o),r&&p.add(document.getElementsByTagName("html")[0],r),n&&(_+=1,f.hide(t))}},{key:"render",value:function(){var e=this.props,t=e.className,n=e.overlayClassName,o=e.defaultStyles,i=t?{}:o.content,a=n?{}:o.overlay;return this.shouldBeClosed()?null:u.default.createElement("div",{ref:this.setOverlayRef,className:this.buildClassName("overlay",n),style:r({},a,this.props.style.overlay),onClick:this.handleOverlayOnClick,onMouseDown:this.handleOverlayOnMouseDown,"aria-modal":"true"},u.default.createElement("div",r({ref:this.setContentRef,style:r({},i,this.props.style.content),className:this.buildClassName("content",t),tabIndex:"-1",onKeyDown:this.handleKeyDown,onMouseDown:this.handleContentOnMouseDown,onMouseUp:this.handleContentOnMouseUp,onClick:this.handleContentOnClick,role:this.props.role,"aria-label":this.props.contentLabel},this.ariaAttributes(this.props.aria||{}),{"data-testid":this.props.testId}),this.props.children))}}]),t}();b.defaultProps={style:{overlay:{},content:{}},defaultStyles:{}},b.propTypes={isOpen:s.default.bool.isRequired,defaultStyles:s.default.shape({content:s.default.object,overlay:s.default.object}),style:s.default.shape({content:s.default.object,overlay:s.default.object}),className:s.default.oneOfType([s.default.string,s.default.object]),overlayClassName:s.default.oneOfType([s.default.string,s.default.object]),bodyOpenClassName:s.default.string,htmlOpenClassName:s.default.string,ariaHideApp:s.default.bool,appElement:s.default.instanceOf(d.default),onAfterOpen:s.default.func,onRequestClose:s.default.func,closeTimeoutMS:s.default.number,shouldFocusAfterRender:s.default.bool,shouldCloseOnOverlayClick:s.default.bool,shouldReturnFocusAfterClose:s.default.bool,role:s.default.string,contentLabel:s.default.string,aria:s.default.object,children:s.default.node,shouldCloseOnEsc:s.default.bool,overlayRef:s.default.func,contentRef:s.default.func,testId:s.default.string},t.default=b,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyOpenClassName=t.portalClassName=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),a=h(i),u=h(n(7)),s=h(n(0)),l=h(n(195)),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(82)),f=n(81),p=h(f),d=n(190);function h(e){return e&&e.__esModule?e:{default:e}}function y(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var m=t.portalClassName="ReactModalPortal",g=t.bodyOpenClassName="ReactModal__Body--open",v=void 0!==u.default.createPortal,_=v?u.default.createPortal:u.default.unstable_renderSubtreeIntoContainer;function b(e){return e()}var w=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,s=Array(i),c=0;c<i;c++)s[c]=arguments[c];return n=o=y(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),o.removePortal=function(){!v&&u.default.unmountComponentAtNode(o.node),b(o.props.parentSelector).removeChild(o.node)},o.portalRef=function(e){o.portal=e},o.renderPortal=function(e){var n=_(o,a.default.createElement(l.default,r({defaultStyles:t.defaultStyles},e)),o.node);o.portalRef(n)},y(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,[{key:"componentDidMount",value:function(){f.canUseDOM&&(v||(this.node=document.createElement("div")),this.node.className=this.props.portalClassName,b(this.props.parentSelector).appendChild(this.node),!v&&this.renderPortal(this.props))}},{key:"getSnapshotBeforeUpdate",value:function(e){return{prevParent:b(e.parentSelector),nextParent:b(this.props.parentSelector)}}},{key:"componentDidUpdate",value:function(e,t,n){if(f.canUseDOM){var r=this.props,o=r.isOpen,i=r.portalClassName;if(e.portalClassName!==i&&(this.node.className=i),e.isOpen||o){var a=n.prevParent,u=n.nextParent;u!==a&&(a.removeChild(this.node),u.appendChild(this.node)),!v&&this.renderPortal(this.props)}}}},{key:"componentWillUnmount",value:function(){if(f.canUseDOM&&this.node&&this.portal){var e=this.portal.state,t=Date.now(),n=e.isOpen&&this.props.closeTimeoutMS&&(e.closesAt||t+this.props.closeTimeoutMS);n?(e.beforeClose||this.portal.closeWithTimeout(),setTimeout(this.removePortal,n-t)):this.removePortal()}}},{key:"render",value:function(){return f.canUseDOM&&v?(!this.node&&v&&(this.node=document.createElement("div")),_(a.default.createElement(l.default,r({ref:this.portalRef,defaultStyles:t.defaultStyles},this.props)),this.node)):null}}],[{key:"setAppElement",value:function(e){c.setElement(e)}}]),t}();w.propTypes={isOpen:s.default.bool.isRequired,style:s.default.shape({content:s.default.object,overlay:s.default.object}),portalClassName:s.default.string,bodyOpenClassName:s.default.string,htmlOpenClassName:s.default.string,className:s.default.oneOfType([s.default.string,s.default.shape({base:s.default.string.isRequired,afterOpen:s.default.string.isRequired,beforeClose:s.default.string.isRequired})]),overlayClassName:s.default.oneOfType([s.default.string,s.default.shape({base:s.default.string.isRequired,afterOpen:s.default.string.isRequired,beforeClose:s.default.string.isRequired})]),appElement:s.default.instanceOf(p.default),onAfterOpen:s.default.func,onRequestClose:s.default.func,closeTimeoutMS:s.default.number,ariaHideApp:s.default.bool,shouldFocusAfterRender:s.default.bool,shouldCloseOnOverlayClick:s.default.bool,shouldReturnFocusAfterClose:s.default.bool,parentSelector:s.default.func,aria:s.default.object,role:s.default.string,contentLabel:s.default.string,shouldCloseOnEsc:s.default.bool,overlayRef:s.default.func,contentRef:s.default.func},w.defaultProps={isOpen:!1,portalClassName:m,bodyOpenClassName:g,ariaHideApp:!0,closeTimeoutMS:0,shouldFocusAfterRender:!0,shouldCloseOnEsc:!0,shouldCloseOnOverlayClick:!0,shouldReturnFocusAfterClose:!0,parentSelector:function(){return document.body}},w.defaultStyles={overlay:{position:"fixed",top:0,left:0,right:0,bottom:0,backgroundColor:"rgba(255, 255, 255, 0.75)"},content:{position:"absolute",top:"40px",left:"40px",right:"40px",bottom:"40px",border:"1px solid #ccc",background:"#fff",overflow:"auto",WebkitOverflowScrolling:"touch",borderRadius:"4px",outline:"none",padding:"20px"}},(0,d.polyfill)(w),t.default=w},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactModal=__webpack_require__(84),_reactModal2=_interopRequireDefault(_reactModal),_draftJs=__webpack_require__(189),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module),_reactModal2.default.setAppElement("#app");var JobEditModal=function(_React$Component){function JobEditModal(e){_classCallCheck(this,JobEditModal);var t=_possibleConstructorReturn(this,(JobEditModal.__proto__||Object.getPrototypeOf(JobEditModal)).call(this,e));return t.state={},t}return _inherits(JobEditModal,_React$Component),_createClass(JobEditModal,[{key:"render",value:function(){return _react2.default.createElement(_reactModal2.default,{isOpen:this.props.isOpen,contentLabel:"learn-path-modal",onRequestClose:this.props.closeJobModal},_react2.default.createElement("i",{className:"fas fa-times-circle learn-path-close",onClick:this.props.closeJobModal}),_react2.default.createElement(MyEditor,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),JobEditModal}(_react2.default.Component),MyEditor=function(_React$Component2){function MyEditor(e){_classCallCheck(this,MyEditor);var t=_possibleConstructorReturn(this,(MyEditor.__proto__||Object.getPrototypeOf(MyEditor)).call(this,e));return t.state={editorState:_draftJs.EditorState.createEmpty()},t.onChange=function(e){return t.setState({editorState:e})},t}return _inherits(MyEditor,_React$Component2),_createClass(MyEditor,[{key:"render",value:function(){return _react2.default.createElement(_draftJs.Editor,{editorState:this.state.editorState,onChange:this.onChange,id:"employer-draft"})}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MyEditor}(_react2.default.Component),_default=JobEditModal,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(JobEditModal,"JobEditModal","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/jobs/JobEditModal.js"),reactHotLoader.register(MyEditor,"MyEditor","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/jobs/JobEditModal.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/jobs/JobEditModal.js"),leaveModule(module))}).call(this,__webpack_require__(9)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_JobEditModal=__webpack_require__(197),_JobEditModal2=_interopRequireDefault(_JobEditModal),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var SingleDashboardJob=function(_React$Component){function SingleDashboardJob(e){_classCallCheck(this,SingleDashboardJob);var t=_possibleConstructorReturn(this,(SingleDashboardJob.__proto__||Object.getPrototypeOf(SingleDashboardJob)).call(this,e));return t.openJobModal=t.openJobModal.bind(t),t.closeJobModal=t.closeJobModal.bind(t),t.state={isOpen:!1},t}return _inherits(SingleDashboardJob,_React$Component),_createClass(SingleDashboardJob,[{key:"openJobModal",value:function(){this.setState({isOpen:!0})}},{key:"closeJobModal",value:function(){this.setState({isOpen:!1})}},{key:"render",value:function(){return _react2.default.createElement("div",null,_react2.default.createElement("h1",null,"Job Title Here"),_react2.default.createElement("button",{onClick:this.openJobModal},"Edit Job"),_react2.default.createElement(_JobEditModal2.default,{isOpen:this.state.isOpen,closeJobModal:this.closeJobModal}))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),SingleDashboardJob}(_react2.default.Component),_default=SingleDashboardJob,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(SingleDashboardJob,"SingleDashboardJob","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/jobs/SingleDashboardJob.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/jobs/SingleDashboardJob.js"),leaveModule(module))}).call(this,__webpack_require__(9)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_SingleDashboardJob=__webpack_require__(198),_SingleDashboardJob2=_interopRequireDefault(_SingleDashboardJob),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var Company=function(_React$Component){function Company(e){return _classCallCheck(this,Company),_possibleConstructorReturn(this,(Company.__proto__||Object.getPrototypeOf(Company)).call(this,e))}return _inherits(Company,_React$Component),_createClass(Company,[{key:"render",value:function(){return _react2.default.createElement("div",{className:"single-company"},_react2.default.createElement("div",{className:"company-header"},_react2.default.createElement("h2",null,this.props.title)),_react2.default.createElement("div",{className:"button-container"},_react2.default.createElement("button",{className:"delete-company-button"},"Delete")),_react2.default.createElement("section",null,_react2.default.createElement("h1",null,"Job Postings for this ",this.props.title),_react2.default.createElement(_SingleDashboardJob2.default,null),_react2.default.createElement(_SingleDashboardJob2.default,null)))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Company}(_react2.default.Component),_default=Company,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(Company,"Company","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/companies/Company.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/companies/Company.js"),leaveModule(module))}).call(this,__webpack_require__(9)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_Company=__webpack_require__(199),_Company2=_interopRequireDefault(_Company),_NewCompanyModal=__webpack_require__(101),_NewCompanyModal2=_interopRequireDefault(_NewCompanyModal),_axios=__webpack_require__(29),_axios2=_interopRequireDefault(_axios),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var CompaniesSection=function(_React$Component){function CompaniesSection(e){_classCallCheck(this,CompaniesSection);var t=_possibleConstructorReturn(this,(CompaniesSection.__proto__||Object.getPrototypeOf(CompaniesSection)).call(this,e));return t.createNewCompany=t.createNewCompany.bind(t),t.closeNewCompanyModal=t.closeNewCompanyModal.bind(t),t.state={companies:[],newCompanyModalIsOpen:!1},t}return _inherits(CompaniesSection,_React$Component),_createClass(CompaniesSection,[{key:"createNewCompany",value:function(){this.setState({newCompanyModalIsOpen:!0}),console.log("open company modal")}},{key:"closeNewCompanyModal",value:function(){this.setState({newCompanyModalIsOpen:!1})}},{key:"componentWillMount",value:function(){var e=this;(0,_axios2.default)({method:"get",url:"http://127.0.0.1:8000/company/user_view",data:{},responseType:"json"}).then(function(t){if(200===t.status)return e.setState({companies:t.data}),_react2.default.createElement(Redirect,{to:"/employer_dashboard"})}).catch(function(e){console.log("this is an error yo",e)})}},{key:"render",value:function(){return _react2.default.createElement("section",null,_react2.default.createElement("h1",null,"Companies"),_react2.default.createElement("div",{id:"create-new-company-container"},_react2.default.createElement("button",{id:"create-new-company-button",onClick:this.createNewCompany},"Create new company")),this.state.companies.map(function(e){return _react2.default.createElement(_Company2.default,{title:e.name})}),_react2.default.createElement(_NewCompanyModal2.default,{newCompanyModalIsOpen:this.state.newCompanyModalIsOpen,closeNewCompanyModal:this.closeNewCompanyModal}))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),CompaniesSection}(_react2.default.Component),_default=CompaniesSection,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(CompaniesSection,"CompaniesSection","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/companies/CompaniesSection.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/companies/CompaniesSection.js"),leaveModule(module))}).call(this,__webpack_require__(9)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(7),_reactDom2=_interopRequireDefault(_reactDom),_Header=__webpack_require__(18),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(17),_Footer2=_interopRequireDefault(_Footer),_CompaniesSection=__webpack_require__(200),_CompaniesSection2=_interopRequireDefault(_CompaniesSection),_axios=__webpack_require__(29),_axios2=_interopRequireDefault(_axios),_reactRouterDom=__webpack_require__(22),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var EmployerDashboard=function(_React$Component){function EmployerDashboard(e){_classCallCheck(this,EmployerDashboard);var t=_possibleConstructorReturn(this,(EmployerDashboard.__proto__||Object.getPrototypeOf(EmployerDashboard)).call(this,e));t.handleLogOut=t.handleLogOut.bind(t);var n=localStorage.getItem("responseToken"),r=localStorage.getItem("responseEmail");localStorage.getItem("responseEmail"),localStorage.getItem("responseEmail");return t.state={redirectToHome:!1,firstName:null,lastName:null,email:r,token:n,returnedResponse:null},t}return _inherits(EmployerDashboard,_React$Component),_createClass(EmployerDashboard,[{key:"componentWillMount",value:function(){var e=this;_axios2.default.defaults.headers.common.Authorization=this.state.token,(0,_axios2.default)({method:"get",url:"http://127.0.0.1:8000/authenticate/current_user/",data:{email:this.state.email,token:this.state.token},headers:{Authorization:"Bearer "+localStorage.getItem("responseToken")},responseType:"json"}).then(function(t){if(200===t.status)return e.setState({returnedResponse:t,firstName:t.data.first_name,lastName:t.data.last_name,email:t.data.email,token:t.data.token}),!0}).catch(function(e){console.log("this is an error yo",e)})}},{key:"handleLogOut",value:function(){localStorage.clear(),console.log("logging out..."),this.setState({redirectToHome:!0})}},{key:"render",value:function(){return this.state.redirectToHome?_react2.default.createElement(_reactRouterDom.Redirect,{to:"/"}):_react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null),_react2.default.createElement("div",{id:"employer-wrapper"},_react2.default.createElement("h1",null,"Employer Dashboard"),_react2.default.createElement("div",{onClick:this.handleLogOut,id:"logout"},_react2.default.createElement("button",{id:"logout-button"},"Logout")),_react2.default.createElement("section",null,_react2.default.createElement("h1",null,"Profile:"),_react2.default.createElement("p",null,"Firstname: ",this.state.firstName),_react2.default.createElement("p",null,"Surname: ",this.state.lastName),_react2.default.createElement("p",null,"Email: ",this.state.email),_react2.default.createElement("p",null,"Token: ",this.state.token," ")),_react2.default.createElement(_CompaniesSection2.default,null)),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),EmployerDashboard}(_react2.default.Component),_default=EmployerDashboard,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(EmployerDashboard,"EmployerDashboard","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/EmployerDashboard.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/EmployerDashboard.js"),leaveModule(module))}).call(this,__webpack_require__(9)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(7),_reactDom2=_interopRequireDefault(_reactDom),_Header=__webpack_require__(18),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(17),_Footer2=_interopRequireDefault(_Footer),_JobsPage=__webpack_require__(24),_JobsPage2=_interopRequireDefault(_JobsPage),_axios=__webpack_require__(29),_axios2=_interopRequireDefault(_axios),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var EmployeeDashboard=function(_React$Component){function EmployeeDashboard(e){_classCallCheck(this,EmployeeDashboard);var t=_possibleConstructorReturn(this,(EmployeeDashboard.__proto__||Object.getPrototypeOf(EmployeeDashboard)).call(this,e)),n=localStorage.getItem("responseToken"),r=localStorage.getItem("responseEmail");return t.state={firstName:t.props.first_name,lastName:t.props.last_name,email:r,token:n},t}return _inherits(EmployeeDashboard,_React$Component),_createClass(EmployeeDashboard,[{key:"render",value:function(){return _react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null),_react2.default.createElement("div",{id:"employer-wrapper"},_react2.default.createElement("h1",null,"Employee Dashboard"),_react2.default.createElement("section",null,_react2.default.createElement("h1",null,"Profile:"),_react2.default.createElement("p",null,"Firstname: ",this.state.firstName),_react2.default.createElement("p",null,"Surname: ",this.state.lastName),_react2.default.createElement("p",null,"Email: ",this.state.email),_react2.default.createElement("p",null,"Token: ",this.state.token," "))),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),EmployeeDashboard}(_react2.default.Component),_default=EmployeeDashboard,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(EmployeeDashboard,"EmployeeDashboard","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/EmployeeDashboard.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/EmployeeDashboard.js"),leaveModule(module))}).call(this,__webpack_require__(9)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(7),_reactDom2=_interopRequireDefault(_reactDom),_Header=__webpack_require__(18),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(17),_Footer2=_interopRequireDefault(_Footer),_JobsPage=__webpack_require__(24),_JobsPage2=_interopRequireDefault(_JobsPage),_Login=__webpack_require__(85),_Login2=_interopRequireDefault(_Login),_Register=__webpack_require__(86),_Register2=_interopRequireDefault(_Register),_axios=__webpack_require__(29),_axios2=_interopRequireDefault(_axios),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var MyAccount=function(_React$Component){function MyAccount(e){_classCallCheck(this,MyAccount);var t=_possibleConstructorReturn(this,(MyAccount.__proto__||Object.getPrototypeOf(MyAccount)).call(this,e)),n=localStorage.getItem("responseToken");return t.showLogin=t.showLogin.bind(t),t.showRegister=t.showRegister.bind(t),t.state={token:n,showTab:"login"},t}return _inherits(MyAccount,_React$Component),_createClass(MyAccount,[{key:"showLogin",value:function(){this.setState({showTab:"login"}),console.log("showlogin")}},{key:"showRegister",value:function(){this.setState({showTab:"register"}),console.log("showRegister")}},{key:"componentWillMount",value:function(){this.state.token}},{key:"render",value:function(){return _react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null),_react2.default.createElement("div",{id:"login-register-tabs"},_react2.default.createElement("div",{onClick:this.showLogin,className:"account-tab"},_react2.default.createElement("h2",null,"Login")),_react2.default.createElement("div",{onClick:this.showRegister,className:"account-tab"},_react2.default.createElement("h2",null,"Register"))),"login"==this.state.showTab?_react2.default.createElement(_Login2.default,null):_react2.default.createElement(_Register2.default,null),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),MyAccount}(_react2.default.Component),_default=MyAccount,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(MyAccount,"MyAccount","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/MyAccount.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/dashboards/MyAccount.js"),leaveModule(module))}).call(this,__webpack_require__(9)(module))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r,o=u(n(1)),i=(u(n(7)),u(n(18))),a=u(n(17));u(n(24));function u(e){return e&&e.__esModule?e:{default:e}}function s(e){return console.log(e),o.default.createElement("div",null,o.default.createElement(i.default,null,e.children),o.default.createElement("div",{id:"contact-outer-wrapper"},o.default.createElement("div",{id:"contact-inner-wrapper"},o.default.createElement("div",{id:"contact-title"},o.default.createElement("h1",null,"Contact")),o.default.createElement("div",null,o.default.createElement("h2",null,"Adding a listing"),o.default.createElement("p",null,"To add a job post to the site, please email marilyn@thenextstep.io"),o.default.createElement("p",null,"Posts should follow the following format:"),o.default.createElement("ul",null,o.default.createElement("li",null,o.default.createElement("p",null,"Role being advertised")),o.default.createElement("li",null,o.default.createElement("p",null,"Tagline (1 short sentence displayed on job listing page)")),o.default.createElement("li",null,o.default.createElement("p",null,"Hours - full-time or part-time")),o.default.createElement("li",null,o.default.createElement("p",null,"Area: Front-end, Full-stack, Designer etc")),o.default.createElement("li",null,o.default.createElement("p",null,"Location")),o.default.createElement("li",null,o.default.createElement("p",null,"Salary - please note, we will not publish posts that do not list a salary range.")),o.default.createElement("li",null,o.default.createElement("p",null,"Full job description - this can be as long as you like")),o.default.createElement("li",null,o.default.createElement("p",null,"Please also attach a 300x300px logo for your company"))),o.default.createElement("h2",null,"Additional notes"),o.default.createElement("p",null,"We're happy to post internships, but these must be paid internships"),o.default.createElement("p",null,"You're also welcome to post contract/freelance projects"),o.default.createElement("p",null,"Please don't forget to include details of how to apply for the post")))),o.default.createElement(a.default,null))}(r=n(2).enterModule)&&r(e);var l,c,f=s;t.default=f,l=n(2).default,c=n(2).leaveModule,l&&(l.register(s,"Contact","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Contact.js"),l.register(f,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Contact.js"),c(e))}).call(this,n(9)(e))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(7),_reactDom2=_interopRequireDefault(_reactDom),_Header=__webpack_require__(18),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(17),_Footer2=_interopRequireDefault(_Footer),_JobsPage=__webpack_require__(24),_JobsPage2=_interopRequireDefault(_JobsPage),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var About=function(_React$Component){function About(){return _classCallCheck(this,About),_possibleConstructorReturn(this,(About.__proto__||Object.getPrototypeOf(About)).apply(this,arguments))}return _inherits(About,_React$Component),_createClass(About,[{key:"render",value:function(){return _react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null,this.props.children),_react2.default.createElement("h1",null,"About"),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),About}(_react2.default.Component),_default=About,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(About,"About","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/About.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/About.js"),leaveModule(module))}).call(this,__webpack_require__(9)(module))},function(module,exports,__webpack_require__){"use strict";(function(module){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_react=__webpack_require__(1),_react2=_interopRequireDefault(_react),_reactDom=__webpack_require__(7),_reactDom2=_interopRequireDefault(_reactDom),_Header=__webpack_require__(18),_Header2=_interopRequireDefault(_Header),_Footer=__webpack_require__(17),_Footer2=_interopRequireDefault(_Footer),_JobsPage=__webpack_require__(24),_JobsPage2=_interopRequireDefault(_JobsPage),enterModule;function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}enterModule=__webpack_require__(2).enterModule,enterModule&&enterModule(module);var Home=function(_React$Component){function Home(){return _classCallCheck(this,Home),_possibleConstructorReturn(this,(Home.__proto__||Object.getPrototypeOf(Home)).apply(this,arguments))}return _inherits(Home,_React$Component),_createClass(Home,[{key:"render",value:function(){return _react2.default.createElement("div",null,_react2.default.createElement(_Header2.default,null,this.props.children),_react2.default.createElement(_JobsPage2.default,null),_react2.default.createElement(_Footer2.default,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Home}(_react2.default.Component),_default=Home,reactHotLoader,leaveModule;exports.default=_default,reactHotLoader=__webpack_require__(2).default,leaveModule=__webpack_require__(2).leaveModule,reactHotLoader&&(reactHotLoader.register(Home,"Home","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Home.js"),reactHotLoader.register(_default,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/global/Home.js"),leaveModule(module))}).call(this,__webpack_require__(9)(module))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r,o=u(n(1)),i=(u(n(7)),u(n(93)),u(n(18))),a=u(n(17));n(22);function u(e){return e&&e.__esModule?e:{default:e}}function s(e){return o.default.createElement("div",null,o.default.createElement(i.default,null),o.default.createElement("div",{id:"job-wrapper-outer"},o.default.createElement("div",{id:"job-wrapper"},o.default.createElement("div",{id:"job-wrapper-title"},o.default.createElement("h1",null,"Company XYZ"),o.default.createElement("h2",null,"Cheesy Tagline here")),o.default.createElement("p",null,"Edit job number",e.match.params.id),o.default.createElement("div",null,o.default.createElement("p",null,"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."),o.default.createElement("p",null,"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."),o.default.createElement("p",null,"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.")))),o.default.createElement(a.default,null))}(r=n(2).enterModule)&&r(e);var l,c,f=s;t.default=f,l=n(2).default,c=n(2).leaveModule,l&&(l.register(s,"JobPost","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/jobs/JobPost.js"),l.register(f,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/jobs/JobPost.js"),c(e))}).call(this,n(9)(e))},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=n(87);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";var r=n(14);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";var r=n(14),o=n(212),i=n(88),a=n(50),u=n(211),s=n(210);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.baseURL&&!u(e.url)&&(e.url=s(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||a.adapter)(e).then(function(t){return l(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(l(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(14);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(14);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,i=String(e),a="",u=0,s=r;i.charAt(0|u)||(s="=",u%1);a+=s.charAt(63&t>>8-u%1*8)){if((n=i.charCodeAt(u+=.75))>255)throw new o;t=t<<8|n}return a}},function(e,t,n){"use strict";var r=n(14);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(14),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}}),a):a}},function(e,t,n){"use strict";var r=n(14);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,function(e,t){null!==e&&void 0!==e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))}))}),i=a.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(89);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";var r=n(14);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(50),o=n(14),i=n(214),a=n(213);function u(e){this.defaults=e,this.interceptors={request:new i,response:new i}}u.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){u.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){u.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=u},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(14),o=n(92),i=n(223),a=n(50);function u(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var s=u(a);s.Axios=i,s.create=function(e){return u(r.merge(a,e))},s.Cancel=n(87),s.CancelToken=n(209),s.isCancel=n(88),s.all=function(e){return Promise.all(e)},s.spread=n(208),e.exports=s,e.exports.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r=n(1))&&"object"==typeof r&&"default"in r?r.default:r,i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},u=function(e){function t(){return i(this,t),a(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){return o.Children.only(this.props.children)},t}(o.Component);t.AppContainer=u,t.hot=function(){return function(e){return e}},t.areComponentsEqual=function(e,t){return e===t},t.setConfig=function(){}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(30),o=n(4),i=n(228);e.exports=function(){function e(e,t,n,r,a,u){u!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r,o=y(n(1)),i=(y(n(7)),y(n(18)),y(n(17)),y(n(24)),y(n(207))),a=y(n(206)),u=y(n(205)),s=y(n(204)),l=y(n(86)),c=y(n(85)),f=y(n(203)),p=y(n(202)),d=y(n(201)),h=n(22);function y(e){return e&&e.__esModule?e:{default:e}}function m(e){return o.default.createElement(h.BrowserRouter,null,o.default.createElement(h.Switch,null,o.default.createElement(h.Route,{path:"/",component:a.default,exact:!0}),o.default.createElement(h.Route,{path:"/my_account",component:f.default}),o.default.createElement(h.Route,{path:"/employee_dashboard",component:p.default}),o.default.createElement(h.Route,{path:"/employer_dashboard",component:d.default}),o.default.createElement(h.Route,{path:"/register",component:l.default}),o.default.createElement(h.Route,{path:"/login",component:c.default}),o.default.createElement(h.Route,{path:"/about",component:u.default}),o.default.createElement(h.Route,{path:"/contact",component:s.default}),o.default.createElement(h.Route,{path:"/job_post/:id",component:i.default}),o.default.createElement(h.Route,{component:g})))}function g(e){return o.default.createElement("div",null,o.default.createElement("h1",null,"404 page"),o.default.createElement(h.Link,{to:"/"},"Got to homepage"))}(r=n(2).enterModule)&&r(e);var v,_,b=m;t.default=b,v=n(2).default,_=n(2).leaveModule,v&&(v.register(m,"AppRouter","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/routers/AppRouter.js"),v.register(g,"NotFoundPage","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/routers/AppRouter.js"),v.register(b,"default","/Users/marilynmagnusen/projects/django-projects/nextstepapi/src/components/routers/AppRouter.js"),_(e))}).call(this,n(9)(e))},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(231);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(4),o=n(1),i=n(234),a=n(11),u=n(30),s=n(53),l=n(233),c=n(38),f=n(95);function p(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||p("227");var d={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,u,s){(function(e,t,n,r,o,i,a,u,s){this._hasCaughtError=!1,this._caughtError=null;var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(d,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,u,s){if(d.invokeGuardedCallback.apply(this,arguments),d.hasCaughtError()){var l=d.clearCaughtError();d._hasRethrowError||(d._hasRethrowError=!0,d._rethrowError=l)}},rethrowCaughtError:function(){return function(){if(d._hasRethrowError){var e=d._rethrowError;throw d._rethrowError=null,d._hasRethrowError=!1,e}}.apply(d,arguments)},hasCaughtError:function(){return d._hasCaughtError},clearCaughtError:function(){if(d._hasCaughtError){var e=d._caughtError;return d._caughtError=null,d._hasCaughtError=!1,e}p("198")}};var h=null,y={};function m(){if(h)for(var e in y){var t=y[e],n=h.indexOf(e);if(-1<n||p("96",e),!v[n])for(var r in t.extractEvents||p("97",e),v[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,u=r;_.hasOwnProperty(u)&&p("99",u),_[u]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&g(s[o],a,u);o=!0}else i.registrationName?(g(i.registrationName,a,u),o=!0):o=!1;o||p("98",r,e)}}}function g(e,t,n){b[e]&&p("100",e),b[e]=t,w[e]=t.eventTypes[n].dependencies}var v=[],_={},b={},w={};function C(e){h&&p("101"),h=Array.prototype.slice.call(e),m()}function E(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];y.hasOwnProperty(t)&&y[t]===r||(y[t]&&p("102",t),y[t]=r,n=!0)}n&&m()}var S=Object.freeze({plugins:v,eventNameDispatchConfigs:_,registrationNameModules:b,registrationNameDependencies:w,possibleRegistrationNames:null,injectEventPluginOrder:C,injectEventPluginsByName:E}),k=null,x=null,O=null;function T(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=O(r),d.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function M(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function R(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var D=null;function j(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)T(e,t,n[o],r[o]);else n&&T(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function P(e){return j(e,!0)}function A(e){return j(e,!1)}var L={injectEventPluginOrder:C,injectEventPluginsByName:E};function N(e,t){var n=e.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function I(e,t){null!==e&&(D=M(D,e)),e=D,D=null,e&&(R(e,t?P:A),D&&p("95"),d.rethrowCaughtError())}function F(e,t,n,r){for(var o=null,i=0;i<v.length;i++){var a=v[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=M(o,a))}I(o,!1)}var B=Object.freeze({injection:L,getListener:N,runEventsInBatch:I,runExtractedEventsInBatch:F}),U=Math.random().toString(36).slice(2),K="__reactInternalInstance$"+U,q="__reactEventHandlers$"+U;function H(e){if(e[K])return e[K];for(;!e[K];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[K]).tag||6===e.tag?e:null}function z(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function W(e){return e[q]||null}var V=Object.freeze({precacheFiberNode:function(e,t){t[K]=e},getClosestInstanceFromNode:H,getInstanceFromNode:function(e){return!(e=e[K])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:z,getFiberCurrentPropsFromNode:W,updateFiberProps:function(e,t){e[q]=t}});function J(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function $(e,t,n){for(var r=[];e;)r.push(e),e=J(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function G(e,t,n){(t=N(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=M(n._dispatchListeners,t),n._dispatchInstances=M(n._dispatchInstances,e))}function Q(e){e&&e.dispatchConfig.phasedRegistrationNames&&$(e._targetInst,G,e)}function Y(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;$(t=t?J(t):null,G,e)}}function X(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=N(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=M(n._dispatchListeners,t),n._dispatchInstances=M(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&X(e._targetInst,null,e)}function ee(e){R(e,Q)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,u=o;u;u=J(u))a++;u=0;for(var s=i;s;s=J(s))u++;for(;0<a-u;)o=J(o),a--;for(;0<u-a;)i=J(i),u--;for(;a--;){if(o===i||o===i.alternate)break e;o=J(o),i=J(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=J(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=J(r);for(r=0;r<o.length;r++)X(o[r],"bubbled",e);for(e=n.length;0<e--;)X(n[e],"captured",t)}var ne=Object.freeze({accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){R(e,Y)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){R(e,Z)}}),re=null;function oe(){return!re&&i.canUseDOM&&(re="textContent"in document.documentElement?"textContent":"innerText"),re}var ie={_root:null,_startText:null,_fallbackText:null};function ae(){if(ie._fallbackText)return ie._fallbackText;var e,t,n=ie._startText,r=n.length,o=ue(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ie._fallbackText=o.slice(e,1<t?1-t:void 0),ie._fallbackText}function ue(){return"value"in ie._root?ie._root.value:ie._root[oe()]}var se="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),le={type:null,target:null,currentTarget:u.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function ce(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?u.thatReturnsTrue:u.thatReturnsFalse,this.isPropagationStopped=u.thatReturnsFalse,this}function fe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function pe(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function de(e){e.eventPool=[],e.getPooled=fe,e.release=pe}a(ce.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=u.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=u.thatReturnsTrue)},persist:function(){this.isPersistent=u.thatReturnsTrue},isPersistent:u.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<se.length;t++)this[se[t]]=null}}),ce.Interface=le,ce.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,de(n),n},de(ce);var he=ce.extend({data:null}),ye=ce.extend({data:null}),me=[9,13,27,32],ge=i.canUseDOM&&"CompositionEvent"in window,ve=null;i.canUseDOM&&"documentMode"in document&&(ve=document.documentMode);var _e=i.canUseDOM&&"TextEvent"in window&&!ve,be=i.canUseDOM&&(!ge||ve&&8<ve&&11>=ve),we=String.fromCharCode(32),Ce={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},Ee=!1;function Se(e,t){switch(e){case"topKeyUp":return-1!==me.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function ke(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var xe=!1;var Oe={eventTypes:Ce,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ge)e:{switch(e){case"topCompositionStart":o=Ce.compositionStart;break e;case"topCompositionEnd":o=Ce.compositionEnd;break e;case"topCompositionUpdate":o=Ce.compositionUpdate;break e}o=void 0}else xe?Se(e,n)&&(o=Ce.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=Ce.compositionStart);return o?(be&&(xe||o!==Ce.compositionStart?o===Ce.compositionEnd&&xe&&(i=ae()):(ie._root=r,ie._startText=ue(),xe=!0)),o=he.getPooled(o,t,n,r),i?o.data=i:null!==(i=ke(n))&&(o.data=i),ee(o),i=o):i=null,(e=_e?function(e,t){switch(e){case"topCompositionEnd":return ke(t);case"topKeyPress":return 32!==t.which?null:(Ee=!0,we);case"topTextInput":return(e=t.data)===we&&Ee?null:e;default:return null}}(e,n):function(e,t){if(xe)return"topCompositionEnd"===e||!ge&&Se(e,t)?(e=ae(),ie._root=null,ie._startText=null,ie._fallbackText=null,xe=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return be?null:t.data;default:return null}}(e,n))?((t=ye.getPooled(Ce.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},Te=null,Me={injectFiberControlledHostComponent:function(e){Te=e}},Re=null,De=null;function je(e){if(e=x(e)){Te&&"function"==typeof Te.restoreControlledState||p("194");var t=k(e.stateNode);Te.restoreControlledState(e.stateNode,e.type,t)}}function Pe(e){Re?De?De.push(e):De=[e]:Re=e}function Ae(){return null!==Re||null!==De}function Le(){if(Re){var e=Re,t=De;if(De=Re=null,je(e),t)for(e=0;e<t.length;e++)je(t[e])}}var Ne=Object.freeze({injection:Me,enqueueStateRestore:Pe,needsStateRestore:Ae,restoreStateIfNeeded:Le});function Ie(e,t){return e(t)}function Fe(e,t,n){return e(t,n)}function Be(){}var Ue=!1;function Ke(e,t){if(Ue)return e(t);Ue=!0;try{return Ie(e,t)}finally{Ue=!1,Ae()&&(Be(),Le())}}var qe={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function He(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!qe[e.type]:"textarea"===t}function ze(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function Ve(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Je(e){e._valueTracker||(e._valueTracker=function(e){var t=Ve(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ve(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ge=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Qe="function"==typeof Symbol&&Symbol.for,Ye=Qe?Symbol.for("react.element"):60103,Xe=Qe?Symbol.for("react.call"):60104,Ze=Qe?Symbol.for("react.return"):60105,et=Qe?Symbol.for("react.portal"):60106,tt=Qe?Symbol.for("react.fragment"):60107,nt=Qe?Symbol.for("react.strict_mode"):60108,rt=Qe?Symbol.for("react.provider"):60109,ot=Qe?Symbol.for("react.context"):60110,it=Qe?Symbol.for("react.async_mode"):60111,at=Qe?Symbol.for("react.forward_ref"):60112,ut="function"==typeof Symbol&&Symbol.iterator;function st(e){return null===e||void 0===e?null:"function"==typeof(e=ut&&e[ut]||e["@@iterator"])?e:null}function lt(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case tt:return"ReactFragment";case et:return"ReactPortal";case Xe:return"ReactCall";case Ze:return"ReactReturn"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case at:return""!==(e=e.render.displayName||e.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function ct(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=lt(e),i=null;n&&(i=lt(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt={},dt={};function ht(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var yt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){yt[e]=new ht(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];yt[t]=new ht(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){yt[e]=new ht(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){yt[e]=new ht(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){yt[e]=new ht(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){yt[e]=new ht(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){yt[e]=new ht(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){yt[e]=new ht(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){yt[e]=new ht(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function vt(e,t,n,r){var o=yt.hasOwnProperty(t)?yt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!dt.hasOwnProperty(e)||!pt.hasOwnProperty(e)&&(ft.test(e)?dt[e]=!0:(pt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function _t(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function bt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=kt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function wt(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function Ct(e,t){wt(e,t);var n=kt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?St(e,t.type,n):t.hasOwnProperty("defaultValue")&&St(e,t.type,kt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Et(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function St(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function kt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,gt);yt[t]=new ht(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,gt);yt[t]=new ht(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,gt);yt[t]=new ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),yt.tabIndex=new ht("tabIndex",1,!1,"tabindex",null);var xt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Ot(e,t,n){return(e=ce.getPooled(xt.change,e,t,n)).type="change",Pe(n),ee(e),e}var Tt=null,Mt=null;function Rt(e){I(e,!1)}function Dt(e){if($e(z(e)))return e}function jt(e,t){if("topChange"===e)return t}var Pt=!1;function At(){Tt&&(Tt.detachEvent("onpropertychange",Lt),Mt=Tt=null)}function Lt(e){"value"===e.propertyName&&Dt(Mt)&&Ke(Rt,e=Ot(Mt,e,ze(e)))}function Nt(e,t,n){"topFocus"===e?(At(),Mt=n,(Tt=t).attachEvent("onpropertychange",Lt)):"topBlur"===e&&At()}function It(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return Dt(Mt)}function Ft(e,t){if("topClick"===e)return Dt(t)}function Bt(e,t){if("topInput"===e||"topChange"===e)return Dt(t)}i.canUseDOM&&(Pt=We("input")&&(!document.documentMode||9<document.documentMode));var Ut={eventTypes:xt,_isInputEventSupported:Pt,extractEvents:function(e,t,n,r){var o=t?z(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=jt:He(o)?Pt?i=Bt:(i=It,a=Nt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Ft),i&&(i=i(e,t)))return Ot(i,n,r);a&&a(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&St(o,"number",o.value)}},Kt=ce.extend({view:null,detail:null}),qt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ht(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=qt[e])&&!!t[e]}function zt(){return Ht}var Wt=Kt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:zt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),Vt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Jt={eventTypes:Vt,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?H(t):null):e=null,e===t)return null;var i=null==e?o:z(e);o=null==t?o:z(t);var a=Wt.getPooled(Vt.mouseLeave,e,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,(n=Wt.getPooled(Vt.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=i,te(a,n,e,t),[a,n]}};function $t(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Gt(e){return!!(e=e._reactInternalFiber)&&2===$t(e)}function Qt(e){2!==$t(e)&&p("188")}function Yt(e){var t=e.alternate;if(!t)return 3===(t=$t(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return Qt(o),e;if(a===r)return Qt(o),t;a=a.sibling}p("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}a||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function Xt(e){if(!(e=Yt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var Zt=ce.extend({animationName:null,elapsedTime:null,pseudoElement:null}),en=ce.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tn=Kt.extend({relatedTarget:null});function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var rn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},on={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=Kt.extend({key:function(e){if(e.key){var t=rn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?on[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:zt,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),un=Wt.extend({dataTransfer:null}),sn=Kt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:zt}),ln=ce.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),cn=Wt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),fn={},pn={};function dn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},fn[e]=t,pn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){dn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){dn(e,!1)});var hn={eventTypes:fn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=pn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=pn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":e=an;break;case"topBlur":case"topFocus":e=tn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Wt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=un;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=sn;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Zt;break;case"topTransitionEnd":e=ln;break;case"topScroll":e=Kt;break;case"topWheel":e=cn;break;case"topCopy":case"topCut":case"topPaste":e=en;break;default:e=ce}return ee(t=e.getPooled(o,t,n,r)),t}},yn=hn.isInteractiveTopLevelEventType,mn=[];function gn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=H(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],F(e.topLevelType,t,e.nativeEvent,ze(e.nativeEvent))}var vn=!0;function _n(e){vn=!!e}function bn(e,t,n){if(!n)return null;e=(yn(e)?Cn:En).bind(null,e),n.addEventListener(t,e,!1)}function wn(e,t,n){if(!n)return null;e=(yn(e)?Cn:En).bind(null,e),n.addEventListener(t,e,!0)}function Cn(e,t){Fe(En,e,t)}function En(e,t){if(vn){var n=ze(t);if(null!==(n=H(n))&&"number"==typeof n.tag&&2!==$t(n)&&(n=null),mn.length){var r=mn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ke(gn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>mn.length&&mn.push(e)}}}var Sn=Object.freeze({get _enabled(){return vn},setEnabled:_n,isEnabled:function(){return vn},trapBubbledEvent:bn,trapCapturedEvent:wn,dispatchEvent:En});function kn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var xn={animationend:kn("Animation","AnimationEnd"),animationiteration:kn("Animation","AnimationIteration"),animationstart:kn("Animation","AnimationStart"),transitionend:kn("Transition","TransitionEnd")},On={},Tn={};function Mn(e){if(On[e])return On[e];if(!xn[e])return e;var t,n=xn[e];for(t in n)if(n.hasOwnProperty(t)&&t in Tn)return On[e]=n[t];return e}i.canUseDOM&&(Tn=document.createElement("div").style,"AnimationEvent"in window||(delete xn.animationend.animation,delete xn.animationiteration.animation,delete xn.animationstart.animation),"TransitionEvent"in window||delete xn.transitionend.transition);var Rn={topAnimationEnd:Mn("animationend"),topAnimationIteration:Mn("animationiteration"),topAnimationStart:Mn("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:Mn("transitionend"),topWheel:"wheel"},Dn={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},jn={},Pn=0,An="_reactListenersID"+(""+Math.random()).slice(2);function Ln(e){return Object.prototype.hasOwnProperty.call(e,An)||(e[An]=Pn++,jn[e[An]]={}),jn[e[An]]}function Nn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function In(e,t){var n,r=Nn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Nn(r)}}function Fn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Bn=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Un={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Kn=null,qn=null,Hn=null,zn=!1;function Wn(e,t){if(zn||null==Kn||Kn!==s())return null;var n=Kn;return"selectionStart"in n&&Fn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Hn&&l(Hn,n)?null:(Hn=n,(e=ce.getPooled(Un.select,qn,e,t)).type="select",e.target=Kn,ee(e),e)}var Vn={eventTypes:Un,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Ln(i),o=w.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?z(t):window,e){case"topFocus":(He(i)||"true"===i.contentEditable)&&(Kn=i,qn=t,Hn=null);break;case"topBlur":Hn=qn=Kn=null;break;case"topMouseDown":zn=!0;break;case"topContextMenu":case"topMouseUp":return zn=!1,Wn(n,r);case"topSelectionChange":if(Bn)break;case"topKeyDown":case"topKeyUp":return Wn(n,r)}return null}};function Jn(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function $n(e,t,n){var r=e.alternate;return null===r?((r=new Jn(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Gn(e,t,n){var r=e.type,o=e.key;e=e.props;var i=void 0;if("function"==typeof r)i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case tt:return Qn(e.children,t,n,o);case it:i=11,t|=3;break;case nt:i=11,t|=2;break;case Xe:i=7;break;case Ze:i=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case rt:i=13;break;case ot:i=12;break;case at:i=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;p("130",null==r?r:typeof r,"")}else p("130",null==r?r:typeof r,"")}return(t=new Jn(i,e,o,t)).type=r,t.expirationTime=n,t}function Qn(e,t,n,r){return(e=new Jn(10,e,r,t)).expirationTime=n,e}function Yn(e,t,n){return(e=new Jn(6,e,null,t)).expirationTime=n,e}function Xn(e,t,n){return(t=new Jn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}L.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=V.getFiberCurrentPropsFromNode,x=V.getInstanceFromNode,O=V.getNodeFromInstance,L.injectEventPluginsByName({SimpleEventPlugin:hn,EnterLeaveEventPlugin:Jt,ChangeEventPlugin:Ut,SelectEventPlugin:Vn,BeforeInputEventPlugin:Oe});var Zn=null,er=null;function tr(e){return function(t){try{return e(t)}catch(e){}}}function nr(e){"function"==typeof Zn&&Zn(e)}function rr(e){"function"==typeof er&&er(e)}function or(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function ir(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var ar=void 0,ur=void 0;function sr(e){ar=ur=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=or(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=or(null)):e=null,ar=n,ur=e!==n?e:null}function lr(e,t){sr(e),e=ar;var n=ur;null===n?ir(e,t):null===e.last||null===n.last?(ir(e,t),ir(n,t)):(ir(e,t),n.last=t)}function cr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function fr(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var u=!0,s=n.first,l=!1;null!==s;){var c=s.expirationTime;if(c>i){var f=n.expirationTime;(0===f||f>c)&&(n.expirationTime=c),l||(l=!0,n.baseState=e)}else l||(n.first=s.next,null===n.first&&(n.last=null)),s.isReplace?(e=cr(s,r,e,o),u=!0):(c=cr(s,r,e,o))&&(e=u?a({},e,c):a(e,c),u=!1),s.isForced&&(n.hasForceUpdate=!0),null!==s.callback&&(null===(c=n.callbackList)&&(c=n.callbackList=[]),c.push(s)),null!==s.capturedValue&&(null===(c=n.capturedValues)?n.capturedValues=[s.capturedValue]:c.push(s.capturedValue));s=s.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),l||(n.baseState=e),e}function pr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&p("191",o),o.call(t)}}var dr=Array.isArray;function hr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function yr(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function mr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=$n(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Yn(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function s(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=hr(e,t,n),r.return=e,r):((r=Gn(n,e.mode,r)).ref=hr(e,t,n),r.return=e,r)}function l(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Xn(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function c(e,t,n,r,i){return null===t||10!==t.tag?((t=Qn(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Yn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ye:return(n=Gn(t,e.mode,n)).ref=hr(e,null,t),n.return=e,n;case et:return(t=Xn(t,e.mode,n)).return=e,t}if(dr(t)||st(t))return(t=Qn(t,e.mode,n,null)).return=e,t;yr(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ye:return n.key===o?n.type===tt?c(e,t,n.props.children,r,o):s(e,t,n,r):null;case et:return n.key===o?l(e,t,n,r):null}if(dr(n)||st(n))return null!==o?null:c(e,t,n,r,null);yr(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ye:return e=e.get(null===r.key?n:r.key)||null,r.type===tt?c(t,e,r.props.children,o,r.key):s(t,e,r,o);case et:return l(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(dr(r)||st(r))return c(t,e=e.get(n)||null,r,o,null);yr(t,r)}return null}function y(o,a,u,s){for(var l=null,c=null,p=a,y=a=0,m=null;null!==p&&y<u.length;y++){p.index>y?(m=p,p=null):m=p.sibling;var g=d(o,p,u[y],s);if(null===g){null===p&&(p=m);break}e&&p&&null===g.alternate&&t(o,p),a=i(g,a,y),null===c?l=g:c.sibling=g,c=g,p=m}if(y===u.length)return n(o,p),l;if(null===p){for(;y<u.length;y++)(p=f(o,u[y],s))&&(a=i(p,a,y),null===c?l=p:c.sibling=p,c=p);return l}for(p=r(o,p);y<u.length;y++)(m=h(p,o,y,u[y],s))&&(e&&null!==m.alternate&&p.delete(null===m.key?y:m.key),a=i(m,a,y),null===c?l=m:c.sibling=m,c=m);return e&&p.forEach(function(e){return t(o,e)}),l}function m(o,a,u,s){var l=st(u);"function"!=typeof l&&p("150"),null==(u=l.call(u))&&p("151");for(var c=l=null,y=a,m=a=0,g=null,v=u.next();null!==y&&!v.done;m++,v=u.next()){y.index>m?(g=y,y=null):g=y.sibling;var _=d(o,y,v.value,s);if(null===_){y||(y=g);break}e&&y&&null===_.alternate&&t(o,y),a=i(_,a,m),null===c?l=_:c.sibling=_,c=_,y=g}if(v.done)return n(o,y),l;if(null===y){for(;!v.done;m++,v=u.next())null!==(v=f(o,v.value,s))&&(a=i(v,a,m),null===c?l=v:c.sibling=v,c=v);return l}for(y=r(o,y);!v.done;m++,v=u.next())null!==(v=h(y,o,m,v.value,s))&&(e&&null!==v.alternate&&y.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?l=v:c.sibling=v,c=v);return e&&y.forEach(function(e){return t(o,e)}),l}return function(e,r,i,u){"object"==typeof i&&null!==i&&i.type===tt&&null===i.key&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case Ye:e:{var l=i.key;for(s=r;null!==s;){if(s.key===l){if(10===s.tag?i.type===tt:s.type===i.type){n(e,s.sibling),(r=o(s,i.type===tt?i.props.children:i.props,u)).ref=hr(e,s,i),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}i.type===tt?((r=Qn(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Gn(i,e.mode,u)).ref=hr(e,r,i),u.return=e,e=u)}return a(e);case et:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Xn(i,e.mode,u)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i,u)).return=e,e=r):(n(e,r),(r=Yn(i,e.mode,u)).return=e,e=r),a(e);if(dr(i))return y(e,r,i,u);if(st(i))return m(e,r,i,u);if(s&&yr(e,i),void 0===i)switch(e.tag){case 2:case 1:p("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var gr=mr(!0),vr=mr(!1);function _r(e,t,n,r,o,i,u){function s(e,t,n){c(e,t,n,t.expirationTime)}function c(e,t,n,r){t.child=null===e?vr(t,null,n,r):gr(t,e.child,n,r)}function d(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,r,o,i){if(d(e,t),!n&&!o)return r&&T(t,!1),g(e,t);n=t.stateNode,Ge.current=t;var a=o?null:n.render();return t.effectTag|=1,o&&(c(e,t,null,i),t.child=null),c(e,t,a,i),t.memoizedState=n.state,t.memoizedProps=n.props,r&&T(t,!0),t.child}function y(e){var t=e.stateNode;t.pendingContext?O(e,t.pendingContext,t.pendingContext!==t.context):t.context&&O(e,t.context,!1),w(e,t.containerInfo)}function m(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){i=o;break}i=i.return}o=i}}function g(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=$n(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$n(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var v=e.shouldSetTextContent,_=e.shouldDeprioritizeSubtree,b=t.pushHostContext,w=t.pushHostContainer,C=r.pushProvider,E=n.getMaskedContext,S=n.getUnmaskedContext,k=n.hasContextChanged,x=n.pushContextProvider,O=n.pushTopLevelContextObject,T=n.invalidateContextProvider,M=o.enterHydrationState,R=o.resetHydrationState,D=o.tryToClaimNextHydratableInstance,j=(e=function(e,t,n,r,o){function i(e,t,n,r,o,i){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!(e.prototype&&e.prototype.isPureReactComponent&&l(t,n)&&l(r,o))}function u(e,t){t.updater=g,e.stateNode=t,t._reactInternalFiber=e}function s(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&g.enqueueReplaceState(t,t.state,null)}function c(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var p=e.cacheContext,d=e.getMaskedContext,h=e.getUnmaskedContext,y=e.isContextConsumer,m=e.hasContextChanged,g={isMounted:Gt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);lr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);lr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);lr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:u,callGetDerivedStateFromProps:c,constructClassInstance:function(e,t){var n=e.type,r=h(e),o=y(e),i=o?d(e,r):f,s=null!==(n=new n(t,i)).state&&void 0!==n.state?n.state:null;return u(e,n),e.memoizedState=s,null!==(t=c(e,0,t,s))&&void 0!==t&&(e.memoizedState=a({},e.memoizedState,t)),o&&p(e,r,i),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,i=e.pendingProps,a=h(e);o.props=i,o.state=e.memoizedState,o.refs=f,o.context=d(e,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&g.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=fr(r,e,n,o,i,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,u=e.stateNode;u.props=e.memoizedProps,u.state=e.memoizedState;var l=e.memoizedProps,f=e.pendingProps,p=u.context,y=h(e);y=d(e,y),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(l!==f||p!==y)&&s(e,u,f,y),p=e.memoizedState,t=null!==e.updateQueue?fr(null,e,e.updateQueue,u,f,t):p;var g=void 0;if(l!==f&&(g=c(e,0,f,t)),null!==g&&void 0!==g){t=null===t||void 0===t?g:a({},t,g);var v=e.updateQueue;null!==v&&(v.baseState=a({},v.baseState,g))}return l!==f||p!==t||m()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((l=i(e,l,f,p,t,y))?(n||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(e.effectTag|=4)):("function"==typeof u.componentDidMount&&(e.effectTag|=4),r(e,f),o(e,t)),u.props=f,u.state=t,u.context=y,l):("function"==typeof u.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var u=t.type,l=t.stateNode;l.props=t.memoizedProps,l.state=t.memoizedState;var f=t.memoizedProps,p=t.pendingProps,y=l.context,g=h(t);g=d(t,g),(u="function"==typeof u.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(f!==p||y!==g)&&s(t,l,p,g),y=t.memoizedState,n=null!==t.updateQueue?fr(e,t,t.updateQueue,l,p,n):y;var v=void 0;if(f!==p&&(v=c(t,0,p,n)),null!==v&&void 0!==v){n=null===n||void 0===n?v:a({},n,v);var _=t.updateQueue;null!==_&&(_.baseState=a({},_.baseState,v))}return f!==p||y!==n||m()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((v=i(t,f,p,y,n,g))?(u||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(p,n,g),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(p,n,g)),"function"==typeof l.componentDidUpdate&&(t.effectTag|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof l.componentDidUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=2048),r(t,p),o(t,n)),l.props=p,l.state=n,l.context=g,v):("function"!=typeof l.componentDidUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||f===e.memoizedProps&&y===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,i,u,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,P=e.callGetDerivedStateFromProps,A=e.constructClassInstance,L=e.mountClassInstance,N=e.resumeMountClassInstance,I=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:y(t);break;case 2:x(t);break;case 4:w(t,t.stateNode.containerInfo);break;case 13:C(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var r=t.type,o=t.pendingProps,i=S(t);return r=r(o,i=E(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(o=P(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=a({},t.memoizedState,o))),o=x(t),j(t,r),L(t,n),e=h(e,t,!0,o,!1,n)):(t.tag=1,s(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,k()||t.memoizedProps!==n?(r=S(t),o=o(n,r=E(t,r)),t.effectTag|=1,s(e,t,o),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 2:o=x(t),null===e?null===t.stateNode?(A(t,t.pendingProps),L(t,n),r=!0):r=N(t,n):r=I(e,t,n),i=!1;var u=t.updateQueue;return null!==u&&null!==u.capturedValues&&(i=r=!0),h(e,t,r,o,i,n);case 3:e:if(y(t),r=t.updateQueue,null!==r){if(i=t.memoizedState,o=fr(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(i===o){R(),e=g(e,t);break e}r=o.element}i=t.stateNode,(null===e||null===e.child)&&i.hydrate&&M(t)?(t.effectTag|=2,t.child=vr(t,null,r,n)):(R(),s(e,t,r)),t.memoizedState=o,e=t.child}else R(),e=g(e,t);return e;case 5:return b(t),null===e&&D(t),o=t.type,u=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,k()||u!==r||((u=1&t.mode&&_(o,r))&&(t.expirationTime=1073741823),u&&1073741823===n)?(u=r.children,v(o,r)?u=null:i&&v(o,i)&&(t.effectTag|=16),d(e,t),1073741823!==n&&1&t.mode&&_(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(s(e,t,u),t.memoizedProps=r,e=t.child)):e=g(e,t),e;case 6:return null===e&&D(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,k()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?vr(t,t.stateNode,r,n):gr(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return w(t,t.stateNode.containerInfo),o=t.pendingProps,k()||t.memoizedProps!==o?(null===e?t.child=gr(t,null,o,n):s(e,t,o),t.memoizedProps=o,e=t.child):e=g(e,t),e;case 14:return s(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,k()||t.memoizedProps!==n?(s(e,t,n),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 11:return n=t.pendingProps.children,k()||null!==n&&t.memoizedProps!==n?(s(e,t,n),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps;if(!k()&&i===o)return t.stateNode=0,C(t),g(e,t);var a=o.value;if(t.memoizedProps=o,null===i)a=1073741823;else if(i.value===o.value){if(i.children===o.children)return t.stateNode=0,C(t),g(e,t);a=0}else{var u=i.value;if(u===a&&(0!==u||1/u==1/a)||u!=u&&a!=a){if(i.children===o.children)return t.stateNode=0,C(t),g(e,t);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823,0==(a|=0)){if(i.children===o.children)return t.stateNode=0,C(t),g(e,t)}else m(t,r,a,n)}return t.stateNode=a,C(t),s(e,t,o.children),t.child}(e,t,n);case 12:e:{r=t.type,i=t.pendingProps,u=t.memoizedProps,o=r._currentValue;var l=r._changedBits;if(k()||0!==l||u!==i){t.memoizedProps=i;var c=i.unstable_observedBits;if(void 0!==c&&null!==c||(c=1073741823),t.stateNode=c,0!=(l&c))m(t,r,l,n);else if(u===i){e=g(e,t);break e}s(e,t,n=(n=i.children)(o)),e=t.child}else e=g(e,t)}return e;default:p("156")}}}}function br(e,t){var n=t.source;null===t.stack&&ct(n),null!==n&&lt(n),t=t.value,null!==e&&2===e.tag&&lt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var wr={};function Cr(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)A(e),e=e.return;te=null,ne=0,ee=null,ie=!1}function n(e){return null!==ae&&ae.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=D(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var i=o.updateQueue;i=null===i?0:i.expirationTime;break e;default:i=0}for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ie=!0;break}e=n}else{if(null!==(e=P(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=R(e.alternate,e,ne);return null===t&&(t=r(e)),Ge.current=null,t}function i(e,n,i){Z&&p("243"),Z=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=$n((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(i)for(;null!==ee&&!S();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){a=!0,k(e);break}var u=(i=ee).return;if(null===u){a=!0,k(e);break}j(u,i,e),ee=r(i)}break}return Z=!1,a||null!==ee?null:ie?(e.pendingCommitExpirationTime=n,e.current.alternate):void p("262")}function u(e,t,n,r){lr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:ct(e)},next:null}),c(t,r)}function s(e,t){e:{Z&&!oe&&p("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){u(e,r,t,1),e=void 0;break e}break;case 3:u(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&u(e,e,t,1),e=void 0}return e}function l(e){return e=0!==X?X:Z?oe?1:ne:1&e.mode?we?10*(1+((d()+15)/10|0)):25*(1+((d()+500)/25|0)):1,we&&(0===he||e>he)&&(he=e),e}function c(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!Z&&0!==ne&&n<ne&&t(),Z&&!oe&&te===r||m(r,n),Se>Ee&&p("185")}e=e.return}n=void 0}return n}function d(){return Q=z()-G,2+(Q/10|0)}function h(e,t,n,r,o){var i=X;X=1;try{return e(t,n,r,o)}finally{X=i}}function y(e){if(0!==le){if(e>le)return;V(ce)}var t=z()-G;le=e,ce=W(v,{timeout:10*(e-2)-t})}function m(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===se?(ue=se=e,e.nextScheduledRoot=e):(se=se.nextScheduledRoot=e).nextScheduledRoot=ue;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}fe||(_e?be&&(pe=e,de=1,C(e,1,!1)):1===t?_():y(t))}function g(){var e=0,t=null;if(null!==se)for(var n=se,r=ue;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===se)&&p("244"),r===r.nextScheduledRoot){ue=se=r.nextScheduledRoot=null;break}if(r===ue)ue=o=r.nextScheduledRoot,se.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===se){(se=n).nextScheduledRoot=ue,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===se)break;n=r,r=r.nextScheduledRoot}}null!==(n=pe)&&n===t&&1===e?Se++:Se=0,pe=t,de=e}function v(e){b(0,!0,e)}function _(){b(1,!1,null)}function b(e,t,n){if(ve=n,g(),t)for(;null!==pe&&0!==de&&(0===e||e>=de)&&(!ye||d()>=de);)C(pe,de,!ye),g();else for(;null!==pe&&0!==de&&(0===e||e>=de);)C(pe,de,!1),g();null!==ve&&(le=0,ce=-1),0!==de&&y(de),ve=null,ye=!1,w()}function w(){if(Se=0,null!==Ce){var e=Ce;Ce=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){me||(me=!0,ge=e)}}}if(me)throw e=ge,ge=null,me=!1,e}function C(e,t,n){fe&&p("245"),fe=!0,n?null!==(n=e.finishedWork)?E(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!0))&&(S()?e.finishedWork=n:E(e,n,t))):null!==(n=e.finishedWork)?E(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!1))&&E(e,n,t)),fe=!1}function E(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ce?Ce=[r]:Ce.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=Z=!0,(n=t.stateNode).current===t&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0;var o=d();if(Ge.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var i=t.firstEffect}else i=t;else i=t.firstEffect;for(J(n.containerInfo),re=i;null!==re;){var a=!1,u=void 0;try{for(;null!==re;)2048&re.effectTag&&L(re.alternate,re),re=re.nextEffect}catch(e){a=!0,u=e}a&&(null===re&&p("178"),s(re,u),null!==re&&(re=re.nextEffect))}for(re=i;null!==re;){a=!1,u=void 0;try{for(;null!==re;){var l=re.effectTag;if(16&l&&N(re),128&l){var c=re.alternate;null!==c&&H(c)}switch(14&l){case 2:I(re),re.effectTag&=-3;break;case 6:I(re),re.effectTag&=-3,B(re.alternate,re);break;case 4:B(re.alternate,re);break;case 8:F(re)}re=re.nextEffect}}catch(e){a=!0,u=e}a&&(null===re&&p("178"),s(re,u),null!==re&&(re=re.nextEffect))}for($(n.containerInfo),n.current=t,re=i;null!==re;){l=!1,c=void 0;try{for(i=n,a=o,u=r;null!==re;){var f=re.effectTag;36&f&&U(i,re.alternate,re,a,u),256&f&&K(re,k),128&f&&q(re);var h=re.nextEffect;re.nextEffect=null,re=h}}catch(e){l=!0,c=e}l&&(null===re&&p("178"),s(re,c),null!==re&&(re=re.nextEffect))}Z=oe=!1,nr(t.stateNode),0===(t=n.current.expirationTime)&&(ae=null),e.remainingExpirationTime=t}function S(){return!(null===ve||ve.timeRemaining()>ke)&&(ye=!0)}function k(e){null===pe&&p("246"),pe.remainingExpirationTime=0,me||(me=!0,ge=e)}var x=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),O=function(e,t){function n(e){return e===wr&&p("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var i=t.push,a=t.pop,u=e(wr),s=e(wr),l=e(wr);return{getHostContext:function(){return n(u.current)},getRootHostContainer:function(){return n(l.current)},popHostContainer:function(e){a(u,e),a(s,e),a(l,e)},popHostContext:function(e){s.current===e&&(a(u,e),a(s,e))},pushHostContainer:function(e,t){i(l,t,e),i(s,e,e),i(u,wr,e),t=o(t),a(u,e),i(u,t,e)},pushHostContext:function(e){var t=n(l.current),o=n(u.current);o!==(t=r(o,e.type,t))&&(i(s,e,e),i(u,t,e))}}}(e,x),T=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||p("108",lt(e)||"Unknown",o);return a({},t,n)}var o=e.createCursor,i=e.push,u=e.pop,s=o(f),l=o(!1),c=f;return{getUnmaskedContext:function(e){return n(e)?c:s.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return f;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in r)a[i]=n[i];return o&&t(e,n,a),a},hasContextChanged:function(){return l.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(u(l,e),u(s,e))},popTopLevelContextObject:function(e){u(l,e),u(s,e)},pushTopLevelContextObject:function(e,t,n){null!=s.cursor&&p("168"),i(s,t,e),i(l,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,c=s.current,i(s,t,e),i(l,l.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||p("169"),t){var o=r(e,c);n.__reactInternalMemoizedMergedChildContext=o,u(l,e),u(s,e),i(s,o,e)}else u(l,e);i(l,t,e)},findCurrentUnmaskedContext:function(e){for((2!==$t(e)||2!==e.tag)&&p("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||p("171")}return e.stateNode.context}}}(x);x=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),i=t(null),a=t(0);return{pushProvider:function(e){var t=e.type._context;n(a,t._changedBits,e),n(i,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=a.current,n=i.current;r(o,e),r(i,e),r(a,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(x);var M=function(e){function t(e,t){var n=new Jn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=i(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=a(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;f=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){p("175")},prepareToHydrateHostTextInstance:function(){p("176")},popHydrationState:function(){return!1}};var i=e.canHydrateInstance,a=e.canHydrateTextInstance,u=e.getNextHydratableSibling,s=e.getFirstHydratableChild,l=e.hydrateInstance,c=e.hydrateTextInstance,f=null,d=null,h=!1;return{enterHydrationState:function(e){return d=s(e.stateNode.containerInfo),f=e,h=!0},resetHydrationState:function(){d=f=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=d;if(r){if(!n(e,r)){if(!(r=u(r))||!n(e,r))return e.effectTag|=2,h=!1,void(f=e);t(f,d)}f=e,d=s(r)}else e.effectTag|=2,h=!1,f=e}},prepareToHydrateHostInstance:function(e,t,n){return t=l(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return c(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==f)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=d;n;)t(e,n),n=u(n);return r(e),d=f?u(e.stateNode):null,!0}}}(e),R=_r(e,O,T,x,M,c,l).beginWork,D=function(e,t,n,r,o){function i(e){e.effectTag|=4}var a=e.createInstance,u=e.createTextInstance,s=e.appendInitialChild,l=e.finalizeInitialChildren,c=e.prepareUpdate,f=e.persistence,d=t.getRootHostContainer,h=t.popHostContext,y=t.getHostContext,m=t.popHostContainer,g=n.popContextProvider,v=n.popTopLevelContextObject,_=r.popProvider,b=o.prepareToHydrateHostInstance,w=o.prepareToHydrateHostTextInstance,C=o.popHydrationState,E=void 0,S=void 0,k=void 0;return e.mutation?(E=function(){},S=function(e,t,n){(t.updateQueue=n)&&i(t)},k=function(e,t,n,r){n!==r&&i(t)}):p(f?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return g(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return m(t),v(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(C(t),t.effectTag&=-3),E(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=d();var o=t.type;if(null!==e&&null!=t.stateNode){var f=e.memoizedProps,x=t.stateNode,O=y();x=c(x,o,f,r,n,O),S(e,t,x,o,f,r,n,O),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&p("166"),null;if(e=y(),C(t))b(t,n,e)&&i(t);else{f=a(o,r,n,e,t);e:for(O=t.child;null!==O;){if(5===O.tag||6===O.tag)s(f,O.stateNode);else if(4!==O.tag&&null!==O.child){O.child.return=O,O=O.child;continue}if(O===t)break;for(;null===O.sibling;){if(null===O.return||O.return===t)break e;O=O.return}O.sibling.return=O.return,O=O.sibling}l(f,o,r,n,e)&&i(t),t.stateNode=f}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)k(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&p("166"),null;e=d(),n=y(),C(t)?w(t)&&i(t):t.stateNode=u(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||p("165"),t.tag=8,o=[];e:for((f=t.stateNode)&&(f.return=t);null!==f;){if(5===f.tag||6===f.tag||4===f.tag)p("247");else if(9===f.tag)o.push(f.pendingProps.value);else if(null!==f.child){f.child.return=f,f=f.child;continue}for(;null===f.sibling;){if(null===f.return||f.return===t)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}return r=(f=r.handler)(r.props,o),t.child=gr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return m(t),E(t),null;case 13:return _(t),null;case 12:return null;case 0:p("167");default:p("156")}}}}(e,O,T,x,M).completeWork,j=(O=function(e,t,n,r,o){var i=e.popHostContainer,a=e.popHostContext,u=t.popContextProvider,s=t.popTopLevelContextObject,l=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:ct(t)};do{switch(e.tag){case 3:return sr(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){sr(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:u(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return i(e),s(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return a(e),null;case 4:return i(e),null;case 13:return l(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:u(e);break;case 3:i(e),s(e);break;case 5:a(e);break;case 4:i(e);break;case 13:l(e)}}}}(O,T,x,0,n)).throwException,P=O.unwindWork,A=O.unwindInterruptedWork,L=(O=function(e,t,n,r,o){function i(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function a(e){switch(rr(e),e.tag){case 2:i(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:i(e);break;case 7:u(e.stateNode);break;case 4:f&&l(e)}}function u(e){for(var t=e;;)if(a(t),null===t.child||f&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function s(e){return 5===e.tag||3===e.tag||4===e.tag}function l(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)u(t),o?C(r,t.stateNode):w(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:a(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var c=e.getPublicInstance,f=e.mutation;e=e.persistence,f||p(e?"235":"236");var d=f.commitMount,h=f.commitUpdate,y=f.resetTextContent,m=f.commitTextUpdate,g=f.appendChild,v=f.appendChildToContainer,_=f.insertBefore,b=f.insertInContainerBefore,w=f.removeChild,C=f.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:p("163")}},commitResetTextContent:function(e){y(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(s(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(y(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||s(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?b(t,o.stateNode,n):_(t,o.stateNode,n):r?v(t,o.stateNode):g(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){l(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&h(n,i,o,e,r,t)}break;case 6:null===t.stateNode&&p("162"),n=t.memoizedProps,m(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:p("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&pr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=c(n.child.stateNode);break;case 2:e=n.child.stateNode}pr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&d(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:p("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&p("264");var i=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<i.length;n++){var a=(r=i[n]).value,u=r.stack;br(e,r),t.componentDidCatch(a,{componentStack:null!==u?u:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&p("264"),i=n.capturedValues,n.capturedValues=null,n=0;n<i.length;n++)br(e,r=i[n]),t(r.value);break;default:p("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=c(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,s,0,0,function(e){null===ae?ae=new Set([e]):ae.add(e)})).commitBeforeMutationLifeCycles,N=O.commitResetTextContent,I=O.commitPlacement,F=O.commitDeletion,B=O.commitWork,U=O.commitLifeCycles,K=O.commitErrorLogging,q=O.commitAttachRef,H=O.commitDetachRef,z=e.now,W=e.scheduleDeferredCallback,V=e.cancelDeferredCallback,J=e.prepareForCommit,$=e.resetAfterCommit,G=z(),Q=G,Y=0,X=0,Z=!1,ee=null,te=null,ne=0,re=null,oe=!1,ie=!1,ae=null,ue=null,se=null,le=0,ce=-1,fe=!1,pe=null,de=0,he=0,ye=!1,me=!1,ge=null,ve=null,_e=!1,be=!1,we=!1,Ce=null,Ee=1e3,Se=0,ke=1;return{recalculateCurrentTime:d,computeExpirationForFiber:l,scheduleWork:c,requestWork:m,flushRoot:function(e,t){fe&&p("253"),pe=e,de=t,C(e,t,!1),_(),w()},batchedUpdates:function(e,t){var n=_e;_e=!0;try{return e(t)}finally{(_e=n)||fe||_()}},unbatchedUpdates:function(e,t){if(_e&&!be){be=!0;try{return e(t)}finally{be=!1}}return e(t)},flushSync:function(e,t){fe&&p("187");var n=_e;_e=!0;try{return h(e,t)}finally{_e=n,_()}},flushControlled:function(e){var t=_e;_e=!0;try{h(e)}finally{(_e=t)||fe||b(1,!1,null)}},deferredUpdates:function(e){var t=X;X=25*(1+((d()+500)/25|0));try{return e()}finally{X=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(we)return e(t,n);_e||fe||0===he||(b(he,!1,null),he=0);var r=we,o=_e;_e=we=!0;try{return e(t,n)}finally{we=r,(_e=o)||fe||_()}},flushInteractiveUpdates:function(){fe||0===he||(b(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((d()+500)/25|0));return e<=Y&&(e=Y+1),Y=e},legacyContext:T}}function Er(e){function t(e,t,n,r,o,a){if(r=t.current,n){n=n._reactInternalFiber;var u=s(n);n=l(n)?c(n,u):u}else n=f;return null===t.context?t.context=n:t.pendingContext=n,lr(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),i(r,o),o}var n=e.getPublicInstance,r=(e=Cr(e)).recalculateCurrentTime,o=e.computeExpirationForFiber,i=e.scheduleWork,u=e.legacyContext,s=u.findCurrentUnmaskedContext,l=u.isContextProvider,c=u.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new Jn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,i,a){var u=n.current;return t(e,n,i,r(),u=o(u),a)},updateContainerAtExpirationTime:function(e,n,o,i,a){return t(e,n,o,r(),i,a)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=Xt(t))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Yt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Zn=tr(function(e){return t.onCommitFiberRoot(n,e)}),er=tr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return null===(e=Xt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var Sr=Object.freeze({default:Er}),kr=Sr&&Er||Sr,xr=kr.default?kr.default:kr;var Or="object"==typeof performance&&"function"==typeof performance.now,Tr=void 0;Tr=Or?function(){return performance.now()}:function(){return Date.now()};var Mr=void 0,Rr=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Dr=null,jr=!1,Pr=-1,Ar=!1,Lr=0,Nr=33,Ir=33,Fr=void 0;Fr=Or?{didTimeout:!1,timeRemaining:function(){var e=Lr-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Lr-Date.now();return 0<e?e:0}};var Br="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Br){if(jr=!1,e=Tr(),0>=Lr-e){if(!(-1!==Pr&&Pr<=e))return void(Ar||(Ar=!0,requestAnimationFrame(Ur)));Fr.didTimeout=!0}else Fr.didTimeout=!1;Pr=-1,e=Dr,Dr=null,null!==e&&e(Fr)}},!1);var Ur=function(e){Ar=!1;var t=e-Lr+Ir;t<Ir&&Nr<Ir?(8>t&&(t=8),Ir=t<Nr?Nr:t):Nr=t,Lr=e+Ir,jr||(jr=!0,window.postMessage(Br,"*"))};Mr=function(e,t){return Dr=e,null!=t&&"number"==typeof t.timeout&&(Pr=Tr()+t.timeout),Ar||(Ar=!0,requestAnimationFrame(Ur)),0},Rr=function(){Dr=null,jr=!1,Pr=-1}}else Mr=window.requestIdleCallback,Rr=window.cancelIdleCallback;else Mr=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Rr=function(e){clearTimeout(e)};function Kr(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function qr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Hr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function zr(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Wr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Vr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Jr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var $r={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Gr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Qr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Gr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Yr,Xr=void 0,Zr=(Yr=function(e,t){if(e.namespaceURI!==$r.svg||"innerHTML"in e)e.innerHTML=t;else{for((Xr=Xr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Xr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Yr(e,t)})}:Yr);function eo(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var to={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},no=["Webkit","ms","Moz","O"];function ro(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||to.hasOwnProperty(o)&&to[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(to).forEach(function(e){no.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),to[t]=to[e]})});var oo=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function io(e,t,n){t&&(oo[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function ao(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var uo=u.thatReturns("");function so(e,t){var n=Ln(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?wn("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(wn("topFocus","focus",e),wn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(We("cancel",!0)&&wn("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(We("close",!0)&&wn("topClose","close",e),n.topClose=!0):Rn.hasOwnProperty(o)&&bn(o,Rn[o],e),n[o]=!0)}}function lo(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===$r.html&&(r=Gr(e)),r===$r.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function co(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function fo(e,t,n,r){var o=ao(t,n);switch(t){case"iframe":case"object":bn("topLoad","load",e);var i=n;break;case"video":case"audio":for(i in Dn)Dn.hasOwnProperty(i)&&bn(i,Dn[i],e);i=n;break;case"source":bn("topError","error",e),i=n;break;case"img":case"image":case"link":bn("topError","error",e),bn("topLoad","load",e),i=n;break;case"form":bn("topReset","reset",e),bn("topSubmit","submit",e),i=n;break;case"details":bn("topToggle","toggle",e),i=n;break;case"input":bt(e,n),i=_t(e,n),bn("topInvalid","invalid",e),so(r,"onChange");break;case"option":i=Kr(e,n);break;case"select":Hr(e,n),i=a({},n,{value:void 0}),bn("topInvalid","invalid",e),so(r,"onChange");break;case"textarea":Wr(e,n),i=zr(e,n),bn("topInvalid","invalid",e),so(r,"onChange");break;default:i=n}io(t,i,uo);var s,l=i;for(s in l)if(l.hasOwnProperty(s)){var c=l[s];"style"===s?ro(e,c):"dangerouslySetInnerHTML"===s?null!=(c=c?c.__html:void 0)&&Zr(e,c):"children"===s?"string"==typeof c?("textarea"!==t||""!==c)&&eo(e,c):"number"==typeof c&&eo(e,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(b.hasOwnProperty(s)?null!=c&&so(r,s):null!=c&&vt(e,s,c,o))}switch(t){case"input":Je(e),Et(e,n);break;case"textarea":Je(e),Jr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?qr(e,!!n.multiple,t,!1):null!=n.defaultValue&&qr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=u)}}function po(e,t,n,r,o){var i=null;switch(t){case"input":n=_t(e,n),r=_t(e,r),i=[];break;case"option":n=Kr(e,n),r=Kr(e,r),i=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":n=zr(e,n),r=zr(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=u)}io(t,r,uo),t=e=void 0;var s=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var l=n[e];for(t in l)l.hasOwnProperty(t)&&(s||(s={}),s[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(b.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var c=r[e];if(l=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&c!==l&&(null!=c||null!=l))if("style"===e)if(l){for(t in l)!l.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(s||(s={}),s[t]="");for(t in c)c.hasOwnProperty(t)&&l[t]!==c[t]&&(s||(s={}),s[t]=c[t])}else s||(i||(i=[]),i.push(e,s)),s=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(i=i||[]).push(e,""+c)):"children"===e?l===c||"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(b.hasOwnProperty(e)?(null!=c&&so(o,e),i||l===c||(i=[])):(i=i||[]).push(e,c))}return s&&(i=i||[]).push("style",s),i}function ho(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&wt(e,o),ao(n,r),r=ao(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?ro(e,u):"dangerouslySetInnerHTML"===a?Zr(e,u):"children"===a?eo(e,u):vt(e,a,u,r)}switch(n){case"input":Ct(e,o);break;case"textarea":Vr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?qr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?qr(e,!!o.multiple,o.defaultValue,!0):qr(e,!!o.multiple,o.multiple?[]:"",!1))}}function yo(e,t,n,r,o){switch(t){case"iframe":case"object":bn("topLoad","load",e);break;case"video":case"audio":for(var i in Dn)Dn.hasOwnProperty(i)&&bn(i,Dn[i],e);break;case"source":bn("topError","error",e);break;case"img":case"image":case"link":bn("topError","error",e),bn("topLoad","load",e);break;case"form":bn("topReset","reset",e),bn("topSubmit","submit",e);break;case"details":bn("topToggle","toggle",e);break;case"input":bt(e,n),bn("topInvalid","invalid",e),so(o,"onChange");break;case"select":Hr(e,n),bn("topInvalid","invalid",e),so(o,"onChange");break;case"textarea":Wr(e,n),bn("topInvalid","invalid",e),so(o,"onChange")}for(var a in io(t,n,uo),r=null,n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):b.hasOwnProperty(a)&&null!=i&&so(o,a));switch(t){case"input":Je(e),Et(e,n);break;case"textarea":Je(e),Jr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=u)}return r}function mo(e,t){return e.nodeValue!==t}var go=Object.freeze({createElement:lo,createTextNode:co,setInitialProperties:fo,diffProperties:po,updateProperties:ho,diffHydratedProperties:yo,diffHydratedText:mo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Ct(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=W(r);o||p("90"),$e(r),Ct(r,o)}}}break;case"textarea":Vr(e,n);break;case"select":null!=(t=n.value)&&qr(e,!!n.multiple,t,!1)}}});Me.injectFiberControlledHostComponent(go);var vo=null,_o=null;function bo(e){this._expirationTime=ko.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function wo(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Co(e,t,n){this._internalRoot=ko.createContainer(e,t,n)}function Eo(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function So(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}bo.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new wo;return ko.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},bo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},bo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,ko.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},bo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},wo.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},wo.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},Co.prototype.render=function(e,t){var n=this._internalRoot,r=new wo;return null!==(t=void 0===t?null:t)&&r.then(t),ko.updateContainer(e,n,null,r._onCommit),r},Co.prototype.unmount=function(e){var t=this._internalRoot,n=new wo;return null!==(e=void 0===e?null:e)&&n.then(e),ko.updateContainer(null,t,null,n._onCommit),n},Co.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new wo;return null!==(n=void 0===n?null:n)&&o.then(n),ko.updateContainer(t,r,e,o._onCommit),o},Co.prototype.createBatch=function(){var e=new bo(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var ko=xr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Qr(null,"");break;default:e=Qr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Qr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){vo=vn;var e=s();if(Fn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,u=-1,l=0,c=0,f=e,p=null;t:for(;;){for(var d;f!==t||0!==r&&3!==f.nodeType||(a=i+r),f!==o||0!==n&&3!==f.nodeType||(u=i+n),3===f.nodeType&&(i+=f.nodeValue.length),null!==(d=f.firstChild);)p=f,f=d;for(;;){if(f===e)break t;if(p===t&&++l===r&&(a=i),p===o&&++c===n&&(u=i),null!==(d=f.nextSibling))break;p=(f=p).parentNode}f=d}t=-1===a||-1===u?null:{start:a,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;_o={focusedElem:e,selectionRange:t},_n(!1)},resetAfterCommit:function(){var e=_o,t=s(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&c(document.documentElement,n)){if(Fn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[oe()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=In(n,e);var i=In(n,r);if(o&&i&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}_o=null,_n(vo),vo=null},createInstance:function(e,t,n,r,o){return(e=lo(e,t,n,r))[K]=o,e[q]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return fo(e,t,n,r),So(t,n)},prepareUpdate:function(e,t,n,r,o){return po(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=co(e,t))[K]=r,e},now:Tr,mutation:{commitMount:function(e,t,n){So(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[q]=o,ho(e,t,n,r,o)},resetTextContent:function(e){eo(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,i){return e[K]=i,e[q]=n,yo(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[K]=n,mo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Mr,cancelDeferredCallback:Rr}),xo=ko;function Oo(e,t,n,r,o){Eo(n)||p("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=ko.getPublicRootInstance(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Co(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=ko.getPublicRootInstance(i._internalRoot);u.call(e)}}ko.unbatchedUpdates(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return ko.getPublicRootInstance(i._internalRoot)}function To(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Eo(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:et,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ie=xo.batchedUpdates,Fe=xo.interactiveUpdates,Be=xo.flushInteractiveUpdates;var Mo={createPortal:To,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:ko.findHostInstance(e)},hydrate:function(e,t,n){return Oo(null,e,t,!0,n)},render:function(e,t,n){return Oo(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),Oo(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Eo(e)||p("40"),!!e._reactRootContainer&&(ko.unbatchedUpdates(function(){Oo(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return To.apply(void 0,arguments)},unstable_batchedUpdates:ko.batchedUpdates,unstable_deferredUpdates:ko.deferredUpdates,flushSync:ko.flushSync,unstable_flushControlled:ko.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:B,EventPluginRegistry:S,EventPropagators:ne,ReactControlledComponent:Ne,ReactDOMComponentTree:V,ReactDOMEventListener:Sn},unstable_createRoot:function(e,t){return new Co(e,!0,null!=t&&!0===t.hydrate)}};ko.injectIntoDevTools({findFiberByHostInstance:H,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Ro=Object.freeze({default:Mo}),Do=Ro&&Mo||Ro;e.exports=Do.default?Do.default:Do},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(11),o=n(4),i=n(95),a=n(30),u="function"==typeof Symbol&&Symbol.for,s=u?Symbol.for("react.element"):60103,l=u?Symbol.for("react.portal"):60106,c=u?Symbol.for("react.fragment"):60107,f=u?Symbol.for("react.strict_mode"):60108,p=u?Symbol.for("react.provider"):60109,d=u?Symbol.for("react.context"):60110,h=u?Symbol.for("react.async_mode"):60111,y=u?Symbol.for("react.forward_ref"):60112,m="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function _(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||v}function b(){}function w(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||v}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=_.prototype;var C=w.prototype=new b;C.constructor=w,r(C,_.prototype),C.isPureReactComponent=!0;var E={current:null},S=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,r)&&!k.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var l=Array(u),c=0;c<u;c++)l[c]=arguments[c+2];o.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:s,type:e,key:i,ref:a,props:o,_owner:E.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===s}var T=/\/+/g,M=[];function R(e,t,n,r){if(M.length){var o=M.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function D(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>M.length&&M.push(e)}function j(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case s:case l:i=!0}}if(i)return n(r,e,""===t?"."+P(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var u=t+P(o=e[a],a);i+=j(o,u,n,r)}else if(null===e||void 0===e?u=null:u="function"==typeof(u=m&&e[m]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),a=0;!(o=e.next()).done;)i+=j(o=o.value,u=t+P(o,a++),n,r);else"object"===o&&g("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?N(e,r,n,a.thatReturnsArgument):null!=e&&(O(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(T,"$&/")+"/")+n,e={$$typeof:s,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function N(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(T,"$&/")+"/"),t=R(t,i,r,o),null==e||j(e,"",L,t),D(t)}var I={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return N(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=R(null,null,t,n),null==e||j(e,"",A,t),D(t)},count:function(e){return null==e?0:j(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return N(e,t,null,a.thatReturnsArgument),t},only:function(e){return O(e)||g("143"),e}},createRef:function(){return{current:null}},Component:_,PureComponent:w,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:y,render:e}},Fragment:c,StrictMode:f,unstable_AsyncMode:h,createElement:x,cloneElement:function(e,t,n){(null===e||void 0===e)&&g("267",e);var o=void 0,i=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,l=E.current),void 0!==t.key&&(a=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)S.call(t,o)&&!k.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:s,type:e.type,key:a,ref:u,props:i,_owner:l}},createFactory:function(e){var t=x.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:E,assign:r}},F=Object.freeze({default:I}),B=F&&I||F;e.exports=B.default?B.default:B},function(e,t,n){"use strict";n(239);var r=a(n(1)),o=a(n(7)),i=a(n(230));function a(e){return e&&e.__esModule?e:{default:e}}o.default.render(r.default.createElement(i.default,null),document.getElementById("app"))},,function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ob3QtbG9hZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW1tdXRhYmxlL2Rpc3QvaW1tdXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRWRpdG9yU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0TW9kaWZpZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9DaGFyYWN0ZXJNZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0NvbnRlbnRCbG9ja05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvbnVsbHRocm93cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvVXNlckFnZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2dsb2JhbC9Gb290ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZ2xvYmFsL0hlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dlbmVyYXRlUmFuZG9tS2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Ccm93c2VyUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0hhc2hSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL1BhdGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvU3dpdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEZlYXR1cmVGbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9qb2JzL0pvYnNQYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9Vbmljb2RlVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9Db250ZW50QmxvY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2N4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvU2VsZWN0aW9uU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvcmVtb3ZlVGV4dFdpdGhTdHJhdGVneS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzRXZlbnRIYW5kbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZmluZFJhbmdlc0ltbXV0YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0Jsb2NrTWFwQnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0T2Zmc2V0S2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRFbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXRDb250ZW50U3RhdGVGcmFnbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvbW92ZVNlbGVjdGlvbkJhY2t3YXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvS2V5QmluZGluZ1V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9maW5kQW5jZXN0b3JPZmZzZXRLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldFNjcm9sbFBvc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9TdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldEVudGl0eUtleUZvclNlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9Vbmljb2RlQmlkaURpcmVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3Nhbml0aXplRHJhZnRUZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvQ29udGVudFN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvTG9jYXRpb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdFN0cmluZ0tleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldERlZmF1bHRLZXlCaW5kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvUmljaFRleHRFZGl0b3JVdGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0U2FmZUJvZHlGcm9tSFRNTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2NvbnZlcnRGcm9tSFRNTFRvQ29udGVudEJsb2Nrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL21vdmVTZWxlY3Rpb25Gb3J3YXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRSZW1vdmFibGVXb3JkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25XaXRoTm9kZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXRSYW5nZUNsaWVudFJlY3RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0VXBkYXRlZFNlbGVjdGlvblN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0VGV4dENvbnRlbnRGcm9tRmlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9EYXRhVHJhbnNmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL1Njcm9sbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yQmxvY2sucmVhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9pc1NlbGVjdGlvbkF0TGVhZlN0YXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRGVmYXVsdERyYWZ0SW5saW5lU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL1VuaWNvZGVCaWRpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRFbnRpdHlJbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0Jsb2NrVHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldE5leHREZWxpbWl0ZXJCbG9ja0tleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2luc2VydEludG9MaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvcmVtb3ZlRW50aXRpZXNBdEVkZ2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvcmFuZG9taXplQmxvY2tNYXBLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb2RhbC9saWIvaGVscGVycy9zYWZlSFRNTEVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vZGFsL2xpYi9oZWxwZXJzL2FyaWFBcHBIaWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9kYWwvbGliL2hlbHBlcnMvdGFiYmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vZGFsL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9nbG9iYWwvTG9naW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZ2xvYmFsL1JlZ2lzdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9qb2JzL1NpbmdsZUpvYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlSGFzaEhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGFzaGJvYXJkcy9jb21wYW5pZXMvTmV3Q29tcGFueU1vZGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0UmFuZ2VCb3VuZGluZ0NsaWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXRWaXNpYmxlU2VsZWN0aW9uUmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2RlY29kZUlubGluZVN0eWxlUmFuZ2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZGVjb2RlRW50aXR5UmFuZ2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvY3JlYXRlQ2hhcmFjdGVyTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0VHJlZUFkYXB0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9jb252ZXJ0RnJvbVJhd1RvRHJhZnRTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VuY29kZUlubGluZVN0eWxlUmFuZ2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZW5jb2RlRW50aXR5UmFuZ2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvY29udmVydEZyb21EcmFmdFN0YXRlVG9SYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVkaXRvclBsYWNlaG9sZGVyLnJlYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25TZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9zcGxpdFRleHRJbnRvVGV4dEJsb2Nrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2FkanVzdEJsb2NrRGVwdGhGb3JDb250ZW50U3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL1VSSS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0UGFzdGVQcm9jZXNzb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25QYXN0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRVbmRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIva2V5Q29tbWFuZFRyYW5zcG9zZUNoYXJhY3RlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9rZXlDb21tYW5kUGxhaW5EZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9rZXlDb21tYW5kUGxhaW5CYWNrc3BhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9rZXlDb21tYW5kTW92ZVNlbGVjdGlvblRvU3RhcnRPZkJsb2NrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIva2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub0VuZE9mQmxvY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9rZXlDb21tYW5kSW5zZXJ0TmV3bGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmREZWxldGVXb3JkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9Ub2tlbml6ZVV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9rZXlDb21tYW5kQmFja3NwYWNlV29yZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2V4cGFuZFJhbmdlVG9TdGFydE9mTGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRCYWNrc3BhY2VUb1N0YXJ0T2ZMaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvU2Vjb25kYXJ5Q2xpcGJvYXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZWRpdE9uS2V5RG93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbklucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZWRpdE9uRm9jdXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25EcmFnU3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25EcmFnT3Zlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkN1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkNvcHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25Db21wb3NpdGlvblN0YXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZWRpdE9uQmx1ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZWRpdE9uQmVmb3JlSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVkaXRvckVkaXRIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jcmVhdGVBcnJheUZyb21NaXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvUGhvdG9zTWltZVR5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVkaXRvckRyYWdIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9qb2luQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0Vmlld3BvcnREaW1lbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0RG9jdW1lbnRTY3JvbGxFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRFbGVtZW50UmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0RWxlbWVudFBvc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9oeXBoZW5hdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2NhbWVsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRTdHlsZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRKc0RlYnVnTG9nZ2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3NldERyYWZ0RWRpdG9yU2VsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9tZW1vaXplU3RyaW5nT25seS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvbWFwT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9WZXJzaW9uUmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91YS1wYXJzZXItanMvc3JjL3VhLXBhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvVXNlckFnZW50RGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yVGV4dE5vZGUucmVhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVkaXRvckxlYWYucmVhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVkaXRvckNvbnRlbnRzLWNvcmUucmVhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVkaXRvckNvbnRlbnRzLnJlYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRFZGl0b3JDb21wb3NpdGlvbkhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVkaXRvci5yZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0NvbXBvc2l0ZURyYWZ0RGVjb3JhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvbW92ZUJsb2NrSW5Db250ZW50U3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL1VuaWNvZGVCaWRpU2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0VkaXRvckJpZGlTZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvc3BsaXRCbG9ja0luQ29udGVudFN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvcmVtb3ZlUmFuZ2VGcm9tQ29udGVudFN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvbW9kaWZ5QmxvY2tGb3JDb250ZW50U3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9pbnNlcnRUZXh0SW50b0NvbnRlbnRTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2luc2VydEZyYWdtZW50SW50b0NvbnRlbnRTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFJhbmdlc0ZvckRyYWZ0RW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRFbnRpdHlTZWdtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldENoYXJhY3RlclJlbW92YWxSYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2FwcGx5RW50aXR5VG9Db250ZW50QmxvY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9hcHBseUVudGl0eVRvQ29udGVudFN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvQ29udGVudFN0YXRlSW5saW5lU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEZlYXR1cmVGbGFncy1jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvQXRvbWljQmxvY2tVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXhlbnYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vZGFsL2xpYi9oZWxwZXJzL2NsYXNzTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9kYWwvbGliL2hlbHBlcnMvc2NvcGVUYWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vZGFsL2xpYi9oZWxwZXJzL2ZvY3VzTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9kYWwvbGliL2NvbXBvbmVudHMvTW9kYWxQb3J0YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vZGFsL2xpYi9jb21wb25lbnRzL01vZGFsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Rhc2hib2FyZHMvam9icy9Kb2JFZGl0TW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGFzaGJvYXJkcy9qb2JzL1NpbmdsZURhc2hib2FyZEpvYi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9kYXNoYm9hcmRzL2NvbXBhbmllcy9Db21wYW55LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Rhc2hib2FyZHMvY29tcGFuaWVzL0NvbXBhbmllc1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGFzaGJvYXJkcy9FbXBsb3llckRhc2hib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9kYXNoYm9hcmRzL0VtcGxveWVlRGFzaGJvYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Rhc2hib2FyZHMvTXlBY2NvdW50LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2dsb2JhbC9Db250YWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2dsb2JhbC9BYm91dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9nbG9iYWwvSG9tZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9qb2JzL0pvYlBvc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idG9hLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWhvdC1sb2FkZXIvZGlzdC9yZWFjdC1ob3QtbG9hZGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9yb3V0ZXJzL0FwcFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc1RleHROb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwidmFsdWUiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInZhbGlkYXRlRm9ybWF0IiwiZm9ybWF0IiwiY29uZGl0aW9uIiwiYSIsImIiLCJlIiwiZiIsImVycm9yIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJhcmdzIiwiYXJnSW5kZXgiLCJyZXBsYWNlIiwiZnJhbWVzVG9Qb3AiLCJTTElDRSQwIiwiQXJyYXkiLCJzbGljZSIsImNyZWF0ZUNsYXNzIiwiY3RvciIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIkl0ZXJhYmxlIiwiaXNJdGVyYWJsZSIsIlNlcSIsIktleWVkSXRlcmFibGUiLCJpc0tleWVkIiwiS2V5ZWRTZXEiLCJJbmRleGVkSXRlcmFibGUiLCJpc0luZGV4ZWQiLCJJbmRleGVkU2VxIiwiU2V0SXRlcmFibGUiLCJpc0Fzc29jaWF0aXZlIiwiU2V0U2VxIiwibWF5YmVJdGVyYWJsZSIsIklTX0lURVJBQkxFX1NFTlRJTkVMIiwibWF5YmVLZXllZCIsIklTX0tFWUVEX1NFTlRJTkVMIiwibWF5YmVJbmRleGVkIiwiSVNfSU5ERVhFRF9TRU5USU5FTCIsIm1heWJlQXNzb2NpYXRpdmUiLCJpc09yZGVyZWQiLCJtYXliZU9yZGVyZWQiLCJJU19PUkRFUkVEX1NFTlRJTkVMIiwiS2V5ZWQiLCJJbmRleGVkIiwiU2V0IiwiU0hJRlQiLCJTSVpFIiwiTUFTSyIsIk5PVF9TRVQiLCJDSEFOR0VfTEVOR1RIIiwiRElEX0FMVEVSIiwiTWFrZVJlZiIsInJlZiIsIlNldFJlZiIsIk93bmVySUQiLCJhcnJDb3B5IiwiYXJyIiwib2Zmc2V0IiwibGVuIiwiTWF0aCIsIm1heCIsImxlbmd0aCIsIm5ld0FyciIsImlpIiwiZW5zdXJlU2l6ZSIsIml0ZXIiLCJzaXplIiwiX19pdGVyYXRlIiwicmV0dXJuVHJ1ZSIsIndyYXBJbmRleCIsImluZGV4IiwidWludDMySW5kZXgiLCJOYU4iLCJ3aG9sZVNsaWNlIiwiYmVnaW4iLCJlbmQiLCJyZXNvbHZlQmVnaW4iLCJyZXNvbHZlSW5kZXgiLCJyZXNvbHZlRW5kIiwiZGVmYXVsdEluZGV4IiwibWluIiwiSVRFUkFURV9LRVlTIiwiSVRFUkFURV9WQUxVRVMiLCJJVEVSQVRFX0VOVFJJRVMiLCJSRUFMX0lURVJBVE9SX1NZTUJPTCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiRkFVWF9JVEVSQVRPUl9TWU1CT0wiLCJJVEVSQVRPUl9TWU1CT0wiLCJJdGVyYXRvciIsIm5leHQiLCJ0aGlzIiwiaXRlcmF0b3JWYWx1ZSIsInR5cGUiLCJrIiwidiIsIml0ZXJhdG9yUmVzdWx0IiwiZG9uZSIsIml0ZXJhdG9yRG9uZSIsImhhc0l0ZXJhdG9yIiwiZ2V0SXRlcmF0b3JGbiIsImlzSXRlcmF0b3IiLCJtYXliZUl0ZXJhdG9yIiwiZ2V0SXRlcmF0b3IiLCJpdGVyYWJsZSIsIml0ZXJhdG9yRm4iLCJpc0FycmF5TGlrZSIsImVtcHR5U2VxdWVuY2UiLCJ0b1NlcSIsInNlcSIsIm1heWJlSW5kZXhlZFNlcUZyb21WYWx1ZSIsIk9iamVjdFNlcSIsIlR5cGVFcnJvciIsInNlcUZyb21WYWx1ZSIsInRvS2V5ZWRTZXEiLCJmcm9tRW50cnlTZXEiLCJrZXllZFNlcUZyb21WYWx1ZSIsImVudHJ5U2VxIiwidG9JbmRleGVkU2VxIiwiaW5kZXhlZFNlcUZyb21WYWx1ZSIsInRvU2V0U2VxIiwidG9TdHJpbmciLCJLRVlTIiwiVkFMVUVTIiwiRU5UUklFUyIsImluc3BlY3QiLCJ0b1NvdXJjZSIsIm9mIiwiYXJndW1lbnRzIiwiX190b1N0cmluZyIsImNhY2hlUmVzdWx0IiwiX2NhY2hlIiwiX19pdGVyYXRlVW5jYWNoZWQiLCJ0b0FycmF5IiwiZm4iLCJyZXZlcnNlIiwic2VxSXRlcmF0ZSIsIl9faXRlcmF0b3IiLCJzZXFJdGVyYXRvciIsImlzU2VxIiwiRU1QVFlfU0VRIiwiRU1QVFlfUkVQRUFUIiwiRU1QVFlfUkFOR0UiLCJJU19TRVFfU0VOVElORUwiLCJBcnJheVNlcSIsImFycmF5IiwiX2FycmF5Iiwia2V5cyIsIl9vYmplY3QiLCJfa2V5cyIsIkl0ZXJhYmxlU2VxIiwiX2l0ZXJhYmxlIiwiSXRlcmF0b3JTZXEiLCJfaXRlcmF0b3IiLCJfaXRlcmF0b3JDYWNoZSIsIm1heWJlU2VxIiwiaXNBcnJheSIsInVzZUtleXMiLCJjYWNoZSIsIm1heEluZGV4IiwiZW50cnkiLCJfX2l0ZXJhdG9yVW5jYWNoZWQiLCJmcm9tSlMiLCJqc29uIiwiY29udmVydGVyIiwiZnJvbUpTV2l0aCIsImtleSIsInBhcmVudEpTT04iLCJtYXAiLCJpc1BsYWluT2JqIiwiIiwiZnJvbUpTRGVmYXVsdCIsInRvTGlzdCIsInRvTWFwIiwiaXMiLCJ2YWx1ZUEiLCJ2YWx1ZUIiLCJ2YWx1ZU9mIiwiZXF1YWxzIiwiZGVlcEVxdWFsIiwiX19oYXNoIiwibm90QXNzb2NpYXRpdmUiLCJlbnRyaWVzIiwiZXZlcnkiLCJmbGlwcGVkIiwiXyIsImFsbEVxdWFsIiwiYlNpemUiLCJoYXMiLCJSZXBlYXQiLCJ0aW1lcyIsIl92YWx1ZSIsIkluZmluaXR5IiwiaW52YXJpYW50IiwiUmFuZ2UiLCJzdGFydCIsInN0ZXAiLCJhYnMiLCJfc3RhcnQiLCJfZW5kIiwiX3N0ZXAiLCJjZWlsIiwiQ29sbGVjdGlvbiIsIktleWVkQ29sbGVjdGlvbiIsIkluZGV4ZWRDb2xsZWN0aW9uIiwiU2V0Q29sbGVjdGlvbiIsIm5vdFNldFZhbHVlIiwiaXRlcmF0aW9ucyIsInZhbCIsImluY2x1ZGVzIiwic2VhcmNoVmFsdWUiLCJpbmRleE9mIiwibGFzdEluZGV4T2YiLCJ0aGlzJDAiLCJvdGhlciIsInBvc3NpYmxlSW5kZXgiLCJmbG9vciIsIm9mZnNldFZhbHVlIiwiaW11bCIsInNtaSIsImkzMiIsImhhc2giLCJzdHJpbmciLCJoIiwiU1RSSU5HX0hBU0hfQ0FDSEVfTUlOX1NUUkxFTiIsInN0cmluZ0hhc2hDYWNoZSIsImhhc2hTdHJpbmciLCJTVFJJTkdfSEFTSF9DQUNIRV9TSVpFIiwiU1RSSU5HX0hBU0hfQ0FDSEVfTUFYX1NJWkUiLCJoYXNoQ29kZSIsIm9iaiIsInVzaW5nV2Vha01hcCIsIndlYWtNYXAiLCJVSURfSEFTSF9LRVkiLCJjYW5EZWZpbmVQcm9wZXJ0eSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwibm9kZSIsIm5vZGVUeXBlIiwidW5pcXVlSUQiLCJkb2N1bWVudEVsZW1lbnQiLCJnZXRJRU5vZGVIYXNoIiwib2JqSGFzaFVJRCIsInNldCIsImlzRXh0ZW5zaWJsZSIsIndyaXRhYmxlIiwiYXBwbHkiLCJoYXNoSlNPYmoiLCJjaGFyQ29kZUF0IiwiV2Vha01hcCIsImFzc2VydE5vdEluZmluaXRlIiwiTWFwIiwiZW1wdHlNYXAiLCJpc01hcCIsIndpdGhNdXRhdGlvbnMiLCJmb3JFYWNoIiwibWF5YmVNYXAiLCJJU19NQVBfU0VOVElORUwiLCJfcm9vdCIsInVwZGF0ZU1hcCIsInNldEluIiwia2V5UGF0aCIsInVwZGF0ZUluIiwicmVtb3ZlIiwiZGVsZXRlSW4iLCJ1cGRhdGUiLCJ1cGRhdGVyIiwidXBkYXRlZFZhbHVlIiwidXBkYXRlSW5EZWVwTWFwIiwiZXhpc3RpbmciLCJrZXlQYXRoSXRlciIsImlzTm90U2V0IiwiZXhpc3RpbmdWYWx1ZSIsIm5ld1ZhbHVlIiwibmV4dEV4aXN0aW5nIiwibmV4dFVwZGF0ZWQiLCJmb3JjZUl0ZXJhdG9yIiwiY2xlYXIiLCJfX293bmVySUQiLCJfX2FsdGVyZWQiLCJtZXJnZSIsIm1lcmdlSW50b01hcFdpdGgiLCJtZXJnZVdpdGgiLCJtZXJnZXIiLCJpdGVycyIsIm1lcmdlSW4iLCJtZXJnZURlZXAiLCJkZWVwTWVyZ2VyIiwibWVyZ2VEZWVwV2l0aCIsImRlZXBNZXJnZXJXaXRoIiwibWVyZ2VEZWVwSW4iLCJzb3J0IiwiY29tcGFyYXRvciIsIk9yZGVyZWRNYXAiLCJzb3J0RmFjdG9yeSIsInNvcnRCeSIsIm1hcHBlciIsIm11dGFibGUiLCJhc011dGFibGUiLCJ3YXNBbHRlcmVkIiwiX19lbnN1cmVPd25lciIsImFzSW1tdXRhYmxlIiwiTWFwSXRlcmF0b3IiLCJpdGVyYXRlIiwib3duZXJJRCIsIm1ha2VNYXAiLCJFTVBUWV9NQVAiLCJNYXBQcm90b3R5cGUiLCJBcnJheU1hcE5vZGUiLCJCaXRtYXBJbmRleGVkTm9kZSIsImJpdG1hcCIsIm5vZGVzIiwiSGFzaEFycmF5TWFwTm9kZSIsImNvdW50IiwiSGFzaENvbGxpc2lvbk5vZGUiLCJrZXlIYXNoIiwiVmFsdWVOb2RlIiwiX3R5cGUiLCJfcmV2ZXJzZSIsIl9zdGFjayIsIm1hcEl0ZXJhdG9yRnJhbWUiLCJtYXBJdGVyYXRvclZhbHVlIiwicHJldiIsIl9fcHJldiIsInJvb3QiLCJuZXdSb290IiwibmV3U2l6ZSIsImRpZENoYW5nZVNpemUiLCJkaWRBbHRlciIsInVwZGF0ZU5vZGUiLCJzaGlmdCIsImlzTGVhZk5vZGUiLCJtZXJnZUludG9Ob2RlIiwibmV3Tm9kZSIsImlkeDEiLCJpZHgyIiwiaXRlcmFibGVzIiwicHVzaCIsIm1lcmdlSW50b0NvbGxlY3Rpb25XaXRoIiwibmV4dFZhbHVlIiwiY29sbGVjdGlvbiIsImZpbHRlciIsIngiLCJtZXJnZUludG9NYXAiLCJwb3BDb3VudCIsImlkeCIsImNhbkVkaXQiLCJuZXdBcnJheSIsInJlbW92ZUluIiwicmVtb3ZlZCIsImV4aXN0cyIsIk1BWF9BUlJBWV9NQVBfU0laRSIsImNyZWF0ZU5vZGVzIiwiaXNFZGl0YWJsZSIsIm5ld0VudHJpZXMiLCJwb3AiLCJiaXQiLCJrZXlIYXNoRnJhZyIsIk1BWF9CSVRNQVBfSU5ERVhFRF9TSVpFIiwiaW5jbHVkaW5nIiwiZXhwYW5kZWROb2RlcyIsImV4cGFuZE5vZGVzIiwibmV3Qml0bWFwIiwibmV3Tm9kZXMiLCJuZXdMZW4iLCJhZnRlciIsInNwbGljZU91dCIsInNwbGljZUluIiwibmV3Q291bnQiLCJNSU5fSEFTSF9BUlJBWV9NQVBfU0laRSIsImV4Y2x1ZGluZyIsInBhY2tlZElJIiwicGFja2VkTm9kZXMiLCJwYWNrTm9kZXMiLCJrZXlNYXRjaCIsInN0YWNrIiwic3ViTm9kZSIsIkxpc3QiLCJlbXB0eSIsImVtcHR5TGlzdCIsImlzTGlzdCIsIm1ha2VMaXN0IiwiVk5vZGUiLCJsaXN0Iiwic2V0U2l6ZSIsIm1heWJlTGlzdCIsIklTX0xJU1RfU0VOVElORUwiLCJsaXN0Tm9kZUZvciIsIl9vcmlnaW4iLCJzZXRMaXN0Qm91bmRzIiwibmV3VGFpbCIsIl90YWlsIiwiZ2V0VGFpbE9mZnNldCIsIl9jYXBhY2l0eSIsInVwZGF0ZVZOb2RlIiwiX2xldmVsIiwidXBkYXRlTGlzdCIsInNwbGljZSIsImluc2VydCIsInZhbHVlcyIsIm9sZFNpemUiLCJ1bnNoaWZ0IiwibWVyZ2VJbnRvTGlzdFdpdGgiLCJpdGVyYXRlTGlzdCIsIkRPTkUiLCJMaXN0UHJvdG90eXBlIiwicmVtb3ZlQmVmb3JlIiwibGV2ZWwiLCJvcmlnaW5JbmRleCIsIm5ld0NoaWxkIiwicmVtb3ZpbmdGaXJzdCIsIm9sZENoaWxkIiwiZWRpdGFibGUiLCJlZGl0YWJsZVZOb2RlIiwicmVtb3ZlQWZ0ZXIiLCJzaXplSW5kZXgiLCJFTVBUWV9MSVNUIiwiRU1QVFlfT1JERVJFRF9NQVAiLCJsZWZ0IiwicmlnaHQiLCJ0YWlsUG9zIiwidGFpbCIsIml0ZXJhdGVOb2RlT3JMZWFmIiwiZnJvbSIsInRvIiwiaXRlcmF0ZUxlYWYiLCJpdGVyYXRlTm9kZSIsIm9yaWdpbiIsImNhcGFjaXR5Iiwibm9kZUhhcyIsImxvd2VyTm9kZSIsIm5ld0xvd2VyTm9kZSIsInJhd0luZGV4Iiwib3duZXIiLCJvbGRPcmlnaW4iLCJvbGRDYXBhY2l0eSIsIm5ld09yaWdpbiIsIm5ld0NhcGFjaXR5IiwibmV3TGV2ZWwiLCJvZmZzZXRTaGlmdCIsIm9sZFRhaWxPZmZzZXQiLCJuZXdUYWlsT2Zmc2V0Iiwib2xkVGFpbCIsImJlZ2luSW5kZXgiLCJtYXhTaXplIiwiZW1wdHlPcmRlcmVkTWFwIiwiaXNPcmRlcmVkTWFwIiwibWF5YmVPcmRlcmVkTWFwIiwibWFrZU9yZGVyZWRNYXAiLCJvbWFwIiwiX21hcCIsIl9saXN0IiwidXBkYXRlT3JkZXJlZE1hcCIsIm5ld01hcCIsIm5ld0xpc3QiLCJmbGlwIiwiVG9LZXllZFNlcXVlbmNlIiwiaW5kZXhlZCIsIl9pdGVyIiwiX3VzZUtleXMiLCJUb0luZGV4ZWRTZXF1ZW5jZSIsIlRvU2V0U2VxdWVuY2UiLCJGcm9tRW50cmllc1NlcXVlbmNlIiwiZmxpcEZhY3RvcnkiLCJmbGlwU2VxdWVuY2UiLCJtYWtlU2VxdWVuY2UiLCJyZXZlcnNlZFNlcXVlbmNlIiwiY2FjaGVSZXN1bHRUaHJvdWdoIiwibWFwRmFjdG9yeSIsImNvbnRleHQiLCJtYXBwZWRTZXF1ZW5jZSIsInJldmVyc2VGYWN0b3J5IiwiZmlsdGVyRmFjdG9yeSIsInByZWRpY2F0ZSIsImZpbHRlclNlcXVlbmNlIiwic2xpY2VGYWN0b3J5Iiwib3JpZ2luYWxTaXplIiwicmVzb2x2ZWRCZWdpbiIsInJlc29sdmVkRW5kIiwic2xpY2VTaXplIiwicmVzb2x2ZWRTaXplIiwic2xpY2VTZXEiLCJza2lwcGVkIiwiaXNTa2lwcGluZyIsInNraXBXaGlsZUZhY3RvcnkiLCJza2lwU2VxdWVuY2UiLCJza2lwcGluZyIsImZsYXR0ZW5GYWN0b3J5IiwiZGVwdGgiLCJmbGF0U2VxdWVuY2UiLCJzdG9wcGVkIiwiZmxhdERlZXAiLCJjdXJyZW50RGVwdGgiLCJkZWZhdWx0Q29tcGFyYXRvciIsImlzS2V5ZWRJdGVyYWJsZSIsIm1heEZhY3RvcnkiLCJyZWR1Y2UiLCJtYXhDb21wYXJlIiwiY29tcCIsInppcFdpdGhGYWN0b3J5Iiwia2V5SXRlciIsInppcHBlciIsInppcFNlcXVlbmNlIiwiaXRlcmF0b3JzIiwiaXNEb25lIiwic3RlcHMiLCJzb21lIiwicmVpZnkiLCJ2YWxpZGF0ZUVudHJ5IiwicmVzb2x2ZVNpemUiLCJpdGVyYWJsZUNsYXNzIiwiUmVjb3JkIiwiZGVmYXVsdFZhbHVlcyIsImhhc0luaXRpYWxpemVkIiwiUmVjb3JkVHlwZSIsIm5hbWVzIiwiYmluZCIsInNldFByb3BzIiwiUmVjb3JkVHlwZVByb3RvdHlwZSIsIl9uYW1lIiwiX2RlZmF1bHRWYWx1ZXMiLCJSZWNvcmRQcm90b3R5cGUiLCJ2YWx1ZVNlcSIsImluZGV4ZWRJdGVyYWJsZSIsInJlY29yZE5hbWUiLCJkZWZhdWx0VmFsIiwiX2VtcHR5IiwibWFrZVJlY29yZCIsImxpa2VSZWNvcmQiLCJyZWNvcmQiLCJnZXRQcm90b3R5cGVPZiIsImVtcHR5U2V0IiwiaXNTZXQiLCJhZGQiLCJtYXliZVNldCIsIklTX1NFVF9TRU5USU5FTCIsImZyb21LZXlzIiwia2V5U2VxIiwidXBkYXRlU2V0IiwidW5pb24iLCJpbnRlcnNlY3QiLCJvcmlnaW5hbFNldCIsInN1YnRyYWN0IiwiT3JkZXJlZFNldCIsIl9fbWFrZSIsIkVNUFRZX1NFVCIsIlNldFByb3RvdHlwZSIsIl9fZW1wdHkiLCJtYWtlU2V0IiwiZW1wdHlPcmRlcmVkU2V0IiwiaXNPcmRlcmVkU2V0IiwibWF5YmVPcmRlcmVkU2V0IiwiRU1QVFlfT1JERVJFRF9TRVQiLCJPcmRlcmVkU2V0UHJvdG90eXBlIiwibWFrZU9yZGVyZWRTZXQiLCJTdGFjayIsImVtcHR5U3RhY2siLCJpc1N0YWNrIiwidW5zaGlmdEFsbCIsIm1heWJlU3RhY2siLCJJU19TVEFDS19TRU5USU5FTCIsImhlYWQiLCJfaGVhZCIsInBlZWsiLCJtYWtlU3RhY2siLCJwdXNoQWxsIiwiRU1QVFlfU1RBQ0siLCJTdGFja1Byb3RvdHlwZSIsIm1peGluIiwibWV0aG9kcyIsImtleUNvcGllciIsImdldE93blByb3BlcnR5U3ltYm9scyIsInRvSlMiLCJfX3RvSlMiLCJ0b0pTT04iLCJ0b09iamVjdCIsInRvT3JkZXJlZE1hcCIsInRvT3JkZXJlZFNldCIsInRvU2V0IiwidG9TdGFjayIsIl9fdG9TdHJpbmdNYXBwZXIiLCJqb2luIiwiY29uY2F0Iiwic2luZ2xldG9uIiwiY29uY2F0U2VxIiwiZmxhdHRlbiIsInN1bSIsImNvbmNhdEZhY3RvcnkiLCJyZXR1cm5WYWx1ZSIsImZpbmQiLCJmaW5kRW50cnkiLCJmb3VuZCIsImZpbmRMYXN0RW50cnkiLCJzaWRlRWZmZWN0Iiwic2VwYXJhdG9yIiwiam9pbmVkIiwiaXNGaXJzdCIsInJlZHVjZXIiLCJpbml0aWFsUmVkdWN0aW9uIiwicmVkdWN0aW9uIiwidXNlRmlyc3QiLCJyZWR1Y2VSaWdodCIsInJldmVyc2VkIiwibm90IiwiYnV0TGFzdCIsImlzRW1wdHkiLCJjb3VudEJ5IiwiZ3JvdXBlciIsImdyb3VwcyIsImNvdW50QnlGYWN0b3J5IiwiZW50cmllc1NlcXVlbmNlIiwiZW50cnlNYXBwZXIiLCJmaWx0ZXJOb3QiLCJmaW5kTGFzdCIsImZpcnN0IiwiZmxhdE1hcCIsImNvZXJjZSIsImZsYXRNYXBGYWN0b3J5Iiwic2VhcmNoS2V5IiwiZ2V0SW4iLCJzZWFyY2hLZXlQYXRoIiwibmVzdGVkIiwiZ3JvdXBCeSIsImlzS2V5ZWRJdGVyIiwiZ3JvdXBCeUZhY3RvcnkiLCJoYXNJbiIsImlzU3Vic2V0IiwiaXNTdXBlcnNldCIsImtleU1hcHBlciIsImxhc3QiLCJtYXhCeSIsIm5lZyIsImRlZmF1bHROZWdDb21wYXJhdG9yIiwibWluQnkiLCJyZXN0Iiwic2tpcCIsImFtb3VudCIsInNraXBMYXN0Iiwic2tpcFdoaWxlIiwic2tpcFVudGlsIiwidGFrZSIsInRha2VMYXN0IiwidGFrZVdoaWxlIiwidGFrZVNlcXVlbmNlIiwiaXRlcmF0aW5nIiwidGFrZVdoaWxlRmFjdG9yeSIsInRha2VVbnRpbCIsIm9yZGVyZWQiLCJrZXllZCIsIm11cm11ckhhc2hPZlNpemUiLCJoYXNoTWVyZ2UiLCJoYXNoSXRlcmFibGUiLCJJdGVyYWJsZVByb3RvdHlwZSIsInF1b3RlU3RyaW5nIiwiY2hhaW4iLCJjb250YWlucyIsIm5vTGVuZ3RoV2FybmluZyIsImNvbnNvbGUiLCJ3YXJuIiwiZmluZEtleSIsImZpbmRMYXN0S2V5Iiwia2V5T2YiLCJsYXN0S2V5T2YiLCJtYXBFbnRyaWVzIiwibWFwS2V5cyIsIktleWVkSXRlcmFibGVQcm90b3R5cGUiLCJKU09OIiwic3RyaW5naWZ5IiwiZGVmYXVsdFppcHBlciIsImZpbmRJbmRleCIsInJlbW92ZU51bSIsIm51bUFyZ3MiLCJzcGxpY2VkIiwiZmluZExhc3RJbmRleCIsImludGVycG9zZSIsImludGVycG9zZWRTZXF1ZW5jZSIsImludGVycG9zZUZhY3RvcnkiLCJpbnRlcmxlYXZlIiwiemlwcGVkIiwiaW50ZXJsZWF2ZWQiLCJ6aXAiLCJ6aXBXaXRoIiwiZmFjdG9yeSIsIl9leHRlbmRzIiwidGFyZ2V0Iiwic291cmNlIiwiQmxvY2tUcmVlIiwiQ29udGVudFN0YXRlIiwiRWRpdG9yQmlkaVNlcnZpY2UiLCJJbW11dGFibGUiLCJTZWxlY3Rpb25TdGF0ZSIsIkVkaXRvclN0YXRlUmVjb3JkIiwiYWxsb3dVbmRvIiwiY3VycmVudENvbnRlbnQiLCJkZWNvcmF0b3IiLCJkaXJlY3Rpb25NYXAiLCJmb3JjZVNlbGVjdGlvbiIsImluQ29tcG9zaXRpb25Nb2RlIiwiaW5saW5lU3R5bGVPdmVycmlkZSIsImxhc3RDaGFuZ2VUeXBlIiwibmF0aXZlbHlSZW5kZXJlZENvbnRlbnQiLCJyZWRvU3RhY2siLCJzZWxlY3Rpb24iLCJ0cmVlTWFwIiwidW5kb1N0YWNrIiwiRWRpdG9yU3RhdGUiLCJpbW11dGFibGUiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2ltbXV0YWJsZSIsImNyZWF0ZUVtcHR5IiwiY3JlYXRlV2l0aENvbnRlbnQiLCJjcmVhdGVGcm9tVGV4dCIsImNvbnRlbnRTdGF0ZSIsImZpcnN0S2V5IiwiZ2V0QmxvY2tNYXAiLCJnZXRLZXkiLCJjb25maWciLCJyZWNvcmRDb25maWciLCJnZW5lcmF0ZU5ld1RyZWVNYXAiLCJnZXREaXJlY3Rpb25NYXAiLCJlZGl0b3JTdGF0ZSIsInB1dCIsImdldEltbXV0YWJsZSIsInN0YXRlIiwiZXhpc3RpbmdEZWNvcmF0b3IiLCJuZXdDb250ZW50IiwiZ2V0Q3VycmVudENvbnRlbnQiLCJuZXdUcmVlTWFwIiwiY29udGVudCIsImJsb2NrTWFwIiwicHJldmlvdXNUcmVlTWFwIiwiYmxvY2siLCJnZXREZWNvcmF0aW9ucyIsImdlbmVyYXRlIiwicmVnZW5lcmF0ZVRyZWVGb3JOZXdEZWNvcmF0b3IiLCJuZXdCbG9ja01hcCIsIm5ld0VudGl0eU1hcCIsInByZXZCbG9ja01hcCIsInJlZ2VuZXJhdGVUcmVlRm9yTmV3QmxvY2tzIiwiZ2V0RW50aXR5TWFwIiwiZ2V0QWxsb3dVbmRvIiwiZ2V0VW5kb1N0YWNrIiwiZ2V0UmVkb1N0YWNrIiwiZ2V0U2VsZWN0aW9uIiwiZ2V0RGVjb3JhdG9yIiwiaXNJbkNvbXBvc2l0aW9uTW9kZSIsIm11c3RGb3JjZVNlbGVjdGlvbiIsImdldE5hdGl2ZWx5UmVuZGVyZWRDb250ZW50IiwiZ2V0TGFzdENoYW5nZVR5cGUiLCJnZXRJbmxpbmVTdHlsZU92ZXJyaWRlIiwic2V0SW5saW5lU3R5bGVPdmVycmlkZSIsImdldEN1cnJlbnRJbmxpbmVTdHlsZSIsIm92ZXJyaWRlIiwiaXNDb2xsYXBzZWQiLCJzdGFydEtleSIsImdldFN0YXJ0S2V5Iiwic3RhcnRPZmZzZXQiLCJnZXRTdGFydE9mZnNldCIsInN0YXJ0QmxvY2siLCJnZXRCbG9ja0ZvcktleSIsImdldElubGluZVN0eWxlQXQiLCJnZXRMZW5ndGgiLCJsb29rVXB3YXJkRm9ySW5saW5lU3R5bGUiLCJnZXRJbmxpbmVTdHlsZUZvckNvbGxhcHNlZFNlbGVjdGlvbiIsImdldElubGluZVN0eWxlRm9yTm9uQ29sbGFwc2VkU2VsZWN0aW9uIiwiZ2V0QmxvY2tUcmVlIiwiYmxvY2tLZXkiLCJpc1NlbGVjdGlvbkF0U3RhcnRPZkNvbnRlbnQiLCJoYXNFZGdlV2l0aGluIiwiaXNTZWxlY3Rpb25BdEVuZE9mQ29udGVudCIsImFjY2VwdFNlbGVjdGlvbiIsInVwZGF0ZVNlbGVjdGlvbiIsImdldEhhc0ZvY3VzIiwibW92ZVNlbGVjdGlvblRvRW5kIiwibGFzdEJsb2NrIiwiZ2V0TGFzdEJsb2NrIiwibGFzdEtleSIsImFuY2hvcktleSIsImFuY2hvck9mZnNldCIsImZvY3VzS2V5IiwiZm9jdXNPZmZzZXQiLCJpc0JhY2t3YXJkIiwibW92ZUZvY3VzVG9FbmQiLCJhZnRlclNlbGVjdGlvbk1vdmUiLCJjaGFuZ2VUeXBlIiwiZ2V0U2VsZWN0aW9uQWZ0ZXIiLCJtdXN0QmVjb21lQm91bmRhcnkiLCJnZXRTZWxlY3Rpb25CZWZvcmUiLCJlZGl0b3JTdGF0ZUNoYW5nZXMiLCJ1bmRvIiwibmV3Q3VycmVudENvbnRlbnQiLCJyZWRvIiwiZnJvbUtleSIsImxhc3ROb25FbXB0eSIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZXJyIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJjaGlsZHJlbiIsIkNoYXJhY3Rlck1ldGFkYXRhIiwiQ29udGVudFN0YXRlSW5saW5lU3R5bGUiLCJEcmFmdEZlYXR1cmVGbGFncyIsImFwcGx5RW50aXR5VG9Db250ZW50U3RhdGUiLCJnZXRDaGFyYWN0ZXJSZW1vdmFsUmFuZ2UiLCJnZXRDb250ZW50U3RhdGVGcmFnbWVudCIsImluc2VydEZyYWdtZW50SW50b0NvbnRlbnRTdGF0ZSIsImluc2VydFRleHRJbnRvQ29udGVudFN0YXRlIiwibW9kaWZ5QmxvY2tGb3JDb250ZW50U3RhdGUiLCJyZW1vdmVFbnRpdGllc0F0RWRnZXMiLCJyZW1vdmVSYW5nZUZyb21Db250ZW50U3RhdGUiLCJzcGxpdEJsb2NrSW5Db250ZW50U3RhdGUiLCJEcmFmdE1vZGlmaWVyIiwicmVwbGFjZVRleHQiLCJyYW5nZVRvUmVwbGFjZSIsInRleHQiLCJpbmxpbmVTdHlsZSIsImVudGl0eUtleSIsIndpdGhvdXRFbnRpdGllcyIsIndpdGhvdXRUZXh0IiwiY2hhcmFjdGVyIiwic3R5bGUiLCJlbnRpdHkiLCJpbnNlcnRUZXh0IiwidGFyZ2V0UmFuZ2UiLCJtb3ZlVGV4dCIsInJlbW92YWxSYW5nZSIsIm1vdmVkRnJhZ21lbnQiLCJhZnRlclJlbW92YWwiLCJyZW1vdmVSYW5nZSIsInJlcGxhY2VXaXRoRnJhZ21lbnQiLCJmcmFnbWVudCIsInJhbmdlVG9SZW1vdmUiLCJyZW1vdmFsRGlyZWN0aW9uIiwiZW5kS2V5IiwiZW5kQmxvY2siLCJnZXRJc0JhY2t3YXJkIiwiZ2V0Rm9jdXNLZXkiLCJnZXRGb2N1c09mZnNldCIsImdldEFuY2hvcktleSIsImdldEFuY2hvck9mZnNldCIsImVuZE9mZnNldCIsImdldEVuZE9mZnNldCIsInN0YXJ0RW50aXR5S2V5IiwiZ2V0RW50aXR5QXQiLCJlbmRFbnRpdHlLZXkiLCJfYWRqdXN0ZWRSZW1vdmFsUmFuZ2UiLCJhZGp1c3RlZFJlbW92YWxSYW5nZSIsImRyYWZ0X3NlZ21lbnRlZF9lbnRpdGllc19iZWhhdmlvciIsInNwbGl0QmxvY2siLCJzZWxlY3Rpb25TdGF0ZSIsImFwcGx5SW5saW5lU3R5bGUiLCJyZW1vdmVJbmxpbmVTdHlsZSIsInNldEJsb2NrVHlwZSIsImJsb2NrVHlwZSIsInNldEJsb2NrRGF0YSIsImJsb2NrRGF0YSIsImRhdGEiLCJtZXJnZUJsb2NrRGF0YSIsImdldERhdGEiLCJhcHBseUVudGl0eSIsInByb3BJc0VudW1lcmFibGUiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwic3BsaXQiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwiX3JlcXVpcmUiLCJkZWZhdWx0UmVjb3JkIiwiX0NoYXJhY3Rlck1ldGFkYXRhUmVjIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzdWJDbGFzcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzIiwiZ2V0U3R5bGUiLCJnZXRFbnRpdHkiLCJoYXNTdHlsZSIsImFwcGx5U3R5bGUiLCJ3aXRoU3R5bGUiLCJyZW1vdmVTdHlsZSIsIndpdGhvdXRTdHlsZSIsIndpdGhFbnRpdHkiLCJFTVBUWSIsImNvbmZpZ01hcCIsInBvb2wiLCJuZXdDaGFyYWN0ZXIiLCJmaW5kUmFuZ2VzSW1tdXRhYmxlIiwicGFyZW50IiwiY2hhcmFjdGVyTGlzdCIsInByZXZTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJoYXZlRXF1YWxTdHlsZSIsImNoYXJBIiwiY2hhckIiLCJoYXZlRXF1YWxFbnRpdHkiLCJkZWNvcmF0ZUNoYXJhY3Rlckxpc3QiLCJDb250ZW50QmxvY2tOb2RlIiwiX1JlY29yZCIsInByb3BzIiwiZ2V0VHlwZSIsImdldFRleHQiLCJnZXRDaGFyYWN0ZXJMaXN0IiwiZ2V0RGVwdGgiLCJnZXRDaGlsZEtleXMiLCJnZXRQYXJlbnRLZXkiLCJnZXRQcmV2U2libGluZ0tleSIsImdldE5leHRTaWJsaW5nS2V5IiwiZmluZFN0eWxlUmFuZ2VzIiwiZmlsdGVyRm4iLCJjYWxsYmFjayIsImZpbmRFbnRpdHlSYW5nZXMiLCJpc0J1ZmZlciIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImlzQXJyYXlCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzVW5kZWZpbmVkIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJ3aW5kb3ciLCJkb2N1bWVudCIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwiZXh0ZW5kIiwidGhpc0FyZyIsInRyaW0iLCJzdHIiLCJVc2VyQWdlbnREYXRhIiwiVmVyc2lvblJhbmdlIiwibWFwT2JqZWN0IiwibWVtb2l6ZVN0cmluZ09ubHkiLCJjb21wYXJlIiwidmVyc2lvbiIsInF1ZXJ5Iiwibm9ybWFsaXplciIsInN0YXJ0c1dpdGgiLCJyYW5nZSIsIm5vcm1hbGl6ZVBsYXRmb3JtVmVyc2lvbiIsInBsYXRmb3JtTmFtZSIsIlVzZXJBZ2VudCIsImlzQnJvd3NlciIsImJyb3dzZXJOYW1lIiwiYnJvd3NlckZ1bGxWZXJzaW9uIiwiaXNCcm93c2VyQXJjaGl0ZWN0dXJlIiwiYnJvd3NlckFyY2hpdGVjdHVyZSIsImlzRGV2aWNlIiwiZGV2aWNlTmFtZSIsImlzRW5naW5lIiwiZW5naW5lTmFtZSIsImVuZ2luZVZlcnNpb24iLCJpc1BsYXRmb3JtIiwicGxhdGZvcm1GdWxsVmVyc2lvbiIsImlzUGxhdGZvcm1BcmNoaXRlY3R1cmUiLCJwbGF0Zm9ybUFyY2hpdGVjdHVyZSIsIkZvb3RlciIsIl9yZWFjdDIiLCJkZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsIl9yZWFjdCIsIl9yZWFjdERvbSIsIl9yZWFjdFJvdXRlckRvbSIsIkhlYWRlciIsIl90aGlzIiwidG9rZW4iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiaWQiLCJOYXZMaW5rIiwiYWN0aXZlQ2xhc3NOYW1lIiwiZXhhY3QiLCJSZWFjdCIsIkNvbXBvbmVudCIsImFkZExlYWRpbmdTbGFzaCIsInBhdGgiLCJjaGFyQXQiLCJzdHJpcExlYWRpbmdTbGFzaCIsInN1YnN0ciIsImhhc0Jhc2VuYW1lIiwicHJlZml4IiwiUmVnRXhwIiwidGVzdCIsInN0cmlwQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJwYXJzZVBhdGgiLCJwYXRobmFtZSIsInNlYXJjaCIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwiY3JlYXRlUGF0aCIsImxvY2F0aW9uIiwiZyIsIkZ1bmN0aW9uIiwiZXZhbCIsInNlZW5LZXlzIiwiTVVMVElQTElFUiIsInBvdyIsImlzTmFOIiwicmFuZG9tIiwiUm91dGVyX1JvdXRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJSb3V0ZXIiLCJfdGVtcCIsIl9sZW4iLCJfa2V5IiwibWF0Y2giLCJjb21wdXRlTWF0Y2giLCJoaXN0b3J5IiwiZ2V0Q2hpbGRDb250ZXh0Iiwicm91dGVyIiwicm91dGUiLCJ1cmwiLCJwYXJhbXMiLCJpc0V4YWN0IiwiY29tcG9uZW50V2lsbE1vdW50IiwiX3RoaXMyIiwiX3Byb3BzIiwiaW52YXJpYW50X2Jyb3dzZXJfZGVmYXVsdCIsInJlYWN0X2RlZmF1bHQiLCJDaGlsZHJlbiIsInVubGlzdGVuIiwibGlzdGVuIiwic2V0U3RhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiYnJvd3Nlcl9kZWZhdWx0IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW5kZXIiLCJvbmx5IiwicHJvcFR5cGVzIiwicHJvcF90eXBlc19kZWZhdWx0IiwiaXNSZXF1aXJlZCIsImNvbnRleHRUeXBlcyIsImNoaWxkQ29udGV4dFR5cGVzIiwiZXNfUm91dGVyIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZXIiLCJCcm93c2VyUm91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJCcm93c2VyUm91dGVyX0Jyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyIiwiQnJvd3NlclJvdXRlcl9jbGFzc0NhbGxDaGVjayIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5X2RlZmF1bHQiLCJCcm93c2VyUm91dGVyX2luaGVyaXRzIiwiYmFzZW5hbWUiLCJmb3JjZVJlZnJlc2giLCJib29sIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImZ1bmMiLCJrZXlMZW5ndGgiLCJudW1iZXIiLCJlc19Ccm93c2VyUm91dGVyIiwiSGFzaFJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiSGFzaFJvdXRlcl9IYXNoUm91dGVyIiwiSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJjcmVhdGVIYXNoSGlzdG9yeV9kZWZhdWx0IiwiSGFzaFJvdXRlcl9pbmhlcml0cyIsImhhc2hUeXBlIiwib25lT2YiLCJlc19IYXNoUm91dGVyIiwiTGlua19leHRlbmRzIiwiTGlua19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiaXNNb2RpZmllZEV2ZW50IiwiZXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiTGlua19MaW5rIiwiTGluayIsIkxpbmtfY2xhc3NDYWxsQ2hlY2siLCJoYW5kbGVDbGljayIsIm9uQ2xpY2siLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwicHJldmVudERlZmF1bHQiLCJfdGhpcyRwcm9wcyIsIkxpbmtfaW5oZXJpdHMiLCJpbm5lclJlZiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImhyZWYiLCJjcmVhdGVIcmVmIiwib25lT2ZUeXBlIiwiZGVmYXVsdFByb3BzIiwic2hhcGUiLCJlc19MaW5rIiwiTWVtb3J5Um91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJNZW1vcnlSb3V0ZXJfTWVtb3J5Um91dGVyIiwiTWVtb3J5Um91dGVyIiwiTWVtb3J5Um91dGVyX2NsYXNzQ2FsbENoZWNrIiwiY3JlYXRlTWVtb3J5SGlzdG9yeV9kZWZhdWx0IiwiTWVtb3J5Um91dGVyX2luaGVyaXRzIiwiaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsSW5kZXgiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX01lbW9yeVJvdXRlciIsInBhdHRlcm5DYWNoZSIsImNhY2hlQ291bnQiLCJlc19tYXRjaFBhdGgiLCJvcHRpb25zIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRwYXRoIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJzZW5zaXRpdmUiLCJfY29tcGlsZVBhdGgiLCJwYXR0ZXJuIiwiY2FjaGVLZXkiLCJjb21waWxlZFBhdHRlcm4iLCJyZSIsInBhdGhfdG9fcmVnZXhwX2RlZmF1bHQiLCJtYXRjaFBhdGhfY29tcGlsZVBhdGgiLCJleGVjIiwibWVtbyIsIlJvdXRlX2V4dGVuZHMiLCJSb3V0ZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUm91dGVfaXNFbXB0eUNoaWxkcmVuIiwiUm91dGVfUm91dGUiLCJSb3V0ZSIsIlJvdXRlX2NsYXNzQ2FsbENoZWNrIiwiUm91dGVfaW5oZXJpdHMiLCJfcmVmIiwiY29tcHV0ZWRNYXRjaCIsImNvbXBvbmVudCIsIm5leHRDb250ZXh0IiwiX2NvbnRleHQkcm91dGVyIiwic3RhdGljQ29udGV4dCIsImVzX1JvdXRlIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZSIsIk5hdkxpbmtfZXh0ZW5kcyIsIl90eXBlb2YiLCJOYXZMaW5rX05hdkxpbmsiLCJjbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImdldElzQWN0aXZlIiwiaXNBY3RpdmUiLCJhcmlhQ3VycmVudCIsIk5hdkxpbmtfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfcmVmMiIsImFyaWEtY3VycmVudCIsImVzX05hdkxpbmsiLCJQcm9tcHRfUHJvbXB0IiwiUHJvbXB0IiwiUHJvbXB0X2NsYXNzQ2FsbENoZWNrIiwiUHJvbXB0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJQcm9tcHRfaW5oZXJpdHMiLCJlbmFibGUiLCJtZXNzYWdlIiwidW5ibG9jayIsImRpc2FibGUiLCJ3aGVuIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Qcm9tcHQiLCJMb2NhdGlvblV0aWxzX2V4dGVuZHMiLCJMb2NhdGlvblV0aWxzX2NyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJyZXNvbHZlX3BhdGhuYW1lIiwiTG9jYXRpb25VdGlsc19sb2NhdGlvbnNBcmVFcXVhbCIsInZhbHVlX2VxdWFsIiwiUmVkaXJlY3RfUmVkaXJlY3QiLCJSZWRpcmVjdCIsIlJlZGlyZWN0X2NsYXNzQ2FsbENoZWNrIiwiUmVkaXJlY3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZGlyZWN0X2luaGVyaXRzIiwiaXNTdGF0aWMiLCJwZXJmb3JtIiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJwcmV2VG8iLCJuZXh0VG8iLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JlZGlyZWN0IiwiU3RhdGljUm91dGVyX2V4dGVuZHMiLCJTdGF0aWNSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlN0YXRpY1JvdXRlcl9hZGRCYXNlbmFtZSIsIlBhdGhVdGlscyIsIlN0YXRpY1JvdXRlcl9jcmVhdGVMb2NhdGlvbiIsIl9vYmplY3QkcGF0aG5hbWUiLCJfb2JqZWN0JHNlYXJjaCIsIl9vYmplY3QkaGFzaCIsIlN0YXRpY1JvdXRlcl9jcmVhdGVVUkwiLCJTdGF0aWNSb3V0ZXJfc3RhdGljSGFuZGxlciIsIm1ldGhvZE5hbWUiLCJub29wIiwiU3RhdGljUm91dGVyX1N0YXRpY1JvdXRlciIsIlN0YXRpY1JvdXRlciIsIlN0YXRpY1JvdXRlcl9jbGFzc0NhbGxDaGVjayIsImhhbmRsZVB1c2giLCJhY3Rpb24iLCJoYW5kbGVSZXBsYWNlIiwiX3RoaXMkcHJvcHMyIiwiaGFuZGxlTGlzdGVuIiwiaGFuZGxlQmxvY2siLCJTdGF0aWNSb3V0ZXJfaW5oZXJpdHMiLCJTdGF0aWNSb3V0ZXJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJiYXNlIiwiU3RhdGljUm91dGVyX3N0cmlwQmFzZW5hbWUiLCJnbyIsImdvQmFjayIsImdvRm9yd2FyZCIsInJlYWN0X3JvdXRlcl9kb21fZXNfU3RhdGljUm91dGVyIiwiU3dpdGNoX1N3aXRjaCIsIlN3aXRjaCIsIlN3aXRjaF9jbGFzc0NhbGxDaGVjayIsIlN3aXRjaF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3dpdGNoX2luaGVyaXRzIiwiY2hpbGQiLCJlbGVtZW50IiwiaXNWYWxpZEVsZW1lbnQiLCJfZWxlbWVudCRwcm9wcyIsInBhdGhQcm9wIiwiY2xvbmVFbGVtZW50IiwicmVhY3Rfcm91dGVyX2RvbV9lc19Td2l0Y2giLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX21hdGNoUGF0aCIsIndpdGhSb3V0ZXJfZXh0ZW5kcyIsInJlYWN0X3JvdXRlcl9kb21fZXNfd2l0aFJvdXRlciIsIkMiLCJ3cmFwcGVkQ29tcG9uZW50UmVmIiwicmVtYWluaW5nUHJvcHMiLCJ3aXRoUm91dGVyX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwicm91dGVDb21wb25lbnRQcm9wcyIsImRpc3BsYXlOYW1lIiwiV3JhcHBlZENvbXBvbmVudCIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX2RlZmF1bHQiLCJfU2luZ2xlSm9iIiwiX2F4aW9zIiwiSm9ic1BhZ2UiLCJqb2JzIiwidGVtcEpvYnMiLCJqb2JUaXRsZSIsImpvYkhvdXJzIiwiam9iQXJlYSIsImpvYkNvbXBhbnkiLCJheGlvcyIsInRoZW4iLCJyZXNwb25zZSIsImxvZyIsImNhdGNoIiwiam9iIiwidGl0bGUiLCJfU2luZ2xlSm9iMiIsImhvdXJzIiwiYXJlYSIsImpvYlNsdWciLCJzbHVnIiwicG9zdGVkX2J5X2NvbXBhbnkiLCJTVVJST0dBVEVfSElHSF9TVEFSVCIsIlNVUlJPR0FURV9ISUdIX0VORCIsIlNVUlJPR0FURV9MT1dfU1RBUlQiLCJTVVJST0dBVEVfTE9XX0VORCIsIlNVUlJPR0FURV9VTklUU19SRUdFWCIsImlzQ29kZVVuaXRJblN1cnJvZ2F0ZVJhbmdlIiwiY29kZVVuaXQiLCJoYXNTdXJyb2dhdGVVbml0IiwiZ2V0VVRGMTZMZW5ndGgiLCJwb3MiLCJwb3NBIiwicG9zQiIsInN1YnN0cmluZyIsIlVuaWNvZGVVdGlscyIsImdldENvZGVQb2ludHMiLCJjb2RlUG9pbnRzIiwiY29kZVBvaW50QXQiLCJpc1N1cnJvZ2F0ZVBhaXIiLCJzZWNvbmQiLCJzdHJsZW4iLCJDb250ZW50QmxvY2siLCJfQ29udGVudEJsb2NrUmVjb3JkIiwiY2xhc3NOYW1lcyIsIl9TZWxlY3Rpb25TdGF0ZVJlY29yZCIsInNlcmlhbGl6ZSIsInNlbGVjdGlvblN0YXJ0Iiwib2Zmc2V0VG9DaGVjayIsImdldEVuZEtleSIsImhhc0ZvY3VzIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJhcmciLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsInN0cmF0ZWd5IiwiZGlyZWN0aW9uIiwiaGF5c3RhY2siLCJhcmVFcXVhbEZuIiwiZm91bmRGbiIsImN1cnNvciIsIm5leHRJbmRleCIsIkJsb2NrTWFwQnVpbGRlciIsImNyZWF0ZUZyb21BcnJheSIsImJsb2NrcyIsIkRyYWZ0T2Zmc2V0S2V5IiwiZW5jb2RlIiwiZGVjb3JhdG9yS2V5IiwibGVhZktleSIsImRlY29kZSIsIm9mZnNldEtleSIsIl9vZmZzZXRLZXkkc3BsaXQiLCJwYXJzZUludCIsIkRyYWZ0RW50aXR5SW5zdGFuY2UiLCJpbnN0YW5jZXMiLCJpbnN0YW5jZUtleSIsImxvZ1dhcm5pbmciLCJvbGRNZXRob2RDYWxsIiwibmV3TWV0aG9kQ2FsbCIsIkRyYWZ0RW50aXR5IiwiZ2V0TGFzdENyZWF0ZWRFbnRpdHlLZXkiLCJfX2dldExhc3RDcmVhdGVkRW50aXR5S2V5IiwibXV0YWJpbGl0eSIsIl9fY3JlYXRlIiwiX19hZGQiLCJfX2dldCIsIm1lcmdlRGF0YSIsInRvTWVyZ2UiLCJfX21lcmdlRGF0YSIsInJlcGxhY2VEYXRhIiwibmV3RGF0YSIsIl9fcmVwbGFjZURhdGEiLCJuZXdJbnN0YW5jZSIsInJhbmRvbWl6ZUJsb2NrTWFwS2V5cyIsImJsb2NrS2V5cyIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsImNoYXJzIiwiaXNUZXh0Tm9kZSIsImNvbnRhaW5zTm9kZSIsIm91dGVyTm9kZSIsImlubmVyTm9kZSIsInBhcmVudE5vZGUiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIm1heERpc3RhbmNlIiwia2V5QmVmb3JlIiwiZ2V0S2V5QmVmb3JlIiwiaXNPU1giLCJLZXlCaW5kaW5nVXRpbCIsImlzQ3RybEtleUNvbW1hbmQiLCJpc09wdGlvbktleUNvbW1hbmQiLCJoYXNDb21tYW5kTW9kaWZpZXIiLCJnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlIiwic2VhcmNoTm9kZSIsImdldERvY3VtZW50U2Nyb2xsRWxlbWVudCIsImdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uIiwic2Nyb2xsYWJsZSIsImRvY3VtZW50U2Nyb2xsRWxlbWVudCIsIm93bmVyRG9jdW1lbnQiLCJXaW5kb3ciLCJzY3JvbGxQb3NpdGlvbiIsInZpZXdwb3J0IiwieE1heCIsInNjcm9sbFdpZHRoIiwiY2xpZW50V2lkdGgiLCJ5TWF4Iiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwieSIsIl9pc05vZGVTY3JvbGxhYmxlIiwib3ZlcmZsb3ciLCJTdHlsZSIsImdldFNjcm9sbFBhcmVudCIsImJvZHkiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsImZpbHRlcktleSIsImVudGl0eU1hcCIsImdldE11dGFiaWxpdHkiLCJ0YXJnZXRTZWxlY3Rpb24iLCJCQUNLU1BBQ0UiLCJUQUIiLCJSRVRVUk4iLCJBTFQiLCJFU0MiLCJTUEFDRSIsIlBBR0VfVVAiLCJQQUdFX0RPV04iLCJFTkQiLCJIT01FIiwiTEVGVCIsIlVQIiwiUklHSFQiLCJET1dOIiwiREVMRVRFIiwiQ09NTUEiLCJQRVJJT0QiLCJBIiwiWiIsIlpFUk8iLCJOVU1QQURfMCIsIk5VTVBBRF85IiwiY3giLCJEZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcCIsImhlYWRlci1vbmUiLCJoZWFkZXItdHdvIiwiaGVhZGVyLXRocmVlIiwiaGVhZGVyLWZvdXIiLCJoZWFkZXItZml2ZSIsImhlYWRlci1zaXgiLCJ1bm9yZGVyZWQtbGlzdC1pdGVtIiwid3JhcHBlciIsIm9yZGVyZWQtbGlzdC1pdGVtIiwiYmxvY2txdW90ZSIsImF0b21pYyIsImNvZGUtYmxvY2siLCJ1bnN0eWxlZCIsImFsaWFzZWRFbGVtZW50cyIsIkxUUiIsIlJUTCIsImdsb2JhbERpciIsImlzU3Ryb25nIiwiZGlyIiwiZ2V0SFRNTERpciIsInNldEdsb2JhbERpciIsIlVuaWNvZGVCaWRpRGlyZWN0aW9uIiwiTkVVVFJBTCIsImdldEhUTUxEaXJJZkRpZmZlcmVudCIsIm90aGVyRGlyIiwiaW5pdEdsb2JhbERpciIsImdldEdsb2JhbERpciIsIlJFR0VYX0JMT0NLX0RFTElNSVRFUiIsImlucHV0IiwiZ2VuZXJhdGVSYW5kb21LZXkiLCJzYW5pdGl6ZURyYWZ0VGV4dCIsIkNvbnRlbnRCbG9ja05vZGVSZWNvcmQiLCJkcmFmdF90cmVlX2RhdGFfc3VwcG9ydCIsIl9Db250ZW50U3RhdGVSZWNvcmQiLCJnZXRLZXlBZnRlciIsImdldEJsb2NrQWZ0ZXIiLCJnZXRCbG9ja0JlZm9yZSIsImdldEJsb2Nrc0FzQXJyYXkiLCJnZXRGaXJzdEJsb2NrIiwiZ2V0UGxhaW5UZXh0IiwiZGVsaW1pdGVyIiwiaGFzVGV4dCIsImNyZWF0ZUVudGl0eSIsIm1lcmdlRW50aXR5RGF0YSIsInJlcGxhY2VFbnRpdHlEYXRhIiwiYWRkRW50aXR5IiwiY3JlYXRlRnJvbUJsb2NrQXJyYXkiLCJ0aGVCbG9ja3MiLCJjb250ZW50QmxvY2tzIiwic2VsZWN0aW9uQmVmb3JlIiwic2VsZWN0aW9uQWZ0ZXIiLCJ1dGlscyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsIkNvbnRlbnQtVHlwZSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiZGVmYXVsdHMiLCJYTUxIdHRwUmVxdWVzdCIsInByb2Nlc3MiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic3RhdHVzIiwiY29tbW9uIiwiQWNjZXB0IiwibWV0aG9kIiwiX3dhcm5pbmciLCJfd2FybmluZzIiLCJwcm9tcHQiLCJsaXN0ZW5lcnMiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImFwcGVuZExpc3RlbmVyIiwibGlzdGVuZXIiLCJpdGVtIiwibm90aWZ5TGlzdGVuZXJzIiwibG9jYXRpb25zQXJlRXF1YWwiLCJjcmVhdGVMb2NhdGlvbiIsIl9yZXNvbHZlUGF0aG5hbWUyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl92YWx1ZUVxdWFsMiIsIl9QYXRoVXRpbHMiLCJkb2MiLCJhY3RpdmVFbGVtZW50IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsInZhbHVlRXF1YWwiLCJhVHlwZSIsImFWYWx1ZSIsImJWYWx1ZSIsImFLZXlzIiwiYktleXMiLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiaGFzVHJhaWxpbmdTbGFzaCIsInVwIiwicGFydCIsIkRyYWZ0U3RyaW5nS2V5IiwidW5zdHJpbmdpZnkiLCJLZXlzIiwiaXNXaW5kb3dzIiwic2hvdWxkRml4RmlyZWZveE1vdmVtZW50Iiwic2hvdWxkUmVtb3ZlV29yZCIsImtleUNvZGUiLCJnZXRaQ29tbWFuZCIsImdldERlbGV0ZUNvbW1hbmQiLCJnZXRCYWNrc3BhY2VDb21tYW5kIiwiYWRqdXN0QmxvY2tEZXB0aEZvckNvbnRlbnRTdGF0ZSIsIm51bGx0aHJvd3MiLCJSaWNoVGV4dEVkaXRvclV0aWwiLCJjdXJyZW50QmxvY2tDb250YWluc0xpbmsiLCJnZXRDdXJyZW50QmxvY2tUeXBlIiwiZ2V0RGF0YU9iamVjdEZvckxpbmtVUkwiLCJ1cmkiLCJoYW5kbGVLZXlDb21tYW5kIiwiY29tbWFuZCIsInRvZ2dsZUlubGluZVN0eWxlIiwidG9nZ2xlQ29kZSIsIm9uQmFja3NwYWNlIiwib25EZWxldGUiLCJpbnNlcnRTb2Z0TmV3bGluZSIsIm5ld0VkaXRvclN0YXRlIiwiYmxvY2tCZWZvcmUiLCJ3aXRob3V0QXRvbWljQmxvY2siLCJ3aXRob3V0QmxvY2tTdHlsZSIsInRyeVRvUmVtb3ZlQmxvY2tTdHlsZSIsImJsb2NrQWZ0ZXIiLCJhdG9taWNCbG9ja1RhcmdldCIsIm9uVGFiIiwibWF4RGVwdGgiLCJibG9ja0Fib3ZlIiwidHlwZUFib3ZlIiwid2l0aEFkanVzdG1lbnQiLCJ0b2dnbGVCbG9ja1R5cGUiLCJ0eXBlVG9TZXQiLCJjdXJyZW50U3R5bGUiLCJ0b2dnbGVMaW5rIiwid2l0aG91dExpbmsiLCJmaXJzdEJsb2NrIiwiaXNPbGRJRSIsImh0bWwiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImlubmVySFRNTCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiX2tub3duTGlzdEl0ZW1EZXB0aENsIiwiX2Fzc2lnbiIsIl9kZWZpbmVQcm9wZXJ0eSIsIlVSSSIsImdldFNhZmVCb2R5RnJvbUhUTUwiLCJleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQiLCJSRUdFWF9DUiIsIlJFR0VYX0xGIiwiUkVHRVhfTkJTUCIsIlJFR0VYX0NBUlJJQUdFIiwiUkVHRVhfWldTIiwiYm9sZFZhbHVlcyIsIm5vdEJvbGRWYWx1ZXMiLCJpbmxpbmVUYWdzIiwiY29kZSIsImRlbCIsImVtIiwic3RyaWtlIiwic3Ryb25nIiwidSIsImtub3duTGlzdEl0ZW1EZXB0aENsYXNzZXMiLCJhbmNob3JBdHRyIiwiaW1nQXR0ciIsIkVNUFRZX0NIVU5LIiwiaW5saW5lcyIsImVudGl0aWVzIiwiRU1QVFlfQkxPQ0siLCJnZXRMaXN0QmxvY2tUeXBlIiwidGFnIiwibGFzdExpc3QiLCJnZXRCbG9ja1R5cGVGb3JUYWciLCJibG9ja1JlbmRlck1hcCIsIm1hdGNoZWRUeXBlcyIsImRyYWZ0QmxvY2siLCJhbGlhcyIsIm11bHRpTWF0Y2hFeHRyYWN0b3IiLCJtYXRjaFR5cGUiLCJnZXRNdWx0aU1hdGNoZWRUeXBlIiwiam9pbkNodW5rcyIsIkIiLCJleHBlcmltZW50YWxIYXNOZXN0ZWRCbG9ja3MiLCJsYXN0SW5BIiwiZmlyc3RJbkIiLCJoYXNWYWxpZExpbmtUZXh0IiwibGluayIsIkhUTUxBbmNob3JFbGVtZW50IiwicHJvdG9jb2wiLCJnZXRTb2Z0TmV3bGluZUNodW5rIiwiZ2V0QmxvY2tEaXZpZGVyQ2h1bmsiLCJwYXJlbnRLZXkiLCJnZXRDaHVua2VkQmxvY2siLCJnZW5GcmFnbWVudCIsImluQmxvY2siLCJibG9ja1RhZ3MiLCJpbkVudGl0eSIsImxhc3RMYXN0QmxvY2siLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwibmV4dEJsb2NrVHlwZSIsIm5ld0Jsb2NrIiwiaW5CbG9ja1R5cGUiLCJjaHVuayIsIl90ZXh0IiwidGV4dENvbnRlbnQiLCJub2RlVGV4dENvbnRlbnQiLCJwYXJlbnRFbGVtZW50IiwicGFyZW50Tm9kZU5hbWUiLCJnZXRXaGl0ZXNwYWNlQ2h1bmsiLCJmaWxsIiwiSFRNTEltYWdlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJnZXROYW1lZEl0ZW0iLCJpbWFnZSIsImVudGl0eUNvbmZpZyIsImF0dHIiLCJpbWFnZUF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsInN0eWxlVG9DaGVjayIsIkhUTUxFbGVtZW50IiwiaHRtbEVsZW1lbnQiLCJmb250V2VpZ2h0IiwiZm9udFN0eWxlIiwidGV4dERlY29yYXRpb24iLCJwcm9jZXNzSW5saW5lVGFnIiwiZGVwdGhDbGFzcyIsImNsYXNzTGlzdCIsImdldExpc3RJdGVtRGVwdGgiLCJpbkxpc3RCbG9jayIsImluQmxvY2tPckhhc05lc3RlZEJsb2NrcyIsImZpcnN0Q2hpbGQiLCJlbnRpdHlJZCIsImFuY2hvciIsImFuY2hvckF0dHJpYnV0ZSIsIl9nZW5GcmFnbWVudCIsImdlbmVyYXRlZENodW5rIiwic2libGluZyIsImdldENodW5rRm9ySFRNTCIsIkRPTUJ1aWxkZXIiLCJzdXBwb3J0ZWRCbG9ja1RhZ3MiLCJ1bnN0eWxlZEVsZW1lbnQiLCJ0YWdzIiwiZ2V0QmxvY2tNYXBTdXBwb3J0ZWRUYWdzIiwic2FmZUJvZHkiLCJ3b3JraW5nQmxvY2tzIiwiY29udGFpbnNTZW1hbnRpY0Jsb2NrTWFya3VwIiwiY2h1bmtEYXRhIiwicmF3QmxvY2tzIiwicmF3SW5saW5lcyIsInJhd0VudGl0aWVzIiwiQmxvY2tOb2RlUmVjb3JkIiwiYWNjIiwidGV4dEJsb2NrIiwicGFyZW50VGV4dE5vZGVLZXkiLCJwYXJlbnRJbmRleCIsImNhY2hlUmVmIiwicGFyZW50UmVjb3JkIiwicGFyZW50Q2hhcmFjdGVyTGlzdCIsInBhcmVudFRleHQiLCJ0ZXh0Tm9kZSIsImJsb2NrTm9kZSIsImNvbnZlcnRDaHVua1RvQ29udGVudEJsb2NrcyIsIldISVRFU1BBQ0VfQU5EX1BVTkNUVUFUSU9OIiwiZ2V0UHVuY3R1YXRpb24iLCJERUxFVEVfUkVHRVgiLCJCQUNLU1BBQ0VfUkVHRVgiLCJnZXRSZW1vdmFibGVXb3JkIiwibWF0Y2hlcyIsIkRyYWZ0UmVtb3ZhYmxlV29yZCIsImdldEJhY2t3YXJkIiwiZ2V0Rm9yd2FyZCIsImZpbmRBbmNlc3Rvck9mZnNldEtleSIsImdldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSIsImdldFBvaW50Rm9yTm9uVGV4dE5vZGUiLCJlZGl0b3JSb290Iiwic3RhcnROb2RlIiwiY2hpbGRPZmZzZXQiLCJFbGVtZW50IiwiY2hpbGROb2RlcyIsImZpcnN0TGVhZiIsImdldEZpcnN0TGVhZiIsIm5vZGVCZWZvcmVDdXJzb3IiLCJ0ZXh0TGVuZ3RoIiwibGFzdExlYWYiLCJsYXN0Q2hpbGQiLCJnZXRMYXN0TGVhZiIsImdldFRleHRDb250ZW50TGVuZ3RoIiwiYW5jaG9yTm9kZSIsImZvY3VzTm9kZSIsImFuY2hvcklzVGV4dE5vZGUiLCJOb2RlIiwiVEVYVF9OT0RFIiwiZm9jdXNJc1RleHROb2RlIiwibmVlZHNSZWNvdmVyeSIsImFuY2hvclBvaW50IiwiZm9jdXNQb2ludCIsImdldFJhbmdlQ2xpZW50UmVjdHMiLCJ0ZW1wUmFuZ2UiLCJjbG9uZVJhbmdlIiwiY2xpZW50UmVjdHMiLCJhbmNlc3RvciIsImVuZENvbnRhaW5lciIsImF0Q29tbW9uQW5jZXN0b3IiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsInNldFN0YXJ0Iiwic3RhcnRDb250YWluZXIiLCJyZWN0cyIsImdldENsaWVudFJlY3RzIiwic2V0RW5kQmVmb3JlIiwiYW5jaG9yUGF0aCIsImFuY2hvckJsb2NrS2V5IiwiYW5jaG9yTGVhZiIsImZvY3VzUGF0aCIsImZvY3VzQmxvY2tLZXkiLCJmb2N1c0xlYWYiLCJhbmNob3JMZWFmU3RhcnQiLCJmb2N1c0xlYWZTdGFydCIsImFuY2hvckJsb2NrT2Zmc2V0IiwiZm9jdXNCbG9ja09mZnNldCIsImFuY2hvckxlYWZFbmQiLCJmb2N1c0xlYWZFbmQiLCJnbG9iYWwiLCJURVhUX0NMSVBQSU5HX1JFR0VYIiwiVEVYVF9UWVBFUyIsInRleHQvcGxhaW4iLCJ0ZXh0L2h0bWwiLCJ0ZXh0L3J0ZiIsIlRFWFRfU0laRV9VUFBFUl9CT1VORCIsImZpbGVzIiwicmVhZENvdW50IiwicmVzdWx0cyIsImZpbGUiLCJGaWxlUmVhZGVyIiwiY29udGVudHMiLCJyZWFkZXIiLCJvbmxvYWQiLCJvbmVycm9yIiwicmVhZEFzVGV4dCIsInJlYWRGaWxlIiwiY2hpbGRPZmZzZXRLZXkiLCJQaG90b3NNaW1lVHlwZSIsImNyZWF0ZUFycmF5RnJvbU1peGVkIiwiQ1JfTEZfUkVHRVgiLCJSSUNIX1RFWFRfVFlQRVMiLCJnZXRGaWxlRnJvbURhdGFUcmFuc2ZlciIsImtpbmQiLCJnZXRBc0ZpbGUiLCJEYXRhVHJhbnNmZXIiLCJ0eXBlcyIsImlzUmljaFRleHQiLCJnZXRIVE1MIiwiaXNJbWFnZSIsImlzTGluayIsImdldExpbmsiLCJpdGVtcyIsImdldEZpbGVzIiwiZ2V0Q291bnQiLCJtb3pJdGVtQ291bnQiLCJoYXNGaWxlcyIsIl9pc1ZpZXdwb3J0U2Nyb2xsRWxlbWVudCIsIlNjcm9sbCIsImdldFRvcCIsInNjcm9sbFRvcCIsInNldFRvcCIsIm5ld1RvcCIsImdldExlZnQiLCJzY3JvbGxMZWZ0Iiwic2V0TGVmdCIsIm5ld0xlZnQiLCJEcmFmdEVkaXRvckxlYWYiLCJSZWFjdERPTSIsIlVuaWNvZGVCaWRpIiwiZ2V0RWxlbWVudFBvc2l0aW9uIiwiZ2V0U2Nyb2xsUG9zaXRpb24iLCJnZXRWaWV3cG9ydERpbWVuc2lvbnMiLCJpc0Jsb2NrT25TZWxlY3Rpb25FZGdlIiwiRHJhZnRFZGl0b3JCbG9jayIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInRyZWUiLCJmaW5kRE9NTm9kZSIsInNjcm9sbFBhcmVudCIsInNjcm9sbERlbHRhIiwibm9kZVBvc2l0aW9uIiwiaGVpZ2h0Iiwic2Nyb2xsVG8iLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXRUb3AiLCJfcmVuZGVyQ2hpbGRyZW4iLCJsYXN0TGVhZlNldCIsImhhc1NlbGVjdGlvbiIsImxlYWZTZXQiLCJsZWF2ZXNGb3JMZWFmU2V0IiwibGVhdmVzIiwibGVhZiIsImpqIiwic3R5bGVTZXQiLCJjdXN0b21TdHlsZU1hcCIsImN1c3RvbVN0eWxlRm4iLCJpc0xhc3QiLCJEZWNvcmF0b3JDb21wb25lbnQiLCJnZXRDb21wb25lbnRGb3JLZXkiLCJkZWNvcmF0b3JQcm9wcyIsImdldFByb3BzRm9yS2V5IiwiZGVjb3JhdG9yT2Zmc2V0S2V5IiwiZGVjb3JhdGVkVGV4dCIsImdldERpcmVjdGlvbiIsInB1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9ibG9jayIsInB1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9sdHIiLCJwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvcnRsIiwiZGF0YS1vZmZzZXQta2V5IiwiYmxvY2tUcmVlIiwiaXNBdFN0YXJ0IiwibGVhZlN0YXJ0IiwiQk9MRCIsIkNPREUiLCJmb250RmFtaWx5Iiwid29yZFdyYXAiLCJJVEFMSUMiLCJTVFJJS0VUSFJPVUdIIiwiVU5ERVJMSU5FIiwiUkFOR0VfQllfQklESV9UWVBFIiwiUkVHRVhfU1RST05HIiwiUkVHRVhfUlRMIiwiZmlyc3RTdHJvbmdDaGFyIiwiZmlyc3RTdHJvbmdDaGFyRGlyIiwic3Ryb25nQ2hhciIsInJlc29sdmVCbG9ja0RpciIsImZhbGxiYWNrIiwiYmxvY2tEaXIiLCJzdHJvbmdGYWxsYmFjayIsImlzRGlyZWN0aW9uTFRSIiwiaXNEaXJlY3Rpb25SVEwiLCJfRHJhZnRFbnRpdHlJbnN0YW5jZVIiLCJMZWFmUmFuZ2UiLCJEZWNvcmF0b3JSYW5nZSIsImxlYWZTZXRzIiwiZGVjb3JhdGlvbnMiLCJhcmVFcXVhbCIsImNoYXJhY3RlcnMiLCJpbmxpbmVTdHlsZXMiLCJnZXRGaW5nZXJwcmludCIsIm5leHRTaWJsaW5nS2V5IiwibmV4dE5vbkRlc2NlbmRhbnRCbG9jayIsInRhcmdldExpc3QiLCJ0b0luc2VydCIsInJlbW92ZUZvckJsb2NrIiwiY2hhckJlZm9yZSIsImNoYXJBZnRlciIsImVudGl0eUJlZm9yZUN1cnNvciIsImVudGl0eUFmdGVyQ3Vyc29yIiwiY3VycmVudCIsIl9nZXRSZW1vdmFsUmFuZ2UiLCJnZXRSZW1vdmFsUmFuZ2UiLCJ1cGRhdGVkQmxvY2tzIiwidXBkYXRlZFN0YXJ0IiwidXBkYXRlZEVuZCIsIm5ld0tleXNSZWYiLCJsYXN0Um9vdEJsb2NrIiwiYmxvY2tNYXBTdGF0ZSIsIm9sZEtleSIsIm5leHRLZXkiLCJwcmV2S2V5IiwiY2hpbGRyZW5LZXlzIiwicGFyZW50Q2hpbGRyZW5MaXN0IiwiY2hpbGRLZXkiLCJyYW5kb21pemVDb250ZW50QmxvY2tOb2RlS2V5cyIsInJhbmRvbWl6ZUNvbnRlbnRCbG9ja0tleXMiLCJjYW5Vc2VET00iLCJfZXhlbnYiLCJFRSIsIlNhZmVIVE1MRWxlbWVudCIsImFzc2VydE5vZGVMaXN0Iiwic2V0RWxlbWVudCIsInVzZUVsZW1lbnQiLCJlbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnbG9iYWxFbGVtZW50IiwidmFsaWRhdGVFbGVtZW50IiwiaGlkZSIsImFwcEVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJzaG93IiwicmVtb3ZlQXR0cmlidXRlIiwiZG9jdW1lbnROb3RSZWFkeU9yU1NSVGVzdGluZyIsInJlc2V0Rm9yVGVzdGluZyIsIm5vZGVMaXN0Iiwic2VsZWN0b3IiLCJ0YWJiYWJsZSIsInRhYmJhYmxlTm9kZSIsImhpZGVzQ29udGVudHMiLCJ6ZXJvU2l6ZSIsIm9mZnNldFdpZHRoIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJmb2N1c2FibGUiLCJpc1RhYkluZGV4Tm90TmFOIiwiZGlzYWJsZWQiLCJ2aXNpYmxlIiwidGFiSW5kZXgiLCJpc1RhYkluZGV4TmFOIiwiX01vZGFsIiwiX01vZGFsMiIsIl9IZWFkZXIiLCJfRm9vdGVyIiwiX0pvYnNQYWdlIiwiTG9naW4iLCJzdWJtaXRMb2dpbkZvcm0iLCJoYW5kbGVFbWFpbENoYW5nZSIsImhhbmRsZVBhc3N3b3JkQ2hhbmdlIiwiZW1haWwiLCJwYXNzd29yZCIsInJlc3BvbnNlRGF0YSIsInJlZGlyZWN0VG9EYXNoYm9hcmQiLCJfYXhpb3MyIiwicmVzcG9uc2VUeXBlIiwic2V0SXRlbSIsInVzZXIiLCJvblN1Ym1pdCIsImZvciIsIm9uQ2hhbmdlIiwiUmVnaXN0ZXIiLCJzdWJtaXRSZWdpc3RlckZvcm0iLCJoYW5kbGVGaXJzdE5hbWVDaGFuZ2UiLCJoYW5kbGVMYXN0TmFtZUNoYW5nZSIsImhhbmRsZVVzZXJUeXBlRW1wbG95ZWUiLCJoYW5kbGVVc2VyVHlwZUVtcGxveWVyIiwiZmlyc3RfbmFtZSIsImxhc3RfbmFtZSIsInVzZXJfdHlwZSIsIm1heGxlbmd0aCIsIkNhbmNlbCIsIl9fQ0FOQ0VMX18iLCJlbmhhbmNlRXJyb3IiLCJyZXF1ZXN0Iiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImJ0b2EiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJsb2FkRXZlbnQiLCJ4RG9tYWluIiwiWERvbWFpblJlcXVlc3QiLCJvbnByb2dyZXNzIiwib250aW1lb3V0IiwiYXV0aCIsInVzZXJuYW1lIiwiQXV0aG9yaXphdGlvbiIsIm9wZW4iLCJ0b1VwcGVyQ2FzZSIsInBhcmFtc1NlcmlhbGl6ZXIiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0IiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsInByb21pc2UiLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJuZXh0VGljayIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIlNpbmdsZUpvYiIsImF0dGFjaEV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiZ2V0Q29uZmlybWF0aW9uIiwiY29uZmlybSIsInN1cHBvcnRzSGlzdG9yeSIsInVhIiwidXNlckFnZW50Iiwic3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSIsInN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoIiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsIlJFQUNUX1NUQVRJQ1MiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImRlc2NyaXB0b3IiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwicmVzIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImVzY2FwZWQiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJvcHRzIiwicHJldHR5IiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VnbWVudCIsImoiLCJhdHRhY2hLZXlzIiwiZmxhZ3MiLCJlbmRzV2l0aERlbGltaXRlciIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJfTG9jYXRpb25VdGlscyIsIl9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIiLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsIl9wcm9wcyRrZXlMZW5ndGgiLCJ0cmFuc2l0aW9uTWFuYWdlciIsIm5leHRTdGF0ZSIsImNyZWF0ZUtleSIsIm9rIiwibmV4dEVudHJpZXMiLCJjYW5HbyIsIl9pbnZhcmlhbnQyIiwiX0RPTVV0aWxzIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwiZ2V0SGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJnbG9iYWxIaXN0b3J5IiwiY2FuR29XaXRob3V0UmVsb2FkIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiZ2V0RE9NTG9jYXRpb24iLCJmb3JjZU5leHRQb3AiLCJpZ25vcmVQYXRoIiwiaGFuZGxlSGFzaENoYW5nZSIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiaGFuZGxlUG9wIiwicmV2ZXJ0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxQYXRocyIsImZyb21JbmRleCIsImRlbHRhIiwiaW5pdGlhbExvY2F0aW9uIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwicHVzaEhhc2hQYXRoIiwicHJldkluZGV4IiwibmV4dFBhdGhzIiwiZ2V0SGlzdG9yeVN0YXRlIiwiY2FuVXNlSGlzdG9yeSIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJoYW5kbGVQb3BTdGF0ZSIsImFsbEtleXMiLCJwdXNoU3RhdGUiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsIl9yZWFjdE1vZGFsIiwiTW9kYWwiLCJzZXRBcHBFbGVtZW50IiwiTmV3Q29tcGFueU1vZGFsIiwiX3JlYWN0TW9kYWwyIiwiaXNPcGVuIiwibmV3Q29tcGFueU1vZGFsSXNPcGVuIiwiY29udGVudExhYmVsIiwib25SZXF1ZXN0Q2xvc2UiLCJjbG9zZU5ld0NvbXBhbnlNb2RhbCIsInRvcCIsImJvdHRvbSIsIndpZHRoIiwiX3JlY3RzJCIsIl9yZWN0cyQyIiwicmVjdCIsImdldFJhbmdlQm91bmRpbmdDbGllbnRSZWN0IiwicmFuZ2VDb3VudCIsImdldFJhbmdlQXQiLCJib3VuZGluZ1JlY3QiLCJyYW5nZXMiLCJzdHlsZXMiLCJjaGFyYWN0ZXJBcnJheSIsImlzTGlzdEJsb2NrIiwiRHJhZnRUcmVlQWRhcHRlciIsImZyb21SYXdUcmVlU3RhdGVUb1Jhd1N0YXRlIiwiZHJhZnRUcmVlU3RhdGUiLCJ0cmFuc2Zvcm1lZEJsb2NrcyIsIl9ibG9jayIsInRyYXZlcnNlSW5EZXB0aE9yZGVyIiwiYWRkRGVwdGhUb0NoaWxkcmVuIiwiZnJvbVJhd1N0YXRlVG9SYXdUcmVlU3RhdGUiLCJkcmFmdFN0YXRlIiwibGFzdExpc3REZXB0aENhY2hlUmVmIiwidHJlZUJsb2NrIiwiY3JlYXRlQ2hhcmFjdGVyTGlzdCIsImRlY29kZUVudGl0eVJhbmdlcyIsImRlY29kZUlubGluZVN0eWxlUmFuZ2VzIiwiZGVjb2RlQmxvY2tOb2RlQ29uZmlnIiwiZGVjb2RlQ2hhcmFjdGVyTGlzdCIsInJhd0VudGl0eVJhbmdlcyIsImVudGl0eVJhbmdlcyIsInJhd0lubGluZVN0eWxlUmFuZ2VzIiwiaW5saW5lU3R5bGVSYW5nZXMiLCJhZGRLZXlJZk1pc3NpbmciLCJ1cGRhdGVOb2RlU3RhY2siLCJwYXJlbnRSZWYiLCJub2Rlc1dpdGhQYXJlbnRSZWYiLCJkZWNvZGVSYXdCbG9ja3MiLCJyYXdTdGF0ZSIsImlzVHJlZVJhd0Jsb2NrIiwiY29udGVudEJsb2NrTm9kZSIsInNpYmxpbmdzIiwiX2luZGV4IiwiaXNWYWxpZEJsb2NrIiwiX2NoaWxkcmVuIiwiX2NvbnRlbnRCbG9ja05vZGUiLCJkZWNvZGVDb250ZW50QmxvY2tOb2RlcyIsImNvbnRlbnRCbG9jayIsImRlY29kZUNvbnRlbnRCbG9ja3MiLCJyYXdFbnRpdHlNYXAiLCJyYXdFbnRpdHlLZXkiLCJfcmF3RW50aXR5TWFwJHJhd0VudGkiLCJkZWNvZGVSYXdFbnRpdHlNYXAiLCJpc1RydXRoeSIsIkVNUFRZX0FSUkFZIiwic3R5bGVMaXN0Iiwic3R5bGVUb0VuY29kZSIsImZpbHRlcmVkSW5saW5lcyIsImdldEVuY29kZWRJbmxpbmVzRm9yVHlwZSIsInN0b3JhZ2VNYXAiLCJlbmNvZGVkIiwiTnVtYmVyIiwiZW5jb2RlRW50aXR5UmFuZ2VzIiwiZW5jb2RlSW5saW5lU3R5bGVSYW5nZXMiLCJjcmVhdGVSYXdCbG9jayIsImVudGl0eVN0b3JhZ2VNYXAiLCJlbmNvZGVSYXdCbG9ja3MiLCJibG9ja0NhY2hlUmVmIiwiZW50aXR5Q2FjaGVSZWYiLCJlbnRpdHlTdG9yYWdlS2V5Iiwic3RyaW5naWZpZWRFbnRpdHlLZXkiLCJyYXdCbG9jayIsImluc2VydFJhd0Jsb2NrIiwicmF3RHJhZnRDb250ZW50U3RhdGUiLCJlbmNvZGVSYXdFbnRpdHlNYXAiLCJEcmFmdEVkaXRvclBsYWNlaG9sZGVyIiwicHVibGljL0RyYWZ0RWRpdG9yUGxhY2Vob2xkZXIvcm9vdCIsInB1YmxpYy9EcmFmdEVkaXRvclBsYWNlaG9sZGVyL2hhc0ZvY3VzIiwiYWNjZXNzaWJpbGl0eUlEIiwid2hpdGVTcGFjZSIsImdldERyYWZ0RWRpdG9yU2VsZWN0aW9uV2l0aE5vZGVzIiwiZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb24iLCJlZGl0b3IiLCJfYmxvY2tTZWxlY3RFdmVudHMiLCJfbGF0ZXN0RWRpdG9yU3RhdGUiLCJlZGl0b3JOb2RlIiwiZWRpdG9yQ29udGFpbmVyIiwiZG9jdW1lbnRTZWxlY3Rpb24iLCJ1cGRhdGVkU2VsZWN0aW9uU3RhdGUiLCJORVdMSU5FX1JFR0VYIiwiYWRqdXN0bWVudCIsIl91cmkiLCJjb252ZXJ0RnJvbUhUTUx0b0NvbnRlbnRCbG9ja3MiLCJDb250ZW50QmxvY2tSZWNvcmQiLCJEcmFmdFBhc3RlUHJvY2Vzc29yIiwicHJvY2Vzc0hUTUwiLCJwcm9jZXNzVGV4dCIsInRleHRCbG9ja3MiLCJ0ZXh0TGluZSIsImJsb2NrTm9kZUNvbmZpZyIsInByZXZTaWJsaW5nSW5kZXgiLCJwcmV2aW91c0Jsb2NrIiwiZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uIiwiZ2V0VGV4dENvbnRlbnRGcm9tRmlsZXMiLCJpc0V2ZW50SGFuZGxlZCIsInNwbGl0VGV4dEludG9UZXh0QmxvY2tzIiwiaW5zZXJ0RnJhZ21lbnQiLCJjbGlwYm9hcmREYXRhIiwiZGVmYXVsdEZpbGVUZXh0IiwiaGFuZGxlUGFzdGVkRmlsZXMiLCJmaWxlVGV4dCIsImN1cnJlbnRCbG9ja1R5cGUiLCJ3aXRoSW5zZXJ0ZWRUZXh0IiwiaGFuZGxlUGFzdGVkVGV4dCIsInN0cmlwUGFzdGVkU3R5bGVzIiwiaW50ZXJuYWxDbGlwYm9hcmQiLCJnZXRDbGlwYm9hcmQiLCJnZXRFZGl0b3JLZXkiLCJhcmVUZXh0QmxvY2tzQW5kQ2xpcGJvYXJkRXF1YWwiLCJodG1sRnJhZ21lbnQiLCJodG1sTWFwIiwic2V0Q2xpcGJvYXJkIiwidGV4dEZyYWdtZW50IiwidGV4dE1hcCIsInVwZGF0ZUZuIiwidW5kb25lU3RhdGUiLCJmaW5hbFNlbGVjdGlvbiIsInRhcmdldE9mZnNldCIsImFmdGVySW5zZXJ0IiwibW92ZVNlbGVjdGlvbkZvcndhcmQiLCJyZW1vdmVUZXh0V2l0aFN0cmF0ZWd5Iiwic3RyYXRlZ3lTdGF0ZSIsImNoYXJBaGVhZCIsIm1vdmVTZWxlY3Rpb25CYWNrd2FyZCIsImNoYXJCZWhpbmQiLCJ0b1JlbW92ZSIsImFyZVJlY3RzT25PbmVMaW5lIiwibGluZUhlaWdodCIsIm1pblRvcCIsIm1pbkJvdHRvbSIsIm1heFRvcCIsIm1heEJvdHRvbSIsImdldE5vZGVMZW5ndGgiLCJET0NVTUVOVF9UWVBFX05PREUiLCJQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUiLCJDT01NRU5UX05PREUiLCJjb2xsYXBzZWQiLCJjb250YWluaW5nRWxlbWVudCIsImNvbXB1dGVkIiwiZGl2IiwiZm9udFNpemUiLCJwb3NpdGlvbiIsImRvY3VtZW50Qm9keSIsImFwcGVuZENoaWxkIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVtb3ZlQ2hpbGQiLCJnZXRMaW5lSGVpZ2h0UHgiLCJiZXN0Q29udGFpbmVyIiwiYmVzdE9mZnNldCIsInNldFN0YXJ0QmVmb3JlIiwiZGlzcGxheSIsImN1cnJlbnRDb250YWluZXIiLCJtYXhJbmRleFRvQ29uc2lkZXIiLCJub2RlVmFsdWUiLCJleHBhbmRSYW5nZVRvU3RhcnRPZkxpbmUiLCJjbGlwYm9hcmQiLCJTZWNvbmRhcnlDbGlwYm9hcmQiLCJjdXQiLCJibG9ja0VuZCIsInBhc3RlIiwia2V5Q29tbWFuZEJhY2tzcGFjZVRvU3RhcnRPZkxpbmUiLCJrZXlDb21tYW5kQmFja3NwYWNlV29yZCIsImtleUNvbW1hbmREZWxldGVXb3JkIiwia2V5Q29tbWFuZEluc2VydE5ld2xpbmUiLCJrZXlDb21tYW5kTW92ZVNlbGVjdGlvblRvRW5kT2ZCbG9jayIsImtleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9TdGFydE9mQmxvY2siLCJrZXlDb21tYW5kUGxhaW5CYWNrc3BhY2UiLCJrZXlDb21tYW5kUGxhaW5EZWxldGUiLCJrZXlDb21tYW5kVHJhbnNwb3NlQ2hhcmFjdGVycyIsImtleUNvbW1hbmRVbmRvIiwiaXNDaHJvbWUiLCJ3aGljaCIsImhhbmRsZVJldHVybiIsIm9uRXNjYXBlIiwib25VcEFycm93Iiwib25SaWdodEFycm93Iiwib25Eb3duQXJyb3ciLCJvbkxlZnRBcnJvdyIsImtleUJpbmRpbmdGbiIsIm5ld1N0YXRlIiwib25LZXlDb21tYW5kIiwiaXNHZWNrbyIsIkRPVUJMRV9ORVdMSU5FIiwiX3BlbmRpbmdTdGF0ZUZyb21CZWZvcmVJbnB1dCIsImRvbVNlbGVjdGlvbiIsImlzTm90VGV4dE5vZGUiLCJpc05vdFRleHRPckVsZW1lbnROb2RlIiwiRUxFTUVOVF9OT0RFIiwiZHJhZnRfa2lsbHN3aXRjaF9hbGxvd19ub250ZXh0bm9kZXMiLCJwcmV2aW91c1NpYmxpbmciLCJzcGFuIiwiZG9tVGV4dCIsIl9EcmFmdE9mZnNldEtleSRkZWNvZCIsIl9lZGl0b3JTdGF0ZSRnZXRCbG9jayIsIm1vZGVsVGV4dCIsImVuZHNXaXRoIiwicHJlc2VydmVFbnRpdHkiLCJjaGFyRGVsdGEiLCJjb250ZW50V2l0aEFkanVzdGVkRE9NU2VsZWN0aW9uIiwiY3VycmVudFNlbGVjdGlvbiIsIm9uRm9jdXMiLCJfaW50ZXJuYWxEcmFnIiwic2V0TW9kZSIsImdldEZyYWdtZW50RnJvbVNlbGVjdGlvbiIsInJlc3RvcmVFZGl0b3JET00iLCJleGl0Q3VycmVudE1vZGUiLCJyZW1vdmVGcmFnbWVudCIsIl9vbkNvbXBvc2l0aW9uU3RhcnQiLCJnZXRBY3RpdmVFbGVtZW50IiwiX3NlbGVjdGlvbiIsInJlbW92ZUFsbFJhbmdlcyIsIm9uQmx1ciIsInNldEltbWVkaWF0ZSIsInJlZ2lzdGVySW1tZWRpYXRlIiwiY2hhbm5lbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImF0dGFjaFRvIiwiaGFuZGxlIiwicnVuSWZQcmVzZW50IiwicG9zdE1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsIm9ubWVzc2FnZSIsImNhblVzZVBvc3RNZXNzYWdlIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MSIsInBvcnQyIiwic2NyaXB0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwidGFzayIsImNsZWFySW1tZWRpYXRlIiwiaXNTZWxlY3Rpb25BdExlYWZTdGFydCIsIkZGX1FVSUNLRklORF9DSEFSIiwiRkZfUVVJQ0tGSU5EX0xJTktfQ0hBUiIsImlzRmlyZWZveCIsImhhbmRsZUJlZm9yZUlucHV0Iiwic2VsZWN0aW9uRW5kIiwibXVzdFByZXZlbnROYXRpdmUiLCJfbGF0ZXN0Q29tbWl0dGVkRWRpdG9yU3RhdGUiLCJuYXRpdmVTZWxlY3Rpb24iLCJEcmFmdEVkaXRvckVkaXRIYW5kbGVyIiwib25CZWZvcmVJbnB1dCIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29weSIsIm9uQ3V0Iiwib25EcmFnT3ZlciIsIm9uRHJhZ1N0YXJ0Iiwib25JbnB1dCIsIm9uS2V5RG93biIsIm9uUGFzdGUiLCJvblNlbGVjdCIsImhhc0FycmF5TmF0dXJlIiwicmV0IiwibWltZVN0cmluZyIsImdldFBhcnRzIiwiaXNKcGVnIiwiRHJhZnRFZGl0b3JEcmFnSGFuZGxlciIsIm9uRHJhZ0VuZCIsIm9uRHJvcCIsIm5hdGl2ZUV2ZW50IiwiZGF0YVRyYW5zZmVyIiwiZHJvcFNlbGVjdGlvbiIsImNhcmV0UmFuZ2VGcm9tUG9pbnQiLCJkcm9wUmFuZ2UiLCJyYW5nZVBhcmVudCIsInJhbmdlT2Zmc2V0IiwiZ2V0U2VsZWN0aW9uRm9yRXZlbnQiLCJoYW5kbGVEcm9wcGVkRmlsZXMiLCJpbnNlcnRUZXh0QXRTZWxlY3Rpb24iLCJkcmFnVHlwZSIsImhhbmRsZURyb3AiLCJuZXdDb250ZW50U3RhdGUiLCJuZXh0Q2xhc3MiLCJhcmdMZW5ndGgiLCJnZXRWaWV3cG9ydFdpZHRoIiwiZ2V0Vmlld3BvcnRIZWlnaHQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJ3aXRob3V0U2Nyb2xsYmFycyIsInBhZ2VYT2Zmc2V0IiwicGFnZVlPZmZzZXQiLCJpc1dlYmtpdCIsInNjcm9sbGluZ0VsZW1lbnQiLCJjb21wYXRNb2RlIiwiZWxlbSIsImRvY0VsZW0iLCJyb3VuZCIsImNsaWVudExlZnQiLCJjbGllbnRUb3AiLCJnZXRFbGVtZW50UmVjdCIsIl91cHBlcmNhc2VQYXR0ZXJuIiwiX2h5cGhlblBhdHRlcm4iLCJjYW1lbGl6ZSIsImh5cGhlbmF0ZSIsImFzU3RyaW5nIiwiY29tcHV0ZWRTdHlsZSIsImNzc0Zsb2F0Iiwic3R5bGVGbG9hdCIsImxvZ1NlbGVjdGlvblN0YXRlRmFpbHVyZSIsIkRyYWZ0SnNEZWJ1Z0xvZ2dpbmciLCJnZXRBbm9ueW1pemVkRE9NIiwiZ2V0Tm9kZUxhYmVscyIsImFub255bWl6ZWQiLCJhbm9ueW1pemVUZXh0V2l0aGluIiwibGFiZWxzIiwiY3JlYXRlVGV4dE5vZGUiLCJjbG9uZSIsImNsb25lTm9kZSIsIm91dGVySFRNTCIsImdldEFub255bWl6ZWRFZGl0b3JET00iLCJjdXJyZW50Tm9kZSIsImhhc0F0dHJpYnV0ZSIsImFkZEZvY3VzVG9TZWxlY3Rpb24iLCJhbm9ueW1pemVkRG9tIiwiZXh0cmFQYXJhbXMiLCJub2RlV2FzRm9jdXMiLCJhY3RpdmVFbGVtZW50TmFtZSIsIm5vZGVJc0ZvY3VzIiwic2VsZWN0aW9uUmFuZ2VDb3VudCIsInNlbGVjdGlvbkFuY2hvck5vZGVOYW1lIiwic2VsZWN0aW9uQW5jaG9yT2Zmc2V0Iiwic2VsZWN0aW9uRm9jdXNOb2RlTmFtZSIsInNlbGVjdGlvbkZvY3VzT2Zmc2V0Iiwic2V0RW5kIiwiYWRkUmFuZ2UiLCJhZGRQb2ludFRvU2VsZWN0aW9uIiwiY3JlYXRlUmFuZ2UiLCJub2RlU3RhcnQiLCJub2RlRW5kIiwidGVtcEtleSIsInRlbXBPZmZzZXQiLCJoYXNBbmNob3IiLCJzdG9yZWRGb2N1c05vZGUiLCJzdG9yZWRGb2N1c09mZnNldCIsImNvbXBvbmVudFJlZ2V4Iiwib3JSZWdleCIsInJhbmdlUmVnZXgiLCJtb2RpZmllclJlZ2V4IiwibnVtZXJpY1JlZ2V4IiwiY2hlY2tPckV4cHJlc3Npb24iLCJleHByZXNzaW9ucyIsImNoZWNrU2ltcGxlRXhwcmVzc2lvbiIsInN0YXJ0VmVyc2lvbiIsImVuZFZlcnNpb24iLCJpc1NpbXBsZVZlcnNpb24iLCJjaGVja1JhbmdlRXhwcmVzc2lvbiIsInZlcnNpb25Db21wb25lbnRzIiwiX2dldE1vZGlmaWVyQW5kQ29tcG9uIiwiZ2V0TW9kaWZpZXJBbmRDb21wb25lbnRzIiwicmFuZ2VDb21wb25lbnRzIiwiY2hlY2tMZXNzVGhhbiIsImNvbXBhcmVDb21wb25lbnRzIiwiY2hlY2tHcmVhdGVyVGhhbk9yRXF1YWwiLCJjaGVja0dyZWF0ZXJUaGFuIiwibGFzdEluZGV4IiwibnVtZXJpYyIsImNoZWNrQXBwcm94aW1hdGVWZXJzaW9uIiwiY2hlY2tFcXVhbCIsImlzRmluaXRlIiwiemVyb1BhZCIsImNvbXBhcmVOdW1lcmljIiwiYVByZWZpeCIsImJQcmVmaXgiLCJhTnVtZXJpYyIsImJOdW1lcmljIiwiX25vcm1hbGl6ZVZlcnNpb25zIiwibm9ybWFsaXplVmVyc2lvbnMiLCJhTm9ybWFsaXplZCIsImJOb3JtYWxpemVkIiwiX193ZWJwYWNrX2FtZF9vcHRpb25zX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsIk1PREVMIiwiTkFNRSIsIlRZUEUiLCJWRU5ET1IiLCJWRVJTSU9OIiwiTU9CSUxFIiwiVEFCTEVUIiwidXRpbCIsInJlZ2V4ZXMiLCJleHRlbnNpb25zIiwibWFyZ2VkUmVnZXhlcyIsInN0cjEiLCJzdHIyIiwibG93ZXJpemUiLCJtYWpvciIsInJneCIsImFycmF5cyIsInEiLCJyZWdleCIsIm1hcHMiLCJvbGRzYWZhcmkiLCIxLjAiLCIxLjIiLCIxLjMiLCIyLjAiLCIyLjAuMiIsIjIuMC4zIiwiMi4wLjQiLCI/IiwiZGV2aWNlIiwiYW1hem9uIiwibW9kZWwiLCJGaXJlIFBob25lIiwic3ByaW50IiwiRXZvIFNoaWZ0IDRHIiwidmVuZG9yIiwiSFRDIiwiU3ByaW50Iiwib3MiLCJ3aW5kb3dzIiwiTUUiLCJOVCAzLjExIiwiTlQgNC4wIiwiMjAwMCIsIlhQIiwiVmlzdGEiLCI3IiwiOCIsIjguMSIsIjEwIiwiUlQiLCJjcHUiLCJlbmdpbmUiLCJVQVBhcnNlciIsInVhc3RyaW5nIiwiZ2V0UmVzdWx0Iiwicmd4bWFwIiwiZ2V0QnJvd3NlciIsImdldENQVSIsImFyY2hpdGVjdHVyZSIsImdldERldmljZSIsImdldEVuZ2luZSIsImdldE9TIiwiZ2V0VUEiLCJzZXRVQSIsIkJST1dTRVIiLCJNQUpPUiIsIkNQVSIsIkFSQ0hJVEVDVFVSRSIsIkRFVklDRSIsIkNPTlNPTEUiLCJTTUFSVFRWIiwiV0VBUkFCTEUiLCJFTUJFRERFRCIsIkVOR0lORSIsIk9TIiwiJCIsImpRdWVyeSIsIlplcHRvIiwicGFyc2VyIiwicHJvcCIsIlVOS05PV04iLCJQTEFURk9STV9NQVAiLCJNYWMgT1MiLCJicm93c2VyVmVyc2lvbkRhdGEiLCJtaW5vciIsImdldEJyb3dzZXJWZXJzaW9uIiwidWFEYXRhIiwiYnJvd3Nlck1pbm9yVmVyc2lvbiIsImJyb3dzZXJWZXJzaW9uIiwicGxhdGZvcm1WZXJzaW9uIiwidXNlTmV3bGluZUNoYXIiLCJORVdMSU5FX0EiLCJkYXRhLXRleHQiLCJORVdMSU5FX0IiLCJEcmFmdEVkaXRvclRleHROb2RlIiwiX2ZvcmNlRmxhZyIsInNob3VsZEJlTmV3bGluZSIsInRhZ05hbWUiLCJpc05ld2xpbmUiLCJzZXREcmFmdEVkaXRvclNlbGVjdGlvbiIsIl9zZXRTZWxlY3Rpb24iLCJ0YXJnZXROb2RlIiwibGVhZk5vZGUiLCJfcHJvcHMyIiwic3R5bGVPYmoiLCJzdHlsZU5hbWUiLCJtZXJnZWRTdHlsZXMiLCJuZXdTdHlsZXMiLCJqb2luQ2xhc3NlcyIsImdldExpc3RJdGVtQ2xhc3NlcyIsInNob3VsZFJlc2V0Q291bnQiLCJwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvdW5vcmRlcmVkTGlzdEl0ZW0iLCJwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvb3JkZXJlZExpc3RJdGVtIiwicHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L3Jlc2V0IiwicHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2RlcHRoMCIsInB1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9kZXB0aDEiLCJwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvZGVwdGgyIiwicHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2RlcHRoMyIsInB1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9kZXB0aDQiLCJwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvbGlzdExUUiIsInB1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9saXN0UlRMIiwiRHJhZnRFZGl0b3JDb250ZW50cyIsInByZXZFZGl0b3JTdGF0ZSIsIm5leHRFZGl0b3JTdGF0ZSIsIm5leHROYXRpdmVDb250ZW50Iiwid2FzQ29tcG9zaW5nIiwibm93Q29tcG9zaW5nIiwicHJldkNvbnRlbnQiLCJuZXh0Q29udGVudCIsInByZXZEZWNvcmF0b3IiLCJuZXh0RGVjb3JhdG9yIiwiYmxvY2tSZW5kZXJlckZuIiwiYmxvY2tTdHlsZUZuIiwiZWRpdG9yS2V5IiwidGV4dERpcmVjdGlvbmFsaXR5IiwiYmxvY2tzQXNBcnJheSIsInByb2Nlc3NlZEJsb2NrcyIsImxhc3RXcmFwcGVyVGVtcGxhdGUiLCJjdXN0b21SZW5kZXJlciIsIkN1c3RvbUNvbXBvbmVudCIsImN1c3RvbVByb3BzIiwiY3VzdG9tRWRpdGFibGUiLCJjb21wb25lbnRQcm9wcyIsImJsb2NrUHJvcHMiLCJjb25maWdGb3JUeXBlIiwid3JhcHBlclRlbXBsYXRlIiwiY2hpbGRQcm9wcyIsImRhdGEtYmxvY2siLCJkYXRhLWVkaXRvciIsImNvbnRlbnRFZGl0YWJsZSIsInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyIsIm91dHB1dEJsb2NrcyIsIl9paSIsImluZm8iLCJ3cmFwcGVyRWxlbWVudCIsImRhdGEtY29udGVudHMiLCJyZXNvbHZlZCIsInN0aWxsQ29tcG9zaW5nIiwidGV4dElucHV0RGF0YSIsIkRyYWZ0RWRpdG9yQ29tcG9zaXRpb25IYW5kbGVyIiwib25Db21wb3NpdGlvbkVuZCIsInJlc29sdmVDb21wb3NpdGlvbiIsIl9vbktleURvd24iLCJvbktleVByZXNzIiwiY29tcG9zZWRDaGFycyIsIm11c3RSZXNldCIsImRyYWZ0X2hhbmRsZWJlZm9yZWlucHV0X2NvbXBvc2VkX3RleHQiLCJEZWZhdWx0RHJhZnRJbmxpbmVTdHlsZSIsImdldERlZmF1bHRLZXlCaW5kaW5nIiwiaXNJRSIsImFsbG93U3BlbGxDaGVjayIsImhhbmRsZXJNYXAiLCJlZGl0IiwiY29tcG9zaXRlIiwiZHJhZyIsIkRyYWZ0RWRpdG9yIiwiZm9jdXMiLCJhbHJlYWR5SGFzRm9jdXMiLCJibHVyIiwibW9kZSIsIl9oYW5kbGVyIiwiY29udGVudHNLZXkiLCJfY2xpcGJvYXJkIiwib25EcmFnRW50ZXIiLCJfZHJhZ0NvdW50Iiwib25EcmFnTGVhdmUiLCJfZWRpdG9yS2V5IiwiX3BsYWNlaG9sZGVyQWNjZXNzaWJpbGl0eUlEIiwiX29uQmVmb3JlSW5wdXQiLCJfYnVpbGRIYW5kbGVyIiwiX29uQmx1ciIsIl9vbkNoYXJhY3RlckRhdGEiLCJfb25Db21wb3NpdGlvbkVuZCIsIl9vbkNvcHkiLCJfb25DdXQiLCJfb25EcmFnRW5kIiwiX29uRHJhZ092ZXIiLCJfb25EcmFnU3RhcnQiLCJfb25Ecm9wIiwiX29uSW5wdXQiLCJfb25Gb2N1cyIsIl9vbktleVByZXNzIiwiX29uS2V5VXAiLCJfb25Nb3VzZURvd24iLCJfb25Nb3VzZVVwIiwiX29uUGFzdGUiLCJfb25TZWxlY3QiLCJldmVudE5hbWUiLCJyZWFkT25seSIsIl9zaG93UGxhY2Vob2xkZXIiLCJwbGFjZWhvbGRlciIsIl9yZW5kZXJQbGFjZWhvbGRlciIsInBsYWNlSG9sZGVyUHJvcHMiLCJ0ZXh0QWxpZ25tZW50IiwiX3RoaXMzIiwicm9vdENsYXNzIiwiRHJhZnRFZGl0b3Ivcm9vdCIsIkRyYWZ0RWRpdG9yL2FsaWduTGVmdCIsIkRyYWZ0RWRpdG9yL2FsaWduUmlnaHQiLCJEcmFmdEVkaXRvci9hbGlnbkNlbnRlciIsImFyaWFSb2xlIiwicm9sZSIsImFyaWFFeHBhbmRlZCIsImVkaXRvckNvbnRlbnRzUHJvcHMiLCJfcmVmMyIsImFyaWEtYWN0aXZlZGVzY2VuZGFudCIsImFyaWFBY3RpdmVEZXNjZW5kYW50SUQiLCJhcmlhLWF1dG9jb21wbGV0ZSIsImFyaWFBdXRvQ29tcGxldGUiLCJhcmlhLWNvbnRyb2xzIiwiYXJpYUNvbnRyb2xzIiwiYXJpYS1kZXNjcmliZWRieSIsImFyaWFEZXNjcmliZWRCeSIsImFyaWEtZXhwYW5kZWQiLCJhcmlhLWxhYmVsIiwiYXJpYUxhYmVsIiwiYXJpYS1sYWJlbGxlZGJ5IiwiYXJpYUxhYmVsbGVkQnkiLCJhcmlhLW11bHRpbGluZSIsImFyaWFNdWx0aWxpbmUiLCJhdXRvQ2FwaXRhbGl6ZSIsImF1dG9Db21wbGV0ZSIsImF1dG9Db3JyZWN0Iiwibm90cmFuc2xhdGUiLCJwdWJsaWMvRHJhZnRFZGl0b3IvY29udGVudCIsImRhdGEtdGVzdGlkIiwid2ViRHJpdmVyVGVzdElEIiwib25LZXlVcCIsIm9uTW91c2VVcCIsInNwZWxsQ2hlY2siLCJvdXRsaW5lIiwidXNlclNlbGVjdCIsIldlYmtpdFVzZXJTZWxlY3QiLCJleGVjQ29tbWFuZCIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJDb21wb3NpdGVEcmFmdERlY29yYXRvciIsImRlY29yYXRvcnMiLCJfZGVjb3JhdG9ycyIsImNvdW50ZXIiLCJjYW5PY2N1cHlTbGljZSIsInRhcmdldEFyciIsImNvbXBvbmVudEtleSIsIm9jY3VweVNsaWNlIiwiZ2V0TmV4dERlbGltaXRlckJsb2NrS2V5IiwidHJhbnNmb3JtQmxvY2siLCJibG9ja1RvQmVNb3ZlZCIsInRhcmdldEJsb2NrIiwiaW5zZXJ0aW9uTW9kZSIsInRhcmdldEtleSIsImlzRXhwZXJpbWVudGFsVHJlZUJsb2NrIiwiYmxvY2tzVG9CZU1vdmVkIiwiYmxvY2tNYXBXaXRob3V0QmxvY2tzVG9CZU1vdmVkIiwibmV4dERlbGltaXRlckJsb2NrS2V5IiwiaXNCbG9ja1RvQmVNb3ZlZCIsImhhc05leHRTaWJsaW5nQW5kSXNOb3ROZXh0U2libGluZyIsImRvZXNOb3RIYXZlTmV4dFNpYmxpbmdBbmRJc05vdERlbGltaXRlciIsImJsb2Nrc0JlZm9yZSIsImJsb2Nrc0FmdGVyIiwic2xpY2VkQmxvY2tzIiwibmV3QmxvY2tzIiwib3JpZ2luYWxCbG9ja1RvQmVNb3ZlZCIsIm9yaWdpbmFsVGFyZ2V0QmxvY2siLCJpc0luc2VydGVkQWZ0ZXJUYXJnZXQiLCJvcmlnaW5hbEJsb2NrS2V5Iiwib3JpZ2luYWxUYXJnZXRLZXkiLCJvcmlnaW5hbFBhcmVudEtleSIsIm9yaWdpbmFsTmV4dFNpYmxpbmdLZXkiLCJvcmlnaW5hbFByZXZTaWJsaW5nS2V5IiwibmV3UGFyZW50S2V5IiwibmV3TmV4dFNpYmxpbmdLZXkiLCJuZXdQcmV2U2libGluZ0tleSIsIm5ld1BhcmVudENoaWxkcmVuTGlzdCIsInRhcmdldEJsb2NrSW5kZXgiLCJpbnNlcnRpb25JbmRleCIsIm5ld0NoaWxkcmVuQXJyYXkiLCJ1cGRhdGVCbG9ja01hcExpbmtzIiwiVW5pY29kZUJpZGlTZXJ2aWNlIiwiZGVmYXVsdERpciIsIl9kZWZhdWx0RGlyIiwicmVzZXQiLCJfbGFzdERpciIsImJpZGlTZXJ2aWNlIiwicHJldkJpZGlNYXAiLCJuZXh0QmlkaSIsImJpZGlNYXAiLCJibG9ja1RvU3BsaXQiLCJrZXlCZWxvdyIsImJsb2NrQmVsb3ciLCJvcmlnaW5hbEJsb2NrIiwiYmVsb3dCbG9jayIsImJlbG93QmxvY2tLZXkiLCJnZXRBbmNlc3RvcnNLZXlzIiwicGFyZW50cyIsImdldE5leHRWYWxpZFNpYmxpbmciLCJvcmlnaW5hbEJsb2NrTWFwIiwibmV4dFZhbGlkU2libGluZ0tleSIsImdldFByZXZWYWxpZFNpYmxpbmciLCJwcmV2VmFsaWRTaWJsaW5nS2V5IiwibmV4dERlbGltaXRlcnMiLCJuZXh0RGVsaW1pdGVyIiwiZ2V0TmV4dERlbGltaXRlcnNCbG9ja0tleXMiLCJkZWxpbWl0ZXJLZXkiLCJyZW1vdmVGcm9tTGlzdCIsInBhcmVudEFuY2VzdG9ycyIsImVuZEJsb2NrY2hpbGRyZW5LZXlzIiwiZW5kQmxvY2tBbmNlc3RvcnMiLCJtb2RpZmllZFN0YXJ0IiwidXBkYXRlZEJsb2NrTWFwIiwib3BlcmF0aW9uIiwiaW5zZXJ0SW50b0xpc3QiLCJjaGFyYWN0ZXJNZXRhZGF0YSIsImJsb2NrVGV4dCIsIm5ld09mZnNldCIsImlzVHJlZUJhc2VkQmxvY2tNYXAiLCJuZXdCbG9ja0FyciIsImZyYWdtZW50U2l6ZSIsImZpbmFsT2Zmc2V0IiwiZmluYWxLZXkiLCJzaG91bGROb3RVcGRhdGVGcm9tRnJhZ21lbnRCbG9jayIsImhlYWRUZXh0IiwiaGVhZENoYXJhY3RlcnMiLCJhcHBlbmRUb0hlYWQiLCJ1cGRhdGVIZWFkIiwiZnJhZ21lbnRCbG9jayIsImJsb2NrU2l6ZSIsInRhaWxUZXh0IiwidGFpbENoYXJhY3RlcnMiLCJwcmVwZW5kVG9UYWlsIiwidXBkYXRlVGFpbCIsImZyYWdtZW50SGVhZEJsb2NrIiwiaGVhZEtleSIsInRhcmdldE5leHRLZXkiLCJ0YXJnZXRQYXJlbnRLZXkiLCJmcmFnbWVudFJvb3RCbG9ja3MiLCJyb290QmxvY2siLCJyb290QmxvY2tzIiwibGFzdFNpYmxpbmdLZXkiLCJnZXRSb290QmxvY2tzIiwibGFzdFJvb3RGcmFnbWVudEJsb2NrS2V5Iiwib3JpZ2luYWxUYXJnZXRQYXJlbnRDaGlsZEtleXMiLCJuZXdDaGlsZHJlbktleXNBcnJheSIsImZyYWdtZW50QmxvY2tNYXAiLCJ1cGRhdGVFeGlzdGluZ0Jsb2NrIiwiZW50aXR5U3RhcnQiLCJzZWdtZW50cyIsInNlZ21lbnRFbmQiLCJzZWdtZW50U3RhcnQiLCJyZW1vdmFsU3RhcnQiLCJyZW1vdmFsRW5kIiwiZW50aXR5RW5kIiwiYXRTdGFydCIsImF0RW5kIiwiRHJhZnRFbnRpdHlTZWdtZW50cyIsImdldFJhbmdlc0ZvckRyYWZ0RW50aXR5IiwiZ2V0RW50aXR5UmVtb3ZhbFJhbmdlIiwiaXNFbnRpcmVTZWxlY3Rpb25XaXRoaW5FbnRpdHkiLCJpc0VudGl0eUF0U3RhcnQiLCJzaWRlVG9Db25zaWRlciIsImVudGl0eVJhbmdlIiwibmV3U2VsZWN0aW9uU3RhdGUiLCJzdGFydFNlbGVjdGlvblN0YXRlIiwiZW5kU2VsZWN0aW9uU3RhdGUiLCJfc3RhcnRTZWxlY3Rpb25TdGF0ZSIsIl9lbmRTZWxlY3Rpb25TdGF0ZSIsImFwcGx5RW50aXR5VG9Db250ZW50QmxvY2siLCJzbGljZVN0YXJ0Iiwic2xpY2VFbmQiLCJtb2RpZnlJbmxpbmVTdHlsZSIsImFkZE9yUmVtb3ZlIiwibW92ZUJsb2NrSW5Db250ZW50U3RhdGUiLCJBdG9taWNCbG9ja1V0aWxzIiwiaW5zZXJ0QXRvbWljQmxvY2siLCJhZnRlclNwbGl0IiwiaW5zZXJ0aW9uVGFyZ2V0IiwiYXNBdG9taWNCbG9jayIsImNoYXJEYXRhIiwiYXRvbWljQmxvY2tDb25maWciLCJhdG9taWNEaXZpZGVyQmxvY2tDb25maWciLCJmcmFnbWVudEFycmF5Iiwid2l0aEF0b21pY0Jsb2NrIiwibW92ZUF0b21pY0Jsb2NrIiwiYXRvbWljQmxvY2siLCJ3aXRoTW92ZWRBdG9taWNCbG9jayIsInNlbGVjdGlvbkFmdGVyUmVtb3ZhbCIsIl90YXJnZXRCbG9jayIsInNlbGVjdGlvbkFmdGVyU3BsaXQiLCJfdGFyZ2V0QmxvY2syIiwiY29udmVydEZyb21EcmFmdFN0YXRlVG9SYXciLCJEcmFmdFB1YmxpYyIsIkVkaXRvciIsIkVkaXRvckJsb2NrIiwiQ29tcG9zaXRlRGVjb3JhdG9yIiwiRW50aXR5IiwiRW50aXR5SW5zdGFuY2UiLCJNb2RpZmllciIsIlJpY2hVdGlscyIsImNvbnZlcnRGcm9tSFRNTCIsImNvbnZlcnRGcm9tUmF3IiwiY29udmVydFRvUmF3IiwiZ2VuS2V5IiwiZ2V0VmlzaWJsZVNlbGVjdGlvblJlY3QiLCJwcmV2U3RhdGUiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWciLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdCIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwicG9seWZpbGwiLCJpc1JlYWN0Q29tcG9uZW50IiwiZm91bmRXaWxsTW91bnROYW1lIiwiZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSIsImZvdW5kV2lsbFVwZGF0ZU5hbWUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudE5hbWUiLCJuZXdBcGlOYW1lIiwibWF5YmVTbmFwc2hvdCIsInNuYXBzaG90IiwiX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJkdW1wQ2xhc3NMaXN0cyIsImh0bWxDbGFzc0xpc3QiLCJkb2NCb2R5Q2xhc3NMaXN0IiwiY2xhc3NTdHJpbmciLCJjbGFzc0xpc3RSZWYiLCJwb2xsIiwiaW5jcmVtZW50UmVmZXJlbmNlIiwiZGVjcmVtZW50UmVmZXJlbmNlIiwiX3RhYmJhYmxlMiIsImNoZWNrU2FmYXJpIiwiX3RhYmJhYmxlIiwiaGFuZGxlQmx1ciIsImhhbmRsZUZvY3VzIiwibWFya0ZvckZvY3VzTGF0ZXIiLCJmb2N1c0xhdGVyRWxlbWVudHMiLCJyZXR1cm5Gb2N1cyIsInRvRm9jdXMiLCJwb3BXaXRob3V0Rm9jdXMiLCJzZXR1cFNjb3BlZEZvY3VzIiwibW9kYWxFbGVtZW50IiwidGVhcmRvd25TY29wZWRGb2N1cyIsIm5lZWRUb0ZvY3VzIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9wcm9wVHlwZXMyIiwiZm9jdXNNYW5hZ2VyIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfc2NvcGVUYWIyIiwiYXJpYUFwcEhpZGVyIiwiX3NhZmVIVE1MRWxlbWVudDIiLCJuZXdPYmoiLCJDTEFTU19OQU1FUyIsIm92ZXJsYXkiLCJUQUJfS0VZIiwiRVNDX0tFWSIsImFyaWFIaWRkZW5JbnN0YW5jZXMiLCJNb2RhbFBvcnRhbCIsIl9Db21wb25lbnQiLCJzZXRPdmVybGF5UmVmIiwib3ZlcmxheVJlZiIsInNldENvbnRlbnRSZWYiLCJjb250ZW50UmVmIiwiYWZ0ZXJDbG9zZSIsImFyaWFIaWRlQXBwIiwiaHRtbE9wZW5DbGFzc05hbWUiLCJib2R5T3BlbkNsYXNzTmFtZSIsInNob3VsZEZvY3VzQWZ0ZXJSZW5kZXIiLCJzaG91bGRSZXR1cm5Gb2N1c0FmdGVyQ2xvc2UiLCJiZWZvcmVPcGVuIiwiYWZ0ZXJPcGVuIiwiYmVmb3JlQ2xvc2UiLCJjbG9zZVRpbWVyIiwib25BZnRlck9wZW4iLCJjbG9zZSIsImNsb3NlVGltZW91dE1TIiwiY2xvc2VXaXRoVGltZW91dCIsImNsb3NlV2l0aG91dFRpbWVvdXQiLCJmb2N1c0NvbnRlbnQiLCJjb250ZW50SGFzRm9jdXMiLCJjbG9zZXNBdCIsIkRhdGUiLCJub3ciLCJoYW5kbGVLZXlEb3duIiwic2hvdWxkQ2xvc2VPbkVzYyIsInN0b3BQcm9wYWdhdGlvbiIsInJlcXVlc3RDbG9zZSIsImhhbmRsZU92ZXJsYXlPbkNsaWNrIiwic2hvdWxkQ2xvc2UiLCJzaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrIiwib3duZXJIYW5kbGVzQ2xvc2UiLCJoYW5kbGVDb250ZW50T25Nb3VzZVVwIiwiaGFuZGxlT3ZlcmxheU9uTW91c2VEb3duIiwiaGFuZGxlQ29udGVudE9uQ2xpY2siLCJoYW5kbGVDb250ZW50T25Nb3VzZURvd24iLCJzaG91bGRCZUNsb3NlZCIsImJ1aWxkQ2xhc3NOYW1lIiwiYWRkaXRpb25hbCIsImFyaWFBdHRyaWJ1dGVzIiwibW92ZUZyb21Db250ZW50VG9PdmVybGF5Iiwib3ZlcmxheUNsYXNzTmFtZSIsImRlZmF1bHRTdHlsZXMiLCJjb250ZW50U3R5bGVzIiwib3ZlcmxheVN0eWxlcyIsIm9uTW91c2VEb3duIiwiYXJpYS1tb2RhbCIsImFyaWEiLCJ0ZXN0SWQiLCJpbnN0YW5jZU9mIiwicG9ydGFsQ2xhc3NOYW1lIiwiX3JlYWN0RG9tMiIsIl9Nb2RhbFBvcnRhbDIiLCJfc2FmZUhUTUxFbGVtZW50IiwiX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCIsImlzUmVhY3QxNiIsImNyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiZ2V0UGFyZW50RWxlbWVudCIsInBhcmVudFNlbGVjdG9yIiwicmVtb3ZlUG9ydGFsIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInBvcnRhbFJlZiIsInBvcnRhbCIsInJlbmRlclBvcnRhbCIsInByZXZQYXJlbnQiLCJuZXh0UGFyZW50IiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwiYmFja2dyb3VuZCIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwiYm9yZGVyUmFkaXVzIiwicGFkZGluZyIsIl9kcmFmdEpzIiwiSm9iRWRpdE1vZGFsIiwiY2xvc2VKb2JNb2RhbCIsIk15RWRpdG9yIiwiX0pvYkVkaXRNb2RhbCIsIlNpbmdsZURhc2hib2FyZEpvYiIsIm9wZW5Kb2JNb2RhbCIsIl9Kb2JFZGl0TW9kYWwyIiwiX1NpbmdsZURhc2hib2FyZEpvYiIsIkNvbXBhbnkiLCJfU2luZ2xlRGFzaGJvYXJkSm9iMiIsIl9Db21wYW55IiwiX05ld0NvbXBhbnlNb2RhbCIsIkNvbXBhbmllc1NlY3Rpb24iLCJjcmVhdGVOZXdDb21wYW55IiwiY29tcGFuaWVzIiwiY29tcGFueSIsIl9Db21wYW55MiIsIl9OZXdDb21wYW55TW9kYWwyIiwiX0NvbXBhbmllc1NlY3Rpb24iLCJFbXBsb3llckRhc2hib2FyZCIsImhhbmRsZUxvZ091dCIsInJlZGlyZWN0VG9Ib21lIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJyZXR1cm5lZFJlc3BvbnNlIiwiX0hlYWRlcjIiLCJfQ29tcGFuaWVzU2VjdGlvbjIiLCJfRm9vdGVyMiIsIkVtcGxveWVlRGFzaGJvYXJkIiwiX0xvZ2luIiwiX1JlZ2lzdGVyIiwiTXlBY2NvdW50Iiwic2hvd0xvZ2luIiwic2hvd1JlZ2lzdGVyIiwic2hvd1RhYiIsIl9Mb2dpbjIiLCJfUmVnaXN0ZXIyIiwiQ29udGFjdCIsIkFib3V0IiwiSG9tZSIsIl9Kb2JzUGFnZTIiLCJKb2JQb3N0IiwiQ2FuY2VsVG9rZW4iLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwicmVhc29uIiwidGhyb3dJZlJlcXVlc3RlZCIsImJhc2VVUkwiLCJyZWxhdGl2ZVVSTCIsImZucyIsInRyYW5zZm9ybURhdGEiLCJpc0NhbmNlbCIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJoYW5kbGVycyIsInVzZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiZWplY3QiLCJ3cml0ZSIsImV4cGlyZXMiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsIkUiLCJjaGFyQ29kZSIsIm91dHB1dCIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJob3N0IiwiaG9zdG5hbWUiLCJwb3J0IiwicmVxdWVzdFVSTCIsInBhcnNlZCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwibGluZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJ0b0lTT1N0cmluZyIsIm5vcm1hbGl6ZWROYW1lIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiQXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsImludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwicmVhZEZsb2F0TEUiLCJpc1Nsb3dCdWZmZXIiLCJfaXNCdWZmZXIiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImNsYXNzQ2FsbENoZWNrIiwidCIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJBcHBDb250YWluZXIiLCJpbmhlcml0cyIsImhvdCIsImFyZUNvbXBvbmVudHNFcXVhbCIsInNldENvbmZpZyIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0Iiwic2hpbSIsInByb3BOYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsIm9iamVjdE9mIiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJBcHBSb3V0ZXIiLCJOb3RGb3VuZFBhZ2UiLCJpc05vZGUiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJpc0luV29ya2VyIiwiYmEiLCJlYSIsImZhIiwiaGEiLCJqYSIsImthIiwiRCIsIl9jYXVnaHRFcnJvciIsIl9oYXNDYXVnaHRFcnJvciIsIl9yZXRocm93RXJyb3IiLCJfaGFzUmV0aHJvd0Vycm9yIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yIiwiaGFzQ2F1Z2h0RXJyb3IiLCJjbGVhckNhdWdodEVycm9yIiwicmV0aHJvd0NhdWdodEVycm9yIiwib2EiLCJwYSIsInFhIiwicmEiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInNhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJ0YSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ2YSIsImRlcGVuZGVuY2llcyIsIndhIiwieGEiLCJDYSIsImZyZWV6ZSIsInBsdWdpbnMiLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiY3VycmVudFRhcmdldCIsIkhhIiwiSWEiLCJKYSIsIkthIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJzdGF0ZU5vZGUiLCJQYSIsIlFhIiwiUmEiLCJpbmplY3Rpb24iLCJnZXRMaXN0ZW5lciIsInJ1bkV2ZW50c0luQmF0Y2giLCJydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoIiwiU2EiLCJGIiwiVGEiLCJVYSIsIlZhIiwiWGEiLCJiYiIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwiTCIsImNiIiwiZGIiLCJkaXNwYXRjaENvbmZpZyIsImViIiwiX3RhcmdldEluc3QiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwiYWx0ZXJuYXRlIiwia2IiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImxiIiwibWIiLCJNIiwiX3N0YXJ0VGV4dCIsIl9mYWxsYmFja1RleHQiLCJuYiIsIm9iIiwicGIiLCJxYiIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsIk4iLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJzYiIsImV2ZW50UG9vbCIsInRiIiwiZGVzdHJ1Y3RvciIsInJiIiwiZ2V0UG9vbGVkIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsInViIiwidmIiLCJ3YiIsInhiIiwieWIiLCJkb2N1bWVudE1vZGUiLCJ6YiIsIkFiIiwiQmIiLCJLYiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJMYiIsIk1iIiwiTmIiLCJkZXRhaWwiLCJPYiIsIlJiIiwiUGIiLCJjaGFyIiwiUWIiLCJTYiIsIlRiIiwiaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudCIsIlViIiwiVmIiLCJXYiIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJYYiIsIlliIiwiWmIiLCIkYiIsImVucXVldWVTdGF0ZVJlc3RvcmUiLCJuZWVkc1N0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImZjIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsIm1vbnRoIiwidGVsIiwidGltZSIsIndlZWsiLCJnYyIsImhjIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJpYyIsImpjIiwibGMiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsImtjIiwibWMiLCJjaGVja2VkIiwibmMiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwiTyIsIm9jIiwicGMiLCJxYyIsInJjIiwic2MiLCJ0YyIsInVjIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiJCR0eXBlb2YiLCJCYyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiQ2MiLCJEYyIsIkVjIiwiVSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJWIiwiU2MiLCJUYyIsIlVjIiwiR2MiLCJIYyIsIkZjIiwic2V0QXR0cmlidXRlTlMiLCJWYyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiV2MiLCJYYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJZYyIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2hhbmdlIiwiY2QiLCJkZCIsImVkIiwiZmQiLCJnZCIsImhkIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwicGQiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwicWQiLCJ2aWV3IiwicmQiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0Iiwic2QiLCJnZXRNb2RpZmllclN0YXRlIiwidGQiLCJ1ZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInNyY0VsZW1lbnQiLCJ0b0VsZW1lbnQiLCJ2ZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwid2QiLCJ4ZCIsImVmZmVjdFRhZyIsInlkIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsInpkIiwiQWQiLCJCZCIsIkRkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkVkIiwiRmQiLCJHZCIsIkhkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIk1velByaW50YWJsZUtleSIsIklkIiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiSmQiLCJsb2NhbGUiLCJLZCIsIkxkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIk1kIiwiTmQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIk9kIiwiUGQiLCJRZCIsImlzSW50ZXJhY3RpdmUiLCJSZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIlNkIiwiVGQiLCJVZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiVmQiLCJXZCIsIlciLCJYZCIsIllkIiwiWmQiLCIkZCIsIl9lbmFibGVkIiwic2V0RW5hYmxlZCIsImlzRW5hYmxlZCIsInRyYXBCdWJibGVkRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJhZSIsImJlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiY2UiLCJkZSIsImVlIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsImZlIiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuY2VsIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDbG9zZSIsInRvcENvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25TdGFydCIsInRvcENvbXBvc2l0aW9uVXBkYXRlIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRm9jdXMiLCJ0b3BJbnB1dCIsInRvcEtleURvd24iLCJ0b3BLZXlQcmVzcyIsInRvcEtleVVwIiwidG9wTG9hZCIsInRvcExvYWRTdGFydCIsInRvcE1vdXNlRG93biIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwidG9wTW91c2VVcCIsInRvcFBhc3RlIiwidG9wU2Nyb2xsIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwidG9wVGV4dElucHV0IiwidG9wVG9nZ2xlIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wV2hlZWwiLCJnZSIsInRvcEFib3J0IiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wRHVyYXRpb25DaGFuZ2UiLCJ0b3BFbXB0aWVkIiwidG9wRW5jcnlwdGVkIiwidG9wRW5kZWQiLCJ0b3BFcnJvciIsInRvcExvYWRlZERhdGEiLCJ0b3BMb2FkZWRNZXRhZGF0YSIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BTZWVrZWQiLCJ0b3BTZWVraW5nIiwidG9wU3RhbGxlZCIsInRvcFN1c3BlbmQiLCJ0b3BUaW1lVXBkYXRlIiwidG9wVm9sdW1lQ2hhbmdlIiwidG9wV2FpdGluZyIsImhlIiwiaWUiLCJqZSIsImtlIiwibGUiLCJtZSIsIm5lIiwib2UiLCJwZSIsInNlbGVjdCIsInFlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ4ZSIsInBlbmRpbmdQcm9wcyIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZXhwaXJhdGlvblRpbWUiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwicGVuZGluZ0NoaWxkcmVuIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsIkVlIiwiRmUiLCJHZSIsIkllIiwiSmUiLCJLZSIsImJhc2VTdGF0ZSIsImNhbGxiYWNrTGlzdCIsImhhc0ZvcmNlVXBkYXRlIiwiaXNJbml0aWFsaXplZCIsImNhcHR1cmVkVmFsdWVzIiwiTGUiLCJNZSIsIk5lIiwiT2UiLCJQZSIsIlFlIiwicGFydGlhbFN0YXRlIiwiUmUiLCJpc1JlcGxhY2UiLCJpc0ZvcmNlZCIsImNhcHR1cmVkVmFsdWUiLCJTZSIsIlVlIiwiVmUiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwicmVmcyIsIldlIiwiWGUiLCJ6IiwiUSIsIkgiLCJZZSIsIlplIiwiJGUiLCJwZW5kaW5nQ29udGV4dCIsIlkiLCJzaG91bGRTZXRUZXh0Q29udGVudCIsInNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUiLCJwdXNoSG9zdENvbnRleHQiLCJwdXNoSG9zdENvbnRhaW5lciIsIkciLCJwdXNoUHJvdmlkZXIiLCJSIiwiZ2V0TWFza2VkQ29udGV4dCIsIlMiLCJnZXRVbm1hc2tlZENvbnRleHQiLCJoYXNDb250ZXh0Q2hhbmdlZCIsInB1c2hDb250ZXh0UHJvdmlkZXIiLCJwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0IiwiaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlciIsImVudGVySHlkcmF0aW9uU3RhdGUiLCJXYSIsInJlc2V0SHlkcmF0aW9uU3RhdGUiLCJDYiIsInRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiSmMiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJjYWNoZUNvbnRleHQiLCJpc0NvbnRleHRDb25zdW1lciIsImlzTW91bnRlZCIsImVucXVldWVTZXRTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsImFkb3B0Q2xhc3NJbnN0YW5jZSIsImNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb25zdHJ1Y3RDbGFzc0luc3RhbmNlIiwibW91bnRDbGFzc0luc3RhbmNlIiwicmVzdW1lTW91bnRDbGFzc0luc3RhbmNlIiwidXBkYXRlQ2xhc3NJbnN0YW5jZSIsIlRlIiwiS2MiLCJMYyIsIkRiIiwiTWMiLCJFYiIsImJlZ2luV29yayIsImh5ZHJhdGUiLCJfY29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJjZiIsInN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmciLCJlZiIsImxmIiwiSSIsIllhIiwiTmMiLCJ5YSIsImNhIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiT2MiLCJaYSIsImdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsImNvbXBvbmVudERpZENhdGNoIiwiaWEiLCJ6YSIsImRhIiwiRmIiLCJ4ZyIsInllIiwiSWMiLCJQYyIsIkdiIiwibWciLCJRYyIsImxnIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsIksiLCJsYSIsIlQiLCJKIiwiSGIiLCJhYSIsIlAiLCIkYSIsIkliIiwiQWEiLCJfb25Db21wbGV0ZSIsIndnIiwiQmEiLCJKYiIsImZpbmlzaGVkV29yayIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJ6ZyIsInciLCJhYiIsImtnIiwid2UiLCJnZyIsIkFnIiwiaGciLCJpZyIsImpnIiwidGltZVJlbWFpbmluZyIsIkJnIiwiY3JlYXRlQ3Vyc29yIiwiY2hlY2tUaGF0U3RhY2tJc0VtcHR5IiwicmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2Iiwia2YiLCJnZXRDaGlsZEhvc3RDb250ZXh0IiwiZ2V0Um9vdEhvc3RDb250ZXh0IiwiZ2V0SG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250YWluZXIiLCJwb3BIb3N0Q29udGV4dCIsImZmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiaXNDb250ZXh0UHJvdmlkZXIiLCJwb3BDb250ZXh0UHJvdmlkZXIiLCJwb3BUb3BMZXZlbENvbnRleHRPYmplY3QiLCJwcm9jZXNzQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dCIsImhmIiwicG9wUHJvdmlkZXIiLCJqZiIsImh5ZHJhdGlvbiIsInByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSIsInBvcEh5ZHJhdGlvblN0YXRlIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsImdldE5leHRIeWRyYXRhYmxlU2libGluZyIsImdldEZpcnN0SHlkcmF0YWJsZUNoaWxkIiwiaHlkcmF0ZUluc3RhbmNlIiwiaHlkcmF0ZVRleHRJbnN0YW5jZSIsImdmIiwiY3JlYXRlVGV4dEluc3RhbmNlIiwiYXBwZW5kSW5pdGlhbENoaWxkIiwiZmluYWxpemVJbml0aWFsQ2hpbGRyZW4iLCJwcmVwYXJlVXBkYXRlIiwicGVyc2lzdGVuY2UiLCJtdXRhdGlvbiIsImNvbXBsZXRlV29yayIsImhhbmRsZXIiLCJhZiIsInRocm93RXhjZXB0aW9uIiwidW53aW5kV29yayIsInVud2luZEludGVycnVwdGVkV29yayIsImJmIiwiZ2V0UHVibGljSW5zdGFuY2UiLCJjb21taXRNb3VudCIsImNvbW1pdFVwZGF0ZSIsInJlc2V0VGV4dENvbnRlbnQiLCJjb21taXRUZXh0VXBkYXRlIiwiYXBwZW5kQ2hpbGRUb0NvbnRhaW5lciIsImluc2VydEJlZm9yZSIsImluc2VydEluQ29udGFpbmVyQmVmb3JlIiwicmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyIiwiY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJjb21taXRSZXNldFRleHRDb250ZW50IiwiY29tbWl0UGxhY2VtZW50IiwiY29tbWl0RGVsZXRpb24iLCJjb21taXRXb3JrIiwiY29tbWl0TGlmZUN5Y2xlcyIsImNvbW1pdEVycm9yTG9nZ2luZyIsImNvbXBvbmVudFN0YWNrIiwiY29tbWl0QXR0YWNoUmVmIiwiY29tbWl0RGV0YWNoUmVmIiwiZGYiLCJzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2siLCJjYW5jZWxEZWZlcnJlZENhbGxiYWNrIiwicHJlcGFyZUZvckNvbW1pdCIsInJlc2V0QWZ0ZXJDb21taXQiLCJSYyIsInJlY2FsY3VsYXRlQ3VycmVudFRpbWUiLCJjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyIiwic2NoZWR1bGVXb3JrIiwicmVxdWVzdFdvcmsiLCJmbHVzaFJvb3QiLCJiYXRjaGVkVXBkYXRlcyIsInVuYmF0Y2hlZFVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJmbHVzaENvbnRyb2xsZWQiLCJkZWZlcnJlZFVwZGF0ZXMiLCJzeW5jVXBkYXRlcyIsImludGVyYWN0aXZlVXBkYXRlcyIsImZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzIiwiY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbiIsImxlZ2FjeUNvbnRleHQiLCJtZiIsImNyZWF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUiLCJnZXRQdWJsaWNSb290SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMiLCJDZCIsImluamVjdEludG9EZXZUb29scyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiSGUiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsIm5mIiwicGYiLCJyZiIsInBlcmZvcm1hbmNlIiwic2YiLCJ0ZiIsInVmIiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNhbmNlbElkbGVDYWxsYmFjayIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJkaWRUaW1lb3V0IiwiRGYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJFZiIsIkdmIiwiRmYiLCJIZiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiSWYiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiSmYiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIktmIiwiTGYiLCJNZiIsIk5mIiwibWF0aG1sIiwic3ZnIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJuYW1lc3BhY2VVUkkiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiU2YiLCJUZiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJsaW5lQ2xhbXAiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJVZiIsIlZmIiwic2V0UHJvcGVydHkiLCJXZiIsIm1lbnVpdGVtIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiY3JlYXRlRWxlbWVudE5TIiwiYmciLCJjZyIsIl9faHRtbCIsIm9uY2xpY2siLCJkZyIsImVnIiwiZmciLCJuZyIsIm9nIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJkaWZmUHJvcGVydGllcyIsInVwZGF0ZVByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkVGV4dCIsIndhcm5Gb3JVbm1hdGNoZWRUZXh0Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQiLCJmb3JtIiwicGciLCJxZyIsInJnIiwiWCIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsInNnIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsInRnIiwiX2ludGVybmFsUm9vdCIsInVnIiwidmciLCJhdXRvRm9jdXMiLCJjb21taXQiLCJ1bm1vdW50IiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY3JlYXRlQmF0Y2giLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiaGlkZGVuIiwiZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZSIsImRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UiLCJDZyIsIkVnIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIkRnIiwiRmciLCJxZiIsIkdnIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJFdmVudFByb3BhZ2F0b3JzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RET01FdmVudExpc3RlbmVyIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiSGciLCJJZyIsImZvcmNlVXBkYXRlIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCI9IiwiOiIsImVzY2FwZSIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2RlZmF1bHRWYWx1ZSIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJmb3J3YXJkUmVmIiwiRnJhZ21lbnQiLCJTdHJpY3RNb2RlIiwidW5zdGFibGVfQXN5bmNNb2RlIiwiY3JlYXRlRmFjdG9yeSIsIl9BcHBSb3V0ZXIyIiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWpCLEdBQ0FZLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURrQixPQUFBLEtBSWpEcEIsRUFBQXFCLEVBQUEsU0FBQWxCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQW1CLFdBQ0EsV0FBMkIsT0FBQW5CLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixF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QixLQUFBQyxFQUFBRCxRQUFBLElBQUF3QixFQUFBeEIsU0FBQSxJQUFBb0gsSUFBQXBILEdBQUF3QixFQUFBeEIsSUFBOEcsUUFBckJBLEVBQUFzSixVQUFBbkUsT0FBQSxHQUFxQmxGLEVBQUFzekIsU0FBQTl4QixPQUFzQixLQUFBekIsRUFBQSxDQUFhb0gsRUFBQWpGLE1BQUFuQyxHQUFXLFFBQUFKLEVBQUEsRUFBWUEsRUFBQUksRUFBSUosSUFBQXdILEVBQUF4SCxHQUFBMEosVUFBQTFKLEVBQUEsR0FBd0JLLEVBQUFzekIsU0FBQW5zQixFQUFhLE9BQU9peUcsU0FBQXZPLEVBQUEzakcsS0FBQTVGLEVBQUE0RixLQUFBeUUsSUFBQWsxQixFQUFBcDhCLElBQUEySyxFQUFBOHFCLE1BQUFsNkIsRUFBQXV0SCxPQUFBOXJILElBQXFEK2xJLGNBQUEsU0FBQWxtSSxHQUEyQixJQUFBQyxFQUFBZ3dHLEVBQUEvdkYsS0FBQSxLQUFBbGdCLEdBQThCLE9BQVRDLEVBQUEyRixLQUFBNUYsRUFBU0MsR0FBU2d0QyxlQUFBbWtFLEVBQUF2MUUsUUFBQSxTQUFBaTdFLG9EQUF1RkMsa0JBQUFpWixFQUFBajZGLE9BQUF2M0IsSUFBOEJ1akksRUFBQWpqSSxPQUFBb3VHLFFBQWtCN3ZFLFFBQUFvbEYsSUFDOWVvSyxFQUFBa1YsR0FBQXRmLEdBQUFzZixFQUFVNWpJLEVBQUFELFFBQUEydUgsRUFBQSxRQUFBQSxFQUFBLFFBQUFBLGdDQ3JCVjd1SCxFQUFBLEtBQ0EsUUFBQUEsRUFBQSxRQUNBQSxFQUFBLFFBRUFBLEVBQUEseURBR0E0eUQsVUFBU2p2QixPQUFPdkUsRUFBQUMsUUFBQUMsY0FBQzZvRyxFQUFBOW9HLFFBQUQsTUFBY3BDLFNBQVNtckcsZUFBZSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIzNyk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5pZiAoIW1vZHVsZS5ob3QgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9yZWFjdC1ob3QtbG9hZGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9yZWFjdC1ob3QtbG9hZGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiLCIvKipcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqICBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqICBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gIGdsb2JhbC5JbW11dGFibGUgPSBmYWN0b3J5KCk7XG59KHRoaXMsIGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO3ZhciBTTElDRSQwID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNsYXNzKGN0b3IsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAoc3VwZXJDbGFzcykge1xuICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgICB9XG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gSXRlcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0l0ZXJhYmxlKHZhbHVlKSA/IHZhbHVlIDogU2VxKHZhbHVlKTtcbiAgICB9XG5cblxuICBjcmVhdGVDbGFzcyhLZXllZEl0ZXJhYmxlLCBJdGVyYWJsZSk7XG4gICAgZnVuY3Rpb24gS2V5ZWRJdGVyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzS2V5ZWQodmFsdWUpID8gdmFsdWUgOiBLZXllZFNlcSh2YWx1ZSk7XG4gICAgfVxuXG5cbiAgY3JlYXRlQ2xhc3MoSW5kZXhlZEl0ZXJhYmxlLCBJdGVyYWJsZSk7XG4gICAgZnVuY3Rpb24gSW5kZXhlZEl0ZXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNJbmRleGVkKHZhbHVlKSA/IHZhbHVlIDogSW5kZXhlZFNlcSh2YWx1ZSk7XG4gICAgfVxuXG5cbiAgY3JlYXRlQ2xhc3MoU2V0SXRlcmFibGUsIEl0ZXJhYmxlKTtcbiAgICBmdW5jdGlvbiBTZXRJdGVyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSXRlcmFibGUodmFsdWUpICYmICFpc0Fzc29jaWF0aXZlKHZhbHVlKSA/IHZhbHVlIDogU2V0U2VxKHZhbHVlKTtcbiAgICB9XG5cblxuXG4gIGZ1bmN0aW9uIGlzSXRlcmFibGUobWF5YmVJdGVyYWJsZSkge1xuICAgIHJldHVybiAhIShtYXliZUl0ZXJhYmxlICYmIG1heWJlSXRlcmFibGVbSVNfSVRFUkFCTEVfU0VOVElORUxdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzS2V5ZWQobWF5YmVLZXllZCkge1xuICAgIHJldHVybiAhIShtYXliZUtleWVkICYmIG1heWJlS2V5ZWRbSVNfS0VZRURfU0VOVElORUxdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSW5kZXhlZChtYXliZUluZGV4ZWQpIHtcbiAgICByZXR1cm4gISEobWF5YmVJbmRleGVkICYmIG1heWJlSW5kZXhlZFtJU19JTkRFWEVEX1NFTlRJTkVMXSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0Fzc29jaWF0aXZlKG1heWJlQXNzb2NpYXRpdmUpIHtcbiAgICByZXR1cm4gaXNLZXllZChtYXliZUFzc29jaWF0aXZlKSB8fCBpc0luZGV4ZWQobWF5YmVBc3NvY2lhdGl2ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc09yZGVyZWQobWF5YmVPcmRlcmVkKSB7XG4gICAgcmV0dXJuICEhKG1heWJlT3JkZXJlZCAmJiBtYXliZU9yZGVyZWRbSVNfT1JERVJFRF9TRU5USU5FTF0pO1xuICB9XG5cbiAgSXRlcmFibGUuaXNJdGVyYWJsZSA9IGlzSXRlcmFibGU7XG4gIEl0ZXJhYmxlLmlzS2V5ZWQgPSBpc0tleWVkO1xuICBJdGVyYWJsZS5pc0luZGV4ZWQgPSBpc0luZGV4ZWQ7XG4gIEl0ZXJhYmxlLmlzQXNzb2NpYXRpdmUgPSBpc0Fzc29jaWF0aXZlO1xuICBJdGVyYWJsZS5pc09yZGVyZWQgPSBpc09yZGVyZWQ7XG5cbiAgSXRlcmFibGUuS2V5ZWQgPSBLZXllZEl0ZXJhYmxlO1xuICBJdGVyYWJsZS5JbmRleGVkID0gSW5kZXhlZEl0ZXJhYmxlO1xuICBJdGVyYWJsZS5TZXQgPSBTZXRJdGVyYWJsZTtcblxuXG4gIHZhciBJU19JVEVSQUJMRV9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0lURVJBQkxFX19AQCc7XG4gIHZhciBJU19LRVlFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0tFWUVEX19AQCc7XG4gIHZhciBJU19JTkRFWEVEX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfSU5ERVhFRF9fQEAnO1xuICB2YXIgSVNfT1JERVJFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX09SREVSRURfX0BAJztcblxuICAvLyBVc2VkIGZvciBzZXR0aW5nIHByb3RvdHlwZSBtZXRob2RzIHRoYXQgSUU4IGNob2tlcyBvbi5cbiAgdmFyIERFTEVURSA9ICdkZWxldGUnO1xuXG4gIC8vIENvbnN0YW50cyBkZXNjcmliaW5nIHRoZSBzaXplIG9mIHRyaWUgbm9kZXMuXG4gIHZhciBTSElGVCA9IDU7IC8vIFJlc3VsdGVkIGluIGJlc3QgcGVyZm9ybWFuY2UgYWZ0ZXIgX19fX19fP1xuICB2YXIgU0laRSA9IDEgPDwgU0hJRlQ7XG4gIHZhciBNQVNLID0gU0laRSAtIDE7XG5cbiAgLy8gQSBjb25zaXN0ZW50IHNoYXJlZCB2YWx1ZSByZXByZXNlbnRpbmcgXCJub3Qgc2V0XCIgd2hpY2ggZXF1YWxzIG5vdGhpbmcgb3RoZXJcbiAgLy8gdGhhbiBpdHNlbGYsIGFuZCBub3RoaW5nIHRoYXQgY291bGQgYmUgcHJvdmlkZWQgZXh0ZXJuYWxseS5cbiAgdmFyIE5PVF9TRVQgPSB7fTtcblxuICAvLyBCb29sZWFuIHJlZmVyZW5jZXMsIFJvdWdoIGVxdWl2YWxlbnQgb2YgYGJvb2wgJmAuXG4gIHZhciBDSEFOR0VfTEVOR1RIID0geyB2YWx1ZTogZmFsc2UgfTtcbiAgdmFyIERJRF9BTFRFUiA9IHsgdmFsdWU6IGZhbHNlIH07XG5cbiAgZnVuY3Rpb24gTWFrZVJlZihyZWYpIHtcbiAgICByZWYudmFsdWUgPSBmYWxzZTtcbiAgICByZXR1cm4gcmVmO1xuICB9XG5cbiAgZnVuY3Rpb24gU2V0UmVmKHJlZikge1xuICAgIHJlZiAmJiAocmVmLnZhbHVlID0gdHJ1ZSk7XG4gIH1cblxuICAvLyBBIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSB2YWx1ZSByZXByZXNlbnRpbmcgYW4gXCJvd25lclwiIGZvciB0cmFuc2llbnQgd3JpdGVzXG4gIC8vIHRvIHRyaWVzLiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgb25seSBldmVyIGVxdWFsIGl0c2VsZiwgYW5kIHdpbGwgbm90IGVxdWFsXG4gIC8vIHRoZSByZXR1cm4gb2YgYW55IHN1YnNlcXVlbnQgY2FsbCBvZiB0aGlzIGZ1bmN0aW9uLlxuICBmdW5jdGlvbiBPd25lcklEKCkge31cblxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9jb3B5LWFycmF5LWlubGluZVxuICBmdW5jdGlvbiBhcnJDb3B5KGFyciwgb2Zmc2V0KSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWF4KDAsIGFyci5sZW5ndGggLSBvZmZzZXQpO1xuICAgIHZhciBuZXdBcnIgPSBuZXcgQXJyYXkobGVuKTtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbGVuOyBpaSsrKSB7XG4gICAgICBuZXdBcnJbaWldID0gYXJyW2lpICsgb2Zmc2V0XTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0FycjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuc3VyZVNpemUoaXRlcikge1xuICAgIGlmIChpdGVyLnNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaXRlci5zaXplID0gaXRlci5fX2l0ZXJhdGUocmV0dXJuVHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVyLnNpemU7XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwSW5kZXgoaXRlciwgaW5kZXgpIHtcbiAgICAvLyBUaGlzIGltcGxlbWVudHMgXCJpcyBhcnJheSBpbmRleFwiIHdoaWNoIHRoZSBFQ01BU3RyaW5nIHNwZWMgZGVmaW5lcyBhczpcbiAgICAvL1xuICAgIC8vICAgICBBIFN0cmluZyBwcm9wZXJ0eSBuYW1lIFAgaXMgYW4gYXJyYXkgaW5kZXggaWYgYW5kIG9ubHkgaWZcbiAgICAvLyAgICAgVG9TdHJpbmcoVG9VaW50MzIoUCkpIGlzIGVxdWFsIHRvIFAgYW5kIFRvVWludDMyKFApIGlzIG5vdCBlcXVhbFxuICAgIC8vICAgICB0byAyXjMy4oiSMS5cbiAgICAvL1xuICAgIC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1hcnJheS1leG90aWMtb2JqZWN0c1xuICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSB7XG4gICAgICB2YXIgdWludDMySW5kZXggPSBpbmRleCA+Pj4gMDsgLy8gTiA+Pj4gMCBpcyBzaG9ydGhhbmQgZm9yIFRvVWludDMyXG4gICAgICBpZiAoJycgKyB1aW50MzJJbmRleCAhPT0gaW5kZXggfHwgdWludDMySW5kZXggPT09IDQyOTQ5NjcyOTUpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgIH1cbiAgICAgIGluZGV4ID0gdWludDMySW5kZXg7XG4gICAgfVxuICAgIHJldHVybiBpbmRleCA8IDAgPyBlbnN1cmVTaXplKGl0ZXIpICsgaW5kZXggOiBpbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiB3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIHNpemUpIHtcbiAgICByZXR1cm4gKGJlZ2luID09PSAwIHx8IChzaXplICE9PSB1bmRlZmluZWQgJiYgYmVnaW4gPD0gLXNpemUpKSAmJlxuICAgICAgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IChzaXplICE9PSB1bmRlZmluZWQgJiYgZW5kID49IHNpemUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVCZWdpbihiZWdpbiwgc2l6ZSkge1xuICAgIHJldHVybiByZXNvbHZlSW5kZXgoYmVnaW4sIHNpemUsIDApO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUVuZChlbmQsIHNpemUpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUluZGV4KGVuZCwgc2l6ZSwgc2l6ZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlSW5kZXgoaW5kZXgsIHNpemUsIGRlZmF1bHRJbmRleCkge1xuICAgIHJldHVybiBpbmRleCA9PT0gdW5kZWZpbmVkID9cbiAgICAgIGRlZmF1bHRJbmRleCA6XG4gICAgICBpbmRleCA8IDAgP1xuICAgICAgICBNYXRoLm1heCgwLCBzaXplICsgaW5kZXgpIDpcbiAgICAgICAgc2l6ZSA9PT0gdW5kZWZpbmVkID9cbiAgICAgICAgICBpbmRleCA6XG4gICAgICAgICAgTWF0aC5taW4oc2l6ZSwgaW5kZXgpO1xuICB9XG5cbiAgLyogZ2xvYmFsIFN5bWJvbCAqL1xuXG4gIHZhciBJVEVSQVRFX0tFWVMgPSAwO1xuICB2YXIgSVRFUkFURV9WQUxVRVMgPSAxO1xuICB2YXIgSVRFUkFURV9FTlRSSUVTID0gMjtcblxuICB2YXIgUkVBTF9JVEVSQVRPUl9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcjtcbiAgdmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InO1xuXG4gIHZhciBJVEVSQVRPUl9TWU1CT0wgPSBSRUFMX0lURVJBVE9SX1NZTUJPTCB8fCBGQVVYX0lURVJBVE9SX1NZTUJPTDtcblxuXG4gIGZ1bmN0aW9uIEl0ZXJhdG9yKG5leHQpIHtcbiAgICAgIHRoaXMubmV4dCA9IG5leHQ7XG4gICAgfVxuXG4gICAgSXRlcmF0b3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJ1tJdGVyYXRvcl0nO1xuICAgIH07XG5cblxuICBJdGVyYXRvci5LRVlTID0gSVRFUkFURV9LRVlTO1xuICBJdGVyYXRvci5WQUxVRVMgPSBJVEVSQVRFX1ZBTFVFUztcbiAgSXRlcmF0b3IuRU5UUklFUyA9IElURVJBVEVfRU5UUklFUztcblxuICBJdGVyYXRvci5wcm90b3R5cGUuaW5zcGVjdCA9XG4gIEl0ZXJhdG9yLnByb3RvdHlwZS50b1NvdXJjZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsgfVxuICBJdGVyYXRvci5wcm90b3R5cGVbSVRFUkFUT1JfU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgaXRlcmF0b3JSZXN1bHQpIHtcbiAgICB2YXIgdmFsdWUgPSB0eXBlID09PSAwID8gayA6IHR5cGUgPT09IDEgPyB2IDogW2ssIHZdO1xuICAgIGl0ZXJhdG9yUmVzdWx0ID8gKGl0ZXJhdG9yUmVzdWx0LnZhbHVlID0gdmFsdWUpIDogKGl0ZXJhdG9yUmVzdWx0ID0ge1xuICAgICAgdmFsdWU6IHZhbHVlLCBkb25lOiBmYWxzZVxuICAgIH0pO1xuICAgIHJldHVybiBpdGVyYXRvclJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yRG9uZSgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBmdW5jdGlvbiBoYXNJdGVyYXRvcihtYXliZUl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuICEhZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSXRlcmF0b3IobWF5YmVJdGVyYXRvcikge1xuICAgIHJldHVybiBtYXliZUl0ZXJhdG9yICYmIHR5cGVvZiBtYXliZUl0ZXJhdG9yLm5leHQgPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJdGVyYXRvcihpdGVyYWJsZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihpdGVyYWJsZSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm4gJiYgaXRlcmF0b3JGbi5jYWxsKGl0ZXJhYmxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4oaXRlcmFibGUpIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IGl0ZXJhYmxlICYmIChcbiAgICAgIChSRUFMX0lURVJBVE9SX1NZTUJPTCAmJiBpdGVyYWJsZVtSRUFMX0lURVJBVE9SX1NZTUJPTF0pIHx8XG4gICAgICBpdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF1cbiAgICApO1xuICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yRm47XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcic7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhTZXEsIEl0ZXJhYmxlKTtcbiAgICBmdW5jdGlvbiBTZXEodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTZXF1ZW5jZSgpIDpcbiAgICAgICAgaXNJdGVyYWJsZSh2YWx1ZSkgPyB2YWx1ZS50b1NlcSgpIDogc2VxRnJvbVZhbHVlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBTZXEub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gU2VxKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNlcS5wcm90b3R5cGUudG9TZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBTZXEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdTZXEgeycsICd9Jyk7XG4gICAgfTtcblxuICAgIFNlcS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5fY2FjaGUgJiYgdGhpcy5fX2l0ZXJhdGVVbmNhY2hlZCkge1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHRoaXMuZW50cnlTZXEoKS50b0FycmF5KCk7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuX2NhY2hlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvLyBhYnN0cmFjdCBfX2l0ZXJhdGVVbmNhY2hlZChmbiwgcmV2ZXJzZSlcblxuICAgIFNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBzZXFJdGVyYXRlKHRoaXMsIGZuLCByZXZlcnNlLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgLy8gYWJzdHJhY3QgX19pdGVyYXRvclVuY2FjaGVkKHR5cGUsIHJldmVyc2UpXG5cbiAgICBTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gc2VxSXRlcmF0b3IodGhpcywgdHlwZSwgcmV2ZXJzZSwgdHJ1ZSk7XG4gICAgfTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoS2V5ZWRTZXEsIFNlcSk7XG4gICAgZnVuY3Rpb24gS2V5ZWRTZXEodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cbiAgICAgICAgZW1wdHlTZXF1ZW5jZSgpLnRvS2V5ZWRTZXEoKSA6XG4gICAgICAgIGlzSXRlcmFibGUodmFsdWUpID9cbiAgICAgICAgICAoaXNLZXllZCh2YWx1ZSkgPyB2YWx1ZS50b1NlcSgpIDogdmFsdWUuZnJvbUVudHJ5U2VxKCkpIDpcbiAgICAgICAgICBrZXllZFNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgS2V5ZWRTZXEucHJvdG90eXBlLnRvS2V5ZWRTZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKEluZGV4ZWRTZXEsIFNlcSk7XG4gICAgZnVuY3Rpb24gSW5kZXhlZFNlcSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eVNlcXVlbmNlKCkgOlxuICAgICAgICAhaXNJdGVyYWJsZSh2YWx1ZSkgPyBpbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSA6XG4gICAgICAgIGlzS2V5ZWQodmFsdWUpID8gdmFsdWUuZW50cnlTZXEoKSA6IHZhbHVlLnRvSW5kZXhlZFNlcSgpO1xuICAgIH1cblxuICAgIEluZGV4ZWRTZXEub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gSW5kZXhlZFNlcShhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBJbmRleGVkU2VxLnByb3RvdHlwZS50b0luZGV4ZWRTZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBJbmRleGVkU2VxLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU2VxIFsnLCAnXScpO1xuICAgIH07XG5cbiAgICBJbmRleGVkU2VxLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHNlcUl0ZXJhdGUodGhpcywgZm4sIHJldmVyc2UsIGZhbHNlKTtcbiAgICB9O1xuXG4gICAgSW5kZXhlZFNlcS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBzZXFJdGVyYXRvcih0aGlzLCB0eXBlLCByZXZlcnNlLCBmYWxzZSk7XG4gICAgfTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoU2V0U2VxLCBTZXEpO1xuICAgIGZ1bmN0aW9uIFNldFNlcSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5U2VxdWVuY2UoKSA6XG4gICAgICAgICFpc0l0ZXJhYmxlKHZhbHVlKSA/IGluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIDpcbiAgICAgICAgaXNLZXllZCh2YWx1ZSkgPyB2YWx1ZS5lbnRyeVNlcSgpIDogdmFsdWVcbiAgICAgICkudG9TZXRTZXEoKTtcbiAgICB9XG5cbiAgICBTZXRTZXEub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gU2V0U2VxKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNldFNlcS5wcm90b3R5cGUudG9TZXRTZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cblxuXG4gIFNlcS5pc1NlcSA9IGlzU2VxO1xuICBTZXEuS2V5ZWQgPSBLZXllZFNlcTtcbiAgU2VxLlNldCA9IFNldFNlcTtcbiAgU2VxLkluZGV4ZWQgPSBJbmRleGVkU2VxO1xuXG4gIHZhciBJU19TRVFfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9TRVFfX0BAJztcblxuICBTZXEucHJvdG90eXBlW0lTX1NFUV9TRU5USU5FTF0gPSB0cnVlO1xuXG5cblxuICBjcmVhdGVDbGFzcyhBcnJheVNlcSwgSW5kZXhlZFNlcSk7XG4gICAgZnVuY3Rpb24gQXJyYXlTZXEoYXJyYXkpIHtcbiAgICAgIHRoaXMuX2FycmF5ID0gYXJyYXk7XG4gICAgICB0aGlzLnNpemUgPSBhcnJheS5sZW5ndGg7XG4gICAgfVxuXG4gICAgQXJyYXlTZXEucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzKGluZGV4KSA/IHRoaXMuX2FycmF5W3dyYXBJbmRleCh0aGlzLCBpbmRleCldIDogbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIEFycmF5U2VxLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fYXJyYXk7XG4gICAgICB2YXIgbWF4SW5kZXggPSBhcnJheS5sZW5ndGggLSAxO1xuICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuICAgICAgICBpZiAoZm4oYXJyYXlbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV0sIGlpLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gaWkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaWk7XG4gICAgfTtcblxuICAgIEFycmF5U2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fYXJyYXk7XG4gICAgICB2YXIgbWF4SW5kZXggPSBhcnJheS5sZW5ndGggLSAxO1xuICAgICAgdmFyIGlpID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSBcbiAgICAgICAge3JldHVybiBpaSA+IG1heEluZGV4ID9cbiAgICAgICAgICBpdGVyYXRvckRvbmUoKSA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBpaSwgYXJyYXlbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkrKyA6IGlpKytdKX1cbiAgICAgICk7XG4gICAgfTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoT2JqZWN0U2VxLCBLZXllZFNlcSk7XG4gICAgZnVuY3Rpb24gT2JqZWN0U2VxKG9iamVjdCkge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICAgICAgdGhpcy5fb2JqZWN0ID0gb2JqZWN0O1xuICAgICAgdGhpcy5fa2V5cyA9IGtleXM7XG4gICAgICB0aGlzLnNpemUgPSBrZXlzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBPYmplY3RTZXEucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIGlmIChub3RTZXRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmICF0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgIHJldHVybiBub3RTZXRWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9vYmplY3Rba2V5XTtcbiAgICB9O1xuXG4gICAgT2JqZWN0U2VxLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9vYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICB9O1xuXG4gICAgT2JqZWN0U2VxLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgdmFyIG9iamVjdCA9IHRoaXMuX29iamVjdDtcbiAgICAgIHZhciBrZXlzID0gdGhpcy5fa2V5cztcbiAgICAgIHZhciBtYXhJbmRleCA9IGtleXMubGVuZ3RoIC0gMTtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG4gICAgICAgIGlmIChmbihvYmplY3Rba2V5XSwga2V5LCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gaWkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaWk7XG4gICAgfTtcblxuICAgIE9iamVjdFNlcS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBvYmplY3QgPSB0aGlzLl9vYmplY3Q7XG4gICAgICB2YXIga2V5cyA9IHRoaXMuX2tleXM7XG4gICAgICB2YXIgbWF4SW5kZXggPSBrZXlzLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgaWkgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuICAgICAgICByZXR1cm4gaWkrKyA+IG1heEluZGV4ID9cbiAgICAgICAgICBpdGVyYXRvckRvbmUoKSA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBrZXksIG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgT2JqZWN0U2VxLnByb3RvdHlwZVtJU19PUkRFUkVEX1NFTlRJTkVMXSA9IHRydWU7XG5cblxuICBjcmVhdGVDbGFzcyhJdGVyYWJsZVNlcSwgSW5kZXhlZFNlcSk7XG4gICAgZnVuY3Rpb24gSXRlcmFibGVTZXEoaXRlcmFibGUpIHtcbiAgICAgIHRoaXMuX2l0ZXJhYmxlID0gaXRlcmFibGU7XG4gICAgICB0aGlzLnNpemUgPSBpdGVyYWJsZS5sZW5ndGggfHwgaXRlcmFibGUuc2l6ZTtcbiAgICB9XG5cbiAgICBJdGVyYWJsZVNlcS5wcm90b3R5cGUuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhYmxlID0gdGhpcy5faXRlcmFibGU7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihpdGVyYWJsZSk7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICBpZiAoaXNJdGVyYXRvcihpdGVyYXRvcikpIHtcbiAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICBpZiAoZm4oc3RlcC52YWx1ZSwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcblxuICAgIEl0ZXJhYmxlU2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmFibGUgPSB0aGlzLl9pdGVyYWJsZTtcbiAgICAgIHZhciBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKGl0ZXJhYmxlKTtcbiAgICAgIGlmICghaXNJdGVyYXRvcihpdGVyYXRvcikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihpdGVyYXRvckRvbmUpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICByZXR1cm4gc3RlcC5kb25lID8gc3RlcCA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKEl0ZXJhdG9yU2VxLCBJbmRleGVkU2VxKTtcbiAgICBmdW5jdGlvbiBJdGVyYXRvclNlcShpdGVyYXRvcikge1xuICAgICAgdGhpcy5faXRlcmF0b3IgPSBpdGVyYXRvcjtcbiAgICAgIHRoaXMuX2l0ZXJhdG9yQ2FjaGUgPSBbXTtcbiAgICB9XG5cbiAgICBJdGVyYXRvclNlcS5wcm90b3R5cGUuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlcmF0b3I7XG4gICAgICB2YXIgY2FjaGUgPSB0aGlzLl9pdGVyYXRvckNhY2hlO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgd2hpbGUgKGl0ZXJhdGlvbnMgPCBjYWNoZS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGZuKGNhY2hlW2l0ZXJhdGlvbnNdLCBpdGVyYXRpb25zKyssIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgdmFyIHZhbCA9IHN0ZXAudmFsdWU7XG4gICAgICAgIGNhY2hlW2l0ZXJhdGlvbnNdID0gdmFsO1xuICAgICAgICBpZiAoZm4odmFsLCBpdGVyYXRpb25zKyssIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuXG4gICAgSXRlcmF0b3JTZXEucHJvdG90eXBlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXJhdG9yO1xuICAgICAgdmFyIGNhY2hlID0gdGhpcy5faXRlcmF0b3JDYWNoZTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICBpZiAoaXRlcmF0aW9ucyA+PSBjYWNoZS5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FjaGVbaXRlcmF0aW9uc10gPSBzdGVwLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMsIGNhY2hlW2l0ZXJhdGlvbnMrK10pO1xuICAgICAgfSk7XG4gICAgfTtcblxuXG5cblxuICAvLyAjIHByYWdtYSBIZWxwZXIgZnVuY3Rpb25zXG5cbiAgZnVuY3Rpb24gaXNTZXEobWF5YmVTZXEpIHtcbiAgICByZXR1cm4gISEobWF5YmVTZXEgJiYgbWF5YmVTZXFbSVNfU0VRX1NFTlRJTkVMXSk7XG4gIH1cblxuICB2YXIgRU1QVFlfU0VRO1xuXG4gIGZ1bmN0aW9uIGVtcHR5U2VxdWVuY2UoKSB7XG4gICAgcmV0dXJuIEVNUFRZX1NFUSB8fCAoRU1QVFlfU0VRID0gbmV3IEFycmF5U2VxKFtdKSk7XG4gIH1cblxuICBmdW5jdGlvbiBrZXllZFNlcUZyb21WYWx1ZSh2YWx1ZSkge1xuICAgIHZhciBzZXEgPVxuICAgICAgQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBuZXcgQXJyYXlTZXEodmFsdWUpLmZyb21FbnRyeVNlcSgpIDpcbiAgICAgIGlzSXRlcmF0b3IodmFsdWUpID8gbmV3IEl0ZXJhdG9yU2VxKHZhbHVlKS5mcm9tRW50cnlTZXEoKSA6XG4gICAgICBoYXNJdGVyYXRvcih2YWx1ZSkgPyBuZXcgSXRlcmFibGVTZXEodmFsdWUpLmZyb21FbnRyeVNlcSgpIDpcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgPyBuZXcgT2JqZWN0U2VxKHZhbHVlKSA6XG4gICAgICB1bmRlZmluZWQ7XG4gICAgaWYgKCFzZXEpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdFeHBlY3RlZCBBcnJheSBvciBpdGVyYWJsZSBvYmplY3Qgb2YgW2ssIHZdIGVudHJpZXMsICcrXG4gICAgICAgICdvciBrZXllZCBvYmplY3Q6ICcgKyB2YWx1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICB2YXIgc2VxID0gbWF5YmVJbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKTtcbiAgICBpZiAoIXNlcSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ0V4cGVjdGVkIEFycmF5IG9yIGl0ZXJhYmxlIG9iamVjdCBvZiB2YWx1ZXM6ICcgKyB2YWx1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlcUZyb21WYWx1ZSh2YWx1ZSkge1xuICAgIHZhciBzZXEgPSBtYXliZUluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHx8XG4gICAgICAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBuZXcgT2JqZWN0U2VxKHZhbHVlKSk7XG4gICAgaWYgKCFzZXEpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdFeHBlY3RlZCBBcnJheSBvciBpdGVyYWJsZSBvYmplY3Qgb2YgdmFsdWVzLCBvciBrZXllZCBvYmplY3Q6ICcgKyB2YWx1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1heWJlSW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiAoXG4gICAgICBpc0FycmF5TGlrZSh2YWx1ZSkgPyBuZXcgQXJyYXlTZXEodmFsdWUpIDpcbiAgICAgIGlzSXRlcmF0b3IodmFsdWUpID8gbmV3IEl0ZXJhdG9yU2VxKHZhbHVlKSA6XG4gICAgICBoYXNJdGVyYXRvcih2YWx1ZSkgPyBuZXcgSXRlcmFibGVTZXEodmFsdWUpIDpcbiAgICAgIHVuZGVmaW5lZFxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXFJdGVyYXRlKHNlcSwgZm4sIHJldmVyc2UsIHVzZUtleXMpIHtcbiAgICB2YXIgY2FjaGUgPSBzZXEuX2NhY2hlO1xuICAgIGlmIChjYWNoZSkge1xuICAgICAgdmFyIG1heEluZGV4ID0gY2FjaGUubGVuZ3RoIC0gMTtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gY2FjaGVbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG4gICAgICAgIGlmIChmbihlbnRyeVsxXSwgdXNlS2V5cyA/IGVudHJ5WzBdIDogaWksIHNlcSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH1cbiAgICByZXR1cm4gc2VxLl9faXRlcmF0ZVVuY2FjaGVkKGZuLCByZXZlcnNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlcUl0ZXJhdG9yKHNlcSwgdHlwZSwgcmV2ZXJzZSwgdXNlS2V5cykge1xuICAgIHZhciBjYWNoZSA9IHNlcS5fY2FjaGU7XG4gICAgaWYgKGNhY2hlKSB7XG4gICAgICB2YXIgbWF4SW5kZXggPSBjYWNoZS5sZW5ndGggLSAxO1xuICAgICAgdmFyIGlpID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgZW50cnkgPSBjYWNoZVtyZXZlcnNlID8gbWF4SW5kZXggLSBpaSA6IGlpXTtcbiAgICAgICAgcmV0dXJuIGlpKysgPiBtYXhJbmRleCA/XG4gICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgdXNlS2V5cyA/IGVudHJ5WzBdIDogaWkgLSAxLCBlbnRyeVsxXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcS5fX2l0ZXJhdG9yVW5jYWNoZWQodHlwZSwgcmV2ZXJzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBmcm9tSlMoanNvbiwgY29udmVydGVyKSB7XG4gICAgcmV0dXJuIGNvbnZlcnRlciA/XG4gICAgICBmcm9tSlNXaXRoKGNvbnZlcnRlciwganNvbiwgJycsIHsnJzoganNvbn0pIDpcbiAgICAgIGZyb21KU0RlZmF1bHQoanNvbik7XG4gIH1cblxuICBmdW5jdGlvbiBmcm9tSlNXaXRoKGNvbnZlcnRlciwganNvbiwga2V5LCBwYXJlbnRKU09OKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoanNvbikpIHtcbiAgICAgIHJldHVybiBjb252ZXJ0ZXIuY2FsbChwYXJlbnRKU09OLCBrZXksIEluZGV4ZWRTZXEoanNvbikubWFwKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIGZyb21KU1dpdGgoY29udmVydGVyLCB2LCBrLCBqc29uKX0pKTtcbiAgICB9XG4gICAgaWYgKGlzUGxhaW5PYmooanNvbikpIHtcbiAgICAgIHJldHVybiBjb252ZXJ0ZXIuY2FsbChwYXJlbnRKU09OLCBrZXksIEtleWVkU2VxKGpzb24pLm1hcChmdW5jdGlvbih2LCBrKSAge3JldHVybiBmcm9tSlNXaXRoKGNvbnZlcnRlciwgdiwgaywganNvbil9KSk7XG4gICAgfVxuICAgIHJldHVybiBqc29uO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJvbUpTRGVmYXVsdChqc29uKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoanNvbikpIHtcbiAgICAgIHJldHVybiBJbmRleGVkU2VxKGpzb24pLm1hcChmcm9tSlNEZWZhdWx0KS50b0xpc3QoKTtcbiAgICB9XG4gICAgaWYgKGlzUGxhaW5PYmooanNvbikpIHtcbiAgICAgIHJldHVybiBLZXllZFNlcShqc29uKS5tYXAoZnJvbUpTRGVmYXVsdCkudG9NYXAoKTtcbiAgICB9XG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICBmdW5jdGlvbiBpc1BsYWluT2JqKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmICh2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0IHx8IHZhbHVlLmNvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIGV4dGVuc2lvbiBvZiB0aGUgXCJzYW1lLXZhbHVlXCIgYWxnb3JpdGhtIGFzIFtkZXNjcmliZWQgZm9yIHVzZSBieSBFUzYgTWFwXG4gICAqIGFuZCBTZXRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hcCNLZXlfZXF1YWxpdHkpXG4gICAqXG4gICAqIE5hTiBpcyBjb25zaWRlcmVkIHRoZSBzYW1lIGFzIE5hTiwgaG93ZXZlciAtMCBhbmQgMCBhcmUgY29uc2lkZXJlZCB0aGUgc2FtZVxuICAgKiB2YWx1ZSwgd2hpY2ggaXMgZGlmZmVyZW50IGZyb20gdGhlIGFsZ29yaXRobSBkZXNjcmliZWQgYnlcbiAgICogW2BPYmplY3QuaXNgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXMpLlxuICAgKlxuICAgKiBUaGlzIGlzIGV4dGVuZGVkIGZ1cnRoZXIgdG8gYWxsb3cgT2JqZWN0cyB0byBkZXNjcmliZSB0aGUgdmFsdWVzIHRoZXlcbiAgICogcmVwcmVzZW50LCBieSB3YXkgb2YgYHZhbHVlT2ZgIG9yIGBlcXVhbHNgIChhbmQgYGhhc2hDb2RlYCkuXG4gICAqXG4gICAqIE5vdGU6IGJlY2F1c2Ugb2YgdGhpcyBleHRlbnNpb24sIHRoZSBrZXkgZXF1YWxpdHkgb2YgSW1tdXRhYmxlLk1hcCBhbmQgdGhlXG4gICAqIHZhbHVlIGVxdWFsaXR5IG9mIEltbXV0YWJsZS5TZXQgd2lsbCBkaWZmZXIgZnJvbSBFUzYgTWFwIGFuZCBTZXQuXG4gICAqXG4gICAqICMjIyBEZWZpbmluZyBjdXN0b20gdmFsdWVzXG4gICAqXG4gICAqIFRoZSBlYXNpZXN0IHdheSB0byBkZXNjcmliZSB0aGUgdmFsdWUgYW4gb2JqZWN0IHJlcHJlc2VudHMgaXMgYnkgaW1wbGVtZW50aW5nXG4gICAqIGB2YWx1ZU9mYC4gRm9yIGV4YW1wbGUsIGBEYXRlYCByZXByZXNlbnRzIGEgdmFsdWUgYnkgcmV0dXJuaW5nIGEgdW5peFxuICAgKiB0aW1lc3RhbXAgZm9yIGB2YWx1ZU9mYDpcbiAgICpcbiAgICogICAgIHZhciBkYXRlMSA9IG5ldyBEYXRlKDEyMzQ1Njc4OTAwMDApOyAvLyBGcmkgRmViIDEzIDIwMDkgLi4uXG4gICAqICAgICB2YXIgZGF0ZTIgPSBuZXcgRGF0ZSgxMjM0NTY3ODkwMDAwKTtcbiAgICogICAgIGRhdGUxLnZhbHVlT2YoKTsgLy8gMTIzNDU2Nzg5MDAwMFxuICAgKiAgICAgYXNzZXJ0KCBkYXRlMSAhPT0gZGF0ZTIgKTtcbiAgICogICAgIGFzc2VydCggSW1tdXRhYmxlLmlzKCBkYXRlMSwgZGF0ZTIgKSApO1xuICAgKlxuICAgKiBOb3RlOiBvdmVycmlkaW5nIGB2YWx1ZU9mYCBtYXkgaGF2ZSBvdGhlciBpbXBsaWNhdGlvbnMgaWYgeW91IHVzZSB0aGlzIG9iamVjdFxuICAgKiB3aGVyZSBKYXZhU2NyaXB0IGV4cGVjdHMgYSBwcmltaXRpdmUsIHN1Y2ggYXMgaW1wbGljaXQgc3RyaW5nIGNvZXJjaW9uLlxuICAgKlxuICAgKiBGb3IgbW9yZSBjb21wbGV4IHR5cGVzLCBlc3BlY2lhbGx5IGNvbGxlY3Rpb25zLCBpbXBsZW1lbnRpbmcgYHZhbHVlT2ZgIG1heVxuICAgKiBub3QgYmUgcGVyZm9ybWFudC4gQW4gYWx0ZXJuYXRpdmUgaXMgdG8gaW1wbGVtZW50IGBlcXVhbHNgIGFuZCBgaGFzaENvZGVgLlxuICAgKlxuICAgKiBgZXF1YWxzYCB0YWtlcyBhbm90aGVyIG9iamVjdCwgcHJlc3VtYWJseSBvZiBzaW1pbGFyIHR5cGUsIGFuZCByZXR1cm5zIHRydWVcbiAgICogaWYgdGhlIGl0IGlzIGVxdWFsLiBFcXVhbGl0eSBpcyBzeW1tZXRyaWNhbCwgc28gdGhlIHNhbWUgcmVzdWx0IHNob3VsZCBiZVxuICAgKiByZXR1cm5lZCBpZiB0aGlzIGFuZCB0aGUgYXJndW1lbnQgYXJlIGZsaXBwZWQuXG4gICAqXG4gICAqICAgICBhc3NlcnQoIGEuZXF1YWxzKGIpID09PSBiLmVxdWFscyhhKSApO1xuICAgKlxuICAgKiBgaGFzaENvZGVgIHJldHVybnMgYSAzMmJpdCBpbnRlZ2VyIG51bWJlciByZXByZXNlbnRpbmcgdGhlIG9iamVjdCB3aGljaCB3aWxsXG4gICAqIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGhvdyB0byBzdG9yZSB0aGUgdmFsdWUgb2JqZWN0IGluIGEgTWFwIG9yIFNldC4gWW91IG11c3RcbiAgICogcHJvdmlkZSBib3RoIG9yIG5laXRoZXIgbWV0aG9kcywgb25lIG11c3Qgbm90IGV4aXN0IHdpdGhvdXQgdGhlIG90aGVyLlxuICAgKlxuICAgKiBBbHNvLCBhbiBpbXBvcnRhbnQgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlc2UgbWV0aG9kcyBtdXN0IGJlIHVwaGVsZDogaWYgdHdvXG4gICAqIHZhbHVlcyBhcmUgZXF1YWwsIHRoZXkgKm11c3QqIHJldHVybiB0aGUgc2FtZSBoYXNoQ29kZS4gSWYgdGhlIHZhbHVlcyBhcmUgbm90XG4gICAqIGVxdWFsLCB0aGV5IG1pZ2h0IGhhdmUgdGhlIHNhbWUgaGFzaENvZGU7IHRoaXMgaXMgY2FsbGVkIGEgaGFzaCBjb2xsaXNpb24sXG4gICAqIGFuZCB3aGlsZSB1bmRlc2lyYWJsZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgaXQgaXMgYWNjZXB0YWJsZS5cbiAgICpcbiAgICogICAgIGlmIChhLmVxdWFscyhiKSkge1xuICAgKiAgICAgICBhc3NlcnQoIGEuaGFzaENvZGUoKSA9PT0gYi5oYXNoQ29kZSgpICk7XG4gICAqICAgICB9XG4gICAqXG4gICAqIEFsbCBJbW11dGFibGUgY29sbGVjdGlvbnMgaW1wbGVtZW50IGBlcXVhbHNgIGFuZCBgaGFzaENvZGVgLlxuICAgKlxuICAgKi9cbiAgZnVuY3Rpb24gaXModmFsdWVBLCB2YWx1ZUIpIHtcbiAgICBpZiAodmFsdWVBID09PSB2YWx1ZUIgfHwgKHZhbHVlQSAhPT0gdmFsdWVBICYmIHZhbHVlQiAhPT0gdmFsdWVCKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghdmFsdWVBIHx8ICF2YWx1ZUIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZUEudmFsdWVPZiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICB0eXBlb2YgdmFsdWVCLnZhbHVlT2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhbHVlQSA9IHZhbHVlQS52YWx1ZU9mKCk7XG4gICAgICB2YWx1ZUIgPSB2YWx1ZUIudmFsdWVPZigpO1xuICAgICAgaWYgKHZhbHVlQSA9PT0gdmFsdWVCIHx8ICh2YWx1ZUEgIT09IHZhbHVlQSAmJiB2YWx1ZUIgIT09IHZhbHVlQikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIXZhbHVlQSB8fCAhdmFsdWVCKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZUEuZXF1YWxzID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIHR5cGVvZiB2YWx1ZUIuZXF1YWxzID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIHZhbHVlQS5lcXVhbHModmFsdWVCKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZXBFcXVhbChhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICFpc0l0ZXJhYmxlKGIpIHx8XG4gICAgICBhLnNpemUgIT09IHVuZGVmaW5lZCAmJiBiLnNpemUgIT09IHVuZGVmaW5lZCAmJiBhLnNpemUgIT09IGIuc2l6ZSB8fFxuICAgICAgYS5fX2hhc2ggIT09IHVuZGVmaW5lZCAmJiBiLl9faGFzaCAhPT0gdW5kZWZpbmVkICYmIGEuX19oYXNoICE9PSBiLl9faGFzaCB8fFxuICAgICAgaXNLZXllZChhKSAhPT0gaXNLZXllZChiKSB8fFxuICAgICAgaXNJbmRleGVkKGEpICE9PSBpc0luZGV4ZWQoYikgfHxcbiAgICAgIGlzT3JkZXJlZChhKSAhPT0gaXNPcmRlcmVkKGIpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGEuc2l6ZSA9PT0gMCAmJiBiLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBub3RBc3NvY2lhdGl2ZSA9ICFpc0Fzc29jaWF0aXZlKGEpO1xuXG4gICAgaWYgKGlzT3JkZXJlZChhKSkge1xuICAgICAgdmFyIGVudHJpZXMgPSBhLmVudHJpZXMoKTtcbiAgICAgIHJldHVybiBiLmV2ZXJ5KGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXMubmV4dCgpLnZhbHVlO1xuICAgICAgICByZXR1cm4gZW50cnkgJiYgaXMoZW50cnlbMV0sIHYpICYmIChub3RBc3NvY2lhdGl2ZSB8fCBpcyhlbnRyeVswXSwgaykpO1xuICAgICAgfSkgJiYgZW50cmllcy5uZXh0KCkuZG9uZTtcbiAgICB9XG5cbiAgICB2YXIgZmxpcHBlZCA9IGZhbHNlO1xuXG4gICAgaWYgKGEuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoYi5zaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhLmNhY2hlUmVzdWx0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgYS5jYWNoZVJlc3VsdCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmbGlwcGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIF8gPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IF87XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFsbEVxdWFsID0gdHJ1ZTtcbiAgICB2YXIgYlNpemUgPSBiLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge1xuICAgICAgaWYgKG5vdEFzc29jaWF0aXZlID8gIWEuaGFzKHYpIDpcbiAgICAgICAgICBmbGlwcGVkID8gIWlzKHYsIGEuZ2V0KGssIE5PVF9TRVQpKSA6ICFpcyhhLmdldChrLCBOT1RfU0VUKSwgdikpIHtcbiAgICAgICAgYWxsRXF1YWwgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFsbEVxdWFsICYmIGEuc2l6ZSA9PT0gYlNpemU7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhSZXBlYXQsIEluZGV4ZWRTZXEpO1xuXG4gICAgZnVuY3Rpb24gUmVwZWF0KHZhbHVlLCB0aW1lcykge1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlcGVhdCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXBlYXQodmFsdWUsIHRpbWVzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLnNpemUgPSB0aW1lcyA9PT0gdW5kZWZpbmVkID8gSW5maW5pdHkgOiBNYXRoLm1heCgwLCB0aW1lcyk7XG4gICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICAgIGlmIChFTVBUWV9SRVBFQVQpIHtcbiAgICAgICAgICByZXR1cm4gRU1QVFlfUkVQRUFUO1xuICAgICAgICB9XG4gICAgICAgIEVNUFRZX1JFUEVBVCA9IHRoaXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgUmVwZWF0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gJ1JlcGVhdCBbXSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1JlcGVhdCBbICcgKyB0aGlzLl92YWx1ZSArICcgJyArIHRoaXMuc2l6ZSArICcgdGltZXMgXSc7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaW5kZXgsIG5vdFNldFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYXMoaW5kZXgpID8gdGhpcy5fdmFsdWUgOiBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgUmVwZWF0LnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICByZXR1cm4gaXModGhpcy5fdmFsdWUsIHNlYXJjaFZhbHVlKTtcbiAgICB9O1xuXG4gICAgUmVwZWF0LnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBzaXplID0gdGhpcy5zaXplO1xuICAgICAgcmV0dXJuIHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgc2l6ZSkgPyB0aGlzIDpcbiAgICAgICAgbmV3IFJlcGVhdCh0aGlzLl92YWx1ZSwgcmVzb2x2ZUVuZChlbmQsIHNpemUpIC0gcmVzb2x2ZUJlZ2luKGJlZ2luLCBzaXplKSk7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICBpZiAoaXModGhpcy5fdmFsdWUsIHNlYXJjaFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuXG4gICAgUmVwZWF0LnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICBpZiAoaXModGhpcy5fdmFsdWUsIHNlYXJjaFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgdGhpcy5zaXplOyBpaSsrKSB7XG4gICAgICAgIGlmIChmbih0aGlzLl92YWx1ZSwgaWksIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBpaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpaTtcbiAgICB9O1xuXG4gICAgUmVwZWF0LnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIGlpID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSBcbiAgICAgICAge3JldHVybiBpaSA8IHRoaXMkMC5zaXplID8gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpaSsrLCB0aGlzJDAuX3ZhbHVlKSA6IGl0ZXJhdG9yRG9uZSgpfVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgUmVwZWF0LnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihvdGhlcikge1xuICAgICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgUmVwZWF0ID9cbiAgICAgICAgaXModGhpcy5fdmFsdWUsIG90aGVyLl92YWx1ZSkgOlxuICAgICAgICBkZWVwRXF1YWwob3RoZXIpO1xuICAgIH07XG5cblxuICB2YXIgRU1QVFlfUkVQRUFUO1xuXG4gIGZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGVycm9yKSB7XG4gICAgaWYgKCFjb25kaXRpb24pIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhSYW5nZSwgSW5kZXhlZFNlcSk7XG5cbiAgICBmdW5jdGlvbiBSYW5nZShzdGFydCwgZW5kLCBzdGVwKSB7XG4gICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmFuZ2UpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCk7XG4gICAgICB9XG4gICAgICBpbnZhcmlhbnQoc3RlcCAhPT0gMCwgJ0Nhbm5vdCBzdGVwIGEgUmFuZ2UgYnkgMCcpO1xuICAgICAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IEluZmluaXR5O1xuICAgICAgfVxuICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IDEgOiBNYXRoLmFicyhzdGVwKTtcbiAgICAgIGlmIChlbmQgPCBzdGFydCkge1xuICAgICAgICBzdGVwID0gLXN0ZXA7XG4gICAgICB9XG4gICAgICB0aGlzLl9zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5fZW5kID0gZW5kO1xuICAgICAgdGhpcy5fc3RlcCA9IHN0ZXA7XG4gICAgICB0aGlzLnNpemUgPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoKGVuZCAtIHN0YXJ0KSAvIHN0ZXAgLSAxKSArIDEpO1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICBpZiAoRU1QVFlfUkFOR0UpIHtcbiAgICAgICAgICByZXR1cm4gRU1QVFlfUkFOR0U7XG4gICAgICAgIH1cbiAgICAgICAgRU1QVFlfUkFOR0UgPSB0aGlzO1xuICAgICAgfVxuICAgIH1cblxuICAgIFJhbmdlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gJ1JhbmdlIFtdJztcbiAgICAgIH1cbiAgICAgIHJldHVybiAnUmFuZ2UgWyAnICtcbiAgICAgICAgdGhpcy5fc3RhcnQgKyAnLi4uJyArIHRoaXMuX2VuZCArXG4gICAgICAgICh0aGlzLl9zdGVwID4gMSA/ICcgYnkgJyArIHRoaXMuX3N0ZXAgOiAnJykgK1xuICAgICAgJyBdJztcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzKGluZGV4KSA/XG4gICAgICAgIHRoaXMuX3N0YXJ0ICsgd3JhcEluZGV4KHRoaXMsIGluZGV4KSAqIHRoaXMuX3N0ZXAgOlxuICAgICAgICBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHZhciBwb3NzaWJsZUluZGV4ID0gKHNlYXJjaFZhbHVlIC0gdGhpcy5fc3RhcnQpIC8gdGhpcy5fc3RlcDtcbiAgICAgIHJldHVybiBwb3NzaWJsZUluZGV4ID49IDAgJiZcbiAgICAgICAgcG9zc2libGVJbmRleCA8IHRoaXMuc2l6ZSAmJlxuICAgICAgICBwb3NzaWJsZUluZGV4ID09PSBNYXRoLmZsb29yKHBvc3NpYmxlSW5kZXgpO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG4gICAgICBpZiAod2hvbGVTbGljZShiZWdpbiwgZW5kLCB0aGlzLnNpemUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgYmVnaW4gPSByZXNvbHZlQmVnaW4oYmVnaW4sIHRoaXMuc2l6ZSk7XG4gICAgICBlbmQgPSByZXNvbHZlRW5kKGVuZCwgdGhpcy5zaXplKTtcbiAgICAgIGlmIChlbmQgPD0gYmVnaW4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZSgwLCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgUmFuZ2UodGhpcy5nZXQoYmVnaW4sIHRoaXMuX2VuZCksIHRoaXMuZ2V0KGVuZCwgdGhpcy5fZW5kKSwgdGhpcy5fc3RlcCk7XG4gICAgfTtcblxuICAgIFJhbmdlLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHZhciBvZmZzZXRWYWx1ZSA9IHNlYXJjaFZhbHVlIC0gdGhpcy5fc3RhcnQ7XG4gICAgICBpZiAob2Zmc2V0VmFsdWUgJSB0aGlzLl9zdGVwID09PSAwKSB7XG4gICAgICAgIHZhciBpbmRleCA9IG9mZnNldFZhbHVlIC8gdGhpcy5fc3RlcDtcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLnNpemUpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXhcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZihzZWFyY2hWYWx1ZSk7XG4gICAgfTtcblxuICAgIFJhbmdlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgdmFyIG1heEluZGV4ID0gdGhpcy5zaXplIC0gMTtcbiAgICAgIHZhciBzdGVwID0gdGhpcy5fc3RlcDtcbiAgICAgIHZhciB2YWx1ZSA9IHJldmVyc2UgPyB0aGlzLl9zdGFydCArIG1heEluZGV4ICogc3RlcCA6IHRoaXMuX3N0YXJ0O1xuICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuICAgICAgICBpZiAoZm4odmFsdWUsIGlpLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gaWkgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlICs9IHJldmVyc2UgPyAtc3RlcCA6IHN0ZXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gaWk7XG4gICAgfTtcblxuICAgIFJhbmdlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIG1heEluZGV4ID0gdGhpcy5zaXplIC0gMTtcbiAgICAgIHZhciBzdGVwID0gdGhpcy5fc3RlcDtcbiAgICAgIHZhciB2YWx1ZSA9IHJldmVyc2UgPyB0aGlzLl9zdGFydCArIG1heEluZGV4ICogc3RlcCA6IHRoaXMuX3N0YXJ0O1xuICAgICAgdmFyIGlpID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgdiA9IHZhbHVlO1xuICAgICAgICB2YWx1ZSArPSByZXZlcnNlID8gLXN0ZXAgOiBzdGVwO1xuICAgICAgICByZXR1cm4gaWkgPiBtYXhJbmRleCA/IGl0ZXJhdG9yRG9uZSgpIDogaXRlcmF0b3JWYWx1ZSh0eXBlLCBpaSsrLCB2KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIFJhbmdlID9cbiAgICAgICAgdGhpcy5fc3RhcnQgPT09IG90aGVyLl9zdGFydCAmJlxuICAgICAgICB0aGlzLl9lbmQgPT09IG90aGVyLl9lbmQgJiZcbiAgICAgICAgdGhpcy5fc3RlcCA9PT0gb3RoZXIuX3N0ZXAgOlxuICAgICAgICBkZWVwRXF1YWwodGhpcywgb3RoZXIpO1xuICAgIH07XG5cblxuICB2YXIgRU1QVFlfUkFOR0U7XG5cbiAgY3JlYXRlQ2xhc3MoQ29sbGVjdGlvbiwgSXRlcmFibGUpO1xuICAgIGZ1bmN0aW9uIENvbGxlY3Rpb24oKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0Fic3RyYWN0Jyk7XG4gICAgfVxuXG5cbiAgY3JlYXRlQ2xhc3MoS2V5ZWRDb2xsZWN0aW9uLCBDb2xsZWN0aW9uKTtmdW5jdGlvbiBLZXllZENvbGxlY3Rpb24oKSB7fVxuXG4gIGNyZWF0ZUNsYXNzKEluZGV4ZWRDb2xsZWN0aW9uLCBDb2xsZWN0aW9uKTtmdW5jdGlvbiBJbmRleGVkQ29sbGVjdGlvbigpIHt9XG5cbiAgY3JlYXRlQ2xhc3MoU2V0Q29sbGVjdGlvbiwgQ29sbGVjdGlvbik7ZnVuY3Rpb24gU2V0Q29sbGVjdGlvbigpIHt9XG5cblxuICBDb2xsZWN0aW9uLktleWVkID0gS2V5ZWRDb2xsZWN0aW9uO1xuICBDb2xsZWN0aW9uLkluZGV4ZWQgPSBJbmRleGVkQ29sbGVjdGlvbjtcbiAgQ29sbGVjdGlvbi5TZXQgPSBTZXRDb2xsZWN0aW9uO1xuXG4gIHZhciBpbXVsID1cbiAgICB0eXBlb2YgTWF0aC5pbXVsID09PSAnZnVuY3Rpb24nICYmIE1hdGguaW11bCgweGZmZmZmZmZmLCAyKSA9PT0gLTIgP1xuICAgIE1hdGguaW11bCA6XG4gICAgZnVuY3Rpb24gaW11bChhLCBiKSB7XG4gICAgICBhID0gYSB8IDA7IC8vIGludFxuICAgICAgYiA9IGIgfCAwOyAvLyBpbnRcbiAgICAgIHZhciBjID0gYSAmIDB4ZmZmZjtcbiAgICAgIHZhciBkID0gYiAmIDB4ZmZmZjtcbiAgICAgIC8vIFNoaWZ0IGJ5IDAgZml4ZXMgdGhlIHNpZ24gb24gdGhlIGhpZ2ggcGFydC5cbiAgICAgIHJldHVybiAoYyAqIGQpICsgKCgoKGEgPj4+IDE2KSAqIGQgKyBjICogKGIgPj4+IDE2KSkgPDwgMTYpID4+PiAwKSB8IDA7IC8vIGludFxuICAgIH07XG5cbiAgLy8gdjggaGFzIGFuIG9wdGltaXphdGlvbiBmb3Igc3RvcmluZyAzMS1iaXQgc2lnbmVkIG51bWJlcnMuXG4gIC8vIFZhbHVlcyB3aGljaCBoYXZlIGVpdGhlciAwMCBvciAxMSBhcyB0aGUgaGlnaCBvcmRlciBiaXRzIHF1YWxpZnkuXG4gIC8vIFRoaXMgZnVuY3Rpb24gZHJvcHMgdGhlIGhpZ2hlc3Qgb3JkZXIgYml0IGluIGEgc2lnbmVkIG51bWJlciwgbWFpbnRhaW5pbmdcbiAgLy8gdGhlIHNpZ24gYml0LlxuICBmdW5jdGlvbiBzbWkoaTMyKSB7XG4gICAgcmV0dXJuICgoaTMyID4+PiAxKSAmIDB4NDAwMDAwMDApIHwgKGkzMiAmIDB4QkZGRkZGRkYpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzaChvKSB7XG4gICAgaWYgKG8gPT09IGZhbHNlIHx8IG8gPT09IG51bGwgfHwgbyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvLnZhbHVlT2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG8gPSBvLnZhbHVlT2YoKTtcbiAgICAgIGlmIChvID09PSBmYWxzZSB8fCBvID09PSBudWxsIHx8IG8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG8gPT09IHRydWUpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvO1xuICAgIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgdmFyIGggPSBvIHwgMDtcbiAgICAgIGlmIChoICE9PSBvKSB7XG4gICAgICAgIGggXj0gbyAqIDB4RkZGRkZGRkY7XG4gICAgICB9XG4gICAgICB3aGlsZSAobyA+IDB4RkZGRkZGRkYpIHtcbiAgICAgICAgbyAvPSAweEZGRkZGRkZGO1xuICAgICAgICBoIF49IG87XG4gICAgICB9XG4gICAgICByZXR1cm4gc21pKGgpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBvLmxlbmd0aCA+IFNUUklOR19IQVNIX0NBQ0hFX01JTl9TVFJMRU4gPyBjYWNoZWRIYXNoU3RyaW5nKG8pIDogaGFzaFN0cmluZyhvKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvLmhhc2hDb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gby5oYXNoQ29kZSgpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBoYXNoSlNPYmoobyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygby50b1N0cmluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGhhc2hTdHJpbmcoby50b1N0cmluZygpKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdWYWx1ZSB0eXBlICcgKyB0eXBlICsgJyBjYW5ub3QgYmUgaGFzaGVkLicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FjaGVkSGFzaFN0cmluZyhzdHJpbmcpIHtcbiAgICB2YXIgaGFzaCA9IHN0cmluZ0hhc2hDYWNoZVtzdHJpbmddO1xuICAgIGlmIChoYXNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc2ggPSBoYXNoU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSA9PT0gU1RSSU5HX0hBU0hfQ0FDSEVfTUFYX1NJWkUpIHtcbiAgICAgICAgU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSA9IDA7XG4gICAgICAgIHN0cmluZ0hhc2hDYWNoZSA9IHt9O1xuICAgICAgfVxuICAgICAgU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSsrO1xuICAgICAgc3RyaW5nSGFzaENhY2hlW3N0cmluZ10gPSBoYXNoO1xuICAgIH1cbiAgICByZXR1cm4gaGFzaDtcbiAgfVxuXG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2hhc2hpbmctc3RyaW5nc1xuICBmdW5jdGlvbiBoYXNoU3RyaW5nKHN0cmluZykge1xuICAgIC8vIFRoaXMgaXMgdGhlIGhhc2ggZnJvbSBKVk1cbiAgICAvLyBUaGUgaGFzaCBjb2RlIGZvciBhIHN0cmluZyBpcyBjb21wdXRlZCBhc1xuICAgIC8vIHNbMF0gKiAzMSBeIChuIC0gMSkgKyBzWzFdICogMzEgXiAobiAtIDIpICsgLi4uICsgc1tuIC0gMV0sXG4gICAgLy8gd2hlcmUgc1tpXSBpcyB0aGUgaXRoIGNoYXJhY3RlciBvZiB0aGUgc3RyaW5nIGFuZCBuIGlzIHRoZSBsZW5ndGggb2ZcbiAgICAvLyB0aGUgc3RyaW5nLiBXZSBcIm1vZFwiIHRoZSByZXN1bHQgdG8gbWFrZSBpdCBiZXR3ZWVuIDAgKGluY2x1c2l2ZSkgYW5kIDJeMzFcbiAgICAvLyAoZXhjbHVzaXZlKSBieSBkcm9wcGluZyBoaWdoIGJpdHMuXG4gICAgdmFyIGhhc2ggPSAwO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBzdHJpbmcubGVuZ3RoOyBpaSsrKSB7XG4gICAgICBoYXNoID0gMzEgKiBoYXNoICsgc3RyaW5nLmNoYXJDb2RlQXQoaWkpIHwgMDtcbiAgICB9XG4gICAgcmV0dXJuIHNtaShoYXNoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc2hKU09iaihvYmopIHtcbiAgICB2YXIgaGFzaDtcbiAgICBpZiAodXNpbmdXZWFrTWFwKSB7XG4gICAgICBoYXNoID0gd2Vha01hcC5nZXQob2JqKTtcbiAgICAgIGlmIChoYXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFzaCA9IG9ialtVSURfSEFTSF9LRVldO1xuICAgIGlmIChoYXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cblxuICAgIGlmICghY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgIGhhc2ggPSBvYmoucHJvcGVydHlJc0VudW1lcmFibGUgJiYgb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlW1VJRF9IQVNIX0tFWV07XG4gICAgICBpZiAoaGFzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgICAgfVxuXG4gICAgICBoYXNoID0gZ2V0SUVOb2RlSGFzaChvYmopO1xuICAgICAgaWYgKGhhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBoYXNoID0gKytvYmpIYXNoVUlEO1xuICAgIGlmIChvYmpIYXNoVUlEICYgMHg0MDAwMDAwMCkge1xuICAgICAgb2JqSGFzaFVJRCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHVzaW5nV2Vha01hcCkge1xuICAgICAgd2Vha01hcC5zZXQob2JqLCBoYXNoKTtcbiAgICB9IGVsc2UgaWYgKGlzRXh0ZW5zaWJsZSAhPT0gdW5kZWZpbmVkICYmIGlzRXh0ZW5zaWJsZShvYmopID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb24tZXh0ZW5zaWJsZSBvYmplY3RzIGFyZSBub3QgYWxsb3dlZCBhcyBrZXlzLicpO1xuICAgIH0gZWxzZSBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIFVJRF9IQVNIX0tFWSwge1xuICAgICAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICAgICAnY29uZmlndXJhYmxlJzogZmFsc2UsXG4gICAgICAgICd3cml0YWJsZSc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBoYXNoXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICBvYmoucHJvcGVydHlJc0VudW1lcmFibGUgPT09IG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUpIHtcbiAgICAgIC8vIFNpbmNlIHdlIGNhbid0IGRlZmluZSBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IG9uIHRoZSBvYmplY3RcbiAgICAgIC8vIHdlJ2xsIGhpamFjayBvbmUgb2YgdGhlIGxlc3MtdXNlZCBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIHRvXG4gICAgICAvLyBzYXZlIG91ciBoYXNoIG9uIGl0LiBTaW5jZSB0aGlzIGlzIGEgZnVuY3Rpb24gaXQgd2lsbCBub3Qgc2hvdyB1cCBpblxuICAgICAgLy8gYEpTT04uc3RyaW5naWZ5YCB3aGljaCBpcyB3aGF0IHdlIHdhbnQuXG4gICAgICBvYmoucHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlW1VJRF9IQVNIX0tFWV0gPSBoYXNoO1xuICAgIH0gZWxzZSBpZiAob2JqLm5vZGVUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgY291bGRuJ3QgZ2V0IHRoZSBJRSBgdW5pcXVlSURgIHRvIHVzZSBhcyBhIGhhc2hcbiAgICAgIC8vIGFuZCB3ZSBjb3VsZG4ndCB1c2UgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSB0byBleHBsb2l0IHRoZVxuICAgICAgLy8gZG9udEVudW0gYnVnIHNvIHdlIHNpbXBseSBhZGQgdGhlIGBVSURfSEFTSF9LRVlgIG9uIHRoZSBub2RlXG4gICAgICAvLyBpdHNlbGYuXG4gICAgICBvYmpbVUlEX0hBU0hfS0VZXSA9IGhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHNldCBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IG9uIG9iamVjdC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFzaDtcbiAgfVxuXG4gIC8vIEdldCByZWZlcmVuY2VzIHRvIEVTNSBvYmplY3QgbWV0aG9kcy5cbiAgdmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiAgLy8gVHJ1ZSBpZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgd29ya3MgYXMgZXhwZWN0ZWQuIElFOCBmYWlscyB0aGlzIHRlc3QuXG4gIHZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnQCcsIHt9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0oKSk7XG5cbiAgLy8gSUUgaGFzIGEgYHVuaXF1ZUlEYCBwcm9wZXJ0eSBvbiBET00gbm9kZXMuIFdlIGNhbiBjb25zdHJ1Y3QgdGhlIGhhc2ggZnJvbSBpdFxuICAvLyBhbmQgYXZvaWQgbWVtb3J5IGxlYWtzIGZyb20gdGhlIElFIGNsb25lTm9kZSBidWcuXG4gIGZ1bmN0aW9uIGdldElFTm9kZUhhc2gobm9kZSkge1xuICAgIGlmIChub2RlICYmIG5vZGUubm9kZVR5cGUgPiAwKSB7XG4gICAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcbiAgICAgICAgY2FzZSAxOiAvLyBFbGVtZW50XG4gICAgICAgICAgcmV0dXJuIG5vZGUudW5pcXVlSUQ7XG4gICAgICAgIGNhc2UgOTogLy8gRG9jdW1lbnRcbiAgICAgICAgICByZXR1cm4gbm9kZS5kb2N1bWVudEVsZW1lbnQgJiYgbm9kZS5kb2N1bWVudEVsZW1lbnQudW5pcXVlSUQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgcG9zc2libGUsIHVzZSBhIFdlYWtNYXAuXG4gIHZhciB1c2luZ1dlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJztcbiAgdmFyIHdlYWtNYXA7XG4gIGlmICh1c2luZ1dlYWtNYXApIHtcbiAgICB3ZWFrTWFwID0gbmV3IFdlYWtNYXAoKTtcbiAgfVxuXG4gIHZhciBvYmpIYXNoVUlEID0gMDtcblxuICB2YXIgVUlEX0hBU0hfS0VZID0gJ19faW1tdXRhYmxlaGFzaF9fJztcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcbiAgICBVSURfSEFTSF9LRVkgPSBTeW1ib2woVUlEX0hBU0hfS0VZKTtcbiAgfVxuXG4gIHZhciBTVFJJTkdfSEFTSF9DQUNIRV9NSU5fU1RSTEVOID0gMTY7XG4gIHZhciBTVFJJTkdfSEFTSF9DQUNIRV9NQVhfU0laRSA9IDI1NTtcbiAgdmFyIFNUUklOR19IQVNIX0NBQ0hFX1NJWkUgPSAwO1xuICB2YXIgc3RyaW5nSGFzaENhY2hlID0ge307XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm90SW5maW5pdGUoc2l6ZSkge1xuICAgIGludmFyaWFudChcbiAgICAgIHNpemUgIT09IEluZmluaXR5LFxuICAgICAgJ0Nhbm5vdCBwZXJmb3JtIHRoaXMgYWN0aW9uIHdpdGggYW4gaW5maW5pdGUgc2l6ZS4nXG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKE1hcCwgS2V5ZWRDb2xsZWN0aW9uKTtcblxuICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cbiAgICBmdW5jdGlvbiBNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlNYXAoKSA6XG4gICAgICAgIGlzTWFwKHZhbHVlKSAmJiAhaXNPcmRlcmVkKHZhbHVlKSA/IHZhbHVlIDpcbiAgICAgICAgZW1wdHlNYXAoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKG1hcCApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IEtleWVkSXRlcmFibGUodmFsdWUpO1xuICAgICAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgICAgICAgaXRlci5mb3JFYWNoKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIG1hcC5zZXQoaywgdil9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgTWFwLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnTWFwIHsnLCAnfScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrLCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jvb3QgP1xuICAgICAgICB0aGlzLl9yb290LmdldCgwLCB1bmRlZmluZWQsIGssIG5vdFNldFZhbHVlKSA6XG4gICAgICAgIG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXG4gICAgTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrLCB2KSB7XG4gICAgICByZXR1cm4gdXBkYXRlTWFwKHRoaXMsIGssIHYpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLnNldEluID0gZnVuY3Rpb24oa2V5UGF0aCwgdikge1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSW4oa2V5UGF0aCwgTk9UX1NFVCwgZnVuY3Rpb24oKSAge3JldHVybiB2fSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oaykge1xuICAgICAgcmV0dXJuIHVwZGF0ZU1hcCh0aGlzLCBrLCBOT1RfU0VUKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5kZWxldGVJbiA9IGZ1bmN0aW9uKGtleVBhdGgpIHtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUluKGtleVBhdGgsIGZ1bmN0aW9uKCkgIHtyZXR1cm4gTk9UX1NFVH0pO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKGssIG5vdFNldFZhbHVlLCB1cGRhdGVyKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG4gICAgICAgIGsodGhpcykgOlxuICAgICAgICB0aGlzLnVwZGF0ZUluKFtrXSwgbm90U2V0VmFsdWUsIHVwZGF0ZXIpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLnVwZGF0ZUluID0gZnVuY3Rpb24oa2V5UGF0aCwgbm90U2V0VmFsdWUsIHVwZGF0ZXIpIHtcbiAgICAgIGlmICghdXBkYXRlcikge1xuICAgICAgICB1cGRhdGVyID0gbm90U2V0VmFsdWU7XG4gICAgICAgIG5vdFNldFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIHVwZGF0ZWRWYWx1ZSA9IHVwZGF0ZUluRGVlcE1hcChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgZm9yY2VJdGVyYXRvcihrZXlQYXRoKSxcbiAgICAgICAgbm90U2V0VmFsdWUsXG4gICAgICAgIHVwZGF0ZXJcbiAgICAgICk7XG4gICAgICByZXR1cm4gdXBkYXRlZFZhbHVlID09PSBOT1RfU0VUID8gdW5kZWZpbmVkIDogdXBkYXRlZFZhbHVlO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xuICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbXB0eU1hcCgpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIENvbXBvc2l0aW9uXG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24oLyouLi5pdGVycyovKSB7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTWFwV2l0aCh0aGlzLCB1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUubWVyZ2VXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTWFwV2l0aCh0aGlzLCBtZXJnZXIsIGl0ZXJzKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5tZXJnZUluID0gZnVuY3Rpb24oa2V5UGF0aCkge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSW4oXG4gICAgICAgIGtleVBhdGgsXG4gICAgICAgIGVtcHR5TWFwKCksXG4gICAgICAgIGZ1bmN0aW9uKG0gKSB7cmV0dXJuIHR5cGVvZiBtLm1lcmdlID09PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICBtLm1lcmdlLmFwcGx5KG0sIGl0ZXJzKSA6XG4gICAgICAgICAgaXRlcnNbaXRlcnMubGVuZ3RoIC0gMV19XG4gICAgICApO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlRGVlcCA9IGZ1bmN0aW9uKC8qLi4uaXRlcnMqLykge1xuICAgICAgcmV0dXJuIG1lcmdlSW50b01hcFdpdGgodGhpcywgZGVlcE1lcmdlciwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTWFwV2l0aCh0aGlzLCBkZWVwTWVyZ2VyV2l0aChtZXJnZXIpLCBpdGVycyk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUubWVyZ2VEZWVwSW4gPSBmdW5jdGlvbihrZXlQYXRoKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVJbihcbiAgICAgICAga2V5UGF0aCxcbiAgICAgICAgZW1wdHlNYXAoKSxcbiAgICAgICAgZnVuY3Rpb24obSApIHtyZXR1cm4gdHlwZW9mIG0ubWVyZ2VEZWVwID09PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICBtLm1lcmdlRGVlcC5hcHBseShtLCBpdGVycykgOlxuICAgICAgICAgIGl0ZXJzW2l0ZXJzLmxlbmd0aCAtIDFdfVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgICAgLy8gTGF0ZSBiaW5kaW5nXG4gICAgICByZXR1cm4gT3JkZXJlZE1hcChzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yKSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuc29ydEJ5ID0gZnVuY3Rpb24obWFwcGVyLCBjb21wYXJhdG9yKSB7XG4gICAgICAvLyBMYXRlIGJpbmRpbmdcbiAgICAgIHJldHVybiBPcmRlcmVkTWFwKHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IsIG1hcHBlcikpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIE11dGFiaWxpdHlcblxuICAgIE1hcC5wcm90b3R5cGUud2l0aE11dGF0aW9ucyA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgICB2YXIgbXV0YWJsZSA9IHRoaXMuYXNNdXRhYmxlKCk7XG4gICAgICBmbihtdXRhYmxlKTtcbiAgICAgIHJldHVybiBtdXRhYmxlLndhc0FsdGVyZWQoKSA/IG11dGFibGUuX19lbnN1cmVPd25lcih0aGlzLl9fb3duZXJJRCkgOiB0aGlzO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLmFzTXV0YWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19vd25lcklEID8gdGhpcyA6IHRoaXMuX19lbnN1cmVPd25lcihuZXcgT3duZXJJRCgpKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5hc0ltbXV0YWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19lbnN1cmVPd25lcigpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLndhc0FsdGVyZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fYWx0ZXJlZDtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLCB0eXBlLCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgdGhpcy5fcm9vdCAmJiB0aGlzLl9yb290Lml0ZXJhdGUoZnVuY3Rpb24oZW50cnkgKSB7XG4gICAgICAgIGl0ZXJhdGlvbnMrKztcbiAgICAgICAgcmV0dXJuIGZuKGVudHJ5WzFdLCBlbnRyeVswXSwgdGhpcyQwKTtcbiAgICAgIH0sIHJldmVyc2UpO1xuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcbiAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmICghb3duZXJJRCkge1xuICAgICAgICB0aGlzLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgICAgIHRoaXMuX19hbHRlcmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VNYXAodGhpcy5zaXplLCB0aGlzLl9yb290LCBvd25lcklELCB0aGlzLl9faGFzaCk7XG4gICAgfTtcblxuXG4gIGZ1bmN0aW9uIGlzTWFwKG1heWJlTWFwKSB7XG4gICAgcmV0dXJuICEhKG1heWJlTWFwICYmIG1heWJlTWFwW0lTX01BUF9TRU5USU5FTF0pO1xuICB9XG5cbiAgTWFwLmlzTWFwID0gaXNNYXA7XG5cbiAgdmFyIElTX01BUF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX01BUF9fQEAnO1xuXG4gIHZhciBNYXBQcm90b3R5cGUgPSBNYXAucHJvdG90eXBlO1xuICBNYXBQcm90b3R5cGVbSVNfTUFQX1NFTlRJTkVMXSA9IHRydWU7XG4gIE1hcFByb3RvdHlwZVtERUxFVEVdID0gTWFwUHJvdG90eXBlLnJlbW92ZTtcbiAgTWFwUHJvdG90eXBlLnJlbW92ZUluID0gTWFwUHJvdG90eXBlLmRlbGV0ZUluO1xuXG5cbiAgLy8gI3ByYWdtYSBUcmllIE5vZGVzXG5cblxuXG4gICAgZnVuY3Rpb24gQXJyYXlNYXBOb2RlKG93bmVySUQsIGVudHJpZXMpIHtcbiAgICAgIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG4gICAgICB0aGlzLmVudHJpZXMgPSBlbnRyaWVzO1xuICAgIH1cblxuICAgIEFycmF5TWFwTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgICAgZm9yICh2YXIgaWkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyspIHtcbiAgICAgICAgaWYgKGlzKGtleSwgZW50cmllc1tpaV1bMF0pKSB7XG4gICAgICAgICAgcmV0dXJuIGVudHJpZXNbaWldWzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIEFycmF5TWFwTm9kZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ob3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKSB7XG4gICAgICB2YXIgcmVtb3ZlZCA9IHZhbHVlID09PSBOT1RfU0VUO1xuXG4gICAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgICAgIHZhciBpZHggPSAwO1xuICAgICAgZm9yICh2YXIgbGVuID0gZW50cmllcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgaWYgKGlzKGtleSwgZW50cmllc1tpZHhdWzBdKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgZXhpc3RzID0gaWR4IDwgbGVuO1xuXG4gICAgICBpZiAoZXhpc3RzID8gZW50cmllc1tpZHhdWzFdID09PSB2YWx1ZSA6IHJlbW92ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIFNldFJlZihkaWRBbHRlcik7XG4gICAgICAocmVtb3ZlZCB8fCAhZXhpc3RzKSAmJiBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG5cbiAgICAgIGlmIChyZW1vdmVkICYmIGVudHJpZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICB9XG5cbiAgICAgIGlmICghZXhpc3RzICYmICFyZW1vdmVkICYmIGVudHJpZXMubGVuZ3RoID49IE1BWF9BUlJBWV9NQVBfU0laRSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTm9kZXMob3duZXJJRCwgZW50cmllcywga2V5LCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpc0VkaXRhYmxlID0gb3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQ7XG4gICAgICB2YXIgbmV3RW50cmllcyA9IGlzRWRpdGFibGUgPyBlbnRyaWVzIDogYXJyQ29weShlbnRyaWVzKTtcblxuICAgICAgaWYgKGV4aXN0cykge1xuICAgICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICAgIGlkeCA9PT0gbGVuIC0gMSA/IG5ld0VudHJpZXMucG9wKCkgOiAobmV3RW50cmllc1tpZHhdID0gbmV3RW50cmllcy5wb3AoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3RW50cmllc1tpZHhdID0gW2tleSwgdmFsdWVdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdFbnRyaWVzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRWRpdGFibGUpIHtcbiAgICAgICAgdGhpcy5lbnRyaWVzID0gbmV3RW50cmllcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgQXJyYXlNYXBOb2RlKG93bmVySUQsIG5ld0VudHJpZXMpO1xuICAgIH07XG5cblxuXG5cbiAgICBmdW5jdGlvbiBCaXRtYXBJbmRleGVkTm9kZShvd25lcklELCBiaXRtYXAsIG5vZGVzKSB7XG4gICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5iaXRtYXAgPSBiaXRtYXA7XG4gICAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG4gICAgfVxuXG4gICAgQml0bWFwSW5kZXhlZE5vZGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICBpZiAoa2V5SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGtleUhhc2ggPSBoYXNoKGtleSk7XG4gICAgICB9XG4gICAgICB2YXIgYml0ID0gKDEgPDwgKChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLKSk7XG4gICAgICB2YXIgYml0bWFwID0gdGhpcy5iaXRtYXA7XG4gICAgICByZXR1cm4gKGJpdG1hcCAmIGJpdCkgPT09IDAgPyBub3RTZXRWYWx1ZSA6XG4gICAgICAgIHRoaXMubm9kZXNbcG9wQ291bnQoYml0bWFwICYgKGJpdCAtIDEpKV0uZ2V0KHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpO1xuICAgIH07XG5cbiAgICBCaXRtYXBJbmRleGVkTm9kZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ob3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKSB7XG4gICAgICBpZiAoa2V5SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGtleUhhc2ggPSBoYXNoKGtleSk7XG4gICAgICB9XG4gICAgICB2YXIga2V5SGFzaEZyYWcgPSAoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSztcbiAgICAgIHZhciBiaXQgPSAxIDw8IGtleUhhc2hGcmFnO1xuICAgICAgdmFyIGJpdG1hcCA9IHRoaXMuYml0bWFwO1xuICAgICAgdmFyIGV4aXN0cyA9IChiaXRtYXAgJiBiaXQpICE9PSAwO1xuXG4gICAgICBpZiAoIWV4aXN0cyAmJiB2YWx1ZSA9PT0gTk9UX1NFVCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIGlkeCA9IHBvcENvdW50KGJpdG1hcCAmIChiaXQgLSAxKSk7XG4gICAgICB2YXIgbm9kZXMgPSB0aGlzLm5vZGVzO1xuICAgICAgdmFyIG5vZGUgPSBleGlzdHMgPyBub2Rlc1tpZHhdIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIG5ld05vZGUgPSB1cGRhdGVOb2RlKG5vZGUsIG93bmVySUQsIHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKTtcblxuICAgICAgaWYgKG5ld05vZGUgPT09IG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXhpc3RzICYmIG5ld05vZGUgJiYgbm9kZXMubGVuZ3RoID49IE1BWF9CSVRNQVBfSU5ERVhFRF9TSVpFKSB7XG4gICAgICAgIHJldHVybiBleHBhbmROb2Rlcyhvd25lcklELCBub2RlcywgYml0bWFwLCBrZXlIYXNoRnJhZywgbmV3Tm9kZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChleGlzdHMgJiYgIW5ld05vZGUgJiYgbm9kZXMubGVuZ3RoID09PSAyICYmIGlzTGVhZk5vZGUobm9kZXNbaWR4IF4gMV0pKSB7XG4gICAgICAgIHJldHVybiBub2Rlc1tpZHggXiAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV4aXN0cyAmJiBuZXdOb2RlICYmIG5vZGVzLmxlbmd0aCA9PT0gMSAmJiBpc0xlYWZOb2RlKG5ld05vZGUpKSB7XG4gICAgICAgIHJldHVybiBuZXdOb2RlO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuICAgICAgdmFyIG5ld0JpdG1hcCA9IGV4aXN0cyA/IG5ld05vZGUgPyBiaXRtYXAgOiBiaXRtYXAgXiBiaXQgOiBiaXRtYXAgfCBiaXQ7XG4gICAgICB2YXIgbmV3Tm9kZXMgPSBleGlzdHMgPyBuZXdOb2RlID9cbiAgICAgICAgc2V0SW4obm9kZXMsIGlkeCwgbmV3Tm9kZSwgaXNFZGl0YWJsZSkgOlxuICAgICAgICBzcGxpY2VPdXQobm9kZXMsIGlkeCwgaXNFZGl0YWJsZSkgOlxuICAgICAgICBzcGxpY2VJbihub2RlcywgaWR4LCBuZXdOb2RlLCBpc0VkaXRhYmxlKTtcblxuICAgICAgaWYgKGlzRWRpdGFibGUpIHtcbiAgICAgICAgdGhpcy5iaXRtYXAgPSBuZXdCaXRtYXA7XG4gICAgICAgIHRoaXMubm9kZXMgPSBuZXdOb2RlcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgQml0bWFwSW5kZXhlZE5vZGUob3duZXJJRCwgbmV3Qml0bWFwLCBuZXdOb2Rlcyk7XG4gICAgfTtcblxuXG5cblxuICAgIGZ1bmN0aW9uIEhhc2hBcnJheU1hcE5vZGUob3duZXJJRCwgY291bnQsIG5vZGVzKSB7XG4gICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5jb3VudCA9IGNvdW50O1xuICAgICAgdGhpcy5ub2RlcyA9IG5vZGVzO1xuICAgIH1cblxuICAgIEhhc2hBcnJheU1hcE5vZGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICBpZiAoa2V5SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGtleUhhc2ggPSBoYXNoKGtleSk7XG4gICAgICB9XG4gICAgICB2YXIgaWR4ID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZXNbaWR4XTtcbiAgICAgIHJldHVybiBub2RlID8gbm9kZS5nZXQoc2hpZnQgKyBTSElGVCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkgOiBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgSGFzaEFycmF5TWFwTm9kZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ob3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKSB7XG4gICAgICBpZiAoa2V5SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGtleUhhc2ggPSBoYXNoKGtleSk7XG4gICAgICB9XG4gICAgICB2YXIgaWR4ID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG4gICAgICB2YXIgcmVtb3ZlZCA9IHZhbHVlID09PSBOT1RfU0VUO1xuICAgICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcbiAgICAgIHZhciBub2RlID0gbm9kZXNbaWR4XTtcblxuICAgICAgaWYgKHJlbW92ZWQgJiYgIW5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdOb2RlID0gdXBkYXRlTm9kZShub2RlLCBvd25lcklELCBzaGlmdCArIFNISUZULCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcik7XG4gICAgICBpZiAobmV3Tm9kZSA9PT0gbm9kZSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld0NvdW50ID0gdGhpcy5jb3VudDtcbiAgICAgIGlmICghbm9kZSkge1xuICAgICAgICBuZXdDb3VudCsrO1xuICAgICAgfSBlbHNlIGlmICghbmV3Tm9kZSkge1xuICAgICAgICBuZXdDb3VudC0tO1xuICAgICAgICBpZiAobmV3Q291bnQgPCBNSU5fSEFTSF9BUlJBWV9NQVBfU0laRSkge1xuICAgICAgICAgIHJldHVybiBwYWNrTm9kZXMob3duZXJJRCwgbm9kZXMsIG5ld0NvdW50LCBpZHgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBpc0VkaXRhYmxlID0gb3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQ7XG4gICAgICB2YXIgbmV3Tm9kZXMgPSBzZXRJbihub2RlcywgaWR4LCBuZXdOb2RlLCBpc0VkaXRhYmxlKTtcblxuICAgICAgaWYgKGlzRWRpdGFibGUpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IG5ld0NvdW50O1xuICAgICAgICB0aGlzLm5vZGVzID0gbmV3Tm9kZXM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IEhhc2hBcnJheU1hcE5vZGUob3duZXJJRCwgbmV3Q291bnQsIG5ld05vZGVzKTtcbiAgICB9O1xuXG5cblxuXG4gICAgZnVuY3Rpb24gSGFzaENvbGxpc2lvbk5vZGUob3duZXJJRCwga2V5SGFzaCwgZW50cmllcykge1xuICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMua2V5SGFzaCA9IGtleUhhc2g7XG4gICAgICB0aGlzLmVudHJpZXMgPSBlbnRyaWVzO1xuICAgIH1cblxuICAgIEhhc2hDb2xsaXNpb25Ob2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG4gICAgICBmb3IgKHZhciBpaSA9IDAsIGxlbiA9IGVudHJpZXMubGVuZ3RoOyBpaSA8IGxlbjsgaWkrKykge1xuICAgICAgICBpZiAoaXMoa2V5LCBlbnRyaWVzW2lpXVswXSkpIHtcbiAgICAgICAgICByZXR1cm4gZW50cmllc1tpaV1bMV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgSGFzaENvbGxpc2lvbk5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVtb3ZlZCA9IHZhbHVlID09PSBOT1RfU0VUO1xuXG4gICAgICBpZiAoa2V5SGFzaCAhPT0gdGhpcy5rZXlIYXNoKSB7XG4gICAgICAgIGlmIChyZW1vdmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgU2V0UmVmKGRpZEFsdGVyKTtcbiAgICAgICAgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuICAgICAgICByZXR1cm4gbWVyZ2VJbnRvTm9kZSh0aGlzLCBvd25lcklELCBzaGlmdCwga2V5SGFzaCwgW2tleSwgdmFsdWVdKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG4gICAgICB2YXIgaWR4ID0gMDtcbiAgICAgIGZvciAodmFyIGxlbiA9IGVudHJpZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgIGlmIChpcyhrZXksIGVudHJpZXNbaWR4XVswXSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGV4aXN0cyA9IGlkeCA8IGxlbjtcblxuICAgICAgaWYgKGV4aXN0cyA/IGVudHJpZXNbaWR4XVsxXSA9PT0gdmFsdWUgOiByZW1vdmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuICAgICAgKHJlbW92ZWQgfHwgIWV4aXN0cykgJiYgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuXG4gICAgICBpZiAocmVtb3ZlZCAmJiBsZW4gPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZU5vZGUob3duZXJJRCwgdGhpcy5rZXlIYXNoLCBlbnRyaWVzW2lkeCBeIDFdKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzRWRpdGFibGUgPSBvd25lcklEICYmIG93bmVySUQgPT09IHRoaXMub3duZXJJRDtcbiAgICAgIHZhciBuZXdFbnRyaWVzID0gaXNFZGl0YWJsZSA/IGVudHJpZXMgOiBhcnJDb3B5KGVudHJpZXMpO1xuXG4gICAgICBpZiAoZXhpc3RzKSB7XG4gICAgICAgIGlmIChyZW1vdmVkKSB7XG4gICAgICAgICAgaWR4ID09PSBsZW4gLSAxID8gbmV3RW50cmllcy5wb3AoKSA6IChuZXdFbnRyaWVzW2lkeF0gPSBuZXdFbnRyaWVzLnBvcCgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdFbnRyaWVzW2lkeF0gPSBba2V5LCB2YWx1ZV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0VudHJpZXMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNFZGl0YWJsZSkge1xuICAgICAgICB0aGlzLmVudHJpZXMgPSBuZXdFbnRyaWVzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBIYXNoQ29sbGlzaW9uTm9kZShvd25lcklELCB0aGlzLmtleUhhc2gsIG5ld0VudHJpZXMpO1xuICAgIH07XG5cblxuXG5cbiAgICBmdW5jdGlvbiBWYWx1ZU5vZGUob3duZXJJRCwga2V5SGFzaCwgZW50cnkpIHtcbiAgICAgIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG4gICAgICB0aGlzLmtleUhhc2ggPSBrZXlIYXNoO1xuICAgICAgdGhpcy5lbnRyeSA9IGVudHJ5O1xuICAgIH1cblxuICAgIFZhbHVlTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiBpcyhrZXksIHRoaXMuZW50cnlbMF0pID8gdGhpcy5lbnRyeVsxXSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBWYWx1ZU5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcbiAgICAgIHZhciBrZXlNYXRjaCA9IGlzKGtleSwgdGhpcy5lbnRyeVswXSk7XG4gICAgICBpZiAoa2V5TWF0Y2ggPyB2YWx1ZSA9PT0gdGhpcy5lbnRyeVsxXSA6IHJlbW92ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIFNldFJlZihkaWRBbHRlcik7XG5cbiAgICAgIGlmIChyZW1vdmVkKSB7XG4gICAgICAgIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcbiAgICAgICAgcmV0dXJuOyAvLyB1bmRlZmluZWRcbiAgICAgIH1cblxuICAgICAgaWYgKGtleU1hdGNoKSB7XG4gICAgICAgIGlmIChvd25lcklEICYmIG93bmVySUQgPT09IHRoaXMub3duZXJJRCkge1xuICAgICAgICAgIHRoaXMuZW50cnlbMV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlTm9kZShvd25lcklELCB0aGlzLmtleUhhc2gsIFtrZXksIHZhbHVlXSk7XG4gICAgICB9XG5cbiAgICAgIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcbiAgICAgIHJldHVybiBtZXJnZUludG9Ob2RlKHRoaXMsIG93bmVySUQsIHNoaWZ0LCBoYXNoKGtleSksIFtrZXksIHZhbHVlXSk7XG4gICAgfTtcblxuXG5cbiAgLy8gI3ByYWdtYSBJdGVyYXRvcnNcblxuICBBcnJheU1hcE5vZGUucHJvdG90eXBlLml0ZXJhdGUgPVxuICBIYXNoQ29sbGlzaW9uTm9kZS5wcm90b3R5cGUuaXRlcmF0ZSA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgIGZvciAodmFyIGlpID0gMCwgbWF4SW5kZXggPSBlbnRyaWVzLmxlbmd0aCAtIDE7IGlpIDw9IG1heEluZGV4OyBpaSsrKSB7XG4gICAgICBpZiAoZm4oZW50cmllc1tyZXZlcnNlID8gbWF4SW5kZXggLSBpaSA6IGlpXSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBCaXRtYXBJbmRleGVkTm9kZS5wcm90b3R5cGUuaXRlcmF0ZSA9XG4gIEhhc2hBcnJheU1hcE5vZGUucHJvdG90eXBlLml0ZXJhdGUgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgbm9kZXMgPSB0aGlzLm5vZGVzO1xuICAgIGZvciAodmFyIGlpID0gMCwgbWF4SW5kZXggPSBub2Rlcy5sZW5ndGggLSAxOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tyZXZlcnNlID8gbWF4SW5kZXggLSBpaSA6IGlpXTtcbiAgICAgIGlmIChub2RlICYmIG5vZGUuaXRlcmF0ZShmbiwgcmV2ZXJzZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBWYWx1ZU5vZGUucHJvdG90eXBlLml0ZXJhdGUgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHtcbiAgICByZXR1cm4gZm4odGhpcy5lbnRyeSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhNYXBJdGVyYXRvciwgSXRlcmF0b3IpO1xuXG4gICAgZnVuY3Rpb24gTWFwSXRlcmF0b3IobWFwLCB0eXBlLCByZXZlcnNlKSB7XG4gICAgICB0aGlzLl90eXBlID0gdHlwZTtcbiAgICAgIHRoaXMuX3JldmVyc2UgPSByZXZlcnNlO1xuICAgICAgdGhpcy5fc3RhY2sgPSBtYXAuX3Jvb3QgJiYgbWFwSXRlcmF0b3JGcmFtZShtYXAuX3Jvb3QpO1xuICAgIH1cblxuICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdHlwZSA9IHRoaXMuX3R5cGU7XG4gICAgICB2YXIgc3RhY2sgPSB0aGlzLl9zdGFjaztcbiAgICAgIHdoaWxlIChzdGFjaykge1xuICAgICAgICB2YXIgbm9kZSA9IHN0YWNrLm5vZGU7XG4gICAgICAgIHZhciBpbmRleCA9IHN0YWNrLmluZGV4Kys7XG4gICAgICAgIHZhciBtYXhJbmRleDtcbiAgICAgICAgaWYgKG5vZGUuZW50cnkpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBtYXBJdGVyYXRvclZhbHVlKHR5cGUsIG5vZGUuZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChub2RlLmVudHJpZXMpIHtcbiAgICAgICAgICBtYXhJbmRleCA9IG5vZGUuZW50cmllcy5sZW5ndGggLSAxO1xuICAgICAgICAgIGlmIChpbmRleCA8PSBtYXhJbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIG1hcEl0ZXJhdG9yVmFsdWUodHlwZSwgbm9kZS5lbnRyaWVzW3RoaXMuX3JldmVyc2UgPyBtYXhJbmRleCAtIGluZGV4IDogaW5kZXhdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF4SW5kZXggPSBub2RlLm5vZGVzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgaWYgKGluZGV4IDw9IG1heEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgc3ViTm9kZSA9IG5vZGUubm9kZXNbdGhpcy5fcmV2ZXJzZSA/IG1heEluZGV4IC0gaW5kZXggOiBpbmRleF07XG4gICAgICAgICAgICBpZiAoc3ViTm9kZSkge1xuICAgICAgICAgICAgICBpZiAoc3ViTm9kZS5lbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXBJdGVyYXRvclZhbHVlKHR5cGUsIHN1Yk5vZGUuZW50cnkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHN0YWNrID0gdGhpcy5fc3RhY2sgPSBtYXBJdGVyYXRvckZyYW1lKHN1Yk5vZGUsIHN0YWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdGFjayA9IHRoaXMuX3N0YWNrID0gdGhpcy5fc3RhY2suX19wcmV2O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgIH07XG5cblxuICBmdW5jdGlvbiBtYXBJdGVyYXRvclZhbHVlKHR5cGUsIGVudHJ5KSB7XG4gICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcEl0ZXJhdG9yRnJhbWUobm9kZSwgcHJldikge1xuICAgIHJldHVybiB7XG4gICAgICBub2RlOiBub2RlLFxuICAgICAgaW5kZXg6IDAsXG4gICAgICBfX3ByZXY6IHByZXZcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZU1hcChzaXplLCByb290LCBvd25lcklELCBoYXNoKSB7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUoTWFwUHJvdG90eXBlKTtcbiAgICBtYXAuc2l6ZSA9IHNpemU7XG4gICAgbWFwLl9yb290ID0gcm9vdDtcbiAgICBtYXAuX19vd25lcklEID0gb3duZXJJRDtcbiAgICBtYXAuX19oYXNoID0gaGFzaDtcbiAgICBtYXAuX19hbHRlcmVkID0gZmFsc2U7XG4gICAgcmV0dXJuIG1hcDtcbiAgfVxuXG4gIHZhciBFTVBUWV9NQVA7XG4gIGZ1bmN0aW9uIGVtcHR5TWFwKCkge1xuICAgIHJldHVybiBFTVBUWV9NQVAgfHwgKEVNUFRZX01BUCA9IG1ha2VNYXAoMCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTWFwKG1hcCwgaywgdikge1xuICAgIHZhciBuZXdSb290O1xuICAgIHZhciBuZXdTaXplO1xuICAgIGlmICghbWFwLl9yb290KSB7XG4gICAgICBpZiAodiA9PT0gTk9UX1NFVCkge1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgfVxuICAgICAgbmV3U2l6ZSA9IDE7XG4gICAgICBuZXdSb290ID0gbmV3IEFycmF5TWFwTm9kZShtYXAuX19vd25lcklELCBbW2ssIHZdXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBkaWRDaGFuZ2VTaXplID0gTWFrZVJlZihDSEFOR0VfTEVOR1RIKTtcbiAgICAgIHZhciBkaWRBbHRlciA9IE1ha2VSZWYoRElEX0FMVEVSKTtcbiAgICAgIG5ld1Jvb3QgPSB1cGRhdGVOb2RlKG1hcC5fcm9vdCwgbWFwLl9fb3duZXJJRCwgMCwgdW5kZWZpbmVkLCBrLCB2LCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcik7XG4gICAgICBpZiAoIWRpZEFsdGVyLnZhbHVlKSB7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgICB9XG4gICAgICBuZXdTaXplID0gbWFwLnNpemUgKyAoZGlkQ2hhbmdlU2l6ZS52YWx1ZSA/IHYgPT09IE5PVF9TRVQgPyAtMSA6IDEgOiAwKTtcbiAgICB9XG4gICAgaWYgKG1hcC5fX293bmVySUQpIHtcbiAgICAgIG1hcC5zaXplID0gbmV3U2l6ZTtcbiAgICAgIG1hcC5fcm9vdCA9IG5ld1Jvb3Q7XG4gICAgICBtYXAuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgbWFwLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICByZXR1cm4gbWFwO1xuICAgIH1cbiAgICByZXR1cm4gbmV3Um9vdCA/IG1ha2VNYXAobmV3U2l6ZSwgbmV3Um9vdCkgOiBlbXB0eU1hcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTm9kZShub2RlLCBvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gTk9UX1NFVCkge1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cbiAgICAgIFNldFJlZihkaWRBbHRlcik7XG4gICAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG4gICAgICByZXR1cm4gbmV3IFZhbHVlTm9kZShvd25lcklELCBrZXlIYXNoLCBba2V5LCB2YWx1ZV0pO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZS51cGRhdGUob3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTGVhZk5vZGUobm9kZSkge1xuICAgIHJldHVybiBub2RlLmNvbnN0cnVjdG9yID09PSBWYWx1ZU5vZGUgfHwgbm9kZS5jb25zdHJ1Y3RvciA9PT0gSGFzaENvbGxpc2lvbk5vZGU7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZUludG9Ob2RlKG5vZGUsIG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBlbnRyeSkge1xuICAgIGlmIChub2RlLmtleUhhc2ggPT09IGtleUhhc2gpIHtcbiAgICAgIHJldHVybiBuZXcgSGFzaENvbGxpc2lvbk5vZGUob3duZXJJRCwga2V5SGFzaCwgW25vZGUuZW50cnksIGVudHJ5XSk7XG4gICAgfVxuXG4gICAgdmFyIGlkeDEgPSAoc2hpZnQgPT09IDAgPyBub2RlLmtleUhhc2ggOiBub2RlLmtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG4gICAgdmFyIGlkeDIgPSAoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSztcblxuICAgIHZhciBuZXdOb2RlO1xuICAgIHZhciBub2RlcyA9IGlkeDEgPT09IGlkeDIgP1xuICAgICAgW21lcmdlSW50b05vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQgKyBTSElGVCwga2V5SGFzaCwgZW50cnkpXSA6XG4gICAgICAoKG5ld05vZGUgPSBuZXcgVmFsdWVOb2RlKG93bmVySUQsIGtleUhhc2gsIGVudHJ5KSksIGlkeDEgPCBpZHgyID8gW25vZGUsIG5ld05vZGVdIDogW25ld05vZGUsIG5vZGVdKTtcblxuICAgIHJldHVybiBuZXcgQml0bWFwSW5kZXhlZE5vZGUob3duZXJJRCwgKDEgPDwgaWR4MSkgfCAoMSA8PCBpZHgyKSwgbm9kZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTm9kZXMob3duZXJJRCwgZW50cmllcywga2V5LCB2YWx1ZSkge1xuICAgIGlmICghb3duZXJJRCkge1xuICAgICAgb3duZXJJRCA9IG5ldyBPd25lcklEKCk7XG4gICAgfVxuICAgIHZhciBub2RlID0gbmV3IFZhbHVlTm9kZShvd25lcklELCBoYXNoKGtleSksIFtrZXksIHZhbHVlXSk7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGVudHJpZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2lpXTtcbiAgICAgIG5vZGUgPSBub2RlLnVwZGF0ZShvd25lcklELCAwLCB1bmRlZmluZWQsIGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFja05vZGVzKG93bmVySUQsIG5vZGVzLCBjb3VudCwgZXhjbHVkaW5nKSB7XG4gICAgdmFyIGJpdG1hcCA9IDA7XG4gICAgdmFyIHBhY2tlZElJID0gMDtcbiAgICB2YXIgcGFja2VkTm9kZXMgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIGZvciAodmFyIGlpID0gMCwgYml0ID0gMSwgbGVuID0gbm9kZXMubGVuZ3RoOyBpaSA8IGxlbjsgaWkrKywgYml0IDw8PSAxKSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW2lpXTtcbiAgICAgIGlmIChub2RlICE9PSB1bmRlZmluZWQgJiYgaWkgIT09IGV4Y2x1ZGluZykge1xuICAgICAgICBiaXRtYXAgfD0gYml0O1xuICAgICAgICBwYWNrZWROb2Rlc1twYWNrZWRJSSsrXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgQml0bWFwSW5kZXhlZE5vZGUob3duZXJJRCwgYml0bWFwLCBwYWNrZWROb2Rlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBleHBhbmROb2Rlcyhvd25lcklELCBub2RlcywgYml0bWFwLCBpbmNsdWRpbmcsIG5vZGUpIHtcbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBleHBhbmRlZE5vZGVzID0gbmV3IEFycmF5KFNJWkUpO1xuICAgIGZvciAodmFyIGlpID0gMDsgYml0bWFwICE9PSAwOyBpaSsrLCBiaXRtYXAgPj4+PSAxKSB7XG4gICAgICBleHBhbmRlZE5vZGVzW2lpXSA9IGJpdG1hcCAmIDEgPyBub2Rlc1tjb3VudCsrXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZXhwYW5kZWROb2Rlc1tpbmNsdWRpbmddID0gbm9kZTtcbiAgICByZXR1cm4gbmV3IEhhc2hBcnJheU1hcE5vZGUob3duZXJJRCwgY291bnQgKyAxLCBleHBhbmRlZE5vZGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlSW50b01hcFdpdGgobWFwLCBtZXJnZXIsIGl0ZXJhYmxlcykge1xuICAgIHZhciBpdGVycyA9IFtdO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBpdGVyYWJsZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZXNbaWldO1xuICAgICAgdmFyIGl0ZXIgPSBLZXllZEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgIGlmICghaXNJdGVyYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgaXRlciA9IGl0ZXIubWFwKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIGZyb21KUyh2KX0pO1xuICAgICAgfVxuICAgICAgaXRlcnMucHVzaChpdGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlSW50b0NvbGxlY3Rpb25XaXRoKG1hcCwgbWVyZ2VyLCBpdGVycyk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWVwTWVyZ2VyKGV4aXN0aW5nLCB2YWx1ZSwga2V5KSB7XG4gICAgcmV0dXJuIGV4aXN0aW5nICYmIGV4aXN0aW5nLm1lcmdlRGVlcCAmJiBpc0l0ZXJhYmxlKHZhbHVlKSA/XG4gICAgICBleGlzdGluZy5tZXJnZURlZXAodmFsdWUpIDpcbiAgICAgIGlzKGV4aXN0aW5nLCB2YWx1ZSkgPyBleGlzdGluZyA6IHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVlcE1lcmdlcldpdGgobWVyZ2VyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV4aXN0aW5nLCB2YWx1ZSwga2V5KSAge1xuICAgICAgaWYgKGV4aXN0aW5nICYmIGV4aXN0aW5nLm1lcmdlRGVlcFdpdGggJiYgaXNJdGVyYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nLm1lcmdlRGVlcFdpdGgobWVyZ2VyLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgbmV4dFZhbHVlID0gbWVyZ2VyKGV4aXN0aW5nLCB2YWx1ZSwga2V5KTtcbiAgICAgIHJldHVybiBpcyhleGlzdGluZywgbmV4dFZhbHVlKSA/IGV4aXN0aW5nIDogbmV4dFZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZUludG9Db2xsZWN0aW9uV2l0aChjb2xsZWN0aW9uLCBtZXJnZXIsIGl0ZXJzKSB7XG4gICAgaXRlcnMgPSBpdGVycy5maWx0ZXIoZnVuY3Rpb24oeCApIHtyZXR1cm4geC5zaXplICE9PSAwfSk7XG4gICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGlmIChjb2xsZWN0aW9uLnNpemUgPT09IDAgJiYgIWNvbGxlY3Rpb24uX19vd25lcklEICYmIGl0ZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uY29uc3RydWN0b3IoaXRlcnNbMF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29sbGVjdGlvbi53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKGNvbGxlY3Rpb24gKSB7XG4gICAgICB2YXIgbWVyZ2VJbnRvTWFwID0gbWVyZ2VyID9cbiAgICAgICAgZnVuY3Rpb24odmFsdWUsIGtleSkgIHtcbiAgICAgICAgICBjb2xsZWN0aW9uLnVwZGF0ZShrZXksIE5PVF9TRVQsIGZ1bmN0aW9uKGV4aXN0aW5nIClcbiAgICAgICAgICAgIHtyZXR1cm4gZXhpc3RpbmcgPT09IE5PVF9TRVQgPyB2YWx1ZSA6IG1lcmdlcihleGlzdGluZywgdmFsdWUsIGtleSl9XG4gICAgICAgICAgKTtcbiAgICAgICAgfSA6XG4gICAgICAgIGZ1bmN0aW9uKHZhbHVlLCBrZXkpICB7XG4gICAgICAgICAgY29sbGVjdGlvbi5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBpdGVycy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgaXRlcnNbaWldLmZvckVhY2gobWVyZ2VJbnRvTWFwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUluRGVlcE1hcChleGlzdGluZywga2V5UGF0aEl0ZXIsIG5vdFNldFZhbHVlLCB1cGRhdGVyKSB7XG4gICAgdmFyIGlzTm90U2V0ID0gZXhpc3RpbmcgPT09IE5PVF9TRVQ7XG4gICAgdmFyIHN0ZXAgPSBrZXlQYXRoSXRlci5uZXh0KCk7XG4gICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgdmFyIGV4aXN0aW5nVmFsdWUgPSBpc05vdFNldCA/IG5vdFNldFZhbHVlIDogZXhpc3Rpbmc7XG4gICAgICB2YXIgbmV3VmFsdWUgPSB1cGRhdGVyKGV4aXN0aW5nVmFsdWUpO1xuICAgICAgcmV0dXJuIG5ld1ZhbHVlID09PSBleGlzdGluZ1ZhbHVlID8gZXhpc3RpbmcgOiBuZXdWYWx1ZTtcbiAgICB9XG4gICAgaW52YXJpYW50KFxuICAgICAgaXNOb3RTZXQgfHwgKGV4aXN0aW5nICYmIGV4aXN0aW5nLnNldCksXG4gICAgICAnaW52YWxpZCBrZXlQYXRoJ1xuICAgICk7XG4gICAgdmFyIGtleSA9IHN0ZXAudmFsdWU7XG4gICAgdmFyIG5leHRFeGlzdGluZyA9IGlzTm90U2V0ID8gTk9UX1NFVCA6IGV4aXN0aW5nLmdldChrZXksIE5PVF9TRVQpO1xuICAgIHZhciBuZXh0VXBkYXRlZCA9IHVwZGF0ZUluRGVlcE1hcChcbiAgICAgIG5leHRFeGlzdGluZyxcbiAgICAgIGtleVBhdGhJdGVyLFxuICAgICAgbm90U2V0VmFsdWUsXG4gICAgICB1cGRhdGVyXG4gICAgKTtcbiAgICByZXR1cm4gbmV4dFVwZGF0ZWQgPT09IG5leHRFeGlzdGluZyA/IGV4aXN0aW5nIDpcbiAgICAgIG5leHRVcGRhdGVkID09PSBOT1RfU0VUID8gZXhpc3RpbmcucmVtb3ZlKGtleSkgOlxuICAgICAgKGlzTm90U2V0ID8gZW1wdHlNYXAoKSA6IGV4aXN0aW5nKS5zZXQoa2V5LCBuZXh0VXBkYXRlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBwb3BDb3VudCh4KSB7XG4gICAgeCA9IHggLSAoKHggPj4gMSkgJiAweDU1NTU1NTU1KTtcbiAgICB4ID0gKHggJiAweDMzMzMzMzMzKSArICgoeCA+PiAyKSAmIDB4MzMzMzMzMzMpO1xuICAgIHggPSAoeCArICh4ID4+IDQpKSAmIDB4MGYwZjBmMGY7XG4gICAgeCA9IHggKyAoeCA+PiA4KTtcbiAgICB4ID0geCArICh4ID4+IDE2KTtcbiAgICByZXR1cm4geCAmIDB4N2Y7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRJbihhcnJheSwgaWR4LCB2YWwsIGNhbkVkaXQpIHtcbiAgICB2YXIgbmV3QXJyYXkgPSBjYW5FZGl0ID8gYXJyYXkgOiBhcnJDb3B5KGFycmF5KTtcbiAgICBuZXdBcnJheVtpZHhdID0gdmFsO1xuICAgIHJldHVybiBuZXdBcnJheTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNwbGljZUluKGFycmF5LCBpZHgsIHZhbCwgY2FuRWRpdCkge1xuICAgIHZhciBuZXdMZW4gPSBhcnJheS5sZW5ndGggKyAxO1xuICAgIGlmIChjYW5FZGl0ICYmIGlkeCArIDEgPT09IG5ld0xlbikge1xuICAgICAgYXJyYXlbaWR4XSA9IHZhbDtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gICAgdmFyIG5ld0FycmF5ID0gbmV3IEFycmF5KG5ld0xlbik7XG4gICAgdmFyIGFmdGVyID0gMDtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbmV3TGVuOyBpaSsrKSB7XG4gICAgICBpZiAoaWkgPT09IGlkeCkge1xuICAgICAgICBuZXdBcnJheVtpaV0gPSB2YWw7XG4gICAgICAgIGFmdGVyID0gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdBcnJheVtpaV0gPSBhcnJheVtpaSArIGFmdGVyXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld0FycmF5O1xuICB9XG5cbiAgZnVuY3Rpb24gc3BsaWNlT3V0KGFycmF5LCBpZHgsIGNhbkVkaXQpIHtcbiAgICB2YXIgbmV3TGVuID0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICBpZiAoY2FuRWRpdCAmJiBpZHggPT09IG5ld0xlbikge1xuICAgICAgYXJyYXkucG9wKCk7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuICAgIHZhciBuZXdBcnJheSA9IG5ldyBBcnJheShuZXdMZW4pO1xuICAgIHZhciBhZnRlciA9IDA7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IG5ld0xlbjsgaWkrKykge1xuICAgICAgaWYgKGlpID09PSBpZHgpIHtcbiAgICAgICAgYWZ0ZXIgPSAxO1xuICAgICAgfVxuICAgICAgbmV3QXJyYXlbaWldID0gYXJyYXlbaWkgKyBhZnRlcl07XG4gICAgfVxuICAgIHJldHVybiBuZXdBcnJheTtcbiAgfVxuXG4gIHZhciBNQVhfQVJSQVlfTUFQX1NJWkUgPSBTSVpFIC8gNDtcbiAgdmFyIE1BWF9CSVRNQVBfSU5ERVhFRF9TSVpFID0gU0laRSAvIDI7XG4gIHZhciBNSU5fSEFTSF9BUlJBWV9NQVBfU0laRSA9IFNJWkUgLyA0O1xuXG4gIGNyZWF0ZUNsYXNzKExpc3QsIEluZGV4ZWRDb2xsZWN0aW9uKTtcblxuICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cbiAgICBmdW5jdGlvbiBMaXN0KHZhbHVlKSB7XG4gICAgICB2YXIgZW1wdHkgPSBlbXB0eUxpc3QoKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0xpc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyID0gSW5kZXhlZEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgIHZhciBzaXplID0gaXRlci5zaXplO1xuICAgICAgaWYgKHNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgICAgfVxuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoc2l6ZSk7XG4gICAgICBpZiAoc2l6ZSA+IDAgJiYgc2l6ZSA8IFNJWkUpIHtcbiAgICAgICAgcmV0dXJuIG1ha2VMaXN0KDAsIHNpemUsIFNISUZULCBudWxsLCBuZXcgVk5vZGUoaXRlci50b0FycmF5KCkpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbXB0eS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKGxpc3QgKSB7XG4gICAgICAgIGxpc3Quc2V0U2l6ZShzaXplKTtcbiAgICAgICAgaXRlci5mb3JFYWNoKGZ1bmN0aW9uKHYsIGkpICB7cmV0dXJuIGxpc3Quc2V0KGksIHYpfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBMaXN0Lm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIHRoaXMoYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ0xpc3QgWycsICddJyk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQWNjZXNzXG5cbiAgICBMaXN0LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIGluZGV4ID0gd3JhcEluZGV4KHRoaXMsIGluZGV4KTtcbiAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5zaXplKSB7XG4gICAgICAgIGluZGV4ICs9IHRoaXMuX29yaWdpbjtcbiAgICAgICAgdmFyIG5vZGUgPSBsaXN0Tm9kZUZvcih0aGlzLCBpbmRleCk7XG4gICAgICAgIHJldHVybiBub2RlICYmIG5vZGUuYXJyYXlbaW5kZXggJiBNQVNLXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuICAgIExpc3QucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGluZGV4LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHVwZGF0ZUxpc3QodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiAhdGhpcy5oYXMoaW5kZXgpID8gdGhpcyA6XG4gICAgICAgIGluZGV4ID09PSAwID8gdGhpcy5zaGlmdCgpIDpcbiAgICAgICAgaW5kZXggPT09IHRoaXMuc2l6ZSAtIDEgPyB0aGlzLnBvcCgpIDpcbiAgICAgICAgdGhpcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICB0aGlzLnNpemUgPSB0aGlzLl9vcmlnaW4gPSB0aGlzLl9jYXBhY2l0eSA9IDA7XG4gICAgICAgIHRoaXMuX2xldmVsID0gU0hJRlQ7XG4gICAgICAgIHRoaXMuX3Jvb3QgPSB0aGlzLl90YWlsID0gbnVsbDtcbiAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlMaXN0KCk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICB2YXIgdmFsdWVzID0gYXJndW1lbnRzO1xuICAgICAgdmFyIG9sZFNpemUgPSB0aGlzLnNpemU7XG4gICAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKGxpc3QgKSB7XG4gICAgICAgIHNldExpc3RCb3VuZHMobGlzdCwgMCwgb2xkU2l6ZSArIHZhbHVlcy5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgdmFsdWVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICAgIGxpc3Quc2V0KG9sZFNpemUgKyBpaSwgdmFsdWVzW2lpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzZXRMaXN0Qm91bmRzKHRoaXMsIDAsIC0xKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBhcmd1bWVudHM7XG4gICAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKGxpc3QgKSB7XG4gICAgICAgIHNldExpc3RCb3VuZHMobGlzdCwgLXZhbHVlcy5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgdmFsdWVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICAgIGxpc3Quc2V0KGlpLCB2YWx1ZXNbaWldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyh0aGlzLCAxKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBDb21wb3NpdGlvblxuXG4gICAgTGlzdC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbigvKi4uLml0ZXJzKi8pIHtcbiAgICAgIHJldHVybiBtZXJnZUludG9MaXN0V2l0aCh0aGlzLCB1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLm1lcmdlV2l0aCA9IGZ1bmN0aW9uKG1lcmdlcikge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgcmV0dXJuIG1lcmdlSW50b0xpc3RXaXRoKHRoaXMsIG1lcmdlciwgaXRlcnMpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5tZXJnZURlZXAgPSBmdW5jdGlvbigvKi4uLml0ZXJzKi8pIHtcbiAgICAgIHJldHVybiBtZXJnZUludG9MaXN0V2l0aCh0aGlzLCBkZWVwTWVyZ2VyLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTGlzdFdpdGgodGhpcywgZGVlcE1lcmdlcldpdGgobWVyZ2VyKSwgaXRlcnMpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5zZXRTaXplID0gZnVuY3Rpb24oc2l6ZSkge1xuICAgICAgcmV0dXJuIHNldExpc3RCb3VuZHModGhpcywgMCwgc2l6ZSk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgSXRlcmF0aW9uXG5cbiAgICBMaXN0LnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBzaXplID0gdGhpcy5zaXplO1xuICAgICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgc2l6ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyhcbiAgICAgICAgdGhpcyxcbiAgICAgICAgcmVzb2x2ZUJlZ2luKGJlZ2luLCBzaXplKSxcbiAgICAgICAgcmVzb2x2ZUVuZChlbmQsIHNpemUpXG4gICAgICApO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZXMgPSBpdGVyYXRlTGlzdCh0aGlzLCByZXZlcnNlKTtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZXMoKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBET05FID9cbiAgICAgICAgICBpdGVyYXRvckRvbmUoKSA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBpbmRleCsrLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWVzID0gaXRlcmF0ZUxpc3QodGhpcywgcmV2ZXJzZSk7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoKHZhbHVlID0gdmFsdWVzKCkpICE9PSBET05FKSB7XG4gICAgICAgIGlmIChmbih2YWx1ZSwgaW5kZXgrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcbiAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmICghb3duZXJJRCkge1xuICAgICAgICB0aGlzLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VMaXN0KHRoaXMuX29yaWdpbiwgdGhpcy5fY2FwYWNpdHksIHRoaXMuX2xldmVsLCB0aGlzLl9yb290LCB0aGlzLl90YWlsLCBvd25lcklELCB0aGlzLl9faGFzaCk7XG4gICAgfTtcblxuXG4gIGZ1bmN0aW9uIGlzTGlzdChtYXliZUxpc3QpIHtcbiAgICByZXR1cm4gISEobWF5YmVMaXN0ICYmIG1heWJlTGlzdFtJU19MSVNUX1NFTlRJTkVMXSk7XG4gIH1cblxuICBMaXN0LmlzTGlzdCA9IGlzTGlzdDtcblxuICB2YXIgSVNfTElTVF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0xJU1RfX0BAJztcblxuICB2YXIgTGlzdFByb3RvdHlwZSA9IExpc3QucHJvdG90eXBlO1xuICBMaXN0UHJvdG90eXBlW0lTX0xJU1RfU0VOVElORUxdID0gdHJ1ZTtcbiAgTGlzdFByb3RvdHlwZVtERUxFVEVdID0gTGlzdFByb3RvdHlwZS5yZW1vdmU7XG4gIExpc3RQcm90b3R5cGUuc2V0SW4gPSBNYXBQcm90b3R5cGUuc2V0SW47XG4gIExpc3RQcm90b3R5cGUuZGVsZXRlSW4gPVxuICBMaXN0UHJvdG90eXBlLnJlbW92ZUluID0gTWFwUHJvdG90eXBlLnJlbW92ZUluO1xuICBMaXN0UHJvdG90eXBlLnVwZGF0ZSA9IE1hcFByb3RvdHlwZS51cGRhdGU7XG4gIExpc3RQcm90b3R5cGUudXBkYXRlSW4gPSBNYXBQcm90b3R5cGUudXBkYXRlSW47XG4gIExpc3RQcm90b3R5cGUubWVyZ2VJbiA9IE1hcFByb3RvdHlwZS5tZXJnZUluO1xuICBMaXN0UHJvdG90eXBlLm1lcmdlRGVlcEluID0gTWFwUHJvdG90eXBlLm1lcmdlRGVlcEluO1xuICBMaXN0UHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSBNYXBQcm90b3R5cGUud2l0aE11dGF0aW9ucztcbiAgTGlzdFByb3RvdHlwZS5hc011dGFibGUgPSBNYXBQcm90b3R5cGUuYXNNdXRhYmxlO1xuICBMaXN0UHJvdG90eXBlLmFzSW1tdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzSW1tdXRhYmxlO1xuICBMaXN0UHJvdG90eXBlLndhc0FsdGVyZWQgPSBNYXBQcm90b3R5cGUud2FzQWx0ZXJlZDtcblxuXG5cbiAgICBmdW5jdGlvbiBWTm9kZShhcnJheSwgb3duZXJJRCkge1xuICAgICAgdGhpcy5hcnJheSA9IGFycmF5O1xuICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBzZWVtcyBsaWtlIHRoZXNlIG1ldGhvZHMgYXJlIHZlcnkgc2ltaWxhclxuXG4gICAgVk5vZGUucHJvdG90eXBlLnJlbW92ZUJlZm9yZSA9IGZ1bmN0aW9uKG93bmVySUQsIGxldmVsLCBpbmRleCkge1xuICAgICAgaWYgKGluZGV4ID09PSBsZXZlbCA/IDEgPDwgbGV2ZWwgOiAwIHx8IHRoaXMuYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIG9yaWdpbkluZGV4ID0gKGluZGV4ID4+PiBsZXZlbCkgJiBNQVNLO1xuICAgICAgaWYgKG9yaWdpbkluZGV4ID49IHRoaXMuYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVk5vZGUoW10sIG93bmVySUQpO1xuICAgICAgfVxuICAgICAgdmFyIHJlbW92aW5nRmlyc3QgPSBvcmlnaW5JbmRleCA9PT0gMDtcbiAgICAgIHZhciBuZXdDaGlsZDtcbiAgICAgIGlmIChsZXZlbCA+IDApIHtcbiAgICAgICAgdmFyIG9sZENoaWxkID0gdGhpcy5hcnJheVtvcmlnaW5JbmRleF07XG4gICAgICAgIG5ld0NoaWxkID0gb2xkQ2hpbGQgJiYgb2xkQ2hpbGQucmVtb3ZlQmVmb3JlKG93bmVySUQsIGxldmVsIC0gU0hJRlQsIGluZGV4KTtcbiAgICAgICAgaWYgKG5ld0NoaWxkID09PSBvbGRDaGlsZCAmJiByZW1vdmluZ0ZpcnN0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChyZW1vdmluZ0ZpcnN0ICYmICFuZXdDaGlsZCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBlZGl0YWJsZSA9IGVkaXRhYmxlVk5vZGUodGhpcywgb3duZXJJRCk7XG4gICAgICBpZiAoIXJlbW92aW5nRmlyc3QpIHtcbiAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IG9yaWdpbkluZGV4OyBpaSsrKSB7XG4gICAgICAgICAgZWRpdGFibGUuYXJyYXlbaWldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobmV3Q2hpbGQpIHtcbiAgICAgICAgZWRpdGFibGUuYXJyYXlbb3JpZ2luSW5kZXhdID0gbmV3Q2hpbGQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWRpdGFibGU7XG4gICAgfTtcblxuICAgIFZOb2RlLnByb3RvdHlwZS5yZW1vdmVBZnRlciA9IGZ1bmN0aW9uKG93bmVySUQsIGxldmVsLCBpbmRleCkge1xuICAgICAgaWYgKGluZGV4ID09PSAobGV2ZWwgPyAxIDw8IGxldmVsIDogMCkgfHwgdGhpcy5hcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgc2l6ZUluZGV4ID0gKChpbmRleCAtIDEpID4+PiBsZXZlbCkgJiBNQVNLO1xuICAgICAgaWYgKHNpemVJbmRleCA+PSB0aGlzLmFycmF5Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld0NoaWxkO1xuICAgICAgaWYgKGxldmVsID4gMCkge1xuICAgICAgICB2YXIgb2xkQ2hpbGQgPSB0aGlzLmFycmF5W3NpemVJbmRleF07XG4gICAgICAgIG5ld0NoaWxkID0gb2xkQ2hpbGQgJiYgb2xkQ2hpbGQucmVtb3ZlQWZ0ZXIob3duZXJJRCwgbGV2ZWwgLSBTSElGVCwgaW5kZXgpO1xuICAgICAgICBpZiAobmV3Q2hpbGQgPT09IG9sZENoaWxkICYmIHNpemVJbmRleCA9PT0gdGhpcy5hcnJheS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGVkaXRhYmxlID0gZWRpdGFibGVWTm9kZSh0aGlzLCBvd25lcklEKTtcbiAgICAgIGVkaXRhYmxlLmFycmF5LnNwbGljZShzaXplSW5kZXggKyAxKTtcbiAgICAgIGlmIChuZXdDaGlsZCkge1xuICAgICAgICBlZGl0YWJsZS5hcnJheVtzaXplSW5kZXhdID0gbmV3Q2hpbGQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWRpdGFibGU7XG4gICAgfTtcblxuXG5cbiAgdmFyIERPTkUgPSB7fTtcblxuICBmdW5jdGlvbiBpdGVyYXRlTGlzdChsaXN0LCByZXZlcnNlKSB7XG4gICAgdmFyIGxlZnQgPSBsaXN0Ll9vcmlnaW47XG4gICAgdmFyIHJpZ2h0ID0gbGlzdC5fY2FwYWNpdHk7XG4gICAgdmFyIHRhaWxQb3MgPSBnZXRUYWlsT2Zmc2V0KHJpZ2h0KTtcbiAgICB2YXIgdGFpbCA9IGxpc3QuX3RhaWw7XG5cbiAgICByZXR1cm4gaXRlcmF0ZU5vZGVPckxlYWYobGlzdC5fcm9vdCwgbGlzdC5fbGV2ZWwsIDApO1xuXG4gICAgZnVuY3Rpb24gaXRlcmF0ZU5vZGVPckxlYWYobm9kZSwgbGV2ZWwsIG9mZnNldCkge1xuICAgICAgcmV0dXJuIGxldmVsID09PSAwID9cbiAgICAgICAgaXRlcmF0ZUxlYWYobm9kZSwgb2Zmc2V0KSA6XG4gICAgICAgIGl0ZXJhdGVOb2RlKG5vZGUsIGxldmVsLCBvZmZzZXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGl0ZXJhdGVMZWFmKG5vZGUsIG9mZnNldCkge1xuICAgICAgdmFyIGFycmF5ID0gb2Zmc2V0ID09PSB0YWlsUG9zID8gdGFpbCAmJiB0YWlsLmFycmF5IDogbm9kZSAmJiBub2RlLmFycmF5O1xuICAgICAgdmFyIGZyb20gPSBvZmZzZXQgPiBsZWZ0ID8gMCA6IGxlZnQgLSBvZmZzZXQ7XG4gICAgICB2YXIgdG8gPSByaWdodCAtIG9mZnNldDtcbiAgICAgIGlmICh0byA+IFNJWkUpIHtcbiAgICAgICAgdG8gPSBTSVpFO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgICAgICAgcmV0dXJuIERPTkU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlkeCA9IHJldmVyc2UgPyAtLXRvIDogZnJvbSsrO1xuICAgICAgICByZXR1cm4gYXJyYXkgJiYgYXJyYXlbaWR4XTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXRlcmF0ZU5vZGUobm9kZSwgbGV2ZWwsIG9mZnNldCkge1xuICAgICAgdmFyIHZhbHVlcztcbiAgICAgIHZhciBhcnJheSA9IG5vZGUgJiYgbm9kZS5hcnJheTtcbiAgICAgIHZhciBmcm9tID0gb2Zmc2V0ID4gbGVmdCA/IDAgOiAobGVmdCAtIG9mZnNldCkgPj4gbGV2ZWw7XG4gICAgICB2YXIgdG8gPSAoKHJpZ2h0IC0gb2Zmc2V0KSA+PiBsZXZlbCkgKyAxO1xuICAgICAgaWYgKHRvID4gU0laRSkge1xuICAgICAgICB0byA9IFNJWkU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSAge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVzKCk7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IERPTkUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWVzID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgICAgICAgICByZXR1cm4gRE9ORTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGlkeCA9IHJldmVyc2UgPyAtLXRvIDogZnJvbSsrO1xuICAgICAgICAgIHZhbHVlcyA9IGl0ZXJhdGVOb2RlT3JMZWFmKFxuICAgICAgICAgICAgYXJyYXkgJiYgYXJyYXlbaWR4XSwgbGV2ZWwgLSBTSElGVCwgb2Zmc2V0ICsgKGlkeCA8PCBsZXZlbClcbiAgICAgICAgICApO1xuICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUxpc3Qob3JpZ2luLCBjYXBhY2l0eSwgbGV2ZWwsIHJvb3QsIHRhaWwsIG93bmVySUQsIGhhc2gpIHtcbiAgICB2YXIgbGlzdCA9IE9iamVjdC5jcmVhdGUoTGlzdFByb3RvdHlwZSk7XG4gICAgbGlzdC5zaXplID0gY2FwYWNpdHkgLSBvcmlnaW47XG4gICAgbGlzdC5fb3JpZ2luID0gb3JpZ2luO1xuICAgIGxpc3QuX2NhcGFjaXR5ID0gY2FwYWNpdHk7XG4gICAgbGlzdC5fbGV2ZWwgPSBsZXZlbDtcbiAgICBsaXN0Ll9yb290ID0gcm9vdDtcbiAgICBsaXN0Ll90YWlsID0gdGFpbDtcbiAgICBsaXN0Ll9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgbGlzdC5fX2hhc2ggPSBoYXNoO1xuICAgIGxpc3QuX19hbHRlcmVkID0gZmFsc2U7XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cblxuICB2YXIgRU1QVFlfTElTVDtcbiAgZnVuY3Rpb24gZW1wdHlMaXN0KCkge1xuICAgIHJldHVybiBFTVBUWV9MSVNUIHx8IChFTVBUWV9MSVNUID0gbWFrZUxpc3QoMCwgMCwgU0hJRlQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUxpc3QobGlzdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgaW5kZXggPSB3cmFwSW5kZXgobGlzdCwgaW5kZXgpO1xuXG4gICAgaWYgKGluZGV4ICE9PSBpbmRleCkge1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ID49IGxpc3Quc2l6ZSB8fCBpbmRleCA8IDApIHtcbiAgICAgIHJldHVybiBsaXN0LndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obGlzdCApIHtcbiAgICAgICAgaW5kZXggPCAwID9cbiAgICAgICAgICBzZXRMaXN0Qm91bmRzKGxpc3QsIGluZGV4KS5zZXQoMCwgdmFsdWUpIDpcbiAgICAgICAgICBzZXRMaXN0Qm91bmRzKGxpc3QsIDAsIGluZGV4ICsgMSkuc2V0KGluZGV4LCB2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGluZGV4ICs9IGxpc3QuX29yaWdpbjtcblxuICAgIHZhciBuZXdUYWlsID0gbGlzdC5fdGFpbDtcbiAgICB2YXIgbmV3Um9vdCA9IGxpc3QuX3Jvb3Q7XG4gICAgdmFyIGRpZEFsdGVyID0gTWFrZVJlZihESURfQUxURVIpO1xuICAgIGlmIChpbmRleCA+PSBnZXRUYWlsT2Zmc2V0KGxpc3QuX2NhcGFjaXR5KSkge1xuICAgICAgbmV3VGFpbCA9IHVwZGF0ZVZOb2RlKG5ld1RhaWwsIGxpc3QuX19vd25lcklELCAwLCBpbmRleCwgdmFsdWUsIGRpZEFsdGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3Um9vdCA9IHVwZGF0ZVZOb2RlKG5ld1Jvb3QsIGxpc3QuX19vd25lcklELCBsaXN0Ll9sZXZlbCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcik7XG4gICAgfVxuXG4gICAgaWYgKCFkaWRBbHRlci52YWx1ZSkge1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgaWYgKGxpc3QuX19vd25lcklEKSB7XG4gICAgICBsaXN0Ll9yb290ID0gbmV3Um9vdDtcbiAgICAgIGxpc3QuX3RhaWwgPSBuZXdUYWlsO1xuICAgICAgbGlzdC5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICBsaXN0Ll9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG4gICAgcmV0dXJuIG1ha2VMaXN0KGxpc3QuX29yaWdpbiwgbGlzdC5fY2FwYWNpdHksIGxpc3QuX2xldmVsLCBuZXdSb290LCBuZXdUYWlsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVZOb2RlKG5vZGUsIG93bmVySUQsIGxldmVsLCBpbmRleCwgdmFsdWUsIGRpZEFsdGVyKSB7XG4gICAgdmFyIGlkeCA9IChpbmRleCA+Pj4gbGV2ZWwpICYgTUFTSztcbiAgICB2YXIgbm9kZUhhcyA9IG5vZGUgJiYgaWR4IDwgbm9kZS5hcnJheS5sZW5ndGg7XG4gICAgaWYgKCFub2RlSGFzICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIHZhciBuZXdOb2RlO1xuXG4gICAgaWYgKGxldmVsID4gMCkge1xuICAgICAgdmFyIGxvd2VyTm9kZSA9IG5vZGUgJiYgbm9kZS5hcnJheVtpZHhdO1xuICAgICAgdmFyIG5ld0xvd2VyTm9kZSA9IHVwZGF0ZVZOb2RlKGxvd2VyTm9kZSwgb3duZXJJRCwgbGV2ZWwgLSBTSElGVCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcik7XG4gICAgICBpZiAobmV3TG93ZXJOb2RlID09PSBsb3dlck5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgICBuZXdOb2RlID0gZWRpdGFibGVWTm9kZShub2RlLCBvd25lcklEKTtcbiAgICAgIG5ld05vZGUuYXJyYXlbaWR4XSA9IG5ld0xvd2VyTm9kZTtcbiAgICAgIHJldHVybiBuZXdOb2RlO1xuICAgIH1cblxuICAgIGlmIChub2RlSGFzICYmIG5vZGUuYXJyYXlbaWR4XSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIFNldFJlZihkaWRBbHRlcik7XG5cbiAgICBuZXdOb2RlID0gZWRpdGFibGVWTm9kZShub2RlLCBvd25lcklEKTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBpZHggPT09IG5ld05vZGUuYXJyYXkubGVuZ3RoIC0gMSkge1xuICAgICAgbmV3Tm9kZS5hcnJheS5wb3AoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3Tm9kZS5hcnJheVtpZHhdID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBuZXdOb2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gZWRpdGFibGVWTm9kZShub2RlLCBvd25lcklEKSB7XG4gICAgaWYgKG93bmVySUQgJiYgbm9kZSAmJiBvd25lcklEID09PSBub2RlLm93bmVySUQpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGUgPyBub2RlLmFycmF5LnNsaWNlKCkgOiBbXSwgb3duZXJJRCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0Tm9kZUZvcihsaXN0LCByYXdJbmRleCkge1xuICAgIGlmIChyYXdJbmRleCA+PSBnZXRUYWlsT2Zmc2V0KGxpc3QuX2NhcGFjaXR5KSkge1xuICAgICAgcmV0dXJuIGxpc3QuX3RhaWw7XG4gICAgfVxuICAgIGlmIChyYXdJbmRleCA8IDEgPDwgKGxpc3QuX2xldmVsICsgU0hJRlQpKSB7XG4gICAgICB2YXIgbm9kZSA9IGxpc3QuX3Jvb3Q7XG4gICAgICB2YXIgbGV2ZWwgPSBsaXN0Ll9sZXZlbDtcbiAgICAgIHdoaWxlIChub2RlICYmIGxldmVsID4gMCkge1xuICAgICAgICBub2RlID0gbm9kZS5hcnJheVsocmF3SW5kZXggPj4+IGxldmVsKSAmIE1BU0tdO1xuICAgICAgICBsZXZlbCAtPSBTSElGVDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldExpc3RCb3VuZHMobGlzdCwgYmVnaW4sIGVuZCkge1xuICAgIC8vIFNhbml0aXplIGJlZ2luICYgZW5kIHVzaW5nIHRoaXMgc2hvcnRoYW5kIGZvciBUb0ludDMyKGFyZ3VtZW50KVxuICAgIC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b2ludDMyXG4gICAgaWYgKGJlZ2luICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJlZ2luID0gYmVnaW4gfCAwO1xuICAgIH1cbiAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGVuZCA9IGVuZCB8IDA7XG4gICAgfVxuICAgIHZhciBvd25lciA9IGxpc3QuX19vd25lcklEIHx8IG5ldyBPd25lcklEKCk7XG4gICAgdmFyIG9sZE9yaWdpbiA9IGxpc3QuX29yaWdpbjtcbiAgICB2YXIgb2xkQ2FwYWNpdHkgPSBsaXN0Ll9jYXBhY2l0eTtcbiAgICB2YXIgbmV3T3JpZ2luID0gb2xkT3JpZ2luICsgYmVnaW47XG4gICAgdmFyIG5ld0NhcGFjaXR5ID0gZW5kID09PSB1bmRlZmluZWQgPyBvbGRDYXBhY2l0eSA6IGVuZCA8IDAgPyBvbGRDYXBhY2l0eSArIGVuZCA6IG9sZE9yaWdpbiArIGVuZDtcbiAgICBpZiAobmV3T3JpZ2luID09PSBvbGRPcmlnaW4gJiYgbmV3Q2FwYWNpdHkgPT09IG9sZENhcGFjaXR5KSB7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICAvLyBJZiBpdCdzIGdvaW5nIHRvIGVuZCBhZnRlciBpdCBzdGFydHMsIGl0J3MgZW1wdHkuXG4gICAgaWYgKG5ld09yaWdpbiA+PSBuZXdDYXBhY2l0eSkge1xuICAgICAgcmV0dXJuIGxpc3QuY2xlYXIoKTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGV2ZWwgPSBsaXN0Ll9sZXZlbDtcbiAgICB2YXIgbmV3Um9vdCA9IGxpc3QuX3Jvb3Q7XG5cbiAgICAvLyBOZXcgb3JpZ2luIG1pZ2h0IG5lZWQgY3JlYXRpbmcgYSBoaWdoZXIgcm9vdC5cbiAgICB2YXIgb2Zmc2V0U2hpZnQgPSAwO1xuICAgIHdoaWxlIChuZXdPcmlnaW4gKyBvZmZzZXRTaGlmdCA8IDApIHtcbiAgICAgIG5ld1Jvb3QgPSBuZXcgVk5vZGUobmV3Um9vdCAmJiBuZXdSb290LmFycmF5Lmxlbmd0aCA/IFt1bmRlZmluZWQsIG5ld1Jvb3RdIDogW10sIG93bmVyKTtcbiAgICAgIG5ld0xldmVsICs9IFNISUZUO1xuICAgICAgb2Zmc2V0U2hpZnQgKz0gMSA8PCBuZXdMZXZlbDtcbiAgICB9XG4gICAgaWYgKG9mZnNldFNoaWZ0KSB7XG4gICAgICBuZXdPcmlnaW4gKz0gb2Zmc2V0U2hpZnQ7XG4gICAgICBvbGRPcmlnaW4gKz0gb2Zmc2V0U2hpZnQ7XG4gICAgICBuZXdDYXBhY2l0eSArPSBvZmZzZXRTaGlmdDtcbiAgICAgIG9sZENhcGFjaXR5ICs9IG9mZnNldFNoaWZ0O1xuICAgIH1cblxuICAgIHZhciBvbGRUYWlsT2Zmc2V0ID0gZ2V0VGFpbE9mZnNldChvbGRDYXBhY2l0eSk7XG4gICAgdmFyIG5ld1RhaWxPZmZzZXQgPSBnZXRUYWlsT2Zmc2V0KG5ld0NhcGFjaXR5KTtcblxuICAgIC8vIE5ldyBzaXplIG1pZ2h0IG5lZWQgY3JlYXRpbmcgYSBoaWdoZXIgcm9vdC5cbiAgICB3aGlsZSAobmV3VGFpbE9mZnNldCA+PSAxIDw8IChuZXdMZXZlbCArIFNISUZUKSkge1xuICAgICAgbmV3Um9vdCA9IG5ldyBWTm9kZShuZXdSb290ICYmIG5ld1Jvb3QuYXJyYXkubGVuZ3RoID8gW25ld1Jvb3RdIDogW10sIG93bmVyKTtcbiAgICAgIG5ld0xldmVsICs9IFNISUZUO1xuICAgIH1cblxuICAgIC8vIExvY2F0ZSBvciBjcmVhdGUgdGhlIG5ldyB0YWlsLlxuICAgIHZhciBvbGRUYWlsID0gbGlzdC5fdGFpbDtcbiAgICB2YXIgbmV3VGFpbCA9IG5ld1RhaWxPZmZzZXQgPCBvbGRUYWlsT2Zmc2V0ID9cbiAgICAgIGxpc3ROb2RlRm9yKGxpc3QsIG5ld0NhcGFjaXR5IC0gMSkgOlxuICAgICAgbmV3VGFpbE9mZnNldCA+IG9sZFRhaWxPZmZzZXQgPyBuZXcgVk5vZGUoW10sIG93bmVyKSA6IG9sZFRhaWw7XG5cbiAgICAvLyBNZXJnZSBUYWlsIGludG8gdHJlZS5cbiAgICBpZiAob2xkVGFpbCAmJiBuZXdUYWlsT2Zmc2V0ID4gb2xkVGFpbE9mZnNldCAmJiBuZXdPcmlnaW4gPCBvbGRDYXBhY2l0eSAmJiBvbGRUYWlsLmFycmF5Lmxlbmd0aCkge1xuICAgICAgbmV3Um9vdCA9IGVkaXRhYmxlVk5vZGUobmV3Um9vdCwgb3duZXIpO1xuICAgICAgdmFyIG5vZGUgPSBuZXdSb290O1xuICAgICAgZm9yICh2YXIgbGV2ZWwgPSBuZXdMZXZlbDsgbGV2ZWwgPiBTSElGVDsgbGV2ZWwgLT0gU0hJRlQpIHtcbiAgICAgICAgdmFyIGlkeCA9IChvbGRUYWlsT2Zmc2V0ID4+PiBsZXZlbCkgJiBNQVNLO1xuICAgICAgICBub2RlID0gbm9kZS5hcnJheVtpZHhdID0gZWRpdGFibGVWTm9kZShub2RlLmFycmF5W2lkeF0sIG93bmVyKTtcbiAgICAgIH1cbiAgICAgIG5vZGUuYXJyYXlbKG9sZFRhaWxPZmZzZXQgPj4+IFNISUZUKSAmIE1BU0tdID0gb2xkVGFpbDtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgc2l6ZSBoYXMgYmVlbiByZWR1Y2VkLCB0aGVyZSdzIGEgY2hhbmNlIHRoZSB0YWlsIG5lZWRzIHRvIGJlIHRyaW1tZWQuXG4gICAgaWYgKG5ld0NhcGFjaXR5IDwgb2xkQ2FwYWNpdHkpIHtcbiAgICAgIG5ld1RhaWwgPSBuZXdUYWlsICYmIG5ld1RhaWwucmVtb3ZlQWZ0ZXIob3duZXIsIDAsIG5ld0NhcGFjaXR5KTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgbmV3IG9yaWdpbiBpcyB3aXRoaW4gdGhlIHRhaWwsIHRoZW4gd2UgZG8gbm90IG5lZWQgYSByb290LlxuICAgIGlmIChuZXdPcmlnaW4gPj0gbmV3VGFpbE9mZnNldCkge1xuICAgICAgbmV3T3JpZ2luIC09IG5ld1RhaWxPZmZzZXQ7XG4gICAgICBuZXdDYXBhY2l0eSAtPSBuZXdUYWlsT2Zmc2V0O1xuICAgICAgbmV3TGV2ZWwgPSBTSElGVDtcbiAgICAgIG5ld1Jvb3QgPSBudWxsO1xuICAgICAgbmV3VGFpbCA9IG5ld1RhaWwgJiYgbmV3VGFpbC5yZW1vdmVCZWZvcmUob3duZXIsIDAsIG5ld09yaWdpbik7XG5cbiAgICAvLyBPdGhlcndpc2UsIGlmIHRoZSByb290IGhhcyBiZWVuIHRyaW1tZWQsIGdhcmJhZ2UgY29sbGVjdC5cbiAgICB9IGVsc2UgaWYgKG5ld09yaWdpbiA+IG9sZE9yaWdpbiB8fCBuZXdUYWlsT2Zmc2V0IDwgb2xkVGFpbE9mZnNldCkge1xuICAgICAgb2Zmc2V0U2hpZnQgPSAwO1xuXG4gICAgICAvLyBJZGVudGlmeSB0aGUgbmV3IHRvcCByb290IG5vZGUgb2YgdGhlIHN1YnRyZWUgb2YgdGhlIG9sZCByb290LlxuICAgICAgd2hpbGUgKG5ld1Jvb3QpIHtcbiAgICAgICAgdmFyIGJlZ2luSW5kZXggPSAobmV3T3JpZ2luID4+PiBuZXdMZXZlbCkgJiBNQVNLO1xuICAgICAgICBpZiAoYmVnaW5JbmRleCAhPT0gKG5ld1RhaWxPZmZzZXQgPj4+IG5ld0xldmVsKSAmIE1BU0spIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmVnaW5JbmRleCkge1xuICAgICAgICAgIG9mZnNldFNoaWZ0ICs9ICgxIDw8IG5ld0xldmVsKSAqIGJlZ2luSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgbmV3TGV2ZWwgLT0gU0hJRlQ7XG4gICAgICAgIG5ld1Jvb3QgPSBuZXdSb290LmFycmF5W2JlZ2luSW5kZXhdO1xuICAgICAgfVxuXG4gICAgICAvLyBUcmltIHRoZSBuZXcgc2lkZXMgb2YgdGhlIG5ldyByb290LlxuICAgICAgaWYgKG5ld1Jvb3QgJiYgbmV3T3JpZ2luID4gb2xkT3JpZ2luKSB7XG4gICAgICAgIG5ld1Jvb3QgPSBuZXdSb290LnJlbW92ZUJlZm9yZShvd25lciwgbmV3TGV2ZWwsIG5ld09yaWdpbiAtIG9mZnNldFNoaWZ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdSb290ICYmIG5ld1RhaWxPZmZzZXQgPCBvbGRUYWlsT2Zmc2V0KSB7XG4gICAgICAgIG5ld1Jvb3QgPSBuZXdSb290LnJlbW92ZUFmdGVyKG93bmVyLCBuZXdMZXZlbCwgbmV3VGFpbE9mZnNldCAtIG9mZnNldFNoaWZ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChvZmZzZXRTaGlmdCkge1xuICAgICAgICBuZXdPcmlnaW4gLT0gb2Zmc2V0U2hpZnQ7XG4gICAgICAgIG5ld0NhcGFjaXR5IC09IG9mZnNldFNoaWZ0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChsaXN0Ll9fb3duZXJJRCkge1xuICAgICAgbGlzdC5zaXplID0gbmV3Q2FwYWNpdHkgLSBuZXdPcmlnaW47XG4gICAgICBsaXN0Ll9vcmlnaW4gPSBuZXdPcmlnaW47XG4gICAgICBsaXN0Ll9jYXBhY2l0eSA9IG5ld0NhcGFjaXR5O1xuICAgICAgbGlzdC5fbGV2ZWwgPSBuZXdMZXZlbDtcbiAgICAgIGxpc3QuX3Jvb3QgPSBuZXdSb290O1xuICAgICAgbGlzdC5fdGFpbCA9IG5ld1RhaWw7XG4gICAgICBsaXN0Ll9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgIGxpc3QuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cbiAgICByZXR1cm4gbWFrZUxpc3QobmV3T3JpZ2luLCBuZXdDYXBhY2l0eSwgbmV3TGV2ZWwsIG5ld1Jvb3QsIG5ld1RhaWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VJbnRvTGlzdFdpdGgobGlzdCwgbWVyZ2VyLCBpdGVyYWJsZXMpIHtcbiAgICB2YXIgaXRlcnMgPSBbXTtcbiAgICB2YXIgbWF4U2l6ZSA9IDA7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGl0ZXJhYmxlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGl0ZXJhYmxlc1tpaV07XG4gICAgICB2YXIgaXRlciA9IEluZGV4ZWRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICBpZiAoaXRlci5zaXplID4gbWF4U2l6ZSkge1xuICAgICAgICBtYXhTaXplID0gaXRlci5zaXplO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0l0ZXJhYmxlKHZhbHVlKSkge1xuICAgICAgICBpdGVyID0gaXRlci5tYXAoZnVuY3Rpb24odiApIHtyZXR1cm4gZnJvbUpTKHYpfSk7XG4gICAgICB9XG4gICAgICBpdGVycy5wdXNoKGl0ZXIpO1xuICAgIH1cbiAgICBpZiAobWF4U2l6ZSA+IGxpc3Quc2l6ZSkge1xuICAgICAgbGlzdCA9IGxpc3Quc2V0U2l6ZShtYXhTaXplKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlSW50b0NvbGxlY3Rpb25XaXRoKGxpc3QsIG1lcmdlciwgaXRlcnMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGFpbE9mZnNldChzaXplKSB7XG4gICAgcmV0dXJuIHNpemUgPCBTSVpFID8gMCA6ICgoKHNpemUgLSAxKSA+Pj4gU0hJRlQpIDw8IFNISUZUKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKE9yZGVyZWRNYXAsIE1hcCk7XG5cbiAgICAvLyBAcHJhZ21hIENvbnN0cnVjdGlvblxuXG4gICAgZnVuY3Rpb24gT3JkZXJlZE1hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eU9yZGVyZWRNYXAoKSA6XG4gICAgICAgIGlzT3JkZXJlZE1hcCh2YWx1ZSkgPyB2YWx1ZSA6XG4gICAgICAgIGVtcHR5T3JkZXJlZE1hcCgpLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obWFwICkge1xuICAgICAgICAgIHZhciBpdGVyID0gS2V5ZWRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcbiAgICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gbWFwLnNldChrLCB2KX0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBPcmRlcmVkTWFwLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIHRoaXMoYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ09yZGVyZWRNYXAgeycsICd9Jyk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQWNjZXNzXG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrLCBub3RTZXRWYWx1ZSkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5fbWFwLmdldChrKTtcbiAgICAgIHJldHVybiBpbmRleCAhPT0gdW5kZWZpbmVkID8gdGhpcy5fbGlzdC5nZXQoaW5kZXgpWzFdIDogbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgICB0aGlzLl9tYXAuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fbGlzdC5jbGVhcigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbXB0eU9yZGVyZWRNYXAoKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oaywgdikge1xuICAgICAgcmV0dXJuIHVwZGF0ZU9yZGVyZWRNYXAodGhpcywgaywgdik7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGspIHtcbiAgICAgIHJldHVybiB1cGRhdGVPcmRlcmVkTWFwKHRoaXMsIGssIE5PVF9TRVQpO1xuICAgIH07XG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwLndhc0FsdGVyZWQoKSB8fCB0aGlzLl9saXN0Lndhc0FsdGVyZWQoKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLl9saXN0Ll9faXRlcmF0ZShcbiAgICAgICAgZnVuY3Rpb24oZW50cnkgKSB7cmV0dXJuIGVudHJ5ICYmIGZuKGVudHJ5WzFdLCBlbnRyeVswXSwgdGhpcyQwKX0sXG4gICAgICAgIHJldmVyc2VcbiAgICAgICk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbGlzdC5mcm9tRW50cnlTZXEoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuICAgICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcC5fX2Vuc3VyZU93bmVyKG93bmVySUQpO1xuICAgICAgdmFyIG5ld0xpc3QgPSB0aGlzLl9saXN0Ll9fZW5zdXJlT3duZXIob3duZXJJRCk7XG4gICAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgICB0aGlzLl9tYXAgPSBuZXdNYXA7XG4gICAgICAgIHRoaXMuX2xpc3QgPSBuZXdMaXN0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlT3JkZXJlZE1hcChuZXdNYXAsIG5ld0xpc3QsIG93bmVySUQsIHRoaXMuX19oYXNoKTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gaXNPcmRlcmVkTWFwKG1heWJlT3JkZXJlZE1hcCkge1xuICAgIHJldHVybiBpc01hcChtYXliZU9yZGVyZWRNYXApICYmIGlzT3JkZXJlZChtYXliZU9yZGVyZWRNYXApO1xuICB9XG5cbiAgT3JkZXJlZE1hcC5pc09yZGVyZWRNYXAgPSBpc09yZGVyZWRNYXA7XG5cbiAgT3JkZXJlZE1hcC5wcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuICBPcmRlcmVkTWFwLnByb3RvdHlwZVtERUxFVEVdID0gT3JkZXJlZE1hcC5wcm90b3R5cGUucmVtb3ZlO1xuXG5cblxuICBmdW5jdGlvbiBtYWtlT3JkZXJlZE1hcChtYXAsIGxpc3QsIG93bmVySUQsIGhhc2gpIHtcbiAgICB2YXIgb21hcCA9IE9iamVjdC5jcmVhdGUoT3JkZXJlZE1hcC5wcm90b3R5cGUpO1xuICAgIG9tYXAuc2l6ZSA9IG1hcCA/IG1hcC5zaXplIDogMDtcbiAgICBvbWFwLl9tYXAgPSBtYXA7XG4gICAgb21hcC5fbGlzdCA9IGxpc3Q7XG4gICAgb21hcC5fX293bmVySUQgPSBvd25lcklEO1xuICAgIG9tYXAuX19oYXNoID0gaGFzaDtcbiAgICByZXR1cm4gb21hcDtcbiAgfVxuXG4gIHZhciBFTVBUWV9PUkRFUkVEX01BUDtcbiAgZnVuY3Rpb24gZW1wdHlPcmRlcmVkTWFwKCkge1xuICAgIHJldHVybiBFTVBUWV9PUkRFUkVEX01BUCB8fCAoRU1QVFlfT1JERVJFRF9NQVAgPSBtYWtlT3JkZXJlZE1hcChlbXB0eU1hcCgpLCBlbXB0eUxpc3QoKSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlT3JkZXJlZE1hcChvbWFwLCBrLCB2KSB7XG4gICAgdmFyIG1hcCA9IG9tYXAuX21hcDtcbiAgICB2YXIgbGlzdCA9IG9tYXAuX2xpc3Q7XG4gICAgdmFyIGkgPSBtYXAuZ2V0KGspO1xuICAgIHZhciBoYXMgPSBpICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIG5ld01hcDtcbiAgICB2YXIgbmV3TGlzdDtcbiAgICBpZiAodiA9PT0gTk9UX1NFVCkgeyAvLyByZW1vdmVkXG4gICAgICBpZiAoIWhhcykge1xuICAgICAgICByZXR1cm4gb21hcDtcbiAgICAgIH1cbiAgICAgIGlmIChsaXN0LnNpemUgPj0gU0laRSAmJiBsaXN0LnNpemUgPj0gbWFwLnNpemUgKiAyKSB7XG4gICAgICAgIG5ld0xpc3QgPSBsaXN0LmZpbHRlcihmdW5jdGlvbihlbnRyeSwgaWR4KSAge3JldHVybiBlbnRyeSAhPT0gdW5kZWZpbmVkICYmIGkgIT09IGlkeH0pO1xuICAgICAgICBuZXdNYXAgPSBuZXdMaXN0LnRvS2V5ZWRTZXEoKS5tYXAoZnVuY3Rpb24oZW50cnkgKSB7cmV0dXJuIGVudHJ5WzBdfSkuZmxpcCgpLnRvTWFwKCk7XG4gICAgICAgIGlmIChvbWFwLl9fb3duZXJJRCkge1xuICAgICAgICAgIG5ld01hcC5fX293bmVySUQgPSBuZXdMaXN0Ll9fb3duZXJJRCA9IG9tYXAuX19vd25lcklEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdNYXAgPSBtYXAucmVtb3ZlKGspO1xuICAgICAgICBuZXdMaXN0ID0gaSA9PT0gbGlzdC5zaXplIC0gMSA/IGxpc3QucG9wKCkgOiBsaXN0LnNldChpLCB1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKSB7XG4gICAgICAgIGlmICh2ID09PSBsaXN0LmdldChpKVsxXSkge1xuICAgICAgICAgIHJldHVybiBvbWFwO1xuICAgICAgICB9XG4gICAgICAgIG5ld01hcCA9IG1hcDtcbiAgICAgICAgbmV3TGlzdCA9IGxpc3Quc2V0KGksIFtrLCB2XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdNYXAgPSBtYXAuc2V0KGssIGxpc3Quc2l6ZSk7XG4gICAgICAgIG5ld0xpc3QgPSBsaXN0LnNldChsaXN0LnNpemUsIFtrLCB2XSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbWFwLl9fb3duZXJJRCkge1xuICAgICAgb21hcC5zaXplID0gbmV3TWFwLnNpemU7XG4gICAgICBvbWFwLl9tYXAgPSBuZXdNYXA7XG4gICAgICBvbWFwLl9saXN0ID0gbmV3TGlzdDtcbiAgICAgIG9tYXAuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9tYXA7XG4gICAgfVxuICAgIHJldHVybiBtYWtlT3JkZXJlZE1hcChuZXdNYXAsIG5ld0xpc3QpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoVG9LZXllZFNlcXVlbmNlLCBLZXllZFNlcSk7XG4gICAgZnVuY3Rpb24gVG9LZXllZFNlcXVlbmNlKGluZGV4ZWQsIHVzZUtleXMpIHtcbiAgICAgIHRoaXMuX2l0ZXIgPSBpbmRleGVkO1xuICAgICAgdGhpcy5fdXNlS2V5cyA9IHVzZUtleXM7XG4gICAgICB0aGlzLnNpemUgPSBpbmRleGVkLnNpemU7XG4gICAgfVxuXG4gICAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci5nZXQoa2V5LCBub3RTZXRWYWx1ZSk7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci5oYXMoa2V5KTtcbiAgICB9O1xuXG4gICAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS52YWx1ZVNlcSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIudmFsdWVTZXEoKTtcbiAgICB9O1xuXG4gICAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5yZXZlcnNlID0gZnVuY3Rpb24oKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgcmV2ZXJzZWRTZXF1ZW5jZSA9IHJldmVyc2VGYWN0b3J5KHRoaXMsIHRydWUpO1xuICAgICAgaWYgKCF0aGlzLl91c2VLZXlzKSB7XG4gICAgICAgIHJldmVyc2VkU2VxdWVuY2UudmFsdWVTZXEgPSBmdW5jdGlvbigpICB7cmV0dXJuIHRoaXMkMC5faXRlci50b1NlcSgpLnJldmVyc2UoKX07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV2ZXJzZWRTZXF1ZW5jZTtcbiAgICB9O1xuXG4gICAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbihtYXBwZXIsIGNvbnRleHQpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBtYXBwZWRTZXF1ZW5jZSA9IG1hcEZhY3RvcnkodGhpcywgbWFwcGVyLCBjb250ZXh0KTtcbiAgICAgIGlmICghdGhpcy5fdXNlS2V5cykge1xuICAgICAgICBtYXBwZWRTZXF1ZW5jZS52YWx1ZVNlcSA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gdGhpcyQwLl9pdGVyLnRvU2VxKCkubWFwKG1hcHBlciwgY29udGV4dCl9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hcHBlZFNlcXVlbmNlO1xuICAgIH07XG5cbiAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgaWk7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci5fX2l0ZXJhdGUoXG4gICAgICAgIHRoaXMuX3VzZUtleXMgP1xuICAgICAgICAgIGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIGZuKHYsIGssIHRoaXMkMCl9IDpcbiAgICAgICAgICAoKGlpID0gcmV2ZXJzZSA/IHJlc29sdmVTaXplKHRoaXMpIDogMCksXG4gICAgICAgICAgICBmdW5jdGlvbih2ICkge3JldHVybiBmbih2LCByZXZlcnNlID8gLS1paSA6IGlpKyssIHRoaXMkMCl9KSxcbiAgICAgICAgcmV2ZXJzZVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHRoaXMuX3VzZUtleXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXIuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgaWkgPSByZXZlcnNlID8gcmVzb2x2ZVNpemUodGhpcykgOiAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICByZXR1cm4gc3RlcC5kb25lID8gc3RlcCA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCByZXZlcnNlID8gLS1paSA6IGlpKyssIHN0ZXAudmFsdWUsIHN0ZXApO1xuICAgICAgfSk7XG4gICAgfTtcblxuICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlW0lTX09SREVSRURfU0VOVElORUxdID0gdHJ1ZTtcblxuXG4gIGNyZWF0ZUNsYXNzKFRvSW5kZXhlZFNlcXVlbmNlLCBJbmRleGVkU2VxKTtcbiAgICBmdW5jdGlvbiBUb0luZGV4ZWRTZXF1ZW5jZShpdGVyKSB7XG4gICAgICB0aGlzLl9pdGVyID0gaXRlcjtcbiAgICAgIHRoaXMuc2l6ZSA9IGl0ZXIuc2l6ZTtcbiAgICB9XG5cbiAgICBUb0luZGV4ZWRTZXF1ZW5jZS5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuaW5jbHVkZXModmFsdWUpO1xuICAgIH07XG5cbiAgICBUb0luZGV4ZWRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShmdW5jdGlvbih2ICkge3JldHVybiBmbih2LCBpdGVyYXRpb25zKyssIHRoaXMkMCl9LCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICByZXR1cm4gc3RlcC5kb25lID8gc3RlcCA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHN0ZXAudmFsdWUsIHN0ZXApXG4gICAgICB9KTtcbiAgICB9O1xuXG5cblxuICBjcmVhdGVDbGFzcyhUb1NldFNlcXVlbmNlLCBTZXRTZXEpO1xuICAgIGZ1bmN0aW9uIFRvU2V0U2VxdWVuY2UoaXRlcikge1xuICAgICAgdGhpcy5faXRlciA9IGl0ZXI7XG4gICAgICB0aGlzLnNpemUgPSBpdGVyLnNpemU7XG4gICAgfVxuXG4gICAgVG9TZXRTZXF1ZW5jZS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci5pbmNsdWRlcyhrZXkpO1xuICAgIH07XG5cbiAgICBUb1NldFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRlKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIGZuKHYsIHYsIHRoaXMkMCl9LCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgVG9TZXRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXIuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIHJldHVybiBzdGVwLmRvbmUgPyBzdGVwIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIHN0ZXAudmFsdWUsIHN0ZXAudmFsdWUsIHN0ZXApO1xuICAgICAgfSk7XG4gICAgfTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoRnJvbUVudHJpZXNTZXF1ZW5jZSwgS2V5ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIEZyb21FbnRyaWVzU2VxdWVuY2UoZW50cmllcykge1xuICAgICAgdGhpcy5faXRlciA9IGVudHJpZXM7XG4gICAgICB0aGlzLnNpemUgPSBlbnRyaWVzLnNpemU7XG4gICAgfVxuXG4gICAgRnJvbUVudHJpZXNTZXF1ZW5jZS5wcm90b3R5cGUuZW50cnlTZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLnRvU2VxKCk7XG4gICAgfTtcblxuICAgIEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci5fX2l0ZXJhdGUoZnVuY3Rpb24oZW50cnkgKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGVudHJ5IGV4aXN0cyBmaXJzdCBzbyBhcnJheSBhY2Nlc3MgZG9lc24ndCB0aHJvdyBmb3IgaG9sZXNcbiAgICAgICAgLy8gaW4gdGhlIHBhcmVudCBpdGVyYXRpb24uXG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhbGlkYXRlRW50cnkoZW50cnkpO1xuICAgICAgICAgIHZhciBpbmRleGVkSXRlcmFibGUgPSBpc0l0ZXJhYmxlKGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gZm4oXG4gICAgICAgICAgICBpbmRleGVkSXRlcmFibGUgPyBlbnRyeS5nZXQoMSkgOiBlbnRyeVsxXSxcbiAgICAgICAgICAgIGluZGV4ZWRJdGVyYWJsZSA/IGVudHJ5LmdldCgwKSA6IGVudHJ5WzBdLFxuICAgICAgICAgICAgdGhpcyQwXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgZW50cnkgZXhpc3RzIGZpcnN0IHNvIGFycmF5IGFjY2VzcyBkb2Vzbid0IHRocm93IGZvciBob2xlc1xuICAgICAgICAgIC8vIGluIHRoZSBwYXJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgdmFsaWRhdGVFbnRyeShlbnRyeSk7XG4gICAgICAgICAgICB2YXIgaW5kZXhlZEl0ZXJhYmxlID0gaXNJdGVyYWJsZShlbnRyeSk7XG4gICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZShcbiAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgaW5kZXhlZEl0ZXJhYmxlID8gZW50cnkuZ2V0KDApIDogZW50cnlbMF0sXG4gICAgICAgICAgICAgIGluZGV4ZWRJdGVyYWJsZSA/IGVudHJ5LmdldCgxKSA6IGVudHJ5WzFdLFxuICAgICAgICAgICAgICBzdGVwXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuXG4gIFRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9XG4gIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPVxuICBUb1NldFNlcXVlbmNlLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9XG4gIEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlLmNhY2hlUmVzdWx0ID1cbiAgICBjYWNoZVJlc3VsdFRocm91Z2g7XG5cblxuICBmdW5jdGlvbiBmbGlwRmFjdG9yeShpdGVyYWJsZSkge1xuICAgIHZhciBmbGlwU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIGZsaXBTZXF1ZW5jZS5faXRlciA9IGl0ZXJhYmxlO1xuICAgIGZsaXBTZXF1ZW5jZS5zaXplID0gaXRlcmFibGUuc2l6ZTtcbiAgICBmbGlwU2VxdWVuY2UuZmxpcCA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGV9O1xuICAgIGZsaXBTZXF1ZW5jZS5yZXZlcnNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSBpdGVyYWJsZS5yZXZlcnNlLmFwcGx5KHRoaXMpOyAvLyBzdXBlci5yZXZlcnNlKClcbiAgICAgIHJldmVyc2VkU2VxdWVuY2UuZmxpcCA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGUucmV2ZXJzZSgpfTtcbiAgICAgIHJldHVybiByZXZlcnNlZFNlcXVlbmNlO1xuICAgIH07XG4gICAgZmxpcFNlcXVlbmNlLmhhcyA9IGZ1bmN0aW9uKGtleSApIHtyZXR1cm4gaXRlcmFibGUuaW5jbHVkZXMoa2V5KX07XG4gICAgZmxpcFNlcXVlbmNlLmluY2x1ZGVzID0gZnVuY3Rpb24oa2V5ICkge3JldHVybiBpdGVyYWJsZS5oYXMoa2V5KX07XG4gICAgZmxpcFNlcXVlbmNlLmNhY2hlUmVzdWx0ID0gY2FjaGVSZXN1bHRUaHJvdWdoO1xuICAgIGZsaXBTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge3JldHVybiBmbihrLCB2LCB0aGlzJDApICE9PSBmYWxzZX0sIHJldmVyc2UpO1xuICAgIH1cbiAgICBmbGlwU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHR5cGUgPT09IElURVJBVEVfRU5UUklFUykge1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoIXN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgdmFyIGsgPSBzdGVwLnZhbHVlWzBdO1xuICAgICAgICAgICAgc3RlcC52YWx1ZVswXSA9IHN0ZXAudmFsdWVbMV07XG4gICAgICAgICAgICBzdGVwLnZhbHVlWzFdID0gaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0b3IoXG4gICAgICAgIHR5cGUgPT09IElURVJBVEVfVkFMVUVTID8gSVRFUkFURV9LRVlTIDogSVRFUkFURV9WQUxVRVMsXG4gICAgICAgIHJldmVyc2VcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBmbGlwU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG1hcEZhY3RvcnkoaXRlcmFibGUsIG1hcHBlciwgY29udGV4dCkge1xuICAgIHZhciBtYXBwZWRTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgbWFwcGVkU2VxdWVuY2Uuc2l6ZSA9IGl0ZXJhYmxlLnNpemU7XG4gICAgbWFwcGVkU2VxdWVuY2UuaGFzID0gZnVuY3Rpb24oa2V5ICkge3JldHVybiBpdGVyYWJsZS5oYXMoa2V5KX07XG4gICAgbWFwcGVkU2VxdWVuY2UuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkgIHtcbiAgICAgIHZhciB2ID0gaXRlcmFibGUuZ2V0KGtleSwgTk9UX1NFVCk7XG4gICAgICByZXR1cm4gdiA9PT0gTk9UX1NFVCA/XG4gICAgICAgIG5vdFNldFZhbHVlIDpcbiAgICAgICAgbWFwcGVyLmNhbGwoY29udGV4dCwgdiwga2V5LCBpdGVyYWJsZSk7XG4gICAgfTtcbiAgICBtYXBwZWRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0ZShcbiAgICAgICAgZnVuY3Rpb24odiwgaywgYykgIHtyZXR1cm4gZm4obWFwcGVyLmNhbGwoY29udGV4dCwgdiwgaywgYyksIGssIHRoaXMkMCkgIT09IGZhbHNlfSxcbiAgICAgICAgcmV2ZXJzZVxuICAgICAgKTtcbiAgICB9XG4gICAgbWFwcGVkU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24gKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgIHZhciBrZXkgPSBlbnRyeVswXTtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUoXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgbWFwcGVyLmNhbGwoY29udGV4dCwgZW50cnlbMV0sIGtleSwgaXRlcmFibGUpLFxuICAgICAgICAgIHN0ZXBcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWFwcGVkU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHJldmVyc2VGYWN0b3J5KGl0ZXJhYmxlLCB1c2VLZXlzKSB7XG4gICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIHJldmVyc2VkU2VxdWVuY2UuX2l0ZXIgPSBpdGVyYWJsZTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLnNpemUgPSBpdGVyYWJsZS5zaXplO1xuICAgIHJldmVyc2VkU2VxdWVuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGV9O1xuICAgIGlmIChpdGVyYWJsZS5mbGlwKSB7XG4gICAgICByZXZlcnNlZFNlcXVlbmNlLmZsaXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmbGlwU2VxdWVuY2UgPSBmbGlwRmFjdG9yeShpdGVyYWJsZSk7XG4gICAgICAgIGZsaXBTZXF1ZW5jZS5yZXZlcnNlID0gZnVuY3Rpb24oKSAge3JldHVybiBpdGVyYWJsZS5mbGlwKCl9O1xuICAgICAgICByZXR1cm4gZmxpcFNlcXVlbmNlO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5nZXQgPSBmdW5jdGlvbihrZXksIG5vdFNldFZhbHVlKSBcbiAgICAgIHtyZXR1cm4gaXRlcmFibGUuZ2V0KHVzZUtleXMgPyBrZXkgOiAtMSAtIGtleSwgbm90U2V0VmFsdWUpfTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLmhhcyA9IGZ1bmN0aW9uKGtleSApXG4gICAgICB7cmV0dXJuIGl0ZXJhYmxlLmhhcyh1c2VLZXlzID8ga2V5IDogLTEgLSBrZXkpfTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLmluY2x1ZGVzID0gZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIGl0ZXJhYmxlLmluY2x1ZGVzKHZhbHVlKX07XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5jYWNoZVJlc3VsdCA9IGNhY2hlUmVzdWx0VGhyb3VnaDtcbiAgICByZXZlcnNlZFNlcXVlbmNlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge3JldHVybiBmbih2LCBrLCB0aGlzJDApfSwgIXJldmVyc2UpO1xuICAgIH07XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5fX2l0ZXJhdG9yID1cbiAgICAgIGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpICB7cmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0b3IodHlwZSwgIXJldmVyc2UpfTtcbiAgICByZXR1cm4gcmV2ZXJzZWRTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gZmlsdGVyRmFjdG9yeShpdGVyYWJsZSwgcHJlZGljYXRlLCBjb250ZXh0LCB1c2VLZXlzKSB7XG4gICAgdmFyIGZpbHRlclNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICBpZiAodXNlS2V5cykge1xuICAgICAgZmlsdGVyU2VxdWVuY2UuaGFzID0gZnVuY3Rpb24oa2V5ICkge1xuICAgICAgICB2YXIgdiA9IGl0ZXJhYmxlLmdldChrZXksIE5PVF9TRVQpO1xuICAgICAgICByZXR1cm4gdiAhPT0gTk9UX1NFVCAmJiAhIXByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGtleSwgaXRlcmFibGUpO1xuICAgICAgfTtcbiAgICAgIGZpbHRlclNlcXVlbmNlLmdldCA9IGZ1bmN0aW9uKGtleSwgbm90U2V0VmFsdWUpICB7XG4gICAgICAgIHZhciB2ID0gaXRlcmFibGUuZ2V0KGtleSwgTk9UX1NFVCk7XG4gICAgICAgIHJldHVybiB2ICE9PSBOT1RfU0VUICYmIHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGtleSwgaXRlcmFibGUpID9cbiAgICAgICAgICB2IDogbm90U2V0VmFsdWU7XG4gICAgICB9O1xuICAgIH1cbiAgICBmaWx0ZXJTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuICAgICAgICAgIGl0ZXJhdGlvbnMrKztcbiAgICAgICAgICByZXR1cm4gZm4odiwgdXNlS2V5cyA/IGsgOiBpdGVyYXRpb25zIC0gMSwgdGhpcyQwKTtcbiAgICAgICAgfVxuICAgICAgfSwgcmV2ZXJzZSk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuICAgIGZpbHRlclNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uICh0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICB2YXIga2V5ID0gZW50cnlbMF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gZW50cnlbMV07XG4gICAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHZhbHVlLCBrZXksIGl0ZXJhYmxlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgdXNlS2V5cyA/IGtleSA6IGl0ZXJhdGlvbnMrKywgdmFsdWUsIHN0ZXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gY291bnRCeUZhY3RvcnkoaXRlcmFibGUsIGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgZ3JvdXBzID0gTWFwKCkuYXNNdXRhYmxlKCk7XG4gICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICBncm91cHMudXBkYXRlKFxuICAgICAgICBncm91cGVyLmNhbGwoY29udGV4dCwgdiwgaywgaXRlcmFibGUpLFxuICAgICAgICAwLFxuICAgICAgICBmdW5jdGlvbihhICkge3JldHVybiBhICsgMX1cbiAgICAgICk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGdyb3Vwcy5hc0ltbXV0YWJsZSgpO1xuICB9XG5cblxuICBmdW5jdGlvbiBncm91cEJ5RmFjdG9yeShpdGVyYWJsZSwgZ3JvdXBlciwgY29udGV4dCkge1xuICAgIHZhciBpc0tleWVkSXRlciA9IGlzS2V5ZWQoaXRlcmFibGUpO1xuICAgIHZhciBncm91cHMgPSAoaXNPcmRlcmVkKGl0ZXJhYmxlKSA/IE9yZGVyZWRNYXAoKSA6IE1hcCgpKS5hc011dGFibGUoKTtcbiAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcbiAgICAgIGdyb3Vwcy51cGRhdGUoXG4gICAgICAgIGdyb3VwZXIuY2FsbChjb250ZXh0LCB2LCBrLCBpdGVyYWJsZSksXG4gICAgICAgIGZ1bmN0aW9uKGEgKSB7cmV0dXJuIChhID0gYSB8fCBbXSwgYS5wdXNoKGlzS2V5ZWRJdGVyID8gW2ssIHZdIDogdiksIGEpfVxuICAgICAgKTtcbiAgICB9KTtcbiAgICB2YXIgY29lcmNlID0gaXRlcmFibGVDbGFzcyhpdGVyYWJsZSk7XG4gICAgcmV0dXJuIGdyb3Vwcy5tYXAoZnVuY3Rpb24oYXJyICkge3JldHVybiByZWlmeShpdGVyYWJsZSwgY29lcmNlKGFycikpfSk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHNsaWNlRmFjdG9yeShpdGVyYWJsZSwgYmVnaW4sIGVuZCwgdXNlS2V5cykge1xuICAgIHZhciBvcmlnaW5hbFNpemUgPSBpdGVyYWJsZS5zaXplO1xuXG4gICAgLy8gU2FuaXRpemUgYmVnaW4gJiBlbmQgdXNpbmcgdGhpcyBzaG9ydGhhbmQgZm9yIFRvSW50MzIoYXJndW1lbnQpXG4gICAgLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvaW50MzJcbiAgICBpZiAoYmVnaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgYmVnaW4gPSBiZWdpbiB8IDA7XG4gICAgfVxuICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZW5kID0gZW5kIHwgMDtcbiAgICB9XG5cbiAgICBpZiAod2hvbGVTbGljZShiZWdpbiwgZW5kLCBvcmlnaW5hbFNpemUpKSB7XG4gICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgfVxuXG4gICAgdmFyIHJlc29sdmVkQmVnaW4gPSByZXNvbHZlQmVnaW4oYmVnaW4sIG9yaWdpbmFsU2l6ZSk7XG4gICAgdmFyIHJlc29sdmVkRW5kID0gcmVzb2x2ZUVuZChlbmQsIG9yaWdpbmFsU2l6ZSk7XG5cbiAgICAvLyBiZWdpbiBvciBlbmQgd2lsbCBiZSBOYU4gaWYgdGhleSB3ZXJlIHByb3ZpZGVkIGFzIG5lZ2F0aXZlIG51bWJlcnMgYW5kXG4gICAgLy8gdGhpcyBpdGVyYWJsZSdzIHNpemUgaXMgdW5rbm93bi4gSW4gdGhhdCBjYXNlLCBjYWNoZSBmaXJzdCBzbyB0aGVyZSBpc1xuICAgIC8vIGEga25vd24gc2l6ZSBhbmQgdGhlc2UgZG8gbm90IHJlc29sdmUgdG8gTmFOLlxuICAgIGlmIChyZXNvbHZlZEJlZ2luICE9PSByZXNvbHZlZEJlZ2luIHx8IHJlc29sdmVkRW5kICE9PSByZXNvbHZlZEVuZCkge1xuICAgICAgcmV0dXJuIHNsaWNlRmFjdG9yeShpdGVyYWJsZS50b1NlcSgpLmNhY2hlUmVzdWx0KCksIGJlZ2luLCBlbmQsIHVzZUtleXMpO1xuICAgIH1cblxuICAgIC8vIE5vdGU6IHJlc29sdmVkRW5kIGlzIHVuZGVmaW5lZCB3aGVuIHRoZSBvcmlnaW5hbCBzZXF1ZW5jZSdzIGxlbmd0aCBpc1xuICAgIC8vIHVua25vd24gYW5kIHRoaXMgc2xpY2UgZGlkIG5vdCBzdXBwbHkgYW4gZW5kIGFuZCBzaG91bGQgY29udGFpbiBhbGxcbiAgICAvLyBlbGVtZW50cyBhZnRlciByZXNvbHZlZEJlZ2luLlxuICAgIC8vIEluIHRoYXQgY2FzZSwgcmVzb2x2ZWRTaXplIHdpbGwgYmUgTmFOIGFuZCBzbGljZVNpemUgd2lsbCByZW1haW4gdW5kZWZpbmVkLlxuICAgIHZhciByZXNvbHZlZFNpemUgPSByZXNvbHZlZEVuZCAtIHJlc29sdmVkQmVnaW47XG4gICAgdmFyIHNsaWNlU2l6ZTtcbiAgICBpZiAocmVzb2x2ZWRTaXplID09PSByZXNvbHZlZFNpemUpIHtcbiAgICAgIHNsaWNlU2l6ZSA9IHJlc29sdmVkU2l6ZSA8IDAgPyAwIDogcmVzb2x2ZWRTaXplO1xuICAgIH1cblxuICAgIHZhciBzbGljZVNlcSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG5cbiAgICAvLyBJZiBpdGVyYWJsZS5zaXplIGlzIHVuZGVmaW5lZCwgdGhlIHNpemUgb2YgdGhlIHJlYWxpemVkIHNsaWNlU2VxIGlzXG4gICAgLy8gdW5rbm93biBhdCB0aGlzIHBvaW50IHVubGVzcyB0aGUgbnVtYmVyIG9mIGl0ZW1zIHRvIHNsaWNlIGlzIDBcbiAgICBzbGljZVNlcS5zaXplID0gc2xpY2VTaXplID09PSAwID8gc2xpY2VTaXplIDogaXRlcmFibGUuc2l6ZSAmJiBzbGljZVNpemUgfHwgdW5kZWZpbmVkO1xuXG4gICAgaWYgKCF1c2VLZXlzICYmIGlzU2VxKGl0ZXJhYmxlKSAmJiBzbGljZVNpemUgPj0gMCkge1xuICAgICAgc2xpY2VTZXEuZ2V0ID0gZnVuY3Rpb24gKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgICBpbmRleCA9IHdyYXBJbmRleCh0aGlzLCBpbmRleCk7XG4gICAgICAgIHJldHVybiBpbmRleCA+PSAwICYmIGluZGV4IDwgc2xpY2VTaXplID9cbiAgICAgICAgICBpdGVyYWJsZS5nZXQoaW5kZXggKyByZXNvbHZlZEJlZ2luLCBub3RTZXRWYWx1ZSkgOlxuICAgICAgICAgIG5vdFNldFZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNsaWNlU2VxLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIGlmIChzbGljZVNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgc2tpcHBlZCA9IDA7XG4gICAgICB2YXIgaXNTa2lwcGluZyA9IHRydWU7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcbiAgICAgICAgaWYgKCEoaXNTa2lwcGluZyAmJiAoaXNTa2lwcGluZyA9IHNraXBwZWQrKyA8IHJlc29sdmVkQmVnaW4pKSkge1xuICAgICAgICAgIGl0ZXJhdGlvbnMrKztcbiAgICAgICAgICByZXR1cm4gZm4odiwgdXNlS2V5cyA/IGsgOiBpdGVyYXRpb25zIC0gMSwgdGhpcyQwKSAhPT0gZmFsc2UgJiZcbiAgICAgICAgICAgICAgICAgaXRlcmF0aW9ucyAhPT0gc2xpY2VTaXplO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG5cbiAgICBzbGljZVNlcS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICBpZiAoc2xpY2VTaXplICE9PSAwICYmIHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgLy8gRG9uJ3QgYm90aGVyIGluc3RhbnRpYXRpbmcgcGFyZW50IGl0ZXJhdG9yIGlmIHRha2luZyAwLlxuICAgICAgdmFyIGl0ZXJhdG9yID0gc2xpY2VTaXplICE9PSAwICYmIGl0ZXJhYmxlLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB2YXIgc2tpcHBlZCA9IDA7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgd2hpbGUgKHNraXBwZWQrKyA8IHJlc29sdmVkQmVnaW4pIHtcbiAgICAgICAgICBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCsraXRlcmF0aW9ucyA+IHNsaWNlU2l6ZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKHVzZUtleXMgfHwgdHlwZSA9PT0gSVRFUkFURV9WQUxVRVMpIHtcbiAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJVEVSQVRFX0tFWVMpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zIC0gMSwgdW5kZWZpbmVkLCBzdGVwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zIC0gMSwgc3RlcC52YWx1ZVsxXSwgc3RlcCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzbGljZVNlcTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gdGFrZVdoaWxlRmFjdG9yeShpdGVyYWJsZSwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIHRha2VTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgdGFrZVNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrLCBjKSBcbiAgICAgICAge3JldHVybiBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSAmJiArK2l0ZXJhdGlvbnMgJiYgZm4odiwgaywgdGhpcyQwKX1cbiAgICAgICk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuICAgIHRha2VTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgaXRlcmF0aW5nID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICBpZiAoIWl0ZXJhdGluZykge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgIHZhciBrID0gZW50cnlbMF07XG4gICAgICAgIHZhciB2ID0gZW50cnlbMV07XG4gICAgICAgIGlmICghcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgdGhpcyQwKSkge1xuICAgICAgICAgIGl0ZXJhdGluZyA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTID8gc3RlcCA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBrLCB2LCBzdGVwKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIHRha2VTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gc2tpcFdoaWxlRmFjdG9yeShpdGVyYWJsZSwgcHJlZGljYXRlLCBjb250ZXh0LCB1c2VLZXlzKSB7XG4gICAgdmFyIHNraXBTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgc2tpcFNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXNTa2lwcGluZyA9IHRydWU7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgIHtcbiAgICAgICAgaWYgKCEoaXNTa2lwcGluZyAmJiAoaXNTa2lwcGluZyA9IHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIGMpKSkpIHtcbiAgICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgICAgcmV0dXJuIGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucyAtIDEsIHRoaXMkMCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcbiAgICBza2lwU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIHNraXBwaW5nID0gdHJ1ZTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCwgaywgdjtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgaWYgKHVzZUtleXMgfHwgdHlwZSA9PT0gSVRFUkFURV9WQUxVRVMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElURVJBVEVfS0VZUykge1xuICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHVuZGVmaW5lZCwgc3RlcCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHN0ZXAudmFsdWVbMV0sIHN0ZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgIGsgPSBlbnRyeVswXTtcbiAgICAgICAgICB2ID0gZW50cnlbMV07XG4gICAgICAgICAgc2tpcHBpbmcgJiYgKHNraXBwaW5nID0gcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgdGhpcyQwKSk7XG4gICAgICAgIH0gd2hpbGUgKHNraXBwaW5nKTtcbiAgICAgICAgcmV0dXJuIHR5cGUgPT09IElURVJBVEVfRU5UUklFUyA/IHN0ZXAgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgc3RlcCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBza2lwU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGNvbmNhdEZhY3RvcnkoaXRlcmFibGUsIHZhbHVlcykge1xuICAgIHZhciBpc0tleWVkSXRlcmFibGUgPSBpc0tleWVkKGl0ZXJhYmxlKTtcbiAgICB2YXIgaXRlcnMgPSBbaXRlcmFibGVdLmNvbmNhdCh2YWx1ZXMpLm1hcChmdW5jdGlvbih2ICkge1xuICAgICAgaWYgKCFpc0l0ZXJhYmxlKHYpKSB7XG4gICAgICAgIHYgPSBpc0tleWVkSXRlcmFibGUgP1xuICAgICAgICAgIGtleWVkU2VxRnJvbVZhbHVlKHYpIDpcbiAgICAgICAgICBpbmRleGVkU2VxRnJvbVZhbHVlKEFycmF5LmlzQXJyYXkodikgPyB2IDogW3ZdKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNLZXllZEl0ZXJhYmxlKSB7XG4gICAgICAgIHYgPSBLZXllZEl0ZXJhYmxlKHYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHY7XG4gICAgfSkuZmlsdGVyKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIHYuc2l6ZSAhPT0gMH0pO1xuXG4gICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgIH1cblxuICAgIGlmIChpdGVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBzaW5nbGV0b24gPSBpdGVyc1swXTtcbiAgICAgIGlmIChzaW5nbGV0b24gPT09IGl0ZXJhYmxlIHx8XG4gICAgICAgICAgaXNLZXllZEl0ZXJhYmxlICYmIGlzS2V5ZWQoc2luZ2xldG9uKSB8fFxuICAgICAgICAgIGlzSW5kZXhlZChpdGVyYWJsZSkgJiYgaXNJbmRleGVkKHNpbmdsZXRvbikpIHtcbiAgICAgICAgcmV0dXJuIHNpbmdsZXRvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY29uY2F0U2VxID0gbmV3IEFycmF5U2VxKGl0ZXJzKTtcbiAgICBpZiAoaXNLZXllZEl0ZXJhYmxlKSB7XG4gICAgICBjb25jYXRTZXEgPSBjb25jYXRTZXEudG9LZXllZFNlcSgpO1xuICAgIH0gZWxzZSBpZiAoIWlzSW5kZXhlZChpdGVyYWJsZSkpIHtcbiAgICAgIGNvbmNhdFNlcSA9IGNvbmNhdFNlcS50b1NldFNlcSgpO1xuICAgIH1cbiAgICBjb25jYXRTZXEgPSBjb25jYXRTZXEuZmxhdHRlbih0cnVlKTtcbiAgICBjb25jYXRTZXEuc2l6ZSA9IGl0ZXJzLnJlZHVjZShcbiAgICAgIGZ1bmN0aW9uKHN1bSwgc2VxKSAge1xuICAgICAgICBpZiAoc3VtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgc2l6ZSA9IHNlcS5zaXplO1xuICAgICAgICAgIGlmIChzaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdW0gKyBzaXplO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIDBcbiAgICApO1xuICAgIHJldHVybiBjb25jYXRTZXE7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGZsYXR0ZW5GYWN0b3J5KGl0ZXJhYmxlLCBkZXB0aCwgdXNlS2V5cykge1xuICAgIHZhciBmbGF0U2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIGZsYXRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB2YXIgc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgZnVuY3Rpb24gZmxhdERlZXAoaXRlciwgY3VycmVudERlcHRoKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICAgIGl0ZXIuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICAgICAgaWYgKCghZGVwdGggfHwgY3VycmVudERlcHRoIDwgZGVwdGgpICYmIGlzSXRlcmFibGUodikpIHtcbiAgICAgICAgICAgIGZsYXREZWVwKHYsIGN1cnJlbnREZXB0aCArIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZm4odiwgdXNlS2V5cyA/IGsgOiBpdGVyYXRpb25zKyssIHRoaXMkMCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICFzdG9wcGVkO1xuICAgICAgICB9LCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIGZsYXREZWVwKGl0ZXJhYmxlLCAwKTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH1cbiAgICBmbGF0U2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIHZhciBzdGFjayA9IFtdO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHdoaWxlIChpdGVyYXRvcikge1xuICAgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgIGlmIChzdGVwLmRvbmUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB2ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTKSB7XG4gICAgICAgICAgICB2ID0gdlsxXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCghZGVwdGggfHwgc3RhY2subGVuZ3RoIDwgZGVwdGgpICYmIGlzSXRlcmFibGUodikpIHtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goaXRlcmF0b3IpO1xuICAgICAgICAgICAgaXRlcmF0b3IgPSB2Ll9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1c2VLZXlzID8gc3RlcCA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCB2LCBzdGVwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmbGF0U2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGZsYXRNYXBGYWN0b3J5KGl0ZXJhYmxlLCBtYXBwZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgY29lcmNlID0gaXRlcmFibGVDbGFzcyhpdGVyYWJsZSk7XG4gICAgcmV0dXJuIGl0ZXJhYmxlLnRvU2VxKCkubWFwKFxuICAgICAgZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gY29lcmNlKG1hcHBlci5jYWxsKGNvbnRleHQsIHYsIGssIGl0ZXJhYmxlKSl9XG4gICAgKS5mbGF0dGVuKHRydWUpO1xuICB9XG5cblxuICBmdW5jdGlvbiBpbnRlcnBvc2VGYWN0b3J5KGl0ZXJhYmxlLCBzZXBhcmF0b3IpIHtcbiAgICB2YXIgaW50ZXJwb3NlZFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICBpbnRlcnBvc2VkU2VxdWVuY2Uuc2l6ZSA9IGl0ZXJhYmxlLnNpemUgJiYgaXRlcmFibGUuc2l6ZSAqIDIgLTE7XG4gICAgaW50ZXJwb3NlZFNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSBcbiAgICAgICAge3JldHVybiAoIWl0ZXJhdGlvbnMgfHwgZm4oc2VwYXJhdG9yLCBpdGVyYXRpb25zKyssIHRoaXMkMCkgIT09IGZhbHNlKSAmJlxuICAgICAgICBmbih2LCBpdGVyYXRpb25zKyssIHRoaXMkMCkgIT09IGZhbHNlfSxcbiAgICAgICAgcmV2ZXJzZVxuICAgICAgKTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG4gICAgaW50ZXJwb3NlZFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgdmFyIHN0ZXA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgaWYgKCFzdGVwIHx8IGl0ZXJhdGlvbnMgJSAyKSB7XG4gICAgICAgICAgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZXJhdGlvbnMgJSAyID9cbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgc2VwYXJhdG9yKSA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHN0ZXAudmFsdWUsIHN0ZXApO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gaW50ZXJwb3NlZFNlcXVlbmNlO1xuICB9XG5cblxuICBmdW5jdGlvbiBzb3J0RmFjdG9yeShpdGVyYWJsZSwgY29tcGFyYXRvciwgbWFwcGVyKSB7XG4gICAgaWYgKCFjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gZGVmYXVsdENvbXBhcmF0b3I7XG4gICAgfVxuICAgIHZhciBpc0tleWVkSXRlcmFibGUgPSBpc0tleWVkKGl0ZXJhYmxlKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyaWVzID0gaXRlcmFibGUudG9TZXEoKS5tYXAoXG4gICAgICBmdW5jdGlvbih2LCBrKSAge3JldHVybiBbaywgdiwgaW5kZXgrKywgbWFwcGVyID8gbWFwcGVyKHYsIGssIGl0ZXJhYmxlKSA6IHZdfVxuICAgICkudG9BcnJheSgpO1xuICAgIGVudHJpZXMuc29ydChmdW5jdGlvbihhLCBiKSAge3JldHVybiBjb21wYXJhdG9yKGFbM10sIGJbM10pIHx8IGFbMl0gLSBiWzJdfSkuZm9yRWFjaChcbiAgICAgIGlzS2V5ZWRJdGVyYWJsZSA/XG4gICAgICBmdW5jdGlvbih2LCBpKSAgeyBlbnRyaWVzW2ldLmxlbmd0aCA9IDI7IH0gOlxuICAgICAgZnVuY3Rpb24odiwgaSkgIHsgZW50cmllc1tpXSA9IHZbMV07IH1cbiAgICApO1xuICAgIHJldHVybiBpc0tleWVkSXRlcmFibGUgPyBLZXllZFNlcShlbnRyaWVzKSA6XG4gICAgICBpc0luZGV4ZWQoaXRlcmFibGUpID8gSW5kZXhlZFNlcShlbnRyaWVzKSA6XG4gICAgICBTZXRTZXEoZW50cmllcyk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG1heEZhY3RvcnkoaXRlcmFibGUsIGNvbXBhcmF0b3IsIG1hcHBlcikge1xuICAgIGlmICghY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IGRlZmF1bHRDb21wYXJhdG9yO1xuICAgIH1cbiAgICBpZiAobWFwcGVyKSB7XG4gICAgICB2YXIgZW50cnkgPSBpdGVyYWJsZS50b1NlcSgpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gW3YsIG1hcHBlcih2LCBrLCBpdGVyYWJsZSldfSlcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbihhLCBiKSAge3JldHVybiBtYXhDb21wYXJlKGNvbXBhcmF0b3IsIGFbMV0sIGJbMV0pID8gYiA6IGF9KTtcbiAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlLnJlZHVjZShmdW5jdGlvbihhLCBiKSAge3JldHVybiBtYXhDb21wYXJlKGNvbXBhcmF0b3IsIGEsIGIpID8gYiA6IGF9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtYXhDb21wYXJlKGNvbXBhcmF0b3IsIGEsIGIpIHtcbiAgICB2YXIgY29tcCA9IGNvbXBhcmF0b3IoYiwgYSk7XG4gICAgLy8gYiBpcyBjb25zaWRlcmVkIHRoZSBuZXcgbWF4IGlmIHRoZSBjb21wYXJhdG9yIGRlY2xhcmVzIHRoZW0gZXF1YWwsIGJ1dFxuICAgIC8vIHRoZXkgYXJlIG5vdCBlcXVhbCBhbmQgYiBpcyBpbiBmYWN0IGEgbnVsbGlzaCB2YWx1ZS5cbiAgICByZXR1cm4gKGNvbXAgPT09IDAgJiYgYiAhPT0gYSAmJiAoYiA9PT0gdW5kZWZpbmVkIHx8IGIgPT09IG51bGwgfHwgYiAhPT0gYikpIHx8IGNvbXAgPiAwO1xuICB9XG5cblxuICBmdW5jdGlvbiB6aXBXaXRoRmFjdG9yeShrZXlJdGVyLCB6aXBwZXIsIGl0ZXJzKSB7XG4gICAgdmFyIHppcFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGtleUl0ZXIpO1xuICAgIHppcFNlcXVlbmNlLnNpemUgPSBuZXcgQXJyYXlTZXEoaXRlcnMpLm1hcChmdW5jdGlvbihpICkge3JldHVybiBpLnNpemV9KS5taW4oKTtcbiAgICAvLyBOb3RlOiB0aGlzIGEgZ2VuZXJpYyBiYXNlIGltcGxlbWVudGF0aW9uIG9mIF9faXRlcmF0ZSBpbiB0ZXJtcyBvZlxuICAgIC8vIF9faXRlcmF0b3Igd2hpY2ggbWF5IGJlIG1vcmUgZ2VuZXJpY2FsbHkgdXNlZnVsIGluIHRoZSBmdXR1cmUuXG4gICAgemlwU2VxdWVuY2UuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIC8qIGdlbmVyaWM6XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgIGlmIChmbihzdGVwLnZhbHVlWzFdLCBzdGVwLnZhbHVlWzBdLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgICAqL1xuICAgICAgLy8gaW5kZXhlZDpcbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgaWYgKGZuKHN0ZXAudmFsdWUsIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG4gICAgemlwU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9ycyA9IGl0ZXJzLm1hcChmdW5jdGlvbihpIClcbiAgICAgICAge3JldHVybiAoaSA9IEl0ZXJhYmxlKGkpLCBnZXRJdGVyYXRvcihyZXZlcnNlID8gaS5yZXZlcnNlKCkgOiBpKSl9XG4gICAgICApO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgdmFyIGlzRG9uZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciBzdGVwcztcbiAgICAgICAgaWYgKCFpc0RvbmUpIHtcbiAgICAgICAgICBzdGVwcyA9IGl0ZXJhdG9ycy5tYXAoZnVuY3Rpb24oaSApIHtyZXR1cm4gaS5uZXh0KCl9KTtcbiAgICAgICAgICBpc0RvbmUgPSBzdGVwcy5zb21lKGZ1bmN0aW9uKHMgKSB7cmV0dXJuIHMuZG9uZX0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RvbmUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUoXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBpdGVyYXRpb25zKyssXG4gICAgICAgICAgemlwcGVyLmFwcGx5KG51bGwsIHN0ZXBzLm1hcChmdW5jdGlvbihzICkge3JldHVybiBzLnZhbHVlfSkpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiB6aXBTZXF1ZW5jZVxuICB9XG5cblxuICAvLyAjcHJhZ21hIEhlbHBlciBGdW5jdGlvbnNcblxuICBmdW5jdGlvbiByZWlmeShpdGVyLCBzZXEpIHtcbiAgICByZXR1cm4gaXNTZXEoaXRlcikgPyBzZXEgOiBpdGVyLmNvbnN0cnVjdG9yKHNlcSk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0ZUVudHJ5KGVudHJ5KSB7XG4gICAgaWYgKGVudHJ5ICE9PSBPYmplY3QoZW50cnkpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBbSywgVl0gdHVwbGU6ICcgKyBlbnRyeSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZVNpemUoaXRlcikge1xuICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgcmV0dXJuIGVuc3VyZVNpemUoaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBpdGVyYWJsZUNsYXNzKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIGlzS2V5ZWQoaXRlcmFibGUpID8gS2V5ZWRJdGVyYWJsZSA6XG4gICAgICBpc0luZGV4ZWQoaXRlcmFibGUpID8gSW5kZXhlZEl0ZXJhYmxlIDpcbiAgICAgIFNldEl0ZXJhYmxlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUoXG4gICAgICAoXG4gICAgICAgIGlzS2V5ZWQoaXRlcmFibGUpID8gS2V5ZWRTZXEgOlxuICAgICAgICBpc0luZGV4ZWQoaXRlcmFibGUpID8gSW5kZXhlZFNlcSA6XG4gICAgICAgIFNldFNlcVxuICAgICAgKS5wcm90b3R5cGVcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FjaGVSZXN1bHRUaHJvdWdoKCkge1xuICAgIGlmICh0aGlzLl9pdGVyLmNhY2hlUmVzdWx0KSB7XG4gICAgICB0aGlzLl9pdGVyLmNhY2hlUmVzdWx0KCk7XG4gICAgICB0aGlzLnNpemUgPSB0aGlzLl9pdGVyLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFNlcS5wcm90b3R5cGUuY2FjaGVSZXN1bHQuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0Q29tcGFyYXRvcihhLCBiKSB7XG4gICAgcmV0dXJuIGEgPiBiID8gMSA6IGEgPCBiID8gLTEgOiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yY2VJdGVyYXRvcihrZXlQYXRoKSB7XG4gICAgdmFyIGl0ZXIgPSBnZXRJdGVyYXRvcihrZXlQYXRoKTtcbiAgICBpZiAoIWl0ZXIpIHtcbiAgICAgIC8vIEFycmF5IG1pZ2h0IG5vdCBiZSBpdGVyYWJsZSBpbiB0aGlzIGVudmlyb25tZW50LCBzbyB3ZSBuZWVkIGEgZmFsbGJhY2tcbiAgICAgIC8vIHRvIG91ciB3cmFwcGVkIHR5cGUuXG4gICAgICBpZiAoIWlzQXJyYXlMaWtlKGtleVBhdGgpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGl0ZXJhYmxlIG9yIGFycmF5LWxpa2U6ICcgKyBrZXlQYXRoKTtcbiAgICAgIH1cbiAgICAgIGl0ZXIgPSBnZXRJdGVyYXRvcihJdGVyYWJsZShrZXlQYXRoKSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVyO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoUmVjb3JkLCBLZXllZENvbGxlY3Rpb24pO1xuXG4gICAgZnVuY3Rpb24gUmVjb3JkKGRlZmF1bHRWYWx1ZXMsIG5hbWUpIHtcbiAgICAgIHZhciBoYXNJbml0aWFsaXplZDtcblxuICAgICAgdmFyIFJlY29yZFR5cGUgPSBmdW5jdGlvbiBSZWNvcmQodmFsdWVzKSB7XG4gICAgICAgIGlmICh2YWx1ZXMgaW5zdGFuY2VvZiBSZWNvcmRUeXBlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVjb3JkVHlwZSkpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFJlY29yZFR5cGUodmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhhc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgaGFzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGVmYXVsdFZhbHVlcyk7XG4gICAgICAgICAgc2V0UHJvcHMoUmVjb3JkVHlwZVByb3RvdHlwZSwga2V5cyk7XG4gICAgICAgICAgUmVjb3JkVHlwZVByb3RvdHlwZS5zaXplID0ga2V5cy5sZW5ndGg7XG4gICAgICAgICAgUmVjb3JkVHlwZVByb3RvdHlwZS5fbmFtZSA9IG5hbWU7XG4gICAgICAgICAgUmVjb3JkVHlwZVByb3RvdHlwZS5fa2V5cyA9IGtleXM7XG4gICAgICAgICAgUmVjb3JkVHlwZVByb3RvdHlwZS5fZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRWYWx1ZXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWFwID0gTWFwKHZhbHVlcyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgUmVjb3JkVHlwZVByb3RvdHlwZSA9IFJlY29yZFR5cGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZWNvcmRQcm90b3R5cGUpO1xuICAgICAgUmVjb3JkVHlwZVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlY29yZFR5cGU7XG5cbiAgICAgIHJldHVybiBSZWNvcmRUeXBlO1xuICAgIH1cblxuICAgIFJlY29yZC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcocmVjb3JkTmFtZSh0aGlzKSArICcgeycsICd9Jyk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQWNjZXNzXG5cbiAgICBSZWNvcmQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGspIHtcbiAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0VmFsdWVzLmhhc093blByb3BlcnR5KGspO1xuICAgIH07XG5cbiAgICBSZWNvcmQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGssIG5vdFNldFZhbHVlKSB7XG4gICAgICBpZiAoIXRoaXMuaGFzKGspKSB7XG4gICAgICAgIHJldHVybiBub3RTZXRWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkZWZhdWx0VmFsID0gdGhpcy5fZGVmYXVsdFZhbHVlc1trXTtcbiAgICAgIHJldHVybiB0aGlzLl9tYXAgPyB0aGlzLl9tYXAuZ2V0KGssIGRlZmF1bHRWYWwpIDogZGVmYXVsdFZhbDtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuICAgIFJlY29yZC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLmNsZWFyKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIFJlY29yZFR5cGUgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIFJlY29yZFR5cGUuX2VtcHR5IHx8IChSZWNvcmRUeXBlLl9lbXB0eSA9IG1ha2VSZWNvcmQodGhpcywgZW1wdHlNYXAoKSkpO1xuICAgIH07XG5cbiAgICBSZWNvcmQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgIGlmICghdGhpcy5oYXMoaykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2V0IHVua25vd24ga2V5IFwiJyArIGsgKyAnXCIgb24gJyArIHJlY29yZE5hbWUodGhpcykpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcCAmJiB0aGlzLl9tYXAuc2V0KGssIHYpO1xuICAgICAgaWYgKHRoaXMuX19vd25lcklEIHx8IG5ld01hcCA9PT0gdGhpcy5fbWFwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrKSB7XG4gICAgICBpZiAoIXRoaXMuaGFzKGspKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcCAmJiB0aGlzLl9tYXAucmVtb3ZlKGspO1xuICAgICAgaWYgKHRoaXMuX19vd25lcklEIHx8IG5ld01hcCA9PT0gdGhpcy5fbWFwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwLndhc0FsdGVyZWQoKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIEtleWVkSXRlcmFibGUodGhpcy5fZGVmYXVsdFZhbHVlcykubWFwKGZ1bmN0aW9uKF8sIGspICB7cmV0dXJuIHRoaXMkMC5nZXQoayl9KS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBSZWNvcmQucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gS2V5ZWRJdGVyYWJsZSh0aGlzLl9kZWZhdWx0VmFsdWVzKS5tYXAoZnVuY3Rpb24oXywgaykgIHtyZXR1cm4gdGhpcyQwLmdldChrKX0pLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIFJlY29yZC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcbiAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLl9fZW5zdXJlT3duZXIob3duZXJJRCk7XG4gICAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgICB0aGlzLl9tYXAgPSBuZXdNYXA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwLCBvd25lcklEKTtcbiAgICB9O1xuXG5cbiAgdmFyIFJlY29yZFByb3RvdHlwZSA9IFJlY29yZC5wcm90b3R5cGU7XG4gIFJlY29yZFByb3RvdHlwZVtERUxFVEVdID0gUmVjb3JkUHJvdG90eXBlLnJlbW92ZTtcbiAgUmVjb3JkUHJvdG90eXBlLmRlbGV0ZUluID1cbiAgUmVjb3JkUHJvdG90eXBlLnJlbW92ZUluID0gTWFwUHJvdG90eXBlLnJlbW92ZUluO1xuICBSZWNvcmRQcm90b3R5cGUubWVyZ2UgPSBNYXBQcm90b3R5cGUubWVyZ2U7XG4gIFJlY29yZFByb3RvdHlwZS5tZXJnZVdpdGggPSBNYXBQcm90b3R5cGUubWVyZ2VXaXRoO1xuICBSZWNvcmRQcm90b3R5cGUubWVyZ2VJbiA9IE1hcFByb3RvdHlwZS5tZXJnZUluO1xuICBSZWNvcmRQcm90b3R5cGUubWVyZ2VEZWVwID0gTWFwUHJvdG90eXBlLm1lcmdlRGVlcDtcbiAgUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPSBNYXBQcm90b3R5cGUubWVyZ2VEZWVwV2l0aDtcbiAgUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcEluID0gTWFwUHJvdG90eXBlLm1lcmdlRGVlcEluO1xuICBSZWNvcmRQcm90b3R5cGUuc2V0SW4gPSBNYXBQcm90b3R5cGUuc2V0SW47XG4gIFJlY29yZFByb3RvdHlwZS51cGRhdGUgPSBNYXBQcm90b3R5cGUudXBkYXRlO1xuICBSZWNvcmRQcm90b3R5cGUudXBkYXRlSW4gPSBNYXBQcm90b3R5cGUudXBkYXRlSW47XG4gIFJlY29yZFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gTWFwUHJvdG90eXBlLndpdGhNdXRhdGlvbnM7XG4gIFJlY29yZFByb3RvdHlwZS5hc011dGFibGUgPSBNYXBQcm90b3R5cGUuYXNNdXRhYmxlO1xuICBSZWNvcmRQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG5cblxuICBmdW5jdGlvbiBtYWtlUmVjb3JkKGxpa2VSZWNvcmQsIG1hcCwgb3duZXJJRCkge1xuICAgIHZhciByZWNvcmQgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihsaWtlUmVjb3JkKSk7XG4gICAgcmVjb3JkLl9tYXAgPSBtYXA7XG4gICAgcmVjb3JkLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgcmV0dXJuIHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29yZE5hbWUocmVjb3JkKSB7XG4gICAgcmV0dXJuIHJlY29yZC5fbmFtZSB8fCByZWNvcmQuY29uc3RydWN0b3IubmFtZSB8fCAnUmVjb3JkJztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFByb3BzKHByb3RvdHlwZSwgbmFtZXMpIHtcbiAgICB0cnkge1xuICAgICAgbmFtZXMuZm9yRWFjaChzZXRQcm9wLmJpbmQodW5kZWZpbmVkLCBwcm90b3R5cGUpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5IGZhaWxlZC4gUHJvYmFibHkgSUU4LlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFByb3AocHJvdG90eXBlLCBuYW1lKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgbmFtZSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KG5hbWUpO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaW52YXJpYW50KHRoaXMuX19vd25lcklELCAnQ2Fubm90IHNldCBvbiBhbiBpbW11dGFibGUgcmVjb3JkLicpO1xuICAgICAgICB0aGlzLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhTZXQsIFNldENvbGxlY3Rpb24pO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIFNldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eVNldCgpIDpcbiAgICAgICAgaXNTZXQodmFsdWUpICYmICFpc09yZGVyZWQodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eVNldCgpLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oc2V0ICkge1xuICAgICAgICAgIHZhciBpdGVyID0gU2V0SXRlcmFibGUodmFsdWUpO1xuICAgICAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgICAgICAgaXRlci5mb3JFYWNoKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIHNldC5hZGQodil9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgU2V0Lm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIHRoaXMoYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgU2V0LmZyb21LZXlzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzKEtleWVkSXRlcmFibGUodmFsdWUpLmtleVNlcSgpKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU2V0IHsnLCAnfScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC5oYXModmFsdWUpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHVwZGF0ZVNldCh0aGlzLCB0aGlzLl9tYXAuc2V0KHZhbHVlLCB0cnVlKSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB1cGRhdGVTZXQodGhpcywgdGhpcy5fbWFwLnJlbW92ZSh2YWx1ZSkpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdXBkYXRlU2V0KHRoaXMsIHRoaXMuX21hcC5jbGVhcigpKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBDb21wb3NpdGlvblxuXG4gICAgU2V0LnByb3RvdHlwZS51bmlvbiA9IGZ1bmN0aW9uKCkge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDApO1xuICAgICAgaXRlcnMgPSBpdGVycy5maWx0ZXIoZnVuY3Rpb24oeCApIHtyZXR1cm4geC5zaXplICE9PSAwfSk7XG4gICAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCAmJiAhdGhpcy5fX293bmVySUQgJiYgaXRlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKGl0ZXJzWzBdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oc2V0ICkge1xuICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaXRlcnMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgICAgU2V0SXRlcmFibGUoaXRlcnNbaWldKS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBzZXQuYWRkKHZhbHVlKX0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5pbnRlcnNlY3QgPSBmdW5jdGlvbigpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpdGVycyA9IGl0ZXJzLm1hcChmdW5jdGlvbihpdGVyICkge3JldHVybiBTZXRJdGVyYWJsZShpdGVyKX0pO1xuICAgICAgdmFyIG9yaWdpbmFsU2V0ID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oc2V0ICkge1xuICAgICAgICBvcmlnaW5hbFNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlICkge1xuICAgICAgICAgIGlmICghaXRlcnMuZXZlcnkoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gaXRlci5pbmNsdWRlcyh2YWx1ZSl9KSkge1xuICAgICAgICAgICAgc2V0LnJlbW92ZSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLnN1YnRyYWN0ID0gZnVuY3Rpb24oKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaXRlcnMgPSBpdGVycy5tYXAoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gU2V0SXRlcmFibGUoaXRlcil9KTtcbiAgICAgIHZhciBvcmlnaW5hbFNldCA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgb3JpZ2luYWxTZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSApIHtcbiAgICAgICAgICBpZiAoaXRlcnMuc29tZShmdW5jdGlvbihpdGVyICkge3JldHVybiBpdGVyLmluY2x1ZGVzKHZhbHVlKX0pKSB7XG4gICAgICAgICAgICBzZXQucmVtb3ZlKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnVuaW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUubWVyZ2VXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICByZXR1cm4gdGhpcy51bmlvbi5hcHBseSh0aGlzLCBpdGVycyk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKGNvbXBhcmF0b3IpIHtcbiAgICAgIC8vIExhdGUgYmluZGluZ1xuICAgICAgcmV0dXJuIE9yZGVyZWRTZXQoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvcikpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLnNvcnRCeSA9IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgLy8gTGF0ZSBiaW5kaW5nXG4gICAgICByZXR1cm4gT3JkZXJlZFNldChzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwLndhc0FsdGVyZWQoKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC5fX2l0ZXJhdGUoZnVuY3Rpb24oXywgaykgIHtyZXR1cm4gZm4oaywgaywgdGhpcyQwKX0sIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwLm1hcChmdW5jdGlvbihfLCBrKSAge3JldHVybiBrfSkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuICAgICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcC5fX2Vuc3VyZU93bmVyKG93bmVySUQpO1xuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3TWFwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9fbWFrZShuZXdNYXAsIG93bmVySUQpO1xuICAgIH07XG5cblxuICBmdW5jdGlvbiBpc1NldChtYXliZVNldCkge1xuICAgIHJldHVybiAhIShtYXliZVNldCAmJiBtYXliZVNldFtJU19TRVRfU0VOVElORUxdKTtcbiAgfVxuXG4gIFNldC5pc1NldCA9IGlzU2V0O1xuXG4gIHZhciBJU19TRVRfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9TRVRfX0BAJztcblxuICB2YXIgU2V0UHJvdG90eXBlID0gU2V0LnByb3RvdHlwZTtcbiAgU2V0UHJvdG90eXBlW0lTX1NFVF9TRU5USU5FTF0gPSB0cnVlO1xuICBTZXRQcm90b3R5cGVbREVMRVRFXSA9IFNldFByb3RvdHlwZS5yZW1vdmU7XG4gIFNldFByb3RvdHlwZS5tZXJnZURlZXAgPSBTZXRQcm90b3R5cGUubWVyZ2U7XG4gIFNldFByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gU2V0UHJvdG90eXBlLm1lcmdlV2l0aDtcbiAgU2V0UHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSBNYXBQcm90b3R5cGUud2l0aE11dGF0aW9ucztcbiAgU2V0UHJvdG90eXBlLmFzTXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc011dGFibGU7XG4gIFNldFByb3RvdHlwZS5hc0ltbXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc0ltbXV0YWJsZTtcblxuICBTZXRQcm90b3R5cGUuX19lbXB0eSA9IGVtcHR5U2V0O1xuICBTZXRQcm90b3R5cGUuX19tYWtlID0gbWFrZVNldDtcblxuICBmdW5jdGlvbiB1cGRhdGVTZXQoc2V0LCBuZXdNYXApIHtcbiAgICBpZiAoc2V0Ll9fb3duZXJJRCkge1xuICAgICAgc2V0LnNpemUgPSBuZXdNYXAuc2l6ZTtcbiAgICAgIHNldC5fbWFwID0gbmV3TWFwO1xuICAgICAgcmV0dXJuIHNldDtcbiAgICB9XG4gICAgcmV0dXJuIG5ld01hcCA9PT0gc2V0Ll9tYXAgPyBzZXQgOlxuICAgICAgbmV3TWFwLnNpemUgPT09IDAgPyBzZXQuX19lbXB0eSgpIDpcbiAgICAgIHNldC5fX21ha2UobmV3TWFwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VTZXQobWFwLCBvd25lcklEKSB7XG4gICAgdmFyIHNldCA9IE9iamVjdC5jcmVhdGUoU2V0UHJvdG90eXBlKTtcbiAgICBzZXQuc2l6ZSA9IG1hcCA/IG1hcC5zaXplIDogMDtcbiAgICBzZXQuX21hcCA9IG1hcDtcbiAgICBzZXQuX19vd25lcklEID0gb3duZXJJRDtcbiAgICByZXR1cm4gc2V0O1xuICB9XG5cbiAgdmFyIEVNUFRZX1NFVDtcbiAgZnVuY3Rpb24gZW1wdHlTZXQoKSB7XG4gICAgcmV0dXJuIEVNUFRZX1NFVCB8fCAoRU1QVFlfU0VUID0gbWFrZVNldChlbXB0eU1hcCgpKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhPcmRlcmVkU2V0LCBTZXQpO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIE9yZGVyZWRTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlPcmRlcmVkU2V0KCkgOlxuICAgICAgICBpc09yZGVyZWRTZXQodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eU9yZGVyZWRTZXQoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IFNldEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2ICkge3JldHVybiBzZXQuYWRkKHYpfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIE9yZGVyZWRTZXQub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBPcmRlcmVkU2V0LmZyb21LZXlzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzKEtleWVkSXRlcmFibGUodmFsdWUpLmtleVNlcSgpKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZFNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ09yZGVyZWRTZXQgeycsICd9Jyk7XG4gICAgfTtcblxuXG4gIGZ1bmN0aW9uIGlzT3JkZXJlZFNldChtYXliZU9yZGVyZWRTZXQpIHtcbiAgICByZXR1cm4gaXNTZXQobWF5YmVPcmRlcmVkU2V0KSAmJiBpc09yZGVyZWQobWF5YmVPcmRlcmVkU2V0KTtcbiAgfVxuXG4gIE9yZGVyZWRTZXQuaXNPcmRlcmVkU2V0ID0gaXNPcmRlcmVkU2V0O1xuXG4gIHZhciBPcmRlcmVkU2V0UHJvdG90eXBlID0gT3JkZXJlZFNldC5wcm90b3R5cGU7XG4gIE9yZGVyZWRTZXRQcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuXG4gIE9yZGVyZWRTZXRQcm90b3R5cGUuX19lbXB0eSA9IGVtcHR5T3JkZXJlZFNldDtcbiAgT3JkZXJlZFNldFByb3RvdHlwZS5fX21ha2UgPSBtYWtlT3JkZXJlZFNldDtcblxuICBmdW5jdGlvbiBtYWtlT3JkZXJlZFNldChtYXAsIG93bmVySUQpIHtcbiAgICB2YXIgc2V0ID0gT2JqZWN0LmNyZWF0ZShPcmRlcmVkU2V0UHJvdG90eXBlKTtcbiAgICBzZXQuc2l6ZSA9IG1hcCA/IG1hcC5zaXplIDogMDtcbiAgICBzZXQuX21hcCA9IG1hcDtcbiAgICBzZXQuX19vd25lcklEID0gb3duZXJJRDtcbiAgICByZXR1cm4gc2V0O1xuICB9XG5cbiAgdmFyIEVNUFRZX09SREVSRURfU0VUO1xuICBmdW5jdGlvbiBlbXB0eU9yZGVyZWRTZXQoKSB7XG4gICAgcmV0dXJuIEVNUFRZX09SREVSRURfU0VUIHx8IChFTVBUWV9PUkRFUkVEX1NFVCA9IG1ha2VPcmRlcmVkU2V0KGVtcHR5T3JkZXJlZE1hcCgpKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhTdGFjaywgSW5kZXhlZENvbGxlY3Rpb24pO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIFN0YWNrKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5U3RhY2soKSA6XG4gICAgICAgIGlzU3RhY2sodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eVN0YWNrKCkudW5zaGlmdEFsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgU3RhY2sub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1N0YWNrIFsnLCAnXScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgd2hpbGUgKGhlYWQgJiYgaW5kZXgtLSkge1xuICAgICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhlYWQgPyBoZWFkLnZhbHVlIDogbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5faGVhZCAmJiB0aGlzLl9oZWFkLnZhbHVlO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXG4gICAgU3RhY2sucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdTaXplID0gdGhpcy5zaXplICsgYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICAgIGZvciAodmFyIGlpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGlpID49IDA7IGlpLS0pIHtcbiAgICAgICAgaGVhZCA9IHtcbiAgICAgICAgICB2YWx1ZTogYXJndW1lbnRzW2lpXSxcbiAgICAgICAgICBuZXh0OiBoZWFkXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gbmV3U2l6ZTtcbiAgICAgICAgdGhpcy5faGVhZCA9IGhlYWQ7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VTdGFjayhuZXdTaXplLCBoZWFkKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnB1c2hBbGwgPSBmdW5jdGlvbihpdGVyKSB7XG4gICAgICBpdGVyID0gSW5kZXhlZEl0ZXJhYmxlKGl0ZXIpO1xuICAgICAgaWYgKGl0ZXIuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgICB2YXIgbmV3U2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICAgIGl0ZXIucmV2ZXJzZSgpLmZvckVhY2goZnVuY3Rpb24odmFsdWUgKSB7XG4gICAgICAgIG5ld1NpemUrKztcbiAgICAgICAgaGVhZCA9IHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgbmV4dDogaGVhZFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gbmV3U2l6ZTtcbiAgICAgICAgdGhpcy5faGVhZCA9IGhlYWQ7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VTdGFjayhuZXdTaXplLCBoZWFkKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoMSk7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgcmV0dXJuIHRoaXMucHVzaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUudW5zaGlmdEFsbCA9IGZ1bmN0aW9uKGl0ZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnB1c2hBbGwoaXRlcik7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucG9wLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgICB0aGlzLl9oZWFkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbXB0eVN0YWNrKCk7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcbiAgICAgIGlmICh3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIHRoaXMuc2l6ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzb2x2ZWRCZWdpbiA9IHJlc29sdmVCZWdpbihiZWdpbiwgdGhpcy5zaXplKTtcbiAgICAgIHZhciByZXNvbHZlZEVuZCA9IHJlc29sdmVFbmQoZW5kLCB0aGlzLnNpemUpO1xuICAgICAgaWYgKHJlc29sdmVkRW5kICE9PSB0aGlzLnNpemUpIHtcbiAgICAgICAgLy8gc3VwZXIuc2xpY2UoYmVnaW4sIGVuZCk7XG4gICAgICAgIHJldHVybiBJbmRleGVkQ29sbGVjdGlvbi5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdTaXplID0gdGhpcy5zaXplIC0gcmVzb2x2ZWRCZWdpbjtcbiAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICAgIHdoaWxlIChyZXNvbHZlZEJlZ2luLS0pIHtcbiAgICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICB0aGlzLnNpemUgPSBuZXdTaXplO1xuICAgICAgICB0aGlzLl9oZWFkID0gaGVhZDtcbiAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZVN0YWNrKG5ld1NpemUsIGhlYWQpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIE11dGFiaWxpdHlcblxuICAgIFN0YWNrLnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuICAgICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZVN0YWNrKHRoaXMuc2l6ZSwgdGhpcy5faGVhZCwgb3duZXJJRCwgdGhpcy5fX2hhc2gpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEl0ZXJhdGlvblxuXG4gICAgU3RhY2sucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkuX19pdGVyYXRlKGZuKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBub2RlID0gdGhpcy5faGVhZDtcbiAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgIGlmIChmbihub2RlLnZhbHVlLCBpdGVyYXRpb25zKyssIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkuX19pdGVyYXRvcih0eXBlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBub2RlID0gdGhpcy5faGVhZDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG5vZGUudmFsdWU7XG4gICAgICAgICAgbm9kZSA9IG5vZGUubmV4dDtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gaXNTdGFjayhtYXliZVN0YWNrKSB7XG4gICAgcmV0dXJuICEhKG1heWJlU3RhY2sgJiYgbWF5YmVTdGFja1tJU19TVEFDS19TRU5USU5FTF0pO1xuICB9XG5cbiAgU3RhY2suaXNTdGFjayA9IGlzU3RhY2s7XG5cbiAgdmFyIElTX1NUQUNLX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfU1RBQ0tfX0BAJztcblxuICB2YXIgU3RhY2tQcm90b3R5cGUgPSBTdGFjay5wcm90b3R5cGU7XG4gIFN0YWNrUHJvdG90eXBlW0lTX1NUQUNLX1NFTlRJTkVMXSA9IHRydWU7XG4gIFN0YWNrUHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSBNYXBQcm90b3R5cGUud2l0aE11dGF0aW9ucztcbiAgU3RhY2tQcm90b3R5cGUuYXNNdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzTXV0YWJsZTtcbiAgU3RhY2tQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG4gIFN0YWNrUHJvdG90eXBlLndhc0FsdGVyZWQgPSBNYXBQcm90b3R5cGUud2FzQWx0ZXJlZDtcblxuXG4gIGZ1bmN0aW9uIG1ha2VTdGFjayhzaXplLCBoZWFkLCBvd25lcklELCBoYXNoKSB7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUoU3RhY2tQcm90b3R5cGUpO1xuICAgIG1hcC5zaXplID0gc2l6ZTtcbiAgICBtYXAuX2hlYWQgPSBoZWFkO1xuICAgIG1hcC5fX293bmVySUQgPSBvd25lcklEO1xuICAgIG1hcC5fX2hhc2ggPSBoYXNoO1xuICAgIG1hcC5fX2FsdGVyZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG5cbiAgdmFyIEVNUFRZX1NUQUNLO1xuICBmdW5jdGlvbiBlbXB0eVN0YWNrKCkge1xuICAgIHJldHVybiBFTVBUWV9TVEFDSyB8fCAoRU1QVFlfU1RBQ0sgPSBtYWtlU3RhY2soMCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnRyaWJ1dGVzIGFkZGl0aW9uYWwgbWV0aG9kcyB0byBhIGNvbnN0cnVjdG9yXG4gICAqL1xuICBmdW5jdGlvbiBtaXhpbihjdG9yLCBtZXRob2RzKSB7XG4gICAgdmFyIGtleUNvcGllciA9IGZ1bmN0aW9uKGtleSApIHsgY3Rvci5wcm90b3R5cGVba2V5XSA9IG1ldGhvZHNba2V5XTsgfTtcbiAgICBPYmplY3Qua2V5cyhtZXRob2RzKS5mb3JFYWNoKGtleUNvcGllcik7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJlxuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtZXRob2RzKS5mb3JFYWNoKGtleUNvcGllcik7XG4gICAgcmV0dXJuIGN0b3I7XG4gIH1cblxuICBJdGVyYWJsZS5JdGVyYXRvciA9IEl0ZXJhdG9yO1xuXG4gIG1peGluKEl0ZXJhYmxlLCB7XG5cbiAgICAvLyAjIyMgQ29udmVyc2lvbiB0byBvdGhlciB0eXBlc1xuXG4gICAgdG9BcnJheTogZnVuY3Rpb24oKSB7XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuICAgICAgdmFyIGFycmF5ID0gbmV3IEFycmF5KHRoaXMuc2l6ZSB8fCAwKTtcbiAgICAgIHRoaXMudmFsdWVTZXEoKS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaSkgIHsgYXJyYXlbaV0gPSB2OyB9KTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9LFxuXG4gICAgdG9JbmRleGVkU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVG9JbmRleGVkU2VxdWVuY2UodGhpcyk7XG4gICAgfSxcblxuICAgIHRvSlM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5tYXAoXG4gICAgICAgIGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9KUyA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnRvSlMoKSA6IHZhbHVlfVxuICAgICAgKS5fX3RvSlMoKTtcbiAgICB9LFxuXG4gICAgdG9KU09OOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkubWFwKFxuICAgICAgICBmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnRvSlNPTigpIDogdmFsdWV9XG4gICAgICApLl9fdG9KUygpO1xuICAgIH0sXG5cbiAgICB0b0tleWVkU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVG9LZXllZFNlcXVlbmNlKHRoaXMsIHRydWUpO1xuICAgIH0sXG5cbiAgICB0b01hcDogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgICByZXR1cm4gTWFwKHRoaXMudG9LZXllZFNlcSgpKTtcbiAgICB9LFxuXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7IG9iamVjdFtrXSA9IHY7IH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9LFxuXG4gICAgdG9PcmRlcmVkTWFwOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBPcmRlcmVkTWFwKHRoaXMudG9LZXllZFNlcSgpKTtcbiAgICB9LFxuXG4gICAgdG9PcmRlcmVkU2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBPcmRlcmVkU2V0KGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcbiAgICB9LFxuXG4gICAgdG9TZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgICAgcmV0dXJuIFNldChpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG4gICAgfSxcblxuICAgIHRvU2V0U2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVG9TZXRTZXF1ZW5jZSh0aGlzKTtcbiAgICB9LFxuXG4gICAgdG9TZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGlzSW5kZXhlZCh0aGlzKSA/IHRoaXMudG9JbmRleGVkU2VxKCkgOlxuICAgICAgICBpc0tleWVkKHRoaXMpID8gdGhpcy50b0tleWVkU2VxKCkgOlxuICAgICAgICB0aGlzLnRvU2V0U2VxKCk7XG4gICAgfSxcblxuICAgIHRvU3RhY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgICAgcmV0dXJuIFN0YWNrKGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcbiAgICB9LFxuXG4gICAgdG9MaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBMaXN0KGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgQ29tbW9uIEphdmFTY3JpcHQgbWV0aG9kcyBhbmQgcHJvcGVydGllc1xuXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICdbSXRlcmFibGVdJztcbiAgICB9LFxuXG4gICAgX190b1N0cmluZzogZnVuY3Rpb24oaGVhZCwgdGFpbCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaGVhZCArIHRhaWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGVhZCArICcgJyArIHRoaXMudG9TZXEoKS5tYXAodGhpcy5fX3RvU3RyaW5nTWFwcGVyKS5qb2luKCcsICcpICsgJyAnICsgdGFpbDtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgRVM2IENvbGxlY3Rpb24gbWV0aG9kcyAoRVM2IEFycmF5IGFuZCBNYXApXG5cbiAgICBjb25jYXQ6IGZ1bmN0aW9uKCkge3ZhciB2YWx1ZXMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBjb25jYXRGYWN0b3J5KHRoaXMsIHZhbHVlcykpO1xuICAgIH0sXG5cbiAgICBpbmNsdWRlczogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnNvbWUoZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIGlzKHZhbHVlLCBzZWFyY2hWYWx1ZSl9KTtcbiAgICB9LFxuXG4gICAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUyk7XG4gICAgfSxcblxuICAgIGV2ZXJ5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgICB2YXIgcmV0dXJuVmFsdWUgPSB0cnVlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgIHtcbiAgICAgICAgaWYgKCFwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuICAgICAgICAgIHJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICB9LFxuXG4gICAgZmlsdGVyOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmaWx0ZXJGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBmaW5kOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgZW50cnkgPSB0aGlzLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIGVudHJ5ID8gZW50cnlbMV0gOiBub3RTZXRWYWx1ZTtcbiAgICB9LFxuXG4gICAgZmluZEVudHJ5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHZhciBmb3VuZDtcbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuICAgICAgICAgIGZvdW5kID0gW2ssIHZdO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZm91bmQ7XG4gICAgfSxcblxuICAgIGZpbmRMYXN0RW50cnk6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkuZmluZEVudHJ5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIGZvckVhY2g6IGZ1bmN0aW9uKHNpZGVFZmZlY3QsIGNvbnRleHQpIHtcbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgICByZXR1cm4gdGhpcy5fX2l0ZXJhdGUoY29udGV4dCA/IHNpZGVFZmZlY3QuYmluZChjb250ZXh0KSA6IHNpZGVFZmZlY3QpO1xuICAgIH0sXG5cbiAgICBqb2luOiBmdW5jdGlvbihzZXBhcmF0b3IpIHtcbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/ICcnICsgc2VwYXJhdG9yIDogJywnO1xuICAgICAgdmFyIGpvaW5lZCA9ICcnO1xuICAgICAgdmFyIGlzRmlyc3QgPSB0cnVlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24odiApIHtcbiAgICAgICAgaXNGaXJzdCA/IChpc0ZpcnN0ID0gZmFsc2UpIDogKGpvaW5lZCArPSBzZXBhcmF0b3IpO1xuICAgICAgICBqb2luZWQgKz0gdiAhPT0gbnVsbCAmJiB2ICE9PSB1bmRlZmluZWQgPyB2LnRvU3RyaW5nKCkgOiAnJztcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGpvaW5lZDtcbiAgICB9LFxuXG4gICAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfS0VZUyk7XG4gICAgfSxcblxuICAgIG1hcDogZnVuY3Rpb24obWFwcGVyLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgbWFwRmFjdG9yeSh0aGlzLCBtYXBwZXIsIGNvbnRleHQpKTtcbiAgICB9LFxuXG4gICAgcmVkdWNlOiBmdW5jdGlvbihyZWR1Y2VyLCBpbml0aWFsUmVkdWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuICAgICAgdmFyIHJlZHVjdGlvbjtcbiAgICAgIHZhciB1c2VGaXJzdDtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICB1c2VGaXJzdCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWR1Y3Rpb24gPSBpbml0aWFsUmVkdWN0aW9uO1xuICAgICAgfVxuICAgICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgIHtcbiAgICAgICAgaWYgKHVzZUZpcnN0KSB7XG4gICAgICAgICAgdXNlRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICByZWR1Y3Rpb24gPSB2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZHVjdGlvbiA9IHJlZHVjZXIuY2FsbChjb250ZXh0LCByZWR1Y3Rpb24sIHYsIGssIGMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZWR1Y3Rpb247XG4gICAgfSxcblxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbihyZWR1Y2VyLCBpbml0aWFsUmVkdWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICB2YXIgcmV2ZXJzZWQgPSB0aGlzLnRvS2V5ZWRTZXEoKS5yZXZlcnNlKCk7XG4gICAgICByZXR1cm4gcmV2ZXJzZWQucmVkdWNlLmFwcGx5KHJldmVyc2VkLCBhcmd1bWVudHMpO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCByZXZlcnNlRmFjdG9yeSh0aGlzLCB0cnVlKSk7XG4gICAgfSxcblxuICAgIHNsaWNlOiBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgc2xpY2VGYWN0b3J5KHRoaXMsIGJlZ2luLCBlbmQsIHRydWUpKTtcbiAgICB9LFxuXG4gICAgc29tZTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gIXRoaXMuZXZlcnkobm90KHByZWRpY2F0ZSksIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBzb3J0OiBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvcikpO1xuICAgIH0sXG5cbiAgICB2YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUyk7XG4gICAgfSxcblxuXG4gICAgLy8gIyMjIE1vcmUgc2VxdWVudGlhbCBtZXRob2RzXG5cbiAgICBidXRMYXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnNsaWNlKDAsIC0xKTtcbiAgICB9LFxuXG4gICAgaXNFbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zaXplICE9PSB1bmRlZmluZWQgPyB0aGlzLnNpemUgPT09IDAgOiAhdGhpcy5zb21lKGZ1bmN0aW9uKCkgIHtyZXR1cm4gdHJ1ZX0pO1xuICAgIH0sXG5cbiAgICBjb3VudDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZW5zdXJlU2l6ZShcbiAgICAgICAgcHJlZGljYXRlID8gdGhpcy50b1NlcSgpLmZpbHRlcihwcmVkaWNhdGUsIGNvbnRleHQpIDogdGhpc1xuICAgICAgKTtcbiAgICB9LFxuXG4gICAgY291bnRCeTogZnVuY3Rpb24oZ3JvdXBlciwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIGNvdW50QnlGYWN0b3J5KHRoaXMsIGdyb3VwZXIsIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBlcXVhbHM6IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICByZXR1cm4gZGVlcEVxdWFsKHRoaXMsIG90aGVyKTtcbiAgICB9LFxuXG4gICAgZW50cnlTZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGl0ZXJhYmxlID0gdGhpcztcbiAgICAgIGlmIChpdGVyYWJsZS5fY2FjaGUpIHtcbiAgICAgICAgLy8gV2UgY2FjaGUgYXMgYW4gZW50cmllcyBhcnJheSwgc28gd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBjYWNoZSFcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheVNlcShpdGVyYWJsZS5fY2FjaGUpO1xuICAgICAgfVxuICAgICAgdmFyIGVudHJpZXNTZXF1ZW5jZSA9IGl0ZXJhYmxlLnRvU2VxKCkubWFwKGVudHJ5TWFwcGVyKS50b0luZGV4ZWRTZXEoKTtcbiAgICAgIGVudHJpZXNTZXF1ZW5jZS5mcm9tRW50cnlTZXEgPSBmdW5jdGlvbigpICB7cmV0dXJuIGl0ZXJhYmxlLnRvU2VxKCl9O1xuICAgICAgcmV0dXJuIGVudHJpZXNTZXF1ZW5jZTtcbiAgICB9LFxuXG4gICAgZmlsdGVyTm90OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihub3QocHJlZGljYXRlKSwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIGZpbmRMYXN0OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy50b0tleWVkU2VxKCkucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlLCBjb250ZXh0LCBub3RTZXRWYWx1ZSk7XG4gICAgfSxcblxuICAgIGZpcnN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmQocmV0dXJuVHJ1ZSk7XG4gICAgfSxcblxuICAgIGZsYXRNYXA6IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZsYXRNYXBGYWN0b3J5KHRoaXMsIG1hcHBlciwgY29udGV4dCkpO1xuICAgIH0sXG5cbiAgICBmbGF0dGVuOiBmdW5jdGlvbihkZXB0aCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZsYXR0ZW5GYWN0b3J5KHRoaXMsIGRlcHRoLCB0cnVlKSk7XG4gICAgfSxcblxuICAgIGZyb21FbnRyeVNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IEZyb21FbnRyaWVzU2VxdWVuY2UodGhpcyk7XG4gICAgfSxcblxuICAgIGdldDogZnVuY3Rpb24oc2VhcmNoS2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmluZChmdW5jdGlvbihfLCBrZXkpICB7cmV0dXJuIGlzKGtleSwgc2VhcmNoS2V5KX0sIHVuZGVmaW5lZCwgbm90U2V0VmFsdWUpO1xuICAgIH0sXG5cbiAgICBnZXRJbjogZnVuY3Rpb24oc2VhcmNoS2V5UGF0aCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHZhciBuZXN0ZWQgPSB0aGlzO1xuICAgICAgLy8gTm90ZTogaW4gYW4gRVM2IGVudmlyb25tZW50LCB3ZSB3b3VsZCBwcmVmZXI6XG4gICAgICAvLyBmb3IgKHZhciBrZXkgb2Ygc2VhcmNoS2V5UGF0aCkge1xuICAgICAgdmFyIGl0ZXIgPSBmb3JjZUl0ZXJhdG9yKHNlYXJjaEtleVBhdGgpO1xuICAgICAgdmFyIHN0ZXA7XG4gICAgICB3aGlsZSAoIShzdGVwID0gaXRlci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgdmFyIGtleSA9IHN0ZXAudmFsdWU7XG4gICAgICAgIG5lc3RlZCA9IG5lc3RlZCAmJiBuZXN0ZWQuZ2V0ID8gbmVzdGVkLmdldChrZXksIE5PVF9TRVQpIDogTk9UX1NFVDtcbiAgICAgICAgaWYgKG5lc3RlZCA9PT0gTk9UX1NFVCkge1xuICAgICAgICAgIHJldHVybiBub3RTZXRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5lc3RlZDtcbiAgICB9LFxuXG4gICAgZ3JvdXBCeTogZnVuY3Rpb24oZ3JvdXBlciwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIGdyb3VwQnlGYWN0b3J5KHRoaXMsIGdyb3VwZXIsIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBoYXM6IGZ1bmN0aW9uKHNlYXJjaEtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KHNlYXJjaEtleSwgTk9UX1NFVCkgIT09IE5PVF9TRVQ7XG4gICAgfSxcblxuICAgIGhhc0luOiBmdW5jdGlvbihzZWFyY2hLZXlQYXRoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRJbihzZWFyY2hLZXlQYXRoLCBOT1RfU0VUKSAhPT0gTk9UX1NFVDtcbiAgICB9LFxuXG4gICAgaXNTdWJzZXQ6IGZ1bmN0aW9uKGl0ZXIpIHtcbiAgICAgIGl0ZXIgPSB0eXBlb2YgaXRlci5pbmNsdWRlcyA9PT0gJ2Z1bmN0aW9uJyA/IGl0ZXIgOiBJdGVyYWJsZShpdGVyKTtcbiAgICAgIHJldHVybiB0aGlzLmV2ZXJ5KGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBpdGVyLmluY2x1ZGVzKHZhbHVlKX0pO1xuICAgIH0sXG5cbiAgICBpc1N1cGVyc2V0OiBmdW5jdGlvbihpdGVyKSB7XG4gICAgICBpdGVyID0gdHlwZW9mIGl0ZXIuaXNTdWJzZXQgPT09ICdmdW5jdGlvbicgPyBpdGVyIDogSXRlcmFibGUoaXRlcik7XG4gICAgICByZXR1cm4gaXRlci5pc1N1YnNldCh0aGlzKTtcbiAgICB9LFxuXG4gICAga2V5U2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkubWFwKGtleU1hcHBlcikudG9JbmRleGVkU2VxKCk7XG4gICAgfSxcblxuICAgIGxhc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkuZmlyc3QoKTtcbiAgICB9LFxuXG4gICAgbWF4OiBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gbWF4RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yKTtcbiAgICB9LFxuXG4gICAgbWF4Qnk6IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvciwgbWFwcGVyKTtcbiAgICB9LFxuXG4gICAgbWluOiBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gbWF4RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yID8gbmVnKGNvbXBhcmF0b3IpIDogZGVmYXVsdE5lZ0NvbXBhcmF0b3IpO1xuICAgIH0sXG5cbiAgICBtaW5CeTogZnVuY3Rpb24obWFwcGVyLCBjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gbWF4RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yID8gbmVnKGNvbXBhcmF0b3IpIDogZGVmYXVsdE5lZ0NvbXBhcmF0b3IsIG1hcHBlcik7XG4gICAgfSxcblxuICAgIHJlc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoMSk7XG4gICAgfSxcblxuICAgIHNraXA6IGZ1bmN0aW9uKGFtb3VudCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoTWF0aC5tYXgoMCwgYW1vdW50KSk7XG4gICAgfSxcblxuICAgIHNraXBMYXN0OiBmdW5jdGlvbihhbW91bnQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLnNraXAoYW1vdW50KS5yZXZlcnNlKCkpO1xuICAgIH0sXG5cbiAgICBza2lwV2hpbGU6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNraXBXaGlsZUZhY3RvcnkodGhpcywgcHJlZGljYXRlLCBjb250ZXh0LCB0cnVlKSk7XG4gICAgfSxcblxuICAgIHNraXBVbnRpbDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5za2lwV2hpbGUobm90KHByZWRpY2F0ZSksIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBzb3J0Qnk6IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IsIG1hcHBlcikpO1xuICAgIH0sXG5cbiAgICB0YWtlOiBmdW5jdGlvbihhbW91bnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnNsaWNlKDAsIE1hdGgubWF4KDAsIGFtb3VudCkpO1xuICAgIH0sXG5cbiAgICB0YWtlTGFzdDogZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgdGhpcy50b1NlcSgpLnJldmVyc2UoKS50YWtlKGFtb3VudCkucmV2ZXJzZSgpKTtcbiAgICB9LFxuXG4gICAgdGFrZVdoaWxlOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCB0YWtlV2hpbGVGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCkpO1xuICAgIH0sXG5cbiAgICB0YWtlVW50aWw6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZVdoaWxlKG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgdmFsdWVTZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9JbmRleGVkU2VxKCk7XG4gICAgfSxcblxuXG4gICAgLy8gIyMjIEhhc2hhYmxlIE9iamVjdFxuXG4gICAgaGFzaENvZGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19oYXNoIHx8ICh0aGlzLl9faGFzaCA9IGhhc2hJdGVyYWJsZSh0aGlzKSk7XG4gICAgfVxuXG5cbiAgICAvLyAjIyMgSW50ZXJuYWxcblxuICAgIC8vIGFic3RyYWN0IF9faXRlcmF0ZShmbiwgcmV2ZXJzZSlcblxuICAgIC8vIGFic3RyYWN0IF9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSlcbiAgfSk7XG5cbiAgLy8gdmFyIElTX0lURVJBQkxFX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfSVRFUkFCTEVfX0BAJztcbiAgLy8gdmFyIElTX0tFWUVEX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfS0VZRURfX0BAJztcbiAgLy8gdmFyIElTX0lOREVYRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9JTkRFWEVEX19AQCc7XG4gIC8vIHZhciBJU19PUkRFUkVEX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfT1JERVJFRF9fQEAnO1xuXG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgSXRlcmFibGVQcm90b3R5cGVbSVNfSVRFUkFCTEVfU0VOVElORUxdID0gdHJ1ZTtcbiAgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JfU1lNQk9MXSA9IEl0ZXJhYmxlUHJvdG90eXBlLnZhbHVlcztcbiAgSXRlcmFibGVQcm90b3R5cGUuX190b0pTID0gSXRlcmFibGVQcm90b3R5cGUudG9BcnJheTtcbiAgSXRlcmFibGVQcm90b3R5cGUuX190b1N0cmluZ01hcHBlciA9IHF1b3RlU3RyaW5nO1xuICBJdGVyYWJsZVByb3RvdHlwZS5pbnNwZWN0ID1cbiAgSXRlcmFibGVQcm90b3R5cGUudG9Tb3VyY2UgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsgfTtcbiAgSXRlcmFibGVQcm90b3R5cGUuY2hhaW4gPSBJdGVyYWJsZVByb3RvdHlwZS5mbGF0TWFwO1xuICBJdGVyYWJsZVByb3RvdHlwZS5jb250YWlucyA9IEl0ZXJhYmxlUHJvdG90eXBlLmluY2x1ZGVzO1xuXG4gIC8vIFRlbXBvcmFyeSB3YXJuaW5nIGFib3V0IHVzaW5nIGxlbmd0aFxuICAoZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsICdsZW5ndGgnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghSXRlcmFibGUubm9MZW5ndGhXYXJuaW5nKSB7XG4gICAgICAgICAgICB2YXIgc3RhY2s7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIHN0YWNrID0gZXJyb3Iuc3RhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhY2suaW5kZXhPZignX3dyYXBPYmplY3QnKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgY29uc29sZSAmJiBjb25zb2xlLndhcm4gJiYgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICdpdGVyYWJsZS5sZW5ndGggaGFzIGJlZW4gZGVwcmVjYXRlZCwgJytcbiAgICAgICAgICAgICAgICAndXNlIGl0ZXJhYmxlLnNpemUgb3IgaXRlcmFibGUuY291bnQoKS4gJytcbiAgICAgICAgICAgICAgICAnVGhpcyB3YXJuaW5nIHdpbGwgYmVjb21lIGEgc2lsZW50IGVycm9yIGluIGEgZnV0dXJlIHZlcnNpb24uICcgK1xuICAgICAgICAgICAgICAgIHN0YWNrXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9KSgpO1xuXG5cblxuICBtaXhpbihLZXllZEl0ZXJhYmxlLCB7XG5cbiAgICAvLyAjIyMgTW9yZSBzZXF1ZW50aWFsIG1ldGhvZHNcblxuICAgIGZsaXA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZsaXBGYWN0b3J5KHRoaXMpKTtcbiAgICB9LFxuXG4gICAgZmluZEtleTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgZW50cnkgPSB0aGlzLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5WzBdO1xuICAgIH0sXG5cbiAgICBmaW5kTGFzdEtleTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy50b1NlcSgpLnJldmVyc2UoKS5maW5kS2V5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIGtleU9mOiBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmluZEtleShmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gaXModmFsdWUsIHNlYXJjaFZhbHVlKX0pO1xuICAgIH0sXG5cbiAgICBsYXN0S2V5T2Y6IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kTGFzdEtleShmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gaXModmFsdWUsIHNlYXJjaFZhbHVlKX0pO1xuICAgIH0sXG5cbiAgICBtYXBFbnRyaWVzOiBmdW5jdGlvbihtYXBwZXIsIGNvbnRleHQpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLFxuICAgICAgICB0aGlzLnRvU2VxKCkubWFwKFxuICAgICAgICAgIGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIG1hcHBlci5jYWxsKGNvbnRleHQsIFtrLCB2XSwgaXRlcmF0aW9ucysrLCB0aGlzJDApfVxuICAgICAgICApLmZyb21FbnRyeVNlcSgpXG4gICAgICApO1xuICAgIH0sXG5cbiAgICBtYXBLZXlzOiBmdW5jdGlvbihtYXBwZXIsIGNvbnRleHQpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLFxuICAgICAgICB0aGlzLnRvU2VxKCkuZmxpcCgpLm1hcChcbiAgICAgICAgICBmdW5jdGlvbihrLCB2KSAge3JldHVybiBtYXBwZXIuY2FsbChjb250ZXh0LCBrLCB2LCB0aGlzJDApfVxuICAgICAgICApLmZsaXAoKVxuICAgICAgKTtcbiAgICB9XG5cbiAgfSk7XG5cbiAgdmFyIEtleWVkSXRlcmFibGVQcm90b3R5cGUgPSBLZXllZEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgS2V5ZWRJdGVyYWJsZVByb3RvdHlwZVtJU19LRVlFRF9TRU5USU5FTF0gPSB0cnVlO1xuICBLZXllZEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzO1xuICBLZXllZEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9KUyA9IEl0ZXJhYmxlUHJvdG90eXBlLnRvT2JqZWN0O1xuICBLZXllZEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9TdHJpbmdNYXBwZXIgPSBmdW5jdGlvbih2LCBrKSAge3JldHVybiBKU09OLnN0cmluZ2lmeShrKSArICc6ICcgKyBxdW90ZVN0cmluZyh2KX07XG5cblxuXG4gIG1peGluKEluZGV4ZWRJdGVyYWJsZSwge1xuXG4gICAgLy8gIyMjIENvbnZlcnNpb24gdG8gb3RoZXIgdHlwZXNcblxuICAgIHRvS2V5ZWRTZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBUb0tleWVkU2VxdWVuY2UodGhpcywgZmFsc2UpO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBFUzYgQ29sbGVjdGlvbiBtZXRob2RzIChFUzYgQXJyYXkgYW5kIE1hcClcblxuICAgIGZpbHRlcjogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgZmlsdGVyRmFjdG9yeSh0aGlzLCBwcmVkaWNhdGUsIGNvbnRleHQsIGZhbHNlKSk7XG4gICAgfSxcblxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgZW50cnkgPSB0aGlzLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIGVudHJ5ID8gZW50cnlbMF0gOiAtMTtcbiAgICB9LFxuXG4gICAgaW5kZXhPZjogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHZhciBrZXkgPSB0aGlzLnRvS2V5ZWRTZXEoKS5rZXlPZihzZWFyY2hWYWx1ZSk7XG4gICAgICByZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgPyAtMSA6IGtleTtcbiAgICB9LFxuXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICB2YXIga2V5ID0gdGhpcy50b0tleWVkU2VxKCkucmV2ZXJzZSgpLmtleU9mKHNlYXJjaFZhbHVlKTtcbiAgICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/IC0xIDoga2V5O1xuXG4gICAgICAvLyB2YXIgaW5kZXggPVxuICAgICAgLy8gcmV0dXJuIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkuaW5kZXhPZihzZWFyY2hWYWx1ZSk7XG4gICAgfSxcblxuICAgIHJldmVyc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHJldmVyc2VGYWN0b3J5KHRoaXMsIGZhbHNlKSk7XG4gICAgfSxcblxuICAgIHNsaWNlOiBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgc2xpY2VGYWN0b3J5KHRoaXMsIGJlZ2luLCBlbmQsIGZhbHNlKSk7XG4gICAgfSxcblxuICAgIHNwbGljZTogZnVuY3Rpb24oaW5kZXgsIHJlbW92ZU51bSAvKiwgLi4udmFsdWVzKi8pIHtcbiAgICAgIHZhciBudW1BcmdzID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHJlbW92ZU51bSA9IE1hdGgubWF4KHJlbW92ZU51bSB8IDAsIDApO1xuICAgICAgaWYgKG51bUFyZ3MgPT09IDAgfHwgKG51bUFyZ3MgPT09IDIgJiYgIXJlbW92ZU51bSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICAvLyBJZiBpbmRleCBpcyBuZWdhdGl2ZSwgaXQgc2hvdWxkIHJlc29sdmUgcmVsYXRpdmUgdG8gdGhlIHNpemUgb2YgdGhlXG4gICAgICAvLyBjb2xsZWN0aW9uLiBIb3dldmVyIHNpemUgbWF5IGJlIGV4cGVuc2l2ZSB0byBjb21wdXRlIGlmIG5vdCBjYWNoZWQsIHNvXG4gICAgICAvLyBvbmx5IGNhbGwgY291bnQoKSBpZiB0aGUgbnVtYmVyIGlzIGluIGZhY3QgbmVnYXRpdmUuXG4gICAgICBpbmRleCA9IHJlc29sdmVCZWdpbihpbmRleCwgaW5kZXggPCAwID8gdGhpcy5jb3VudCgpIDogdGhpcy5zaXplKTtcbiAgICAgIHZhciBzcGxpY2VkID0gdGhpcy5zbGljZSgwLCBpbmRleCk7XG4gICAgICByZXR1cm4gcmVpZnkoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIG51bUFyZ3MgPT09IDEgP1xuICAgICAgICAgIHNwbGljZWQgOlxuICAgICAgICAgIHNwbGljZWQuY29uY2F0KGFyckNvcHkoYXJndW1lbnRzLCAyKSwgdGhpcy5zbGljZShpbmRleCArIHJlbW92ZU51bSkpXG4gICAgICApO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBNb3JlIGNvbGxlY3Rpb24gbWV0aG9kc1xuXG4gICAgZmluZExhc3RJbmRleDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICB2YXIga2V5ID0gdGhpcy50b0tleWVkU2VxKCkuZmluZExhc3RLZXkocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/IC0xIDoga2V5O1xuICAgIH0sXG5cbiAgICBmaXJzdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoMCk7XG4gICAgfSxcblxuICAgIGZsYXR0ZW46IGZ1bmN0aW9uKGRlcHRoKSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgZmxhdHRlbkZhY3RvcnkodGhpcywgZGVwdGgsIGZhbHNlKSk7XG4gICAgfSxcblxuICAgIGdldDogZnVuY3Rpb24oaW5kZXgsIG5vdFNldFZhbHVlKSB7XG4gICAgICBpbmRleCA9IHdyYXBJbmRleCh0aGlzLCBpbmRleCk7XG4gICAgICByZXR1cm4gKGluZGV4IDwgMCB8fCAodGhpcy5zaXplID09PSBJbmZpbml0eSB8fFxuICAgICAgICAgICh0aGlzLnNpemUgIT09IHVuZGVmaW5lZCAmJiBpbmRleCA+IHRoaXMuc2l6ZSkpKSA/XG4gICAgICAgIG5vdFNldFZhbHVlIDpcbiAgICAgICAgdGhpcy5maW5kKGZ1bmN0aW9uKF8sIGtleSkgIHtyZXR1cm4ga2V5ID09PSBpbmRleH0sIHVuZGVmaW5lZCwgbm90U2V0VmFsdWUpO1xuICAgIH0sXG5cbiAgICBoYXM6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICBpbmRleCA9IHdyYXBJbmRleCh0aGlzLCBpbmRleCk7XG4gICAgICByZXR1cm4gaW5kZXggPj0gMCAmJiAodGhpcy5zaXplICE9PSB1bmRlZmluZWQgP1xuICAgICAgICB0aGlzLnNpemUgPT09IEluZmluaXR5IHx8IGluZGV4IDwgdGhpcy5zaXplIDpcbiAgICAgICAgdGhpcy5pbmRleE9mKGluZGV4KSAhPT0gLTFcbiAgICAgICk7XG4gICAgfSxcblxuICAgIGludGVycG9zZTogZnVuY3Rpb24oc2VwYXJhdG9yKSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgaW50ZXJwb3NlRmFjdG9yeSh0aGlzLCBzZXBhcmF0b3IpKTtcbiAgICB9LFxuXG4gICAgaW50ZXJsZWF2ZTogZnVuY3Rpb24oLyouLi5pdGVyYWJsZXMqLykge1xuICAgICAgdmFyIGl0ZXJhYmxlcyA9IFt0aGlzXS5jb25jYXQoYXJyQ29weShhcmd1bWVudHMpKTtcbiAgICAgIHZhciB6aXBwZWQgPSB6aXBXaXRoRmFjdG9yeSh0aGlzLnRvU2VxKCksIEluZGV4ZWRTZXEub2YsIGl0ZXJhYmxlcyk7XG4gICAgICB2YXIgaW50ZXJsZWF2ZWQgPSB6aXBwZWQuZmxhdHRlbih0cnVlKTtcbiAgICAgIGlmICh6aXBwZWQuc2l6ZSkge1xuICAgICAgICBpbnRlcmxlYXZlZC5zaXplID0gemlwcGVkLnNpemUgKiBpdGVyYWJsZXMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGludGVybGVhdmVkKTtcbiAgICB9LFxuXG4gICAgbGFzdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoLTEpO1xuICAgIH0sXG5cbiAgICBza2lwV2hpbGU6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNraXBXaGlsZUZhY3RvcnkodGhpcywgcHJlZGljYXRlLCBjb250ZXh0LCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICB6aXA6IGZ1bmN0aW9uKC8qLCAuLi5pdGVyYWJsZXMgKi8pIHtcbiAgICAgIHZhciBpdGVyYWJsZXMgPSBbdGhpc10uY29uY2F0KGFyckNvcHkoYXJndW1lbnRzKSk7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgemlwV2l0aEZhY3RvcnkodGhpcywgZGVmYXVsdFppcHBlciwgaXRlcmFibGVzKSk7XG4gICAgfSxcblxuICAgIHppcFdpdGg6IGZ1bmN0aW9uKHppcHBlci8qLCAuLi5pdGVyYWJsZXMgKi8pIHtcbiAgICAgIHZhciBpdGVyYWJsZXMgPSBhcnJDb3B5KGFyZ3VtZW50cyk7XG4gICAgICBpdGVyYWJsZXNbMF0gPSB0aGlzO1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHppcFdpdGhGYWN0b3J5KHRoaXMsIHppcHBlciwgaXRlcmFibGVzKSk7XG4gICAgfVxuXG4gIH0pO1xuXG4gIEluZGV4ZWRJdGVyYWJsZS5wcm90b3R5cGVbSVNfSU5ERVhFRF9TRU5USU5FTF0gPSB0cnVlO1xuICBJbmRleGVkSXRlcmFibGUucHJvdG90eXBlW0lTX09SREVSRURfU0VOVElORUxdID0gdHJ1ZTtcblxuXG5cbiAgbWl4aW4oU2V0SXRlcmFibGUsIHtcblxuICAgIC8vICMjIyBFUzYgQ29sbGVjdGlvbiBtZXRob2RzIChFUzYgQXJyYXkgYW5kIE1hcClcblxuICAgIGdldDogZnVuY3Rpb24odmFsdWUsIG5vdFNldFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYXModmFsdWUpID8gdmFsdWUgOiBub3RTZXRWYWx1ZTtcbiAgICB9LFxuXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYXModmFsdWUpO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBNb3JlIHNlcXVlbnRpYWwgbWV0aG9kc1xuXG4gICAga2V5U2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlU2VxKCk7XG4gICAgfVxuXG4gIH0pO1xuXG4gIFNldEl0ZXJhYmxlLnByb3RvdHlwZS5oYXMgPSBJdGVyYWJsZVByb3RvdHlwZS5pbmNsdWRlcztcblxuXG4gIC8vIE1peGluIHN1YmNsYXNzZXNcblxuICBtaXhpbihLZXllZFNlcSwgS2V5ZWRJdGVyYWJsZS5wcm90b3R5cGUpO1xuICBtaXhpbihJbmRleGVkU2VxLCBJbmRleGVkSXRlcmFibGUucHJvdG90eXBlKTtcbiAgbWl4aW4oU2V0U2VxLCBTZXRJdGVyYWJsZS5wcm90b3R5cGUpO1xuXG4gIG1peGluKEtleWVkQ29sbGVjdGlvbiwgS2V5ZWRJdGVyYWJsZS5wcm90b3R5cGUpO1xuICBtaXhpbihJbmRleGVkQ29sbGVjdGlvbiwgSW5kZXhlZEl0ZXJhYmxlLnByb3RvdHlwZSk7XG4gIG1peGluKFNldENvbGxlY3Rpb24sIFNldEl0ZXJhYmxlLnByb3RvdHlwZSk7XG5cblxuICAvLyAjcHJhZ21hIEhlbHBlciBmdW5jdGlvbnNcblxuICBmdW5jdGlvbiBrZXlNYXBwZXIodiwgaykge1xuICAgIHJldHVybiBrO1xuICB9XG5cbiAgZnVuY3Rpb24gZW50cnlNYXBwZXIodiwgaykge1xuICAgIHJldHVybiBbaywgdl07XG4gIH1cblxuICBmdW5jdGlvbiBub3QocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBuZWcocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIC1wcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBxdW90ZVN0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0WmlwcGVyKCkge1xuICAgIHJldHVybiBhcnJDb3B5KGFyZ3VtZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0TmVnQ29tcGFyYXRvcihhLCBiKSB7XG4gICAgcmV0dXJuIGEgPCBiID8gMSA6IGEgPiBiID8gLTEgOiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzaEl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlLnNpemUgPT09IEluZmluaXR5KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIG9yZGVyZWQgPSBpc09yZGVyZWQoaXRlcmFibGUpO1xuICAgIHZhciBrZXllZCA9IGlzS2V5ZWQoaXRlcmFibGUpO1xuICAgIHZhciBoID0gb3JkZXJlZCA/IDEgOiAwO1xuICAgIHZhciBzaXplID0gaXRlcmFibGUuX19pdGVyYXRlKFxuICAgICAga2V5ZWQgP1xuICAgICAgICBvcmRlcmVkID9cbiAgICAgICAgICBmdW5jdGlvbih2LCBrKSAgeyBoID0gMzEgKiBoICsgaGFzaE1lcmdlKGhhc2godiksIGhhc2goaykpIHwgMDsgfSA6XG4gICAgICAgICAgZnVuY3Rpb24odiwgaykgIHsgaCA9IGggKyBoYXNoTWVyZ2UoaGFzaCh2KSwgaGFzaChrKSkgfCAwOyB9IDpcbiAgICAgICAgb3JkZXJlZCA/XG4gICAgICAgICAgZnVuY3Rpb24odiApIHsgaCA9IDMxICogaCArIGhhc2godikgfCAwOyB9IDpcbiAgICAgICAgICBmdW5jdGlvbih2ICkgeyBoID0gaCArIGhhc2godikgfCAwOyB9XG4gICAgKTtcbiAgICByZXR1cm4gbXVybXVySGFzaE9mU2l6ZShzaXplLCBoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG11cm11ckhhc2hPZlNpemUoc2l6ZSwgaCkge1xuICAgIGggPSBpbXVsKGgsIDB4Q0M5RTJENTEpO1xuICAgIGggPSBpbXVsKGggPDwgMTUgfCBoID4+PiAtMTUsIDB4MUI4NzM1OTMpO1xuICAgIGggPSBpbXVsKGggPDwgMTMgfCBoID4+PiAtMTMsIDUpO1xuICAgIGggPSAoaCArIDB4RTY1NDZCNjQgfCAwKSBeIHNpemU7XG4gICAgaCA9IGltdWwoaCBeIGggPj4+IDE2LCAweDg1RUJDQTZCKTtcbiAgICBoID0gaW11bChoIF4gaCA+Pj4gMTMsIDB4QzJCMkFFMzUpO1xuICAgIGggPSBzbWkoaCBeIGggPj4+IDE2KTtcbiAgICByZXR1cm4gaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc2hNZXJnZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgXiBiICsgMHg5RTM3NzlCOSArIChhIDw8IDYpICsgKGEgPj4gMikgfCAwOyAvLyBpbnRcbiAgfVxuXG4gIHZhciBJbW11dGFibGUgPSB7XG5cbiAgICBJdGVyYWJsZTogSXRlcmFibGUsXG5cbiAgICBTZXE6IFNlcSxcbiAgICBDb2xsZWN0aW9uOiBDb2xsZWN0aW9uLFxuICAgIE1hcDogTWFwLFxuICAgIE9yZGVyZWRNYXA6IE9yZGVyZWRNYXAsXG4gICAgTGlzdDogTGlzdCxcbiAgICBTdGFjazogU3RhY2ssXG4gICAgU2V0OiBTZXQsXG4gICAgT3JkZXJlZFNldDogT3JkZXJlZFNldCxcblxuICAgIFJlY29yZDogUmVjb3JkLFxuICAgIFJhbmdlOiBSYW5nZSxcbiAgICBSZXBlYXQ6IFJlcGVhdCxcblxuICAgIGlzOiBpcyxcbiAgICBmcm9tSlM6IGZyb21KU1xuXG4gIH07XG5cbiAgcmV0dXJuIEltbXV0YWJsZTtcblxufSkpOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRWRpdG9yU3RhdGVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBfZXh0ZW5kcyA9IF9hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBCbG9ja1RyZWUgPSByZXF1aXJlKCcuL0Jsb2NrVHJlZScpO1xudmFyIENvbnRlbnRTdGF0ZSA9IHJlcXVpcmUoJy4vQ29udGVudFN0YXRlJyk7XG52YXIgRWRpdG9yQmlkaVNlcnZpY2UgPSByZXF1aXJlKCcuL0VkaXRvckJpZGlTZXJ2aWNlJyk7XG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG52YXIgU2VsZWN0aW9uU3RhdGUgPSByZXF1aXJlKCcuL1NlbGVjdGlvblN0YXRlJyk7XG5cbnZhciBPcmRlcmVkU2V0ID0gSW1tdXRhYmxlLk9yZGVyZWRTZXQsXG4gICAgUmVjb3JkID0gSW1tdXRhYmxlLlJlY29yZCxcbiAgICBTdGFjayA9IEltbXV0YWJsZS5TdGFjaztcblxuXG52YXIgZGVmYXVsdFJlY29yZCA9IHtcbiAgYWxsb3dVbmRvOiB0cnVlLFxuICBjdXJyZW50Q29udGVudDogbnVsbCxcbiAgZGVjb3JhdG9yOiBudWxsLFxuICBkaXJlY3Rpb25NYXA6IG51bGwsXG4gIGZvcmNlU2VsZWN0aW9uOiBmYWxzZSxcbiAgaW5Db21wb3NpdGlvbk1vZGU6IGZhbHNlLFxuICBpbmxpbmVTdHlsZU92ZXJyaWRlOiBudWxsLFxuICBsYXN0Q2hhbmdlVHlwZTogbnVsbCxcbiAgbmF0aXZlbHlSZW5kZXJlZENvbnRlbnQ6IG51bGwsXG4gIHJlZG9TdGFjazogU3RhY2soKSxcbiAgc2VsZWN0aW9uOiBudWxsLFxuICB0cmVlTWFwOiBudWxsLFxuICB1bmRvU3RhY2s6IFN0YWNrKClcbn07XG5cbnZhciBFZGl0b3JTdGF0ZVJlY29yZCA9IFJlY29yZChkZWZhdWx0UmVjb3JkKTtcblxudmFyIEVkaXRvclN0YXRlID0gZnVuY3Rpb24gKCkge1xuICBFZGl0b3JTdGF0ZS5jcmVhdGVFbXB0eSA9IGZ1bmN0aW9uIGNyZWF0ZUVtcHR5KGRlY29yYXRvcikge1xuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5jcmVhdGVXaXRoQ29udGVudChDb250ZW50U3RhdGUuY3JlYXRlRnJvbVRleHQoJycpLCBkZWNvcmF0b3IpO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLmNyZWF0ZVdpdGhDb250ZW50ID0gZnVuY3Rpb24gY3JlYXRlV2l0aENvbnRlbnQoY29udGVudFN0YXRlLCBkZWNvcmF0b3IpIHtcbiAgICB2YXIgZmlyc3RLZXkgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tNYXAoKS5maXJzdCgpLmdldEtleSgpO1xuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5jcmVhdGUoe1xuICAgICAgY3VycmVudENvbnRlbnQ6IGNvbnRlbnRTdGF0ZSxcbiAgICAgIHVuZG9TdGFjazogU3RhY2soKSxcbiAgICAgIHJlZG9TdGFjazogU3RhY2soKSxcbiAgICAgIGRlY29yYXRvcjogZGVjb3JhdG9yIHx8IG51bGwsXG4gICAgICBzZWxlY3Rpb246IFNlbGVjdGlvblN0YXRlLmNyZWF0ZUVtcHR5KGZpcnN0S2V5KVxuICAgIH0pO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShjb25maWcpIHtcbiAgICB2YXIgY3VycmVudENvbnRlbnQgPSBjb25maWcuY3VycmVudENvbnRlbnQsXG4gICAgICAgIGRlY29yYXRvciA9IGNvbmZpZy5kZWNvcmF0b3I7XG5cbiAgICB2YXIgcmVjb3JkQ29uZmlnID0gX2V4dGVuZHMoe30sIGNvbmZpZywge1xuICAgICAgdHJlZU1hcDogZ2VuZXJhdGVOZXdUcmVlTWFwKGN1cnJlbnRDb250ZW50LCBkZWNvcmF0b3IpLFxuICAgICAgZGlyZWN0aW9uTWFwOiBFZGl0b3JCaWRpU2VydmljZS5nZXREaXJlY3Rpb25NYXAoY3VycmVudENvbnRlbnQpXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBFZGl0b3JTdGF0ZShuZXcgRWRpdG9yU3RhdGVSZWNvcmQocmVjb3JkQ29uZmlnKSk7XG4gIH07XG5cbiAgRWRpdG9yU3RhdGUuc2V0ID0gZnVuY3Rpb24gc2V0KGVkaXRvclN0YXRlLCBwdXQpIHtcbiAgICB2YXIgbWFwID0gZWRpdG9yU3RhdGUuZ2V0SW1tdXRhYmxlKCkud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIHZhciBleGlzdGluZ0RlY29yYXRvciA9IHN0YXRlLmdldCgnZGVjb3JhdG9yJyk7XG4gICAgICB2YXIgZGVjb3JhdG9yID0gZXhpc3RpbmdEZWNvcmF0b3I7XG4gICAgICBpZiAocHV0LmRlY29yYXRvciA9PT0gbnVsbCkge1xuICAgICAgICBkZWNvcmF0b3IgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmIChwdXQuZGVjb3JhdG9yKSB7XG4gICAgICAgIGRlY29yYXRvciA9IHB1dC5kZWNvcmF0b3I7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdDb250ZW50ID0gcHV0LmN1cnJlbnRDb250ZW50IHx8IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG5cbiAgICAgIGlmIChkZWNvcmF0b3IgIT09IGV4aXN0aW5nRGVjb3JhdG9yKSB7XG4gICAgICAgIHZhciB0cmVlTWFwID0gc3RhdGUuZ2V0KCd0cmVlTWFwJyk7XG4gICAgICAgIHZhciBuZXdUcmVlTWFwO1xuICAgICAgICBpZiAoZGVjb3JhdG9yICYmIGV4aXN0aW5nRGVjb3JhdG9yKSB7XG4gICAgICAgICAgbmV3VHJlZU1hcCA9IHJlZ2VuZXJhdGVUcmVlRm9yTmV3RGVjb3JhdG9yKG5ld0NvbnRlbnQsIG5ld0NvbnRlbnQuZ2V0QmxvY2tNYXAoKSwgdHJlZU1hcCwgZGVjb3JhdG9yLCBleGlzdGluZ0RlY29yYXRvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3VHJlZU1hcCA9IGdlbmVyYXRlTmV3VHJlZU1hcChuZXdDb250ZW50LCBkZWNvcmF0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUubWVyZ2Uoe1xuICAgICAgICAgIGRlY29yYXRvcjogZGVjb3JhdG9yLFxuICAgICAgICAgIHRyZWVNYXA6IG5ld1RyZWVNYXAsXG4gICAgICAgICAgbmF0aXZlbHlSZW5kZXJlZENvbnRlbnQ6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGV4aXN0aW5nQ29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgICBpZiAobmV3Q29udGVudCAhPT0gZXhpc3RpbmdDb250ZW50KSB7XG4gICAgICAgIHN0YXRlLnNldCgndHJlZU1hcCcsIHJlZ2VuZXJhdGVUcmVlRm9yTmV3QmxvY2tzKGVkaXRvclN0YXRlLCBuZXdDb250ZW50LmdldEJsb2NrTWFwKCksIG5ld0NvbnRlbnQuZ2V0RW50aXR5TWFwKCksIGRlY29yYXRvcikpO1xuICAgICAgfVxuXG4gICAgICBzdGF0ZS5tZXJnZShwdXQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ldyBFZGl0b3JTdGF0ZShtYXApO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLnByb3RvdHlwZS50b0pTID0gZnVuY3Rpb24gdG9KUygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbW11dGFibGUoKS50b0pTKCk7XG4gIH07XG5cbiAgRWRpdG9yU3RhdGUucHJvdG90eXBlLmdldEFsbG93VW5kbyA9IGZ1bmN0aW9uIGdldEFsbG93VW5kbygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbW11dGFibGUoKS5nZXQoJ2FsbG93VW5kbycpO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLnByb3RvdHlwZS5nZXRDdXJyZW50Q29udGVudCA9IGZ1bmN0aW9uIGdldEN1cnJlbnRDb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLmdldEltbXV0YWJsZSgpLmdldCgnY3VycmVudENvbnRlbnQnKTtcbiAgfTtcblxuICBFZGl0b3JTdGF0ZS5wcm90b3R5cGUuZ2V0VW5kb1N0YWNrID0gZnVuY3Rpb24gZ2V0VW5kb1N0YWNrKCkge1xuICAgIHJldHVybiB0aGlzLmdldEltbXV0YWJsZSgpLmdldCgndW5kb1N0YWNrJyk7XG4gIH07XG5cbiAgRWRpdG9yU3RhdGUucHJvdG90eXBlLmdldFJlZG9TdGFjayA9IGZ1bmN0aW9uIGdldFJlZG9TdGFjaygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbW11dGFibGUoKS5nZXQoJ3JlZG9TdGFjaycpO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLnByb3RvdHlwZS5nZXRTZWxlY3Rpb24gPSBmdW5jdGlvbiBnZXRTZWxlY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SW1tdXRhYmxlKCkuZ2V0KCdzZWxlY3Rpb24nKTtcbiAgfTtcblxuICBFZGl0b3JTdGF0ZS5wcm90b3R5cGUuZ2V0RGVjb3JhdG9yID0gZnVuY3Rpb24gZ2V0RGVjb3JhdG9yKCkge1xuICAgIHJldHVybiB0aGlzLmdldEltbXV0YWJsZSgpLmdldCgnZGVjb3JhdG9yJyk7XG4gIH07XG5cbiAgRWRpdG9yU3RhdGUucHJvdG90eXBlLmlzSW5Db21wb3NpdGlvbk1vZGUgPSBmdW5jdGlvbiBpc0luQ29tcG9zaXRpb25Nb2RlKCkge1xuICAgIHJldHVybiB0aGlzLmdldEltbXV0YWJsZSgpLmdldCgnaW5Db21wb3NpdGlvbk1vZGUnKTtcbiAgfTtcblxuICBFZGl0b3JTdGF0ZS5wcm90b3R5cGUubXVzdEZvcmNlU2VsZWN0aW9uID0gZnVuY3Rpb24gbXVzdEZvcmNlU2VsZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdldEltbXV0YWJsZSgpLmdldCgnZm9yY2VTZWxlY3Rpb24nKTtcbiAgfTtcblxuICBFZGl0b3JTdGF0ZS5wcm90b3R5cGUuZ2V0TmF0aXZlbHlSZW5kZXJlZENvbnRlbnQgPSBmdW5jdGlvbiBnZXROYXRpdmVseVJlbmRlcmVkQ29udGVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbW11dGFibGUoKS5nZXQoJ25hdGl2ZWx5UmVuZGVyZWRDb250ZW50Jyk7XG4gIH07XG5cbiAgRWRpdG9yU3RhdGUucHJvdG90eXBlLmdldExhc3RDaGFuZ2VUeXBlID0gZnVuY3Rpb24gZ2V0TGFzdENoYW5nZVR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SW1tdXRhYmxlKCkuZ2V0KCdsYXN0Q2hhbmdlVHlwZScpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBXaGlsZSBlZGl0aW5nLCB0aGUgdXNlciBtYXkgYXBwbHkgaW5saW5lIHN0eWxlIGNvbW1hbmRzIHdpdGggYSBjb2xsYXBzZWRcbiAgICogY3Vyc29yLCBpbnRlbmRpbmcgdG8gdHlwZSB0ZXh0IHRoYXQgYWRvcHRzIHRoZSBzcGVjaWZpZWQgc3R5bGUuIEluIHRoaXNcbiAgICogY2FzZSwgd2UgdHJhY2sgdGhlIHNwZWNpZmllZCBzdHlsZSBhcyBhbiBcIm92ZXJyaWRlXCIgdGhhdCB0YWtlcyBwcmVjZWRlbmNlXG4gICAqIG92ZXIgdGhlIGlubGluZSBzdHlsZSBvZiB0aGUgdGV4dCBhZGphY2VudCB0byB0aGUgY3Vyc29yLlxuICAgKlxuICAgKiBJZiBudWxsLCB0aGVyZSBpcyBubyBvdmVycmlkZSBpbiBwbGFjZS5cbiAgICovXG5cblxuICBFZGl0b3JTdGF0ZS5wcm90b3R5cGUuZ2V0SW5saW5lU3R5bGVPdmVycmlkZSA9IGZ1bmN0aW9uIGdldElubGluZVN0eWxlT3ZlcnJpZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SW1tdXRhYmxlKCkuZ2V0KCdpbmxpbmVTdHlsZU92ZXJyaWRlJyk7XG4gIH07XG5cbiAgRWRpdG9yU3RhdGUuc2V0SW5saW5lU3R5bGVPdmVycmlkZSA9IGZ1bmN0aW9uIHNldElubGluZVN0eWxlT3ZlcnJpZGUoZWRpdG9yU3RhdGUsIGlubGluZVN0eWxlT3ZlcnJpZGUpIHtcbiAgICByZXR1cm4gRWRpdG9yU3RhdGUuc2V0KGVkaXRvclN0YXRlLCB7IGlubGluZVN0eWxlT3ZlcnJpZGU6IGlubGluZVN0eWxlT3ZlcnJpZGUgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgYXBwcm9wcmlhdGUgaW5saW5lIHN0eWxlIGZvciB0aGUgZWRpdG9yIHN0YXRlLiBJZiBhblxuICAgKiBvdmVycmlkZSBpcyBpbiBwbGFjZSwgdXNlIGl0LiBPdGhlcndpc2UsIHRoZSBjdXJyZW50IHN0eWxlIGlzXG4gICAqIGJhc2VkIG9uIHRoZSBsb2NhdGlvbiBvZiB0aGUgc2VsZWN0aW9uIHN0YXRlLlxuICAgKi9cblxuXG4gIEVkaXRvclN0YXRlLnByb3RvdHlwZS5nZXRDdXJyZW50SW5saW5lU3R5bGUgPSBmdW5jdGlvbiBnZXRDdXJyZW50SW5saW5lU3R5bGUoKSB7XG4gICAgdmFyIG92ZXJyaWRlID0gdGhpcy5nZXRJbmxpbmVTdHlsZU92ZXJyaWRlKCk7XG4gICAgaWYgKG92ZXJyaWRlICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBvdmVycmlkZTtcbiAgICB9XG5cbiAgICB2YXIgY29udGVudCA9IHRoaXMuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgc2VsZWN0aW9uID0gdGhpcy5nZXRTZWxlY3Rpb24oKTtcblxuICAgIGlmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgICAgcmV0dXJuIGdldElubGluZVN0eWxlRm9yQ29sbGFwc2VkU2VsZWN0aW9uKGNvbnRlbnQsIHNlbGVjdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldElubGluZVN0eWxlRm9yTm9uQ29sbGFwc2VkU2VsZWN0aW9uKGNvbnRlbnQsIHNlbGVjdGlvbik7XG4gIH07XG5cbiAgRWRpdG9yU3RhdGUucHJvdG90eXBlLmdldEJsb2NrVHJlZSA9IGZ1bmN0aW9uIGdldEJsb2NrVHJlZShibG9ja0tleSkge1xuICAgIHJldHVybiB0aGlzLmdldEltbXV0YWJsZSgpLmdldEluKFsndHJlZU1hcCcsIGJsb2NrS2V5XSk7XG4gIH07XG5cbiAgRWRpdG9yU3RhdGUucHJvdG90eXBlLmlzU2VsZWN0aW9uQXRTdGFydE9mQ29udGVudCA9IGZ1bmN0aW9uIGlzU2VsZWN0aW9uQXRTdGFydE9mQ29udGVudCgpIHtcbiAgICB2YXIgZmlyc3RLZXkgPSB0aGlzLmdldEN1cnJlbnRDb250ZW50KCkuZ2V0QmxvY2tNYXAoKS5maXJzdCgpLmdldEtleSgpO1xuICAgIHJldHVybiB0aGlzLmdldFNlbGVjdGlvbigpLmhhc0VkZ2VXaXRoaW4oZmlyc3RLZXksIDAsIDApO1xuICB9O1xuXG4gIEVkaXRvclN0YXRlLnByb3RvdHlwZS5pc1NlbGVjdGlvbkF0RW5kT2ZDb250ZW50ID0gZnVuY3Rpb24gaXNTZWxlY3Rpb25BdEVuZE9mQ29udGVudCgpIHtcbiAgICB2YXIgY29udGVudCA9IHRoaXMuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgYmxvY2tNYXAgPSBjb250ZW50LmdldEJsb2NrTWFwKCk7XG4gICAgdmFyIGxhc3QgPSBibG9ja01hcC5sYXN0KCk7XG4gICAgdmFyIGVuZCA9IGxhc3QuZ2V0TGVuZ3RoKCk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2VsZWN0aW9uKCkuaGFzRWRnZVdpdGhpbihsYXN0LmdldEtleSgpLCBlbmQsIGVuZCk7XG4gIH07XG5cbiAgRWRpdG9yU3RhdGUucHJvdG90eXBlLmdldERpcmVjdGlvbk1hcCA9IGZ1bmN0aW9uIGdldERpcmVjdGlvbk1hcCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbW11dGFibGUoKS5nZXQoJ2RpcmVjdGlvbk1hcCcpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbmNvcnBvcmF0ZSBuYXRpdmUgRE9NIHNlbGVjdGlvbiBjaGFuZ2VzIGludG8gdGhlIEVkaXRvclN0YXRlLiBUaGlzXG4gICAqIG1ldGhvZCBjYW4gYmUgdXNlZCB3aGVuIHdlIHNpbXBseSB3YW50IHRvIGFjY2VwdCB3aGF0ZXZlciB0aGUgRE9NXG4gICAqIGhhcyBnaXZlbiB1cyB0byByZXByZXNlbnQgc2VsZWN0aW9uLCBhbmQgd2UgZG8gbm90IG5lZWQgdG8gcmUtcmVuZGVyXG4gICAqIHRoZSBlZGl0b3IuXG4gICAqXG4gICAqIFRvIGZvcmNpYmx5IG1vdmUgdGhlIERPTSBzZWxlY3Rpb24sIHNlZSBgRWRpdG9yU3RhdGUuZm9yY2VTZWxlY3Rpb25gLlxuICAgKi9cblxuXG4gIEVkaXRvclN0YXRlLmFjY2VwdFNlbGVjdGlvbiA9IGZ1bmN0aW9uIGFjY2VwdFNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgc2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuIHVwZGF0ZVNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgc2VsZWN0aW9uLCBmYWxzZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEF0IHRpbWVzLCB3ZSBuZWVkIHRvIGZvcmNlIHRoZSBET00gc2VsZWN0aW9uIHRvIGJlIHdoZXJlIHdlXG4gICAqIG5lZWQgaXQgdG8gYmUuIFRoaXMgY2FuIG9jY3VyIHdoZW4gdGhlIGFuY2hvciBvciBmb2N1cyBub2Rlc1xuICAgKiBhcmUgbm9uLXRleHQgbm9kZXMsIGZvciBpbnN0YW5jZS4gSW4gdGhpcyBjYXNlLCB3ZSB3YW50IHRvIHRyaWdnZXJcbiAgICogYSByZS1yZW5kZXIgb2YgdGhlIGVkaXRvciwgd2hpY2ggaW4gdHVybiBmb3JjZXMgc2VsZWN0aW9uIGludG9cbiAgICogdGhlIGNvcnJlY3QgcGxhY2UgaW4gdGhlIERPTS4gVGhlIGBmb3JjZVNlbGVjdGlvbmAgbWV0aG9kXG4gICAqIGFjY29tcGxpc2hlcyB0aGlzLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgdXNlZCBpbiBjYXNlcyB3aGVyZSB5b3UgbmVlZCB0byBleHBsaWNpdGx5XG4gICAqIG1vdmUgdGhlIERPTSBzZWxlY3Rpb24gZnJvbSBvbmUgcGxhY2UgdG8gYW5vdGhlciB3aXRob3V0IGEgY2hhbmdlXG4gICAqIGluIENvbnRlbnRTdGF0ZS5cbiAgICovXG5cblxuICBFZGl0b3JTdGF0ZS5mb3JjZVNlbGVjdGlvbiA9IGZ1bmN0aW9uIGZvcmNlU2VsZWN0aW9uKGVkaXRvclN0YXRlLCBzZWxlY3Rpb24pIHtcbiAgICBpZiAoIXNlbGVjdGlvbi5nZXRIYXNGb2N1cygpKSB7XG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Rpb24uc2V0KCdoYXNGb2N1cycsIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlU2VsZWN0aW9uKGVkaXRvclN0YXRlLCBzZWxlY3Rpb24sIHRydWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBNb3ZlIHNlbGVjdGlvbiB0byB0aGUgZW5kIG9mIHRoZSBlZGl0b3Igd2l0aG91dCBmb3JjaW5nIGZvY3VzLlxuICAgKi9cblxuXG4gIEVkaXRvclN0YXRlLm1vdmVTZWxlY3Rpb25Ub0VuZCA9IGZ1bmN0aW9uIG1vdmVTZWxlY3Rpb25Ub0VuZChlZGl0b3JTdGF0ZSkge1xuICAgIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgbGFzdEJsb2NrID0gY29udGVudC5nZXRMYXN0QmxvY2soKTtcbiAgICB2YXIgbGFzdEtleSA9IGxhc3RCbG9jay5nZXRLZXkoKTtcbiAgICB2YXIgbGVuZ3RoID0gbGFzdEJsb2NrLmdldExlbmd0aCgpO1xuXG4gICAgcmV0dXJuIEVkaXRvclN0YXRlLmFjY2VwdFNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgbmV3IFNlbGVjdGlvblN0YXRlKHtcbiAgICAgIGFuY2hvcktleTogbGFzdEtleSxcbiAgICAgIGFuY2hvck9mZnNldDogbGVuZ3RoLFxuICAgICAgZm9jdXNLZXk6IGxhc3RLZXksXG4gICAgICBmb2N1c09mZnNldDogbGVuZ3RoLFxuICAgICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgICB9KSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZvcmNlIGZvY3VzIHRvIHRoZSBlbmQgb2YgdGhlIGVkaXRvci4gVGhpcyBpcyB1c2VmdWwgaW4gc2NlbmFyaW9zXG4gICAqIHdoZXJlIHdlIHdhbnQgdG8gcHJvZ3JhbW1hdGljYWxseSBmb2N1cyB0aGUgaW5wdXQgYW5kIGl0IG1ha2VzIHNlbnNlXG4gICAqIHRvIGFsbG93IHRoZSB1c2VyIHRvIGNvbnRpbnVlIHdvcmtpbmcgc2VhbWxlc3NseS5cbiAgICovXG5cblxuICBFZGl0b3JTdGF0ZS5tb3ZlRm9jdXNUb0VuZCA9IGZ1bmN0aW9uIG1vdmVGb2N1c1RvRW5kKGVkaXRvclN0YXRlKSB7XG4gICAgdmFyIGFmdGVyU2VsZWN0aW9uTW92ZSA9IEVkaXRvclN0YXRlLm1vdmVTZWxlY3Rpb25Ub0VuZChlZGl0b3JTdGF0ZSk7XG4gICAgcmV0dXJuIEVkaXRvclN0YXRlLmZvcmNlU2VsZWN0aW9uKGFmdGVyU2VsZWN0aW9uTW92ZSwgYWZ0ZXJTZWxlY3Rpb25Nb3ZlLmdldFNlbGVjdGlvbigpKTtcbiAgfTtcblxuICAvKipcbiAgICogUHVzaCB0aGUgY3VycmVudCBDb250ZW50U3RhdGUgb250byB0aGUgdW5kbyBzdGFjayBpZiBpdCBzaG91bGQgYmVcbiAgICogY29uc2lkZXJlZCBhIGJvdW5kYXJ5IHN0YXRlLCBhbmQgc2V0IHRoZSBwcm92aWRlZCBDb250ZW50U3RhdGUgYXMgdGhlXG4gICAqIG5ldyBjdXJyZW50IGNvbnRlbnQuXG4gICAqL1xuXG5cbiAgRWRpdG9yU3RhdGUucHVzaCA9IGZ1bmN0aW9uIHB1c2goZWRpdG9yU3RhdGUsIGNvbnRlbnRTdGF0ZSwgY2hhbmdlVHlwZSkge1xuICAgIGlmIChlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpID09PSBjb250ZW50U3RhdGUpIHtcbiAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgZm9yY2VTZWxlY3Rpb24gPSBjaGFuZ2VUeXBlICE9PSAnaW5zZXJ0LWNoYXJhY3RlcnMnO1xuICAgIHZhciBkaXJlY3Rpb25NYXAgPSBFZGl0b3JCaWRpU2VydmljZS5nZXREaXJlY3Rpb25NYXAoY29udGVudFN0YXRlLCBlZGl0b3JTdGF0ZS5nZXREaXJlY3Rpb25NYXAoKSk7XG5cbiAgICBpZiAoIWVkaXRvclN0YXRlLmdldEFsbG93VW5kbygpKSB7XG4gICAgICByZXR1cm4gRWRpdG9yU3RhdGUuc2V0KGVkaXRvclN0YXRlLCB7XG4gICAgICAgIGN1cnJlbnRDb250ZW50OiBjb250ZW50U3RhdGUsXG4gICAgICAgIGRpcmVjdGlvbk1hcDogZGlyZWN0aW9uTWFwLFxuICAgICAgICBsYXN0Q2hhbmdlVHlwZTogY2hhbmdlVHlwZSxcbiAgICAgICAgc2VsZWN0aW9uOiBjb250ZW50U3RhdGUuZ2V0U2VsZWN0aW9uQWZ0ZXIoKSxcbiAgICAgICAgZm9yY2VTZWxlY3Rpb246IGZvcmNlU2VsZWN0aW9uLFxuICAgICAgICBpbmxpbmVTdHlsZU92ZXJyaWRlOiBudWxsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gICAgdmFyIGN1cnJlbnRDb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgdW5kb1N0YWNrID0gZWRpdG9yU3RhdGUuZ2V0VW5kb1N0YWNrKCk7XG4gICAgdmFyIG5ld0NvbnRlbnQgPSBjb250ZW50U3RhdGU7XG5cbiAgICBpZiAoc2VsZWN0aW9uICE9PSBjdXJyZW50Q29udGVudC5nZXRTZWxlY3Rpb25BZnRlcigpIHx8IG11c3RCZWNvbWVCb3VuZGFyeShlZGl0b3JTdGF0ZSwgY2hhbmdlVHlwZSkpIHtcbiAgICAgIHVuZG9TdGFjayA9IHVuZG9TdGFjay5wdXNoKGN1cnJlbnRDb250ZW50KTtcbiAgICAgIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LnNldCgnc2VsZWN0aW9uQmVmb3JlJywgc2VsZWN0aW9uKTtcbiAgICB9IGVsc2UgaWYgKGNoYW5nZVR5cGUgPT09ICdpbnNlcnQtY2hhcmFjdGVycycgfHwgY2hhbmdlVHlwZSA9PT0gJ2JhY2tzcGFjZS1jaGFyYWN0ZXInIHx8IGNoYW5nZVR5cGUgPT09ICdkZWxldGUtY2hhcmFjdGVyJykge1xuICAgICAgLy8gUHJlc2VydmUgdGhlIHByZXZpb3VzIHNlbGVjdGlvbi5cbiAgICAgIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LnNldCgnc2VsZWN0aW9uQmVmb3JlJywgY3VycmVudENvbnRlbnQuZ2V0U2VsZWN0aW9uQmVmb3JlKCkpO1xuICAgIH1cblxuICAgIHZhciBpbmxpbmVTdHlsZU92ZXJyaWRlID0gZWRpdG9yU3RhdGUuZ2V0SW5saW5lU3R5bGVPdmVycmlkZSgpO1xuXG4gICAgLy8gRG9uJ3QgZGlzY2FyZCBpbmxpbmUgc3R5bGUgb3ZlcnJpZGVzIGZvciB0aGUgZm9sbG93aW5nIGNoYW5nZSB0eXBlczpcbiAgICB2YXIgb3ZlcnJpZGVDaGFuZ2VUeXBlcyA9IFsnYWRqdXN0LWRlcHRoJywgJ2NoYW5nZS1ibG9jay10eXBlJywgJ3NwbGl0LWJsb2NrJ107XG5cbiAgICBpZiAob3ZlcnJpZGVDaGFuZ2VUeXBlcy5pbmRleE9mKGNoYW5nZVR5cGUpID09PSAtMSkge1xuICAgICAgaW5saW5lU3R5bGVPdmVycmlkZSA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGVkaXRvclN0YXRlQ2hhbmdlcyA9IHtcbiAgICAgIGN1cnJlbnRDb250ZW50OiBuZXdDb250ZW50LFxuICAgICAgZGlyZWN0aW9uTWFwOiBkaXJlY3Rpb25NYXAsXG4gICAgICB1bmRvU3RhY2s6IHVuZG9TdGFjayxcbiAgICAgIHJlZG9TdGFjazogU3RhY2soKSxcbiAgICAgIGxhc3RDaGFuZ2VUeXBlOiBjaGFuZ2VUeXBlLFxuICAgICAgc2VsZWN0aW9uOiBjb250ZW50U3RhdGUuZ2V0U2VsZWN0aW9uQWZ0ZXIoKSxcbiAgICAgIGZvcmNlU2VsZWN0aW9uOiBmb3JjZVNlbGVjdGlvbixcbiAgICAgIGlubGluZVN0eWxlT3ZlcnJpZGU6IGlubGluZVN0eWxlT3ZlcnJpZGVcbiAgICB9O1xuXG4gICAgcmV0dXJuIEVkaXRvclN0YXRlLnNldChlZGl0b3JTdGF0ZSwgZWRpdG9yU3RhdGVDaGFuZ2VzKTtcbiAgfTtcblxuICAvKipcbiAgICogTWFrZSB0aGUgdG9wIENvbnRlbnRTdGF0ZSBpbiB0aGUgdW5kbyBzdGFjayB0aGUgbmV3IGN1cnJlbnQgY29udGVudCBhbmRcbiAgICogcHVzaCB0aGUgY3VycmVudCBjb250ZW50IG9udG8gdGhlIHJlZG8gc3RhY2suXG4gICAqL1xuXG5cbiAgRWRpdG9yU3RhdGUudW5kbyA9IGZ1bmN0aW9uIHVuZG8oZWRpdG9yU3RhdGUpIHtcbiAgICBpZiAoIWVkaXRvclN0YXRlLmdldEFsbG93VW5kbygpKSB7XG4gICAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIHVuZG9TdGFjayA9IGVkaXRvclN0YXRlLmdldFVuZG9TdGFjaygpO1xuICAgIHZhciBuZXdDdXJyZW50Q29udGVudCA9IHVuZG9TdGFjay5wZWVrKCk7XG4gICAgaWYgKCFuZXdDdXJyZW50Q29udGVudCkge1xuICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50Q29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIGRpcmVjdGlvbk1hcCA9IEVkaXRvckJpZGlTZXJ2aWNlLmdldERpcmVjdGlvbk1hcChuZXdDdXJyZW50Q29udGVudCwgZWRpdG9yU3RhdGUuZ2V0RGlyZWN0aW9uTWFwKCkpO1xuXG4gICAgcmV0dXJuIEVkaXRvclN0YXRlLnNldChlZGl0b3JTdGF0ZSwge1xuICAgICAgY3VycmVudENvbnRlbnQ6IG5ld0N1cnJlbnRDb250ZW50LFxuICAgICAgZGlyZWN0aW9uTWFwOiBkaXJlY3Rpb25NYXAsXG4gICAgICB1bmRvU3RhY2s6IHVuZG9TdGFjay5zaGlmdCgpLFxuICAgICAgcmVkb1N0YWNrOiBlZGl0b3JTdGF0ZS5nZXRSZWRvU3RhY2soKS5wdXNoKGN1cnJlbnRDb250ZW50KSxcbiAgICAgIGZvcmNlU2VsZWN0aW9uOiB0cnVlLFxuICAgICAgaW5saW5lU3R5bGVPdmVycmlkZTogbnVsbCxcbiAgICAgIGxhc3RDaGFuZ2VUeXBlOiAndW5kbycsXG4gICAgICBuYXRpdmVseVJlbmRlcmVkQ29udGVudDogbnVsbCxcbiAgICAgIHNlbGVjdGlvbjogY3VycmVudENvbnRlbnQuZ2V0U2VsZWN0aW9uQmVmb3JlKClcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogTWFrZSB0aGUgdG9wIENvbnRlbnRTdGF0ZSBpbiB0aGUgcmVkbyBzdGFjayB0aGUgbmV3IGN1cnJlbnQgY29udGVudCBhbmRcbiAgICogcHVzaCB0aGUgY3VycmVudCBjb250ZW50IG9udG8gdGhlIHVuZG8gc3RhY2suXG4gICAqL1xuXG5cbiAgRWRpdG9yU3RhdGUucmVkbyA9IGZ1bmN0aW9uIHJlZG8oZWRpdG9yU3RhdGUpIHtcbiAgICBpZiAoIWVkaXRvclN0YXRlLmdldEFsbG93VW5kbygpKSB7XG4gICAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIHJlZG9TdGFjayA9IGVkaXRvclN0YXRlLmdldFJlZG9TdGFjaygpO1xuICAgIHZhciBuZXdDdXJyZW50Q29udGVudCA9IHJlZG9TdGFjay5wZWVrKCk7XG4gICAgaWYgKCFuZXdDdXJyZW50Q29udGVudCkge1xuICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50Q29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIGRpcmVjdGlvbk1hcCA9IEVkaXRvckJpZGlTZXJ2aWNlLmdldERpcmVjdGlvbk1hcChuZXdDdXJyZW50Q29udGVudCwgZWRpdG9yU3RhdGUuZ2V0RGlyZWN0aW9uTWFwKCkpO1xuXG4gICAgcmV0dXJuIEVkaXRvclN0YXRlLnNldChlZGl0b3JTdGF0ZSwge1xuICAgICAgY3VycmVudENvbnRlbnQ6IG5ld0N1cnJlbnRDb250ZW50LFxuICAgICAgZGlyZWN0aW9uTWFwOiBkaXJlY3Rpb25NYXAsXG4gICAgICB1bmRvU3RhY2s6IGVkaXRvclN0YXRlLmdldFVuZG9TdGFjaygpLnB1c2goY3VycmVudENvbnRlbnQpLFxuICAgICAgcmVkb1N0YWNrOiByZWRvU3RhY2suc2hpZnQoKSxcbiAgICAgIGZvcmNlU2VsZWN0aW9uOiB0cnVlLFxuICAgICAgaW5saW5lU3R5bGVPdmVycmlkZTogbnVsbCxcbiAgICAgIGxhc3RDaGFuZ2VUeXBlOiAncmVkbycsXG4gICAgICBuYXRpdmVseVJlbmRlcmVkQ29udGVudDogbnVsbCxcbiAgICAgIHNlbGVjdGlvbjogbmV3Q3VycmVudENvbnRlbnQuZ2V0U2VsZWN0aW9uQWZ0ZXIoKVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBOb3QgZm9yIHB1YmxpYyBjb25zdW1wdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBFZGl0b3JTdGF0ZShpbW11dGFibGUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRWRpdG9yU3RhdGUpO1xuXG4gICAgdGhpcy5faW1tdXRhYmxlID0gaW1tdXRhYmxlO1xuICB9XG5cbiAgLyoqXG4gICAqIE5vdCBmb3IgcHVibGljIGNvbnN1bXB0aW9uLlxuICAgKi9cblxuXG4gIEVkaXRvclN0YXRlLnByb3RvdHlwZS5nZXRJbW11dGFibGUgPSBmdW5jdGlvbiBnZXRJbW11dGFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ltbXV0YWJsZTtcbiAgfTtcblxuICByZXR1cm4gRWRpdG9yU3RhdGU7XG59KCk7XG5cbi8qKlxuICogU2V0IHRoZSBzdXBwbGllZCBTZWxlY3Rpb25TdGF0ZSBhcyB0aGUgbmV3IGN1cnJlbnQgc2VsZWN0aW9uLCBhbmQgc2V0XG4gKiB0aGUgYGZvcmNlYCBmbGFnIHRvIHRyaWdnZXIgbWFudWFsIHNlbGVjdGlvbiBwbGFjZW1lbnQgYnkgdGhlIHZpZXcuXG4gKi9cblxuXG5mdW5jdGlvbiB1cGRhdGVTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIHNlbGVjdGlvbiwgZm9yY2VTZWxlY3Rpb24pIHtcbiAgcmV0dXJuIEVkaXRvclN0YXRlLnNldChlZGl0b3JTdGF0ZSwge1xuICAgIHNlbGVjdGlvbjogc2VsZWN0aW9uLFxuICAgIGZvcmNlU2VsZWN0aW9uOiBmb3JjZVNlbGVjdGlvbixcbiAgICBuYXRpdmVseVJlbmRlcmVkQ29udGVudDogbnVsbCxcbiAgICBpbmxpbmVTdHlsZU92ZXJyaWRlOiBudWxsXG4gIH0pO1xufVxuXG4vKipcbiAqIFJlZ2VuZXJhdGUgdGhlIGVudGlyZSB0cmVlIG1hcCBmb3IgYSBnaXZlbiBDb250ZW50U3RhdGUgYW5kIGRlY29yYXRvci5cbiAqIFJldHVybnMgYW4gT3JkZXJlZE1hcCB0aGF0IG1hcHMgYWxsIGF2YWlsYWJsZSBDb250ZW50QmxvY2sgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVOZXdUcmVlTWFwKGNvbnRlbnRTdGF0ZSwgZGVjb3JhdG9yKSB7XG4gIHJldHVybiBjb250ZW50U3RhdGUuZ2V0QmxvY2tNYXAoKS5tYXAoZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgcmV0dXJuIEJsb2NrVHJlZS5nZW5lcmF0ZShjb250ZW50U3RhdGUsIGJsb2NrLCBkZWNvcmF0b3IpO1xuICB9KS50b09yZGVyZWRNYXAoKTtcbn1cblxuLyoqXG4gKiBSZWdlbmVyYXRlIHRyZWUgbWFwIG9iamVjdHMgZm9yIGFsbCBDb250ZW50QmxvY2tzIHRoYXQgaGF2ZSBjaGFuZ2VkXG4gKiBiZXR3ZWVuIHRoZSBjdXJyZW50IGVkaXRvclN0YXRlIGFuZCBuZXdDb250ZW50LiBSZXR1cm5zIGFuIE9yZGVyZWRNYXBcbiAqIHdpdGggb25seSBjaGFuZ2VkIHJlZ2VuZXJhdGVkIHRyZWUgbWFwIG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIHJlZ2VuZXJhdGVUcmVlRm9yTmV3QmxvY2tzKGVkaXRvclN0YXRlLCBuZXdCbG9ja01hcCwgbmV3RW50aXR5TWFwLCBkZWNvcmF0b3IpIHtcbiAgdmFyIGNvbnRlbnRTdGF0ZSA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkuc2V0KCdlbnRpdHlNYXAnLCBuZXdFbnRpdHlNYXApO1xuICB2YXIgcHJldkJsb2NrTWFwID0gY29udGVudFN0YXRlLmdldEJsb2NrTWFwKCk7XG4gIHZhciBwcmV2VHJlZU1hcCA9IGVkaXRvclN0YXRlLmdldEltbXV0YWJsZSgpLmdldCgndHJlZU1hcCcpO1xuICByZXR1cm4gcHJldlRyZWVNYXAubWVyZ2UobmV3QmxvY2tNYXAudG9TZXEoKS5maWx0ZXIoZnVuY3Rpb24gKGJsb2NrLCBrZXkpIHtcbiAgICByZXR1cm4gYmxvY2sgIT09IHByZXZCbG9ja01hcC5nZXQoa2V5KTtcbiAgfSkubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgIHJldHVybiBCbG9ja1RyZWUuZ2VuZXJhdGUoY29udGVudFN0YXRlLCBibG9jaywgZGVjb3JhdG9yKTtcbiAgfSkpO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIHRyZWUgbWFwIG9iamVjdHMgZm9yIGEgbmV3IGRlY29yYXRvciBvYmplY3QsIHByZXNlcnZpbmcgYW55XG4gKiBkZWNvcmF0aW9ucyB0aGF0IGFyZSB1bmNoYW5nZWQgZnJvbSB0aGUgcHJldmlvdXMgZGVjb3JhdG9yLlxuICpcbiAqIE5vdGUgdGhhdCBpbiBvcmRlciBmb3IgdGhpcyB0byBwZXJmb3JtIG9wdGltYWxseSwgZGVjb3JhdGlvbiBMaXN0cyBmb3JcbiAqIGRlY29yYXRvcnMgc2hvdWxkIGJlIHByZXNlcnZlZCB3aGVuIHBvc3NpYmxlIHRvIGFsbG93IGZvciBkaXJlY3QgaW1tdXRhYmxlXG4gKiBMaXN0IGNvbXBhcmlzb24uXG4gKi9cbmZ1bmN0aW9uIHJlZ2VuZXJhdGVUcmVlRm9yTmV3RGVjb3JhdG9yKGNvbnRlbnQsIGJsb2NrTWFwLCBwcmV2aW91c1RyZWVNYXAsIGRlY29yYXRvciwgZXhpc3RpbmdEZWNvcmF0b3IpIHtcbiAgcmV0dXJuIHByZXZpb3VzVHJlZU1hcC5tZXJnZShibG9ja01hcC50b1NlcSgpLmZpbHRlcihmdW5jdGlvbiAoYmxvY2spIHtcbiAgICByZXR1cm4gZGVjb3JhdG9yLmdldERlY29yYXRpb25zKGJsb2NrLCBjb250ZW50KSAhPT0gZXhpc3RpbmdEZWNvcmF0b3IuZ2V0RGVjb3JhdGlvbnMoYmxvY2ssIGNvbnRlbnQpO1xuICB9KS5tYXAoZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgcmV0dXJuIEJsb2NrVHJlZS5nZW5lcmF0ZShjb250ZW50LCBibG9jaywgZGVjb3JhdG9yKTtcbiAgfSkpO1xufVxuXG4vKipcbiAqIFJldHVybiB3aGV0aGVyIGEgY2hhbmdlIHNob3VsZCBiZSBjb25zaWRlcmVkIGEgYm91bmRhcnkgc3RhdGUsIGdpdmVuXG4gKiB0aGUgcHJldmlvdXMgY2hhbmdlIHR5cGUuIEFsbG93cyB1cyB0byBkaXNjYXJkIHBvdGVudGlhbCBib3VuZGFyeSBzdGF0ZXNcbiAqIGR1cmluZyBzdGFuZGFyZCB0eXBpbmcgb3IgZGVsZXRpb24gYmVoYXZpb3IuXG4gKi9cbmZ1bmN0aW9uIG11c3RCZWNvbWVCb3VuZGFyeShlZGl0b3JTdGF0ZSwgY2hhbmdlVHlwZSkge1xuICB2YXIgbGFzdENoYW5nZVR5cGUgPSBlZGl0b3JTdGF0ZS5nZXRMYXN0Q2hhbmdlVHlwZSgpO1xuICByZXR1cm4gY2hhbmdlVHlwZSAhPT0gbGFzdENoYW5nZVR5cGUgfHwgY2hhbmdlVHlwZSAhPT0gJ2luc2VydC1jaGFyYWN0ZXJzJyAmJiBjaGFuZ2VUeXBlICE9PSAnYmFja3NwYWNlLWNoYXJhY3RlcicgJiYgY2hhbmdlVHlwZSAhPT0gJ2RlbGV0ZS1jaGFyYWN0ZXInO1xufVxuXG5mdW5jdGlvbiBnZXRJbmxpbmVTdHlsZUZvckNvbGxhcHNlZFNlbGVjdGlvbihjb250ZW50LCBzZWxlY3Rpb24pIHtcbiAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uLmdldFN0YXJ0S2V5KCk7XG4gIHZhciBzdGFydE9mZnNldCA9IHNlbGVjdGlvbi5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgc3RhcnRCbG9jayA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoc3RhcnRLZXkpO1xuXG4gIC8vIElmIHRoZSBjdXJzb3IgaXMgbm90IGF0IHRoZSBzdGFydCBvZiB0aGUgYmxvY2ssIGxvb2sgYmFja3dhcmQgdG9cbiAgLy8gcHJlc2VydmUgdGhlIHN0eWxlIG9mIHRoZSBwcmVjZWRpbmcgY2hhcmFjdGVyLlxuICBpZiAoc3RhcnRPZmZzZXQgPiAwKSB7XG4gICAgcmV0dXJuIHN0YXJ0QmxvY2suZ2V0SW5saW5lU3R5bGVBdChzdGFydE9mZnNldCAtIDEpO1xuICB9XG5cbiAgLy8gVGhlIGNhcmV0IGlzIGF0IHBvc2l0aW9uIHplcm8gaW4gdGhpcyBibG9jay4gSWYgdGhlIGJsb2NrIGhhcyBhbnlcbiAgLy8gdGV4dCBhdCBhbGwsIHVzZSB0aGUgc3R5bGUgb2YgdGhlIGZpcnN0IGNoYXJhY3Rlci5cbiAgaWYgKHN0YXJ0QmxvY2suZ2V0TGVuZ3RoKCkpIHtcbiAgICByZXR1cm4gc3RhcnRCbG9jay5nZXRJbmxpbmVTdHlsZUF0KDApO1xuICB9XG5cbiAgLy8gT3RoZXJ3aXNlLCBsb29rIHVwd2FyZCBpbiB0aGUgZG9jdW1lbnQgdG8gZmluZCB0aGUgY2xvc2VzdCBjaGFyYWN0ZXIuXG4gIHJldHVybiBsb29rVXB3YXJkRm9ySW5saW5lU3R5bGUoY29udGVudCwgc3RhcnRLZXkpO1xufVxuXG5mdW5jdGlvbiBnZXRJbmxpbmVTdHlsZUZvck5vbkNvbGxhcHNlZFNlbGVjdGlvbihjb250ZW50LCBzZWxlY3Rpb24pIHtcbiAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uLmdldFN0YXJ0S2V5KCk7XG4gIHZhciBzdGFydE9mZnNldCA9IHNlbGVjdGlvbi5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgc3RhcnRCbG9jayA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoc3RhcnRLZXkpO1xuXG4gIC8vIElmIHRoZXJlIGlzIGEgY2hhcmFjdGVyIGp1c3QgaW5zaWRlIHRoZSBzZWxlY3Rpb24sIHVzZSBpdHMgc3R5bGUuXG4gIGlmIChzdGFydE9mZnNldCA8IHN0YXJ0QmxvY2suZ2V0TGVuZ3RoKCkpIHtcbiAgICByZXR1cm4gc3RhcnRCbG9jay5nZXRJbmxpbmVTdHlsZUF0KHN0YXJ0T2Zmc2V0KTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHRoZSBzZWxlY3Rpb24gYXQgdGhlIGVuZCBvZiBhIG5vbi1lbXB0eSBibG9jay4gVXNlIHRoZSBsYXN0XG4gIC8vIHN0eWxlIGluIHRoZSBibG9jay5cbiAgaWYgKHN0YXJ0T2Zmc2V0ID4gMCkge1xuICAgIHJldHVybiBzdGFydEJsb2NrLmdldElubGluZVN0eWxlQXQoc3RhcnRPZmZzZXQgLSAxKTtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSwgbG9vayB1cHdhcmQgaW4gdGhlIGRvY3VtZW50IHRvIGZpbmQgdGhlIGNsb3Nlc3QgY2hhcmFjdGVyLlxuICByZXR1cm4gbG9va1Vwd2FyZEZvcklubGluZVN0eWxlKGNvbnRlbnQsIHN0YXJ0S2V5KTtcbn1cblxuZnVuY3Rpb24gbG9va1Vwd2FyZEZvcklubGluZVN0eWxlKGNvbnRlbnQsIGZyb21LZXkpIHtcbiAgdmFyIGxhc3ROb25FbXB0eSA9IGNvbnRlbnQuZ2V0QmxvY2tNYXAoKS5yZXZlcnNlKCkuc2tpcFVudGlsKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgcmV0dXJuIGsgPT09IGZyb21LZXk7XG4gIH0pLnNraXAoMSkuc2tpcFVudGlsKGZ1bmN0aW9uIChibG9jaywgXykge1xuICAgIHJldHVybiBibG9jay5nZXRMZW5ndGgoKTtcbiAgfSkuZmlyc3QoKTtcblxuICBpZiAobGFzdE5vbkVtcHR5KSByZXR1cm4gbGFzdE5vbkVtcHR5LmdldElubGluZVN0eWxlQXQobGFzdE5vbkVtcHR5LmdldExlbmd0aCgpIC0gMSk7XG4gIHJldHVybiBPcmRlcmVkU2V0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRWRpdG9yU3RhdGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdE1vZGlmaWVyXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyTWV0YWRhdGEnKTtcbnZhciBDb250ZW50U3RhdGVJbmxpbmVTdHlsZSA9IHJlcXVpcmUoJy4vQ29udGVudFN0YXRlSW5saW5lU3R5bGUnKTtcbnZhciBEcmFmdEZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vRHJhZnRGZWF0dXJlRmxhZ3MnKTtcbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIGFwcGx5RW50aXR5VG9Db250ZW50U3RhdGUgPSByZXF1aXJlKCcuL2FwcGx5RW50aXR5VG9Db250ZW50U3RhdGUnKTtcbnZhciBnZXRDaGFyYWN0ZXJSZW1vdmFsUmFuZ2UgPSByZXF1aXJlKCcuL2dldENoYXJhY3RlclJlbW92YWxSYW5nZScpO1xudmFyIGdldENvbnRlbnRTdGF0ZUZyYWdtZW50ID0gcmVxdWlyZSgnLi9nZXRDb250ZW50U3RhdGVGcmFnbWVudCcpO1xudmFyIGluc2VydEZyYWdtZW50SW50b0NvbnRlbnRTdGF0ZSA9IHJlcXVpcmUoJy4vaW5zZXJ0RnJhZ21lbnRJbnRvQ29udGVudFN0YXRlJyk7XG52YXIgaW5zZXJ0VGV4dEludG9Db250ZW50U3RhdGUgPSByZXF1aXJlKCcuL2luc2VydFRleHRJbnRvQ29udGVudFN0YXRlJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgbW9kaWZ5QmxvY2tGb3JDb250ZW50U3RhdGUgPSByZXF1aXJlKCcuL21vZGlmeUJsb2NrRm9yQ29udGVudFN0YXRlJyk7XG52YXIgcmVtb3ZlRW50aXRpZXNBdEVkZ2VzID0gcmVxdWlyZSgnLi9yZW1vdmVFbnRpdGllc0F0RWRnZXMnKTtcbnZhciByZW1vdmVSYW5nZUZyb21Db250ZW50U3RhdGUgPSByZXF1aXJlKCcuL3JlbW92ZVJhbmdlRnJvbUNvbnRlbnRTdGF0ZScpO1xudmFyIHNwbGl0QmxvY2tJbkNvbnRlbnRTdGF0ZSA9IHJlcXVpcmUoJy4vc3BsaXRCbG9ja0luQ29udGVudFN0YXRlJyk7XG5cbnZhciBPcmRlcmVkU2V0ID0gSW1tdXRhYmxlLk9yZGVyZWRTZXQ7XG5cbi8qKlxuICogYERyYWZ0TW9kaWZpZXJgIHByb3ZpZGVzIGEgc2V0IG9mIGNvbnZlbmllbmNlIG1ldGhvZHMgdGhhdCBhcHBseVxuICogbW9kaWZpY2F0aW9ucyB0byBhIGBDb250ZW50U3RhdGVgIG9iamVjdCBiYXNlZCBvbiBhIHRhcmdldCBgU2VsZWN0aW9uU3RhdGVgLlxuICpcbiAqIEFueSBjaGFuZ2UgdG8gYSBgQ29udGVudFN0YXRlYCBzaG91bGQgYmUgZGVjb21wb3NhYmxlIGludG8gYSBzZXJpZXMgb2ZcbiAqIHRyYW5zYWN0aW9uIGZ1bmN0aW9ucyB0aGF0IGFwcGx5IHRoZSByZXF1aXJlZCBjaGFuZ2VzIGFuZCByZXR1cm4gb3V0cHV0XG4gKiBgQ29udGVudFN0YXRlYCBvYmplY3RzLlxuICpcbiAqIFRoZXNlIGZ1bmN0aW9ucyBlbmNhcHN1bGF0ZSBzb21lIG9mIHRoZSBtb3N0IGNvbW1vbiB0cmFuc2FjdGlvbiBzZXF1ZW5jZXMuXG4gKi9cblxudmFyIERyYWZ0TW9kaWZpZXIgPSB7XG4gIHJlcGxhY2VUZXh0OiBmdW5jdGlvbiByZXBsYWNlVGV4dChjb250ZW50U3RhdGUsIHJhbmdlVG9SZXBsYWNlLCB0ZXh0LCBpbmxpbmVTdHlsZSwgZW50aXR5S2V5KSB7XG4gICAgdmFyIHdpdGhvdXRFbnRpdGllcyA9IHJlbW92ZUVudGl0aWVzQXRFZGdlcyhjb250ZW50U3RhdGUsIHJhbmdlVG9SZXBsYWNlKTtcbiAgICB2YXIgd2l0aG91dFRleHQgPSByZW1vdmVSYW5nZUZyb21Db250ZW50U3RhdGUod2l0aG91dEVudGl0aWVzLCByYW5nZVRvUmVwbGFjZSk7XG5cbiAgICB2YXIgY2hhcmFjdGVyID0gQ2hhcmFjdGVyTWV0YWRhdGEuY3JlYXRlKHtcbiAgICAgIHN0eWxlOiBpbmxpbmVTdHlsZSB8fCBPcmRlcmVkU2V0KCksXG4gICAgICBlbnRpdHk6IGVudGl0eUtleSB8fCBudWxsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaW5zZXJ0VGV4dEludG9Db250ZW50U3RhdGUod2l0aG91dFRleHQsIHdpdGhvdXRUZXh0LmdldFNlbGVjdGlvbkFmdGVyKCksIHRleHQsIGNoYXJhY3Rlcik7XG4gIH0sXG5cbiAgaW5zZXJ0VGV4dDogZnVuY3Rpb24gaW5zZXJ0VGV4dChjb250ZW50U3RhdGUsIHRhcmdldFJhbmdlLCB0ZXh0LCBpbmxpbmVTdHlsZSwgZW50aXR5S2V5KSB7XG4gICAgIXRhcmdldFJhbmdlLmlzQ29sbGFwc2VkKCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVGFyZ2V0IHJhbmdlIG11c3QgYmUgY29sbGFwc2VkIGZvciBgaW5zZXJ0VGV4dGAuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBEcmFmdE1vZGlmaWVyLnJlcGxhY2VUZXh0KGNvbnRlbnRTdGF0ZSwgdGFyZ2V0UmFuZ2UsIHRleHQsIGlubGluZVN0eWxlLCBlbnRpdHlLZXkpO1xuICB9LFxuXG4gIG1vdmVUZXh0OiBmdW5jdGlvbiBtb3ZlVGV4dChjb250ZW50U3RhdGUsIHJlbW92YWxSYW5nZSwgdGFyZ2V0UmFuZ2UpIHtcbiAgICB2YXIgbW92ZWRGcmFnbWVudCA9IGdldENvbnRlbnRTdGF0ZUZyYWdtZW50KGNvbnRlbnRTdGF0ZSwgcmVtb3ZhbFJhbmdlKTtcblxuICAgIHZhciBhZnRlclJlbW92YWwgPSBEcmFmdE1vZGlmaWVyLnJlbW92ZVJhbmdlKGNvbnRlbnRTdGF0ZSwgcmVtb3ZhbFJhbmdlLCAnYmFja3dhcmQnKTtcblxuICAgIHJldHVybiBEcmFmdE1vZGlmaWVyLnJlcGxhY2VXaXRoRnJhZ21lbnQoYWZ0ZXJSZW1vdmFsLCB0YXJnZXRSYW5nZSwgbW92ZWRGcmFnbWVudCk7XG4gIH0sXG5cbiAgcmVwbGFjZVdpdGhGcmFnbWVudDogZnVuY3Rpb24gcmVwbGFjZVdpdGhGcmFnbWVudChjb250ZW50U3RhdGUsIHRhcmdldFJhbmdlLCBmcmFnbWVudCkge1xuICAgIHZhciB3aXRob3V0RW50aXRpZXMgPSByZW1vdmVFbnRpdGllc0F0RWRnZXMoY29udGVudFN0YXRlLCB0YXJnZXRSYW5nZSk7XG4gICAgdmFyIHdpdGhvdXRUZXh0ID0gcmVtb3ZlUmFuZ2VGcm9tQ29udGVudFN0YXRlKHdpdGhvdXRFbnRpdGllcywgdGFyZ2V0UmFuZ2UpO1xuXG4gICAgcmV0dXJuIGluc2VydEZyYWdtZW50SW50b0NvbnRlbnRTdGF0ZSh3aXRob3V0VGV4dCwgd2l0aG91dFRleHQuZ2V0U2VsZWN0aW9uQWZ0ZXIoKSwgZnJhZ21lbnQpO1xuICB9LFxuXG4gIHJlbW92ZVJhbmdlOiBmdW5jdGlvbiByZW1vdmVSYW5nZShjb250ZW50U3RhdGUsIHJhbmdlVG9SZW1vdmUsIHJlbW92YWxEaXJlY3Rpb24pIHtcbiAgICB2YXIgc3RhcnRLZXkgPSB2b2lkIDAsXG4gICAgICAgIGVuZEtleSA9IHZvaWQgMCxcbiAgICAgICAgc3RhcnRCbG9jayA9IHZvaWQgMCxcbiAgICAgICAgZW5kQmxvY2sgPSB2b2lkIDA7XG4gICAgaWYgKHJhbmdlVG9SZW1vdmUuZ2V0SXNCYWNrd2FyZCgpKSB7XG4gICAgICByYW5nZVRvUmVtb3ZlID0gcmFuZ2VUb1JlbW92ZS5tZXJnZSh7XG4gICAgICAgIGFuY2hvcktleTogcmFuZ2VUb1JlbW92ZS5nZXRGb2N1c0tleSgpLFxuICAgICAgICBhbmNob3JPZmZzZXQ6IHJhbmdlVG9SZW1vdmUuZ2V0Rm9jdXNPZmZzZXQoKSxcbiAgICAgICAgZm9jdXNLZXk6IHJhbmdlVG9SZW1vdmUuZ2V0QW5jaG9yS2V5KCksXG4gICAgICAgIGZvY3VzT2Zmc2V0OiByYW5nZVRvUmVtb3ZlLmdldEFuY2hvck9mZnNldCgpLFxuICAgICAgICBpc0JhY2t3YXJkOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXJ0S2V5ID0gcmFuZ2VUb1JlbW92ZS5nZXRBbmNob3JLZXkoKTtcbiAgICBlbmRLZXkgPSByYW5nZVRvUmVtb3ZlLmdldEZvY3VzS2V5KCk7XG4gICAgc3RhcnRCbG9jayA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja0ZvcktleShzdGFydEtleSk7XG4gICAgZW5kQmxvY2sgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tGb3JLZXkoZW5kS2V5KTtcbiAgICB2YXIgc3RhcnRPZmZzZXQgPSByYW5nZVRvUmVtb3ZlLmdldFN0YXJ0T2Zmc2V0KCk7XG4gICAgdmFyIGVuZE9mZnNldCA9IHJhbmdlVG9SZW1vdmUuZ2V0RW5kT2Zmc2V0KCk7XG5cbiAgICB2YXIgc3RhcnRFbnRpdHlLZXkgPSBzdGFydEJsb2NrLmdldEVudGl0eUF0KHN0YXJ0T2Zmc2V0KTtcbiAgICB2YXIgZW5kRW50aXR5S2V5ID0gZW5kQmxvY2suZ2V0RW50aXR5QXQoZW5kT2Zmc2V0IC0gMSk7XG5cbiAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gc3RhdGUgb3ZlcmxhcHMgd2l0aCBhIHNpbmdsZSBlbnRpdHkuXG4gICAgLy8gSWYgc28sIHRyeSB0byByZW1vdmUgdGhlIGFwcHJvcHJpYXRlIHN1YnN0cmluZyBvZiB0aGUgZW50aXR5IHRleHQuXG4gICAgaWYgKHN0YXJ0S2V5ID09PSBlbmRLZXkpIHtcbiAgICAgIGlmIChzdGFydEVudGl0eUtleSAmJiBzdGFydEVudGl0eUtleSA9PT0gZW5kRW50aXR5S2V5KSB7XG4gICAgICAgIHZhciBfYWRqdXN0ZWRSZW1vdmFsUmFuZ2UgPSBnZXRDaGFyYWN0ZXJSZW1vdmFsUmFuZ2UoY29udGVudFN0YXRlLmdldEVudGl0eU1hcCgpLCBzdGFydEJsb2NrLCBlbmRCbG9jaywgcmFuZ2VUb1JlbW92ZSwgcmVtb3ZhbERpcmVjdGlvbik7XG4gICAgICAgIHJldHVybiByZW1vdmVSYW5nZUZyb21Db250ZW50U3RhdGUoY29udGVudFN0YXRlLCBfYWRqdXN0ZWRSZW1vdmFsUmFuZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYWRqdXN0ZWRSZW1vdmFsUmFuZ2UgPSByYW5nZVRvUmVtb3ZlO1xuICAgIGlmIChEcmFmdEZlYXR1cmVGbGFncy5kcmFmdF9zZWdtZW50ZWRfZW50aXRpZXNfYmVoYXZpb3IpIHtcbiAgICAgIC8vIEFkanVzdCB0aGUgc2VsZWN0aW9uIHRvIHByb3Blcmx5IGRlbGV0ZSBzZWdlbWVudGVkIGFuZCBpbW11dGFibGVcbiAgICAgIC8vIGVudGl0aWVzXG4gICAgICBhZGp1c3RlZFJlbW92YWxSYW5nZSA9IGdldENoYXJhY3RlclJlbW92YWxSYW5nZShjb250ZW50U3RhdGUuZ2V0RW50aXR5TWFwKCksIHN0YXJ0QmxvY2ssIGVuZEJsb2NrLCByYW5nZVRvUmVtb3ZlLCByZW1vdmFsRGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICB2YXIgd2l0aG91dEVudGl0aWVzID0gcmVtb3ZlRW50aXRpZXNBdEVkZ2VzKGNvbnRlbnRTdGF0ZSwgYWRqdXN0ZWRSZW1vdmFsUmFuZ2UpO1xuICAgIHJldHVybiByZW1vdmVSYW5nZUZyb21Db250ZW50U3RhdGUod2l0aG91dEVudGl0aWVzLCBhZGp1c3RlZFJlbW92YWxSYW5nZSk7XG4gIH0sXG5cbiAgc3BsaXRCbG9jazogZnVuY3Rpb24gc3BsaXRCbG9jayhjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlKSB7XG4gICAgdmFyIHdpdGhvdXRFbnRpdGllcyA9IHJlbW92ZUVudGl0aWVzQXRFZGdlcyhjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlKTtcbiAgICB2YXIgd2l0aG91dFRleHQgPSByZW1vdmVSYW5nZUZyb21Db250ZW50U3RhdGUod2l0aG91dEVudGl0aWVzLCBzZWxlY3Rpb25TdGF0ZSk7XG5cbiAgICByZXR1cm4gc3BsaXRCbG9ja0luQ29udGVudFN0YXRlKHdpdGhvdXRUZXh0LCB3aXRob3V0VGV4dC5nZXRTZWxlY3Rpb25BZnRlcigpKTtcbiAgfSxcblxuICBhcHBseUlubGluZVN0eWxlOiBmdW5jdGlvbiBhcHBseUlubGluZVN0eWxlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGlubGluZVN0eWxlKSB7XG4gICAgcmV0dXJuIENvbnRlbnRTdGF0ZUlubGluZVN0eWxlLmFkZChjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBpbmxpbmVTdHlsZSk7XG4gIH0sXG5cbiAgcmVtb3ZlSW5saW5lU3R5bGU6IGZ1bmN0aW9uIHJlbW92ZUlubGluZVN0eWxlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGlubGluZVN0eWxlKSB7XG4gICAgcmV0dXJuIENvbnRlbnRTdGF0ZUlubGluZVN0eWxlLnJlbW92ZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBpbmxpbmVTdHlsZSk7XG4gIH0sXG5cbiAgc2V0QmxvY2tUeXBlOiBmdW5jdGlvbiBzZXRCbG9ja1R5cGUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgYmxvY2tUeXBlKSB7XG4gICAgcmV0dXJuIG1vZGlmeUJsb2NrRm9yQ29udGVudFN0YXRlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHsgdHlwZTogYmxvY2tUeXBlLCBkZXB0aDogMCB9KTtcbiAgICB9KTtcbiAgfSxcblxuICBzZXRCbG9ja0RhdGE6IGZ1bmN0aW9uIHNldEJsb2NrRGF0YShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBibG9ja0RhdGEpIHtcbiAgICByZXR1cm4gbW9kaWZ5QmxvY2tGb3JDb250ZW50U3RhdGUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2UoeyBkYXRhOiBibG9ja0RhdGEgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgbWVyZ2VCbG9ja0RhdGE6IGZ1bmN0aW9uIG1lcmdlQmxvY2tEYXRhKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGJsb2NrRGF0YSkge1xuICAgIHJldHVybiBtb2RpZnlCbG9ja0ZvckNvbnRlbnRTdGF0ZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7IGRhdGE6IGJsb2NrLmdldERhdGEoKS5tZXJnZShibG9ja0RhdGEpIH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIGFwcGx5RW50aXR5OiBmdW5jdGlvbiBhcHBseUVudGl0eShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBlbnRpdHlLZXkpIHtcbiAgICB2YXIgd2l0aG91dEVudGl0aWVzID0gcmVtb3ZlRW50aXRpZXNBdEVkZ2VzKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUpO1xuICAgIHJldHVybiBhcHBseUVudGl0eVRvQ29udGVudFN0YXRlKHdpdGhvdXRFbnRpdGllcywgc2VsZWN0aW9uU3RhdGUsIGVudGl0eUtleSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRNb2RpZmllcjsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDaGFyYWN0ZXJNZXRhZGF0YVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpLFxuICAgIE1hcCA9IF9yZXF1aXJlLk1hcCxcbiAgICBPcmRlcmVkU2V0ID0gX3JlcXVpcmUuT3JkZXJlZFNldCxcbiAgICBSZWNvcmQgPSBfcmVxdWlyZS5SZWNvcmQ7XG5cbi8vIEltbXV0YWJsZS5tYXAgaXMgdHlwZWQgc3VjaCB0aGF0IHRoZSB2YWx1ZSBmb3IgZXZlcnkga2V5IGluIHRoZSBtYXBcbi8vIG11c3QgYmUgdGhlIHNhbWUgdHlwZVxuXG5cbnZhciBFTVBUWV9TRVQgPSBPcmRlcmVkU2V0KCk7XG5cbnZhciBkZWZhdWx0UmVjb3JkID0ge1xuICBzdHlsZTogRU1QVFlfU0VULFxuICBlbnRpdHk6IG51bGxcbn07XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YVJlY29yZCA9IFJlY29yZChkZWZhdWx0UmVjb3JkKTtcblxudmFyIENoYXJhY3Rlck1ldGFkYXRhID0gZnVuY3Rpb24gKF9DaGFyYWN0ZXJNZXRhZGF0YVJlYykge1xuICBfaW5oZXJpdHMoQ2hhcmFjdGVyTWV0YWRhdGEsIF9DaGFyYWN0ZXJNZXRhZGF0YVJlYyk7XG5cbiAgZnVuY3Rpb24gQ2hhcmFjdGVyTWV0YWRhdGEoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENoYXJhY3Rlck1ldGFkYXRhKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ2hhcmFjdGVyTWV0YWRhdGFSZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBDaGFyYWN0ZXJNZXRhZGF0YS5wcm90b3R5cGUuZ2V0U3R5bGUgPSBmdW5jdGlvbiBnZXRTdHlsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ3N0eWxlJyk7XG4gIH07XG5cbiAgQ2hhcmFjdGVyTWV0YWRhdGEucHJvdG90eXBlLmdldEVudGl0eSA9IGZ1bmN0aW9uIGdldEVudGl0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2VudGl0eScpO1xuICB9O1xuXG4gIENoYXJhY3Rlck1ldGFkYXRhLnByb3RvdHlwZS5oYXNTdHlsZSA9IGZ1bmN0aW9uIGhhc1N0eWxlKHN0eWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3R5bGUoKS5pbmNsdWRlcyhzdHlsZSk7XG4gIH07XG5cbiAgQ2hhcmFjdGVyTWV0YWRhdGEuYXBwbHlTdHlsZSA9IGZ1bmN0aW9uIGFwcGx5U3R5bGUocmVjb3JkLCBzdHlsZSkge1xuICAgIHZhciB3aXRoU3R5bGUgPSByZWNvcmQuc2V0KCdzdHlsZScsIHJlY29yZC5nZXRTdHlsZSgpLmFkZChzdHlsZSkpO1xuICAgIHJldHVybiBDaGFyYWN0ZXJNZXRhZGF0YS5jcmVhdGUod2l0aFN0eWxlKTtcbiAgfTtcblxuICBDaGFyYWN0ZXJNZXRhZGF0YS5yZW1vdmVTdHlsZSA9IGZ1bmN0aW9uIHJlbW92ZVN0eWxlKHJlY29yZCwgc3R5bGUpIHtcbiAgICB2YXIgd2l0aG91dFN0eWxlID0gcmVjb3JkLnNldCgnc3R5bGUnLCByZWNvcmQuZ2V0U3R5bGUoKS5yZW1vdmUoc3R5bGUpKTtcbiAgICByZXR1cm4gQ2hhcmFjdGVyTWV0YWRhdGEuY3JlYXRlKHdpdGhvdXRTdHlsZSk7XG4gIH07XG5cbiAgQ2hhcmFjdGVyTWV0YWRhdGEuYXBwbHlFbnRpdHkgPSBmdW5jdGlvbiBhcHBseUVudGl0eShyZWNvcmQsIGVudGl0eUtleSkge1xuICAgIHZhciB3aXRoRW50aXR5ID0gcmVjb3JkLmdldEVudGl0eSgpID09PSBlbnRpdHlLZXkgPyByZWNvcmQgOiByZWNvcmQuc2V0KCdlbnRpdHknLCBlbnRpdHlLZXkpO1xuICAgIHJldHVybiBDaGFyYWN0ZXJNZXRhZGF0YS5jcmVhdGUod2l0aEVudGl0eSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFVzZSB0aGlzIGZ1bmN0aW9uIGluc3RlYWQgb2YgdGhlIGBDaGFyYWN0ZXJNZXRhZGF0YWAgY29uc3RydWN0b3IuXG4gICAqIFNpbmNlIG1vc3QgY29udGVudCBnZW5lcmFsbHkgdXNlcyBvbmx5IGEgdmVyeSBzbWFsbCBudW1iZXIgb2ZcbiAgICogc3R5bGUvZW50aXR5IHBlcm11dGF0aW9ucywgd2UgY2FuIHJldXNlIHRoZXNlIG9iamVjdHMgYXMgb2Z0ZW4gYXNcbiAgICogcG9zc2libGUuXG4gICAqL1xuXG5cbiAgQ2hhcmFjdGVyTWV0YWRhdGEuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGNvbmZpZykge1xuICAgIGlmICghY29uZmlnKSB7XG4gICAgICByZXR1cm4gRU1QVFk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRDb25maWcgPSB7XG4gICAgICBzdHlsZTogRU1QVFlfU0VULFxuICAgICAgZW50aXR5OiBudWxsXG4gICAgfTtcblxuICAgIC8vIEZpbGwgaW4gdW5zcGVjaWZpZWQgcHJvcGVydGllcywgaWYgbmVjZXNzYXJ5LlxuICAgIHZhciBjb25maWdNYXAgPSBNYXAoZGVmYXVsdENvbmZpZykubWVyZ2UoY29uZmlnKTtcblxuICAgIHZhciBleGlzdGluZyA9IHBvb2wuZ2V0KGNvbmZpZ01hcCk7XG4gICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgfVxuXG4gICAgdmFyIG5ld0NoYXJhY3RlciA9IG5ldyBDaGFyYWN0ZXJNZXRhZGF0YShjb25maWdNYXApO1xuICAgIHBvb2wgPSBwb29sLnNldChjb25maWdNYXAsIG5ld0NoYXJhY3Rlcik7XG4gICAgcmV0dXJuIG5ld0NoYXJhY3RlcjtcbiAgfTtcblxuICByZXR1cm4gQ2hhcmFjdGVyTWV0YWRhdGE7XG59KENoYXJhY3Rlck1ldGFkYXRhUmVjb3JkKTtcblxudmFyIEVNUFRZID0gbmV3IENoYXJhY3Rlck1ldGFkYXRhKCk7XG52YXIgcG9vbCA9IE1hcChbW01hcChkZWZhdWx0UmVjb3JkKSwgRU1QVFldXSk7XG5cbkNoYXJhY3Rlck1ldGFkYXRhLkVNUFRZID0gRU1QVFk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhcmFjdGVyTWV0YWRhdGE7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDb250ZW50QmxvY2tOb2RlXG4gKiBAZm9ybWF0XG4gKiBcbiAqXG4gKiBUaGlzIGZpbGUgaXMgYSBmb3JrIG9mIENvbnRlbnRCbG9jayBhZGRpbmcgc3VwcG9ydCBmb3IgbmVzdGluZyByZWZlcmVuY2VzIGJ5XG4gKiBwcm92aWRpbmcgbGlua3MgdG8gY2hpbGRyZW4sIHBhcmVudCwgcHJldlNpYmxpbmcsIGFuZCBuZXh0U2libGluZy5cbiAqXG4gKiBUaGlzIGlzIHVuc3RhYmxlIGFuZCBub3QgcGFydCBvZiB0aGUgcHVibGljIEFQSSBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkIGJ5XG4gKiBwcm9kdWN0aW9uIHN5c3RlbXMuIFRoaXMgZmlsZSBtYXkgYmUgdXBkYXRlL3JlbW92ZWQgd2l0aG91dCBub3RpY2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyTWV0YWRhdGEnKTtcbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIGZpbmRSYW5nZXNJbW11dGFibGUgPSByZXF1aXJlKCcuL2ZpbmRSYW5nZXNJbW11dGFibGUnKTtcblxudmFyIExpc3QgPSBJbW11dGFibGUuTGlzdCxcbiAgICBNYXAgPSBJbW11dGFibGUuTWFwLFxuICAgIE9yZGVyZWRTZXQgPSBJbW11dGFibGUuT3JkZXJlZFNldCxcbiAgICBSZWNvcmQgPSBJbW11dGFibGUuUmVjb3JkLFxuICAgIFJlcGVhdCA9IEltbXV0YWJsZS5SZXBlYXQ7XG5cblxudmFyIEVNUFRZX1NFVCA9IE9yZGVyZWRTZXQoKTtcblxudmFyIGRlZmF1bHRSZWNvcmQgPSB7XG4gIHBhcmVudDogbnVsbCxcbiAgY2hhcmFjdGVyTGlzdDogTGlzdCgpLFxuICBkYXRhOiBNYXAoKSxcbiAgZGVwdGg6IDAsXG4gIGtleTogJycsXG4gIHRleHQ6ICcnLFxuICB0eXBlOiAndW5zdHlsZWQnLFxuICBjaGlsZHJlbjogTGlzdCgpLFxuICBwcmV2U2libGluZzogbnVsbCxcbiAgbmV4dFNpYmxpbmc6IG51bGxcbn07XG5cbnZhciBoYXZlRXF1YWxTdHlsZSA9IGZ1bmN0aW9uIGhhdmVFcXVhbFN0eWxlKGNoYXJBLCBjaGFyQikge1xuICByZXR1cm4gY2hhckEuZ2V0U3R5bGUoKSA9PT0gY2hhckIuZ2V0U3R5bGUoKTtcbn07XG5cbnZhciBoYXZlRXF1YWxFbnRpdHkgPSBmdW5jdGlvbiBoYXZlRXF1YWxFbnRpdHkoY2hhckEsIGNoYXJCKSB7XG4gIHJldHVybiBjaGFyQS5nZXRFbnRpdHkoKSA9PT0gY2hhckIuZ2V0RW50aXR5KCk7XG59O1xuXG52YXIgZGVjb3JhdGVDaGFyYWN0ZXJMaXN0ID0gZnVuY3Rpb24gZGVjb3JhdGVDaGFyYWN0ZXJMaXN0KGNvbmZpZykge1xuICBpZiAoIWNvbmZpZykge1xuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICB2YXIgY2hhcmFjdGVyTGlzdCA9IGNvbmZpZy5jaGFyYWN0ZXJMaXN0LFxuICAgICAgdGV4dCA9IGNvbmZpZy50ZXh0O1xuXG5cbiAgaWYgKHRleHQgJiYgIWNoYXJhY3Rlckxpc3QpIHtcbiAgICBjb25maWcuY2hhcmFjdGVyTGlzdCA9IExpc3QoUmVwZWF0KENoYXJhY3Rlck1ldGFkYXRhLkVNUFRZLCB0ZXh0Lmxlbmd0aCkpO1xuICB9XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG5cbnZhciBDb250ZW50QmxvY2tOb2RlID0gZnVuY3Rpb24gKF9SZWNvcmQpIHtcbiAgX2luaGVyaXRzKENvbnRlbnRCbG9ja05vZGUsIF9SZWNvcmQpO1xuXG4gIGZ1bmN0aW9uIENvbnRlbnRCbG9ja05vZGUoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkZWZhdWx0UmVjb3JkO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRlbnRCbG9ja05vZGUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWNvcmQuY2FsbCh0aGlzLCBkZWNvcmF0ZUNoYXJhY3Rlckxpc3QocHJvcHMpKSk7XG4gIH1cblxuICBDb250ZW50QmxvY2tOb2RlLnByb3RvdHlwZS5nZXRLZXkgPSBmdW5jdGlvbiBnZXRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdrZXknKTtcbiAgfTtcblxuICBDb250ZW50QmxvY2tOb2RlLnByb3RvdHlwZS5nZXRUeXBlID0gZnVuY3Rpb24gZ2V0VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ3R5cGUnKTtcbiAgfTtcblxuICBDb250ZW50QmxvY2tOb2RlLnByb3RvdHlwZS5nZXRUZXh0ID0gZnVuY3Rpb24gZ2V0VGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ3RleHQnKTtcbiAgfTtcblxuICBDb250ZW50QmxvY2tOb2RlLnByb3RvdHlwZS5nZXRDaGFyYWN0ZXJMaXN0ID0gZnVuY3Rpb24gZ2V0Q2hhcmFjdGVyTGlzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2NoYXJhY3Rlckxpc3QnKTtcbiAgfTtcblxuICBDb250ZW50QmxvY2tOb2RlLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiBnZXRMZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGV4dCgpLmxlbmd0aDtcbiAgfTtcblxuICBDb250ZW50QmxvY2tOb2RlLnByb3RvdHlwZS5nZXREZXB0aCA9IGZ1bmN0aW9uIGdldERlcHRoKCkge1xuICAgIHJldHVybiB0aGlzLmdldCgnZGVwdGgnKTtcbiAgfTtcblxuICBDb250ZW50QmxvY2tOb2RlLnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2RhdGEnKTtcbiAgfTtcblxuICBDb250ZW50QmxvY2tOb2RlLnByb3RvdHlwZS5nZXRJbmxpbmVTdHlsZUF0ID0gZnVuY3Rpb24gZ2V0SW5saW5lU3R5bGVBdChvZmZzZXQpIHtcbiAgICB2YXIgY2hhcmFjdGVyID0gdGhpcy5nZXRDaGFyYWN0ZXJMaXN0KCkuZ2V0KG9mZnNldCk7XG4gICAgcmV0dXJuIGNoYXJhY3RlciA/IGNoYXJhY3Rlci5nZXRTdHlsZSgpIDogRU1QVFlfU0VUO1xuICB9O1xuXG4gIENvbnRlbnRCbG9ja05vZGUucHJvdG90eXBlLmdldEVudGl0eUF0ID0gZnVuY3Rpb24gZ2V0RW50aXR5QXQob2Zmc2V0KSB7XG4gICAgdmFyIGNoYXJhY3RlciA9IHRoaXMuZ2V0Q2hhcmFjdGVyTGlzdCgpLmdldChvZmZzZXQpO1xuICAgIHJldHVybiBjaGFyYWN0ZXIgPyBjaGFyYWN0ZXIuZ2V0RW50aXR5KCkgOiBudWxsO1xuICB9O1xuXG4gIENvbnRlbnRCbG9ja05vZGUucHJvdG90eXBlLmdldENoaWxkS2V5cyA9IGZ1bmN0aW9uIGdldENoaWxkS2V5cygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2NoaWxkcmVuJyk7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrTm9kZS5wcm90b3R5cGUuZ2V0UGFyZW50S2V5ID0gZnVuY3Rpb24gZ2V0UGFyZW50S2V5KCkge1xuICAgIHJldHVybiB0aGlzLmdldCgncGFyZW50Jyk7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrTm9kZS5wcm90b3R5cGUuZ2V0UHJldlNpYmxpbmdLZXkgPSBmdW5jdGlvbiBnZXRQcmV2U2libGluZ0tleSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ3ByZXZTaWJsaW5nJyk7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrTm9kZS5wcm90b3R5cGUuZ2V0TmV4dFNpYmxpbmdLZXkgPSBmdW5jdGlvbiBnZXROZXh0U2libGluZ0tleSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ25leHRTaWJsaW5nJyk7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrTm9kZS5wcm90b3R5cGUuZmluZFN0eWxlUmFuZ2VzID0gZnVuY3Rpb24gZmluZFN0eWxlUmFuZ2VzKGZpbHRlckZuLCBjYWxsYmFjaykge1xuICAgIGZpbmRSYW5nZXNJbW11dGFibGUodGhpcy5nZXRDaGFyYWN0ZXJMaXN0KCksIGhhdmVFcXVhbFN0eWxlLCBmaWx0ZXJGbiwgY2FsbGJhY2spO1xuICB9O1xuXG4gIENvbnRlbnRCbG9ja05vZGUucHJvdG90eXBlLmZpbmRFbnRpdHlSYW5nZXMgPSBmdW5jdGlvbiBmaW5kRW50aXR5UmFuZ2VzKGZpbHRlckZuLCBjYWxsYmFjaykge1xuICAgIGZpbmRSYW5nZXNJbW11dGFibGUodGhpcy5nZXRDaGFyYWN0ZXJMaXN0KCksIGhhdmVFcXVhbEVudGl0eSwgZmlsdGVyRm4sIGNhbGxiYWNrKTtcbiAgfTtcblxuICByZXR1cm4gQ29udGVudEJsb2NrTm9kZTtcbn0oUmVjb3JkKGRlZmF1bHRSZWNvcmQpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb250ZW50QmxvY2tOb2RlOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG52YXIgbnVsbHRocm93cyA9IGZ1bmN0aW9uIG51bGx0aHJvd3MoeCkge1xuICBpZiAoeCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiR290IHVuZXhwZWN0ZWQgbnVsbCBvciB1bmRlZmluZWRcIik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG51bGx0aHJvd3M7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVXNlckFnZW50RGF0YSA9IHJlcXVpcmUoJy4vVXNlckFnZW50RGF0YScpO1xudmFyIFZlcnNpb25SYW5nZSA9IHJlcXVpcmUoJy4vVmVyc2lvblJhbmdlJyk7XG5cbnZhciBtYXBPYmplY3QgPSByZXF1aXJlKCcuL21hcE9iamVjdCcpO1xudmFyIG1lbW9pemVTdHJpbmdPbmx5ID0gcmVxdWlyZSgnLi9tZW1vaXplU3RyaW5nT25seScpO1xuXG4vKipcbiAqIENoZWNrcyB0byBzZWUgd2hldGhlciBgbmFtZWAgYW5kIGB2ZXJzaW9uYCBzYXRpc2Z5IGBxdWVyeWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgYnJvd3NlciwgZGV2aWNlLCBlbmdpbmUgb3IgcGxhdGZvcm1cbiAqIEBwYXJhbSB7P3N0cmluZ30gdmVyc2lvbiBWZXJzaW9uIG9mIHRoZSBicm93c2VyLCBlbmdpbmUgb3IgcGxhdGZvcm1cbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSBRdWVyeSBvZiBmb3JtIFwiTmFtZSBbcmFuZ2UgZXhwcmVzc2lvbl1cIlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IG5vcm1hbGl6ZXIgT3B0aW9uYWwgcHJlLXByb2Nlc3NvciBmb3IgcmFuZ2UgZXhwcmVzc2lvblxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY29tcGFyZShuYW1lLCB2ZXJzaW9uLCBxdWVyeSwgbm9ybWFsaXplcikge1xuICAvLyBjaGVjayBmb3IgZXhhY3QgbWF0Y2ggd2l0aCBubyB2ZXJzaW9uXG4gIGlmIChuYW1lID09PSBxdWVyeSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gY2hlY2sgZm9yIG5vbi1tYXRjaGluZyBuYW1lc1xuICBpZiAoIXF1ZXJ5LnN0YXJ0c1dpdGgobmFtZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBmdWxsIGNvbXBhcmlzb24gd2l0aCB2ZXJzaW9uXG4gIHZhciByYW5nZSA9IHF1ZXJ5LnNsaWNlKG5hbWUubGVuZ3RoKTtcbiAgaWYgKHZlcnNpb24pIHtcbiAgICByYW5nZSA9IG5vcm1hbGl6ZXIgPyBub3JtYWxpemVyKHJhbmdlKSA6IHJhbmdlO1xuICAgIHJldHVybiBWZXJzaW9uUmFuZ2UuY29udGFpbnMocmFuZ2UsIHZlcnNpb24pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZXMgYHZlcnNpb25gIGJ5IHN0cmlwcGluZyBhbnkgXCJOVFwiIHByZWZpeCwgYnV0IG9ubHkgb24gdGhlIFdpbmRvd3NcbiAqIHBsYXRmb3JtLlxuICpcbiAqIE1pbWljcyB0aGUgc3RyaXBwaW5nIHBlcmZvcm1lZCBieSB0aGUgYFVzZXJBZ2VudFdpbmRvd3NQbGF0Zm9ybWAgUEhQIGNsYXNzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBsYXRmb3JtVmVyc2lvbih2ZXJzaW9uKSB7XG4gIGlmIChVc2VyQWdlbnREYXRhLnBsYXRmb3JtTmFtZSA9PT0gJ1dpbmRvd3MnKSB7XG4gICAgcmV0dXJuIHZlcnNpb24ucmVwbGFjZSgvXlxccypOVC8sICcnKTtcbiAgfVxuXG4gIHJldHVybiB2ZXJzaW9uO1xufVxuXG4vKipcbiAqIFByb3ZpZGVzIGNsaWVudC1zaWRlIGFjY2VzcyB0byB0aGUgYXV0aG9yaXRhdGl2ZSBQSFAtZ2VuZXJhdGVkIFVzZXIgQWdlbnRcbiAqIGluZm9ybWF0aW9uIHN1cHBsaWVkIGJ5IHRoZSBzZXJ2ZXIuXG4gKi9cbnZhciBVc2VyQWdlbnQgPSB7XG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgVXNlciBBZ2VudCBicm93c2VyIG1hdGNoZXMgYHF1ZXJ5YC5cbiAgICpcbiAgICogYHF1ZXJ5YCBzaG91bGQgYmUgYSBzdHJpbmcgbGlrZSBcIkNocm9tZVwiIG9yIFwiQ2hyb21lID4gMzNcIi5cbiAgICpcbiAgICogVmFsaWQgYnJvd3NlciBuYW1lcyBpbmNsdWRlOlxuICAgKlxuICAgKiAtIEFDQ0VTUyBOZXRGcm9udFxuICAgKiAtIEFPTFxuICAgKiAtIEFtYXpvbiBTaWxrXG4gICAqIC0gQW5kcm9pZFxuICAgKiAtIEJsYWNrQmVycnlcbiAgICogLSBCbGFja0JlcnJ5IFBsYXlCb29rXG4gICAqIC0gQ2hyb21lXG4gICAqIC0gQ2hyb21lIGZvciBpT1NcbiAgICogLSBDaHJvbWUgZnJhbWVcbiAgICogLSBGYWNlYm9vayBQSFAgU0RLXG4gICAqIC0gRmFjZWJvb2sgZm9yIGlPU1xuICAgKiAtIEZpcmVmb3hcbiAgICogLSBJRVxuICAgKiAtIElFIE1vYmlsZVxuICAgKiAtIE1vYmlsZSBTYWZhcmlcbiAgICogLSBNb3Rvcm9sYSBJbnRlcm5ldCBCcm93c2VyXG4gICAqIC0gTm9raWFcbiAgICogLSBPcGVud2F2ZSBNb2JpbGUgQnJvd3NlclxuICAgKiAtIE9wZXJhXG4gICAqIC0gT3BlcmEgTWluaVxuICAgKiAtIE9wZXJhIE1vYmlsZVxuICAgKiAtIFNhZmFyaVxuICAgKiAtIFVJV2ViVmlld1xuICAgKiAtIFVua25vd25cbiAgICogLSB3ZWJPU1xuICAgKiAtIGV0Yy4uLlxuICAgKlxuICAgKiBBbiBhdXRob3JpdGF0aXZlIGxpc3QgY2FuIGJlIGZvdW5kIGluIHRoZSBQSFAgYEJyb3dzZXJEZXRlY3RvcmAgY2xhc3MgYW5kXG4gICAqIHJlbGF0ZWQgY2xhc3NlcyBpbiB0aGUgc2FtZSBmaWxlIChzZWUgY2FsbHMgdG8gYG5ldyBVc2VyQWdlbnRCcm93c2VyYCBoZXJlOlxuICAgKiBodHRwczovL2ZidXJsLmNvbS81MDcyODEwNCkuXG4gICAqXG4gICAqIEBub3RlIEZ1bmN0aW9uIHJlc3VsdHMgYXJlIG1lbW9pemVkXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSBRdWVyeSBvZiB0aGUgZm9ybSBcIk5hbWUgW3JhbmdlIGV4cHJlc3Npb25dXCJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQnJvd3NlcjogZnVuY3Rpb24gaXNCcm93c2VyKHF1ZXJ5KSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoVXNlckFnZW50RGF0YS5icm93c2VyTmFtZSwgVXNlckFnZW50RGF0YS5icm93c2VyRnVsbFZlcnNpb24sIHF1ZXJ5KTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgVXNlciBBZ2VudCBicm93c2VyIHVzZXMgYSAzMiBvciA2NCBiaXQgYXJjaGl0ZWN0dXJlLlxuICAgKlxuICAgKiBAbm90ZSBGdW5jdGlvbiByZXN1bHRzIGFyZSBtZW1vaXplZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkgUXVlcnkgb2YgdGhlIGZvcm0gXCIzMlwiIG9yIFwiNjRcIi5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQnJvd3NlckFyY2hpdGVjdHVyZTogZnVuY3Rpb24gaXNCcm93c2VyQXJjaGl0ZWN0dXJlKHF1ZXJ5KSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoVXNlckFnZW50RGF0YS5icm93c2VyQXJjaGl0ZWN0dXJlLCBudWxsLCBxdWVyeSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIFVzZXIgQWdlbnQgZGV2aWNlIG1hdGNoZXMgYHF1ZXJ5YC5cbiAgICpcbiAgICogYHF1ZXJ5YCBzaG91bGQgYmUgYSBzdHJpbmcgbGlrZSBcImlQaG9uZVwiIG9yIFwiaVBhZFwiLlxuICAgKlxuICAgKiBWYWxpZCBkZXZpY2UgbmFtZXMgaW5jbHVkZTpcbiAgICpcbiAgICogLSBLaW5kbGVcbiAgICogLSBLaW5kbGUgRmlyZVxuICAgKiAtIFVua25vd25cbiAgICogLSBpUGFkXG4gICAqIC0gaVBob25lXG4gICAqIC0gaVBvZFxuICAgKiAtIGV0Yy4uLlxuICAgKlxuICAgKiBBbiBhdXRob3JpdGF0aXZlIGxpc3QgY2FuIGJlIGZvdW5kIGluIHRoZSBQSFAgYERldmljZURldGVjdG9yYCBjbGFzcyBhbmRcbiAgICogcmVsYXRlZCBjbGFzc2VzIGluIHRoZSBzYW1lIGZpbGUgKHNlZSBjYWxscyB0byBgbmV3IFVzZXJBZ2VudERldmljZWAgaGVyZTpcbiAgICogaHR0cHM6Ly9mYnVybC5jb20vNTA3MjgzMzIpLlxuICAgKlxuICAgKiBAbm90ZSBGdW5jdGlvbiByZXN1bHRzIGFyZSBtZW1vaXplZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkgUXVlcnkgb2YgdGhlIGZvcm0gXCJOYW1lXCJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzRGV2aWNlOiBmdW5jdGlvbiBpc0RldmljZShxdWVyeSkge1xuICAgIHJldHVybiBjb21wYXJlKFVzZXJBZ2VudERhdGEuZGV2aWNlTmFtZSwgbnVsbCwgcXVlcnkpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBVc2VyIEFnZW50IHJlbmRlcmluZyBlbmdpbmUgbWF0Y2hlcyBgcXVlcnlgLlxuICAgKlxuICAgKiBgcXVlcnlgIHNob3VsZCBiZSBhIHN0cmluZyBsaWtlIFwiV2ViS2l0XCIgb3IgXCJXZWJLaXQgPj0gNTM3XCIuXG4gICAqXG4gICAqIFZhbGlkIGVuZ2luZSBuYW1lcyBpbmNsdWRlOlxuICAgKlxuICAgKiAtIEdlY2tvXG4gICAqIC0gUHJlc3RvXG4gICAqIC0gVHJpZGVudFxuICAgKiAtIFdlYktpdFxuICAgKiAtIGV0Yy4uLlxuICAgKlxuICAgKiBBbiBhdXRob3JpdGF0aXZlIGxpc3QgY2FuIGJlIGZvdW5kIGluIHRoZSBQSFAgYFJlbmRlcmluZ0VuZ2luZURldGVjdG9yYFxuICAgKiBjbGFzcyByZWxhdGVkIGNsYXNzZXMgaW4gdGhlIHNhbWUgZmlsZSAoc2VlIGNhbGxzIHRvIGBuZXdcbiAgICogVXNlckFnZW50UmVuZGVyaW5nRW5naW5lYCBoZXJlOiBodHRwczovL2ZidXJsLmNvbS81MDcyODYxNykuXG4gICAqXG4gICAqIEBub3RlIEZ1bmN0aW9uIHJlc3VsdHMgYXJlIG1lbW9pemVkXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSBRdWVyeSBvZiB0aGUgZm9ybSBcIk5hbWUgW3JhbmdlIGV4cHJlc3Npb25dXCJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzRW5naW5lOiBmdW5jdGlvbiBpc0VuZ2luZShxdWVyeSkge1xuICAgIHJldHVybiBjb21wYXJlKFVzZXJBZ2VudERhdGEuZW5naW5lTmFtZSwgVXNlckFnZW50RGF0YS5lbmdpbmVWZXJzaW9uLCBxdWVyeSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIFVzZXIgQWdlbnQgcGxhdGZvcm0gbWF0Y2hlcyBgcXVlcnlgLlxuICAgKlxuICAgKiBgcXVlcnlgIHNob3VsZCBiZSBhIHN0cmluZyBsaWtlIFwiV2luZG93c1wiIG9yIFwiaU9TIDUgLSA2XCIuXG4gICAqXG4gICAqIFZhbGlkIHBsYXRmb3JtIG5hbWVzIGluY2x1ZGU6XG4gICAqXG4gICAqIC0gQW5kcm9pZFxuICAgKiAtIEJsYWNrQmVycnkgT1NcbiAgICogLSBKYXZhIE1FXG4gICAqIC0gTGludXhcbiAgICogLSBNYWMgT1MgWFxuICAgKiAtIE1hYyBPUyBYIENhbGVuZGFyXG4gICAqIC0gTWFjIE9TIFggSW50ZXJuZXQgQWNjb3VudFxuICAgKiAtIFN5bWJpYW5cbiAgICogLSBTeW1iaWFuT1NcbiAgICogLSBXaW5kb3dzXG4gICAqIC0gV2luZG93cyBNb2JpbGVcbiAgICogLSBXaW5kb3dzIFBob25lXG4gICAqIC0gaU9TXG4gICAqIC0gaU9TIEZhY2Vib29rIEludGVncmF0aW9uIEFjY291bnRcbiAgICogLSBpT1MgRmFjZWJvb2sgU29jaWFsIFNoYXJpbmcgVUlcbiAgICogLSB3ZWJPU1xuICAgKiAtIENocm9tZSBPU1xuICAgKiAtIGV0Yy4uLlxuICAgKlxuICAgKiBBbiBhdXRob3JpdGF0aXZlIGxpc3QgY2FuIGJlIGZvdW5kIGluIHRoZSBQSFAgYFBsYXRmb3JtRGV0ZWN0b3JgIGNsYXNzIGFuZFxuICAgKiByZWxhdGVkIGNsYXNzZXMgaW4gdGhlIHNhbWUgZmlsZSAoc2VlIGNhbGxzIHRvIGBuZXcgVXNlckFnZW50UGxhdGZvcm1gXG4gICAqIGhlcmU6IGh0dHBzOi8vZmJ1cmwuY29tLzUwNzI5MjI2KS5cbiAgICpcbiAgICogQG5vdGUgRnVuY3Rpb24gcmVzdWx0cyBhcmUgbWVtb2l6ZWRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IFF1ZXJ5IG9mIHRoZSBmb3JtIFwiTmFtZSBbcmFuZ2UgZXhwcmVzc2lvbl1cIlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNQbGF0Zm9ybTogZnVuY3Rpb24gaXNQbGF0Zm9ybShxdWVyeSkge1xuICAgIHJldHVybiBjb21wYXJlKFVzZXJBZ2VudERhdGEucGxhdGZvcm1OYW1lLCBVc2VyQWdlbnREYXRhLnBsYXRmb3JtRnVsbFZlcnNpb24sIHF1ZXJ5LCBub3JtYWxpemVQbGF0Zm9ybVZlcnNpb24pO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBVc2VyIEFnZW50IHBsYXRmb3JtIGlzIGEgMzIgb3IgNjQgYml0IGFyY2hpdGVjdHVyZS5cbiAgICpcbiAgICogQG5vdGUgRnVuY3Rpb24gcmVzdWx0cyBhcmUgbWVtb2l6ZWRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IFF1ZXJ5IG9mIHRoZSBmb3JtIFwiMzJcIiBvciBcIjY0XCIuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc1BsYXRmb3JtQXJjaGl0ZWN0dXJlOiBmdW5jdGlvbiBpc1BsYXRmb3JtQXJjaGl0ZWN0dXJlKHF1ZXJ5KSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoVXNlckFnZW50RGF0YS5wbGF0Zm9ybUFyY2hpdGVjdHVyZSwgbnVsbCwgcXVlcnkpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcE9iamVjdChVc2VyQWdlbnQsIG1lbW9pemVTdHJpbmdPbmx5KTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyLCBSb3V0ZSwgU3dpdGNoLCBMaW5rLCBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmZ1bmN0aW9uIEZvb3Rlcihwcm9wcykge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxmb290ZXI+XG4gICAgICAgIDxoMT5UaGUgTmV4dCBTdGVwPC9oMT5cbiAgICAgICAgPHA+VGVjaCBKb2JzIEZvciBUZWNoIFBlb3BsZTwvcD5cbiAgICAgICAgICAgIFxuICAgICAgICA8L2Zvb3Rlcj5cbiAgICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBGb290ZXI7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgQnJvd3NlclJvdXRlciwgUm91dGUsIFN3aXRjaCwgTGluaywgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5jbGFzcyBIZWFkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Jlc3BvbnNlVG9rZW4nKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdG9rZW46IHRva2VuLFxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxoZWFkZXI+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImhlYWRlci1pbm5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiaGVhZGVyLXRpdGxlLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxPlRoZSBOZXh0IFN0ZXA8L2gxPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPG5hdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPVwiL1wiIGFjdGl2ZUNsYXNzTmFtZT1cImlzLWFjdGl2ZVwiIGV4YWN0PXt0cnVlfT5Ib21lIDwvTmF2TGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPVwiL2NvbnRhY3RcIiBhY3RpdmVDbGFzc05hbWU9XCJpcy1hY3RpdmVcIiBleGFjdD17dHJ1ZX0+Q29udGFjdCA8L05hdkxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS50b2tlbiA/IDxOYXZMaW5rIHRvPVwiL2VtcGxveWVyX2Rhc2hib2FyZFwiIGFjdGl2ZUNsYXNzTmFtZT1cImlzLWFjdGl2ZVwiIGV4YWN0PXt0cnVlfT5FbXBsb3llciBEYXNoYm9hcmQgPC9OYXZMaW5rPiA6IDxOYXZMaW5rIHRvPVwiL215X2FjY291bnRcIiBhY3RpdmVDbGFzc05hbWU9XCJpcy1hY3RpdmVcIiBleGFjdD17dHJ1ZX0+TG9naW4vUmVnaXN0ZXIgPC9OYXZMaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPC9uYXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2hlYWRlcj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhlYWRlcjsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgYWRkTGVhZGluZ1NsYXNoID0gZXhwb3J0cy5hZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufTtcblxudmFyIHN0cmlwTGVhZGluZ1NsYXNoID0gZXhwb3J0cy5zdHJpcExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59O1xuXG52YXIgaGFzQmFzZW5hbWUgPSBleHBvcnRzLmhhc0Jhc2VuYW1lID0gZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn07XG5cbnZhciBzdHJpcEJhc2VuYW1lID0gZXhwb3J0cy5zdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59O1xuXG52YXIgc3RyaXBUcmFpbGluZ1NsYXNoID0gZXhwb3J0cy5zdHJpcFRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufTtcblxudmFyIHBhcnNlUGF0aCA9IGV4cG9ydHMucGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG52YXIgY3JlYXRlUGF0aCA9IGV4cG9ydHMuY3JlYXRlUGF0aCA9IGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcblxuXG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogJz8nICsgc2VhcmNoO1xuXG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6ICcjJyArIGhhc2g7XG5cbiAgcmV0dXJuIHBhdGg7XG59OyIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdlbmVyYXRlUmFuZG9tS2V5XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzZWVuS2V5cyA9IHt9O1xudmFyIE1VTFRJUExJRVIgPSBNYXRoLnBvdygyLCAyNCk7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tS2V5KCkge1xuICB2YXIga2V5ID0gdm9pZCAwO1xuICB3aGlsZSAoa2V5ID09PSB1bmRlZmluZWQgfHwgc2VlbktleXMuaGFzT3duUHJvcGVydHkoa2V5KSB8fCAhaXNOYU4oK2tleSkpIHtcbiAgICBrZXkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNVUxUSVBMSUVSKS50b1N0cmluZygzMik7XG4gIH1cbiAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gIHJldHVybiBrZXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2VuZXJhdGVSYW5kb21LZXk7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiAnLycsXG4gICAgICB1cmw6ICcvJyxcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gJy8nXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgaGlzdG9yeSA9IF9wcm9wcy5oaXN0b3J5O1xuXG5cbiAgICBpbnZhcmlhbnQoY2hpbGRyZW4gPT0gbnVsbCB8fCBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDEsICdBIDxSb3V0ZXI+IG1heSBoYXZlIG9ubHkgb25lIGNoaWxkIGVsZW1lbnQnKTtcblxuICAgIC8vIERvIHRoaXMgaGVyZSBzbyB3ZSBjYW4gc2V0U3RhdGUgd2hlbiBhIDxSZWRpcmVjdD4gY2hhbmdlcyB0aGVcbiAgICAvLyBsb2NhdGlvbiBpbiBjb21wb25lbnRXaWxsTW91bnQuIFRoaXMgaGFwcGVucyBlLmcuIHdoZW4gZG9pbmdcbiAgICAvLyBzZXJ2ZXIgcmVuZGVyaW5nIHVzaW5nIGEgPFN0YXRpY1JvdXRlcj4uXG4gICAgdGhpcy51bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgIG1hdGNoOiBfdGhpczIuY29tcHV0ZU1hdGNoKGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcodGhpcy5wcm9wcy5oaXN0b3J5ID09PSBuZXh0UHJvcHMuaGlzdG9yeSwgJ1lvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT4nKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICByZXR1cm4gY2hpbGRyZW4gPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5Sb3V0ZXIuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlciBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvUm91dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjcmVhdGVIaXN0b3J5IGZyb20gJ2hpc3RvcnkvY3JlYXRlQnJvd3Nlckhpc3RvcnknO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJyb3dzZXJSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCAnPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksICcgKyAndXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuJyk7XG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ccm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBCcm93c2VyUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjcmVhdGVIaXN0b3J5IGZyb20gJ2hpc3RvcnkvY3JlYXRlSGFzaEhpc3RvcnknO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG5cbnZhciBIYXNoUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIYXNoUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgJzxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ2hhc2hiYW5nJywgJ25vc2xhc2gnLCAnc2xhc2gnXSksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBIYXNoUm91dGVyOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxudmFyIGlzTW9kaWZpZWRFdmVudCA9IGZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG52YXIgTGluayA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMaW5rLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaW5rKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGluayk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsaWNrKSBfdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAvLyBpZ25vcmUgcmlnaHQgY2xpY2tzXG4gICAgICAhX3RoaXMucHJvcHMudGFyZ2V0ICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIHZhciBoaXN0b3J5ID0gX3RoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcbiAgICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgcmVwbGFjZSA9IF90aGlzJHByb3BzLnJlcGxhY2UsXG4gICAgICAgICAgICAgIHRvID0gX3RoaXMkcHJvcHMudG87XG5cblxuICAgICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTGluay5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICByZXBsYWNlID0gX3Byb3BzLnJlcGxhY2UsXG4gICAgICAgIHRvID0gX3Byb3BzLnRvLFxuICAgICAgICBpbm5lclJlZiA9IF9wcm9wcy5pbm5lclJlZixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3JlcGxhY2UnLCAndG8nLCAnaW5uZXJSZWYnXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcblxuICAgIHZhciBocmVmID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5LmNyZWF0ZUhyZWYodHlwZW9mIHRvID09PSAnc3RyaW5nJyA/IHsgcGF0aG5hbWU6IHRvIH0gOiB0byk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnYScsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrLCBocmVmOiBocmVmLCByZWY6IGlubmVyUmVmIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTGluaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTGluay5wcm9wVHlwZXMgPSB7XG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWQsXG4gIGlubmVyUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pXG59O1xuTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIHJlcGxhY2U6IGZhbHNlXG59O1xuTGluay5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJlcGxhY2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBjcmVhdGVIcmVmOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IExpbms7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUhpc3RvcnkgZnJvbSAnaGlzdG9yeS9jcmVhdGVNZW1vcnlIaXN0b3J5JztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVtb3J5Um91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCAnPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgJyArICd1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IE1lbW9yeVJvdXRlciBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyOyIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZVBhdGggPSBmdW5jdGlvbiBjb21waWxlUGF0aChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9ICcnICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgY2FjaGUgPSBwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldIHx8IChwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldID0ge30pO1xuXG4gIGlmIChjYWNoZVtwYXR0ZXJuXSkgcmV0dXJuIGNhY2hlW3BhdHRlcm5dO1xuXG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZSA9IHBhdGhUb1JlZ2V4cChwYXR0ZXJuLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIGNvbXBpbGVkUGF0dGVybiA9IHsgcmU6IHJlLCBrZXlzOiBrZXlzIH07XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0dGVybl0gPSBjb21waWxlZFBhdHRlcm47XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBpbGVkUGF0dGVybjtcbn07XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoIHBhdHRlcm4uXG4gKi9cbnZhciBtYXRjaFBhdGggPSBmdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIG9wdGlvbnMgPSB7IHBhdGg6IG9wdGlvbnMgfTtcblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBwYXRoID0gX29wdGlvbnMkcGF0aCA9PT0gdW5kZWZpbmVkID8gJy8nIDogX29wdGlvbnMkcGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG5cbiAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoKHBhdGgsIHsgZW5kOiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pLFxuICAgICAgcmUgPSBfY29tcGlsZVBhdGgucmUsXG4gICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgdmFyIG1hdGNoID0gcmUuZXhlYyhwYXRobmFtZSk7XG5cbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG5cbiAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuXG4gIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLCAvLyB0aGUgcGF0aCBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2hcbiAgICB1cmw6IHBhdGggPT09ICcvJyAmJiB1cmwgPT09ICcnID8gJy8nIDogdXJsLCAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICBpc0V4YWN0OiBpc0V4YWN0LCAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gJy4vbWF0Y2hQYXRoJztcblxudmFyIGlzRW1wdHlDaGlsZHJlbiA9IGZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cbnZhciBSb3V0ZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLCBfdGhpcy5jb250ZXh0LnJvdXRlcilcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKF9yZWYsIHJvdXRlcikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICAgIHBhdGggPSBfcmVmLnBhdGgsXG4gICAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHJldHVybiBjb21wdXRlZE1hdGNoOyAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcblxuICAgIGludmFyaWFudChyb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvciB3aXRoUm91dGVyKCkgb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG5cbiAgICB2YXIgcm91dGUgPSByb3V0ZXIucm91dGU7XG5cbiAgICB2YXIgcGF0aG5hbWUgPSAobG9jYXRpb24gfHwgcm91dGUubG9jYXRpb24pLnBhdGhuYW1lO1xuXG4gICAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgocGF0aG5hbWUsIHsgcGF0aDogcGF0aCwgc3RyaWN0OiBzdHJpY3QsIGV4YWN0OiBleGFjdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSkgOiByb3V0ZS5tYXRjaDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWQnKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCAnWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZCcpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMucmVuZGVyICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkJyk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1hdGNoOiB0aGlzLmNvbXB1dGVNYXRjaChuZXh0UHJvcHMsIG5leHRDb250ZXh0LnJvdXRlcilcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBtYXRjaCA9IHRoaXMuc3RhdGUubWF0Y2g7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICByZW5kZXIgPSBfcHJvcHMucmVuZGVyO1xuICAgIHZhciBfY29udGV4dCRyb3V0ZXIgPSB0aGlzLmNvbnRleHQucm91dGVyLFxuICAgICAgICBoaXN0b3J5ID0gX2NvbnRleHQkcm91dGVyLmhpc3RvcnksXG4gICAgICAgIHJvdXRlID0gX2NvbnRleHQkcm91dGVyLnJvdXRlLFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gX2NvbnRleHQkcm91dGVyLnN0YXRpY0NvbnRleHQ7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuICAgIHZhciBwcm9wcyA9IHsgbWF0Y2g6IG1hdGNoLCBsb2NhdGlvbjogbG9jYXRpb24sIGhpc3Rvcnk6IGhpc3RvcnksIHN0YXRpY0NvbnRleHQ6IHN0YXRpY0NvbnRleHQgfTtcblxuICAgIHJldHVybiBjb21wb25lbnQgPyAvLyBjb21wb25lbnQgcHJvcCBnZXRzIGZpcnN0IHByaW9yaXR5LCBvbmx5IGNhbGxlZCBpZiB0aGVyZSdzIGEgbWF0Y2hcbiAgICBtYXRjaCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiBudWxsIDogcmVuZGVyID8gLy8gcmVuZGVyIHByb3AgaXMgbmV4dCwgb25seSBjYWxsZWQgaWYgdGhlcmUncyBhIG1hdGNoXG4gICAgbWF0Y2ggPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IGNoaWxkcmVuID8gLy8gY2hpbGRyZW4gY29tZSBsYXN0LCBhbHdheXMgY2FsbGVkXG4gICAgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4ocHJvcHMpIDogIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikgPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGwgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGUucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHBhdGg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSlcbn07XG5Sb3V0ZS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZSBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvUm91dGUnO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUm91dGUgZnJvbSAnLi9Sb3V0ZSc7XG5pbXBvcnQgTGluayBmcm9tICcuL0xpbmsnO1xuXG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG52YXIgTmF2TGluayA9IGZ1bmN0aW9uIE5hdkxpbmsoX3JlZikge1xuICB2YXIgdG8gPSBfcmVmLnRvLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgZ2V0SXNBY3RpdmUgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmLmFyaWFDdXJyZW50LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ3RvJywgJ2V4YWN0JywgJ3N0cmljdCcsICdsb2NhdGlvbicsICdhY3RpdmVDbGFzc05hbWUnLCAnY2xhc3NOYW1lJywgJ2FjdGl2ZVN0eWxlJywgJ3N0eWxlJywgJ2lzQWN0aXZlJywgJ2FyaWFDdXJyZW50J10pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgcGF0aDogKHR5cGVvZiB0byA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodG8pKSA9PT0gJ29iamVjdCcgPyB0by5wYXRobmFtZSA6IHRvLFxuICAgIGV4YWN0OiBleGFjdCxcbiAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKF9yZWYyKSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfcmVmMi5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaCA9IF9yZWYyLm1hdGNoO1xuXG4gICAgICB2YXIgaXNBY3RpdmUgPSAhIShnZXRJc0FjdGl2ZSA/IGdldElzQWN0aXZlKG1hdGNoLCBsb2NhdGlvbikgOiBtYXRjaCk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHtcbiAgICAgICAgdG86IHRvLFxuICAgICAgICBjbGFzc05hbWU6IGlzQWN0aXZlID8gW2NsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lXS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSkuam9pbignICcpIDogY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogaXNBY3RpdmUgPyBfZXh0ZW5kcyh7fSwgc3R5bGUsIGFjdGl2ZVN0eWxlKSA6IHN0eWxlLFxuICAgICAgICAnYXJpYS1jdXJyZW50JzogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnRcbiAgICAgIH0sIHJlc3QpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuTmF2TGluay5wcm9wVHlwZXMgPSB7XG4gIHRvOiBMaW5rLnByb3BUeXBlcy50byxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICBhcmlhQ3VycmVudDogUHJvcFR5cGVzLm9uZU9mKFsncGFnZScsICdzdGVwJywgJ2xvY2F0aW9uJywgJ3RydWUnXSlcbn07XG5cbk5hdkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnLFxuICBhcmlhQ3VycmVudDogJ3RydWUnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOYXZMaW5rOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5XG4gKiBmcm9tIGEgc2NyZWVuIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFByb21wdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQcm9tcHQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByb21wdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvbXB0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnVuYmxvY2spIHRoaXMudW5ibG9jaygpO1xuXG4gICAgdGhpcy51bmJsb2NrID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5LmJsb2NrKG1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykge1xuICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICB0aGlzLnVuYmxvY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcblxuICAgIGlmICh0aGlzLnByb3BzLndoZW4pIHRoaXMuZW5hYmxlKHRoaXMucHJvcHMubWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLndoZW4pIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy53aGVuIHx8IHRoaXMucHJvcHMubWVzc2FnZSAhPT0gbmV4dFByb3BzLm1lc3NhZ2UpIHRoaXMuZW5hYmxlKG5leHRQcm9wcy5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmRpc2FibGUoKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUHJvbXB0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qcm9tcHQucHJvcFR5cGVzID0ge1xuICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgbWVzc2FnZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKS5pc1JlcXVpcmVkXG59O1xuUHJvbXB0LmRlZmF1bHRQcm9wcyA9IHtcbiAgd2hlbjogdHJ1ZVxufTtcblByb21wdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgYmxvY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUHJvbXB0OyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUHJvbXB0IGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Qcm9tcHQnO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB7IHBhcnNlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcblxuZXhwb3J0IHZhciBjcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG5cbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG5leHBvcnQgdmFyIGxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59OyIsImV4cG9ydCB2YXIgYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBoYXNCYXNlbmFtZSA9IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgcGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG5leHBvcnQgdmFyIGNyZWF0ZVBhdGggPSBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG5cblxuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6ICc/JyArIHNlYXJjaDtcblxuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuXG4gIHJldHVybiBwYXRoO1xufTsiLCJleHBvcnQgdmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbmV4cG9ydCB2YXIgYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPyBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciByZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG5leHBvcnQgdmFyIGdldENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5leHBvcnQgdmFyIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgPSBmdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwVHJhaWxpbmdTbGFzaCwgaGFzQmFzZW5hbWUsIHN0cmlwQmFzZW5hbWUsIGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5pbXBvcnQgeyBjYW5Vc2VET00sIGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGdldENvbmZpcm1hdGlvbiwgc3VwcG9ydHNIaXN0b3J5LCBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlLCBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBnZXRIaXN0b3J5U3RhdGUgPSBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cbnZhciBjcmVhdGVCcm93c2VySGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQb3BTdGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcblxuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJyb3dzZXJIaXN0b3J5OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgc3RyaXBMZWFkaW5nU2xhc2gsIHN0cmlwVHJhaWxpbmdTbGFzaCwgaGFzQmFzZW5hbWUsIHN0cmlwQmFzZW5hbWUsIGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5pbXBvcnQgeyBjYW5Vc2VET00sIGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGdldENvbmZpcm1hdGlvbiwgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggfSBmcm9tICcuL0RPTVV0aWxzJztcblxudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbnZhciBnZXRIYXNoUGF0aCA9IGZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufTtcblxudmFyIHB1c2hIYXNoUGF0aCA9IGZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHJldHVybiB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59O1xuXG52YXIgcmVwbGFjZUhhc2hQYXRoID0gZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJyMnKTtcblxuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaHJlZi5zbGljZSgwLCBoYXNoSW5kZXggPj0gMCA/IGhhc2hJbmRleCA6IDApICsgJyMnICsgcGF0aCk7XG59O1xuXG52YXIgY3JlYXRlSGFzaEhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBpbnZhcmlhbnQoY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBwcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB1bmRlZmluZWQgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgIHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG5cbiAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG5cbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpO1xuXG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlSGFzaEhpc3Rvcnk7IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB7IGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5cbnZhciBjbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cbnZhciBjcmVhdGVNZW1vcnlIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGdldFVzZXJDb25maXJtYXRpb24gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdW5kZWZpbmVkID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuXG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGNhbkdvID0gZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTWVtb3J5SGlzdG9yeTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICdoaXN0b3J5JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgdXBkYXRpbmcgdGhlIGxvY2F0aW9uIHByb2dyYW1tYXRpY2FsbHlcbiAqIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFJlZGlyZWN0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJlZGlyZWN0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWRpcmVjdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVkaXJlY3QpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBSZWRpcmVjdC5wcm90b3R5cGUuaXNTdGF0aWMgPSBmdW5jdGlvbiBpc1N0YXRpYygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlciAmJiB0aGlzLmNvbnRleHQucm91dGVyLnN0YXRpY0NvbnRleHQ7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgaWYgKHRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHByZXZUbyA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG4gICAgdmFyIG5leHRUbyA9IGNyZWF0ZUxvY2F0aW9uKHRoaXMucHJvcHMudG8pO1xuXG4gICAgaWYgKGxvY2F0aW9uc0FyZUVxdWFsKHByZXZUbywgbmV4dFRvKSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgJ1lvdSB0cmllZCB0byByZWRpcmVjdCB0byB0aGUgc2FtZSByb3V0ZSB5b3VcXCdyZSBjdXJyZW50bHkgb246ICcgKyAoJ1wiJyArIG5leHRUby5wYXRobmFtZSArIG5leHRUby5zZWFyY2ggKyAnXCInKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnBlcmZvcm0gPSBmdW5jdGlvbiBwZXJmb3JtKCkge1xuICAgIHZhciBoaXN0b3J5ID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBwdXNoID0gX3Byb3BzLnB1c2gsXG4gICAgICAgIHRvID0gX3Byb3BzLnRvO1xuXG5cbiAgICBpZiAocHVzaCkge1xuICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICB9XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUmVkaXJlY3Q7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxufTtcblJlZGlyZWN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgcHVzaDogZmFsc2Vcbn07XG5SZWRpcmVjdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJlcGxhY2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJlZGlyZWN0IGZyb20gJ3JlYWN0LXJvdXRlci9lcy9SZWRpcmVjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBjcmVhdGVQYXRoLCBwYXJzZVBhdGggfSBmcm9tICdoaXN0b3J5L1BhdGhVdGlscyc7XG5pbXBvcnQgUm91dGVyIGZyb20gJy4vUm91dGVyJztcblxudmFyIG5vcm1hbGl6ZUxvY2F0aW9uID0gZnVuY3Rpb24gbm9ybWFsaXplTG9jYXRpb24ob2JqZWN0KSB7XG4gIHZhciBfb2JqZWN0JHBhdGhuYW1lID0gb2JqZWN0LnBhdGhuYW1lLFxuICAgICAgcGF0aG5hbWUgPSBfb2JqZWN0JHBhdGhuYW1lID09PSB1bmRlZmluZWQgPyAnLycgOiBfb2JqZWN0JHBhdGhuYW1lLFxuICAgICAgX29iamVjdCRzZWFyY2ggPSBvYmplY3Quc2VhcmNoLFxuICAgICAgc2VhcmNoID0gX29iamVjdCRzZWFyY2ggPT09IHVuZGVmaW5lZCA/ICcnIDogX29iamVjdCRzZWFyY2gsXG4gICAgICBfb2JqZWN0JGhhc2ggPSBvYmplY3QuaGFzaCxcbiAgICAgIGhhc2ggPSBfb2JqZWN0JGhhc2ggPT09IHVuZGVmaW5lZCA/ICcnIDogX29iamVjdCRoYXNoO1xuXG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufTtcblxudmFyIGFkZEJhc2VuYW1lID0gZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn07XG5cbnZhciBzdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcblxuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn07XG5cbnZhciBjcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnID8gcGFyc2VQYXRoKGxvY2F0aW9uKSA6IG5vcm1hbGl6ZUxvY2F0aW9uKGxvY2F0aW9uKTtcbn07XG5cbnZhciBjcmVhdGVVUkwgPSBmdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3N0cmluZycgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufTtcblxudmFyIHN0YXRpY0hhbmRsZXIgPSBmdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpbnZhcmlhbnQoZmFsc2UsICdZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj4nLCBtZXRob2ROYW1lKTtcbiAgfTtcbn07XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxudmFyIFN0YXRpY1JvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRpY1JvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKF90aGlzLnByb3BzLmJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0O1xuXG4gICAgICBjb250ZXh0LmFjdGlvbiA9ICdQVVNIJztcbiAgICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfSwgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IHtcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5jb250ZXh0XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksICc8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuJyk7XG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJhc2VuYW1lID0gX3Byb3BzLmJhc2VuYW1lLFxuICAgICAgICBjb250ZXh0ID0gX3Byb3BzLmNvbnRleHQsXG4gICAgICAgIGxvY2F0aW9uID0gX3Byb3BzLmxvY2F0aW9uLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnYmFzZW5hbWUnLCAnY29udGV4dCcsICdsb2NhdGlvbiddKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogdGhpcy5jcmVhdGVIcmVmLFxuICAgICAgYWN0aW9uOiAnUE9QJyxcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoJ2dvJyksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoJ2dvQmFjaycpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKCdnb0ZvcndhcmQnKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBoaXN0b3J5OiBoaXN0b3J5IH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5TdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG59O1xuU3RhdGljUm91dGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYmFzZW5hbWU6ICcnLFxuICBsb2NhdGlvbjogJy8nXG59O1xuU3RhdGljUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBTdGF0aWNSb3V0ZXIgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1N0YXRpY1JvdXRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gJy4vbWF0Y2hQYXRoJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTd2l0Y2gpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciByb3V0ZSA9IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGU7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG5cbiAgICB2YXIgbWF0Y2ggPSB2b2lkIDAsXG4gICAgICAgIGNoaWxkID0gdm9pZCAwO1xuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSByZXR1cm47XG5cbiAgICAgIHZhciBfZWxlbWVudCRwcm9wcyA9IGVsZW1lbnQucHJvcHMsXG4gICAgICAgICAgcGF0aFByb3AgPSBfZWxlbWVudCRwcm9wcy5wYXRoLFxuICAgICAgICAgIGV4YWN0ID0gX2VsZW1lbnQkcHJvcHMuZXhhY3QsXG4gICAgICAgICAgc3RyaWN0ID0gX2VsZW1lbnQkcHJvcHMuc3RyaWN0LFxuICAgICAgICAgIHNlbnNpdGl2ZSA9IF9lbGVtZW50JHByb3BzLnNlbnNpdGl2ZSxcbiAgICAgICAgICBmcm9tID0gX2VsZW1lbnQkcHJvcHMuZnJvbTtcblxuICAgICAgdmFyIHBhdGggPSBwYXRoUHJvcCB8fCBmcm9tO1xuXG4gICAgICBpZiAobWF0Y2ggPT0gbnVsbCkge1xuICAgICAgICBjaGlsZCA9IGVsZW1lbnQ7XG4gICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBleGFjdDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9KSA6IHJvdXRlLm1hdGNoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7IGxvY2F0aW9uOiBsb2NhdGlvbiwgY29tcHV0ZWRNYXRjaDogbWF0Y2ggfSkgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN3aXRjaC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5Td2l0Y2gucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFN3aXRjaCBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvU3dpdGNoJztcblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGgnO1xuXG5leHBvcnQgZGVmYXVsdCBtYXRjaFBhdGg7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IFJvdXRlIGZyb20gJy4vUm91dGUnO1xuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG52YXIgd2l0aFJvdXRlciA9IGZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFsnd3JhcHBlZENvbXBvbmVudFJlZiddKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7IHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJvdXRlQ29tcG9uZW50UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIHJvdXRlQ29tcG9uZW50UHJvcHMsIHsgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmIH0pKTtcbiAgICAgIH0gfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9ICd3aXRoUm91dGVyKCcgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArICcpJztcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuICBDLnByb3BUeXBlcyA9IHtcbiAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMuZnVuY1xuICB9O1xuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCB3aXRoUm91dGVyIGZyb20gJ3JlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRHJhZnRGZWF0dXJlRmxhZ3NcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi9EcmFmdEZlYXR1cmVGbGFncy1jb3JlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRGZWF0dXJlRmxhZ3M7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFNpbmdsZUpvYiBmcm9tICcuL1NpbmdsZUpvYi5qcyc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyLCBSb3V0ZSwgU3dpdGNoLCBMaW5rLCBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5jbGFzcyBKb2JzUGFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBqb2JzOiBbXSxcbiAgICAgICAgICAgIHRlbXBKb2JzOiBbXG4gICAgICAgICAgICAgICAge2lkOiAxLCBqb2JUaXRsZTogXCJGdWxsc3RhY2sgRGV2ZWxvcGVyXCIsIGpvYkhvdXJzOiBcIkZ1bGwtdGltZVwiLCBqb2JBcmVhOiBcIkZyb250LUVuZFwiLCBqb2JDb21wYW55OiBcIk1vbnpvXCJ9LFxuICAgICAgICAgICAgICAgIHtpZDogMiwgam9iVGl0bGU6IFwiSnVuaW9yIERlc2lnbmVyXCIsIGpvYkhvdXJzOiBcIlBhcnQtdGltZVwiLCBqb2JBcmVhOiBcIkZ1bGwtc3RhY2tcIiwgam9iQ29tcGFueTogXCJGYWNlYm9va1wifSxcbiAgICAgICAgICAgICAgICB7aWQ6IDMsIGpvYlRpdGxlOiBcIkV4cGVyaWVuY2VkIENUT1wiLCBqb2JIb3VyczogXCJGdWxsLXRpbWVcIiwgam9iQXJlYTogXCJEZXNpZ25lclwiLCBqb2JDb21wYW55OiBcIkdvb2dsZVwifSxcbiAgICAgICAgICAgICAgICB7aWQ6IDQsIGpvYlRpdGxlOiBcIkZyb250LWVuZCBMZWFkXCIsIGpvYkhvdXJzOiBcIlBhcnQtdGltZVwiLCBqb2JBcmVhOiBcIkJhY2stZW5kXCIsIGpvYkNvbXBhbnk6IFwiRGVsaXZlcm9vXCJ9LFxuICAgICAgICAgICAgICAgIHtpZDogNSwgam9iVGl0bGU6IFwiUUEgVGVzdGVyXCIsIGpvYkhvdXJzOiBcIkZ1bGwtdGltZVwiLCBqb2JBcmVhOiBcIkZyb250LUVuZFwiLCBqb2JDb21wYW55OiBcIkluc3RhZ3JhbVwifSxcbiAgICAgICAgICAgICAgICB7aWQ6IDYsIGpvYlRpdGxlOiBcIkZ1bGxzdGFjayBEZXZlbG9wZXJcIiwgam9iSG91cnM6IFwiUGFydC10aW1lXCIsIGpvYkFyZWE6IFwiQmFjay1lbmRcIiwgam9iQ29tcGFueTogXCJUd2l0dGVyXCJ9LFxuICAgICAgICAgICAgICAgIHtpZDogNywgam9iVGl0bGU6IFwiSnVuaW9yIERlc2lnbmVyXCIsIGpvYkhvdXJzOiBcIkZ1bGwtdGltZVwiLCBqb2JBcmVhOiBcIkZ1bGwtc3RhY2tcIiwgam9iQ29tcGFueTogXCJBcHBsZVwifSxcbiAgICAgICAgICAgICAgICB7aWQ6IDgsIGpvYlRpdGxlOiBcIkV4cGVyaWVuY2VkIENUT1wiLCBqb2JIb3VyczogXCJQYXJ0LXRpbWVcIiwgam9iQXJlYTogXCJCYWNrLWVuZFwiLCBqb2JDb21wYW55OiBcIkFwcGxlXCJ9LFxuICAgICAgICAgICAgICAgIHtpZDogOSwgam9iVGl0bGU6IFwiSnVuaW9yIERlc2lnbmVyXCIsIGpvYkhvdXJzOiBcIkZ1bGwtdGltZVwiLCBqb2JBcmVhOiBcIkZyb250LUVuZFwiLCBqb2JDb21wYW55OiBcIk1vbnpvXCJ9LFxuICAgICAgICAgICAgICAgIHtpZDogMTAsIGpvYlRpdGxlOiBcIkZyb250LWVuZCBMZWFkXCIsIGpvYkhvdXJzOiBcIlBhcnQtdGltZVwiLCBqb2JBcmVhOiBcIkJhY2stZW5kXCIsIGpvYkNvbXBhbnk6IFwiSW5zdGFncmFtXCJ9LFxuICAgICAgICAgICAgICAgIHtpZDogMTEsIGpvYlRpdGxlOiBcIkZ1bGxzdGFjayBEZXZlbG9wZXJcIiwgam9iSG91cnM6IFwiRnVsbC10aW1lXCIsIGpvYkFyZWE6IFwiXCIsIGpvYkNvbXBhbnk6IFwiRGVsaXZlcm9vXCJ9LFxuICAgICAgICAgICAgICAgIHtpZDogMTIsIGpvYlRpdGxlOiBcIkV4cGVyaWVuY2VkIENUT1wiLCBqb2JIb3VyczogXCJQYXJ0LXRpbWVcIiwgam9iQXJlYTogXCJEZXNpZ25lclwiLCBqb2JDb21wYW55OiBcIlR3aXR0ZXJcIn0sXG4gICAgICAgICAgICAgICAge2lkOiAxMywgam9iVGl0bGU6IFwiRnJvbnQtZW5kIExlYWRcIiwgam9iSG91cnM6IFwiRnVsbC10aW1lXCIsIGpvYkFyZWE6IFwiRnJvbnQtRW5kXCIsIGpvYkNvbXBhbnk6IFwiSW5zdGFncmFtXCJ9LFxuICAgICAgICAgICAgICAgIHtpZDogMTQsIGpvYlRpdGxlOiBcIlFBIFRlc3RlclwiLCBqb2JIb3VyczogXCJQYXJ0LXRpbWVcIiwgam9iQXJlYTogXCJcIiwgam9iQ29tcGFueTogXCJBcHBsZVwifSxcbiAgICAgICAgICAgICAgICB7aWQ6IDE1LCBqb2JUaXRsZTogXCJKdW5pb3IgRGVzaWduZXJcIiwgam9iSG91cnM6IFwiRnVsbC10aW1lXCIsIGpvYkFyZWE6IFwiQmFjay1lbmRcIiwgam9iQ29tcGFueTogXCJNb256b1wifSxcbiAgICAgICAgICAgICAgICB7aWQ6IDE2LCBqb2JUaXRsZTogXCJRQSBUZXN0ZXJcIiwgam9iSG91cnM6IFwiUGFydC10aW1lXCIsIGpvYkFyZWE6IFwiQmFjay1lbmRcIiwgam9iQ29tcGFueTogXCJEZWxpdmVyb29cIn0sXG4gICAgICAgICAgICAgICAge2lkOiAxNywgam9iVGl0bGU6IFwiRnVsbHN0YWNrIERldmVsb3BlclwiLCBqb2JIb3VyczogXCJGdWxsLXRpbWVcIiwgam9iQXJlYTogXCJcIiwgam9iQ29tcGFueTogXCJJbnN0YWdyYW1cIn0sXG4gICAgICAgICAgICAgICAge2lkOiAxOCwgam9iVGl0bGU6IFwiRXhwZXJpZW5jZWQgQ1RPXCIsIGpvYkhvdXJzOiBcIlBhcnQtdGltZVwiLCBqb2JBcmVhOiBcIkZyb250LUVuZFwiLCBqb2JDb21wYW55OiBcIkdvb2dsZVwifSxcbiAgICAgICAgICAgICAgICB7aWQ6IDE5LCBqb2JUaXRsZTogXCJKdW5pb3IgRGVzaWduZXJcIiwgam9iSG91cnM6IFwiRnVsbC10aW1lXCIsIGpvYkFyZWE6IFwiRGVzaWduZXJcIiwgam9iQ29tcGFueTogXCJBcHBsZVwifSxcbiAgICAgICAgICAgICAgICB7aWQ6IDIwLCBqb2JUaXRsZTogXCJGcm9udC1lbmQgTGVhZFwiLCBqb2JIb3VyczogXCJQYXJ0LXRpbWVcIiwgam9iQXJlYTogXCJCYWNrLWVuZFwiLCBqb2JDb21wYW55OiBcIkRlbGl2ZXJvb1wifSxcbiAgICAgICAgICAgICAgICB7aWQ6IDIxLCBqb2JUaXRsZTogXCJGdWxsc3RhY2sgRGV2ZWxvcGVyXCIsIGpvYkhvdXJzOiBcIkZ1bGwtdGltZVwiLCBqb2JBcmVhOiBcIkJhY2stZW5kXCIsIGpvYkNvbXBhbnk6IFwiTW9uem9cIn0sXG4gICAgICAgICAgICAgICAge2lkOiAyMiwgam9iVGl0bGU6IFwiRXhwZXJpZW5jZWQgQ1RPXCIsIGpvYkhvdXJzOiBcIlBhcnQtdGltZVwiLCBqb2JBcmVhOiBcIkZyb250LUVuZFwiLCBqb2JDb21wYW55OiBcIlR3aXR0ZXJcIn0sXG4gICAgICAgICAgICAgICAge2lkOiAyMywgam9iVGl0bGU6IFwiRnJvbnQtZW5kIExlYWRcIiwgam9iSG91cnM6IFwiRnVsbC10aW1lXCIsIGpvYkFyZWE6IFwiRGVzaWduZXJcIiwgam9iQ29tcGFueTogXCJJbnN0YWdyYW1cIn0sXG4gICAgICAgICAgICAgICAge2lkOiAyNCwgam9iVGl0bGU6IFwiSnVuaW9yIERlc2lnbmVyXCIsIGpvYkhvdXJzOiBcIkZ1bGwtdGltZVwiLCBqb2JBcmVhOiBcIkJhY2stZW5kXCIsIGpvYkNvbXBhbnk6IFwiR29vZ2xlXCJ9LFxuICAgICAgICAgICAgICAgIHtpZDogMjUsIGpvYlRpdGxlOiBcIkZyb250LWVuZCBMZWFkXCIsIGpvYkhvdXJzOiBcIkZ1bGwtdGltZVwiLCBqb2JBcmVhOiBcIkJhY2stZW5kXCIsIGpvYkNvbXBhbnk6IFwiR29vZ2xlXCJ9LFxuICAgICAgICAgICAgICAgIHtpZDogMjYsIGpvYlRpdGxlOiBcIkZyb250LWVuZCBMZWFkXCIsIGpvYkhvdXJzOiBcIkZ1bGwtdGltZVwiLCBqb2JBcmVhOiBcIkRlc2lnbmVyXCIsIGpvYkNvbXBhbnk6IFwiVHdpdHRlclwifVxuXG4gICAgICAgICAgICBdLFxuXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBjb25zdCBqb2JzRW5kUG9pbnQgPSAnaHR0cDovLzEyNy4wLjAuMTo4MDAwL2pvYi9hcGkvam9icy8nO1xuXG4gICAgYXhpb3MuZ2V0KGpvYnNFbmRQb2ludClcbiAgICAudGhlbiggKHJlc3BvbnNlKSA9PiB7XG5cblxuXG4gICAgICBpZiAocmVzcG9uc2UuZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ0aGVyZSBhcmUgbm8gdXNlcnMgdGhhdCBtYXRjaCB5b3VyIHNlYXJjaFwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBqb2JzOiByZXNwb25zZS5kYXRhXG4gICAgICB9KTtcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuc3RhdGUuam9icyk7XG4gICAgfVxuICAgICkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgfSlcbiAgICB9XG5cbiAgICAgICAgXG5cblxuICAgIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGlkPVwiam9icy1wYWdlXCI+XG4gICAgICAgICAgICA8ZGl2IGlkPVwiam9icy1wYWdlLXRpdGxlXCI+PGgxPlRFQ0ggSk9CUzwvaDE+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGlkPVwiYWxsLWpvYnNcIj5cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuam9icy5tYXAoKGpvYikgPT4gPExpbmsgdG89e1wiL2pvYl9wb3N0L1wiICsgam9iLmlkfSBrZXk9e2pvYi50aXRsZX0+PFNpbmdsZUpvYiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvYlRpdGxlPXtqb2IudGl0bGV9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgam9iSG91cnM9e2pvYi5ob3Vyc30gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2JBcmVhPXtqb2IuYXJlYX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2JTbHVnPXtqb2Iuc2x1Z30gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2JDb21wYW55PXtqb2IucG9zdGVkX2J5X2NvbXBhbnl9Lz48L0xpbms+KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO31cbn1cblxuZXhwb3J0IGRlZmF1bHQgSm9ic1BhZ2U7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogVW5pY29kZS1lbmFibGVkIHJlcGxhY2VzbWVudHMgZm9yIGJhc2ljIFN0cmluZyBmdW5jdGlvbnMuXG4gKlxuICogQWxsIHRoZSBmdW5jdGlvbnMgaW4gdGhpcyBtb2R1bGUgYXNzdW1lIHRoYXQgdGhlIGlucHV0IHN0cmluZyBpcyBhIHZhbGlkXG4gKiBVVEYtMTYgZW5jb2Rpbmcgb2YgYSBVbmljb2RlIHNlcXVlbmNlLiBJZiBpdCdzIG5vdCB0aGUgY2FzZSwgdGhlIGJlaGF2aW9yXG4gKiB3aWxsIGJlIHVuZGVmaW5lZC5cbiAqXG4gKiBXQVJOSU5HOiBTaW5jZSB0aGlzIG1vZHVsZSBpcyB0eXBlY2hlY2tzLWVuZm9yY2VkLCB5b3UgbWF5IGZpbmQgbmV3IGJ1Z3NcbiAqIHdoZW4gcmVwbGFjaW5nIG5vcm1hbCBTdHJpbmcgZnVuY3Rpb25zIHdpdGggb25lcyBwcm92aWRlZCBoZXJlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJy4vaW52YXJpYW50Jyk7XG5cbi8vIFRoZXNlIHR3byByYW5nZXMgYXJlIGNvbnNlY3V0aXZlIHNvIGFueXRoaW5nIGluIFtISUdIX1NUQVJULCBMT1dfRU5EXSBpcyBhXG4vLyBzdXJyb2dhdGUgY29kZSB1bml0LlxudmFyIFNVUlJPR0FURV9ISUdIX1NUQVJUID0gMHhEODAwO1xudmFyIFNVUlJPR0FURV9ISUdIX0VORCA9IDB4REJGRjtcbnZhciBTVVJST0dBVEVfTE9XX1NUQVJUID0gMHhEQzAwO1xudmFyIFNVUlJPR0FURV9MT1dfRU5EID0gMHhERkZGO1xudmFyIFNVUlJPR0FURV9VTklUU19SRUdFWCA9IC9bXFx1RDgwMC1cXHVERkZGXS87XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVVbml0ICAgQSBVbmljb2RlIGNvZGUtdW5pdCwgaW4gcmFuZ2UgWzAsIDB4MTBGRkZGXVxuICogQHJldHVybiB7Ym9vbGVhbn0gICAgICAgICAgV2hldGhlciBjb2RlLXVuaXQgaXMgaW4gYSBzdXJyb2dhdGUgKGhpL2xvdykgcmFuZ2VcbiAqL1xuZnVuY3Rpb24gaXNDb2RlVW5pdEluU3Vycm9nYXRlUmFuZ2UoY29kZVVuaXQpIHtcbiAgcmV0dXJuIFNVUlJPR0FURV9ISUdIX1NUQVJUIDw9IGNvZGVVbml0ICYmIGNvZGVVbml0IDw9IFNVUlJPR0FURV9MT1dfRU5EO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgdHdvIGNoYXJhY3RlcnMgc3RhcnRpbmcgYXQgYGluZGV4YCBmb3JtIGEgc3Vycm9nYXRlIHBhaXIuXG4gKiBGb3IgZXhhbXBsZSwgZ2l2ZW4gdGhlIHN0cmluZyBzID0gXCJcXHVEODNEXFx1REUwQVwiLCAocywgMCkgcmV0dXJucyB0cnVlIGFuZFxuICogKHMsIDEpIHJldHVybnMgZmFsc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1N1cnJvZ2F0ZVBhaXIoc3RyLCBpbmRleCkge1xuICAhKDAgPD0gaW5kZXggJiYgaW5kZXggPCBzdHIubGVuZ3RoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdpc1N1cnJvZ2F0ZVBhaXI6IEludmFsaWQgaW5kZXggJXMgZm9yIHN0cmluZyBsZW5ndGggJXMuJywgaW5kZXgsIHN0ci5sZW5ndGgpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgaWYgKGluZGV4ICsgMSA9PT0gc3RyLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgZmlyc3QgPSBzdHIuY2hhckNvZGVBdChpbmRleCk7XG4gIHZhciBzZWNvbmQgPSBzdHIuY2hhckNvZGVBdChpbmRleCArIDEpO1xuICByZXR1cm4gU1VSUk9HQVRFX0hJR0hfU1RBUlQgPD0gZmlyc3QgJiYgZmlyc3QgPD0gU1VSUk9HQVRFX0hJR0hfRU5EICYmIFNVUlJPR0FURV9MT1dfU1RBUlQgPD0gc2Vjb25kICYmIHNlY29uZCA8PSBTVVJST0dBVEVfTE9XX0VORDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyICBOb24tZW1wdHkgc3RyaW5nXG4gKiBAcmV0dXJuIHtib29sZWFufSAgICBUcnVlIGlmIHRoZSBpbnB1dCBpbmNsdWRlcyBhbnkgc3Vycm9nYXRlIGNvZGUgdW5pdHNcbiAqL1xuZnVuY3Rpb24gaGFzU3Vycm9nYXRlVW5pdChzdHIpIHtcbiAgcmV0dXJuIFNVUlJPR0FURV9VTklUU19SRUdFWC50ZXN0KHN0cik7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIG9yaWdpbmFsIFVuaWNvZGUgY2hhcmFjdGVyIGF0IGdpdmVuIHBvc2l0aW9uIGluIHRoZVxuICogU3RyaW5nIGJ5IGxvb2tpbmcgaW50byB0aGUgVVRGLTE2IGNvZGUgdW5pdDsgdGhhdCBpcyBlcXVhbCB0byAxIGZvciBhbnlcbiAqIG5vbi1zdXJyb2dhdGUgY2hhcmFjdGVycyBpbiBCTVAgKFtVKzAwMDAuLlUrRDdGRl0gYW5kIFtVK0UwMDAsIFUrRkZGRl0pOyBhbmRcbiAqIHJldHVybnMgMiBmb3IgdGhlIGhpL2xvdyBzdXJyb2dhdGVzIChbVStEODAwLi5VK0RGRkZdKSwgd2hpY2ggYXJlIGluIGZhY3RcbiAqIHJlcHJlc2VudGluZyBub24tQk1QIGNoYXJhY3RlcnMgKFtVKzEwMDAwLi5VKzEwRkZGRl0pLlxuICpcbiAqIEV4YW1wbGVzOlxuICogLSAnXFx1MDAyMCcgPT4gMVxuICogLSAnXFx1MzAyMCcgPT4gMVxuICogLSAnXFx1RDgzNScgPT4gMlxuICogLSAnXFx1RDgzNVxcdURERUYnID0+IDJcbiAqIC0gJ1xcdURERUYnID0+IDJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyICBOb24tZW1wdHkgc3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zICBQb3NpdGlvbiBpbiB0aGUgc3RyaW5nIHRvIGxvb2sgZm9yIG9uZSBjb2RlIHVuaXRcbiAqIEByZXR1cm4ge251bWJlcn0gICAgICBOdW1iZXIgMSBvciAyXG4gKi9cbmZ1bmN0aW9uIGdldFVURjE2TGVuZ3RoKHN0ciwgcG9zKSB7XG4gIHJldHVybiAxICsgaXNDb2RlVW5pdEluU3Vycm9nYXRlUmFuZ2Uoc3RyLmNoYXJDb2RlQXQocG9zKSk7XG59XG5cbi8qKlxuICogRnVsbHkgVW5pY29kZS1lbmFibGVkIHJlcGxhY2VtZW50IGZvciBTdHJpbmcjbGVuZ3RoXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAgVmFsaWQgVW5pY29kZSBzdHJpbmdcbiAqIEByZXR1cm4ge251bWJlcn0gICAgIFRoZSBudW1iZXIgb2YgVW5pY29kZSBjaGFyYWN0ZXJzIGluIHRoZSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gc3RybGVuKHN0cikge1xuICAvLyBDYWxsIHRoZSBuYXRpdmUgZnVuY3Rpb25zIGlmIHRoZXJlJ3Mgbm8gc3Vycm9nYXRlIGNoYXJcbiAgaWYgKCFoYXNTdXJyb2dhdGVVbml0KHN0cikpIHtcbiAgICByZXR1cm4gc3RyLmxlbmd0aDtcbiAgfVxuXG4gIHZhciBsZW4gPSAwO1xuICBmb3IgKHZhciBwb3MgPSAwOyBwb3MgPCBzdHIubGVuZ3RoOyBwb3MgKz0gZ2V0VVRGMTZMZW5ndGgoc3RyLCBwb3MpKSB7XG4gICAgbGVuKys7XG4gIH1cbiAgcmV0dXJuIGxlbjtcbn1cblxuLyoqXG4gKiBGdWxseSBVbmljb2RlLWVuYWJsZWQgcmVwbGFjZW1lbnQgZm9yIFN0cmluZyNzdWJzdHIoKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgICAgICBWYWxpZCBVbmljb2RlIHN0cmluZ1xuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0ICAgIExvY2F0aW9uIGluIFVuaWNvZGUgc2VxdWVuY2UgdG8gYmVnaW4gZXh0cmFjdGluZ1xuICogQHBhcmFtIHs/bnVtYmVyfSBsZW5ndGggIFRoZSBudW1iZXIgb2YgVW5pY29kZSBjaGFyYWN0ZXJzIHRvIGV4dHJhY3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdDogdG8gdGhlIGVuZCBvZiB0aGUgc3RyaW5nKVxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgIEV4dHJhY3RlZCBzdWItc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHN1YnN0cihzdHIsIHN0YXJ0LCBsZW5ndGgpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICBsZW5ndGggPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IEluZmluaXR5IDogbGVuZ3RoIHx8IDA7XG5cbiAgLy8gQ2FsbCB0aGUgbmF0aXZlIGZ1bmN0aW9ucyBpZiB0aGVyZSdzIG5vIHN1cnJvZ2F0ZSBjaGFyXG4gIGlmICghaGFzU3Vycm9nYXRlVW5pdChzdHIpKSB7XG4gICAgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbmd0aCk7XG4gIH1cblxuICAvLyBPYnZpb3VzIGNhc2VzXG4gIHZhciBzaXplID0gc3RyLmxlbmd0aDtcbiAgaWYgKHNpemUgPD0gMCB8fCBzdGFydCA+IHNpemUgfHwgbGVuZ3RoIDw9IDApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvLyBGaW5kIHRoZSBhY3R1YWwgc3RhcnRpbmcgcG9zaXRpb25cbiAgdmFyIHBvc0EgPSAwO1xuICBpZiAoc3RhcnQgPiAwKSB7XG4gICAgZm9yICg7IHN0YXJ0ID4gMCAmJiBwb3NBIDwgc2l6ZTsgc3RhcnQtLSkge1xuICAgICAgcG9zQSArPSBnZXRVVEYxNkxlbmd0aChzdHIsIHBvc0EpO1xuICAgIH1cbiAgICBpZiAocG9zQSA+PSBzaXplKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9IGVsc2UgaWYgKHN0YXJ0IDwgMCkge1xuICAgIGZvciAocG9zQSA9IHNpemU7IHN0YXJ0IDwgMCAmJiAwIDwgcG9zQTsgc3RhcnQrKykge1xuICAgICAgcG9zQSAtPSBnZXRVVEYxNkxlbmd0aChzdHIsIHBvc0EgLSAxKTtcbiAgICB9XG4gICAgaWYgKHBvc0EgPCAwKSB7XG4gICAgICBwb3NBID0gMDtcbiAgICB9XG4gIH1cblxuICAvLyBGaW5kIHRoZSBhY3R1YWwgZW5kaW5nIHBvc2l0aW9uXG4gIHZhciBwb3NCID0gc2l6ZTtcbiAgaWYgKGxlbmd0aCA8IHNpemUpIHtcbiAgICBmb3IgKHBvc0IgPSBwb3NBOyBsZW5ndGggPiAwICYmIHBvc0IgPCBzaXplOyBsZW5ndGgtLSkge1xuICAgICAgcG9zQiArPSBnZXRVVEYxNkxlbmd0aChzdHIsIHBvc0IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyaW5nKHBvc0EsIHBvc0IpO1xufVxuXG4vKipcbiAqIEZ1bGx5IFVuaWNvZGUtZW5hYmxlZCByZXBsYWNlbWVudCBmb3IgU3RyaW5nI3N1YnN0cmluZygpXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAgICBWYWxpZCBVbmljb2RlIHN0cmluZ1xuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0ICBMb2NhdGlvbiBpbiBVbmljb2RlIHNlcXVlbmNlIHRvIGJlZ2luIGV4dHJhY3RpbmdcbiAqIEBwYXJhbSB7P251bWJlcn0gZW5kICAgTG9jYXRpb24gaW4gVW5pY29kZSBzZXF1ZW5jZSB0byBlbmQgZXh0cmFjdGluZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdDogZW5kIG9mIHRoZSBzdHJpbmcpXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgIEV4dHJhY3RlZCBzdWItc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHN1YnN0cmluZyhzdHIsIHN0YXJ0LCBlbmQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IEluZmluaXR5IDogZW5kIHx8IDA7XG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCA9IDA7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gTWF0aC5hYnMoZW5kIC0gc3RhcnQpO1xuICBzdGFydCA9IHN0YXJ0IDwgZW5kID8gc3RhcnQgOiBlbmQ7XG4gIHJldHVybiBzdWJzdHIoc3RyLCBzdGFydCwgbGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBHZXQgYSBsaXN0IG9mIFVuaWNvZGUgY29kZS1wb2ludHMgZnJvbSBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgICAgICAgIFZhbGlkIFVuaWNvZGUgc3RyaW5nXG4gKiBAcmV0dXJuIHthcnJheTxudW1iZXI+fSAgICBBIGxpc3Qgb2YgY29kZS1wb2ludHMgaW4gWzAuLjB4MTBGRkZGXVxuICovXG5mdW5jdGlvbiBnZXRDb2RlUG9pbnRzKHN0cikge1xuICB2YXIgY29kZVBvaW50cyA9IFtdO1xuICBmb3IgKHZhciBwb3MgPSAwOyBwb3MgPCBzdHIubGVuZ3RoOyBwb3MgKz0gZ2V0VVRGMTZMZW5ndGgoc3RyLCBwb3MpKSB7XG4gICAgY29kZVBvaW50cy5wdXNoKHN0ci5jb2RlUG9pbnRBdChwb3MpKTtcbiAgfVxuICByZXR1cm4gY29kZVBvaW50cztcbn1cblxudmFyIFVuaWNvZGVVdGlscyA9IHtcbiAgZ2V0Q29kZVBvaW50czogZ2V0Q29kZVBvaW50cyxcbiAgZ2V0VVRGMTZMZW5ndGg6IGdldFVURjE2TGVuZ3RoLFxuICBoYXNTdXJyb2dhdGVVbml0OiBoYXNTdXJyb2dhdGVVbml0LFxuICBpc0NvZGVVbml0SW5TdXJyb2dhdGVSYW5nZTogaXNDb2RlVW5pdEluU3Vycm9nYXRlUmFuZ2UsXG4gIGlzU3Vycm9nYXRlUGFpcjogaXNTdXJyb2dhdGVQYWlyLFxuICBzdHJsZW46IHN0cmxlbixcbiAgc3Vic3RyaW5nOiBzdWJzdHJpbmcsXG4gIHN1YnN0cjogc3Vic3RyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVuaWNvZGVVdGlsczsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENvbnRlbnRCbG9ja1xuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyTWV0YWRhdGEnKTtcbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIGZpbmRSYW5nZXNJbW11dGFibGUgPSByZXF1aXJlKCcuL2ZpbmRSYW5nZXNJbW11dGFibGUnKTtcblxudmFyIExpc3QgPSBJbW11dGFibGUuTGlzdCxcbiAgICBNYXAgPSBJbW11dGFibGUuTWFwLFxuICAgIE9yZGVyZWRTZXQgPSBJbW11dGFibGUuT3JkZXJlZFNldCxcbiAgICBSZWNvcmQgPSBJbW11dGFibGUuUmVjb3JkLFxuICAgIFJlcGVhdCA9IEltbXV0YWJsZS5SZXBlYXQ7XG5cblxudmFyIEVNUFRZX1NFVCA9IE9yZGVyZWRTZXQoKTtcblxudmFyIGRlZmF1bHRSZWNvcmQgPSB7XG4gIGtleTogJycsXG4gIHR5cGU6ICd1bnN0eWxlZCcsXG4gIHRleHQ6ICcnLFxuICBjaGFyYWN0ZXJMaXN0OiBMaXN0KCksXG4gIGRlcHRoOiAwLFxuICBkYXRhOiBNYXAoKVxufTtcblxudmFyIENvbnRlbnRCbG9ja1JlY29yZCA9IFJlY29yZChkZWZhdWx0UmVjb3JkKTtcblxudmFyIGRlY29yYXRlQ2hhcmFjdGVyTGlzdCA9IGZ1bmN0aW9uIGRlY29yYXRlQ2hhcmFjdGVyTGlzdChjb25maWcpIHtcbiAgaWYgKCFjb25maWcpIHtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgdmFyIGNoYXJhY3Rlckxpc3QgPSBjb25maWcuY2hhcmFjdGVyTGlzdCxcbiAgICAgIHRleHQgPSBjb25maWcudGV4dDtcblxuXG4gIGlmICh0ZXh0ICYmICFjaGFyYWN0ZXJMaXN0KSB7XG4gICAgY29uZmlnLmNoYXJhY3Rlckxpc3QgPSBMaXN0KFJlcGVhdChDaGFyYWN0ZXJNZXRhZGF0YS5FTVBUWSwgdGV4dC5sZW5ndGgpKTtcbiAgfVxuXG4gIHJldHVybiBjb25maWc7XG59O1xuXG52YXIgQ29udGVudEJsb2NrID0gZnVuY3Rpb24gKF9Db250ZW50QmxvY2tSZWNvcmQpIHtcbiAgX2luaGVyaXRzKENvbnRlbnRCbG9jaywgX0NvbnRlbnRCbG9ja1JlY29yZCk7XG5cbiAgZnVuY3Rpb24gQ29udGVudEJsb2NrKGNvbmZpZykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb250ZW50QmxvY2spO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db250ZW50QmxvY2tSZWNvcmQuY2FsbCh0aGlzLCBkZWNvcmF0ZUNoYXJhY3Rlckxpc3QoY29uZmlnKSkpO1xuICB9XG5cbiAgQ29udGVudEJsb2NrLnByb3RvdHlwZS5nZXRLZXkgPSBmdW5jdGlvbiBnZXRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdrZXknKTtcbiAgfTtcblxuICBDb250ZW50QmxvY2sucHJvdG90eXBlLmdldFR5cGUgPSBmdW5jdGlvbiBnZXRUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLmdldCgndHlwZScpO1xuICB9O1xuXG4gIENvbnRlbnRCbG9jay5wcm90b3R5cGUuZ2V0VGV4dCA9IGZ1bmN0aW9uIGdldFRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCd0ZXh0Jyk7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrLnByb3RvdHlwZS5nZXRDaGFyYWN0ZXJMaXN0ID0gZnVuY3Rpb24gZ2V0Q2hhcmFjdGVyTGlzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2NoYXJhY3Rlckxpc3QnKTtcbiAgfTtcblxuICBDb250ZW50QmxvY2sucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIGdldExlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUZXh0KCkubGVuZ3RoO1xuICB9O1xuXG4gIENvbnRlbnRCbG9jay5wcm90b3R5cGUuZ2V0RGVwdGggPSBmdW5jdGlvbiBnZXREZXB0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2RlcHRoJyk7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrLnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2RhdGEnKTtcbiAgfTtcblxuICBDb250ZW50QmxvY2sucHJvdG90eXBlLmdldElubGluZVN0eWxlQXQgPSBmdW5jdGlvbiBnZXRJbmxpbmVTdHlsZUF0KG9mZnNldCkge1xuICAgIHZhciBjaGFyYWN0ZXIgPSB0aGlzLmdldENoYXJhY3Rlckxpc3QoKS5nZXQob2Zmc2V0KTtcbiAgICByZXR1cm4gY2hhcmFjdGVyID8gY2hhcmFjdGVyLmdldFN0eWxlKCkgOiBFTVBUWV9TRVQ7XG4gIH07XG5cbiAgQ29udGVudEJsb2NrLnByb3RvdHlwZS5nZXRFbnRpdHlBdCA9IGZ1bmN0aW9uIGdldEVudGl0eUF0KG9mZnNldCkge1xuICAgIHZhciBjaGFyYWN0ZXIgPSB0aGlzLmdldENoYXJhY3Rlckxpc3QoKS5nZXQob2Zmc2V0KTtcbiAgICByZXR1cm4gY2hhcmFjdGVyID8gY2hhcmFjdGVyLmdldEVudGl0eSgpIDogbnVsbDtcbiAgfTtcblxuICAvKipcbiAgICogRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBjb250aWd1b3VzIHJhbmdlIG9mIHN0eWxlcyB3aXRoaW4gdGhlIGJsb2NrLlxuICAgKi9cblxuXG4gIENvbnRlbnRCbG9jay5wcm90b3R5cGUuZmluZFN0eWxlUmFuZ2VzID0gZnVuY3Rpb24gZmluZFN0eWxlUmFuZ2VzKGZpbHRlckZuLCBjYWxsYmFjaykge1xuICAgIGZpbmRSYW5nZXNJbW11dGFibGUodGhpcy5nZXRDaGFyYWN0ZXJMaXN0KCksIGhhdmVFcXVhbFN0eWxlLCBmaWx0ZXJGbiwgY2FsbGJhY2spO1xuICB9O1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGNvbnRpZ3VvdXMgcmFuZ2Ugb2YgZW50aXRpZXMgd2l0aGluIHRoZSBibG9jay5cbiAgICovXG5cblxuICBDb250ZW50QmxvY2sucHJvdG90eXBlLmZpbmRFbnRpdHlSYW5nZXMgPSBmdW5jdGlvbiBmaW5kRW50aXR5UmFuZ2VzKGZpbHRlckZuLCBjYWxsYmFjaykge1xuICAgIGZpbmRSYW5nZXNJbW11dGFibGUodGhpcy5nZXRDaGFyYWN0ZXJMaXN0KCksIGhhdmVFcXVhbEVudGl0eSwgZmlsdGVyRm4sIGNhbGxiYWNrKTtcbiAgfTtcblxuICByZXR1cm4gQ29udGVudEJsb2NrO1xufShDb250ZW50QmxvY2tSZWNvcmQpO1xuXG5mdW5jdGlvbiBoYXZlRXF1YWxTdHlsZShjaGFyQSwgY2hhckIpIHtcbiAgcmV0dXJuIGNoYXJBLmdldFN0eWxlKCkgPT09IGNoYXJCLmdldFN0eWxlKCk7XG59XG5cbmZ1bmN0aW9uIGhhdmVFcXVhbEVudGl0eShjaGFyQSwgY2hhckIpIHtcbiAgcmV0dXJuIGNoYXJBLmdldEVudGl0eSgpID09PSBjaGFyQi5nZXRFbnRpdHkoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb250ZW50QmxvY2s7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBtYXJrIHN0cmluZyBsaXRlcmFscyByZXByZXNlbnRpbmcgQ1NTIGNsYXNzIG5hbWVzXG4gKiBzbyB0aGF0IHRoZXkgY2FuIGJlIHRyYW5zZm9ybWVkIHN0YXRpY2FsbHkuIFRoaXMgYWxsb3dzIGZvciBtb2R1bGFyaXphdGlvblxuICogYW5kIG1pbmlmaWNhdGlvbiBvZiBDU1MgY2xhc3MgbmFtZXMuXG4gKlxuICogSW4gc3RhdGljX3Vwc3RyZWFtLCB0aGlzIGZ1bmN0aW9uIGlzIGFjdHVhbGx5IGltcGxlbWVudGVkLCBidXQgaXQgc2hvdWxkXG4gKiBldmVudHVhbGx5IGJlIHJlcGxhY2VkIHdpdGggc29tZXRoaW5nIG1vcmUgZGVzY3JpcHRpdmUsIGFuZCB0aGUgdHJhbnNmb3JtXG4gKiB0aGF0IGlzIHVzZWQgaW4gdGhlIG1haW4gc3RhY2sgc2hvdWxkIGJlIHBvcnRlZCBmb3IgdXNlIGVsc2V3aGVyZS5cbiAqXG4gKiBAcGFyYW0gc3RyaW5nfG9iamVjdCBjbGFzc05hbWUgdG8gbW9kdWxhcml6ZSwgb3IgYW4gb2JqZWN0IG9mIGtleS92YWx1ZXMuXG4gKiAgICAgICAgICAgICAgICAgICAgICBJbiB0aGUgb2JqZWN0IGNhc2UsIHRoZSB2YWx1ZXMgYXJlIGNvbmRpdGlvbnMgdGhhdFxuICogICAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5lIGlmIHRoZSBjbGFzc05hbWUga2V5cyBzaG91bGQgYmUgaW5jbHVkZWQuXG4gKiBAcGFyYW0gW3N0cmluZyAuLi5dICBWYXJpYWJsZSBsaXN0IG9mIGNsYXNzTmFtZXMgaW4gdGhlIHN0cmluZyBjYXNlLlxuICogQHJldHVybiBzdHJpbmcgICAgICAgUmVuZGVyYWJsZSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzTmFtZS5cbiAqL1xuZnVuY3Rpb24gY3goY2xhc3NOYW1lcykge1xuICBpZiAodHlwZW9mIGNsYXNzTmFtZXMgPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoY2xhc3NOYW1lcykuZmlsdGVyKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBjbGFzc05hbWVzW2NsYXNzTmFtZV07XG4gICAgfSkubWFwKHJlcGxhY2UpLmpvaW4oJyAnKTtcbiAgfVxuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGFyZ3VtZW50cywgcmVwbGFjZSkuam9pbignICcpO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1xcLy9nLCAnLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGN4OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU2VsZWN0aW9uU3RhdGVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbnZhciBSZWNvcmQgPSBJbW11dGFibGUuUmVjb3JkO1xuXG5cbnZhciBkZWZhdWx0UmVjb3JkID0ge1xuICBhbmNob3JLZXk6ICcnLFxuICBhbmNob3JPZmZzZXQ6IDAsXG4gIGZvY3VzS2V5OiAnJyxcbiAgZm9jdXNPZmZzZXQ6IDAsXG4gIGlzQmFja3dhcmQ6IGZhbHNlLFxuICBoYXNGb2N1czogZmFsc2Vcbn07XG5cbnZhciBTZWxlY3Rpb25TdGF0ZVJlY29yZCA9IFJlY29yZChkZWZhdWx0UmVjb3JkKTtcblxudmFyIFNlbGVjdGlvblN0YXRlID0gZnVuY3Rpb24gKF9TZWxlY3Rpb25TdGF0ZVJlY29yZCkge1xuICBfaW5oZXJpdHMoU2VsZWN0aW9uU3RhdGUsIF9TZWxlY3Rpb25TdGF0ZVJlY29yZCk7XG5cbiAgZnVuY3Rpb24gU2VsZWN0aW9uU3RhdGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlbGVjdGlvblN0YXRlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfU2VsZWN0aW9uU3RhdGVSZWNvcmQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBTZWxlY3Rpb25TdGF0ZS5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24gc2VyaWFsaXplKCkge1xuICAgIHJldHVybiAnQW5jaG9yOiAnICsgdGhpcy5nZXRBbmNob3JLZXkoKSArICc6JyArIHRoaXMuZ2V0QW5jaG9yT2Zmc2V0KCkgKyAnLCAnICsgJ0ZvY3VzOiAnICsgdGhpcy5nZXRGb2N1c0tleSgpICsgJzonICsgdGhpcy5nZXRGb2N1c09mZnNldCgpICsgJywgJyArICdJcyBCYWNrd2FyZDogJyArIFN0cmluZyh0aGlzLmdldElzQmFja3dhcmQoKSkgKyAnLCAnICsgJ0hhcyBGb2N1czogJyArIFN0cmluZyh0aGlzLmdldEhhc0ZvY3VzKCkpO1xuICB9O1xuXG4gIFNlbGVjdGlvblN0YXRlLnByb3RvdHlwZS5nZXRBbmNob3JLZXkgPSBmdW5jdGlvbiBnZXRBbmNob3JLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdhbmNob3JLZXknKTtcbiAgfTtcblxuICBTZWxlY3Rpb25TdGF0ZS5wcm90b3R5cGUuZ2V0QW5jaG9yT2Zmc2V0ID0gZnVuY3Rpb24gZ2V0QW5jaG9yT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLmdldCgnYW5jaG9yT2Zmc2V0Jyk7XG4gIH07XG5cbiAgU2VsZWN0aW9uU3RhdGUucHJvdG90eXBlLmdldEZvY3VzS2V5ID0gZnVuY3Rpb24gZ2V0Rm9jdXNLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdmb2N1c0tleScpO1xuICB9O1xuXG4gIFNlbGVjdGlvblN0YXRlLnByb3RvdHlwZS5nZXRGb2N1c09mZnNldCA9IGZ1bmN0aW9uIGdldEZvY3VzT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLmdldCgnZm9jdXNPZmZzZXQnKTtcbiAgfTtcblxuICBTZWxlY3Rpb25TdGF0ZS5wcm90b3R5cGUuZ2V0SXNCYWNrd2FyZCA9IGZ1bmN0aW9uIGdldElzQmFja3dhcmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdpc0JhY2t3YXJkJyk7XG4gIH07XG5cbiAgU2VsZWN0aW9uU3RhdGUucHJvdG90eXBlLmdldEhhc0ZvY3VzID0gZnVuY3Rpb24gZ2V0SGFzRm9jdXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdoYXNGb2N1cycpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGUgc3BlY2lmaWVkIHJhbmdlIG92ZXJsYXBzIHdpdGggYW4gZWRnZSBvZiB0aGVcbiAgICogU2VsZWN0aW9uU3RhdGUuXG4gICAqL1xuXG5cbiAgU2VsZWN0aW9uU3RhdGUucHJvdG90eXBlLmhhc0VkZ2VXaXRoaW4gPSBmdW5jdGlvbiBoYXNFZGdlV2l0aGluKGJsb2NrS2V5LCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIGFuY2hvcktleSA9IHRoaXMuZ2V0QW5jaG9yS2V5KCk7XG4gICAgdmFyIGZvY3VzS2V5ID0gdGhpcy5nZXRGb2N1c0tleSgpO1xuXG4gICAgaWYgKGFuY2hvcktleSA9PT0gZm9jdXNLZXkgJiYgYW5jaG9yS2V5ID09PSBibG9ja0tleSkge1xuICAgICAgdmFyIHNlbGVjdGlvblN0YXJ0ID0gdGhpcy5nZXRTdGFydE9mZnNldCgpO1xuICAgICAgdmFyIHNlbGVjdGlvbkVuZCA9IHRoaXMuZ2V0RW5kT2Zmc2V0KCk7XG4gICAgICByZXR1cm4gc3RhcnQgPD0gc2VsZWN0aW9uRW5kICYmIHNlbGVjdGlvblN0YXJ0IDw9IGVuZDtcbiAgICB9XG5cbiAgICBpZiAoYmxvY2tLZXkgIT09IGFuY2hvcktleSAmJiBibG9ja0tleSAhPT0gZm9jdXNLZXkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0VG9DaGVjayA9IGJsb2NrS2V5ID09PSBhbmNob3JLZXkgPyB0aGlzLmdldEFuY2hvck9mZnNldCgpIDogdGhpcy5nZXRGb2N1c09mZnNldCgpO1xuXG4gICAgcmV0dXJuIHN0YXJ0IDw9IG9mZnNldFRvQ2hlY2sgJiYgZW5kID49IG9mZnNldFRvQ2hlY2s7XG4gIH07XG5cbiAgU2VsZWN0aW9uU3RhdGUucHJvdG90eXBlLmlzQ29sbGFwc2VkID0gZnVuY3Rpb24gaXNDb2xsYXBzZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QW5jaG9yS2V5KCkgPT09IHRoaXMuZ2V0Rm9jdXNLZXkoKSAmJiB0aGlzLmdldEFuY2hvck9mZnNldCgpID09PSB0aGlzLmdldEZvY3VzT2Zmc2V0KCk7XG4gIH07XG5cbiAgU2VsZWN0aW9uU3RhdGUucHJvdG90eXBlLmdldFN0YXJ0S2V5ID0gZnVuY3Rpb24gZ2V0U3RhcnRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SXNCYWNrd2FyZCgpID8gdGhpcy5nZXRGb2N1c0tleSgpIDogdGhpcy5nZXRBbmNob3JLZXkoKTtcbiAgfTtcblxuICBTZWxlY3Rpb25TdGF0ZS5wcm90b3R5cGUuZ2V0U3RhcnRPZmZzZXQgPSBmdW5jdGlvbiBnZXRTdGFydE9mZnNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJc0JhY2t3YXJkKCkgPyB0aGlzLmdldEZvY3VzT2Zmc2V0KCkgOiB0aGlzLmdldEFuY2hvck9mZnNldCgpO1xuICB9O1xuXG4gIFNlbGVjdGlvblN0YXRlLnByb3RvdHlwZS5nZXRFbmRLZXkgPSBmdW5jdGlvbiBnZXRFbmRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SXNCYWNrd2FyZCgpID8gdGhpcy5nZXRBbmNob3JLZXkoKSA6IHRoaXMuZ2V0Rm9jdXNLZXkoKTtcbiAgfTtcblxuICBTZWxlY3Rpb25TdGF0ZS5wcm90b3R5cGUuZ2V0RW5kT2Zmc2V0ID0gZnVuY3Rpb24gZ2V0RW5kT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLmdldElzQmFja3dhcmQoKSA/IHRoaXMuZ2V0QW5jaG9yT2Zmc2V0KCkgOiB0aGlzLmdldEZvY3VzT2Zmc2V0KCk7XG4gIH07XG5cbiAgU2VsZWN0aW9uU3RhdGUuY3JlYXRlRW1wdHkgPSBmdW5jdGlvbiBjcmVhdGVFbXB0eShrZXkpIHtcbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvblN0YXRlKHtcbiAgICAgIGFuY2hvcktleToga2V5LFxuICAgICAgYW5jaG9yT2Zmc2V0OiAwLFxuICAgICAgZm9jdXNLZXk6IGtleSxcbiAgICAgIGZvY3VzT2Zmc2V0OiAwLFxuICAgICAgaXNCYWNrd2FyZDogZmFsc2UsXG4gICAgICBoYXNGb2N1czogZmFsc2VcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU2VsZWN0aW9uU3RhdGU7XG59KFNlbGVjdGlvblN0YXRlUmVjb3JkKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3Rpb25TdGF0ZTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZSgnLi9EcmFmdE1vZGlmaWVyJyk7XG5cbi8qKlxuICogRm9yIGEgY29sbGFwc2VkIHNlbGVjdGlvbiBzdGF0ZSwgcmVtb3ZlIHRleHQgYmFzZWQgb24gdGhlIHNwZWNpZmllZCBzdHJhdGVneS5cbiAqIElmIHRoZSBzZWxlY3Rpb24gc3RhdGUgaXMgbm90IGNvbGxhcHNlZCwgcmVtb3ZlIHRoZSBlbnRpcmUgc2VsZWN0ZWQgcmFuZ2UuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZVRleHRXaXRoU3RyYXRlZ3koZWRpdG9yU3RhdGUsIHN0cmF0ZWd5LCBkaXJlY3Rpb24pIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gIHZhciB0YXJnZXQgPSBzZWxlY3Rpb247XG4gIGlmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgIGlmIChkaXJlY3Rpb24gPT09ICdmb3J3YXJkJykge1xuICAgICAgaWYgKGVkaXRvclN0YXRlLmlzU2VsZWN0aW9uQXRFbmRPZkNvbnRlbnQoKSkge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVkaXRvclN0YXRlLmlzU2VsZWN0aW9uQXRTdGFydE9mQ29udGVudCgpKSB7XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG5cbiAgICB0YXJnZXQgPSBzdHJhdGVneShlZGl0b3JTdGF0ZSk7XG4gICAgaWYgKHRhcmdldCA9PT0gc2VsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIERyYWZ0TW9kaWZpZXIucmVtb3ZlUmFuZ2UoY29udGVudCwgdGFyZ2V0LCBkaXJlY3Rpb24pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZVRleHRXaXRoU3RyYXRlZ3k7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpc0V2ZW50SGFuZGxlZFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFV0aWxpdHkgbWV0aG9kIGZvciBkZXRlcm1pbmluZyB3aGV0aGVyIG9yIG5vdCB0aGUgdmFsdWUgcmV0dXJuZWRcbiAqIGZyb20gYSBoYW5kbGVyIGluZGljYXRlcyB0aGF0IGl0IHdhcyBoYW5kbGVkLlxuICovXG5mdW5jdGlvbiBpc0V2ZW50SGFuZGxlZCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09ICdoYW5kbGVkJyB8fCB2YWx1ZSA9PT0gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0V2ZW50SGFuZGxlZDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGZpbmRSYW5nZXNJbW11dGFibGVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTZWFyY2ggdGhyb3VnaCBhbiBhcnJheSB0byBmaW5kIGNvbnRpZ3VvdXMgc3RyZXRjaGVzIG9mIGVsZW1lbnRzIHRoYXRcbiAqIG1hdGNoIGEgc3BlY2lmaWVkIGZpbHRlciBmdW5jdGlvbi5cbiAqXG4gKiBXaGVuIHJhbmdlcyBhcmUgZm91bmQsIGV4ZWN1dGUgYSBzcGVjaWZpZWQgYGZvdW5kYCBmdW5jdGlvbiB0byBzdXBwbHlcbiAqIHRoZSB2YWx1ZXMgdG8gdGhlIGNhbGxlci5cbiAqL1xuZnVuY3Rpb24gZmluZFJhbmdlc0ltbXV0YWJsZShoYXlzdGFjaywgYXJlRXF1YWxGbiwgZmlsdGVyRm4sIGZvdW5kRm4pIHtcbiAgaWYgKCFoYXlzdGFjay5zaXplKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGN1cnNvciA9IDA7XG5cbiAgaGF5c3RhY2sucmVkdWNlKGZ1bmN0aW9uICh2YWx1ZSwgbmV4dFZhbHVlLCBuZXh0SW5kZXgpIHtcbiAgICBpZiAoIWFyZUVxdWFsRm4odmFsdWUsIG5leHRWYWx1ZSkpIHtcbiAgICAgIGlmIChmaWx0ZXJGbih2YWx1ZSkpIHtcbiAgICAgICAgZm91bmRGbihjdXJzb3IsIG5leHRJbmRleCk7XG4gICAgICB9XG4gICAgICBjdXJzb3IgPSBuZXh0SW5kZXg7XG4gICAgfVxuICAgIHJldHVybiBuZXh0VmFsdWU7XG4gIH0pO1xuXG4gIGZpbHRlckZuKGhheXN0YWNrLmxhc3QoKSkgJiYgZm91bmRGbihjdXJzb3IsIGhheXN0YWNrLmNvdW50KCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmRSYW5nZXNJbW11dGFibGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBCbG9ja01hcEJ1aWxkZXJcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG52YXIgT3JkZXJlZE1hcCA9IEltbXV0YWJsZS5PcmRlcmVkTWFwO1xuXG5cbnZhciBCbG9ja01hcEJ1aWxkZXIgPSB7XG4gIGNyZWF0ZUZyb21BcnJheTogZnVuY3Rpb24gY3JlYXRlRnJvbUFycmF5KGJsb2Nrcykge1xuICAgIHJldHVybiBPcmRlcmVkTWFwKGJsb2Nrcy5tYXAoZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gW2Jsb2NrLmdldEtleSgpLCBibG9ja107XG4gICAgfSkpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJsb2NrTWFwQnVpbGRlcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0T2Zmc2V0S2V5XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBLRVlfREVMSU1JVEVSID0gJy0nO1xuXG52YXIgRHJhZnRPZmZzZXRLZXkgPSB7XG4gIGVuY29kZTogZnVuY3Rpb24gZW5jb2RlKGJsb2NrS2V5LCBkZWNvcmF0b3JLZXksIGxlYWZLZXkpIHtcbiAgICByZXR1cm4gYmxvY2tLZXkgKyBLRVlfREVMSU1JVEVSICsgZGVjb3JhdG9yS2V5ICsgS0VZX0RFTElNSVRFUiArIGxlYWZLZXk7XG4gIH0sXG5cbiAgZGVjb2RlOiBmdW5jdGlvbiBkZWNvZGUob2Zmc2V0S2V5KSB7XG4gICAgdmFyIF9vZmZzZXRLZXkkc3BsaXQgPSBvZmZzZXRLZXkuc3BsaXQoS0VZX0RFTElNSVRFUiksXG4gICAgICAgIGJsb2NrS2V5ID0gX29mZnNldEtleSRzcGxpdFswXSxcbiAgICAgICAgZGVjb3JhdG9yS2V5ID0gX29mZnNldEtleSRzcGxpdFsxXSxcbiAgICAgICAgbGVhZktleSA9IF9vZmZzZXRLZXkkc3BsaXRbMl07XG5cbiAgICByZXR1cm4ge1xuICAgICAgYmxvY2tLZXk6IGJsb2NrS2V5LFxuICAgICAgZGVjb3JhdG9yS2V5OiBwYXJzZUludChkZWNvcmF0b3JLZXksIDEwKSxcbiAgICAgIGxlYWZLZXk6IHBhcnNlSW50KGxlYWZLZXksIDEwKVxuICAgIH07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRPZmZzZXRLZXk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIF9leHRlbmRzID0gX2Fzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdEVudGl0eVxuICogQGZvcm1hdFxuICogXG4gKi9cblxudmFyIERyYWZ0RW50aXR5SW5zdGFuY2UgPSByZXF1aXJlKCcuL0RyYWZ0RW50aXR5SW5zdGFuY2UnKTtcbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgTWFwID0gSW1tdXRhYmxlLk1hcDtcblxuXG52YXIgaW5zdGFuY2VzID0gTWFwKCk7XG52YXIgaW5zdGFuY2VLZXkgPSAwO1xuXG4vKipcbiAqIFRlbXBvcmFyeSB1dGlsaXR5IGZvciBnZW5lcmF0aW5nIHRoZSB3YXJuaW5nc1xuICovXG5mdW5jdGlvbiBsb2dXYXJuaW5nKG9sZE1ldGhvZENhbGwsIG5ld01ldGhvZENhbGwpIHtcbiAgY29uc29sZS53YXJuKCdXQVJOSU5HOiAnICsgb2xkTWV0aG9kQ2FsbCArICcgd2lsbCBiZSBkZXByZWNhdGVkIHNvb24hXFxuUGxlYXNlIHVzZSBcIicgKyBuZXdNZXRob2RDYWxsICsgJ1wiIGluc3RlYWQuJyk7XG59XG5cbi8qKlxuICogQSBcImRvY3VtZW50IGVudGl0eVwiIGlzIGFuIG9iamVjdCBjb250YWluaW5nIG1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCBhXG4gKiBwaWVjZSBvZiB0ZXh0IGluIGEgQ29udGVudEJsb2NrLlxuICpcbiAqIEZvciBleGFtcGxlLCBhIGBsaW5rYCBlbnRpdHkgbWlnaHQgaW5jbHVkZSBhIGB1cmlgIHByb3BlcnR5LiBXaGVuIGFcbiAqIENvbnRlbnRCbG9jayBpcyByZW5kZXJlZCBpbiB0aGUgYnJvd3NlciwgdGV4dCB0aGF0IHJlZmVycyB0byB0aGF0IGxpbmtcbiAqIGVudGl0eSBtYXkgYmUgcmVuZGVyZWQgYXMgYW4gYW5jaG9yLCB3aXRoIHRoZSBgdXJpYCBhcyB0aGUgaHJlZiB2YWx1ZS5cbiAqXG4gKiBJbiBhIENvbnRlbnRCbG9jaywgZXZlcnkgcG9zaXRpb24gaW4gdGhlIHRleHQgbWF5IGNvcnJlc3BvbmQgdG8gemVyb1xuICogb3Igb25lIGVudGl0aWVzLiBUaGlzIGNvcnJlc3BvbmRlbmNlIGlzIHRyYWNrZWQgdXNpbmcgYSBrZXkgc3RyaW5nLFxuICogZ2VuZXJhdGVkIHZpYSBEcmFmdEVudGl0eS5jcmVhdGUoKSBhbmQgdXNlZCB0byBvYnRhaW4gZW50aXR5IG1ldGFkYXRhXG4gKiB2aWEgRHJhZnRFbnRpdHkuZ2V0KCkuXG4gKi9cbnZhciBEcmFmdEVudGl0eSA9IHtcbiAgLyoqXG4gICAqIFdBUk5JTkc6IFRoaXMgbWV0aG9kIHdpbGwgYmUgZGVwcmVjYXRlZCBzb29uIVxuICAgKiBQbGVhc2UgdXNlICdjb250ZW50U3RhdGUuZ2V0TGFzdENyZWF0ZWRFbnRpdHlLZXknIGluc3RlYWQuXG4gICAqIC0tLVxuICAgKiBHZXQgdGhlIHJhbmRvbSBrZXkgc3RyaW5nIGZyb20gd2hhdGV2ZXIgZW50aXR5IHdhcyBsYXN0IGNyZWF0ZWQuXG4gICAqIFdlIG5lZWQgdGhpcyB0byBzdXBwb3J0IHRoZSBuZXcgQVBJLCBhcyBwYXJ0IG9mIHRyYW5zaXRpb25pbmcgdG8gcHV0IEVudGl0eVxuICAgKiBzdG9yYWdlIGluIGNvbnRlbnRTdGF0ZS5cbiAgICovXG4gIGdldExhc3RDcmVhdGVkRW50aXR5S2V5OiBmdW5jdGlvbiBnZXRMYXN0Q3JlYXRlZEVudGl0eUtleSgpIHtcbiAgICBsb2dXYXJuaW5nKCdEcmFmdEVudGl0eS5nZXRMYXN0Q3JlYXRlZEVudGl0eUtleScsICdjb250ZW50U3RhdGUuZ2V0TGFzdENyZWF0ZWRFbnRpdHlLZXknKTtcbiAgICByZXR1cm4gRHJhZnRFbnRpdHkuX19nZXRMYXN0Q3JlYXRlZEVudGl0eUtleSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBXQVJOSU5HOiBUaGlzIG1ldGhvZCB3aWxsIGJlIGRlcHJlY2F0ZWQgc29vbiFcbiAgICogUGxlYXNlIHVzZSAnY29udGVudFN0YXRlLmNyZWF0ZUVudGl0eScgaW5zdGVhZC5cbiAgICogLS0tXG4gICAqIENyZWF0ZSBhIERyYWZ0RW50aXR5SW5zdGFuY2UgYW5kIHN0b3JlIGl0IGZvciBsYXRlciByZXRyaWV2YWwuXG4gICAqXG4gICAqIEEgcmFuZG9tIGtleSBzdHJpbmcgd2lsbCBiZSBnZW5lcmF0ZWQgYW5kIHJldHVybmVkLiBUaGlzIGtleSBtYXlcbiAgICogYmUgdXNlZCB0byB0cmFjayB0aGUgZW50aXR5J3MgdXNhZ2UgaW4gYSBDb250ZW50QmxvY2ssIGFuZCBmb3JcbiAgICogcmV0cmlldmluZyBkYXRhIGFib3V0IHRoZSBlbnRpdHkgYXQgcmVuZGVyIHRpbWUuXG4gICAqL1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSh0eXBlLCBtdXRhYmlsaXR5LCBkYXRhKSB7XG4gICAgbG9nV2FybmluZygnRHJhZnRFbnRpdHkuY3JlYXRlJywgJ2NvbnRlbnRTdGF0ZS5jcmVhdGVFbnRpdHknKTtcbiAgICByZXR1cm4gRHJhZnRFbnRpdHkuX19jcmVhdGUodHlwZSwgbXV0YWJpbGl0eSwgZGF0YSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdBUk5JTkc6IFRoaXMgbWV0aG9kIHdpbGwgYmUgZGVwcmVjYXRlZCBzb29uIVxuICAgKiBQbGVhc2UgdXNlICdjb250ZW50U3RhdGUuYWRkRW50aXR5JyBpbnN0ZWFkLlxuICAgKiAtLS1cbiAgICogQWRkIGFuIGV4aXN0aW5nIERyYWZ0RW50aXR5SW5zdGFuY2UgdG8gdGhlIERyYWZ0RW50aXR5IG1hcC4gVGhpcyBpc1xuICAgKiB1c2VmdWwgd2hlbiByZXN0b3JpbmcgaW5zdGFuY2VzIGZyb20gdGhlIHNlcnZlci5cbiAgICovXG4gIGFkZDogZnVuY3Rpb24gYWRkKGluc3RhbmNlKSB7XG4gICAgbG9nV2FybmluZygnRHJhZnRFbnRpdHkuYWRkJywgJ2NvbnRlbnRTdGF0ZS5hZGRFbnRpdHknKTtcbiAgICByZXR1cm4gRHJhZnRFbnRpdHkuX19hZGQoaW5zdGFuY2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBXQVJOSU5HOiBUaGlzIG1ldGhvZCB3aWxsIGJlIGRlcHJlY2F0ZWQgc29vbiFcbiAgICogUGxlYXNlIHVzZSAnY29udGVudFN0YXRlLmdldEVudGl0eScgaW5zdGVhZC5cbiAgICogLS0tXG4gICAqIFJldHJpZXZlIHRoZSBlbnRpdHkgY29ycmVzcG9uZGluZyB0byB0aGUgc3VwcGxpZWQga2V5IHN0cmluZy5cbiAgICovXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGxvZ1dhcm5pbmcoJ0RyYWZ0RW50aXR5LmdldCcsICdjb250ZW50U3RhdGUuZ2V0RW50aXR5Jyk7XG4gICAgcmV0dXJuIERyYWZ0RW50aXR5Ll9fZ2V0KGtleSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdBUk5JTkc6IFRoaXMgbWV0aG9kIHdpbGwgYmUgZGVwcmVjYXRlZCBzb29uIVxuICAgKiBQbGVhc2UgdXNlICdjb250ZW50U3RhdGUubWVyZ2VFbnRpdHlEYXRhJyBpbnN0ZWFkLlxuICAgKiAtLS1cbiAgICogRW50aXR5IGluc3RhbmNlcyBhcmUgaW1tdXRhYmxlLiBJZiB5b3UgbmVlZCB0byB1cGRhdGUgdGhlIGRhdGEgZm9yIGFuXG4gICAqIGluc3RhbmNlLCB0aGlzIG1ldGhvZCB3aWxsIG1lcmdlIHlvdXIgZGF0YSB1cGRhdGVzIGFuZCByZXR1cm4gYSBuZXdcbiAgICogaW5zdGFuY2UuXG4gICAqL1xuICBtZXJnZURhdGE6IGZ1bmN0aW9uIG1lcmdlRGF0YShrZXksIHRvTWVyZ2UpIHtcbiAgICBsb2dXYXJuaW5nKCdEcmFmdEVudGl0eS5tZXJnZURhdGEnLCAnY29udGVudFN0YXRlLm1lcmdlRW50aXR5RGF0YScpO1xuICAgIHJldHVybiBEcmFmdEVudGl0eS5fX21lcmdlRGF0YShrZXksIHRvTWVyZ2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBXQVJOSU5HOiBUaGlzIG1ldGhvZCB3aWxsIGJlIGRlcHJlY2F0ZWQgc29vbiFcbiAgICogUGxlYXNlIHVzZSAnY29udGVudFN0YXRlLnJlcGxhY2VFbnRpdHlEYXRhJyBpbnN0ZWFkLlxuICAgKiAtLS1cbiAgICogQ29tcGxldGVseSByZXBsYWNlIHRoZSBkYXRhIGZvciBhIGdpdmVuIGluc3RhbmNlLlxuICAgKi9cbiAgcmVwbGFjZURhdGE6IGZ1bmN0aW9uIHJlcGxhY2VEYXRhKGtleSwgbmV3RGF0YSkge1xuICAgIGxvZ1dhcm5pbmcoJ0RyYWZ0RW50aXR5LnJlcGxhY2VEYXRhJywgJ2NvbnRlbnRTdGF0ZS5yZXBsYWNlRW50aXR5RGF0YScpO1xuICAgIHJldHVybiBEcmFmdEVudGl0eS5fX3JlcGxhY2VEYXRhKGtleSwgbmV3RGF0YSk7XG4gIH0sXG5cbiAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipXQVJOSU5HKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gIC8vIC0tLSB0aGUgYWJvdmUgcHVibGljIEFQSSB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIG5leHQgdmVyc2lvbiBvZiBEcmFmdCFcbiAgLy8gVGhlIG1ldGhvZHMgYmVsb3cgdGhpcyBsaW5lIGFyZSBwcml2YXRlIC0gZG9uJ3QgY2FsbCB0aGVtIGRpcmVjdGx5LlxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHJhbmRvbSBrZXkgc3RyaW5nIGZyb20gd2hhdGV2ZXIgZW50aXR5IHdhcyBsYXN0IGNyZWF0ZWQuXG4gICAqIFdlIG5lZWQgdGhpcyB0byBzdXBwb3J0IHRoZSBuZXcgQVBJLCBhcyBwYXJ0IG9mIHRyYW5zaXRpb25pbmcgdG8gcHV0IEVudGl0eVxuICAgKiBzdG9yYWdlIGluIGNvbnRlbnRTdGF0ZS5cbiAgICovXG4gIF9fZ2V0TGFzdENyZWF0ZWRFbnRpdHlLZXk6IGZ1bmN0aW9uIF9fZ2V0TGFzdENyZWF0ZWRFbnRpdHlLZXkoKSB7XG4gICAgcmV0dXJuICcnICsgaW5zdGFuY2VLZXk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERyYWZ0RW50aXR5SW5zdGFuY2UgYW5kIHN0b3JlIGl0IGZvciBsYXRlciByZXRyaWV2YWwuXG4gICAqXG4gICAqIEEgcmFuZG9tIGtleSBzdHJpbmcgd2lsbCBiZSBnZW5lcmF0ZWQgYW5kIHJldHVybmVkLiBUaGlzIGtleSBtYXlcbiAgICogYmUgdXNlZCB0byB0cmFjayB0aGUgZW50aXR5J3MgdXNhZ2UgaW4gYSBDb250ZW50QmxvY2ssIGFuZCBmb3JcbiAgICogcmV0cmlldmluZyBkYXRhIGFib3V0IHRoZSBlbnRpdHkgYXQgcmVuZGVyIHRpbWUuXG4gICAqL1xuICBfX2NyZWF0ZTogZnVuY3Rpb24gX19jcmVhdGUodHlwZSwgbXV0YWJpbGl0eSwgZGF0YSkge1xuICAgIHJldHVybiBEcmFmdEVudGl0eS5fX2FkZChuZXcgRHJhZnRFbnRpdHlJbnN0YW5jZSh7IHR5cGU6IHR5cGUsIG11dGFiaWxpdHk6IG11dGFiaWxpdHksIGRhdGE6IGRhdGEgfHwge30gfSkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGQgYW4gZXhpc3RpbmcgRHJhZnRFbnRpdHlJbnN0YW5jZSB0byB0aGUgRHJhZnRFbnRpdHkgbWFwLiBUaGlzIGlzXG4gICAqIHVzZWZ1bCB3aGVuIHJlc3RvcmluZyBpbnN0YW5jZXMgZnJvbSB0aGUgc2VydmVyLlxuICAgKi9cbiAgX19hZGQ6IGZ1bmN0aW9uIF9fYWRkKGluc3RhbmNlKSB7XG4gICAgdmFyIGtleSA9ICcnICsgKytpbnN0YW5jZUtleTtcbiAgICBpbnN0YW5jZXMgPSBpbnN0YW5jZXMuc2V0KGtleSwgaW5zdGFuY2UpO1xuICAgIHJldHVybiBrZXk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSBlbnRpdHkgY29ycmVzcG9uZGluZyB0byB0aGUgc3VwcGxpZWQga2V5IHN0cmluZy5cbiAgICovXG4gIF9fZ2V0OiBmdW5jdGlvbiBfX2dldChrZXkpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZXMuZ2V0KGtleSk7XG4gICAgISEhaW5zdGFuY2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVW5rbm93biBEcmFmdEVudGl0eSBrZXk6ICVzLicsIGtleSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSxcblxuICAvKipcbiAgICogRW50aXR5IGluc3RhbmNlcyBhcmUgaW1tdXRhYmxlLiBJZiB5b3UgbmVlZCB0byB1cGRhdGUgdGhlIGRhdGEgZm9yIGFuXG4gICAqIGluc3RhbmNlLCB0aGlzIG1ldGhvZCB3aWxsIG1lcmdlIHlvdXIgZGF0YSB1cGRhdGVzIGFuZCByZXR1cm4gYSBuZXdcbiAgICogaW5zdGFuY2UuXG4gICAqL1xuICBfX21lcmdlRGF0YTogZnVuY3Rpb24gX19tZXJnZURhdGEoa2V5LCB0b01lcmdlKSB7XG4gICAgdmFyIGluc3RhbmNlID0gRHJhZnRFbnRpdHkuX19nZXQoa2V5KTtcbiAgICB2YXIgbmV3RGF0YSA9IF9leHRlbmRzKHt9LCBpbnN0YW5jZS5nZXREYXRhKCksIHRvTWVyZ2UpO1xuICAgIHZhciBuZXdJbnN0YW5jZSA9IGluc3RhbmNlLnNldCgnZGF0YScsIG5ld0RhdGEpO1xuICAgIGluc3RhbmNlcyA9IGluc3RhbmNlcy5zZXQoa2V5LCBuZXdJbnN0YW5jZSk7XG4gICAgcmV0dXJuIG5ld0luc3RhbmNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wbGV0ZWx5IHJlcGxhY2UgdGhlIGRhdGEgZm9yIGEgZ2l2ZW4gaW5zdGFuY2UuXG4gICAqL1xuICBfX3JlcGxhY2VEYXRhOiBmdW5jdGlvbiBfX3JlcGxhY2VEYXRhKGtleSwgbmV3RGF0YSkge1xuICAgIHZhciBpbnN0YW5jZSA9IERyYWZ0RW50aXR5Ll9fZ2V0KGtleSk7XG4gICAgdmFyIG5ld0luc3RhbmNlID0gaW5zdGFuY2Uuc2V0KCdkYXRhJywgbmV3RGF0YSk7XG4gICAgaW5zdGFuY2VzID0gaW5zdGFuY2VzLnNldChrZXksIG5ld0luc3RhbmNlKTtcbiAgICByZXR1cm4gbmV3SW5zdGFuY2U7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRFbnRpdHk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRDb250ZW50U3RhdGVGcmFnbWVudFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmFuZG9taXplQmxvY2tNYXBLZXlzID0gcmVxdWlyZSgnLi9yYW5kb21pemVCbG9ja01hcEtleXMnKTtcbnZhciByZW1vdmVFbnRpdGllc0F0RWRnZXMgPSByZXF1aXJlKCcuL3JlbW92ZUVudGl0aWVzQXRFZGdlcycpO1xuXG52YXIgZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQgPSBmdW5jdGlvbiBnZXRDb250ZW50U3RhdGVGcmFnbWVudChjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlKSB7XG4gIHZhciBzdGFydEtleSA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0S2V5KCk7XG4gIHZhciBzdGFydE9mZnNldCA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0T2Zmc2V0KCk7XG4gIHZhciBlbmRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRFbmRLZXkoKTtcbiAgdmFyIGVuZE9mZnNldCA9IHNlbGVjdGlvblN0YXRlLmdldEVuZE9mZnNldCgpO1xuXG4gIC8vIEVkZ2UgZW50aXRpZXMgc2hvdWxkIGJlIHN0cmlwcGVkIHRvIGVuc3VyZSB0aGF0IHdlIGRvbid0IHByZXNlcnZlXG4gIC8vIGludmFsaWQgcGFydGlhbCBlbnRpdGllcyB3aGVuIHRoZSBmcmFnbWVudCBpcyByZXVzZWQuIFdlIGRvLCBob3dldmVyLFxuICAvLyBwcmVzZXJ2ZSBlbnRpdGllcyB0aGF0IGFyZSBlbnRpcmVseSB3aXRoaW4gdGhlIHNlbGVjdGlvbiByYW5nZS5cbiAgdmFyIGNvbnRlbnRXaXRob3V0RWRnZUVudGl0aWVzID0gcmVtb3ZlRW50aXRpZXNBdEVkZ2VzKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUpO1xuXG4gIHZhciBibG9ja01hcCA9IGNvbnRlbnRXaXRob3V0RWRnZUVudGl0aWVzLmdldEJsb2NrTWFwKCk7XG4gIHZhciBibG9ja0tleXMgPSBibG9ja01hcC5rZXlTZXEoKTtcbiAgdmFyIHN0YXJ0SW5kZXggPSBibG9ja0tleXMuaW5kZXhPZihzdGFydEtleSk7XG4gIHZhciBlbmRJbmRleCA9IGJsb2NrS2V5cy5pbmRleE9mKGVuZEtleSkgKyAxO1xuXG4gIHJldHVybiByYW5kb21pemVCbG9ja01hcEtleXMoYmxvY2tNYXAuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpLm1hcChmdW5jdGlvbiAoYmxvY2ssIGJsb2NrS2V5KSB7XG4gICAgdmFyIHRleHQgPSBibG9jay5nZXRUZXh0KCk7XG4gICAgdmFyIGNoYXJzID0gYmxvY2suZ2V0Q2hhcmFjdGVyTGlzdCgpO1xuXG4gICAgaWYgKHN0YXJ0S2V5ID09PSBlbmRLZXkpIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIHRleHQ6IHRleHQuc2xpY2Uoc3RhcnRPZmZzZXQsIGVuZE9mZnNldCksXG4gICAgICAgIGNoYXJhY3Rlckxpc3Q6IGNoYXJzLnNsaWNlKHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoYmxvY2tLZXkgPT09IHN0YXJ0S2V5KSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICB0ZXh0OiB0ZXh0LnNsaWNlKHN0YXJ0T2Zmc2V0KSxcbiAgICAgICAgY2hhcmFjdGVyTGlzdDogY2hhcnMuc2xpY2Uoc3RhcnRPZmZzZXQpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoYmxvY2tLZXkgPT09IGVuZEtleSkge1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgdGV4dDogdGV4dC5zbGljZSgwLCBlbmRPZmZzZXQpLFxuICAgICAgICBjaGFyYWN0ZXJMaXN0OiBjaGFycy5zbGljZSgwLCBlbmRPZmZzZXQpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmxvY2s7XG4gIH0pKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG1vdmVTZWxlY3Rpb25CYWNrd2FyZFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEdpdmVuIGEgY29sbGFwc2VkIHNlbGVjdGlvbiwgbW92ZSB0aGUgZm9jdXMgYG1heERpc3RhbmNlYCBiYWNrd2FyZCB3aXRoaW5cbiAqIHRoZSBzZWxlY3RlZCBibG9jay4gSWYgdGhlIHNlbGVjdGlvbiB3aWxsIGdvIGJleW9uZCB0aGUgc3RhcnQgb2YgdGhlIGJsb2NrLFxuICogbW92ZSBmb2N1cyB0byB0aGUgZW5kIG9mIHRoZSBwcmV2aW91cyBibG9jaywgYnV0IG5vIGZ1cnRoZXIuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBub3QgVW5pY29kZS1hd2FyZSwgc28gc3Vycm9nYXRlIHBhaXJzIHdpbGwgYmUgdHJlYXRlZFxuICogYXMgaGF2aW5nIGxlbmd0aCAyLlxuICovXG5mdW5jdGlvbiBtb3ZlU2VsZWN0aW9uQmFja3dhcmQoZWRpdG9yU3RhdGUsIG1heERpc3RhbmNlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGNvbnRlbnQgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICB2YXIga2V5ID0gc2VsZWN0aW9uLmdldFN0YXJ0S2V5KCk7XG4gIHZhciBvZmZzZXQgPSBzZWxlY3Rpb24uZ2V0U3RhcnRPZmZzZXQoKTtcblxuICB2YXIgZm9jdXNLZXkgPSBrZXk7XG4gIHZhciBmb2N1c09mZnNldCA9IDA7XG5cbiAgaWYgKG1heERpc3RhbmNlID4gb2Zmc2V0KSB7XG4gICAgdmFyIGtleUJlZm9yZSA9IGNvbnRlbnQuZ2V0S2V5QmVmb3JlKGtleSk7XG4gICAgaWYgKGtleUJlZm9yZSA9PSBudWxsKSB7XG4gICAgICBmb2N1c0tleSA9IGtleTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9jdXNLZXkgPSBrZXlCZWZvcmU7XG4gICAgICB2YXIgYmxvY2tCZWZvcmUgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGtleUJlZm9yZSk7XG4gICAgICBmb2N1c09mZnNldCA9IGJsb2NrQmVmb3JlLmdldFRleHQoKS5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvY3VzT2Zmc2V0ID0gb2Zmc2V0IC0gbWF4RGlzdGFuY2U7XG4gIH1cblxuICByZXR1cm4gc2VsZWN0aW9uLm1lcmdlKHtcbiAgICBmb2N1c0tleTogZm9jdXNLZXksXG4gICAgZm9jdXNPZmZzZXQ6IGZvY3VzT2Zmc2V0LFxuICAgIGlzQmFja3dhcmQ6IHRydWVcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW92ZVNlbGVjdGlvbkJhY2t3YXJkOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgS2V5QmluZGluZ1V0aWxcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFVzZXJBZ2VudCA9IHJlcXVpcmUoJ2ZianMvbGliL1VzZXJBZ2VudCcpO1xuXG52YXIgaXNPU1ggPSBVc2VyQWdlbnQuaXNQbGF0Zm9ybSgnTWFjIE9TIFgnKTtcblxudmFyIEtleUJpbmRpbmdVdGlsID0ge1xuICAvKipcbiAgICogQ2hlY2sgd2hldGhlciB0aGUgY3RybEtleSBtb2RpZmllciBpcyAqbm90KiBiZWluZyB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGhcbiAgICogdGhlIGFsdEtleSBtb2RpZmllci4gSWYgdGhleSBhcmUgY29tYmluZWQsIHRoZSByZXN1bHQgaXMgYW4gYGFsdEdyYXBoYFxuICAgKiBrZXkgbW9kaWZpZXIsIHdoaWNoIHNob3VsZCBub3QgYmUgaGFuZGxlZCBieSB0aGlzIHNldCBvZiBrZXkgYmluZGluZ3MuXG4gICAqL1xuICBpc0N0cmxLZXlDb21tYW5kOiBmdW5jdGlvbiBpc0N0cmxLZXlDb21tYW5kKGUpIHtcbiAgICByZXR1cm4gISFlLmN0cmxLZXkgJiYgIWUuYWx0S2V5O1xuICB9LFxuXG4gIGlzT3B0aW9uS2V5Q29tbWFuZDogZnVuY3Rpb24gaXNPcHRpb25LZXlDb21tYW5kKGUpIHtcbiAgICByZXR1cm4gaXNPU1ggJiYgZS5hbHRLZXk7XG4gIH0sXG5cbiAgaGFzQ29tbWFuZE1vZGlmaWVyOiBmdW5jdGlvbiBoYXNDb21tYW5kTW9kaWZpZXIoZSkge1xuICAgIHJldHVybiBpc09TWCA/ICEhZS5tZXRhS2V5ICYmICFlLmFsdEtleSA6IEtleUJpbmRpbmdVdGlsLmlzQ3RybEtleUNvbW1hbmQoZSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5QmluZGluZ1V0aWw7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmaW5kQW5jZXN0b3JPZmZzZXRLZXlcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGdldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGUgPSByZXF1aXJlKCcuL2dldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGUnKTtcblxuLyoqXG4gKiBHZXQgdGhlIGtleSBmcm9tIHRoZSBub2RlJ3MgbmVhcmVzdCBvZmZzZXQtYXdhcmUgYW5jZXN0b3IuXG4gKi9cbmZ1bmN0aW9uIGZpbmRBbmNlc3Rvck9mZnNldEtleShub2RlKSB7XG4gIHZhciBzZWFyY2hOb2RlID0gbm9kZTtcbiAgd2hpbGUgKHNlYXJjaE5vZGUgJiYgc2VhcmNoTm9kZSAhPT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgdmFyIGtleSA9IGdldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGUoc2VhcmNoTm9kZSk7XG4gICAgaWYgKGtleSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgICBzZWFyY2hOb2RlID0gc2VhcmNoTm9kZS5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmRBbmNlc3Rvck9mZnNldEtleTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0RG9jdW1lbnRTY3JvbGxFbGVtZW50ID0gcmVxdWlyZSgnLi9nZXREb2N1bWVudFNjcm9sbEVsZW1lbnQnKTtcbnZhciBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbiA9IHJlcXVpcmUoJy4vZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24nKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIHN1cHBsaWVkIGVsZW1lbnQgb3Igd2luZG93LlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWVzIGFyZSBib3VuZGVkLiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHNjcm9sbCBwb3NpdGlvbiBpc1xuICogbmVnYXRpdmUgb3IgZXhjZWVkcyB0aGUgZWxlbWVudCBib3VuZGFyaWVzICh3aGljaCBpcyBwb3NzaWJsZSB1c2luZyBpbmVydGlhbFxuICogc2Nyb2xsaW5nKSwgeW91IHdpbGwgZ2V0IHplcm8gb3IgdGhlIG1heGltdW0gc2Nyb2xsIHBvc2l0aW9uLCByZXNwZWN0aXZlbHkuXG4gKlxuICogSWYgeW91IG5lZWQgdGhlIHVuYm91bmQgc2Nyb2xsIHBvc2l0aW9uLCB1c2UgYGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uYC5cbiAqXG4gKiBAcGFyYW0ge0RPTVdpbmRvd3xET01FbGVtZW50fSBzY3JvbGxhYmxlXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcCB3aXRoIGB4YCBhbmQgYHlgIGtleXMuXG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbFBvc2l0aW9uKHNjcm9sbGFibGUpIHtcbiAgdmFyIGRvY3VtZW50U2Nyb2xsRWxlbWVudCA9IGdldERvY3VtZW50U2Nyb2xsRWxlbWVudChzY3JvbGxhYmxlLm93bmVyRG9jdW1lbnQgfHwgc2Nyb2xsYWJsZS5kb2N1bWVudCk7XG4gIGlmIChzY3JvbGxhYmxlLldpbmRvdyAmJiBzY3JvbGxhYmxlIGluc3RhbmNlb2Ygc2Nyb2xsYWJsZS5XaW5kb3cpIHtcbiAgICBzY3JvbGxhYmxlID0gZG9jdW1lbnRTY3JvbGxFbGVtZW50O1xuICB9XG4gIHZhciBzY3JvbGxQb3NpdGlvbiA9IGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uKHNjcm9sbGFibGUpO1xuXG4gIHZhciB2aWV3cG9ydCA9IHNjcm9sbGFibGUgPT09IGRvY3VtZW50U2Nyb2xsRWxlbWVudCA/IHNjcm9sbGFibGUub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgOiBzY3JvbGxhYmxlO1xuXG4gIHZhciB4TWF4ID0gc2Nyb2xsYWJsZS5zY3JvbGxXaWR0aCAtIHZpZXdwb3J0LmNsaWVudFdpZHRoO1xuICB2YXIgeU1heCA9IHNjcm9sbGFibGUuc2Nyb2xsSGVpZ2h0IC0gdmlld3BvcnQuY2xpZW50SGVpZ2h0O1xuXG4gIHNjcm9sbFBvc2l0aW9uLnggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihzY3JvbGxQb3NpdGlvbi54LCB4TWF4KSk7XG4gIHNjcm9sbFBvc2l0aW9uLnkgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihzY3JvbGxQb3NpdGlvbi55LCB5TWF4KSk7XG5cbiAgcmV0dXJuIHNjcm9sbFBvc2l0aW9uO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFNjcm9sbFBvc2l0aW9uOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBnZXRTdHlsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9nZXRTdHlsZVByb3BlcnR5Jyk7XG5cbi8qKlxuICogQHBhcmFtIHtET01Ob2RlfSBlbGVtZW50IFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE92ZXJmbG93IHN0eWxlIHByb3BlcnR5IG5hbWUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBzdXBwbGllZCBuZG9lIGlzIHNjcm9sbGFibGUuXG4gKi9cbmZ1bmN0aW9uIF9pc05vZGVTY3JvbGxhYmxlKGVsZW1lbnQsIG5hbWUpIHtcbiAgdmFyIG92ZXJmbG93ID0gU3R5bGUuZ2V0KGVsZW1lbnQsIG5hbWUpO1xuICByZXR1cm4gb3ZlcmZsb3cgPT09ICdhdXRvJyB8fCBvdmVyZmxvdyA9PT0gJ3Njcm9sbCc7XG59XG5cbi8qKlxuICogVXRpbGl0aWVzIGZvciBxdWVyeWluZyBhbmQgbXV0YXRpbmcgc3R5bGUgcHJvcGVydGllcy5cbiAqL1xudmFyIFN0eWxlID0ge1xuICAvKipcbiAgICogR2V0cyB0aGUgc3R5bGUgcHJvcGVydHkgZm9yIHRoZSBzdXBwbGllZCBub2RlLiBUaGlzIHdpbGwgcmV0dXJuIGVpdGhlciB0aGVcbiAgICogY29tcHV0ZWQgc3R5bGUsIGlmIGF2YWlsYWJsZSwgb3IgdGhlIGRlY2xhcmVkIHN0eWxlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTU5vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgU3R5bGUgcHJvcGVydHkgbmFtZS5cbiAgICogQHJldHVybiB7P3N0cmluZ30gU3R5bGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBnZXQ6IGdldFN0eWxlUHJvcGVydHksXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIG5lYXJlc3QgYW5jZXN0b3Igb2YgYSBub2RlIHRoYXQgaXMgc2Nyb2xsYWJsZS5cbiAgICpcbiAgICogTk9URTogVGhpcyBjYW4gYmUgZXhwZW5zaXZlIGlmIHVzZWQgcmVwZWF0ZWRseSBvciBvbiBhIG5vZGUgbmVzdGVkIGRlZXBseS5cbiAgICpcbiAgICogQHBhcmFtIHs/RE9NTm9kZX0gbm9kZSBOb2RlIGZyb20gd2hpY2ggdG8gc3RhcnQgc2VhcmNoaW5nLlxuICAgKiBAcmV0dXJuIHs/RE9NV2luZG93fERPTUVsZW1lbnR9IFNjcm9sbCBwYXJlbnQgb2YgdGhlIHN1cHBsaWVkIG5vZGUuXG4gICAqL1xuICBnZXRTY3JvbGxQYXJlbnQ6IGZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlKSB7XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgd2hpbGUgKG5vZGUgJiYgbm9kZSAhPT0gb3duZXJEb2N1bWVudC5ib2R5KSB7XG4gICAgICBpZiAoX2lzTm9kZVNjcm9sbGFibGUobm9kZSwgJ292ZXJmbG93JykgfHwgX2lzTm9kZVNjcm9sbGFibGUobm9kZSwgJ292ZXJmbG93WScpIHx8IF9pc05vZGVTY3JvbGxhYmxlKG5vZGUsICdvdmVyZmxvd1gnKSkge1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICAgIHJldHVybiBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IG93bmVyRG9jdW1lbnQucGFyZW50V2luZG93O1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3R5bGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFbnRpdHlLZXlGb3JTZWxlY3Rpb25cbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGVudGl0eSBrZXkgdGhhdCBzaG91bGQgYmUgdXNlZCB3aGVuIGluc2VydGluZyB0ZXh0IGZvciB0aGVcbiAqIHNwZWNpZmllZCB0YXJnZXQgc2VsZWN0aW9uLCBvbmx5IGlmIHRoZSBlbnRpdHkgaXMgYE1VVEFCTEVgLiBgSU1NVVRBQkxFYFxuICogYW5kIGBTRUdNRU5URURgIGVudGl0aWVzIHNob3VsZCBub3QgYmUgdXNlZCBmb3IgaW5zZXJ0aW9uIGJlaGF2aW9yLlxuICovXG5mdW5jdGlvbiBnZXRFbnRpdHlLZXlGb3JTZWxlY3Rpb24oY29udGVudFN0YXRlLCB0YXJnZXRTZWxlY3Rpb24pIHtcbiAgdmFyIGVudGl0eUtleTtcblxuICBpZiAodGFyZ2V0U2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkpIHtcbiAgICB2YXIga2V5ID0gdGFyZ2V0U2VsZWN0aW9uLmdldEFuY2hvcktleSgpO1xuICAgIHZhciBvZmZzZXQgPSB0YXJnZXRTZWxlY3Rpb24uZ2V0QW5jaG9yT2Zmc2V0KCk7XG4gICAgaWYgKG9mZnNldCA+IDApIHtcbiAgICAgIGVudGl0eUtleSA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja0ZvcktleShrZXkpLmdldEVudGl0eUF0KG9mZnNldCAtIDEpO1xuICAgICAgaWYgKGVudGl0eUtleSAhPT0gY29udGVudFN0YXRlLmdldEJsb2NrRm9yS2V5KGtleSkuZ2V0RW50aXR5QXQob2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmaWx0ZXJLZXkoY29udGVudFN0YXRlLmdldEVudGl0eU1hcCgpLCBlbnRpdHlLZXkpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBzdGFydEtleSA9IHRhcmdldFNlbGVjdGlvbi5nZXRTdGFydEtleSgpO1xuICB2YXIgc3RhcnRPZmZzZXQgPSB0YXJnZXRTZWxlY3Rpb24uZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIHN0YXJ0QmxvY2sgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tGb3JLZXkoc3RhcnRLZXkpO1xuXG4gIGVudGl0eUtleSA9IHN0YXJ0T2Zmc2V0ID09PSBzdGFydEJsb2NrLmdldExlbmd0aCgpID8gbnVsbCA6IHN0YXJ0QmxvY2suZ2V0RW50aXR5QXQoc3RhcnRPZmZzZXQpO1xuXG4gIHJldHVybiBmaWx0ZXJLZXkoY29udGVudFN0YXRlLmdldEVudGl0eU1hcCgpLCBlbnRpdHlLZXkpO1xufVxuXG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIGFuIGVudGl0eSBrZXkgY29ycmVzcG9uZHMgdG8gYSBgTVVUQUJMRWAgZW50aXR5LiBJZiBzbyxcbiAqIHJldHVybiBpdC4gSWYgbm90LCByZXR1cm4gbnVsbC5cbiAqL1xuZnVuY3Rpb24gZmlsdGVyS2V5KGVudGl0eU1hcCwgZW50aXR5S2V5KSB7XG4gIGlmIChlbnRpdHlLZXkpIHtcbiAgICB2YXIgZW50aXR5ID0gZW50aXR5TWFwLl9fZ2V0KGVudGl0eUtleSk7XG4gICAgcmV0dXJuIGVudGl0eS5nZXRNdXRhYmlsaXR5KCkgPT09ICdNVVRBQkxFJyA/IGVudGl0eUtleSA6IG51bGw7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQkFDS1NQQUNFOiA4LFxuICBUQUI6IDksXG4gIFJFVFVSTjogMTMsXG4gIEFMVDogMTgsXG4gIEVTQzogMjcsXG4gIFNQQUNFOiAzMixcbiAgUEFHRV9VUDogMzMsXG4gIFBBR0VfRE9XTjogMzQsXG4gIEVORDogMzUsXG4gIEhPTUU6IDM2LFxuICBMRUZUOiAzNyxcbiAgVVA6IDM4LFxuICBSSUdIVDogMzksXG4gIERPV046IDQwLFxuICBERUxFVEU6IDQ2LFxuICBDT01NQTogMTg4LFxuICBQRVJJT0Q6IDE5MCxcbiAgQTogNjUsXG4gIFo6IDkwLFxuICBaRVJPOiA0OCxcbiAgTlVNUEFEXzA6IDk2LFxuICBOVU1QQURfOTogMTA1XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXBcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyksXG4gICAgTWFwID0gX3JlcXVpcmUuTWFwO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgY3ggPSByZXF1aXJlKCdmYmpzL2xpYi9jeCcpO1xuXG52YXIgVUxfV1JBUCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3VsJywgeyBjbGFzc05hbWU6IGN4KCdwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvdWwnKSB9KTtcbnZhciBPTF9XUkFQID0gUmVhY3QuY3JlYXRlRWxlbWVudCgnb2wnLCB7IGNsYXNzTmFtZTogY3goJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9vbCcpIH0pO1xudmFyIFBSRV9XUkFQID0gUmVhY3QuY3JlYXRlRWxlbWVudCgncHJlJywgeyBjbGFzc05hbWU6IGN4KCdwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvcHJlJykgfSk7XG5cbnZhciBEZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcCA9IE1hcCh7XG4gICdoZWFkZXItb25lJzoge1xuICAgIGVsZW1lbnQ6ICdoMSdcbiAgfSxcbiAgJ2hlYWRlci10d28nOiB7XG4gICAgZWxlbWVudDogJ2gyJ1xuICB9LFxuICAnaGVhZGVyLXRocmVlJzoge1xuICAgIGVsZW1lbnQ6ICdoMydcbiAgfSxcbiAgJ2hlYWRlci1mb3VyJzoge1xuICAgIGVsZW1lbnQ6ICdoNCdcbiAgfSxcbiAgJ2hlYWRlci1maXZlJzoge1xuICAgIGVsZW1lbnQ6ICdoNSdcbiAgfSxcbiAgJ2hlYWRlci1zaXgnOiB7XG4gICAgZWxlbWVudDogJ2g2J1xuICB9LFxuICAndW5vcmRlcmVkLWxpc3QtaXRlbSc6IHtcbiAgICBlbGVtZW50OiAnbGknLFxuICAgIHdyYXBwZXI6IFVMX1dSQVBcbiAgfSxcbiAgJ29yZGVyZWQtbGlzdC1pdGVtJzoge1xuICAgIGVsZW1lbnQ6ICdsaScsXG4gICAgd3JhcHBlcjogT0xfV1JBUFxuICB9LFxuICBibG9ja3F1b3RlOiB7XG4gICAgZWxlbWVudDogJ2Jsb2NrcXVvdGUnXG4gIH0sXG4gIGF0b21pYzoge1xuICAgIGVsZW1lbnQ6ICdmaWd1cmUnXG4gIH0sXG4gICdjb2RlLWJsb2NrJzoge1xuICAgIGVsZW1lbnQ6ICdwcmUnLFxuICAgIHdyYXBwZXI6IFBSRV9XUkFQXG4gIH0sXG4gIHVuc3R5bGVkOiB7XG4gICAgZWxlbWVudDogJ2RpdicsXG4gICAgYWxpYXNlZEVsZW1lbnRzOiBbJ3AnXVxuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4vKipcbiAqIENvbnN0YW50cyB0byByZXByZXNlbnQgdGV4dCBkaXJlY3Rpb25hbGl0eVxuICpcbiAqIEFsc28gZGVmaW5lcyBhICpnbG9iYWwqIGRpcmVjaXRvbiwgdG8gYmUgdXNlZCBpbiBiaWRpIGFsZ29yaXRobXMgYXMgYVxuICogZGVmYXVsdCBmYWxsYmFjayBkaXJlY2l0b24sIHdoZW4gbm8gYmV0dGVyIGRpcmVjdGlvbiBpcyBmb3VuZCBvciBwcm92aWRlZC5cbiAqXG4gKiBOT1RFOiBVc2UgYHNldEdsb2JhbERpcigpYCwgb3IgdXBkYXRlIGBpbml0R2xvYmFsRGlyKClgLCB0byBzZXQgdGhlIGluaXRpYWxcbiAqICAgICAgIGdsb2JhbCBkaXJlY3Rpb24gdmFsdWUgYmFzZWQgb24gdGhlIGFwcGxpY2F0aW9uLlxuICpcbiAqIFBhcnQgb2YgdGhlIGltcGxlbWVudGF0aW9uIG9mIFVuaWNvZGUgQmlkaXJlY3Rpb25hbCBBbGdvcml0aG0gKFVCQSlcbiAqIFVuaWNvZGUgU3RhbmRhcmQgQW5uZXggIzkgKFVBWDkpXG4gKiBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHI5L1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJy4vaW52YXJpYW50Jyk7XG5cbnZhciBORVVUUkFMID0gJ05FVVRSQUwnOyAvLyBObyBzdHJvbmcgZGlyZWN0aW9uXG52YXIgTFRSID0gJ0xUUic7IC8vIExlZnQtdG8tUmlnaHQgZGlyZWN0aW9uXG52YXIgUlRMID0gJ1JUTCc7IC8vIFJpZ2h0LXRvLUxlZnQgZGlyZWN0aW9uXG5cbnZhciBnbG9iYWxEaXIgPSBudWxsO1xuXG4vLyA9PSBIZWxwZXJzID09XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBkaXJlY3Rpb25hbGl0eSB2YWx1ZSBpcyBhIFN0cm9uZyBvbmVcbiAqL1xuZnVuY3Rpb24gaXNTdHJvbmcoZGlyKSB7XG4gIHJldHVybiBkaXIgPT09IExUUiB8fCBkaXIgPT09IFJUTDtcbn1cblxuLyoqXG4gKiBHZXQgc3RyaW5nIHZhbHVlIHRvIGJlIHVzZWQgZm9yIGBkaXJgIEhUTUwgYXR0cmlidXRlIG9yIGBkaXJlY3Rpb25gIENTU1xuICogcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGdldEhUTUxEaXIoZGlyKSB7XG4gICFpc1N0cm9uZyhkaXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2BkaXJgIG11c3QgYmUgYSBzdHJvbmcgZGlyZWN0aW9uIHRvIGJlIGNvbnZlcnRlZCB0byBIVE1MIERpcmVjdGlvbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGRpciA9PT0gTFRSID8gJ2x0cicgOiAncnRsJztcbn1cblxuLyoqXG4gKiBHZXQgc3RyaW5nIHZhbHVlIHRvIGJlIHVzZWQgZm9yIGBkaXJgIEhUTUwgYXR0cmlidXRlIG9yIGBkaXJlY3Rpb25gIENTU1xuICogcHJvcGVydHksIGJ1dCByZXR1cm5zIG51bGwgaWYgYGRpcmAgaGFzIHNhbWUgdmFsdWUgYXMgYG90aGVyRGlyYC5cbiAqIGBudWxsYC5cbiAqL1xuZnVuY3Rpb24gZ2V0SFRNTERpcklmRGlmZmVyZW50KGRpciwgb3RoZXJEaXIpIHtcbiAgIWlzU3Ryb25nKGRpcikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnYGRpcmAgbXVzdCBiZSBhIHN0cm9uZyBkaXJlY3Rpb24gdG8gYmUgY29udmVydGVkIHRvIEhUTUwgRGlyZWN0aW9uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhaXNTdHJvbmcob3RoZXJEaXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2BvdGhlckRpcmAgbXVzdCBiZSBhIHN0cm9uZyBkaXJlY3Rpb24gdG8gYmUgY29udmVydGVkIHRvIEhUTUwgRGlyZWN0aW9uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gZGlyID09PSBvdGhlckRpciA/IG51bGwgOiBnZXRIVE1MRGlyKGRpcik7XG59XG5cbi8vID09IEdsb2JhbCBEaXJlY3Rpb24gPT1cblxuLyoqXG4gKiBTZXQgdGhlIGdsb2JhbCBkaXJlY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNldEdsb2JhbERpcihkaXIpIHtcbiAgZ2xvYmFsRGlyID0gZGlyO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIGdsb2JhbCBkaXJlY3Rpb25cbiAqL1xuZnVuY3Rpb24gaW5pdEdsb2JhbERpcigpIHtcbiAgc2V0R2xvYmFsRGlyKExUUik7XG59XG5cbi8qKlxuICogR2V0IHRoZSBnbG9iYWwgZGlyZWN0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldEdsb2JhbERpcigpIHtcbiAgaWYgKCFnbG9iYWxEaXIpIHtcbiAgICB0aGlzLmluaXRHbG9iYWxEaXIoKTtcbiAgfVxuICAhZ2xvYmFsRGlyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0dsb2JhbCBkaXJlY3Rpb24gbm90IHNldC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBnbG9iYWxEaXI7XG59XG5cbnZhciBVbmljb2RlQmlkaURpcmVjdGlvbiA9IHtcbiAgLy8gVmFsdWVzXG4gIE5FVVRSQUw6IE5FVVRSQUwsXG4gIExUUjogTFRSLFxuICBSVEw6IFJUTCxcbiAgLy8gSGVscGVyc1xuICBpc1N0cm9uZzogaXNTdHJvbmcsXG4gIGdldEhUTUxEaXI6IGdldEhUTUxEaXIsXG4gIGdldEhUTUxEaXJJZkRpZmZlcmVudDogZ2V0SFRNTERpcklmRGlmZmVyZW50LFxuICAvLyBHbG9iYWwgRGlyZWN0aW9uXG4gIHNldEdsb2JhbERpcjogc2V0R2xvYmFsRGlyLFxuICBpbml0R2xvYmFsRGlyOiBpbml0R2xvYmFsRGlyLFxuICBnZXRHbG9iYWxEaXI6IGdldEdsb2JhbERpclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBVbmljb2RlQmlkaURpcmVjdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNhbml0aXplRHJhZnRUZXh0XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSRUdFWF9CTE9DS19ERUxJTUlURVIgPSBuZXcgUmVnRXhwKCdcXHInLCAnZycpO1xuXG5mdW5jdGlvbiBzYW5pdGl6ZURyYWZ0VGV4dChpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZShSRUdFWF9CTE9DS19ERUxJTUlURVIsICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzYW5pdGl6ZURyYWZ0VGV4dDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENvbnRlbnRTdGF0ZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBCbG9ja01hcEJ1aWxkZXIgPSByZXF1aXJlKCcuL0Jsb2NrTWFwQnVpbGRlcicpO1xudmFyIENoYXJhY3Rlck1ldGFkYXRhID0gcmVxdWlyZSgnLi9DaGFyYWN0ZXJNZXRhZGF0YScpO1xudmFyIENvbnRlbnRCbG9jayA9IHJlcXVpcmUoJy4vQ29udGVudEJsb2NrJyk7XG52YXIgQ29udGVudEJsb2NrTm9kZSA9IHJlcXVpcmUoJy4vQ29udGVudEJsb2NrTm9kZScpO1xudmFyIERyYWZ0RW50aXR5ID0gcmVxdWlyZSgnLi9EcmFmdEVudGl0eScpO1xudmFyIERyYWZ0RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi9EcmFmdEZlYXR1cmVGbGFncycpO1xudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xudmFyIFNlbGVjdGlvblN0YXRlID0gcmVxdWlyZSgnLi9TZWxlY3Rpb25TdGF0ZScpO1xuXG52YXIgZ2VuZXJhdGVSYW5kb21LZXkgPSByZXF1aXJlKCcuL2dlbmVyYXRlUmFuZG9tS2V5Jyk7XG52YXIgc2FuaXRpemVEcmFmdFRleHQgPSByZXF1aXJlKCcuL3Nhbml0aXplRHJhZnRUZXh0Jyk7XG5cbnZhciBMaXN0ID0gSW1tdXRhYmxlLkxpc3QsXG4gICAgUmVjb3JkID0gSW1tdXRhYmxlLlJlY29yZCxcbiAgICBSZXBlYXQgPSBJbW11dGFibGUuUmVwZWF0O1xuXG5cbnZhciBleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQgPSBEcmFmdEZlYXR1cmVGbGFncy5kcmFmdF90cmVlX2RhdGFfc3VwcG9ydDtcblxudmFyIGRlZmF1bHRSZWNvcmQgPSB7XG4gIGVudGl0eU1hcDogbnVsbCxcbiAgYmxvY2tNYXA6IG51bGwsXG4gIHNlbGVjdGlvbkJlZm9yZTogbnVsbCxcbiAgc2VsZWN0aW9uQWZ0ZXI6IG51bGxcbn07XG5cbnZhciBDb250ZW50QmxvY2tOb2RlUmVjb3JkID0gZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0ID8gQ29udGVudEJsb2NrTm9kZSA6IENvbnRlbnRCbG9jaztcblxudmFyIENvbnRlbnRTdGF0ZVJlY29yZCA9IFJlY29yZChkZWZhdWx0UmVjb3JkKTtcblxudmFyIENvbnRlbnRTdGF0ZSA9IGZ1bmN0aW9uIChfQ29udGVudFN0YXRlUmVjb3JkKSB7XG4gIF9pbmhlcml0cyhDb250ZW50U3RhdGUsIF9Db250ZW50U3RhdGVSZWNvcmQpO1xuXG4gIGZ1bmN0aW9uIENvbnRlbnRTdGF0ZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29udGVudFN0YXRlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29udGVudFN0YXRlUmVjb3JkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgQ29udGVudFN0YXRlLnByb3RvdHlwZS5nZXRFbnRpdHlNYXAgPSBmdW5jdGlvbiBnZXRFbnRpdHlNYXAoKSB7XG4gICAgLy8gVE9ETzogdXBkYXRlIHRoaXMgd2hlbiB3ZSBmdWxseSByZW1vdmUgRHJhZnRFbnRpdHlcbiAgICByZXR1cm4gRHJhZnRFbnRpdHk7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLnByb3RvdHlwZS5nZXRCbG9ja01hcCA9IGZ1bmN0aW9uIGdldEJsb2NrTWFwKCkge1xuICAgIHJldHVybiB0aGlzLmdldCgnYmxvY2tNYXAnKTtcbiAgfTtcblxuICBDb250ZW50U3RhdGUucHJvdG90eXBlLmdldFNlbGVjdGlvbkJlZm9yZSA9IGZ1bmN0aW9uIGdldFNlbGVjdGlvbkJlZm9yZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ3NlbGVjdGlvbkJlZm9yZScpO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUuZ2V0U2VsZWN0aW9uQWZ0ZXIgPSBmdW5jdGlvbiBnZXRTZWxlY3Rpb25BZnRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ3NlbGVjdGlvbkFmdGVyJyk7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLnByb3RvdHlwZS5nZXRCbG9ja0ZvcktleSA9IGZ1bmN0aW9uIGdldEJsb2NrRm9yS2V5KGtleSkge1xuICAgIHZhciBibG9jayA9IHRoaXMuZ2V0QmxvY2tNYXAoKS5nZXQoa2V5KTtcbiAgICByZXR1cm4gYmxvY2s7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLnByb3RvdHlwZS5nZXRLZXlCZWZvcmUgPSBmdW5jdGlvbiBnZXRLZXlCZWZvcmUoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QmxvY2tNYXAoKS5yZXZlcnNlKCkua2V5U2VxKCkuc2tpcFVudGlsKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gdiA9PT0ga2V5O1xuICAgIH0pLnNraXAoMSkuZmlyc3QoKTtcbiAgfTtcblxuICBDb250ZW50U3RhdGUucHJvdG90eXBlLmdldEtleUFmdGVyID0gZnVuY3Rpb24gZ2V0S2V5QWZ0ZXIoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QmxvY2tNYXAoKS5rZXlTZXEoKS5za2lwVW50aWwoZnVuY3Rpb24gKHYpIHtcbiAgICAgIHJldHVybiB2ID09PSBrZXk7XG4gICAgfSkuc2tpcCgxKS5maXJzdCgpO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUuZ2V0QmxvY2tBZnRlciA9IGZ1bmN0aW9uIGdldEJsb2NrQWZ0ZXIoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QmxvY2tNYXAoKS5za2lwVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICAgIHJldHVybiBrID09PSBrZXk7XG4gICAgfSkuc2tpcCgxKS5maXJzdCgpO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUuZ2V0QmxvY2tCZWZvcmUgPSBmdW5jdGlvbiBnZXRCbG9ja0JlZm9yZShrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRCbG9ja01hcCgpLnJldmVyc2UoKS5za2lwVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICAgIHJldHVybiBrID09PSBrZXk7XG4gICAgfSkuc2tpcCgxKS5maXJzdCgpO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUuZ2V0QmxvY2tzQXNBcnJheSA9IGZ1bmN0aW9uIGdldEJsb2Nrc0FzQXJyYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QmxvY2tNYXAoKS50b0FycmF5KCk7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLnByb3RvdHlwZS5nZXRGaXJzdEJsb2NrID0gZnVuY3Rpb24gZ2V0Rmlyc3RCbG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRCbG9ja01hcCgpLmZpcnN0KCk7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLnByb3RvdHlwZS5nZXRMYXN0QmxvY2sgPSBmdW5jdGlvbiBnZXRMYXN0QmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QmxvY2tNYXAoKS5sYXN0KCk7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLnByb3RvdHlwZS5nZXRQbGFpblRleHQgPSBmdW5jdGlvbiBnZXRQbGFpblRleHQoZGVsaW1pdGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QmxvY2tNYXAoKS5tYXAoZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2sgPyBibG9jay5nZXRUZXh0KCkgOiAnJztcbiAgICB9KS5qb2luKGRlbGltaXRlciB8fCAnXFxuJyk7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLnByb3RvdHlwZS5nZXRMYXN0Q3JlYXRlZEVudGl0eUtleSA9IGZ1bmN0aW9uIGdldExhc3RDcmVhdGVkRW50aXR5S2V5KCkge1xuICAgIC8vIFRPRE86IHVwZGF0ZSB0aGlzIHdoZW4gd2UgZnVsbHkgcmVtb3ZlIERyYWZ0RW50aXR5XG4gICAgcmV0dXJuIERyYWZ0RW50aXR5Ll9fZ2V0TGFzdENyZWF0ZWRFbnRpdHlLZXkoKTtcbiAgfTtcblxuICBDb250ZW50U3RhdGUucHJvdG90eXBlLmhhc1RleHQgPSBmdW5jdGlvbiBoYXNUZXh0KCkge1xuICAgIHZhciBibG9ja01hcCA9IHRoaXMuZ2V0QmxvY2tNYXAoKTtcbiAgICByZXR1cm4gYmxvY2tNYXAuc2l6ZSA+IDEgfHwgYmxvY2tNYXAuZmlyc3QoKS5nZXRMZW5ndGgoKSA+IDA7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLnByb3RvdHlwZS5jcmVhdGVFbnRpdHkgPSBmdW5jdGlvbiBjcmVhdGVFbnRpdHkodHlwZSwgbXV0YWJpbGl0eSwgZGF0YSkge1xuICAgIC8vIFRPRE86IHVwZGF0ZSB0aGlzIHdoZW4gd2UgZnVsbHkgcmVtb3ZlIERyYWZ0RW50aXR5XG4gICAgRHJhZnRFbnRpdHkuX19jcmVhdGUodHlwZSwgbXV0YWJpbGl0eSwgZGF0YSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLnByb3RvdHlwZS5tZXJnZUVudGl0eURhdGEgPSBmdW5jdGlvbiBtZXJnZUVudGl0eURhdGEoa2V5LCB0b01lcmdlKSB7XG4gICAgLy8gVE9ETzogdXBkYXRlIHRoaXMgd2hlbiB3ZSBmdWxseSByZW1vdmUgRHJhZnRFbnRpdHlcbiAgICBEcmFmdEVudGl0eS5fX21lcmdlRGF0YShrZXksIHRvTWVyZ2UpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUucmVwbGFjZUVudGl0eURhdGEgPSBmdW5jdGlvbiByZXBsYWNlRW50aXR5RGF0YShrZXksIG5ld0RhdGEpIHtcbiAgICAvLyBUT0RPOiB1cGRhdGUgdGhpcyB3aGVuIHdlIGZ1bGx5IHJlbW92ZSBEcmFmdEVudGl0eVxuICAgIERyYWZ0RW50aXR5Ll9fcmVwbGFjZURhdGEoa2V5LCBuZXdEYXRhKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBDb250ZW50U3RhdGUucHJvdG90eXBlLmFkZEVudGl0eSA9IGZ1bmN0aW9uIGFkZEVudGl0eShpbnN0YW5jZSkge1xuICAgIC8vIFRPRE86IHVwZGF0ZSB0aGlzIHdoZW4gd2UgZnVsbHkgcmVtb3ZlIERyYWZ0RW50aXR5XG4gICAgRHJhZnRFbnRpdHkuX19hZGQoaW5zdGFuY2UpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIENvbnRlbnRTdGF0ZS5wcm90b3R5cGUuZ2V0RW50aXR5ID0gZnVuY3Rpb24gZ2V0RW50aXR5KGtleSkge1xuICAgIC8vIFRPRE86IHVwZGF0ZSB0aGlzIHdoZW4gd2UgZnVsbHkgcmVtb3ZlIERyYWZ0RW50aXR5XG4gICAgcmV0dXJuIERyYWZ0RW50aXR5Ll9fZ2V0KGtleSk7XG4gIH07XG5cbiAgQ29udGVudFN0YXRlLmNyZWF0ZUZyb21CbG9ja0FycmF5ID0gZnVuY3Rpb24gY3JlYXRlRnJvbUJsb2NrQXJyYXkoXG4gIC8vIFRPRE86IHVwZGF0ZSBmbG93IHR5cGUgd2hlbiB3ZSBjb21wbGV0ZWx5IGRlcHJlY2F0ZSB0aGUgb2xkIGVudGl0eSBBUElcbiAgYmxvY2tzLCBlbnRpdHlNYXApIHtcbiAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyB3aGVuIHdlIGNvbXBsZXRlbHkgZGVwcmVjYXRlIHRoZSBvbGQgZW50aXR5IEFQSVxuICAgIHZhciB0aGVCbG9ja3MgPSBBcnJheS5pc0FycmF5KGJsb2NrcykgPyBibG9ja3MgOiBibG9ja3MuY29udGVudEJsb2NrcztcbiAgICB2YXIgYmxvY2tNYXAgPSBCbG9ja01hcEJ1aWxkZXIuY3JlYXRlRnJvbUFycmF5KHRoZUJsb2Nrcyk7XG4gICAgdmFyIHNlbGVjdGlvblN0YXRlID0gYmxvY2tNYXAuaXNFbXB0eSgpID8gbmV3IFNlbGVjdGlvblN0YXRlKCkgOiBTZWxlY3Rpb25TdGF0ZS5jcmVhdGVFbXB0eShibG9ja01hcC5maXJzdCgpLmdldEtleSgpKTtcbiAgICByZXR1cm4gbmV3IENvbnRlbnRTdGF0ZSh7XG4gICAgICBibG9ja01hcDogYmxvY2tNYXAsXG4gICAgICBlbnRpdHlNYXA6IGVudGl0eU1hcCB8fCBEcmFmdEVudGl0eSxcbiAgICAgIHNlbGVjdGlvbkJlZm9yZTogc2VsZWN0aW9uU3RhdGUsXG4gICAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGVcbiAgICB9KTtcbiAgfTtcblxuICBDb250ZW50U3RhdGUuY3JlYXRlRnJvbVRleHQgPSBmdW5jdGlvbiBjcmVhdGVGcm9tVGV4dCh0ZXh0KSB7XG4gICAgdmFyIGRlbGltaXRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogL1xcclxcbj98XFxuL2c7XG5cbiAgICB2YXIgc3RyaW5ncyA9IHRleHQuc3BsaXQoZGVsaW1pdGVyKTtcbiAgICB2YXIgYmxvY2tzID0gc3RyaW5ncy5tYXAoZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICBibG9jayA9IHNhbml0aXplRHJhZnRUZXh0KGJsb2NrKTtcbiAgICAgIHJldHVybiBuZXcgQ29udGVudEJsb2NrTm9kZVJlY29yZCh7XG4gICAgICAgIGtleTogZ2VuZXJhdGVSYW5kb21LZXkoKSxcbiAgICAgICAgdGV4dDogYmxvY2ssXG4gICAgICAgIHR5cGU6ICd1bnN0eWxlZCcsXG4gICAgICAgIGNoYXJhY3Rlckxpc3Q6IExpc3QoUmVwZWF0KENoYXJhY3Rlck1ldGFkYXRhLkVNUFRZLCBibG9jay5sZW5ndGgpKVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIENvbnRlbnRTdGF0ZS5jcmVhdGVGcm9tQmxvY2tBcnJheShibG9ja3MpO1xuICB9O1xuXG4gIHJldHVybiBDb250ZW50U3RhdGU7XG59KENvbnRlbnRTdGF0ZVJlY29yZCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udGVudFN0YXRlOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIHZhciBzZXRQcm9tcHQgPSBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpO1xuXG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNvbmZpcm1UcmFuc2l0aW9uVG8gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJyk7XG5cbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICB2YXIgYXBwZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGV4cG9ydHMuY3JlYXRlTG9jYXRpb24gPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lID0gcmVxdWlyZSgncmVzb2x2ZS1wYXRobmFtZScpO1xuXG52YXIgX3Jlc29sdmVQYXRobmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXNvbHZlUGF0aG5hbWUpO1xuXG52YXIgX3ZhbHVlRXF1YWwgPSByZXF1aXJlKCd2YWx1ZS1lcXVhbCcpO1xuXG52YXIgX3ZhbHVlRXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsdWVFcXVhbCk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZUxvY2F0aW9uID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSAoMCwgX1BhdGhVdGlscy5wYXJzZVBhdGgpKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICgwLCBfcmVzb2x2ZVBhdGhuYW1lMi5kZWZhdWx0KShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxudmFyIGxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiAoMCwgX3ZhbHVlRXF1YWwyLmRlZmF1bHQpKGEuc3RhdGUsIGIuc3RhdGUpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZCAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdFxuICogeWV0IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSAvKj9ET01FbGVtZW50Ki97XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcbiAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYVR5cGUgPSB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSk7XG4gIHZhciBiVHlwZSA9IHR5cGVvZiBiID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiKTtcblxuICBpZiAoYVR5cGUgIT09IGJUeXBlKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGFUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSBhLnZhbHVlT2YoKTtcbiAgICB2YXIgYlZhbHVlID0gYi52YWx1ZU9mKCk7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7IiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bykge1xuICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG5cbiAgdmFyIHRvUGFydHMgPSB0byAmJiB0by5zcGxpdCgnLycpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IHZvaWQgMDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gIH1pZiAobXVzdEVuZEFicyAmJiBmcm9tUGFydHNbMF0gIT09ICcnICYmICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpKSBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdFN0cmluZ0tleVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRTdHJpbmdLZXkgPSB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGtleSkge1xuICAgIHJldHVybiAnXycgKyBTdHJpbmcoa2V5KTtcbiAgfSxcblxuICB1bnN0cmluZ2lmeTogZnVuY3Rpb24gdW5zdHJpbmdpZnkoa2V5KSB7XG4gICAgcmV0dXJuIGtleS5zbGljZSgxKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdFN0cmluZ0tleTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldERlZmF1bHRLZXlCaW5kaW5nXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBLZXlCaW5kaW5nVXRpbCA9IHJlcXVpcmUoJy4vS2V5QmluZGluZ1V0aWwnKTtcbnZhciBLZXlzID0gcmVxdWlyZSgnZmJqcy9saWIvS2V5cycpO1xudmFyIFVzZXJBZ2VudCA9IHJlcXVpcmUoJ2ZianMvbGliL1VzZXJBZ2VudCcpO1xuXG52YXIgaXNPU1ggPSBVc2VyQWdlbnQuaXNQbGF0Zm9ybSgnTWFjIE9TIFgnKTtcbnZhciBpc1dpbmRvd3MgPSBVc2VyQWdlbnQuaXNQbGF0Zm9ybSgnV2luZG93cycpO1xuXG4vLyBGaXJlZm94IG9uIE9TWCBoYWQgYSBidWcgcmVzdWx0aW5nIGluIG5hdmlnYXRpb24gaW5zdGVhZCBvZiBjdXJzb3IgbW92ZW1lbnQuXG4vLyBUaGlzIGJ1ZyB3YXMgZml4ZWQgaW4gRmlyZWZveCAyOS4gRmVhdHVyZSBkZXRlY3Rpb24gaXMgdmlydHVhbGx5IGltcG9zc2libGVcbi8vIHNvIHdlIGp1c3QgY2hlY2sgdGhlIHZlcnNpb24gbnVtYmVyLiBTZWUgIzM0Mjc2NS5cbnZhciBzaG91bGRGaXhGaXJlZm94TW92ZW1lbnQgPSBpc09TWCAmJiBVc2VyQWdlbnQuaXNCcm93c2VyKCdGaXJlZm94IDwgMjknKTtcblxudmFyIGhhc0NvbW1hbmRNb2RpZmllciA9IEtleUJpbmRpbmdVdGlsLmhhc0NvbW1hbmRNb2RpZmllcixcbiAgICBpc0N0cmxLZXlDb21tYW5kID0gS2V5QmluZGluZ1V0aWwuaXNDdHJsS2V5Q29tbWFuZDtcblxuXG5mdW5jdGlvbiBzaG91bGRSZW1vdmVXb3JkKGUpIHtcbiAgcmV0dXJuIGlzT1NYICYmIGUuYWx0S2V5IHx8IGlzQ3RybEtleUNvbW1hbmQoZSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBhcHByb3ByaWF0ZSB1bmRvL3JlZG8gY29tbWFuZCBmb3IgYSBaIGtleSBjb21tYW5kLlxuICovXG5mdW5jdGlvbiBnZXRaQ29tbWFuZChlKSB7XG4gIGlmICghaGFzQ29tbWFuZE1vZGlmaWVyKGUpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGUuc2hpZnRLZXkgPyAncmVkbycgOiAndW5kbyc7XG59XG5cbmZ1bmN0aW9uIGdldERlbGV0ZUNvbW1hbmQoZSkge1xuICAvLyBBbGxvdyBkZWZhdWx0IFwiY3V0XCIgYmVoYXZpb3IgZm9yIFdpbmRvd3Mgb24gU2hpZnQgKyBEZWxldGUuXG4gIGlmIChpc1dpbmRvd3MgJiYgZS5zaGlmdEtleSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBzaG91bGRSZW1vdmVXb3JkKGUpID8gJ2RlbGV0ZS13b3JkJyA6ICdkZWxldGUnO1xufVxuXG5mdW5jdGlvbiBnZXRCYWNrc3BhY2VDb21tYW5kKGUpIHtcbiAgaWYgKGhhc0NvbW1hbmRNb2RpZmllcihlKSAmJiBpc09TWCkge1xuICAgIHJldHVybiAnYmFja3NwYWNlLXRvLXN0YXJ0LW9mLWxpbmUnO1xuICB9XG4gIHJldHVybiBzaG91bGRSZW1vdmVXb3JkKGUpID8gJ2JhY2tzcGFjZS13b3JkJyA6ICdiYWNrc3BhY2UnO1xufVxuXG4vKipcbiAqIFJldHJpZXZlIGEgYm91bmQga2V5IGNvbW1hbmQgZm9yIHRoZSBnaXZlbiBldmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdEtleUJpbmRpbmcoZSkge1xuICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgIGNhc2UgNjY6XG4gICAgICAvLyBCXG4gICAgICByZXR1cm4gaGFzQ29tbWFuZE1vZGlmaWVyKGUpID8gJ2JvbGQnIDogbnVsbDtcbiAgICBjYXNlIDY4OlxuICAgICAgLy8gRFxuICAgICAgcmV0dXJuIGlzQ3RybEtleUNvbW1hbmQoZSkgPyAnZGVsZXRlJyA6IG51bGw7XG4gICAgY2FzZSA3MjpcbiAgICAgIC8vIEhcbiAgICAgIHJldHVybiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ2JhY2tzcGFjZScgOiBudWxsO1xuICAgIGNhc2UgNzM6XG4gICAgICAvLyBJXG4gICAgICByZXR1cm4gaGFzQ29tbWFuZE1vZGlmaWVyKGUpID8gJ2l0YWxpYycgOiBudWxsO1xuICAgIGNhc2UgNzQ6XG4gICAgICAvLyBKXG4gICAgICByZXR1cm4gaGFzQ29tbWFuZE1vZGlmaWVyKGUpID8gJ2NvZGUnIDogbnVsbDtcbiAgICBjYXNlIDc1OlxuICAgICAgLy8gS1xuICAgICAgcmV0dXJuICFpc1dpbmRvd3MgJiYgaXNDdHJsS2V5Q29tbWFuZChlKSA/ICdzZWNvbmRhcnktY3V0JyA6IG51bGw7XG4gICAgY2FzZSA3NzpcbiAgICAgIC8vIE1cbiAgICAgIHJldHVybiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ3NwbGl0LWJsb2NrJyA6IG51bGw7XG4gICAgY2FzZSA3OTpcbiAgICAgIC8vIE9cbiAgICAgIHJldHVybiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ3NwbGl0LWJsb2NrJyA6IG51bGw7XG4gICAgY2FzZSA4NDpcbiAgICAgIC8vIFRcbiAgICAgIHJldHVybiBpc09TWCAmJiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ3RyYW5zcG9zZS1jaGFyYWN0ZXJzJyA6IG51bGw7XG4gICAgY2FzZSA4NTpcbiAgICAgIC8vIFVcbiAgICAgIHJldHVybiBoYXNDb21tYW5kTW9kaWZpZXIoZSkgPyAndW5kZXJsaW5lJyA6IG51bGw7XG4gICAgY2FzZSA4NzpcbiAgICAgIC8vIFdcbiAgICAgIHJldHVybiBpc09TWCAmJiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ2JhY2tzcGFjZS13b3JkJyA6IG51bGw7XG4gICAgY2FzZSA4OTpcbiAgICAgIC8vIFlcbiAgICAgIGlmIChpc0N0cmxLZXlDb21tYW5kKGUpKSB7XG4gICAgICAgIHJldHVybiBpc1dpbmRvd3MgPyAncmVkbycgOiAnc2Vjb25kYXJ5LXBhc3RlJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgOTA6XG4gICAgICAvLyBaXG4gICAgICByZXR1cm4gZ2V0WkNvbW1hbmQoZSkgfHwgbnVsbDtcbiAgICBjYXNlIEtleXMuUkVUVVJOOlxuICAgICAgcmV0dXJuICdzcGxpdC1ibG9jayc7XG4gICAgY2FzZSBLZXlzLkRFTEVURTpcbiAgICAgIHJldHVybiBnZXREZWxldGVDb21tYW5kKGUpO1xuICAgIGNhc2UgS2V5cy5CQUNLU1BBQ0U6XG4gICAgICByZXR1cm4gZ2V0QmFja3NwYWNlQ29tbWFuZChlKTtcbiAgICAvLyBMRUZUL1JJR0hUIGhhbmRsZXJzIHNlcnZlIGFzIGEgd29ya2Fyb3VuZCBmb3IgYSBGaXJlZm94IGJ1Zy5cbiAgICBjYXNlIEtleXMuTEVGVDpcbiAgICAgIHJldHVybiBzaG91bGRGaXhGaXJlZm94TW92ZW1lbnQgJiYgaGFzQ29tbWFuZE1vZGlmaWVyKGUpID8gJ21vdmUtc2VsZWN0aW9uLXRvLXN0YXJ0LW9mLWJsb2NrJyA6IG51bGw7XG4gICAgY2FzZSBLZXlzLlJJR0hUOlxuICAgICAgcmV0dXJuIHNob3VsZEZpeEZpcmVmb3hNb3ZlbWVudCAmJiBoYXNDb21tYW5kTW9kaWZpZXIoZSkgPyAnbW92ZS1zZWxlY3Rpb24tdG8tZW5kLW9mLWJsb2NrJyA6IG51bGw7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RGVmYXVsdEtleUJpbmRpbmc7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSaWNoVGV4dEVkaXRvclV0aWxcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0TW9kaWZpZXIgPSByZXF1aXJlKCcuL0RyYWZ0TW9kaWZpZXInKTtcbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcbnZhciBTZWxlY3Rpb25TdGF0ZSA9IHJlcXVpcmUoJy4vU2VsZWN0aW9uU3RhdGUnKTtcblxudmFyIGFkanVzdEJsb2NrRGVwdGhGb3JDb250ZW50U3RhdGUgPSByZXF1aXJlKCcuL2FkanVzdEJsb2NrRGVwdGhGb3JDb250ZW50U3RhdGUnKTtcbnZhciBudWxsdGhyb3dzID0gcmVxdWlyZSgnZmJqcy9saWIvbnVsbHRocm93cycpO1xuXG52YXIgUmljaFRleHRFZGl0b3JVdGlsID0ge1xuICBjdXJyZW50QmxvY2tDb250YWluc0xpbms6IGZ1bmN0aW9uIGN1cnJlbnRCbG9ja0NvbnRhaW5zTGluayhlZGl0b3JTdGF0ZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgY29udGVudFN0YXRlID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgZW50aXR5TWFwID0gY29udGVudFN0YXRlLmdldEVudGl0eU1hcCgpO1xuICAgIHJldHVybiBjb250ZW50U3RhdGUuZ2V0QmxvY2tGb3JLZXkoc2VsZWN0aW9uLmdldEFuY2hvcktleSgpKS5nZXRDaGFyYWN0ZXJMaXN0KCkuc2xpY2Uoc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCksIHNlbGVjdGlvbi5nZXRFbmRPZmZzZXQoKSkuc29tZShmdW5jdGlvbiAodikge1xuICAgICAgdmFyIGVudGl0eSA9IHYuZ2V0RW50aXR5KCk7XG4gICAgICByZXR1cm4gISFlbnRpdHkgJiYgZW50aXR5TWFwLl9fZ2V0KGVudGl0eSkuZ2V0VHlwZSgpID09PSAnTElOSyc7XG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0Q3VycmVudEJsb2NrVHlwZTogZnVuY3Rpb24gZ2V0Q3VycmVudEJsb2NrVHlwZShlZGl0b3JTdGF0ZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICByZXR1cm4gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKS5nZXRCbG9ja0ZvcktleShzZWxlY3Rpb24uZ2V0U3RhcnRLZXkoKSkuZ2V0VHlwZSgpO1xuICB9LFxuXG4gIGdldERhdGFPYmplY3RGb3JMaW5rVVJMOiBmdW5jdGlvbiBnZXREYXRhT2JqZWN0Rm9yTGlua1VSTCh1cmkpIHtcbiAgICByZXR1cm4geyB1cmw6IHVyaS50b1N0cmluZygpIH07XG4gIH0sXG5cbiAgaGFuZGxlS2V5Q29tbWFuZDogZnVuY3Rpb24gaGFuZGxlS2V5Q29tbWFuZChlZGl0b3JTdGF0ZSwgY29tbWFuZCkge1xuICAgIHN3aXRjaCAoY29tbWFuZCkge1xuICAgICAgY2FzZSAnYm9sZCc6XG4gICAgICAgIHJldHVybiBSaWNoVGV4dEVkaXRvclV0aWwudG9nZ2xlSW5saW5lU3R5bGUoZWRpdG9yU3RhdGUsICdCT0xEJyk7XG4gICAgICBjYXNlICdpdGFsaWMnOlxuICAgICAgICByZXR1cm4gUmljaFRleHRFZGl0b3JVdGlsLnRvZ2dsZUlubGluZVN0eWxlKGVkaXRvclN0YXRlLCAnSVRBTElDJyk7XG4gICAgICBjYXNlICd1bmRlcmxpbmUnOlxuICAgICAgICByZXR1cm4gUmljaFRleHRFZGl0b3JVdGlsLnRvZ2dsZUlubGluZVN0eWxlKGVkaXRvclN0YXRlLCAnVU5ERVJMSU5FJyk7XG4gICAgICBjYXNlICdjb2RlJzpcbiAgICAgICAgcmV0dXJuIFJpY2hUZXh0RWRpdG9yVXRpbC50b2dnbGVDb2RlKGVkaXRvclN0YXRlKTtcbiAgICAgIGNhc2UgJ2JhY2tzcGFjZSc6XG4gICAgICBjYXNlICdiYWNrc3BhY2Utd29yZCc6XG4gICAgICBjYXNlICdiYWNrc3BhY2UtdG8tc3RhcnQtb2YtbGluZSc6XG4gICAgICAgIHJldHVybiBSaWNoVGV4dEVkaXRvclV0aWwub25CYWNrc3BhY2UoZWRpdG9yU3RhdGUpO1xuICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgIGNhc2UgJ2RlbGV0ZS13b3JkJzpcbiAgICAgIGNhc2UgJ2RlbGV0ZS10by1lbmQtb2YtYmxvY2snOlxuICAgICAgICByZXR1cm4gUmljaFRleHRFZGl0b3JVdGlsLm9uRGVsZXRlKGVkaXRvclN0YXRlKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIHRoZXkgbWF5IGhhdmUgY3VzdG9tIGVkaXRvciBjb21tYW5kczsgaWdub3JlIHRob3NlXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcblxuICBpbnNlcnRTb2Z0TmV3bGluZTogZnVuY3Rpb24gaW5zZXJ0U29mdE5ld2xpbmUoZWRpdG9yU3RhdGUpIHtcbiAgICB2YXIgY29udGVudFN0YXRlID0gRHJhZnRNb2RpZmllci5pbnNlcnRUZXh0KGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCksIGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLCAnXFxuJywgZWRpdG9yU3RhdGUuZ2V0Q3VycmVudElubGluZVN0eWxlKCksIG51bGwpO1xuXG4gICAgdmFyIG5ld0VkaXRvclN0YXRlID0gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgY29udGVudFN0YXRlLCAnaW5zZXJ0LWNoYXJhY3RlcnMnKTtcblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5mb3JjZVNlbGVjdGlvbihuZXdFZGl0b3JTdGF0ZSwgY29udGVudFN0YXRlLmdldFNlbGVjdGlvbkFmdGVyKCkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGb3IgY29sbGFwc2VkIHNlbGVjdGlvbnMgYXQgdGhlIHN0YXJ0IG9mIHN0eWxlZCBibG9ja3MsIGJhY2tzcGFjZSBzaG91bGRcbiAgICoganVzdCByZW1vdmUgdGhlIGV4aXN0aW5nIHN0eWxlLlxuICAgKi9cbiAgb25CYWNrc3BhY2U6IGZ1bmN0aW9uIG9uQmFja3NwYWNlKGVkaXRvclN0YXRlKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIGlmICghc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgfHwgc2VsZWN0aW9uLmdldEFuY2hvck9mZnNldCgpIHx8IHNlbGVjdGlvbi5nZXRGb2N1c09mZnNldCgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBGaXJzdCwgdHJ5IHRvIHJlbW92ZSBhIHByZWNlZGluZyBhdG9taWMgYmxvY2suXG4gICAgdmFyIGNvbnRlbnQgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciBzdGFydEtleSA9IHNlbGVjdGlvbi5nZXRTdGFydEtleSgpO1xuICAgIHZhciBibG9ja0JlZm9yZSA9IGNvbnRlbnQuZ2V0QmxvY2tCZWZvcmUoc3RhcnRLZXkpO1xuXG4gICAgaWYgKGJsb2NrQmVmb3JlICYmIGJsb2NrQmVmb3JlLmdldFR5cGUoKSA9PT0gJ2F0b21pYycpIHtcbiAgICAgIHZhciBibG9ja01hcCA9IGNvbnRlbnQuZ2V0QmxvY2tNYXAoKVsnZGVsZXRlJ10oYmxvY2tCZWZvcmUuZ2V0S2V5KCkpO1xuICAgICAgdmFyIHdpdGhvdXRBdG9taWNCbG9jayA9IGNvbnRlbnQubWVyZ2Uoe1xuICAgICAgICBibG9ja01hcDogYmxvY2tNYXAsXG4gICAgICAgIHNlbGVjdGlvbkFmdGVyOiBzZWxlY3Rpb25cbiAgICAgIH0pO1xuICAgICAgaWYgKHdpdGhvdXRBdG9taWNCbG9jayAhPT0gY29udGVudCkge1xuICAgICAgICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgd2l0aG91dEF0b21pY0Jsb2NrLCAncmVtb3ZlLXJhbmdlJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgdGhhdCBkb2Vzbid0IHN1Y2NlZWQsIHRyeSB0byByZW1vdmUgdGhlIGN1cnJlbnQgYmxvY2sgc3R5bGUuXG4gICAgdmFyIHdpdGhvdXRCbG9ja1N0eWxlID0gUmljaFRleHRFZGl0b3JVdGlsLnRyeVRvUmVtb3ZlQmxvY2tTdHlsZShlZGl0b3JTdGF0ZSk7XG5cbiAgICBpZiAod2l0aG91dEJsb2NrU3R5bGUpIHtcbiAgICAgIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCB3aXRob3V0QmxvY2tTdHlsZSwgJ2NoYW5nZS1ibG9jay10eXBlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgb25EZWxldGU6IGZ1bmN0aW9uIG9uRGVsZXRlKGVkaXRvclN0YXRlKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIGlmICghc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgc3RhcnRLZXkgPSBzZWxlY3Rpb24uZ2V0U3RhcnRLZXkoKTtcbiAgICB2YXIgYmxvY2sgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KHN0YXJ0S2V5KTtcbiAgICB2YXIgbGVuZ3RoID0gYmxvY2suZ2V0TGVuZ3RoKCk7XG5cbiAgICAvLyBUaGUgY3Vyc29yIGlzIHNvbWV3aGVyZSB3aXRoaW4gdGhlIHRleHQuIEJlaGF2ZSBub3JtYWxseS5cbiAgICBpZiAoc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCkgPCBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBibG9ja0FmdGVyID0gY29udGVudC5nZXRCbG9ja0FmdGVyKHN0YXJ0S2V5KTtcblxuICAgIGlmICghYmxvY2tBZnRlciB8fCBibG9ja0FmdGVyLmdldFR5cGUoKSAhPT0gJ2F0b21pYycpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBhdG9taWNCbG9ja1RhcmdldCA9IHNlbGVjdGlvbi5tZXJnZSh7XG4gICAgICBmb2N1c0tleTogYmxvY2tBZnRlci5nZXRLZXkoKSxcbiAgICAgIGZvY3VzT2Zmc2V0OiBibG9ja0FmdGVyLmdldExlbmd0aCgpXG4gICAgfSk7XG5cbiAgICB2YXIgd2l0aG91dEF0b21pY0Jsb2NrID0gRHJhZnRNb2RpZmllci5yZW1vdmVSYW5nZShjb250ZW50LCBhdG9taWNCbG9ja1RhcmdldCwgJ2ZvcndhcmQnKTtcblxuICAgIGlmICh3aXRob3V0QXRvbWljQmxvY2sgIT09IGNvbnRlbnQpIHtcbiAgICAgIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCB3aXRob3V0QXRvbWljQmxvY2ssICdyZW1vdmUtcmFuZ2UnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICBvblRhYjogZnVuY3Rpb24gb25UYWIoZXZlbnQsIGVkaXRvclN0YXRlLCBtYXhEZXB0aCkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIga2V5ID0gc2VsZWN0aW9uLmdldEFuY2hvcktleSgpO1xuICAgIGlmIChrZXkgIT09IHNlbGVjdGlvbi5nZXRGb2N1c0tleSgpKSB7XG4gICAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRlbnQgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciBibG9jayA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoa2V5KTtcbiAgICB2YXIgdHlwZSA9IGJsb2NrLmdldFR5cGUoKTtcbiAgICBpZiAodHlwZSAhPT0gJ3Vub3JkZXJlZC1saXN0LWl0ZW0nICYmIHR5cGUgIT09ICdvcmRlcmVkLWxpc3QtaXRlbScpIHtcbiAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICB9XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgLy8gT25seSBhbGxvdyBpbmRlbnRpbmcgb25lIGxldmVsIGJleW9uZCB0aGUgYmxvY2sgYWJvdmUsIGFuZCBvbmx5IGlmXG4gICAgLy8gdGhlIGJsb2NrIGFib3ZlIGlzIGEgbGlzdCBpdGVtIGFzIHdlbGwuXG4gICAgdmFyIGJsb2NrQWJvdmUgPSBjb250ZW50LmdldEJsb2NrQmVmb3JlKGtleSk7XG4gICAgaWYgKCFibG9ja0Fib3ZlKSB7XG4gICAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIHR5cGVBYm92ZSA9IGJsb2NrQWJvdmUuZ2V0VHlwZSgpO1xuICAgIGlmICh0eXBlQWJvdmUgIT09ICd1bm9yZGVyZWQtbGlzdC1pdGVtJyAmJiB0eXBlQWJvdmUgIT09ICdvcmRlcmVkLWxpc3QtaXRlbScpIHtcbiAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgZGVwdGggPSBibG9jay5nZXREZXB0aCgpO1xuICAgIGlmICghZXZlbnQuc2hpZnRLZXkgJiYgZGVwdGggPT09IG1heERlcHRoKSB7XG4gICAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gICAgfVxuXG4gICAgbWF4RGVwdGggPSBNYXRoLm1pbihibG9ja0Fib3ZlLmdldERlcHRoKCkgKyAxLCBtYXhEZXB0aCk7XG5cbiAgICB2YXIgd2l0aEFkanVzdG1lbnQgPSBhZGp1c3RCbG9ja0RlcHRoRm9yQ29udGVudFN0YXRlKGNvbnRlbnQsIHNlbGVjdGlvbiwgZXZlbnQuc2hpZnRLZXkgPyAtMSA6IDEsIG1heERlcHRoKTtcblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCB3aXRoQWRqdXN0bWVudCwgJ2FkanVzdC1kZXB0aCcpO1xuICB9LFxuXG4gIHRvZ2dsZUJsb2NrVHlwZTogZnVuY3Rpb24gdG9nZ2xlQmxvY2tUeXBlKGVkaXRvclN0YXRlLCBibG9ja1R5cGUpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gICAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uLmdldFN0YXJ0S2V5KCk7XG4gICAgdmFyIGVuZEtleSA9IHNlbGVjdGlvbi5nZXRFbmRLZXkoKTtcbiAgICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIHRhcmdldCA9IHNlbGVjdGlvbjtcblxuICAgIC8vIFRyaXBsZS1jbGljayBjYW4gbGVhZCB0byBhIHNlbGVjdGlvbiB0aGF0IGluY2x1ZGVzIG9mZnNldCAwIG9mIHRoZVxuICAgIC8vIGZvbGxvd2luZyBibG9jay4gVGhlIGBTZWxlY3Rpb25TdGF0ZWAgZm9yIHRoaXMgY2FzZSBpcyBhY2N1cmF0ZSwgYnV0XG4gICAgLy8gd2Ugc2hvdWxkIGF2b2lkIHRvZ2dsaW5nIGJsb2NrIHR5cGUgZm9yIHRoZSB0cmFpbGluZyBibG9jayBiZWNhdXNlIGl0XG4gICAgLy8gaXMgYSBjb25mdXNpbmcgaW50ZXJhY3Rpb24uXG4gICAgaWYgKHN0YXJ0S2V5ICE9PSBlbmRLZXkgJiYgc2VsZWN0aW9uLmdldEVuZE9mZnNldCgpID09PSAwKSB7XG4gICAgICB2YXIgYmxvY2tCZWZvcmUgPSBudWxsdGhyb3dzKGNvbnRlbnQuZ2V0QmxvY2tCZWZvcmUoZW5kS2V5KSk7XG4gICAgICBlbmRLZXkgPSBibG9ja0JlZm9yZS5nZXRLZXkoKTtcbiAgICAgIHRhcmdldCA9IHRhcmdldC5tZXJnZSh7XG4gICAgICAgIGFuY2hvcktleTogc3RhcnRLZXksXG4gICAgICAgIGFuY2hvck9mZnNldDogc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCksXG4gICAgICAgIGZvY3VzS2V5OiBlbmRLZXksXG4gICAgICAgIGZvY3VzT2Zmc2V0OiBibG9ja0JlZm9yZS5nZXRMZW5ndGgoKSxcbiAgICAgICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBoYXNBdG9taWNCbG9jayA9IGNvbnRlbnQuZ2V0QmxvY2tNYXAoKS5za2lwV2hpbGUoZnVuY3Rpb24gKF8sIGspIHtcbiAgICAgIHJldHVybiBrICE9PSBzdGFydEtleTtcbiAgICB9KS5yZXZlcnNlKCkuc2tpcFdoaWxlKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgICByZXR1cm4gayAhPT0gZW5kS2V5O1xuICAgIH0pLnNvbWUoZnVuY3Rpb24gKHYpIHtcbiAgICAgIHJldHVybiB2LmdldFR5cGUoKSA9PT0gJ2F0b21pYyc7XG4gICAgfSk7XG5cbiAgICBpZiAoaGFzQXRvbWljQmxvY2spIHtcbiAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgdHlwZVRvU2V0ID0gY29udGVudC5nZXRCbG9ja0ZvcktleShzdGFydEtleSkuZ2V0VHlwZSgpID09PSBibG9ja1R5cGUgPyAndW5zdHlsZWQnIDogYmxvY2tUeXBlO1xuXG4gICAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIERyYWZ0TW9kaWZpZXIuc2V0QmxvY2tUeXBlKGNvbnRlbnQsIHRhcmdldCwgdHlwZVRvU2V0KSwgJ2NoYW5nZS1ibG9jay10eXBlJyk7XG4gIH0sXG5cbiAgdG9nZ2xlQ29kZTogZnVuY3Rpb24gdG9nZ2xlQ29kZShlZGl0b3JTdGF0ZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgYW5jaG9yS2V5ID0gc2VsZWN0aW9uLmdldEFuY2hvcktleSgpO1xuICAgIHZhciBmb2N1c0tleSA9IHNlbGVjdGlvbi5nZXRGb2N1c0tleSgpO1xuXG4gICAgaWYgKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpIHx8IGFuY2hvcktleSAhPT0gZm9jdXNLZXkpIHtcbiAgICAgIHJldHVybiBSaWNoVGV4dEVkaXRvclV0aWwudG9nZ2xlQmxvY2tUeXBlKGVkaXRvclN0YXRlLCAnY29kZS1ibG9jaycpO1xuICAgIH1cblxuICAgIHJldHVybiBSaWNoVGV4dEVkaXRvclV0aWwudG9nZ2xlSW5saW5lU3R5bGUoZWRpdG9yU3RhdGUsICdDT0RFJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRvZ2dsZSB0aGUgc3BlY2lmaWVkIGlubGluZSBzdHlsZSBmb3IgdGhlIHNlbGVjdGlvbi4gSWYgdGhlXG4gICAqIHVzZXIncyBzZWxlY3Rpb24gaXMgY29sbGFwc2VkLCBhcHBseSBvciByZW1vdmUgdGhlIHN0eWxlIGZvciB0aGVcbiAgICogaW50ZXJuYWwgc3RhdGUuIElmIGl0IGlzIG5vdCBjb2xsYXBzZWQsIGFwcGx5IHRoZSBjaGFuZ2UgZGlyZWN0bHlcbiAgICogdG8gdGhlIGRvY3VtZW50IHN0YXRlLlxuICAgKi9cbiAgdG9nZ2xlSW5saW5lU3R5bGU6IGZ1bmN0aW9uIHRvZ2dsZUlubGluZVN0eWxlKGVkaXRvclN0YXRlLCBpbmxpbmVTdHlsZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgY3VycmVudFN0eWxlID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudElubGluZVN0eWxlKCk7XG5cbiAgICAvLyBJZiB0aGUgc2VsZWN0aW9uIGlzIGNvbGxhcHNlZCwgdG9nZ2xlIHRoZSBzcGVjaWZpZWQgc3R5bGUgb24gb3Igb2ZmIGFuZFxuICAgIC8vIHNldCB0aGUgcmVzdWx0IGFzIHRoZSBuZXcgaW5saW5lIHN0eWxlIG92ZXJyaWRlLiBUaGlzIHdpbGwgdGhlbiBiZVxuICAgIC8vIHVzZWQgYXMgdGhlIGlubGluZSBzdHlsZSBmb3IgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGluc2VydGVkLlxuICAgIGlmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgICAgcmV0dXJuIEVkaXRvclN0YXRlLnNldElubGluZVN0eWxlT3ZlcnJpZGUoZWRpdG9yU3RhdGUsIGN1cnJlbnRTdHlsZS5oYXMoaW5saW5lU3R5bGUpID8gY3VycmVudFN0eWxlLnJlbW92ZShpbmxpbmVTdHlsZSkgOiBjdXJyZW50U3R5bGUuYWRkKGlubGluZVN0eWxlKSk7XG4gICAgfVxuXG4gICAgLy8gSWYgY2hhcmFjdGVycyBhcmUgc2VsZWN0ZWQsIGltbWVkaWF0ZWx5IGFwcGx5IG9yIHJlbW92ZSB0aGVcbiAgICAvLyBpbmxpbmUgc3R5bGUgb24gdGhlIGRvY3VtZW50IHN0YXRlIGl0c2VsZi5cbiAgICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIG5ld0NvbnRlbnQ7XG5cbiAgICAvLyBJZiB0aGUgc3R5bGUgaXMgYWxyZWFkeSBwcmVzZW50IGZvciB0aGUgc2VsZWN0aW9uIHJhbmdlLCByZW1vdmUgaXQuXG4gICAgLy8gT3RoZXJ3aXNlLCBhcHBseSBpdC5cbiAgICBpZiAoY3VycmVudFN0eWxlLmhhcyhpbmxpbmVTdHlsZSkpIHtcbiAgICAgIG5ld0NvbnRlbnQgPSBEcmFmdE1vZGlmaWVyLnJlbW92ZUlubGluZVN0eWxlKGNvbnRlbnQsIHNlbGVjdGlvbiwgaW5saW5lU3R5bGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdDb250ZW50ID0gRHJhZnRNb2RpZmllci5hcHBseUlubGluZVN0eWxlKGNvbnRlbnQsIHNlbGVjdGlvbiwgaW5saW5lU3R5bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBuZXdDb250ZW50LCAnY2hhbmdlLWlubGluZS1zdHlsZScpO1xuICB9LFxuXG4gIHRvZ2dsZUxpbms6IGZ1bmN0aW9uIHRvZ2dsZUxpbmsoZWRpdG9yU3RhdGUsIHRhcmdldFNlbGVjdGlvbiwgZW50aXR5S2V5KSB7XG4gICAgdmFyIHdpdGhvdXRMaW5rID0gRHJhZnRNb2RpZmllci5hcHBseUVudGl0eShlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCB0YXJnZXRTZWxlY3Rpb24sIGVudGl0eUtleSk7XG5cbiAgICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgd2l0aG91dExpbmssICdhcHBseS1lbnRpdHknKTtcbiAgfSxcblxuICAvKipcbiAgICogV2hlbiBhIGNvbGxhcHNlZCBjdXJzb3IgaXMgYXQgdGhlIHN0YXJ0IG9mIHRoZSBmaXJzdCBzdHlsZWQgYmxvY2ssIG9yXG4gICAqIGFuIGVtcHR5IHN0eWxlZCBibG9jaywgY2hhbmdlcyBibG9jayB0byAndW5zdHlsZWQnLiBSZXR1cm5zIG51bGwgaWZcbiAgICogYmxvY2sgb3Igc2VsZWN0aW9uIGRvZXMgbm90IG1lZXQgdGhhdCBjcml0ZXJpYS5cbiAgICovXG4gIHRyeVRvUmVtb3ZlQmxvY2tTdHlsZTogZnVuY3Rpb24gdHJ5VG9SZW1vdmVCbG9ja1N0eWxlKGVkaXRvclN0YXRlKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIHZhciBvZmZzZXQgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yT2Zmc2V0KCk7XG4gICAgaWYgKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpICYmIG9mZnNldCA9PT0gMCkge1xuICAgICAgdmFyIGtleSA9IHNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKTtcbiAgICAgIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICAgIHZhciBibG9jayA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoa2V5KTtcblxuICAgICAgdmFyIGZpcnN0QmxvY2sgPSBjb250ZW50LmdldEZpcnN0QmxvY2soKTtcbiAgICAgIGlmIChibG9jay5nZXRMZW5ndGgoKSA+IDAgJiYgYmxvY2sgIT09IGZpcnN0QmxvY2spIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciB0eXBlID0gYmxvY2suZ2V0VHlwZSgpO1xuICAgICAgdmFyIGJsb2NrQmVmb3JlID0gY29udGVudC5nZXRCbG9ja0JlZm9yZShrZXkpO1xuICAgICAgaWYgKHR5cGUgPT09ICdjb2RlLWJsb2NrJyAmJiBibG9ja0JlZm9yZSAmJiBibG9ja0JlZm9yZS5nZXRUeXBlKCkgPT09ICdjb2RlLWJsb2NrJyAmJiBibG9ja0JlZm9yZS5nZXRMZW5ndGgoKSAhPT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgIT09ICd1bnN0eWxlZCcpIHtcbiAgICAgICAgcmV0dXJuIERyYWZ0TW9kaWZpZXIuc2V0QmxvY2tUeXBlKGNvbnRlbnQsIHNlbGVjdGlvbiwgJ3Vuc3R5bGVkJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJpY2hUZXh0RWRpdG9yVXRpbDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldFNhZmVCb2R5RnJvbUhUTUxcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFVzZXJBZ2VudCA9IHJlcXVpcmUoJ2ZianMvbGliL1VzZXJBZ2VudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBpc09sZElFID0gVXNlckFnZW50LmlzQnJvd3NlcignSUUgPD0gOScpO1xuXG4vLyBQcm92aWRlcyBhIGRvbSBub2RlIHRoYXQgd2lsbCBub3QgZXhlY3V0ZSBzY3JpcHRzXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRE9NSW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9BZGQtb25zL0NvZGVfc25pcHBldHMvSFRNTF90b19ET01cblxuZnVuY3Rpb24gZ2V0U2FmZUJvZHlGcm9tSFRNTChodG1sKSB7XG4gIHZhciBkb2M7XG4gIHZhciByb290ID0gbnVsbDtcbiAgLy8gUHJvdmlkZXMgYSBzYWZlIGNvbnRleHRcbiAgaWYgKCFpc09sZElFICYmIGRvY3VtZW50LmltcGxlbWVudGF0aW9uICYmIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCkge1xuICAgIGRvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgnZm9vJyk7XG4gICAgIWRvYy5kb2N1bWVudEVsZW1lbnQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWlzc2luZyBkb2MuZG9jdW1lbnRFbGVtZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGRvYy5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbDtcbiAgICByb290ID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gIH1cbiAgcmV0dXJuIHJvb3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U2FmZUJvZHlGcm9tSFRNTDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNvbnZlcnRGcm9tSFRNTFRvQ29udGVudEJsb2Nrc1xuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBfYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2tub3duTGlzdEl0ZW1EZXB0aENsLFxuICAgIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyTWV0YWRhdGEnKTtcbnZhciBDb250ZW50QmxvY2sgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9jaycpO1xudmFyIENvbnRlbnRCbG9ja05vZGUgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9ja05vZGUnKTtcbnZhciBEZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcCA9IHJlcXVpcmUoJy4vRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXAnKTtcbnZhciBEcmFmdEVudGl0eSA9IHJlcXVpcmUoJy4vRHJhZnRFbnRpdHknKTtcbnZhciBEcmFmdEZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vRHJhZnRGZWF0dXJlRmxhZ3MnKTtcbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyksXG4gICAgU2V0ID0gX3JlcXVpcmUuU2V0O1xuXG52YXIgVVJJID0gcmVxdWlyZSgnZmJqcy9saWIvVVJJJyk7XG5cbnZhciBjeCA9IHJlcXVpcmUoJ2ZianMvbGliL2N4Jyk7XG52YXIgZ2VuZXJhdGVSYW5kb21LZXkgPSByZXF1aXJlKCcuL2dlbmVyYXRlUmFuZG9tS2V5Jyk7XG52YXIgZ2V0U2FmZUJvZHlGcm9tSFRNTCA9IHJlcXVpcmUoJy4vZ2V0U2FmZUJvZHlGcm9tSFRNTCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHNhbml0aXplRHJhZnRUZXh0ID0gcmVxdWlyZSgnLi9zYW5pdGl6ZURyYWZ0VGV4dCcpO1xuXG52YXIgZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0ID0gRHJhZnRGZWF0dXJlRmxhZ3MuZHJhZnRfdHJlZV9kYXRhX3N1cHBvcnQ7XG5cbnZhciBMaXN0ID0gSW1tdXRhYmxlLkxpc3QsXG4gICAgT3JkZXJlZFNldCA9IEltbXV0YWJsZS5PcmRlcmVkU2V0O1xuXG5cbnZhciBOQlNQID0gJyZuYnNwOyc7XG52YXIgU1BBQ0UgPSAnICc7XG5cbi8vIEFyYml0cmFyeSBtYXggaW5kZW50XG52YXIgTUFYX0RFUFRIID0gNDtcblxuLy8gdXNlZCBmb3IgcmVwbGFjaW5nIGNoYXJhY3RlcnMgaW4gSFRNTFxudmFyIFJFR0VYX0NSID0gbmV3IFJlZ0V4cCgnXFxyJywgJ2cnKTtcbnZhciBSRUdFWF9MRiA9IG5ldyBSZWdFeHAoJ1xcbicsICdnJyk7XG52YXIgUkVHRVhfTkJTUCA9IG5ldyBSZWdFeHAoTkJTUCwgJ2cnKTtcbnZhciBSRUdFWF9DQVJSSUFHRSA9IG5ldyBSZWdFeHAoJyYjMTM7PycsICdnJyk7XG52YXIgUkVHRVhfWldTID0gbmV3IFJlZ0V4cCgnJiM4MjAzOz8nLCAnZycpO1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udC13ZWlnaHRcbnZhciBib2xkVmFsdWVzID0gWydib2xkJywgJ2JvbGRlcicsICc1MDAnLCAnNjAwJywgJzcwMCcsICc4MDAnLCAnOTAwJ107XG52YXIgbm90Qm9sZFZhbHVlcyA9IFsnbGlnaHQnLCAnbGlnaHRlcicsICcxMDAnLCAnMjAwJywgJzMwMCcsICc0MDAnXTtcblxuLy8gQmxvY2sgdGFnIGZsb3cgaXMgZGlmZmVyZW50IGJlY2F1c2UgTElzIGRvIG5vdCBoYXZlXG4vLyBhIGRldGVybWluaXN0aWMgc3R5bGUgO187XG52YXIgaW5saW5lVGFncyA9IHtcbiAgYjogJ0JPTEQnLFxuICBjb2RlOiAnQ09ERScsXG4gIGRlbDogJ1NUUklLRVRIUk9VR0gnLFxuICBlbTogJ0lUQUxJQycsXG4gIGk6ICdJVEFMSUMnLFxuICBzOiAnU1RSSUtFVEhST1VHSCcsXG4gIHN0cmlrZTogJ1NUUklLRVRIUk9VR0gnLFxuICBzdHJvbmc6ICdCT0xEJyxcbiAgdTogJ1VOREVSTElORSdcbn07XG5cbnZhciBrbm93bkxpc3RJdGVtRGVwdGhDbGFzc2VzID0gKF9rbm93bkxpc3RJdGVtRGVwdGhDbCA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2tub3duTGlzdEl0ZW1EZXB0aENsLCBjeCgncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2RlcHRoMCcpLCAwKSwgX2RlZmluZVByb3BlcnR5KF9rbm93bkxpc3RJdGVtRGVwdGhDbCwgY3goJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9kZXB0aDEnKSwgMSksIF9kZWZpbmVQcm9wZXJ0eShfa25vd25MaXN0SXRlbURlcHRoQ2wsIGN4KCdwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvZGVwdGgyJyksIDIpLCBfZGVmaW5lUHJvcGVydHkoX2tub3duTGlzdEl0ZW1EZXB0aENsLCBjeCgncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2RlcHRoMycpLCAzKSwgX2RlZmluZVByb3BlcnR5KF9rbm93bkxpc3RJdGVtRGVwdGhDbCwgY3goJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9kZXB0aDQnKSwgNCksIF9rbm93bkxpc3RJdGVtRGVwdGhDbCk7XG5cbnZhciBhbmNob3JBdHRyID0gWydjbGFzc05hbWUnLCAnaHJlZicsICdyZWwnLCAndGFyZ2V0JywgJ3RpdGxlJ107XG5cbnZhciBpbWdBdHRyID0gWydhbHQnLCAnY2xhc3NOYW1lJywgJ2hlaWdodCcsICdzcmMnLCAnd2lkdGgnXTtcblxudmFyIGxhc3RCbG9jayA9IHZvaWQgMDtcblxudmFyIEVNUFRZX0NIVU5LID0ge1xuICB0ZXh0OiAnJyxcbiAgaW5saW5lczogW10sXG4gIGVudGl0aWVzOiBbXSxcbiAgYmxvY2tzOiBbXVxufTtcblxudmFyIEVNUFRZX0JMT0NLID0ge1xuICBjaGlsZHJlbjogTGlzdCgpLFxuICBkZXB0aDogMCxcbiAga2V5OiAnJyxcbiAgdHlwZTogJydcbn07XG5cbnZhciBnZXRMaXN0QmxvY2tUeXBlID0gZnVuY3Rpb24gZ2V0TGlzdEJsb2NrVHlwZSh0YWcsIGxhc3RMaXN0KSB7XG4gIGlmICh0YWcgPT09ICdsaScpIHtcbiAgICByZXR1cm4gbGFzdExpc3QgPT09ICdvbCcgPyAnb3JkZXJlZC1saXN0LWl0ZW0nIDogJ3Vub3JkZXJlZC1saXN0LWl0ZW0nO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIGdldEJsb2NrTWFwU3VwcG9ydGVkVGFncyA9IGZ1bmN0aW9uIGdldEJsb2NrTWFwU3VwcG9ydGVkVGFncyhibG9ja1JlbmRlck1hcCkge1xuICB2YXIgdW5zdHlsZWRFbGVtZW50ID0gYmxvY2tSZW5kZXJNYXAuZ2V0KCd1bnN0eWxlZCcpLmVsZW1lbnQ7XG4gIHZhciB0YWdzID0gU2V0KFtdKTtcblxuICBibG9ja1JlbmRlck1hcC5mb3JFYWNoKGZ1bmN0aW9uIChkcmFmdEJsb2NrKSB7XG4gICAgaWYgKGRyYWZ0QmxvY2suYWxpYXNlZEVsZW1lbnRzKSB7XG4gICAgICBkcmFmdEJsb2NrLmFsaWFzZWRFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgdGFncyA9IHRhZ3MuYWRkKHRhZyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0YWdzID0gdGFncy5hZGQoZHJhZnRCbG9jay5lbGVtZW50KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRhZ3MuZmlsdGVyKGZ1bmN0aW9uICh0YWcpIHtcbiAgICByZXR1cm4gdGFnICYmIHRhZyAhPT0gdW5zdHlsZWRFbGVtZW50O1xuICB9KS50b0FycmF5KCkuc29ydCgpO1xufTtcblxuLy8gY3VzdG9tIGVsZW1lbnQgY29udmVyc2lvbnNcbnZhciBnZXRNdWx0aU1hdGNoZWRUeXBlID0gZnVuY3Rpb24gZ2V0TXVsdGlNYXRjaGVkVHlwZSh0YWcsIGxhc3RMaXN0LCBtdWx0aU1hdGNoRXh0cmFjdG9yKSB7XG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCBtdWx0aU1hdGNoRXh0cmFjdG9yLmxlbmd0aDsgaWkrKykge1xuICAgIHZhciBtYXRjaFR5cGUgPSBtdWx0aU1hdGNoRXh0cmFjdG9yW2lpXSh0YWcsIGxhc3RMaXN0KTtcbiAgICBpZiAobWF0Y2hUeXBlKSB7XG4gICAgICByZXR1cm4gbWF0Y2hUeXBlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBnZXRCbG9ja1R5cGVGb3JUYWcgPSBmdW5jdGlvbiBnZXRCbG9ja1R5cGVGb3JUYWcodGFnLCBsYXN0TGlzdCwgYmxvY2tSZW5kZXJNYXApIHtcbiAgdmFyIG1hdGNoZWRUeXBlcyA9IGJsb2NrUmVuZGVyTWFwLmZpbHRlcihmdW5jdGlvbiAoZHJhZnRCbG9jaykge1xuICAgIHJldHVybiBkcmFmdEJsb2NrLmVsZW1lbnQgPT09IHRhZyB8fCBkcmFmdEJsb2NrLndyYXBwZXIgPT09IHRhZyB8fCBkcmFmdEJsb2NrLmFsaWFzZWRFbGVtZW50cyAmJiBkcmFmdEJsb2NrLmFsaWFzZWRFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgcmV0dXJuIGFsaWFzID09PSB0YWc7XG4gICAgfSk7XG4gIH0pLmtleVNlcSgpLnRvU2V0KCkudG9BcnJheSgpLnNvcnQoKTtcblxuICAvLyBpZiB3ZSBkb250IGhhdmUgYW55IG1hdGNoZWQgdHlwZSwgcmV0dXJuIHVuc3R5bGVkXG4gIC8vIGlmIHdlIGhhdmUgb25lIG1hdGNoZWQgdHlwZSByZXR1cm4gaXRcbiAgLy8gaWYgd2UgaGF2ZSBtdWx0aSBtYXRjaGVkIHR5cGVzIHVzZSB0aGUgbXVsdGktbWF0Y2ggZnVuY3Rpb24gdG8gZ2F0aGVyIHR5cGVcbiAgc3dpdGNoIChtYXRjaGVkVHlwZXMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuICd1bnN0eWxlZCc7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIG1hdGNoZWRUeXBlc1swXTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGdldE11bHRpTWF0Y2hlZFR5cGUodGFnLCBsYXN0TGlzdCwgW2dldExpc3RCbG9ja1R5cGVdKSB8fCAndW5zdHlsZWQnO1xuICB9XG59O1xuXG52YXIgcHJvY2Vzc0lubGluZVRhZyA9IGZ1bmN0aW9uIHByb2Nlc3NJbmxpbmVUYWcodGFnLCBub2RlLCBjdXJyZW50U3R5bGUpIHtcbiAgdmFyIHN0eWxlVG9DaGVjayA9IGlubGluZVRhZ3NbdGFnXTtcbiAgaWYgKHN0eWxlVG9DaGVjaykge1xuICAgIGN1cnJlbnRTdHlsZSA9IGN1cnJlbnRTdHlsZS5hZGQoc3R5bGVUb0NoZWNrKS50b09yZGVyZWRTZXQoKTtcbiAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICB2YXIgaHRtbEVsZW1lbnQgPSBub2RlO1xuICAgIGN1cnJlbnRTdHlsZSA9IGN1cnJlbnRTdHlsZS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgdmFyIGZvbnRXZWlnaHQgPSBodG1sRWxlbWVudC5zdHlsZS5mb250V2VpZ2h0O1xuICAgICAgdmFyIGZvbnRTdHlsZSA9IGh0bWxFbGVtZW50LnN0eWxlLmZvbnRTdHlsZTtcbiAgICAgIHZhciB0ZXh0RGVjb3JhdGlvbiA9IGh0bWxFbGVtZW50LnN0eWxlLnRleHREZWNvcmF0aW9uO1xuXG4gICAgICBpZiAoYm9sZFZhbHVlcy5pbmRleE9mKGZvbnRXZWlnaHQpID49IDApIHtcbiAgICAgICAgc3R5bGUuYWRkKCdCT0xEJyk7XG4gICAgICB9IGVsc2UgaWYgKG5vdEJvbGRWYWx1ZXMuaW5kZXhPZihmb250V2VpZ2h0KSA+PSAwKSB7XG4gICAgICAgIHN0eWxlLnJlbW92ZSgnQk9MRCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9udFN0eWxlID09PSAnaXRhbGljJykge1xuICAgICAgICBzdHlsZS5hZGQoJ0lUQUxJQycpO1xuICAgICAgfSBlbHNlIGlmIChmb250U3R5bGUgPT09ICdub3JtYWwnKSB7XG4gICAgICAgIHN0eWxlLnJlbW92ZSgnSVRBTElDJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0RGVjb3JhdGlvbiA9PT0gJ3VuZGVybGluZScpIHtcbiAgICAgICAgc3R5bGUuYWRkKCdVTkRFUkxJTkUnKTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZXh0RGVjb3JhdGlvbiA9PT0gJ2xpbmUtdGhyb3VnaCcpIHtcbiAgICAgICAgc3R5bGUuYWRkKCdTVFJJS0VUSFJPVUdIJyk7XG4gICAgICB9XG4gICAgICBpZiAodGV4dERlY29yYXRpb24gPT09ICdub25lJykge1xuICAgICAgICBzdHlsZS5yZW1vdmUoJ1VOREVSTElORScpO1xuICAgICAgICBzdHlsZS5yZW1vdmUoJ1NUUklLRVRIUk9VR0gnKTtcbiAgICAgIH1cbiAgICB9KS50b09yZGVyZWRTZXQoKTtcbiAgfVxuICByZXR1cm4gY3VycmVudFN0eWxlO1xufTtcblxudmFyIGpvaW5DaHVua3MgPSBmdW5jdGlvbiBqb2luQ2h1bmtzKEEsIEIsIGV4cGVyaW1lbnRhbEhhc05lc3RlZEJsb2Nrcykge1xuICAvLyBTb21ldGltZXMgdHdvIGJsb2NrcyB3aWxsIHRvdWNoIGluIHRoZSBET00gYW5kIHdlIG5lZWQgdG8gc3RyaXAgdGhlXG4gIC8vIGV4dHJhIGRlbGltaXRlciB0byBwcmVzZXJ2ZSBuaWNlbmVzcy5cbiAgdmFyIGxhc3RJbkEgPSBBLnRleHQuc2xpY2UoLTEpO1xuICB2YXIgZmlyc3RJbkIgPSBCLnRleHQuc2xpY2UoMCwgMSk7XG5cbiAgaWYgKGxhc3RJbkEgPT09ICdcXHInICYmIGZpcnN0SW5CID09PSAnXFxyJyAmJiAhZXhwZXJpbWVudGFsSGFzTmVzdGVkQmxvY2tzKSB7XG4gICAgQS50ZXh0ID0gQS50ZXh0LnNsaWNlKDAsIC0xKTtcbiAgICBBLmlubGluZXMucG9wKCk7XG4gICAgQS5lbnRpdGllcy5wb3AoKTtcbiAgICBBLmJsb2Nrcy5wb3AoKTtcbiAgfVxuXG4gIC8vIEtpbGwgd2hpdGVzcGFjZSBhZnRlciBibG9ja3NcbiAgaWYgKGxhc3RJbkEgPT09ICdcXHInKSB7XG4gICAgaWYgKEIudGV4dCA9PT0gU1BBQ0UgfHwgQi50ZXh0ID09PSAnXFxuJykge1xuICAgICAgcmV0dXJuIEE7XG4gICAgfSBlbHNlIGlmIChmaXJzdEluQiA9PT0gU1BBQ0UgfHwgZmlyc3RJbkIgPT09ICdcXG4nKSB7XG4gICAgICBCLnRleHQgPSBCLnRleHQuc2xpY2UoMSk7XG4gICAgICBCLmlubGluZXMuc2hpZnQoKTtcbiAgICAgIEIuZW50aXRpZXMuc2hpZnQoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRleHQ6IEEudGV4dCArIEIudGV4dCxcbiAgICBpbmxpbmVzOiBBLmlubGluZXMuY29uY2F0KEIuaW5saW5lcyksXG4gICAgZW50aXRpZXM6IEEuZW50aXRpZXMuY29uY2F0KEIuZW50aXRpZXMpLFxuICAgIGJsb2NrczogQS5ibG9ja3MuY29uY2F0KEIuYmxvY2tzKVxuICB9O1xufTtcblxuLyoqXG4gKiBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhbnl0aGluZyBsaWtlIDxwPiA8YmxvY2txdW90ZT4gPGgxPi4uLiB0byBjcmVhdGVcbiAqIGJsb2NrIHRhZ3MgZnJvbS4gSWYgd2UgZG8sIHdlIGNhbiB1c2UgdGhvc2UgYW5kIGlnbm9yZSA8ZGl2PiB0YWdzLiBJZiB3ZVxuICogZG9uJ3QsIHdlIGNhbiB0cmVhdCA8ZGl2PiB0YWdzIGFzIG1lYW5pbmdmdWwgKHVuc3R5bGVkKSBibG9ja3MuXG4gKi9cbnZhciBjb250YWluc1NlbWFudGljQmxvY2tNYXJrdXAgPSBmdW5jdGlvbiBjb250YWluc1NlbWFudGljQmxvY2tNYXJrdXAoaHRtbCwgYmxvY2tUYWdzKSB7XG4gIHJldHVybiBibG9ja1RhZ3Muc29tZShmdW5jdGlvbiAodGFnKSB7XG4gICAgcmV0dXJuIGh0bWwuaW5kZXhPZignPCcgKyB0YWcpICE9PSAtMTtcbiAgfSk7XG59O1xuXG52YXIgaGFzVmFsaWRMaW5rVGV4dCA9IGZ1bmN0aW9uIGhhc1ZhbGlkTGlua1RleHQobGluaykge1xuICAhKGxpbmsgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTGluayBtdXN0IGJlIGFuIEhUTUxBbmNob3JFbGVtZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIHByb3RvY29sID0gbGluay5wcm90b2NvbDtcbiAgcmV0dXJuIHByb3RvY29sID09PSAnaHR0cDonIHx8IHByb3RvY29sID09PSAnaHR0cHM6JyB8fCBwcm90b2NvbCA9PT0gJ21haWx0bzonO1xufTtcblxudmFyIGdldFdoaXRlc3BhY2VDaHVuayA9IGZ1bmN0aW9uIGdldFdoaXRlc3BhY2VDaHVuayhpbkVudGl0eSkge1xuICB2YXIgZW50aXRpZXMgPSBuZXcgQXJyYXkoMSk7XG4gIGlmIChpbkVudGl0eSkge1xuICAgIGVudGl0aWVzWzBdID0gaW5FbnRpdHk7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBFTVBUWV9DSFVOSywge1xuICAgIHRleHQ6IFNQQUNFLFxuICAgIGlubGluZXM6IFtPcmRlcmVkU2V0KCldLFxuICAgIGVudGl0aWVzOiBlbnRpdGllc1xuICB9KTtcbn07XG5cbnZhciBnZXRTb2Z0TmV3bGluZUNodW5rID0gZnVuY3Rpb24gZ2V0U29mdE5ld2xpbmVDaHVuaygpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBFTVBUWV9DSFVOSywge1xuICAgIHRleHQ6ICdcXG4nLFxuICAgIGlubGluZXM6IFtPcmRlcmVkU2V0KCldLFxuICAgIGVudGl0aWVzOiBuZXcgQXJyYXkoMSlcbiAgfSk7XG59O1xuXG52YXIgZ2V0Q2h1bmtlZEJsb2NrID0gZnVuY3Rpb24gZ2V0Q2h1bmtlZEJsb2NrKCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgRU1QVFlfQkxPQ0ssIHByb3BzKTtcbn07XG5cbnZhciBnZXRCbG9ja0RpdmlkZXJDaHVuayA9IGZ1bmN0aW9uIGdldEJsb2NrRGl2aWRlckNodW5rKGJsb2NrLCBkZXB0aCkge1xuICB2YXIgcGFyZW50S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuXG4gIHJldHVybiB7XG4gICAgdGV4dDogJ1xccicsXG4gICAgaW5saW5lczogW09yZGVyZWRTZXQoKV0sXG4gICAgZW50aXRpZXM6IG5ldyBBcnJheSgxKSxcbiAgICBibG9ja3M6IFtnZXRDaHVua2VkQmxvY2soe1xuICAgICAgcGFyZW50OiBwYXJlbnRLZXksXG4gICAgICBrZXk6IGdlbmVyYXRlUmFuZG9tS2V5KCksXG4gICAgICB0eXBlOiBibG9jayxcbiAgICAgIGRlcHRoOiBNYXRoLm1heCgwLCBNYXRoLm1pbihNQVhfREVQVEgsIGRlcHRoKSlcbiAgICB9KV1cbiAgfTtcbn07XG5cbi8qKlxuICogIElmIHdlJ3JlIHBhc3RpbmcgZnJvbSBvbmUgRHJhZnRFZGl0b3IgdG8gYW5vdGhlciB3ZSBjYW4gY2hlY2sgdG8gc2VlIGlmXG4gKiAgZXhpc3RpbmcgbGlzdCBpdGVtIGRlcHRoIGNsYXNzZXMgYXJlIGJlaW5nIHVzZWQgYW5kIHByZXNlcnZlIHRoaXMgc3R5bGVcbiAqL1xudmFyIGdldExpc3RJdGVtRGVwdGggPSBmdW5jdGlvbiBnZXRMaXN0SXRlbURlcHRoKG5vZGUpIHtcbiAgdmFyIGRlcHRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG4gIE9iamVjdC5rZXlzKGtub3duTGlzdEl0ZW1EZXB0aENsYXNzZXMpLnNvbWUoZnVuY3Rpb24gKGRlcHRoQ2xhc3MpIHtcbiAgICBpZiAobm9kZS5jbGFzc0xpc3QuY29udGFpbnMoZGVwdGhDbGFzcykpIHtcbiAgICAgIGRlcHRoID0ga25vd25MaXN0SXRlbURlcHRoQ2xhc3Nlc1tkZXB0aENsYXNzXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGVwdGg7XG59O1xuXG52YXIgZ2VuRnJhZ21lbnQgPSBmdW5jdGlvbiBnZW5GcmFnbWVudChlbnRpdHlNYXAsIG5vZGUsIGlubGluZVN0eWxlLCBsYXN0TGlzdCwgaW5CbG9jaywgYmxvY2tUYWdzLCBkZXB0aCwgYmxvY2tSZW5kZXJNYXAsIGluRW50aXR5LCBwYXJlbnRLZXkpIHtcbiAgdmFyIGxhc3RMYXN0QmxvY2sgPSBsYXN0QmxvY2s7XG4gIHZhciBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgdmFyIG5ld0VudGl0eU1hcCA9IGVudGl0eU1hcDtcbiAgdmFyIG5leHRCbG9ja1R5cGUgPSAndW5zdHlsZWQnO1xuICB2YXIgbmV3QmxvY2sgPSBmYWxzZTtcbiAgdmFyIGluQmxvY2tUeXBlID0gaW5CbG9jayAmJiBnZXRCbG9ja1R5cGVGb3JUYWcoaW5CbG9jaywgbGFzdExpc3QsIGJsb2NrUmVuZGVyTWFwKTtcbiAgdmFyIGNodW5rID0gX2V4dGVuZHMoe30sIEVNUFRZX0NIVU5LKTtcbiAgdmFyIG5ld0NodW5rID0gbnVsbDtcbiAgdmFyIGJsb2NrS2V5ID0gdm9pZCAwO1xuXG4gIC8vIEJhc2UgQ2FzZVxuICBpZiAobm9kZU5hbWUgPT09ICcjdGV4dCcpIHtcbiAgICB2YXIgX3RleHQgPSBub2RlLnRleHRDb250ZW50O1xuICAgIHZhciBub2RlVGV4dENvbnRlbnQgPSBfdGV4dC50cmltKCk7XG5cbiAgICAvLyBXZSBzaG91bGQgbm90IGNyZWF0ZSBibG9ja3MgZm9yIGxlYWRpbmcgc3BhY2VzIHRoYXQgYXJlXG4gICAgLy8gZXhpc3RpbmcgYXJvdW5kIG9sL3VsIGFuZCB0aGVpciBjaGlsZHJlbiBsaXN0IGl0ZW1zXG4gICAgaWYgKGxhc3RMaXN0ICYmIG5vZGVUZXh0Q29udGVudCA9PT0gJycgJiYgbm9kZS5wYXJlbnRFbGVtZW50KSB7XG4gICAgICB2YXIgcGFyZW50Tm9kZU5hbWUgPSBub2RlLnBhcmVudEVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChwYXJlbnROb2RlTmFtZSA9PT0gJ29sJyB8fCBwYXJlbnROb2RlTmFtZSA9PT0gJ3VsJykge1xuICAgICAgICByZXR1cm4geyBjaHVuazogX2V4dGVuZHMoe30sIEVNUFRZX0NIVU5LKSwgZW50aXR5TWFwOiBlbnRpdHlNYXAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobm9kZVRleHRDb250ZW50ID09PSAnJyAmJiBpbkJsb2NrICE9PSAncHJlJykge1xuICAgICAgcmV0dXJuIHsgY2h1bms6IGdldFdoaXRlc3BhY2VDaHVuayhpbkVudGl0eSksIGVudGl0eU1hcDogZW50aXR5TWFwIH07XG4gICAgfVxuICAgIGlmIChpbkJsb2NrICE9PSAncHJlJykge1xuICAgICAgLy8gQ2FuJ3QgdXNlIGVtcHR5IHN0cmluZyBiZWNhdXNlIE1TV29yZFxuICAgICAgX3RleHQgPSBfdGV4dC5yZXBsYWNlKFJFR0VYX0xGLCBTUEFDRSk7XG4gICAgfVxuXG4gICAgLy8gc2F2ZSB0aGUgbGFzdCBibG9jayBzbyB3ZSBjYW4gdXNlIGl0IGxhdGVyXG4gICAgbGFzdEJsb2NrID0gbm9kZU5hbWU7XG5cbiAgICByZXR1cm4ge1xuICAgICAgY2h1bms6IHtcbiAgICAgICAgdGV4dDogX3RleHQsXG4gICAgICAgIGlubGluZXM6IEFycmF5KF90ZXh0Lmxlbmd0aCkuZmlsbChpbmxpbmVTdHlsZSksXG4gICAgICAgIGVudGl0aWVzOiBBcnJheShfdGV4dC5sZW5ndGgpLmZpbGwoaW5FbnRpdHkpLFxuICAgICAgICBibG9ja3M6IFtdXG4gICAgICB9LFxuICAgICAgZW50aXR5TWFwOiBlbnRpdHlNYXBcbiAgICB9O1xuICB9XG5cbiAgLy8gc2F2ZSB0aGUgbGFzdCBibG9jayBzbyB3ZSBjYW4gdXNlIGl0IGxhdGVyXG4gIGxhc3RCbG9jayA9IG5vZGVOYW1lO1xuXG4gIC8vIEJSIHRhZ3NcbiAgaWYgKG5vZGVOYW1lID09PSAnYnInKSB7XG4gICAgaWYgKGxhc3RMYXN0QmxvY2sgPT09ICdicicgJiYgKCFpbkJsb2NrIHx8IGluQmxvY2tUeXBlID09PSAndW5zdHlsZWQnKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2h1bms6IGdldEJsb2NrRGl2aWRlckNodW5rKCd1bnN0eWxlZCcsIGRlcHRoLCBwYXJlbnRLZXkpLFxuICAgICAgICBlbnRpdHlNYXA6IGVudGl0eU1hcFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgY2h1bms6IGdldFNvZnROZXdsaW5lQ2h1bmsoKSwgZW50aXR5TWFwOiBlbnRpdHlNYXAgfTtcbiAgfVxuXG4gIC8vIElNRyB0YWdzXG4gIGlmIChub2RlTmFtZSA9PT0gJ2ltZycgJiYgbm9kZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgJiYgbm9kZS5hdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnc3JjJykgJiYgbm9kZS5hdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnc3JjJykudmFsdWUpIHtcbiAgICB2YXIgaW1hZ2UgPSBub2RlO1xuICAgIHZhciBlbnRpdHlDb25maWcgPSB7fTtcblxuICAgIGltZ0F0dHIuZm9yRWFjaChmdW5jdGlvbiAoYXR0cikge1xuICAgICAgdmFyIGltYWdlQXR0cmlidXRlID0gaW1hZ2UuZ2V0QXR0cmlidXRlKGF0dHIpO1xuICAgICAgaWYgKGltYWdlQXR0cmlidXRlKSB7XG4gICAgICAgIGVudGl0eUNvbmZpZ1thdHRyXSA9IGltYWdlQXR0cmlidXRlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEZvcmNpbmcgdGhpcyBub2RlIHRvIGhhdmUgY2hpbGRyZW4gYmVjYXVzZSBvdGhlcndpc2Ugbm8gZW50aXR5IHdpbGwgYmVcbiAgICAvLyBjcmVhdGVkIGZvciB0aGlzIG5vZGUuXG4gICAgLy8gVGhlIGNoaWxkIHRleHQgbm9kZSBjYW5ub3QganVzdCBoYXZlIGEgc3BhY2Ugb3IgcmV0dXJuIGFzIGNvbnRlbnQgLVxuICAgIC8vIHdlIHN0cmlwIHRob3NlIG91dC5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2RyYWZ0LWpzL2lzc3Vlcy8yMzEgZm9yIHNvbWUgY29udGV4dC5cbiAgICBub2RlLnRleHRDb250ZW50ID0gJ1xcdUQ4M0RcXHVEQ0Y3JztcblxuICAgIC8vIFRPRE86IHVwZGF0ZSB0aGlzIHdoZW4gd2UgcmVtb3ZlIERyYWZ0RW50aXR5IGVudGlyZWx5XG4gICAgaW5FbnRpdHkgPSBEcmFmdEVudGl0eS5fX2NyZWF0ZSgnSU1BR0UnLCAnTVVUQUJMRScsIGVudGl0eUNvbmZpZyB8fCB7fSk7XG4gIH1cblxuICAvLyBJbmxpbmUgdGFnc1xuICBpbmxpbmVTdHlsZSA9IHByb2Nlc3NJbmxpbmVUYWcobm9kZU5hbWUsIG5vZGUsIGlubGluZVN0eWxlKTtcblxuICAvLyBIYW5kbGUgbGlzdHNcbiAgaWYgKG5vZGVOYW1lID09PSAndWwnIHx8IG5vZGVOYW1lID09PSAnb2wnKSB7XG4gICAgaWYgKGxhc3RMaXN0KSB7XG4gICAgICBkZXB0aCArPSAxO1xuICAgIH1cbiAgICBsYXN0TGlzdCA9IG5vZGVOYW1lO1xuICB9XG5cbiAgaWYgKCFleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQgJiYgbm9kZU5hbWUgPT09ICdsaScgJiYgbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgZGVwdGggPSBnZXRMaXN0SXRlbURlcHRoKG5vZGUsIGRlcHRoKTtcbiAgfVxuXG4gIHZhciBibG9ja1R5cGUgPSBnZXRCbG9ja1R5cGVGb3JUYWcobm9kZU5hbWUsIGxhc3RMaXN0LCBibG9ja1JlbmRlck1hcCk7XG4gIHZhciBpbkxpc3RCbG9jayA9IGxhc3RMaXN0ICYmIGluQmxvY2sgPT09ICdsaScgJiYgbm9kZU5hbWUgPT09ICdsaSc7XG4gIHZhciBpbkJsb2NrT3JIYXNOZXN0ZWRCbG9ja3MgPSAoIWluQmxvY2sgfHwgZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0KSAmJiBibG9ja1RhZ3MuaW5kZXhPZihub2RlTmFtZSkgIT09IC0xO1xuXG4gIC8vIEJsb2NrIFRhZ3NcbiAgaWYgKGluTGlzdEJsb2NrIHx8IGluQmxvY2tPckhhc05lc3RlZEJsb2Nrcykge1xuICAgIGNodW5rID0gZ2V0QmxvY2tEaXZpZGVyQ2h1bmsoYmxvY2tUeXBlLCBkZXB0aCwgcGFyZW50S2V5KTtcbiAgICBibG9ja0tleSA9IGNodW5rLmJsb2Nrc1swXS5rZXk7XG4gICAgaW5CbG9jayA9IG5vZGVOYW1lO1xuICAgIG5ld0Jsb2NrID0gIWV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydDtcbiAgfVxuXG4gIC8vIHRoaXMgaXMgcmVxdWlyZWQgc28gdGhhdCB3ZSBjYW4gaGFuZGxlICd1bCcgYW5kICdvbCdcbiAgaWYgKGluTGlzdEJsb2NrKSB7XG4gICAgbmV4dEJsb2NrVHlwZSA9IGxhc3RMaXN0ID09PSAndWwnID8gJ3Vub3JkZXJlZC1saXN0LWl0ZW0nIDogJ29yZGVyZWQtbGlzdC1pdGVtJztcbiAgfVxuXG4gIC8vIFJlY3Vyc2UgdGhyb3VnaCBjaGlsZHJlblxuICB2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIGlmIChjaGlsZCAhPSBudWxsKSB7XG4gICAgbm9kZU5hbWUgPSBjaGlsZC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgdmFyIGVudGl0eUlkID0gbnVsbDtcblxuICB3aGlsZSAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCAmJiBjaGlsZC5ocmVmICYmIGhhc1ZhbGlkTGlua1RleHQoY2hpbGQpKSB7XG4gICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYW5jaG9yID0gY2hpbGQ7XG4gICAgICAgIHZhciBlbnRpdHlDb25maWcgPSB7fTtcblxuICAgICAgICBhbmNob3JBdHRyLmZvckVhY2goZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgICAgICB2YXIgYW5jaG9yQXR0cmlidXRlID0gYW5jaG9yLmdldEF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgICBpZiAoYW5jaG9yQXR0cmlidXRlKSB7XG4gICAgICAgICAgICBlbnRpdHlDb25maWdbYXR0cl0gPSBhbmNob3JBdHRyaWJ1dGU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBlbnRpdHlDb25maWcudXJsID0gbmV3IFVSSShhbmNob3IuaHJlZikudG9TdHJpbmcoKTtcbiAgICAgICAgLy8gVE9ETzogdXBkYXRlIHRoaXMgd2hlbiB3ZSByZW1vdmUgRHJhZnRFbnRpdHkgY29tcGxldGVseVxuICAgICAgICBlbnRpdHlJZCA9IERyYWZ0RW50aXR5Ll9fY3JlYXRlKCdMSU5LJywgJ01VVEFCTEUnLCBlbnRpdHlDb25maWcgfHwge30pO1xuICAgICAgfSkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50aXR5SWQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIF9nZW5GcmFnbWVudCA9IGdlbkZyYWdtZW50KG5ld0VudGl0eU1hcCwgY2hpbGQsIGlubGluZVN0eWxlLCBsYXN0TGlzdCwgaW5CbG9jaywgYmxvY2tUYWdzLCBkZXB0aCwgYmxvY2tSZW5kZXJNYXAsIGVudGl0eUlkIHx8IGluRW50aXR5LCBleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQgPyBibG9ja0tleSA6IG51bGwpLFxuICAgICAgICBnZW5lcmF0ZWRDaHVuayA9IF9nZW5GcmFnbWVudC5jaHVuayxcbiAgICAgICAgbWF5YmVVcGRhdGVkRW50aXR5TWFwID0gX2dlbkZyYWdtZW50LmVudGl0eU1hcDtcblxuICAgIG5ld0NodW5rID0gZ2VuZXJhdGVkQ2h1bms7XG4gICAgbmV3RW50aXR5TWFwID0gbWF5YmVVcGRhdGVkRW50aXR5TWFwO1xuXG4gICAgY2h1bmsgPSBqb2luQ2h1bmtzKGNodW5rLCBuZXdDaHVuaywgZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0KTtcbiAgICB2YXIgc2libGluZyA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXG4gICAgLy8gUHV0IGluIGEgbmV3bGluZSB0byBicmVhayB1cCBibG9ja3MgaW5zaWRlIGJsb2Nrc1xuICAgIGlmICghcGFyZW50S2V5ICYmIHNpYmxpbmcgJiYgYmxvY2tUYWdzLmluZGV4T2Yobm9kZU5hbWUpID49IDAgJiYgaW5CbG9jaykge1xuICAgICAgY2h1bmsgPSBqb2luQ2h1bmtzKGNodW5rLCBnZXRTb2Z0TmV3bGluZUNodW5rKCkpO1xuICAgIH1cbiAgICBpZiAoc2libGluZykge1xuICAgICAgbm9kZU5hbWUgPSBzaWJsaW5nLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIGNoaWxkID0gc2libGluZztcbiAgfVxuXG4gIGlmIChuZXdCbG9jaykge1xuICAgIGNodW5rID0gam9pbkNodW5rcyhjaHVuaywgZ2V0QmxvY2tEaXZpZGVyQ2h1bmsobmV4dEJsb2NrVHlwZSwgZGVwdGgsIHBhcmVudEtleSkpO1xuICB9XG5cbiAgcmV0dXJuIHsgY2h1bms6IGNodW5rLCBlbnRpdHlNYXA6IG5ld0VudGl0eU1hcCB9O1xufTtcblxudmFyIGdldENodW5rRm9ySFRNTCA9IGZ1bmN0aW9uIGdldENodW5rRm9ySFRNTChodG1sLCBET01CdWlsZGVyLCBibG9ja1JlbmRlck1hcCwgZW50aXR5TWFwKSB7XG4gIGh0bWwgPSBodG1sLnRyaW0oKS5yZXBsYWNlKFJFR0VYX0NSLCAnJykucmVwbGFjZShSRUdFWF9OQlNQLCBTUEFDRSkucmVwbGFjZShSRUdFWF9DQVJSSUFHRSwgJycpLnJlcGxhY2UoUkVHRVhfWldTLCAnJyk7XG5cbiAgdmFyIHN1cHBvcnRlZEJsb2NrVGFncyA9IGdldEJsb2NrTWFwU3VwcG9ydGVkVGFncyhibG9ja1JlbmRlck1hcCk7XG5cbiAgdmFyIHNhZmVCb2R5ID0gRE9NQnVpbGRlcihodG1sKTtcbiAgaWYgKCFzYWZlQm9keSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGxhc3RCbG9jayA9IG51bGw7XG5cbiAgLy8gU29tZXRpbWVzIHdlIGFyZW4ndCBkZWFsaW5nIHdpdGggY29udGVudCB0aGF0IGNvbnRhaW5zIG5pY2Ugc2VtYW50aWNcbiAgLy8gdGFncy4gSW4gdGhpcyBjYXNlLCB1c2UgZGl2cyB0byBzZXBhcmF0ZSBldmVyeXRoaW5nIG91dCBpbnRvIHBhcmFncmFwaHNcbiAgLy8gYW5kIGhvcGUgZm9yIHRoZSBiZXN0LlxuICB2YXIgd29ya2luZ0Jsb2NrcyA9IGNvbnRhaW5zU2VtYW50aWNCbG9ja01hcmt1cChodG1sLCBzdXBwb3J0ZWRCbG9ja1RhZ3MpID8gc3VwcG9ydGVkQmxvY2tUYWdzIDogWydkaXYnXTtcblxuICAvLyBTdGFydCB3aXRoIC0xIGJsb2NrIGRlcHRoIHRvIG9mZnNldCB0aGUgZmFjdCB0aGF0IHdlIGFyZSBwYXNzaW5nIGluIGEgZmFrZVxuICAvLyBVTCBibG9jayB0byBzdGFydCB3aXRoLlxuICB2YXIgZnJhZ21lbnQgPSBnZW5GcmFnbWVudChlbnRpdHlNYXAsIHNhZmVCb2R5LCBPcmRlcmVkU2V0KCksICd1bCcsIG51bGwsIHdvcmtpbmdCbG9ja3MsIC0xLCBibG9ja1JlbmRlck1hcCk7XG5cbiAgdmFyIGNodW5rID0gZnJhZ21lbnQuY2h1bms7XG4gIHZhciBuZXdFbnRpdHlNYXAgPSBmcmFnbWVudC5lbnRpdHlNYXA7XG5cbiAgLy8gam9pbiB3aXRoIHByZXZpb3VzIGJsb2NrIHRvIHByZXZlbnQgd2VpcmRuZXNzIG9uIHBhc3RlXG4gIGlmIChjaHVuay50ZXh0LmluZGV4T2YoJ1xccicpID09PSAwKSB7XG4gICAgY2h1bmsgPSB7XG4gICAgICB0ZXh0OiBjaHVuay50ZXh0LnNsaWNlKDEpLFxuICAgICAgaW5saW5lczogY2h1bmsuaW5saW5lcy5zbGljZSgxKSxcbiAgICAgIGVudGl0aWVzOiBjaHVuay5lbnRpdGllcy5zbGljZSgxKSxcbiAgICAgIGJsb2NrczogY2h1bmsuYmxvY2tzXG4gICAgfTtcbiAgfVxuXG4gIC8vIEtpbGwgYmxvY2sgZGVsaW1pdGVyIGF0IHRoZSBlbmRcbiAgaWYgKGNodW5rLnRleHQuc2xpY2UoLTEpID09PSAnXFxyJykge1xuICAgIGNodW5rLnRleHQgPSBjaHVuay50ZXh0LnNsaWNlKDAsIC0xKTtcbiAgICBjaHVuay5pbmxpbmVzID0gY2h1bmsuaW5saW5lcy5zbGljZSgwLCAtMSk7XG4gICAgY2h1bmsuZW50aXRpZXMgPSBjaHVuay5lbnRpdGllcy5zbGljZSgwLCAtMSk7XG4gICAgY2h1bmsuYmxvY2tzLnBvcCgpO1xuICB9XG5cbiAgLy8gSWYgd2Ugc2F3IG5vIGJsb2NrIHRhZ3MsIHB1dCBhbiB1bnN0eWxlZCBvbmUgaW5cbiAgaWYgKGNodW5rLmJsb2Nrcy5sZW5ndGggPT09IDApIHtcbiAgICBjaHVuay5ibG9ja3MucHVzaChfZXh0ZW5kcyh7fSwgRU1QVFlfQ0hVTkssIHtcbiAgICAgIHR5cGU6ICd1bnN0eWxlZCcsXG4gICAgICBkZXB0aDogMFxuICAgIH0pKTtcbiAgfVxuXG4gIC8vIFNvbWV0aW1lcyB3ZSBzdGFydCB3aXRoIHRleHQgdGhhdCBpc24ndCBpbiBhIGJsb2NrLCB3aGljaCBpcyB0aGVuXG4gIC8vIGZvbGxvd2VkIGJ5IGJsb2Nrcy4gTmVlZCB0byBmaXggdXAgdGhlIGJsb2NrcyB0byBhZGQgaW5cbiAgLy8gYW4gdW5zdHlsZWQgYmxvY2sgZm9yIHRoaXMgY29udGVudFxuICBpZiAoY2h1bmsudGV4dC5zcGxpdCgnXFxyJykubGVuZ3RoID09PSBjaHVuay5ibG9ja3MubGVuZ3RoICsgMSkge1xuICAgIGNodW5rLmJsb2Nrcy51bnNoaWZ0KHsgdHlwZTogJ3Vuc3R5bGVkJywgZGVwdGg6IDAgfSk7XG4gIH1cblxuICByZXR1cm4geyBjaHVuazogY2h1bmssIGVudGl0eU1hcDogbmV3RW50aXR5TWFwIH07XG59O1xuXG52YXIgY29udmVydENodW5rVG9Db250ZW50QmxvY2tzID0gZnVuY3Rpb24gY29udmVydENodW5rVG9Db250ZW50QmxvY2tzKGNodW5rKSB7XG4gIGlmICghY2h1bmsgfHwgIWNodW5rLnRleHQgfHwgIUFycmF5LmlzQXJyYXkoY2h1bmsuYmxvY2tzKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgICBjYWNoZVJlZjoge30sXG4gICAgY29udGVudEJsb2NrczogW11cbiAgfTtcblxuICB2YXIgc3RhcnQgPSAwO1xuXG4gIHZhciByYXdCbG9ja3MgPSBjaHVuay5ibG9ja3MsXG4gICAgICByYXdJbmxpbmVzID0gY2h1bmsuaW5saW5lcyxcbiAgICAgIHJhd0VudGl0aWVzID0gY2h1bmsuZW50aXRpZXM7XG5cblxuICB2YXIgQmxvY2tOb2RlUmVjb3JkID0gZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0ID8gQ29udGVudEJsb2NrTm9kZSA6IENvbnRlbnRCbG9jaztcblxuICByZXR1cm4gY2h1bmsudGV4dC5zcGxpdCgnXFxyJykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHRleHRCbG9jaywgaW5kZXgpIHtcbiAgICAvLyBNYWtlIGFic29sdXRlbHkgY2VydGFpbiB0aGF0IG91ciB0ZXh0IGlzIGFjY2VwdGFibGUuXG4gICAgdGV4dEJsb2NrID0gc2FuaXRpemVEcmFmdFRleHQodGV4dEJsb2NrKTtcblxuICAgIHZhciBibG9jayA9IHJhd0Jsb2Nrc1tpbmRleF07XG4gICAgdmFyIGVuZCA9IHN0YXJ0ICsgdGV4dEJsb2NrLmxlbmd0aDtcbiAgICB2YXIgaW5saW5lcyA9IHJhd0lubGluZXMuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgdmFyIGVudGl0aWVzID0gcmF3RW50aXRpZXMuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgdmFyIGNoYXJhY3Rlckxpc3QgPSBMaXN0KGlubGluZXMubWFwKGZ1bmN0aW9uIChzdHlsZSwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0geyBzdHlsZTogc3R5bGUsIGVudGl0eTogbnVsbCB9O1xuICAgICAgaWYgKGVudGl0aWVzW2luZGV4XSkge1xuICAgICAgICBkYXRhLmVudGl0eSA9IGVudGl0aWVzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBDaGFyYWN0ZXJNZXRhZGF0YS5jcmVhdGUoZGF0YSk7XG4gICAgfSkpO1xuICAgIHN0YXJ0ID0gZW5kICsgMTtcblxuICAgIHZhciBkZXB0aCA9IGJsb2NrLmRlcHRoLFxuICAgICAgICB0eXBlID0gYmxvY2sudHlwZSxcbiAgICAgICAgcGFyZW50ID0gYmxvY2sucGFyZW50O1xuXG5cbiAgICB2YXIga2V5ID0gYmxvY2sua2V5IHx8IGdlbmVyYXRlUmFuZG9tS2V5KCk7XG4gICAgdmFyIHBhcmVudFRleHROb2RlS2V5ID0gbnVsbDsgLy8gd2lsbCBiZSB1c2VkIHRvIHN0b3JlIGNvbnRhaW5lciB0ZXh0IG5vZGVzXG5cbiAgICAvLyBjaGlsZHJlbnMgYWRkIHRoZW1zZWx2ZXMgdG8gdGhlaXIgcGFyZW50cyBzaW5jZSB3ZSBhcmUgaXRlcmF0aW5nIGluIG9yZGVyXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgdmFyIHBhcmVudEluZGV4ID0gYWNjLmNhY2hlUmVmW3BhcmVudF07XG4gICAgICB2YXIgcGFyZW50UmVjb3JkID0gYWNjLmNvbnRlbnRCbG9ja3NbcGFyZW50SW5kZXhdO1xuXG4gICAgICAvLyBpZiBwYXJlbnQgaGFzIHRleHQgd2UgbmVlZCB0byBzcGxpdCBpdCBpbnRvIGEgc2VwYXJhdGUgdW5zdHlsZWQgZWxlbWVudFxuICAgICAgaWYgKHBhcmVudFJlY29yZC5nZXRDaGlsZEtleXMoKS5pc0VtcHR5KCkgJiYgcGFyZW50UmVjb3JkLmdldFRleHQoKSkge1xuICAgICAgICB2YXIgcGFyZW50Q2hhcmFjdGVyTGlzdCA9IHBhcmVudFJlY29yZC5nZXRDaGFyYWN0ZXJMaXN0KCk7XG4gICAgICAgIHZhciBwYXJlbnRUZXh0ID0gcGFyZW50UmVjb3JkLmdldFRleHQoKTtcbiAgICAgICAgcGFyZW50VGV4dE5vZGVLZXkgPSBnZW5lcmF0ZVJhbmRvbUtleSgpO1xuXG4gICAgICAgIHZhciB0ZXh0Tm9kZSA9IG5ldyBDb250ZW50QmxvY2tOb2RlKHtcbiAgICAgICAgICBrZXk6IHBhcmVudFRleHROb2RlS2V5LFxuICAgICAgICAgIHRleHQ6IHBhcmVudFRleHQsXG4gICAgICAgICAgY2hhcmFjdGVyTGlzdDogcGFyZW50Q2hhcmFjdGVyTGlzdCxcbiAgICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgICBuZXh0U2libGluZzoga2V5XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFjYy5jb250ZW50QmxvY2tzLnB1c2godGV4dE5vZGUpO1xuXG4gICAgICAgIHBhcmVudFJlY29yZCA9IHBhcmVudFJlY29yZC53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgICAgIGJsb2NrLnNldCgnY2hhcmFjdGVyTGlzdCcsIExpc3QoKSkuc2V0KCd0ZXh0JywgJycpLnNldCgnY2hpbGRyZW4nLCBwYXJlbnRSZWNvcmQuY2hpbGRyZW4ucHVzaCh0ZXh0Tm9kZS5nZXRLZXkoKSkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgYWNjLmNvbnRlbnRCbG9ja3NbcGFyZW50SW5kZXhdID0gcGFyZW50UmVjb3JkLnNldCgnY2hpbGRyZW4nLCBwYXJlbnRSZWNvcmQuY2hpbGRyZW4ucHVzaChrZXkpKTtcbiAgICB9XG5cbiAgICB2YXIgYmxvY2tOb2RlID0gbmV3IEJsb2NrTm9kZVJlY29yZCh7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGRlcHRoOiBkZXB0aCxcbiAgICAgIHRleHQ6IHRleHRCbG9jayxcbiAgICAgIGNoYXJhY3Rlckxpc3Q6IGNoYXJhY3Rlckxpc3QsXG4gICAgICBwcmV2U2libGluZzogcGFyZW50VGV4dE5vZGVLZXkgfHwgKGluZGV4ID09PSAwIHx8IHJhd0Jsb2Nrc1tpbmRleCAtIDFdLnBhcmVudCAhPT0gcGFyZW50ID8gbnVsbCA6IHJhd0Jsb2Nrc1tpbmRleCAtIDFdLmtleSksXG4gICAgICBuZXh0U2libGluZzogaW5kZXggPT09IHJhd0Jsb2Nrcy5sZW5ndGggLSAxIHx8IHJhd0Jsb2Nrc1tpbmRleCArIDFdLnBhcmVudCAhPT0gcGFyZW50ID8gbnVsbCA6IHJhd0Jsb2Nrc1tpbmRleCArIDFdLmtleVxuICAgIH0pO1xuXG4gICAgLy8gaW5zZXJ0IG5vZGVcbiAgICBhY2MuY29udGVudEJsb2Nrcy5wdXNoKGJsb2NrTm9kZSk7XG5cbiAgICAvLyBjYWNoZSByZWYgZm9yIGJ1aWxkaW5nIGxpbmtzXG4gICAgYWNjLmNhY2hlUmVmW2Jsb2NrTm9kZS5rZXldID0gaW5kZXg7XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBpbml0aWFsU3RhdGUpLmNvbnRlbnRCbG9ja3M7XG59O1xuXG52YXIgY29udmVydEZyb21IVE1MdG9Db250ZW50QmxvY2tzID0gZnVuY3Rpb24gY29udmVydEZyb21IVE1MdG9Db250ZW50QmxvY2tzKGh0bWwpIHtcbiAgdmFyIERPTUJ1aWxkZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGdldFNhZmVCb2R5RnJvbUhUTUw7XG4gIHZhciBibG9ja1JlbmRlck1hcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXA7XG5cbiAgLy8gQmUgQUJTT0xVVEVMWSBTVVJFIHRoYXQgdGhlIGRvbSBidWlsZGVyIHlvdSBwYXNzIGhlcmUgd29uJ3QgZXhlY3V0ZVxuICAvLyBhcmJpdHJhcnkgY29kZSBpbiB3aGF0ZXZlciBlbnZpcm9ubWVudCB5b3UncmUgcnVubmluZyB0aGlzIGluLiBGb3IgYW5cbiAgLy8gZXhhbXBsZSBvZiBob3cgd2UgdHJ5IHRvIGRvIHRoaXMgaW4tYnJvd3Nlciwgc2VlIGdldFNhZmVCb2R5RnJvbUhUTUwuXG5cbiAgLy8gVE9ETzogcmVwbGFjZSBEcmFmdEVudGl0eSB3aXRoIGFuIE9yZGVyZWRNYXAgaGVyZVxuICB2YXIgY2h1bmtEYXRhID0gZ2V0Q2h1bmtGb3JIVE1MKGh0bWwsIERPTUJ1aWxkZXIsIGJsb2NrUmVuZGVyTWFwLCBEcmFmdEVudGl0eSk7XG5cbiAgaWYgKGNodW5rRGF0YSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgY2h1bmsgPSBjaHVua0RhdGEuY2h1bmssXG4gICAgICBlbnRpdHlNYXAgPSBjaHVua0RhdGEuZW50aXR5TWFwO1xuXG4gIHZhciBjb250ZW50QmxvY2tzID0gY29udmVydENodW5rVG9Db250ZW50QmxvY2tzKGNodW5rKTtcblxuICByZXR1cm4ge1xuICAgIGNvbnRlbnRCbG9ja3M6IGNvbnRlbnRCbG9ja3MsXG4gICAgZW50aXR5TWFwOiBlbnRpdHlNYXBcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY29udmVydEZyb21IVE1MdG9Db250ZW50QmxvY2tzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgbW92ZVNlbGVjdGlvbkZvcndhcmRcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHaXZlbiBhIGNvbGxhcHNlZCBzZWxlY3Rpb24sIG1vdmUgdGhlIGZvY3VzIGBtYXhEaXN0YW5jZWAgZm9yd2FyZCB3aXRoaW5cbiAqIHRoZSBzZWxlY3RlZCBibG9jay4gSWYgdGhlIHNlbGVjdGlvbiB3aWxsIGdvIGJleW9uZCB0aGUgZW5kIG9mIHRoZSBibG9jayxcbiAqIG1vdmUgZm9jdXMgdG8gdGhlIHN0YXJ0IG9mIHRoZSBuZXh0IGJsb2NrLCBidXQgbm8gZnVydGhlci5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG5vdCBVbmljb2RlLWF3YXJlLCBzbyBzdXJyb2dhdGUgcGFpcnMgd2lsbCBiZSB0cmVhdGVkXG4gKiBhcyBoYXZpbmcgbGVuZ3RoIDIuXG4gKi9cbmZ1bmN0aW9uIG1vdmVTZWxlY3Rpb25Gb3J3YXJkKGVkaXRvclN0YXRlLCBtYXhEaXN0YW5jZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBrZXkgPSBzZWxlY3Rpb24uZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIG9mZnNldCA9IHNlbGVjdGlvbi5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG5cbiAgdmFyIGZvY3VzS2V5ID0ga2V5O1xuICB2YXIgZm9jdXNPZmZzZXQ7XG5cbiAgdmFyIGJsb2NrID0gY29udGVudC5nZXRCbG9ja0ZvcktleShrZXkpO1xuXG4gIGlmIChtYXhEaXN0YW5jZSA+IGJsb2NrLmdldFRleHQoKS5sZW5ndGggLSBvZmZzZXQpIHtcbiAgICBmb2N1c0tleSA9IGNvbnRlbnQuZ2V0S2V5QWZ0ZXIoa2V5KTtcbiAgICBmb2N1c09mZnNldCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgZm9jdXNPZmZzZXQgPSBvZmZzZXQgKyBtYXhEaXN0YW5jZTtcbiAgfVxuXG4gIHJldHVybiBzZWxlY3Rpb24ubWVyZ2UoeyBmb2N1c0tleTogZm9jdXNLZXksIGZvY3VzT2Zmc2V0OiBmb2N1c09mZnNldCB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb3ZlU2VsZWN0aW9uRm9yd2FyZDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0UmVtb3ZhYmxlV29yZFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVG9rZW5pemVVdGlsID0gcmVxdWlyZSgnZmJqcy9saWIvVG9rZW5pemVVdGlsJyk7XG5cbnZhciBwdW5jdHVhdGlvbiA9IFRva2VuaXplVXRpbC5nZXRQdW5jdHVhdGlvbigpO1xuXG4vLyBUaGUgYXBvc3Ryb3BoZSBhbmQgY3VybHkgc2luZ2xlIHF1b3RlcyBiZWhhdmUgaW4gYSBjdXJpb3VzIHdheTogd2hlblxuLy8gc3Vycm91bmRlZCBvbiBib3RoIHNpZGVzIGJ5IHdvcmQgY2hhcmFjdGVycywgdGhleSBiZWhhdmUgYXMgd29yZCBjaGFyczsgd2hlblxuLy8gZWl0aGVyIG5laWdoYm9yIGlzIHB1bmN0dWF0aW9uIG9yIGFuIGVuZCBvZiB0aGUgc3RyaW5nLCB0aGV5IGJlaGF2ZSBhc1xuLy8gcHVuY3R1YXRpb24uXG52YXIgQ0hBTUVMRU9OX0NIQVJTID0gJ1tcXCdcXHUyMDE4XFx1MjAxOV0nO1xuXG4vLyBSZW1vdmUgdGhlIHVuZGVyc2NvcmUsIHdoaWNoIHNob3VsZCBjb3VudCBhcyBwYXJ0IG9mIHRoZSByZW1vdmFibGUgd29yZC4gVGhlXG4vLyBcImNoYW1lbGVvbiBjaGFyc1wiIGFsc28gY291bnQgYXMgcHVuY3R1YXRpb24gaW4gdGhpcyByZWdleC5cbnZhciBXSElURVNQQUNFX0FORF9QVU5DVFVBVElPTiA9ICdcXFxcc3woPyFbX10pJyArIHB1bmN0dWF0aW9uO1xuXG52YXIgREVMRVRFX1NUUklORyA9ICdeJyArICcoPzonICsgV0hJVEVTUEFDRV9BTkRfUFVOQ1RVQVRJT04gKyAnKSonICsgJyg/OicgKyBDSEFNRUxFT05fQ0hBUlMgKyAnfCg/IScgKyBXSElURVNQQUNFX0FORF9QVU5DVFVBVElPTiArICcpLikqJyArICcoPzooPyEnICsgV0hJVEVTUEFDRV9BTkRfUFVOQ1RVQVRJT04gKyAnKS4pJztcbnZhciBERUxFVEVfUkVHRVggPSBuZXcgUmVnRXhwKERFTEVURV9TVFJJTkcpO1xuXG52YXIgQkFDS1NQQUNFX1NUUklORyA9ICcoPzooPyEnICsgV0hJVEVTUEFDRV9BTkRfUFVOQ1RVQVRJT04gKyAnKS4pJyArICcoPzonICsgQ0hBTUVMRU9OX0NIQVJTICsgJ3woPyEnICsgV0hJVEVTUEFDRV9BTkRfUFVOQ1RVQVRJT04gKyAnKS4pKicgKyAnKD86JyArIFdISVRFU1BBQ0VfQU5EX1BVTkNUVUFUSU9OICsgJykqJyArICckJztcbnZhciBCQUNLU1BBQ0VfUkVHRVggPSBuZXcgUmVnRXhwKEJBQ0tTUEFDRV9TVFJJTkcpO1xuXG5mdW5jdGlvbiBnZXRSZW1vdmFibGVXb3JkKHRleHQsIGlzQmFja3dhcmQpIHtcbiAgdmFyIG1hdGNoZXMgPSBpc0JhY2t3YXJkID8gQkFDS1NQQUNFX1JFR0VYLmV4ZWModGV4dCkgOiBERUxFVEVfUkVHRVguZXhlYyh0ZXh0KTtcbiAgcmV0dXJuIG1hdGNoZXMgPyBtYXRjaGVzWzBdIDogdGV4dDtcbn1cblxudmFyIERyYWZ0UmVtb3ZhYmxlV29yZCA9IHtcbiAgZ2V0QmFja3dhcmQ6IGZ1bmN0aW9uIGdldEJhY2t3YXJkKHRleHQpIHtcbiAgICByZXR1cm4gZ2V0UmVtb3ZhYmxlV29yZCh0ZXh0LCB0cnVlKTtcbiAgfSxcblxuICBnZXRGb3J3YXJkOiBmdW5jdGlvbiBnZXRGb3J3YXJkKHRleHQpIHtcbiAgICByZXR1cm4gZ2V0UmVtb3ZhYmxlV29yZCh0ZXh0LCBmYWxzZSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRSZW1vdmFibGVXb3JkOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25XaXRoTm9kZXNcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGZpbmRBbmNlc3Rvck9mZnNldEtleSA9IHJlcXVpcmUoJy4vZmluZEFuY2VzdG9yT2Zmc2V0S2V5Jyk7XG52YXIgZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZSA9IHJlcXVpcmUoJy4vZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZScpO1xudmFyIGdldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSA9IHJlcXVpcmUoJy4vZ2V0VXBkYXRlZFNlbGVjdGlvblN0YXRlJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgbnVsbHRocm93cyA9IHJlcXVpcmUoJ2ZianMvbGliL251bGx0aHJvd3MnKTtcblxuLyoqXG4gKiBDb252ZXJ0IHRoZSBjdXJyZW50IHNlbGVjdGlvbiByYW5nZSB0byBhbiBhbmNob3IvZm9jdXMgcGFpciBvZiBvZmZzZXQga2V5c1xuICogYW5kIHZhbHVlcyB0aGF0IGNhbiBiZSBpbnRlcnByZXRlZCBieSBjb21wb25lbnRzLlxuICovXG5mdW5jdGlvbiBnZXREcmFmdEVkaXRvclNlbGVjdGlvbldpdGhOb2RlcyhlZGl0b3JTdGF0ZSwgcm9vdCwgYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0LCBmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KSB7XG4gIHZhciBhbmNob3JJc1RleHROb2RlID0gYW5jaG9yTm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREU7XG4gIHZhciBmb2N1c0lzVGV4dE5vZGUgPSBmb2N1c05vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFO1xuXG4gIC8vIElmIHRoZSBzZWxlY3Rpb24gcmFuZ2UgbGllcyBvbmx5IG9uIHRleHQgbm9kZXMsIHRoZSB0YXNrIGlzIHNpbXBsZS5cbiAgLy8gRmluZCB0aGUgbmVhcmVzdCBvZmZzZXQtYXdhcmUgZWxlbWVudHMgYW5kIHVzZSB0aGVcbiAgLy8gb2Zmc2V0IHZhbHVlcyBzdXBwbGllZCBieSB0aGUgc2VsZWN0aW9uIHJhbmdlLlxuICBpZiAoYW5jaG9ySXNUZXh0Tm9kZSAmJiBmb2N1c0lzVGV4dE5vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0aW9uU3RhdGU6IGdldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZShlZGl0b3JTdGF0ZSwgbnVsbHRocm93cyhmaW5kQW5jZXN0b3JPZmZzZXRLZXkoYW5jaG9yTm9kZSkpLCBhbmNob3JPZmZzZXQsIG51bGx0aHJvd3MoZmluZEFuY2VzdG9yT2Zmc2V0S2V5KGZvY3VzTm9kZSkpLCBmb2N1c09mZnNldCksXG4gICAgICBuZWVkc1JlY292ZXJ5OiBmYWxzZVxuICAgIH07XG4gIH1cblxuICB2YXIgYW5jaG9yUG9pbnQgPSBudWxsO1xuICB2YXIgZm9jdXNQb2ludCA9IG51bGw7XG4gIHZhciBuZWVkc1JlY292ZXJ5ID0gdHJ1ZTtcblxuICAvLyBBbiBlbGVtZW50IGlzIHNlbGVjdGVkLiBDb252ZXJ0IHRoaXMgc2VsZWN0aW9uIHJhbmdlIGludG8gbGVhZiBvZmZzZXRcbiAgLy8ga2V5cyBhbmQgb2Zmc2V0IHZhbHVlcyBmb3IgY29uc3VtcHRpb24gYXQgdGhlIGNvbXBvbmVudCBsZXZlbC4gVGhpc1xuICAvLyBpcyBjb21tb24gaW4gRmlyZWZveCwgd2hlcmUgc2VsZWN0LWFsbCBhbmQgdHJpcGxlIGNsaWNrIGJlaGF2aW9yIGxlYWRzXG4gIC8vIHRvIGVudGlyZSBlbGVtZW50cyBiZWluZyBzZWxlY3RlZC5cbiAgLy9cbiAgLy8gTm90ZSB0aGF0IHdlIHVzZSB0aGUgYG5lZWRzUmVjb3ZlcnlgIHBhcmFtZXRlciBpbiB0aGUgY2FsbGJhY2sgaGVyZS4gVGhpc1xuICAvLyBpcyBiZWNhdXNlIHdoZW4gY2VydGFpbiBlbGVtZW50cyBhcmUgc2VsZWN0ZWQsIHRoZSBiZWhhdmlvciBmb3Igc3Vic2VxdWVudFxuICAvLyBjdXJzb3IgbW92ZW1lbnQgKGUuZy4gdmlhIGFycm93IGtleXMpIGlzIHVuY2VydGFpbiBhbmQgbWF5IG5vdCBtYXRjaFxuICAvLyBleHBlY3RhdGlvbnMgYXQgdGhlIGNvbXBvbmVudCBsZXZlbC4gRm9yIGV4YW1wbGUsIGlmIGFuIGVudGlyZSA8ZGl2PiBpc1xuICAvLyBzZWxlY3RlZCBhbmQgdGhlIHVzZXIgcHJlc3NlcyB0aGUgcmlnaHQgYXJyb3csIEZpcmVmb3gga2VlcHMgdGhlIHNlbGVjdGlvblxuICAvLyBvbiB0aGUgPGRpdj4uIElmIHdlIGFsbG93IHN1YnNlcXVlbnQga2V5cHJlc3NlcyB0byBpbnNlcnQgY2hhcmFjdGVyc1xuICAvLyBuYXRpdmVseSwgdGhleSB3aWxsIGJlIGluc2VydGVkIGludG8gYSBicm93c2VyLWNyZWF0ZWQgdGV4dCBub2RlIHRvIHRoZVxuICAvLyByaWdodCBvZiB0aGF0IDxkaXY+LiBUaGlzIGlzIG9idmlvdXNseSB1bmRlc2lyYWJsZS5cbiAgLy9cbiAgLy8gV2l0aCB0aGUgYG5lZWRzUmVjb3ZlcnlgIGZsYWcsIHdlIGluZm9ybSB0aGUgY2FsbGVyIHRoYXQgaXQgaXMgcmVzcG9uc2libGVcbiAgLy8gZm9yIG1hbnVhbGx5IHNldHRpbmcgdGhlIHNlbGVjdGlvbiBzdGF0ZSBvbiB0aGUgcmVuZGVyZWQgZG9jdW1lbnQgdG9cbiAgLy8gZW5zdXJlIHByb3BlciBzZWxlY3Rpb24gc3RhdGUgbWFpbnRlbmFuY2UuXG5cbiAgaWYgKGFuY2hvcklzVGV4dE5vZGUpIHtcbiAgICBhbmNob3JQb2ludCA9IHtcbiAgICAgIGtleTogbnVsbHRocm93cyhmaW5kQW5jZXN0b3JPZmZzZXRLZXkoYW5jaG9yTm9kZSkpLFxuICAgICAgb2Zmc2V0OiBhbmNob3JPZmZzZXRcbiAgICB9O1xuICAgIGZvY3VzUG9pbnQgPSBnZXRQb2ludEZvck5vblRleHROb2RlKHJvb3QsIGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpO1xuICB9IGVsc2UgaWYgKGZvY3VzSXNUZXh0Tm9kZSkge1xuICAgIGZvY3VzUG9pbnQgPSB7XG4gICAgICBrZXk6IG51bGx0aHJvd3MoZmluZEFuY2VzdG9yT2Zmc2V0S2V5KGZvY3VzTm9kZSkpLFxuICAgICAgb2Zmc2V0OiBmb2N1c09mZnNldFxuICAgIH07XG4gICAgYW5jaG9yUG9pbnQgPSBnZXRQb2ludEZvck5vblRleHROb2RlKHJvb3QsIGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCk7XG4gIH0gZWxzZSB7XG4gICAgYW5jaG9yUG9pbnQgPSBnZXRQb2ludEZvck5vblRleHROb2RlKHJvb3QsIGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCk7XG4gICAgZm9jdXNQb2ludCA9IGdldFBvaW50Rm9yTm9uVGV4dE5vZGUocm9vdCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCk7XG5cbiAgICAvLyBJZiB0aGUgc2VsZWN0aW9uIGlzIGNvbGxhcHNlZCBvbiBhbiBlbXB0eSBibG9jaywgZG9uJ3QgZm9yY2UgcmVjb3ZlcnkuXG4gICAgLy8gVGhpcyB3YXksIG9uIGFycm93IGtleSBzZWxlY3Rpb24gY2hhbmdlcywgdGhlIGJyb3dzZXIgY2FuIG1vdmUgdGhlXG4gICAgLy8gY3Vyc29yIGZyb20gYSBub24temVybyBvZmZzZXQgb24gb25lIGJsb2NrLCB0aHJvdWdoIGVtcHR5IGJsb2NrcyxcbiAgICAvLyB0byBhIG1hdGNoaW5nIG5vbi16ZXJvIG9mZnNldCBvbiBvdGhlciB0ZXh0IGJsb2Nrcy5cbiAgICBpZiAoYW5jaG9yTm9kZSA9PT0gZm9jdXNOb2RlICYmIGFuY2hvck9mZnNldCA9PT0gZm9jdXNPZmZzZXQpIHtcbiAgICAgIG5lZWRzUmVjb3ZlcnkgPSAhIWFuY2hvck5vZGUuZmlyc3RDaGlsZCAmJiBhbmNob3JOb2RlLmZpcnN0Q2hpbGQubm9kZU5hbWUgIT09ICdCUic7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZWxlY3Rpb25TdGF0ZTogZ2V0VXBkYXRlZFNlbGVjdGlvblN0YXRlKGVkaXRvclN0YXRlLCBhbmNob3JQb2ludC5rZXksIGFuY2hvclBvaW50Lm9mZnNldCwgZm9jdXNQb2ludC5rZXksIGZvY3VzUG9pbnQub2Zmc2V0KSxcbiAgICBuZWVkc1JlY292ZXJ5OiBuZWVkc1JlY292ZXJ5XG4gIH07XG59XG5cbi8qKlxuICogSWRlbnRpZnkgdGhlIGZpcnN0IGxlYWYgZGVzY2VuZGFudCBmb3IgdGhlIGdpdmVuIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldEZpcnN0TGVhZihub2RlKSB7XG4gIHdoaWxlIChub2RlLmZpcnN0Q2hpbGQgJiYgKFxuICAvLyBkYXRhLWJsb2NrcyBoYXMgbm8gb2Zmc2V0XG4gIG5vZGUuZmlyc3RDaGlsZCBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgbm9kZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgnZGF0YS1ibG9ja3MnKSA9PT0gJ3RydWUnIHx8IGdldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGUobm9kZS5maXJzdENoaWxkKSkpIHtcbiAgICBub2RlID0gbm9kZS5maXJzdENoaWxkO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIElkZW50aWZ5IHRoZSBsYXN0IGxlYWYgZGVzY2VuZGFudCBmb3IgdGhlIGdpdmVuIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldExhc3RMZWFmKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUubGFzdENoaWxkICYmIChcbiAgLy8gZGF0YS1ibG9ja3MgaGFzIG5vIG9mZnNldFxuICBub2RlLmxhc3RDaGlsZCBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgbm9kZS5sYXN0Q2hpbGQuZ2V0QXR0cmlidXRlKCdkYXRhLWJsb2NrcycpID09PSAndHJ1ZScgfHwgZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZShub2RlLmxhc3RDaGlsZCkpKSB7XG4gICAgbm9kZSA9IG5vZGUubGFzdENoaWxkO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBnZXRQb2ludEZvck5vblRleHROb2RlKGVkaXRvclJvb3QsIHN0YXJ0Tm9kZSwgY2hpbGRPZmZzZXQpIHtcbiAgdmFyIG5vZGUgPSBzdGFydE5vZGU7XG4gIHZhciBvZmZzZXRLZXkgPSBmaW5kQW5jZXN0b3JPZmZzZXRLZXkobm9kZSk7XG5cbiAgIShvZmZzZXRLZXkgIT0gbnVsbCB8fCBlZGl0b3JSb290ICYmIChlZGl0b3JSb290ID09PSBub2RlIHx8IGVkaXRvclJvb3QuZmlyc3RDaGlsZCA9PT0gbm9kZSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1Vua25vd24gbm9kZSBpbiBzZWxlY3Rpb24gcmFuZ2UuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIC8vIElmIHRoZSBlZGl0b3JSb290IGlzIHRoZSBzZWxlY3Rpb24sIHN0ZXAgZG93bndhcmQgaW50byB0aGUgY29udGVudFxuICAvLyB3cmFwcGVyLlxuICBpZiAoZWRpdG9yUm9vdCA9PT0gbm9kZSkge1xuICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgIShub2RlIGluc3RhbmNlb2YgRWxlbWVudCAmJiBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1jb250ZW50cycpID09PSAndHJ1ZScpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0ludmFsaWQgRHJhZnRFZGl0b3JDb250ZW50cyBzdHJ1Y3R1cmUuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmIChjaGlsZE9mZnNldCA+IDApIHtcbiAgICAgIGNoaWxkT2Zmc2V0ID0gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGUgY2hpbGQgb2Zmc2V0IGlzIHplcm8gYW5kIHdlIGhhdmUgYW4gb2Zmc2V0IGtleSwgd2UncmUgZG9uZS5cbiAgLy8gSWYgdGhlcmUncyBubyBvZmZzZXQga2V5IGJlY2F1c2UgdGhlIGVudGlyZSBlZGl0b3IgaXMgc2VsZWN0ZWQsXG4gIC8vIGZpbmQgdGhlIGxlZnRtb3N0IChcImZpcnN0XCIpIGxlYWYgaW4gdGhlIHRyZWUgYW5kIHVzZSB0aGF0IGFzIHRoZSBvZmZzZXRcbiAgLy8ga2V5LlxuICBpZiAoY2hpbGRPZmZzZXQgPT09IDApIHtcbiAgICB2YXIga2V5ID0gbnVsbDtcbiAgICBpZiAob2Zmc2V0S2V5ICE9IG51bGwpIHtcbiAgICAgIGtleSA9IG9mZnNldEtleTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGZpcnN0TGVhZiA9IGdldEZpcnN0TGVhZihub2RlKTtcbiAgICAgIGtleSA9IG51bGx0aHJvd3MoZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZShmaXJzdExlYWYpKTtcbiAgICB9XG4gICAgcmV0dXJuIHsga2V5OiBrZXksIG9mZnNldDogMCB9O1xuICB9XG5cbiAgdmFyIG5vZGVCZWZvcmVDdXJzb3IgPSBub2RlLmNoaWxkTm9kZXNbY2hpbGRPZmZzZXQgLSAxXTtcbiAgdmFyIGxlYWZLZXkgPSBudWxsO1xuICB2YXIgdGV4dExlbmd0aCA9IG51bGw7XG5cbiAgaWYgKCFnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlKG5vZGVCZWZvcmVDdXJzb3IpKSB7XG4gICAgLy8gT3VyIHRhcmdldCBub2RlIG1heSBiZSBhIGxlYWYgb3IgYSB0ZXh0IG5vZGUsIGluIHdoaWNoIGNhc2Ugd2UncmVcbiAgICAvLyBhbHJlYWR5IHdoZXJlIHdlIHdhbnQgdG8gYmUgYW5kIGNhbiBqdXN0IHVzZSB0aGUgY2hpbGQncyBsZW5ndGggYXNcbiAgICAvLyBvdXIgb2Zmc2V0LlxuICAgIGxlYWZLZXkgPSBudWxsdGhyb3dzKG9mZnNldEtleSk7XG4gICAgdGV4dExlbmd0aCA9IGdldFRleHRDb250ZW50TGVuZ3RoKG5vZGVCZWZvcmVDdXJzb3IpO1xuICB9IGVsc2Uge1xuICAgIC8vIE90aGVyd2lzZSwgd2UnbGwgbG9vayBhdCB0aGUgY2hpbGQgdG8gdGhlIGxlZnQgb2YgdGhlIGN1cnNvciBhbmQgZmluZFxuICAgIC8vIHRoZSBsYXN0IGxlYWYgbm9kZSBpbiBpdHMgc3VidHJlZS5cbiAgICB2YXIgbGFzdExlYWYgPSBnZXRMYXN0TGVhZihub2RlQmVmb3JlQ3Vyc29yKTtcbiAgICBsZWFmS2V5ID0gbnVsbHRocm93cyhnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlKGxhc3RMZWFmKSk7XG4gICAgdGV4dExlbmd0aCA9IGdldFRleHRDb250ZW50TGVuZ3RoKGxhc3RMZWFmKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAga2V5OiBsZWFmS2V5LFxuICAgIG9mZnNldDogdGV4dExlbmd0aFxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgbGVuZ3RoIG9mIGEgbm9kZSdzIHRleHRDb250ZW50LCByZWdhcmRpbmcgc2luZ2xlIG5ld2xpbmVcbiAqIGNoYXJhY3RlcnMgYXMgemVyby1sZW5ndGguIFRoaXMgYWxsb3dzIHVzIHRvIGF2b2lkIHByb2JsZW1zIHdpdGggaWRlbnRpZnlpbmdcbiAqIHRoZSBjb3JyZWN0IHNlbGVjdGlvbiBvZmZzZXQgZm9yIGVtcHR5IGJsb2NrcyBpbiBJRSwgaW4gd2hpY2ggd2VcbiAqIHJlbmRlciBuZXdsaW5lcyBpbnN0ZWFkIG9mIGJyZWFrIHRhZ3MuXG4gKi9cbmZ1bmN0aW9uIGdldFRleHRDb250ZW50TGVuZ3RoKG5vZGUpIHtcbiAgdmFyIHRleHRDb250ZW50ID0gbm9kZS50ZXh0Q29udGVudDtcbiAgcmV0dXJuIHRleHRDb250ZW50ID09PSAnXFxuJyA/IDAgOiB0ZXh0Q29udGVudC5sZW5ndGg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25XaXRoTm9kZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRSYW5nZUNsaWVudFJlY3RzXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVc2VyQWdlbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9Vc2VyQWdlbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgaXNDaHJvbWUgPSBVc2VyQWdlbnQuaXNCcm93c2VyKCdDaHJvbWUnKTtcblxuLy8gSW4gQ2hyb21lLCB0aGUgY2xpZW50IHJlY3RzIHdpbGwgaW5jbHVkZSB0aGUgZW50aXJlIGJvdW5kcyBvZiBhbGwgbm9kZXMgdGhhdFxuLy8gYmVnaW4gKGhhdmUgYSBzdGFydCB0YWcpIHdpdGhpbiB0aGUgc2VsZWN0aW9uLCBldmVuIGlmIHRoZSBzZWxlY3Rpb24gZG9lc1xuLy8gbm90IG92ZXJsYXAgdGhlIGVudGlyZSBub2RlLiBUbyByZXNvbHZlIHRoaXMsIHdlIHNwbGl0IHRoZSByYW5nZSBhdCBlYWNoXG4vLyBzdGFydCB0YWcgYW5kIGpvaW4gdGhlIGNsaWVudCByZWN0cyB0b2dldGhlci5cbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zMjQ0Mzdcbi8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG5mdW5jdGlvbiBnZXRSYW5nZUNsaWVudFJlY3RzQ2hyb21lKHJhbmdlKSB7XG4gIHZhciB0ZW1wUmFuZ2UgPSByYW5nZS5jbG9uZVJhbmdlKCk7XG4gIHZhciBjbGllbnRSZWN0cyA9IFtdO1xuXG4gIGZvciAodmFyIGFuY2VzdG9yID0gcmFuZ2UuZW5kQ29udGFpbmVyOyBhbmNlc3RvciAhPSBudWxsOyBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudE5vZGUpIHtcbiAgICAvLyBJZiB3ZSd2ZSBjbGltYmVkIHVwIHRvIHRoZSBjb21tb24gYW5jZXN0b3IsIHdlIGNhbiBub3cgdXNlIHRoZVxuICAgIC8vIG9yaWdpbmFsIHN0YXJ0IHBvaW50IGFuZCBzdG9wIGNsaW1iaW5nIHRoZSB0cmVlLlxuICAgIHZhciBhdENvbW1vbkFuY2VzdG9yID0gYW5jZXN0b3IgPT09IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIGlmIChhdENvbW1vbkFuY2VzdG9yKSB7XG4gICAgICB0ZW1wUmFuZ2Uuc2V0U3RhcnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGVtcFJhbmdlLnNldFN0YXJ0KHRlbXBSYW5nZS5lbmRDb250YWluZXIsIDApO1xuICAgIH1cbiAgICB2YXIgcmVjdHMgPSBBcnJheS5mcm9tKHRlbXBSYW5nZS5nZXRDbGllbnRSZWN0cygpKTtcbiAgICBjbGllbnRSZWN0cy5wdXNoKHJlY3RzKTtcbiAgICBpZiAoYXRDb21tb25BbmNlc3Rvcikge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIGNsaWVudFJlY3RzLnJldmVyc2UoKTtcbiAgICAgIHJldHVybiAoX3JlZiA9IFtdKS5jb25jYXQuYXBwbHkoX3JlZiwgY2xpZW50UmVjdHMpO1xuICAgIH1cbiAgICB0ZW1wUmFuZ2Uuc2V0RW5kQmVmb3JlKGFuY2VzdG9yKTtcbiAgfVxuXG4gICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdGb3VuZCBhbiB1bmV4cGVjdGVkIGRldGFjaGVkIHN1YnRyZWUgd2hlbiBnZXR0aW5nIHJhbmdlIGNsaWVudCByZWN0cy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG59XG4vKiBlc2xpbnQtZW5hYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG5cbi8qKlxuICogTGlrZSByYW5nZS5nZXRDbGllbnRSZWN0cygpIGJ1dCBub3JtYWxpemVzIGZvciBicm93c2VyIGJ1Z3MuXG4gKi9cbnZhciBnZXRSYW5nZUNsaWVudFJlY3RzID0gaXNDaHJvbWUgPyBnZXRSYW5nZUNsaWVudFJlY3RzQ2hyb21lIDogZnVuY3Rpb24gKHJhbmdlKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKHJhbmdlLmdldENsaWVudFJlY3RzKCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYW5nZUNsaWVudFJlY3RzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBnZXRDb250ZW50U3RhdGVGcmFnbWVudCA9IHJlcXVpcmUoJy4vZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQnKTtcblxuZnVuY3Rpb24gZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uKGVkaXRvclN0YXRlKSB7XG4gIHZhciBzZWxlY3Rpb25TdGF0ZSA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuXG4gIGlmIChzZWxlY3Rpb25TdGF0ZS5pc0NvbGxhcHNlZCgpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgc2VsZWN0aW9uU3RhdGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEZyYWdtZW50RnJvbVNlbGVjdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRPZmZzZXRLZXkgPSByZXF1aXJlKCcuL0RyYWZ0T2Zmc2V0S2V5Jyk7XG5cbnZhciBudWxsdGhyb3dzID0gcmVxdWlyZSgnZmJqcy9saWIvbnVsbHRocm93cycpO1xuXG5mdW5jdGlvbiBnZXRVcGRhdGVkU2VsZWN0aW9uU3RhdGUoZWRpdG9yU3RhdGUsIGFuY2hvcktleSwgYW5jaG9yT2Zmc2V0LCBmb2N1c0tleSwgZm9jdXNPZmZzZXQpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IG51bGx0aHJvd3MoZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghYW5jaG9yS2V5IHx8ICFmb2N1c0tleSkge1xuICAgICAgLyplc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgc2VsZWN0aW9uIHN0YXRlLicsIGFyZ3VtZW50cywgZWRpdG9yU3RhdGUudG9KUygpKTtcbiAgICAgIC8qZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gICAgICByZXR1cm4gc2VsZWN0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHZhciBhbmNob3JQYXRoID0gRHJhZnRPZmZzZXRLZXkuZGVjb2RlKGFuY2hvcktleSk7XG4gIHZhciBhbmNob3JCbG9ja0tleSA9IGFuY2hvclBhdGguYmxvY2tLZXk7XG4gIHZhciBhbmNob3JMZWFmID0gZWRpdG9yU3RhdGUuZ2V0QmxvY2tUcmVlKGFuY2hvckJsb2NrS2V5KS5nZXRJbihbYW5jaG9yUGF0aC5kZWNvcmF0b3JLZXksICdsZWF2ZXMnLCBhbmNob3JQYXRoLmxlYWZLZXldKTtcblxuICB2YXIgZm9jdXNQYXRoID0gRHJhZnRPZmZzZXRLZXkuZGVjb2RlKGZvY3VzS2V5KTtcbiAgdmFyIGZvY3VzQmxvY2tLZXkgPSBmb2N1c1BhdGguYmxvY2tLZXk7XG4gIHZhciBmb2N1c0xlYWYgPSBlZGl0b3JTdGF0ZS5nZXRCbG9ja1RyZWUoZm9jdXNCbG9ja0tleSkuZ2V0SW4oW2ZvY3VzUGF0aC5kZWNvcmF0b3JLZXksICdsZWF2ZXMnLCBmb2N1c1BhdGgubGVhZktleV0pO1xuXG4gIHZhciBhbmNob3JMZWFmU3RhcnQgPSBhbmNob3JMZWFmLmdldCgnc3RhcnQnKTtcbiAgdmFyIGZvY3VzTGVhZlN0YXJ0ID0gZm9jdXNMZWFmLmdldCgnc3RhcnQnKTtcblxuICB2YXIgYW5jaG9yQmxvY2tPZmZzZXQgPSBhbmNob3JMZWFmID8gYW5jaG9yTGVhZlN0YXJ0ICsgYW5jaG9yT2Zmc2V0IDogbnVsbDtcbiAgdmFyIGZvY3VzQmxvY2tPZmZzZXQgPSBmb2N1c0xlYWYgPyBmb2N1c0xlYWZTdGFydCArIGZvY3VzT2Zmc2V0IDogbnVsbDtcblxuICB2YXIgYXJlRXF1YWwgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yS2V5KCkgPT09IGFuY2hvckJsb2NrS2V5ICYmIHNlbGVjdGlvbi5nZXRBbmNob3JPZmZzZXQoKSA9PT0gYW5jaG9yQmxvY2tPZmZzZXQgJiYgc2VsZWN0aW9uLmdldEZvY3VzS2V5KCkgPT09IGZvY3VzQmxvY2tLZXkgJiYgc2VsZWN0aW9uLmdldEZvY3VzT2Zmc2V0KCkgPT09IGZvY3VzQmxvY2tPZmZzZXQ7XG5cbiAgaWYgKGFyZUVxdWFsKSB7XG4gICAgcmV0dXJuIHNlbGVjdGlvbjtcbiAgfVxuXG4gIHZhciBpc0JhY2t3YXJkID0gZmFsc2U7XG4gIGlmIChhbmNob3JCbG9ja0tleSA9PT0gZm9jdXNCbG9ja0tleSkge1xuICAgIHZhciBhbmNob3JMZWFmRW5kID0gYW5jaG9yTGVhZi5nZXQoJ2VuZCcpO1xuICAgIHZhciBmb2N1c0xlYWZFbmQgPSBmb2N1c0xlYWYuZ2V0KCdlbmQnKTtcbiAgICBpZiAoZm9jdXNMZWFmU3RhcnQgPT09IGFuY2hvckxlYWZTdGFydCAmJiBmb2N1c0xlYWZFbmQgPT09IGFuY2hvckxlYWZFbmQpIHtcbiAgICAgIGlzQmFja3dhcmQgPSBmb2N1c09mZnNldCA8IGFuY2hvck9mZnNldDtcbiAgICB9IGVsc2Uge1xuICAgICAgaXNCYWNrd2FyZCA9IGZvY3VzTGVhZlN0YXJ0IDwgYW5jaG9yTGVhZlN0YXJ0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgc3RhcnRLZXkgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLmdldEJsb2NrTWFwKCkua2V5U2VxKCkuc2tpcFVudGlsKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gdiA9PT0gYW5jaG9yQmxvY2tLZXkgfHwgdiA9PT0gZm9jdXNCbG9ja0tleTtcbiAgICB9KS5maXJzdCgpO1xuICAgIGlzQmFja3dhcmQgPSBzdGFydEtleSA9PT0gZm9jdXNCbG9ja0tleTtcbiAgfVxuXG4gIHJldHVybiBzZWxlY3Rpb24ubWVyZ2Uoe1xuICAgIGFuY2hvcktleTogYW5jaG9yQmxvY2tLZXksXG4gICAgYW5jaG9yT2Zmc2V0OiBhbmNob3JCbG9ja09mZnNldCxcbiAgICBmb2N1c0tleTogZm9jdXNCbG9ja0tleSxcbiAgICBmb2N1c09mZnNldDogZm9jdXNCbG9ja09mZnNldCxcbiAgICBpc0JhY2t3YXJkOiBpc0JhY2t3YXJkXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldFRleHRDb250ZW50RnJvbUZpbGVzXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIFRFWFRfQ0xJUFBJTkdfUkVHRVggPSAvXFwudGV4dENsaXBwaW5nJC87XG5cbnZhciBURVhUX1RZUEVTID0ge1xuICAndGV4dC9wbGFpbic6IHRydWUsXG4gICd0ZXh0L2h0bWwnOiB0cnVlLFxuICAndGV4dC9ydGYnOiB0cnVlXG59O1xuXG4vLyBTb21ld2hhdCBhcmJpdHJhcnkgdXBwZXIgYm91bmQgb24gdGV4dCBzaXplLiBMZXQncyBub3QgbG9jayB1cCB0aGUgYnJvd3Nlci5cbnZhciBURVhUX1NJWkVfVVBQRVJfQk9VTkQgPSA1MDAwO1xuXG4vKipcbiAqIEV4dHJhY3QgdGhlIHRleHQgY29udGVudCBmcm9tIGEgZmlsZSBsaXN0LlxuICovXG5mdW5jdGlvbiBnZXRUZXh0Q29udGVudEZyb21GaWxlcyhmaWxlcywgY2FsbGJhY2spIHtcbiAgdmFyIHJlYWRDb3VudCA9IDA7XG4gIHZhciByZXN1bHRzID0gW107XG4gIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKCAvKmJsb2IqL2ZpbGUpIHtcbiAgICByZWFkRmlsZShmaWxlLCBmdW5jdGlvbiAoIC8qc3RyaW5nKi90ZXh0KSB7XG4gICAgICByZWFkQ291bnQrKztcbiAgICAgIHRleHQgJiYgcmVzdWx0cy5wdXNoKHRleHQuc2xpY2UoMCwgVEVYVF9TSVpFX1VQUEVSX0JPVU5EKSk7XG4gICAgICBpZiAocmVhZENvdW50ID09IGZpbGVzLmxlbmd0aCkge1xuICAgICAgICBjYWxsYmFjayhyZXN1bHRzLmpvaW4oJ1xccicpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogdG9kbyBpc2FhYzogRG8gd29yayB0byB0dXJuIGh0bWwvcnRmIGludG8gYSBjb250ZW50IGZyYWdtZW50LlxuICovXG5mdW5jdGlvbiByZWFkRmlsZShmaWxlLCBjYWxsYmFjaykge1xuICBpZiAoIWdsb2JhbC5GaWxlUmVhZGVyIHx8IGZpbGUudHlwZSAmJiAhKGZpbGUudHlwZSBpbiBURVhUX1RZUEVTKSkge1xuICAgIGNhbGxiYWNrKCcnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZmlsZS50eXBlID09PSAnJykge1xuICAgIHZhciBjb250ZW50cyA9ICcnO1xuICAgIC8vIFNwZWNpYWwtY2FzZSB0ZXh0IGNsaXBwaW5ncywgd2hpY2ggaGF2ZSBhbiBlbXB0eSB0eXBlIGJ1dCBpbmNsdWRlXG4gICAgLy8gYC50ZXh0Q2xpcHBpbmdgIGluIHRoZSBmaWxlIG5hbWUuIGByZWFkQXNUZXh0YCByZXN1bHRzIGluIGFuIGVtcHR5XG4gICAgLy8gc3RyaW5nIGZvciB0ZXh0IGNsaXBwaW5ncywgc28gd2UgZm9yY2UgdGhlIGZpbGUgbmFtZSB0byBzZXJ2ZVxuICAgIC8vIGFzIHRoZSB0ZXh0IHZhbHVlIGZvciB0aGUgZmlsZS5cbiAgICBpZiAoVEVYVF9DTElQUElOR19SRUdFWC50ZXN0KGZpbGUubmFtZSkpIHtcbiAgICAgIGNvbnRlbnRzID0gZmlsZS5uYW1lLnJlcGxhY2UoVEVYVF9DTElQUElOR19SRUdFWCwgJycpO1xuICAgIH1cbiAgICBjYWxsYmFjayhjb250ZW50cyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlYWRlci5yZXN1bHQ7XG4gICAgISh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnV2Ugc2hvdWxkIGJlIGNhbGxpbmcgXCJGaWxlUmVhZGVyLnJlYWRBc1RleHRcIiB3aGljaCByZXR1cm5zIGEgc3RyaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gIH07XG4gIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgIGNhbGxiYWNrKCcnKTtcbiAgfTtcbiAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGV4dENvbnRlbnRGcm9tRmlsZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2V0IG9mZnNldCBrZXkgZnJvbSBhIG5vZGUgb3IgaXQncyBjaGlsZCBub2Rlcy4gUmV0dXJuIHRoZSBmaXJzdCBvZmZzZXQga2V5XG4gKiBmb3VuZCBvbiB0aGUgRE9NIHRyZWUgb2YgZ2l2ZW4gbm9kZS5cbiAqL1xuXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlKG5vZGUpIHtcbiAgaWYgKG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgdmFyIG9mZnNldEtleSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLW9mZnNldC1rZXknKTtcbiAgICBpZiAob2Zmc2V0S2V5KSB7XG4gICAgICByZXR1cm4gb2Zmc2V0S2V5O1xuICAgIH1cbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIGNoaWxkT2Zmc2V0S2V5ID0gZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZShub2RlLmNoaWxkTm9kZXNbaWldKTtcbiAgICAgIGlmIChjaGlsZE9mZnNldEtleSkge1xuICAgICAgICByZXR1cm4gY2hpbGRPZmZzZXRLZXk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIFBob3Rvc01pbWVUeXBlID0gcmVxdWlyZSgnLi9QaG90b3NNaW1lVHlwZScpO1xuXG52YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKCcuL2NyZWF0ZUFycmF5RnJvbU1peGVkJyk7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG52YXIgQ1JfTEZfUkVHRVggPSBuZXcgUmVnRXhwKCdcXHJcXG4nLCAnZycpO1xudmFyIExGX09OTFkgPSAnXFxuJztcblxudmFyIFJJQ0hfVEVYVF9UWVBFUyA9IHtcbiAgJ3RleHQvcnRmJzogMSxcbiAgJ3RleHQvaHRtbCc6IDFcbn07XG5cbi8qKlxuICogSWYgRGF0YVRyYW5zZmVySXRlbSBpcyBhIGZpbGUgdGhlbiByZXR1cm4gdGhlIEJsb2Igb2YgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gaXRlbVxuICogQHJldHVybiB7P2Jsb2J9XG4gKi9cbmZ1bmN0aW9uIGdldEZpbGVGcm9tRGF0YVRyYW5zZmVyKGl0ZW0pIHtcbiAgaWYgKGl0ZW0ua2luZCA9PSAnZmlsZScpIHtcbiAgICByZXR1cm4gaXRlbS5nZXRBc0ZpbGUoKTtcbiAgfVxufVxuXG52YXIgRGF0YVRyYW5zZmVyID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFcbiAgICovXG4gIGZ1bmN0aW9uIERhdGFUcmFuc2ZlcihkYXRhKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGFUcmFuc2Zlcik7XG5cbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgLy8gVHlwZXMgY291bGQgYmUgRE9NU3RyaW5nTGlzdCBvciBhcnJheVxuICAgIHRoaXMudHlwZXMgPSBkYXRhLnR5cGVzID8gY3JlYXRlQXJyYXlGcm9tTWl4ZWQoZGF0YS50eXBlcykgOiBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJcyB0aGlzIGxpa2VseSB0byBiZSBhIHJpY2ggdGV4dCBkYXRhIHRyYW5zZmVyP1xuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIERhdGFUcmFuc2Zlci5wcm90b3R5cGUuaXNSaWNoVGV4dCA9IGZ1bmN0aW9uIGlzUmljaFRleHQoKSB7XG4gICAgLy8gSWYgSFRNTCBpcyBhdmFpbGFibGUsIHRyZWF0IHRoaXMgZGF0YSBhcyByaWNoIHRleHQuIFRoaXMgd2F5LCB3ZSBhdm9pZFxuICAgIC8vIHVzaW5nIGEgcGFzdGVkIGltYWdlIGlmIGl0IGlzIHBhY2thZ2VkIHdpdGggSFRNTCAtLSB0aGlzIG1heSBvY2N1ciB3aXRoXG4gICAgLy8gcGFzdGVzIGZyb20gTVMgV29yZCwgZm9yIGV4YW1wbGUuICBIb3dldmVyIHRoaXMgaXMgb25seSByaWNoIHRleHQgaWZcbiAgICAvLyB0aGVyZSdzIGFjY29tcGFueWluZyB0ZXh0LlxuICAgIGlmICh0aGlzLmdldEhUTUwoKSAmJiB0aGlzLmdldFRleHQoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gV2hlbiBhbiBpbWFnZSBpcyBjb3BpZWQgZnJvbSBhIHByZXZpZXcgd2luZG93LCB5b3UgZW5kIHVwIHdpdGggdHdvXG4gICAgLy8gRGF0YVRyYW5zZmVySXRlbXMgb25lIG9mIHdoaWNoIGlzIGEgZmlsZSdzIG1ldGFkYXRhIGFzIHRleHQuICBTa2lwIHRob3NlLlxuICAgIGlmICh0aGlzLmlzSW1hZ2UoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnR5cGVzLnNvbWUoZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHJldHVybiBSSUNIX1RFWFRfVFlQRVNbdHlwZV07XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCByYXcgdGV4dC5cbiAgICpcbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICovXG5cblxuICBEYXRhVHJhbnNmZXIucHJvdG90eXBlLmdldFRleHQgPSBmdW5jdGlvbiBnZXRUZXh0KCkge1xuICAgIHZhciB0ZXh0O1xuICAgIGlmICh0aGlzLmRhdGEuZ2V0RGF0YSkge1xuICAgICAgaWYgKCF0aGlzLnR5cGVzLmxlbmd0aCkge1xuICAgICAgICB0ZXh0ID0gdGhpcy5kYXRhLmdldERhdGEoJ1RleHQnKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy50eXBlcy5pbmRleE9mKCd0ZXh0L3BsYWluJykgIT0gLTEpIHtcbiAgICAgICAgdGV4dCA9IHRoaXMuZGF0YS5nZXREYXRhKCd0ZXh0L3BsYWluJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXh0ID8gdGV4dC5yZXBsYWNlKENSX0xGX1JFR0VYLCBMRl9PTkxZKSA6IG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBIVE1MIHBhc3RlIGRhdGFcbiAgICpcbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICovXG5cblxuICBEYXRhVHJhbnNmZXIucHJvdG90eXBlLmdldEhUTUwgPSBmdW5jdGlvbiBnZXRIVE1MKCkge1xuICAgIGlmICh0aGlzLmRhdGEuZ2V0RGF0YSkge1xuICAgICAgaWYgKCF0aGlzLnR5cGVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmdldERhdGEoJ1RleHQnKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy50eXBlcy5pbmRleE9mKCd0ZXh0L2h0bWwnKSAhPSAtMSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmdldERhdGEoJ3RleHQvaHRtbCcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogSXMgdGhpcyBhIGxpbmsgZGF0YSB0cmFuc2Zlcj9cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBEYXRhVHJhbnNmZXIucHJvdG90eXBlLmlzTGluayA9IGZ1bmN0aW9uIGlzTGluaygpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlcy5zb21lKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICByZXR1cm4gdHlwZS5pbmRleE9mKCdVcmwnKSAhPSAtMSB8fCB0eXBlLmluZGV4T2YoJ3RleHQvdXJpLWxpc3QnKSAhPSAtMSB8fCB0eXBlLmluZGV4T2YoJ3RleHQveC1tb3otdXJsJyk7XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBhIGxpbmsgdXJsLlxuICAgKlxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuICAgKi9cblxuXG4gIERhdGFUcmFuc2Zlci5wcm90b3R5cGUuZ2V0TGluayA9IGZ1bmN0aW9uIGdldExpbmsoKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5nZXREYXRhKSB7XG4gICAgICBpZiAodGhpcy50eXBlcy5pbmRleE9mKCd0ZXh0L3gtbW96LXVybCcpICE9IC0xKSB7XG4gICAgICAgIHZhciB1cmwgPSB0aGlzLmRhdGEuZ2V0RGF0YSgndGV4dC94LW1vei11cmwnKS5zcGxpdCgnXFxuJyk7XG4gICAgICAgIHJldHVybiB1cmxbMF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50eXBlcy5pbmRleE9mKCd0ZXh0L3VyaS1saXN0JykgIT0gLTEgPyB0aGlzLmRhdGEuZ2V0RGF0YSgndGV4dC91cmktbGlzdCcpIDogdGhpcy5kYXRhLmdldERhdGEoJ3VybCcpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJcyB0aGlzIGFuIGltYWdlIGRhdGEgdHJhbnNmZXI/XG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgRGF0YVRyYW5zZmVyLnByb3RvdHlwZS5pc0ltYWdlID0gZnVuY3Rpb24gaXNJbWFnZSgpIHtcbiAgICB2YXIgaXNJbWFnZSA9IHRoaXMudHlwZXMuc29tZShmdW5jdGlvbiAodHlwZSkge1xuICAgICAgLy8gRmlyZWZveCB3aWxsIGhhdmUgYSB0eXBlIG9mIGFwcGxpY2F0aW9uL3gtbW96LWZpbGUgZm9yIGltYWdlcyBkdXJpbmdcbiAgICAgIC8vIGRyYWdnaW5nXG4gICAgICByZXR1cm4gdHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi94LW1vei1maWxlJykgIT0gLTE7XG4gICAgfSk7XG5cbiAgICBpZiAoaXNJbWFnZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGl0ZW1zID0gdGhpcy5nZXRGaWxlcygpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0eXBlID0gaXRlbXNbaV0udHlwZTtcbiAgICAgIGlmICghUGhvdG9zTWltZVR5cGUuaXNJbWFnZSh0eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgRGF0YVRyYW5zZmVyLnByb3RvdHlwZS5nZXRDb3VudCA9IGZ1bmN0aW9uIGdldENvdW50KCkge1xuICAgIGlmICh0aGlzLmRhdGEuaGFzT3duUHJvcGVydHkoJ2l0ZW1zJykpIHtcbiAgICAgIHJldHVybiB0aGlzLmRhdGEuaXRlbXMubGVuZ3RoO1xuICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLmhhc093blByb3BlcnR5KCdtb3pJdGVtQ291bnQnKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZGF0YS5tb3pJdGVtQ291bnQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLmRhdGEuZmlsZXMpIHtcbiAgICAgIHJldHVybiB0aGlzLmRhdGEuZmlsZXMubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IGZpbGVzLlxuICAgKlxuICAgKiBAcmV0dXJuIHthcnJheX1cbiAgICovXG5cblxuICBEYXRhVHJhbnNmZXIucHJvdG90eXBlLmdldEZpbGVzID0gZnVuY3Rpb24gZ2V0RmlsZXMoKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5pdGVtcykge1xuICAgICAgLy8gY3JlYXRlQXJyYXlGcm9tTWl4ZWQgZG9lc24ndCBwcm9wZXJseSBoYW5kbGUgRGF0YVRyYW5zZmVySXRlbUxpc3RzLlxuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuZGF0YS5pdGVtcykubWFwKGdldEZpbGVGcm9tRGF0YVRyYW5zZmVyKS5maWx0ZXIoZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5maWxlcykge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuZGF0YS5maWxlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEFyZSB0aGVyZSBhbnkgZmlsZXMgdG8gZmV0Y2g/XG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuXG5cbiAgRGF0YVRyYW5zZmVyLnByb3RvdHlwZS5oYXNGaWxlcyA9IGZ1bmN0aW9uIGhhc0ZpbGVzKCkge1xuICAgIHJldHVybiB0aGlzLmdldEZpbGVzKCkubGVuZ3RoID4gMDtcbiAgfTtcblxuICByZXR1cm4gRGF0YVRyYW5zZmVyO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFUcmFuc2ZlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7RE9NRG9jdW1lbnR9IGRvY1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gX2lzVmlld3BvcnRTY3JvbGxFbGVtZW50KGVsZW1lbnQsIGRvYykge1xuICByZXR1cm4gISFkb2MgJiYgKGVsZW1lbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgfHwgZWxlbWVudCA9PT0gZG9jLmJvZHkpO1xufVxuXG4vKipcbiAqIFNjcm9sbCBNb2R1bGUuIFRoaXMgY2xhc3MgY29udGFpbnMgNCBzaW1wbGUgc3RhdGljIGZ1bmN0aW9uc1xuICogdG8gYmUgdXNlZCB0byBhY2Nlc3MgRWxlbWVudC5zY3JvbGxUb3Avc2Nyb2xsTGVmdCBwcm9wZXJ0aWVzLlxuICogVG8gc29sdmUgdGhlIGluY29uc2lzdGVuY2llcyBiZXR3ZWVuIGJyb3dzZXJzIHdoZW4gZWl0aGVyXG4gKiBkb2N1bWVudC5ib2R5IG9yIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCBpcyBzdXBwbGllZCxcbiAqIGJlbG93IGxvZ2ljIHdpbGwgYmUgdXNlZCB0byBhbGxldmlhdGUgdGhlIGlzc3VlOlxuICpcbiAqIDEuIElmICdlbGVtZW50JyBpcyBlaXRoZXIgJ2RvY3VtZW50LmJvZHknIG9yICdkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gKiAgICBnZXQgd2hpY2hldmVyIGVsZW1lbnQncyAnc2Nyb2xse1RvcCxMZWZ0fScgaXMgbGFyZ2VyLlxuICogMi4gSWYgJ2VsZW1lbnQnIGlzIGVpdGhlciAnZG9jdW1lbnQuYm9keScgb3IgJ2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCcsXG4gKiAgICBzZXQgdGhlICdzY3JvbGx7VG9wLExlZnR9JyBvbiBib3RoIGVsZW1lbnRzLlxuICovXG5cbnZhciBTY3JvbGwgPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0VG9wOiBmdW5jdGlvbiBnZXRUb3AoZWxlbWVudCkge1xuICAgIHZhciBkb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgcmV0dXJuIF9pc1ZpZXdwb3J0U2Nyb2xsRWxlbWVudChlbGVtZW50LCBkb2MpID9cbiAgICAvLyBJbiBwcmFjdGljZSwgdGhleSB3aWxsIGVpdGhlciBib3RoIGhhdmUgdGhlIHNhbWUgdmFsdWUsXG4gICAgLy8gb3Igb25lIHdpbGwgYmUgemVybyBhbmQgdGhlIG90aGVyIHdpbGwgYmUgdGhlIHNjcm9sbCBwb3NpdGlvblxuICAgIC8vIG9mIHRoZSB2aWV3cG9ydC4gU28gd2UgY2FuIHVzZSBgWCB8fCBZYCBpbnN0ZWFkIG9mIGBNYXRoLm1heChYLCBZKWBcbiAgICBkb2MuYm9keS5zY3JvbGxUb3AgfHwgZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgOiBlbGVtZW50LnNjcm9sbFRvcDtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuZXdUb3BcbiAgICovXG4gIHNldFRvcDogZnVuY3Rpb24gc2V0VG9wKGVsZW1lbnQsIG5ld1RvcCkge1xuICAgIHZhciBkb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgaWYgKF9pc1ZpZXdwb3J0U2Nyb2xsRWxlbWVudChlbGVtZW50LCBkb2MpKSB7XG4gICAgICBkb2MuYm9keS5zY3JvbGxUb3AgPSBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA9IG5ld1RvcDtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5zY3JvbGxUb3AgPSBuZXdUb3A7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVmdDogZnVuY3Rpb24gZ2V0TGVmdChlbGVtZW50KSB7XG4gICAgdmFyIGRvYyA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gX2lzVmlld3BvcnRTY3JvbGxFbGVtZW50KGVsZW1lbnQsIGRvYykgPyBkb2MuYm9keS5zY3JvbGxMZWZ0IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCA6IGVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuZXdMZWZ0XG4gICAqL1xuICBzZXRMZWZ0OiBmdW5jdGlvbiBzZXRMZWZ0KGVsZW1lbnQsIG5ld0xlZnQpIHtcbiAgICB2YXIgZG9jID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICAgIGlmIChfaXNWaWV3cG9ydFNjcm9sbEVsZW1lbnQoZWxlbWVudCwgZG9jKSkge1xuICAgICAgZG9jLmJvZHkuc2Nyb2xsTGVmdCA9IGRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCA9IG5ld0xlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IG5ld0xlZnQ7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNjcm9sbDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0RWRpdG9yQmxvY2sucmVhY3RcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBfZXh0ZW5kcyA9IF9hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIERyYWZ0RWRpdG9yTGVhZiA9IHJlcXVpcmUoJy4vRHJhZnRFZGl0b3JMZWFmLnJlYWN0Jyk7XG52YXIgRHJhZnRPZmZzZXRLZXkgPSByZXF1aXJlKCcuL0RyYWZ0T2Zmc2V0S2V5Jyk7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG52YXIgU2Nyb2xsID0gcmVxdWlyZSgnZmJqcy9saWIvU2Nyb2xsJyk7XG52YXIgU3R5bGUgPSByZXF1aXJlKCdmYmpzL2xpYi9TdHlsZScpO1xudmFyIFVuaWNvZGVCaWRpID0gcmVxdWlyZSgnZmJqcy9saWIvVW5pY29kZUJpZGknKTtcbnZhciBVbmljb2RlQmlkaURpcmVjdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL1VuaWNvZGVCaWRpRGlyZWN0aW9uJyk7XG5cbnZhciBjeCA9IHJlcXVpcmUoJ2ZianMvbGliL2N4Jyk7XG52YXIgZ2V0RWxlbWVudFBvc2l0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZ2V0RWxlbWVudFBvc2l0aW9uJyk7XG52YXIgZ2V0U2Nyb2xsUG9zaXRpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRTY3JvbGxQb3NpdGlvbicpO1xudmFyIGdldFZpZXdwb3J0RGltZW5zaW9ucyA9IHJlcXVpcmUoJ2ZianMvbGliL2dldFZpZXdwb3J0RGltZW5zaW9ucycpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIG51bGx0aHJvd3MgPSByZXF1aXJlKCdmYmpzL2xpYi9udWxsdGhyb3dzJyk7XG5cbnZhciBTQ1JPTExfQlVGRkVSID0gMTA7XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgYSBibG9jayBvdmVybGFwcyB3aXRoIGVpdGhlciBlZGdlIG9mIHRoZSBgU2VsZWN0aW9uU3RhdGVgLlxuICovXG52YXIgaXNCbG9ja09uU2VsZWN0aW9uRWRnZSA9IGZ1bmN0aW9uIGlzQmxvY2tPblNlbGVjdGlvbkVkZ2Uoc2VsZWN0aW9uLCBrZXkpIHtcbiAgcmV0dXJuIHNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKSA9PT0ga2V5IHx8IHNlbGVjdGlvbi5nZXRGb2N1c0tleSgpID09PSBrZXk7XG59O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGJsb2NrIHJlbmRlcmVyIGZvciBhIGBEcmFmdEVkaXRvcmAgY29tcG9uZW50LlxuICpcbiAqIEEgYERyYWZ0RWRpdG9yQmxvY2tgIGlzIGFibGUgdG8gcmVuZGVyIGEgZ2l2ZW4gYENvbnRlbnRCbG9ja2AgdG8gaXRzXG4gKiBhcHByb3ByaWF0ZSBkZWNvcmF0b3IgYW5kIGlubGluZSBzdHlsZSBjb21wb25lbnRzLlxuICovXG5cbnZhciBEcmFmdEVkaXRvckJsb2NrID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERyYWZ0RWRpdG9yQmxvY2ssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERyYWZ0RWRpdG9yQmxvY2soKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyYWZ0RWRpdG9yQmxvY2spO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBEcmFmdEVkaXRvckJsb2NrLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuYmxvY2sgIT09IG5leHRQcm9wcy5ibG9jayB8fCB0aGlzLnByb3BzLnRyZWUgIT09IG5leHRQcm9wcy50cmVlIHx8IHRoaXMucHJvcHMuZGlyZWN0aW9uICE9PSBuZXh0UHJvcHMuZGlyZWN0aW9uIHx8IGlzQmxvY2tPblNlbGVjdGlvbkVkZ2UobmV4dFByb3BzLnNlbGVjdGlvbiwgbmV4dFByb3BzLmJsb2NrLmdldEtleSgpKSAmJiBuZXh0UHJvcHMuZm9yY2VTZWxlY3Rpb247XG4gIH07XG5cbiAgLyoqXG4gICAqIFdoZW4gYSBibG9jayBpcyBtb3VudGVkIGFuZCBvdmVybGFwcyB0aGUgc2VsZWN0aW9uIHN0YXRlLCB3ZSBuZWVkIHRvIG1ha2VcbiAgICogc3VyZSB0aGF0IHRoZSBjdXJzb3IgaXMgdmlzaWJsZSB0byBtYXRjaCBuYXRpdmUgYmVoYXZpb3IuIFRoaXMgbWF5IG5vdFxuICAgKiBiZSB0aGUgY2FzZSBpZiB0aGUgdXNlciBoYXMgcHJlc3NlZCBgUkVUVVJOYCBvciBwYXN0ZWQgc29tZSBjb250ZW50LCBzaW5jZVxuICAgKiBwcm9ncmFtYXRpY2FsbHkgY3JlYXRpbmcgdGhlc2UgbmV3IGJsb2NrcyBhbmQgc2V0dGluZyB0aGUgRE9NIHNlbGVjdGlvblxuICAgKiB3aWxsIG1pc3Mgb3V0IG9uIHRoZSBicm93c2VyIG5hdGl2ZWx5IHNjcm9sbGluZyB0byB0aGF0IHBvc2l0aW9uLlxuICAgKlxuICAgKiBUbyByZXBsaWNhdGUgbmF0aXZlIGJlaGF2aW9yLCBpZiB0aGUgYmxvY2sgb3ZlcmxhcHMgdGhlIHNlbGVjdGlvbiBzdGF0ZVxuICAgKiBvbiBtb3VudCwgZm9yY2UgdGhlIHNjcm9sbCBwb3NpdGlvbi4gQ2hlY2sgdGhlIHNjcm9sbCBzdGF0ZSBvZiB0aGUgc2Nyb2xsXG4gICAqIHBhcmVudCwgYW5kIGFkanVzdCBpdCB0byBhbGlnbiB0aGUgZW50aXJlIGJsb2NrIHRvIHRoZSBib3R0b20gb2YgdGhlXG4gICAqIHNjcm9sbCBwYXJlbnQuXG4gICAqL1xuXG5cbiAgRHJhZnRFZGl0b3JCbG9jay5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gdGhpcy5wcm9wcy5zZWxlY3Rpb247XG4gICAgdmFyIGVuZEtleSA9IHNlbGVjdGlvbi5nZXRFbmRLZXkoKTtcbiAgICBpZiAoIXNlbGVjdGlvbi5nZXRIYXNGb2N1cygpIHx8IGVuZEtleSAhPT0gdGhpcy5wcm9wcy5ibG9jay5nZXRLZXkoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBibG9ja05vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICB2YXIgc2Nyb2xsUGFyZW50ID0gU3R5bGUuZ2V0U2Nyb2xsUGFyZW50KGJsb2NrTm9kZSk7XG4gICAgdmFyIHNjcm9sbFBvc2l0aW9uID0gZ2V0U2Nyb2xsUG9zaXRpb24oc2Nyb2xsUGFyZW50KTtcbiAgICB2YXIgc2Nyb2xsRGVsdGEgPSB2b2lkIDA7XG5cbiAgICBpZiAoc2Nyb2xsUGFyZW50ID09PSB3aW5kb3cpIHtcbiAgICAgIHZhciBub2RlUG9zaXRpb24gPSBnZXRFbGVtZW50UG9zaXRpb24oYmxvY2tOb2RlKTtcbiAgICAgIHZhciBub2RlQm90dG9tID0gbm9kZVBvc2l0aW9uLnkgKyBub2RlUG9zaXRpb24uaGVpZ2h0O1xuICAgICAgdmFyIHZpZXdwb3J0SGVpZ2h0ID0gZ2V0Vmlld3BvcnREaW1lbnNpb25zKCkuaGVpZ2h0O1xuICAgICAgc2Nyb2xsRGVsdGEgPSBub2RlQm90dG9tIC0gdmlld3BvcnRIZWlnaHQ7XG4gICAgICBpZiAoc2Nyb2xsRGVsdGEgPiAwKSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyhzY3JvbGxQb3NpdGlvbi54LCBzY3JvbGxQb3NpdGlvbi55ICsgc2Nyb2xsRGVsdGEgKyBTQ1JPTExfQlVGRkVSKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgIShibG9ja05vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnYmxvY2tOb2RlIGlzIG5vdCBhbiBIVE1MRWxlbWVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBibG9ja0JvdHRvbSA9IGJsb2NrTm9kZS5vZmZzZXRIZWlnaHQgKyBibG9ja05vZGUub2Zmc2V0VG9wO1xuICAgICAgdmFyIHNjcm9sbEJvdHRvbSA9IHNjcm9sbFBhcmVudC5vZmZzZXRIZWlnaHQgKyBzY3JvbGxQb3NpdGlvbi55O1xuICAgICAgc2Nyb2xsRGVsdGEgPSBibG9ja0JvdHRvbSAtIHNjcm9sbEJvdHRvbTtcbiAgICAgIGlmIChzY3JvbGxEZWx0YSA+IDApIHtcbiAgICAgICAgU2Nyb2xsLnNldFRvcChzY3JvbGxQYXJlbnQsIFNjcm9sbC5nZXRUb3Aoc2Nyb2xsUGFyZW50KSArIHNjcm9sbERlbHRhICsgU0NST0xMX0JVRkZFUik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIERyYWZ0RWRpdG9yQmxvY2sucHJvdG90eXBlLl9yZW5kZXJDaGlsZHJlbiA9IGZ1bmN0aW9uIF9yZW5kZXJDaGlsZHJlbigpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBibG9jayA9IHRoaXMucHJvcHMuYmxvY2s7XG4gICAgdmFyIGJsb2NrS2V5ID0gYmxvY2suZ2V0S2V5KCk7XG4gICAgdmFyIHRleHQgPSBibG9jay5nZXRUZXh0KCk7XG4gICAgdmFyIGxhc3RMZWFmU2V0ID0gdGhpcy5wcm9wcy50cmVlLnNpemUgLSAxO1xuICAgIHZhciBoYXNTZWxlY3Rpb24gPSBpc0Jsb2NrT25TZWxlY3Rpb25FZGdlKHRoaXMucHJvcHMuc2VsZWN0aW9uLCBibG9ja0tleSk7XG5cbiAgICByZXR1cm4gdGhpcy5wcm9wcy50cmVlLm1hcChmdW5jdGlvbiAobGVhZlNldCwgaWkpIHtcbiAgICAgIHZhciBsZWF2ZXNGb3JMZWFmU2V0ID0gbGVhZlNldC5nZXQoJ2xlYXZlcycpO1xuICAgICAgdmFyIGxhc3RMZWFmID0gbGVhdmVzRm9yTGVhZlNldC5zaXplIC0gMTtcbiAgICAgIHZhciBsZWF2ZXMgPSBsZWF2ZXNGb3JMZWFmU2V0Lm1hcChmdW5jdGlvbiAobGVhZiwgamopIHtcbiAgICAgICAgdmFyIG9mZnNldEtleSA9IERyYWZ0T2Zmc2V0S2V5LmVuY29kZShibG9ja0tleSwgaWksIGpqKTtcbiAgICAgICAgdmFyIHN0YXJ0ID0gbGVhZi5nZXQoJ3N0YXJ0Jyk7XG4gICAgICAgIHZhciBlbmQgPSBsZWFmLmdldCgnZW5kJyk7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERyYWZ0RWRpdG9yTGVhZiwge1xuICAgICAgICAgIGtleTogb2Zmc2V0S2V5LFxuICAgICAgICAgIG9mZnNldEtleTogb2Zmc2V0S2V5LFxuICAgICAgICAgIGJsb2NrOiBibG9jayxcbiAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgc2VsZWN0aW9uOiBoYXNTZWxlY3Rpb24gPyBfdGhpczIucHJvcHMuc2VsZWN0aW9uIDogbnVsbCxcbiAgICAgICAgICBmb3JjZVNlbGVjdGlvbjogX3RoaXMyLnByb3BzLmZvcmNlU2VsZWN0aW9uLFxuICAgICAgICAgIHRleHQ6IHRleHQuc2xpY2Uoc3RhcnQsIGVuZCksXG4gICAgICAgICAgc3R5bGVTZXQ6IGJsb2NrLmdldElubGluZVN0eWxlQXQoc3RhcnQpLFxuICAgICAgICAgIGN1c3RvbVN0eWxlTWFwOiBfdGhpczIucHJvcHMuY3VzdG9tU3R5bGVNYXAsXG4gICAgICAgICAgY3VzdG9tU3R5bGVGbjogX3RoaXMyLnByb3BzLmN1c3RvbVN0eWxlRm4sXG4gICAgICAgICAgaXNMYXN0OiBpaSA9PT0gbGFzdExlYWZTZXQgJiYgamogPT09IGxhc3RMZWFmXG4gICAgICAgIH0pO1xuICAgICAgfSkudG9BcnJheSgpO1xuXG4gICAgICB2YXIgZGVjb3JhdG9yS2V5ID0gbGVhZlNldC5nZXQoJ2RlY29yYXRvcktleScpO1xuICAgICAgaWYgKGRlY29yYXRvcktleSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBsZWF2ZXM7XG4gICAgICB9XG5cbiAgICAgIGlmICghX3RoaXMyLnByb3BzLmRlY29yYXRvcikge1xuICAgICAgICByZXR1cm4gbGVhdmVzO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVjb3JhdG9yID0gbnVsbHRocm93cyhfdGhpczIucHJvcHMuZGVjb3JhdG9yKTtcblxuICAgICAgdmFyIERlY29yYXRvckNvbXBvbmVudCA9IGRlY29yYXRvci5nZXRDb21wb25lbnRGb3JLZXkoZGVjb3JhdG9yS2V5KTtcbiAgICAgIGlmICghRGVjb3JhdG9yQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiBsZWF2ZXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBkZWNvcmF0b3JQcm9wcyA9IGRlY29yYXRvci5nZXRQcm9wc0ZvcktleShkZWNvcmF0b3JLZXkpO1xuICAgICAgdmFyIGRlY29yYXRvck9mZnNldEtleSA9IERyYWZ0T2Zmc2V0S2V5LmVuY29kZShibG9ja0tleSwgaWksIDApO1xuICAgICAgdmFyIGRlY29yYXRlZFRleHQgPSB0ZXh0LnNsaWNlKGxlYXZlc0ZvckxlYWZTZXQuZmlyc3QoKS5nZXQoJ3N0YXJ0JyksIGxlYXZlc0ZvckxlYWZTZXQubGFzdCgpLmdldCgnZW5kJykpO1xuXG4gICAgICAvLyBSZXNldHRpbmcgZGlyIHRvIHRoZSBzYW1lIHZhbHVlIG9uIGEgY2hpbGQgbm9kZSBtYWtlcyBDaHJvbWUvRmlyZWZveFxuICAgICAgLy8gY29uZnVzZWQgb24gY3Vyc29yIG1vdmVtZW50LiBTZWUgaHR0cDovL2pzZmlkZGxlLm5ldC9kMTU3a0xjay8zL1xuICAgICAgdmFyIGRpciA9IFVuaWNvZGVCaWRpRGlyZWN0aW9uLmdldEhUTUxEaXJJZkRpZmZlcmVudChVbmljb2RlQmlkaS5nZXREaXJlY3Rpb24oZGVjb3JhdGVkVGV4dCksIF90aGlzMi5wcm9wcy5kaXJlY3Rpb24pO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgRGVjb3JhdG9yQ29tcG9uZW50LFxuICAgICAgICBfZXh0ZW5kcyh7fSwgZGVjb3JhdG9yUHJvcHMsIHtcbiAgICAgICAgICBjb250ZW50U3RhdGU6IF90aGlzMi5wcm9wcy5jb250ZW50U3RhdGUsXG4gICAgICAgICAgZGVjb3JhdGVkVGV4dDogZGVjb3JhdGVkVGV4dCxcbiAgICAgICAgICBkaXI6IGRpcixcbiAgICAgICAgICBrZXk6IGRlY29yYXRvck9mZnNldEtleSxcbiAgICAgICAgICBlbnRpdHlLZXk6IGJsb2NrLmdldEVudGl0eUF0KGxlYWZTZXQuZ2V0KCdzdGFydCcpKSxcbiAgICAgICAgICBvZmZzZXRLZXk6IGRlY29yYXRvck9mZnNldEtleSB9KSxcbiAgICAgICAgbGVhdmVzXG4gICAgICApO1xuICAgIH0pLnRvQXJyYXkoKTtcbiAgfTtcblxuICBEcmFmdEVkaXRvckJsb2NrLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRpcmVjdGlvbiA9IF9wcm9wcy5kaXJlY3Rpb24sXG4gICAgICAgIG9mZnNldEtleSA9IF9wcm9wcy5vZmZzZXRLZXk7XG5cbiAgICB2YXIgY2xhc3NOYW1lID0gY3goe1xuICAgICAgJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9ibG9jayc6IHRydWUsXG4gICAgICAncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2x0cic6IGRpcmVjdGlvbiA9PT0gJ0xUUicsXG4gICAgICAncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L3J0bCc6IGRpcmVjdGlvbiA9PT0gJ1JUTCdcbiAgICB9KTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7ICdkYXRhLW9mZnNldC1rZXknOiBvZmZzZXRLZXksIGNsYXNzTmFtZTogY2xhc3NOYW1lIH0sXG4gICAgICB0aGlzLl9yZW5kZXJDaGlsZHJlbigpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gRHJhZnRFZGl0b3JCbG9jaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVkaXRvckJsb2NrOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNTZWxlY3Rpb25BdExlYWZTdGFydFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBpc1NlbGVjdGlvbkF0TGVhZlN0YXJ0KGVkaXRvclN0YXRlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGFuY2hvcktleSA9IHNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKTtcbiAgdmFyIGJsb2NrVHJlZSA9IGVkaXRvclN0YXRlLmdldEJsb2NrVHJlZShhbmNob3JLZXkpO1xuICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCk7XG5cbiAgdmFyIGlzQXRTdGFydCA9IGZhbHNlO1xuXG4gIGJsb2NrVHJlZS5zb21lKGZ1bmN0aW9uIChsZWFmU2V0KSB7XG4gICAgaWYgKG9mZnNldCA9PT0gbGVhZlNldC5nZXQoJ3N0YXJ0JykpIHtcbiAgICAgIGlzQXRTdGFydCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0IDwgbGVhZlNldC5nZXQoJ2VuZCcpKSB7XG4gICAgICByZXR1cm4gbGVhZlNldC5nZXQoJ2xlYXZlcycpLnNvbWUoZnVuY3Rpb24gKGxlYWYpIHtcbiAgICAgICAgdmFyIGxlYWZTdGFydCA9IGxlYWYuZ2V0KCdzdGFydCcpO1xuICAgICAgICBpZiAob2Zmc2V0ID09PSBsZWFmU3RhcnQpIHtcbiAgICAgICAgICBpc0F0U3RhcnQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcblxuICByZXR1cm4gaXNBdFN0YXJ0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU2VsZWN0aW9uQXRMZWFmU3RhcnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEZWZhdWx0RHJhZnRJbmxpbmVTdHlsZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQk9MRDoge1xuICAgIGZvbnRXZWlnaHQ6ICdib2xkJ1xuICB9LFxuXG4gIENPREU6IHtcbiAgICBmb250RmFtaWx5OiAnbW9ub3NwYWNlJyxcbiAgICB3b3JkV3JhcDogJ2JyZWFrLXdvcmQnXG4gIH0sXG5cbiAgSVRBTElDOiB7XG4gICAgZm9udFN0eWxlOiAnaXRhbGljJ1xuICB9LFxuXG4gIFNUUklLRVRIUk9VR0g6IHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ2xpbmUtdGhyb3VnaCdcbiAgfSxcblxuICBVTkRFUkxJTkU6IHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZSdcbiAgfVxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4vKipcbiAqIEJhc2ljIChzdGF0ZWxlc3MpIEFQSSBmb3IgdGV4dCBkaXJlY3Rpb24gZGV0ZWN0aW9uXG4gKlxuICogUGFydCBvZiBvdXIgaW1wbGVtZW50YXRpb24gb2YgVW5pY29kZSBCaWRpcmVjdGlvbmFsIEFsZ29yaXRobSAoVUJBKVxuICogVW5pY29kZSBTdGFuZGFyZCBBbm5leCAjOSAoVUFYOSlcbiAqIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjkvXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVW5pY29kZUJpZGlEaXJlY3Rpb24gPSByZXF1aXJlKCcuL1VuaWNvZGVCaWRpRGlyZWN0aW9uJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFJlZ0V4cCByYW5nZXMgb2YgY2hhcmFjdGVycyB3aXRoIGEgKlN0cm9uZyogQmlkaV9DbGFzcyB2YWx1ZS5cbiAqXG4gKiBEYXRhIGlzIGJhc2VkIG9uIERlcml2ZWRCaWRpQ2xhc3MudHh0IGluIFVDRCB2ZXJzaW9uIDcuMC4wLlxuICpcbiAqIE5PVEU6IEZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBvbmx5IHN1cHBvcnQgVW5pY29kZSdzXG4gKiAgICAgICBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCkgZm9yIG5vdy5cbiAqL1xudmFyIFJBTkdFX0JZX0JJRElfVFlQRSA9IHtcblxuICBMOiAnQS1aYS16XFx4QUFcXHhCNVxceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAxQkFcXHUwMUJCJyArICdcXHUwMUJDLVxcdTAxQkZcXHUwMUMwLVxcdTAxQzNcXHUwMUM0LVxcdTAyOTNcXHUwMjk0XFx1MDI5NS1cXHUwMkFGXFx1MDJCMC1cXHUwMkI4JyArICdcXHUwMkJCLVxcdTAyQzFcXHUwMkQwLVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVFXFx1MDM3MC1cXHUwMzczXFx1MDM3Ni1cXHUwMzc3JyArICdcXHUwMzdBXFx1MDM3Qi1cXHUwMzdEXFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExJyArICdcXHUwM0EzLVxcdTAzRjVcXHUwM0Y3LVxcdTA0ODFcXHUwNDgyXFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OScgKyAnXFx1MDU1QS1cXHUwNTVGXFx1MDU2MS1cXHUwNTg3XFx1MDU4OVxcdTA5MDNcXHUwOTA0LVxcdTA5MzlcXHUwOTNCXFx1MDkzRCcgKyAnXFx1MDkzRS1cXHUwOTQwXFx1MDk0OS1cXHUwOTRDXFx1MDk0RS1cXHUwOTRGXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NjQtXFx1MDk2NScgKyAnXFx1MDk2Ni1cXHUwOTZGXFx1MDk3MFxcdTA5NzFcXHUwOTcyLVxcdTA5ODBcXHUwOTgyLVxcdTA5ODNcXHUwOTg1LVxcdTA5OEMnICsgJ1xcdTA5OEYtXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEJyArICdcXHUwOUJFLVxcdTA5QzBcXHUwOUM3LVxcdTA5QzhcXHUwOUNCLVxcdTA5Q0NcXHUwOUNFXFx1MDlEN1xcdTA5REMtXFx1MDlERCcgKyAnXFx1MDlERi1cXHUwOUUxXFx1MDlFNi1cXHUwOUVGXFx1MDlGMC1cXHUwOUYxXFx1MDlGNC1cXHUwOUY5XFx1MDlGQVxcdTBBMDMnICsgJ1xcdTBBMDUtXFx1MEEwQVxcdTBBMEYtXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzItXFx1MEEzMycgKyAnXFx1MEEzNS1cXHUwQTM2XFx1MEEzOC1cXHUwQTM5XFx1MEEzRS1cXHUwQTQwXFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNjYtXFx1MEE2RicgKyAnXFx1MEE3Mi1cXHUwQTc0XFx1MEE4M1xcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMCcgKyAnXFx1MEFCMi1cXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCRFxcdTBBQkUtXFx1MEFDMFxcdTBBQzlcXHUwQUNCLVxcdTBBQ0NcXHUwQUQwJyArICdcXHUwQUUwLVxcdTBBRTFcXHUwQUU2LVxcdTBBRUZcXHUwQUYwXFx1MEIwMi1cXHUwQjAzXFx1MEIwNS1cXHUwQjBDXFx1MEIwRi1cXHUwQjEwJyArICdcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyLVxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNEXFx1MEIzRVxcdTBCNDAnICsgJ1xcdTBCNDctXFx1MEI0OFxcdTBCNEItXFx1MEI0Q1xcdTBCNTdcXHUwQjVDLVxcdTBCNURcXHUwQjVGLVxcdTBCNjFcXHUwQjY2LVxcdTBCNkYnICsgJ1xcdTBCNzBcXHUwQjcxXFx1MEI3Mi1cXHUwQjc3XFx1MEI4M1xcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NScgKyAnXFx1MEI5OS1cXHUwQjlBXFx1MEI5Q1xcdTBCOUUtXFx1MEI5RlxcdTBCQTMtXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOScgKyAnXFx1MEJCRS1cXHUwQkJGXFx1MEJDMS1cXHUwQkMyXFx1MEJDNi1cXHUwQkM4XFx1MEJDQS1cXHUwQkNDXFx1MEJEMFxcdTBCRDcnICsgJ1xcdTBCRTYtXFx1MEJFRlxcdTBCRjAtXFx1MEJGMlxcdTBDMDEtXFx1MEMwM1xcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMCcgKyAnXFx1MEMxMi1cXHUwQzI4XFx1MEMyQS1cXHUwQzM5XFx1MEMzRFxcdTBDNDEtXFx1MEM0NFxcdTBDNTgtXFx1MEM1OVxcdTBDNjAtXFx1MEM2MScgKyAnXFx1MEM2Ni1cXHUwQzZGXFx1MEM3RlxcdTBDODItXFx1MEM4M1xcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOCcgKyAnXFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDQkVcXHUwQ0JGXFx1MENDMC1cXHUwQ0M0XFx1MENDNicgKyAnXFx1MENDNy1cXHUwQ0M4XFx1MENDQS1cXHUwQ0NCXFx1MENENS1cXHUwQ0Q2XFx1MENERVxcdTBDRTAtXFx1MENFMVxcdTBDRTYtXFx1MENFRicgKyAnXFx1MENGMS1cXHUwQ0YyXFx1MEQwMi1cXHUwRDAzXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRCcgKyAnXFx1MEQzRS1cXHUwRDQwXFx1MEQ0Ni1cXHUwRDQ4XFx1MEQ0QS1cXHUwRDRDXFx1MEQ0RVxcdTBENTdcXHUwRDYwLVxcdTBENjEnICsgJ1xcdTBENjYtXFx1MEQ2RlxcdTBENzAtXFx1MEQ3NVxcdTBENzlcXHUwRDdBLVxcdTBEN0ZcXHUwRDgyLVxcdTBEODNcXHUwRDg1LVxcdTBEOTYnICsgJ1xcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRENGLVxcdTBERDFcXHUwREQ4LVxcdTBEREYnICsgJ1xcdTBERTYtXFx1MERFRlxcdTBERjItXFx1MERGM1xcdTBERjRcXHUwRTAxLVxcdTBFMzBcXHUwRTMyLVxcdTBFMzNcXHUwRTQwLVxcdTBFNDUnICsgJ1xcdTBFNDZcXHUwRTRGXFx1MEU1MC1cXHUwRTU5XFx1MEU1QS1cXHUwRTVCXFx1MEU4MS1cXHUwRTgyXFx1MEU4NFxcdTBFODctXFx1MEU4OCcgKyAnXFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBNycgKyAnXFx1MEVBQS1cXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMi1cXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzYnICsgJ1xcdTBFRDAtXFx1MEVEOVxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjAxLVxcdTBGMDNcXHUwRjA0LVxcdTBGMTJcXHUwRjEzXFx1MEYxNCcgKyAnXFx1MEYxNS1cXHUwRjE3XFx1MEYxQS1cXHUwRjFGXFx1MEYyMC1cXHUwRjI5XFx1MEYyQS1cXHUwRjMzXFx1MEYzNFxcdTBGMzZcXHUwRjM4JyArICdcXHUwRjNFLVxcdTBGM0ZcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjdGXFx1MEY4NVxcdTBGODgtXFx1MEY4QycgKyAnXFx1MEZCRS1cXHUwRkM1XFx1MEZDNy1cXHUwRkNDXFx1MEZDRS1cXHUwRkNGXFx1MEZEMC1cXHUwRkQ0XFx1MEZENS1cXHUwRkQ4JyArICdcXHUwRkQ5LVxcdTBGREFcXHUxMDAwLVxcdTEwMkFcXHUxMDJCLVxcdTEwMkNcXHUxMDMxXFx1MTAzOFxcdTEwM0ItXFx1MTAzQ1xcdTEwM0YnICsgJ1xcdTEwNDAtXFx1MTA0OVxcdTEwNEEtXFx1MTA0RlxcdTEwNTAtXFx1MTA1NVxcdTEwNTYtXFx1MTA1N1xcdTEwNUEtXFx1MTA1RFxcdTEwNjEnICsgJ1xcdTEwNjItXFx1MTA2NFxcdTEwNjUtXFx1MTA2NlxcdTEwNjctXFx1MTA2RFxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MScgKyAnXFx1MTA4My1cXHUxMDg0XFx1MTA4Ny1cXHUxMDhDXFx1MTA4RVxcdTEwOEZcXHUxMDkwLVxcdTEwOTlcXHUxMDlBLVxcdTEwOUMnICsgJ1xcdTEwOUUtXFx1MTA5RlxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQlxcdTEwRkMnICsgJ1xcdTEwRkQtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODgnICsgJ1xcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzUnICsgJ1xcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzNjAtXFx1MTM2OCcgKyAnXFx1MTM2OS1cXHUxMzdDXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y0XFx1MTQwMS1cXHUxNjZDXFx1MTY2RC1cXHUxNjZFJyArICdcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkVCLVxcdTE2RURcXHUxNkVFLVxcdTE2RjAnICsgJ1xcdTE2RjEtXFx1MTZGOFxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxMVxcdTE3MjAtXFx1MTczMVxcdTE3MzUtXFx1MTczNicgKyAnXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdCNlxcdTE3QkUtXFx1MTdDNScgKyAnXFx1MTdDNy1cXHUxN0M4XFx1MTdENC1cXHUxN0Q2XFx1MTdEN1xcdTE3RDgtXFx1MTdEQVxcdTE3RENcXHUxN0UwLVxcdTE3RTknICsgJ1xcdTE4MTAtXFx1MTgxOVxcdTE4MjAtXFx1MTg0MlxcdTE4NDNcXHUxODQ0LVxcdTE4NzdcXHUxODgwLVxcdTE4QThcXHUxOEFBJyArICdcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTIzLVxcdTE5MjZcXHUxOTI5LVxcdTE5MkJcXHUxOTMwLVxcdTE5MzEnICsgJ1xcdTE5MzMtXFx1MTkzOFxcdTE5NDYtXFx1MTk0RlxcdTE5NTAtXFx1MTk2RFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlBQicgKyAnXFx1MTlCMC1cXHUxOUMwXFx1MTlDMS1cXHUxOUM3XFx1MTlDOC1cXHUxOUM5XFx1MTlEMC1cXHUxOUQ5XFx1MTlEQVxcdTFBMDAtXFx1MUExNicgKyAnXFx1MUExOS1cXHUxQTFBXFx1MUExRS1cXHUxQTFGXFx1MUEyMC1cXHUxQTU0XFx1MUE1NVxcdTFBNTdcXHUxQTYxXFx1MUE2My1cXHUxQTY0JyArICdcXHUxQTZELVxcdTFBNzJcXHUxQTgwLVxcdTFBODlcXHUxQTkwLVxcdTFBOTlcXHUxQUEwLVxcdTFBQTZcXHUxQUE3XFx1MUFBOC1cXHUxQUFEJyArICdcXHUxQjA0XFx1MUIwNS1cXHUxQjMzXFx1MUIzNVxcdTFCM0JcXHUxQjNELVxcdTFCNDFcXHUxQjQzLVxcdTFCNDRcXHUxQjQ1LVxcdTFCNEInICsgJ1xcdTFCNTAtXFx1MUI1OVxcdTFCNUEtXFx1MUI2MFxcdTFCNjEtXFx1MUI2QVxcdTFCNzQtXFx1MUI3Q1xcdTFCODJcXHUxQjgzLVxcdTFCQTAnICsgJ1xcdTFCQTFcXHUxQkE2LVxcdTFCQTdcXHUxQkFBXFx1MUJBRS1cXHUxQkFGXFx1MUJCMC1cXHUxQkI5XFx1MUJCQS1cXHUxQkU1XFx1MUJFNycgKyAnXFx1MUJFQS1cXHUxQkVDXFx1MUJFRVxcdTFCRjItXFx1MUJGM1xcdTFCRkMtXFx1MUJGRlxcdTFDMDAtXFx1MUMyM1xcdTFDMjQtXFx1MUMyQicgKyAnXFx1MUMzNC1cXHUxQzM1XFx1MUMzQi1cXHUxQzNGXFx1MUM0MC1cXHUxQzQ5XFx1MUM0RC1cXHUxQzRGXFx1MUM1MC1cXHUxQzU5JyArICdcXHUxQzVBLVxcdTFDNzdcXHUxQzc4LVxcdTFDN0RcXHUxQzdFLVxcdTFDN0ZcXHUxQ0MwLVxcdTFDQzdcXHUxQ0QzXFx1MUNFMScgKyAnXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGMi1cXHUxQ0YzXFx1MUNGNS1cXHUxQ0Y2XFx1MUQwMC1cXHUxRDJCJyArICdcXHUxRDJDLVxcdTFENkFcXHUxRDZCLVxcdTFENzdcXHUxRDc4XFx1MUQ3OS1cXHUxRDlBXFx1MUQ5Qi1cXHUxREJGXFx1MUUwMC1cXHUxRjE1JyArICdcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNUQnICsgJ1xcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0MnICsgJ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIwMEUnICsgJ1xcdTIwNzFcXHUyMDdGXFx1MjA5MC1cXHUyMDlDXFx1MjEwMlxcdTIxMDdcXHUyMTBBLVxcdTIxMTNcXHUyMTE1XFx1MjExOS1cXHUyMTFEJyArICdcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzRcXHUyMTM1LVxcdTIxMzhcXHUyMTM5JyArICdcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE0RlxcdTIxNjAtXFx1MjE4MlxcdTIxODMtXFx1MjE4NCcgKyAnXFx1MjE4NS1cXHUyMTg4XFx1MjMzNi1cXHUyMzdBXFx1MjM5NVxcdTI0OUMtXFx1MjRFOVxcdTI2QUNcXHUyODAwLVxcdTI4RkYnICsgJ1xcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkM3QlxcdTJDN0MtXFx1MkM3RFxcdTJDN0UtXFx1MkNFNCcgKyAnXFx1MkNFQi1cXHUyQ0VFXFx1MkNGMi1cXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGJyArICdcXHUyRDcwXFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFJyArICdcXHUyREMwLVxcdTJEQzZcXHUyREM4LVxcdTJEQ0VcXHUyREQwLVxcdTJERDZcXHUyREQ4LVxcdTJEREVcXHUzMDA1XFx1MzAwNlxcdTMwMDcnICsgJ1xcdTMwMjEtXFx1MzAyOVxcdTMwMkUtXFx1MzAyRlxcdTMwMzEtXFx1MzAzNVxcdTMwMzgtXFx1MzAzQVxcdTMwM0JcXHUzMDNDJyArICdcXHUzMDQxLVxcdTMwOTZcXHUzMDlELVxcdTMwOUVcXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZFXFx1MzBGRicgKyAnXFx1MzEwNS1cXHUzMTJEXFx1MzEzMS1cXHUzMThFXFx1MzE5MC1cXHUzMTkxXFx1MzE5Mi1cXHUzMTk1XFx1MzE5Ni1cXHUzMTlGJyArICdcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzMjAwLVxcdTMyMUNcXHUzMjIwLVxcdTMyMjlcXHUzMjJBLVxcdTMyNDcnICsgJ1xcdTMyNDgtXFx1MzI0RlxcdTMyNjAtXFx1MzI3QlxcdTMyN0ZcXHUzMjgwLVxcdTMyODlcXHUzMjhBLVxcdTMyQjBcXHUzMkMwLVxcdTMyQ0InICsgJ1xcdTMyRDAtXFx1MzJGRVxcdTMzMDAtXFx1MzM3NlxcdTMzN0ItXFx1MzNERFxcdTMzRTAtXFx1MzNGRVxcdTM0MDAtXFx1NERCNScgKyAnXFx1NEUwMC1cXHU5RkNDXFx1QTAwMC1cXHVBMDE0XFx1QTAxNVxcdUEwMTYtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGN1xcdUE0RjgtXFx1QTRGRCcgKyAnXFx1QTRGRS1cXHVBNEZGXFx1QTUwMC1cXHVBNjBCXFx1QTYwQ1xcdUE2MTAtXFx1QTYxRlxcdUE2MjAtXFx1QTYyOVxcdUE2MkEtXFx1QTYyQicgKyAnXFx1QTY0MC1cXHVBNjZEXFx1QTY2RVxcdUE2ODAtXFx1QTY5QlxcdUE2OUMtXFx1QTY5RFxcdUE2QTAtXFx1QTZFNVxcdUE2RTYtXFx1QTZFRicgKyAnXFx1QTZGMi1cXHVBNkY3XFx1QTcyMi1cXHVBNzZGXFx1QTc3MFxcdUE3NzEtXFx1QTc4N1xcdUE3ODktXFx1QTc4QVxcdUE3OEItXFx1QTc4RScgKyAnXFx1QTc5MC1cXHVBN0FEXFx1QTdCMC1cXHVBN0IxXFx1QTdGN1xcdUE3RjgtXFx1QTdGOVxcdUE3RkFcXHVBN0ZCLVxcdUE4MDEnICsgJ1xcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4MjMtXFx1QTgyNFxcdUE4MjdcXHVBODMwLVxcdUE4MzUnICsgJ1xcdUE4MzYtXFx1QTgzN1xcdUE4NDAtXFx1QTg3M1xcdUE4ODAtXFx1QTg4MVxcdUE4ODItXFx1QThCM1xcdUE4QjQtXFx1QThDMycgKyAnXFx1QThDRS1cXHVBOENGXFx1QThEMC1cXHVBOEQ5XFx1QThGMi1cXHVBOEY3XFx1QThGOC1cXHVBOEZBXFx1QThGQlxcdUE5MDAtXFx1QTkwOScgKyAnXFx1QTkwQS1cXHVBOTI1XFx1QTkyRS1cXHVBOTJGXFx1QTkzMC1cXHVBOTQ2XFx1QTk1Mi1cXHVBOTUzXFx1QTk1RlxcdUE5NjAtXFx1QTk3QycgKyAnXFx1QTk4M1xcdUE5ODQtXFx1QTlCMlxcdUE5QjQtXFx1QTlCNVxcdUE5QkEtXFx1QTlCQlxcdUE5QkQtXFx1QTlDMFxcdUE5QzEtXFx1QTlDRCcgKyAnXFx1QTlDRlxcdUE5RDAtXFx1QTlEOVxcdUE5REUtXFx1QTlERlxcdUE5RTAtXFx1QTlFNFxcdUE5RTZcXHVBOUU3LVxcdUE5RUYnICsgJ1xcdUE5RjAtXFx1QTlGOVxcdUE5RkEtXFx1QTlGRVxcdUFBMDAtXFx1QUEyOFxcdUFBMkYtXFx1QUEzMFxcdUFBMzMtXFx1QUEzNCcgKyAnXFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE0RFxcdUFBNTAtXFx1QUE1OVxcdUFBNUMtXFx1QUE1RlxcdUFBNjAtXFx1QUE2RicgKyAnXFx1QUE3MFxcdUFBNzEtXFx1QUE3NlxcdUFBNzctXFx1QUE3OVxcdUFBN0FcXHVBQTdCXFx1QUE3RFxcdUFBN0UtXFx1QUFBRlxcdUFBQjEnICsgJ1xcdUFBQjUtXFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQURDXFx1QUFERFxcdUFBREUtXFx1QUFERicgKyAnXFx1QUFFMC1cXHVBQUVBXFx1QUFFQlxcdUFBRUUtXFx1QUFFRlxcdUFBRjAtXFx1QUFGMVxcdUFBRjJcXHVBQUYzLVxcdUFBRjRcXHVBQUY1JyArICdcXHVBQjAxLVxcdUFCMDZcXHVBQjA5LVxcdUFCMEVcXHVBQjExLVxcdUFCMTZcXHVBQjIwLVxcdUFCMjZcXHVBQjI4LVxcdUFCMkUnICsgJ1xcdUFCMzAtXFx1QUI1QVxcdUFCNUJcXHVBQjVDLVxcdUFCNUZcXHVBQjY0LVxcdUFCNjVcXHVBQkMwLVxcdUFCRTJcXHVBQkUzLVxcdUFCRTQnICsgJ1xcdUFCRTYtXFx1QUJFN1xcdUFCRTktXFx1QUJFQVxcdUFCRUJcXHVBQkVDXFx1QUJGMC1cXHVBQkY5XFx1QUMwMC1cXHVEN0EzJyArICdcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVFMDAwLVxcdUY4RkZcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDknICsgJ1xcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkY2RlxcdUZGNzAnICsgJ1xcdUZGNzEtXFx1RkY5RFxcdUZGOUUtXFx1RkY5RlxcdUZGQTAtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRicgKyAnXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDJyxcblxuICBSOiAnXFx1MDU5MFxcdTA1QkVcXHUwNUMwXFx1MDVDM1xcdTA1QzZcXHUwNUM4LVxcdTA1Q0ZcXHUwNUQwLVxcdTA1RUFcXHUwNUVCLVxcdTA1RUYnICsgJ1xcdTA1RjAtXFx1MDVGMlxcdTA1RjMtXFx1MDVGNFxcdTA1RjUtXFx1MDVGRlxcdTA3QzAtXFx1MDdDOVxcdTA3Q0EtXFx1MDdFQScgKyAnXFx1MDdGNC1cXHUwN0Y1XFx1MDdGQVxcdTA3RkItXFx1MDdGRlxcdTA4MDAtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOCcgKyAnXFx1MDgyRS1cXHUwODJGXFx1MDgzMC1cXHUwODNFXFx1MDgzRlxcdTA4NDAtXFx1MDg1OFxcdTA4NUMtXFx1MDg1RFxcdTA4NUUnICsgJ1xcdTA4NUYtXFx1MDg5RlxcdTIwMEZcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzN1xcdUZCMzgtXFx1RkIzQycgKyAnXFx1RkIzRFxcdUZCM0VcXHVGQjNGXFx1RkI0MC1cXHVGQjQxXFx1RkI0MlxcdUZCNDMtXFx1RkI0NFxcdUZCNDVcXHVGQjQ2LVxcdUZCNEYnLFxuXG4gIEFMOiAnXFx1MDYwOFxcdTA2MEJcXHUwNjBEXFx1MDYxQlxcdTA2MUNcXHUwNjFEXFx1MDYxRS1cXHUwNjFGXFx1MDYyMC1cXHUwNjNGXFx1MDY0MCcgKyAnXFx1MDY0MS1cXHUwNjRBXFx1MDY2RFxcdTA2NkUtXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDRcXHUwNkQ1XFx1MDZFNS1cXHUwNkU2JyArICdcXHUwNkVFLVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZELVxcdTA2RkVcXHUwNkZGXFx1MDcwMC1cXHUwNzBEXFx1MDcwRVxcdTA3MEYnICsgJ1xcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRCLVxcdTA3NENcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdCMi1cXHUwN0JGJyArICdcXHUwOEEwLVxcdTA4QjJcXHUwOEIzLVxcdTA4RTNcXHVGQjUwLVxcdUZCQjFcXHVGQkIyLVxcdUZCQzFcXHVGQkMyLVxcdUZCRDInICsgJ1xcdUZCRDMtXFx1RkQzRFxcdUZENDAtXFx1RkQ0RlxcdUZENTAtXFx1RkQ4RlxcdUZEOTAtXFx1RkQ5MVxcdUZEOTItXFx1RkRDNycgKyAnXFx1RkRDOC1cXHVGRENGXFx1RkRGMC1cXHVGREZCXFx1RkRGQ1xcdUZERkUtXFx1RkRGRlxcdUZFNzAtXFx1RkU3NFxcdUZFNzUnICsgJ1xcdUZFNzYtXFx1RkVGQ1xcdUZFRkQtXFx1RkVGRSdcblxufTtcblxudmFyIFJFR0VYX1NUUk9ORyA9IG5ldyBSZWdFeHAoJ1snICsgUkFOR0VfQllfQklESV9UWVBFLkwgKyBSQU5HRV9CWV9CSURJX1RZUEUuUiArIFJBTkdFX0JZX0JJRElfVFlQRS5BTCArICddJyk7XG5cbnZhciBSRUdFWF9SVEwgPSBuZXcgUmVnRXhwKCdbJyArIFJBTkdFX0JZX0JJRElfVFlQRS5SICsgUkFOR0VfQllfQklESV9UWVBFLkFMICsgJ10nKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBzdHJvbmcgY2hhcmFjdGVyIChoYXMgQmlkaV9DbGFzcyB2YWx1ZSBvZiBMLCBSLCBvciBBTCkuXG4gKlxuICogQHBhcmFtIHN0ciAgQSB0ZXh0IGJsb2NrOyBlLmcuIHBhcmFncmFwaCwgdGFibGUgY2VsbCwgdGFnXG4gKiBAcmV0dXJuICAgICBBIGNoYXJhY3RlciB3aXRoIHN0cm9uZyBiaWRpIGRpcmVjdGlvbiwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAqL1xuZnVuY3Rpb24gZmlyc3RTdHJvbmdDaGFyKHN0cikge1xuICB2YXIgbWF0Y2ggPSBSRUdFWF9TVFJPTkcuZXhlYyhzdHIpO1xuICByZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaFswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkaXJlY3Rpb24gb2YgYSBibG9jayBvZiB0ZXh0LCBiYXNlZCBvbiB0aGUgZGlyZWN0aW9uIG9mIGl0c1xuICogZmlyc3Qgc3Ryb25nIGNoYXJhY3RlciAoaGFzIEJpZGlfQ2xhc3MgdmFsdWUgb2YgTCwgUiwgb3IgQUwpLlxuICpcbiAqIEBwYXJhbSBzdHIgIEEgdGV4dCBibG9jazsgZS5nLiBwYXJhZ3JhcGgsIHRhYmxlIGNlbGwsIHRhZ1xuICogQHJldHVybiAgICAgVGhlIHJlc29sdmVkIGRpcmVjdGlvblxuICovXG5mdW5jdGlvbiBmaXJzdFN0cm9uZ0NoYXJEaXIoc3RyKSB7XG4gIHZhciBzdHJvbmdDaGFyID0gZmlyc3RTdHJvbmdDaGFyKHN0cik7XG4gIGlmIChzdHJvbmdDaGFyID09IG51bGwpIHtcbiAgICByZXR1cm4gVW5pY29kZUJpZGlEaXJlY3Rpb24uTkVVVFJBTDtcbiAgfVxuICByZXR1cm4gUkVHRVhfUlRMLmV4ZWMoc3Ryb25nQ2hhcikgPyBVbmljb2RlQmlkaURpcmVjdGlvbi5SVEwgOiBVbmljb2RlQmlkaURpcmVjdGlvbi5MVFI7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGlyZWN0aW9uIG9mIGEgYmxvY2sgb2YgdGV4dCwgYmFzZWQgb24gdGhlIGRpcmVjdGlvbiBvZiBpdHNcbiAqIGZpcnN0IHN0cm9uZyBjaGFyYWN0ZXIgKGhhcyBCaWRpX0NsYXNzIHZhbHVlIG9mIEwsIFIsIG9yIEFMKSwgb3IgYSBmYWxsYmFja1xuICogZGlyZWN0aW9uLCBpZiBubyBzdHJvbmcgY2hhcmFjdGVyIGlzIGZvdW5kLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiByZXNwZWN0IHRvIEhpZ2hlci1MZXZlbCBQcm90b2NvbFxuICogcnVsZSBITDEuIChodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHI5LyNITDEpXG4gKlxuICogQHBhcmFtIHN0ciAgICAgICBBIHRleHQgYmxvY2s7IGUuZy4gcGFyYWdyYXBoLCB0YWJsZSBjZWxsLCB0YWdcbiAqIEBwYXJhbSBmYWxsYmFjayAgRmFsbGJhY2sgZGlyZWN0aW9uLCB1c2VkIGlmIG5vIHN0cm9uZyBkaXJlY3Rpb24gZGV0ZWN0ZWRcbiAqICAgICAgICAgICAgICAgICAgZm9yIHRoZSBibG9jayAoZGVmYXVsdCA9IE5FVVRSQUwpXG4gKiBAcmV0dXJuICAgICAgICAgIFRoZSByZXNvbHZlZCBkaXJlY3Rpb25cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUJsb2NrRGlyKHN0ciwgZmFsbGJhY2spIHtcbiAgZmFsbGJhY2sgPSBmYWxsYmFjayB8fCBVbmljb2RlQmlkaURpcmVjdGlvbi5ORVVUUkFMO1xuICBpZiAoIXN0ci5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH1cbiAgdmFyIGJsb2NrRGlyID0gZmlyc3RTdHJvbmdDaGFyRGlyKHN0cik7XG4gIHJldHVybiBibG9ja0RpciA9PT0gVW5pY29kZUJpZGlEaXJlY3Rpb24uTkVVVFJBTCA/IGZhbGxiYWNrIDogYmxvY2tEaXI7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGlyZWN0aW9uIG9mIGEgYmxvY2sgb2YgdGV4dCwgYmFzZWQgb24gdGhlIGRpcmVjdGlvbiBvZiBpdHNcbiAqIGZpcnN0IHN0cm9uZyBjaGFyYWN0ZXIgKGhhcyBCaWRpX0NsYXNzIHZhbHVlIG9mIEwsIFIsIG9yIEFMKSwgb3IgYSBmYWxsYmFja1xuICogZGlyZWN0aW9uLCBpZiBubyBzdHJvbmcgY2hhcmFjdGVyIGlzIGZvdW5kLlxuICpcbiAqIE5PVEU6IFRoaXMgZnVuY3Rpb24gaXMgc2ltaWxhciB0byByZXNvbHZlQmxvY2tEaXIoKSwgYnV0IHVzZXMgdGhlIGdsb2JhbFxuICogZGlyZWN0aW9uIGFzIHRoZSBmYWxsYmFjaywgc28gaXQgKmFsd2F5cyogcmV0dXJucyBhIFN0cm9uZyBkaXJlY3Rpb24sXG4gKiBtYWtpbmcgaXQgdXNlZnVsIGZvciBpbnRlZ3JhdGlvbiBpbiBwbGFjZXMgdGhhdCB5b3UgbmVlZCB0byBtYWtlIHRoZSBmaW5hbFxuICogZGVjaXNpb24sIGxpa2Ugc2V0dGluZyBzb21lIENTUyBjbGFzcy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gcmVzcGVjdCB0byBIaWdoZXItTGV2ZWwgUHJvdG9jb2xcbiAqIHJ1bGUgSEwxLiAoaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyOS8jSEwxKVxuICpcbiAqIEBwYXJhbSBzdHIgICAgICAgICAgICAgQSB0ZXh0IGJsb2NrOyBlLmcuIHBhcmFncmFwaCwgdGFibGUgY2VsbFxuICogQHBhcmFtIHN0cm9uZ0ZhbGxiYWNrICBGYWxsYmFjayBkaXJlY3Rpb24sIHVzZWQgaWYgbm8gc3Ryb25nIGRpcmVjdGlvblxuICogICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3RlZCBmb3IgdGhlIGJsb2NrIChkZWZhdWx0ID0gZ2xvYmFsIGRpcmVjdGlvbilcbiAqIEByZXR1cm4gICAgICAgICAgICAgICAgVGhlIHJlc29sdmVkIFN0cm9uZyBkaXJlY3Rpb25cbiAqL1xuZnVuY3Rpb24gZ2V0RGlyZWN0aW9uKHN0ciwgc3Ryb25nRmFsbGJhY2spIHtcbiAgaWYgKCFzdHJvbmdGYWxsYmFjaykge1xuICAgIHN0cm9uZ0ZhbGxiYWNrID0gVW5pY29kZUJpZGlEaXJlY3Rpb24uZ2V0R2xvYmFsRGlyKCk7XG4gIH1cbiAgIVVuaWNvZGVCaWRpRGlyZWN0aW9uLmlzU3Ryb25nKHN0cm9uZ0ZhbGxiYWNrKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdGYWxsYmFjayBkaXJlY3Rpb24gbXVzdCBiZSBhIHN0cm9uZyBkaXJlY3Rpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByZXNvbHZlQmxvY2tEaXIoc3RyLCBzdHJvbmdGYWxsYmFjayk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGdldERpcmVjdGlvbihhcmd1bWVudHMuLi4pIHJldHVybnMgTFRSLlxuICpcbiAqIEBwYXJhbSBzdHIgICAgICAgICAgICAgQSB0ZXh0IGJsb2NrOyBlLmcuIHBhcmFncmFwaCwgdGFibGUgY2VsbFxuICogQHBhcmFtIHN0cm9uZ0ZhbGxiYWNrICBGYWxsYmFjayBkaXJlY3Rpb24sIHVzZWQgaWYgbm8gc3Ryb25nIGRpcmVjdGlvblxuICogICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3RlZCBmb3IgdGhlIGJsb2NrIChkZWZhdWx0ID0gZ2xvYmFsIGRpcmVjdGlvbilcbiAqIEByZXR1cm4gICAgICAgICAgICAgICAgVHJ1ZSBpZiB0aGUgcmVzb2x2ZWQgZGlyZWN0aW9uIGlzIExUUlxuICovXG5mdW5jdGlvbiBpc0RpcmVjdGlvbkxUUihzdHIsIHN0cm9uZ0ZhbGxiYWNrKSB7XG4gIHJldHVybiBnZXREaXJlY3Rpb24oc3RyLCBzdHJvbmdGYWxsYmFjaykgPT09IFVuaWNvZGVCaWRpRGlyZWN0aW9uLkxUUjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgZ2V0RGlyZWN0aW9uKGFyZ3VtZW50cy4uLikgcmV0dXJucyBSVEwuXG4gKlxuICogQHBhcmFtIHN0ciAgICAgICAgICAgICBBIHRleHQgYmxvY2s7IGUuZy4gcGFyYWdyYXBoLCB0YWJsZSBjZWxsXG4gKiBAcGFyYW0gc3Ryb25nRmFsbGJhY2sgIEZhbGxiYWNrIGRpcmVjdGlvbiwgdXNlZCBpZiBubyBzdHJvbmcgZGlyZWN0aW9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIGRldGVjdGVkIGZvciB0aGUgYmxvY2sgKGRlZmF1bHQgPSBnbG9iYWwgZGlyZWN0aW9uKVxuICogQHJldHVybiAgICAgICAgICAgICAgICBUcnVlIGlmIHRoZSByZXNvbHZlZCBkaXJlY3Rpb24gaXMgUlRMXG4gKi9cbmZ1bmN0aW9uIGlzRGlyZWN0aW9uUlRMKHN0ciwgc3Ryb25nRmFsbGJhY2spIHtcbiAgcmV0dXJuIGdldERpcmVjdGlvbihzdHIsIHN0cm9uZ0ZhbGxiYWNrKSA9PT0gVW5pY29kZUJpZGlEaXJlY3Rpb24uUlRMO1xufVxuXG52YXIgVW5pY29kZUJpZGkgPSB7XG4gIGZpcnN0U3Ryb25nQ2hhcjogZmlyc3RTdHJvbmdDaGFyLFxuICBmaXJzdFN0cm9uZ0NoYXJEaXI6IGZpcnN0U3Ryb25nQ2hhckRpcixcbiAgcmVzb2x2ZUJsb2NrRGlyOiByZXNvbHZlQmxvY2tEaXIsXG4gIGdldERpcmVjdGlvbjogZ2V0RGlyZWN0aW9uLFxuICBpc0RpcmVjdGlvbkxUUjogaXNEaXJlY3Rpb25MVFIsXG4gIGlzRGlyZWN0aW9uUlRMOiBpc0RpcmVjdGlvblJUTFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBVbmljb2RlQmlkaTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0RW50aXR5SW5zdGFuY2VcbiAqIEBsZWdhY3lTZXJ2ZXJDYWxsYWJsZUluc3RhbmNlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG52YXIgUmVjb3JkID0gSW1tdXRhYmxlLlJlY29yZDtcblxuXG52YXIgRHJhZnRFbnRpdHlJbnN0YW5jZVJlY29yZCA9IFJlY29yZCh7XG4gIHR5cGU6ICdUT0tFTicsXG4gIG11dGFiaWxpdHk6ICdJTU1VVEFCTEUnLFxuICBkYXRhOiBPYmplY3Rcbn0pO1xuXG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIGEgZG9jdW1lbnQgZW50aXR5LCBjb25zaXN0aW5nIG9mIGEgYHR5cGVgIGFuZCByZWxldmFudFxuICogYGRhdGFgLCBtZXRhZGF0YSBhYm91dCB0aGUgZW50aXR5LlxuICpcbiAqIEZvciBpbnN0YW5jZSwgYSBcImxpbmtcIiBlbnRpdHkgbWlnaHQgcHJvdmlkZSBhIFVSSSwgYW5kIGEgXCJtZW50aW9uXCJcbiAqIGVudGl0eSBtaWdodCBwcm92aWRlIHRoZSBtZW50aW9uZWQgdXNlcidzIElELiBUaGVzZSBwaWVjZXMgb2YgZGF0YVxuICogbWF5IGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgdGhlIGVudGl0eSBhcyBwYXJ0IG9mIGEgQ29udGVudEJsb2NrIERPTVxuICogcmVwcmVzZW50YXRpb24uIEZvciBhIGxpbmssIHRoZSBkYXRhIHdvdWxkIGJlIHVzZWQgYXMgYW4gaHJlZiBmb3JcbiAqIHRoZSByZW5kZXJlZCBhbmNob3IuIEZvciBhIG1lbnRpb24sIHRoZSBJRCBjb3VsZCBiZSB1c2VkIHRvIHJldHJpZXZlXG4gKiBhIGhvdmVyY2FyZC5cbiAqL1xuXG52YXIgRHJhZnRFbnRpdHlJbnN0YW5jZSA9IGZ1bmN0aW9uIChfRHJhZnRFbnRpdHlJbnN0YW5jZVIpIHtcbiAgX2luaGVyaXRzKERyYWZ0RW50aXR5SW5zdGFuY2UsIF9EcmFmdEVudGl0eUluc3RhbmNlUik7XG5cbiAgZnVuY3Rpb24gRHJhZnRFbnRpdHlJbnN0YW5jZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJhZnRFbnRpdHlJbnN0YW5jZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0RyYWZ0RW50aXR5SW5zdGFuY2VSLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgRHJhZnRFbnRpdHlJbnN0YW5jZS5wcm90b3R5cGUuZ2V0VHlwZSA9IGZ1bmN0aW9uIGdldFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCd0eXBlJyk7XG4gIH07XG5cbiAgRHJhZnRFbnRpdHlJbnN0YW5jZS5wcm90b3R5cGUuZ2V0TXV0YWJpbGl0eSA9IGZ1bmN0aW9uIGdldE11dGFiaWxpdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdtdXRhYmlsaXR5Jyk7XG4gIH07XG5cbiAgRHJhZnRFbnRpdHlJbnN0YW5jZS5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uIGdldERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdkYXRhJyk7XG4gIH07XG5cbiAgcmV0dXJuIERyYWZ0RW50aXR5SW5zdGFuY2U7XG59KERyYWZ0RW50aXR5SW5zdGFuY2VSZWNvcmQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RW50aXR5SW5zdGFuY2U7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBCbG9ja1RyZWVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBmaW5kUmFuZ2VzSW1tdXRhYmxlID0gcmVxdWlyZSgnLi9maW5kUmFuZ2VzSW1tdXRhYmxlJyk7XG5cbnZhciBMaXN0ID0gSW1tdXRhYmxlLkxpc3QsXG4gICAgUmVwZWF0ID0gSW1tdXRhYmxlLlJlcGVhdCxcbiAgICBSZWNvcmQgPSBJbW11dGFibGUuUmVjb3JkO1xuXG5cbnZhciByZXR1cm5UcnVlID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG5cbnZhciBGSU5HRVJQUklOVF9ERUxJTUlURVIgPSAnLSc7XG5cbnZhciBkZWZhdWx0TGVhZlJhbmdlID0ge1xuICBzdGFydDogbnVsbCxcbiAgZW5kOiBudWxsXG59O1xuXG52YXIgTGVhZlJhbmdlID0gUmVjb3JkKGRlZmF1bHRMZWFmUmFuZ2UpO1xuXG52YXIgZGVmYXVsdERlY29yYXRvclJhbmdlID0ge1xuICBzdGFydDogbnVsbCxcbiAgZW5kOiBudWxsLFxuICBkZWNvcmF0b3JLZXk6IG51bGwsXG4gIGxlYXZlczogbnVsbFxufTtcblxudmFyIERlY29yYXRvclJhbmdlID0gUmVjb3JkKGRlZmF1bHREZWNvcmF0b3JSYW5nZSk7XG5cbnZhciBCbG9ja1RyZWUgPSB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIGJsb2NrIHRyZWUgZm9yIGEgZ2l2ZW4gQ29udGVudEJsb2NrL2RlY29yYXRvciBwYWlyLlxuICAgKi9cbiAgZ2VuZXJhdGU6IGZ1bmN0aW9uIGdlbmVyYXRlKGNvbnRlbnRTdGF0ZSwgYmxvY2ssIGRlY29yYXRvcikge1xuICAgIHZhciB0ZXh0TGVuZ3RoID0gYmxvY2suZ2V0TGVuZ3RoKCk7XG4gICAgaWYgKCF0ZXh0TGVuZ3RoKSB7XG4gICAgICByZXR1cm4gTGlzdC5vZihuZXcgRGVjb3JhdG9yUmFuZ2Uoe1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgZW5kOiAwLFxuICAgICAgICBkZWNvcmF0b3JLZXk6IG51bGwsXG4gICAgICAgIGxlYXZlczogTGlzdC5vZihuZXcgTGVhZlJhbmdlKHsgc3RhcnQ6IDAsIGVuZDogMCB9KSlcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICB2YXIgbGVhZlNldHMgPSBbXTtcbiAgICB2YXIgZGVjb3JhdGlvbnMgPSBkZWNvcmF0b3IgPyBkZWNvcmF0b3IuZ2V0RGVjb3JhdGlvbnMoYmxvY2ssIGNvbnRlbnRTdGF0ZSkgOiBMaXN0KFJlcGVhdChudWxsLCB0ZXh0TGVuZ3RoKSk7XG5cbiAgICB2YXIgY2hhcnMgPSBibG9jay5nZXRDaGFyYWN0ZXJMaXN0KCk7XG5cbiAgICBmaW5kUmFuZ2VzSW1tdXRhYmxlKGRlY29yYXRpb25zLCBhcmVFcXVhbCwgcmV0dXJuVHJ1ZSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgIGxlYWZTZXRzLnB1c2gobmV3IERlY29yYXRvclJhbmdlKHtcbiAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICBlbmQ6IGVuZCxcbiAgICAgICAgZGVjb3JhdG9yS2V5OiBkZWNvcmF0aW9ucy5nZXQoc3RhcnQpLFxuICAgICAgICBsZWF2ZXM6IGdlbmVyYXRlTGVhdmVzKGNoYXJzLnNsaWNlKHN0YXJ0LCBlbmQpLnRvTGlzdCgpLCBzdGFydClcbiAgICAgIH0pKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBMaXN0KGxlYWZTZXRzKTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiB0cmVlIG1hcC4gVGhpcyBhbGxvd3MgdXNcbiAgICogdG8gcmFwaWRseSBkZXRlcm1pbmUgd2hldGhlciBhIHRyZWUgaGFzIHVuZGVyZ29uZSBhIHNpZ25pZmljYW50XG4gICAqIHN0cnVjdHVyYWwgY2hhbmdlLlxuICAgKi9cbiAgZ2V0RmluZ2VycHJpbnQ6IGZ1bmN0aW9uIGdldEZpbmdlcnByaW50KHRyZWUpIHtcbiAgICByZXR1cm4gdHJlZS5tYXAoZnVuY3Rpb24gKGxlYWZTZXQpIHtcbiAgICAgIHZhciBkZWNvcmF0b3JLZXkgPSBsZWFmU2V0LmdldCgnZGVjb3JhdG9yS2V5Jyk7XG4gICAgICB2YXIgZmluZ2VycHJpbnRTdHJpbmcgPSBkZWNvcmF0b3JLZXkgIT09IG51bGwgPyBkZWNvcmF0b3JLZXkgKyAnLicgKyAobGVhZlNldC5nZXQoJ2VuZCcpIC0gbGVhZlNldC5nZXQoJ3N0YXJ0JykpIDogJyc7XG4gICAgICByZXR1cm4gJycgKyBmaW5nZXJwcmludFN0cmluZyArICcuJyArIGxlYWZTZXQuZ2V0KCdsZWF2ZXMnKS5zaXplO1xuICAgIH0pLmpvaW4oRklOR0VSUFJJTlRfREVMSU1JVEVSKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBMZWFmUmFuZ2UgcmVjb3JkcyBmb3IgYSBnaXZlbiBjaGFyYWN0ZXIgbGlzdC5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVMZWF2ZXMoY2hhcmFjdGVycywgb2Zmc2V0KSB7XG4gIHZhciBsZWF2ZXMgPSBbXTtcbiAgdmFyIGlubGluZVN0eWxlcyA9IGNoYXJhY3RlcnMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuZ2V0U3R5bGUoKTtcbiAgfSkudG9MaXN0KCk7XG4gIGZpbmRSYW5nZXNJbW11dGFibGUoaW5saW5lU3R5bGVzLCBhcmVFcXVhbCwgcmV0dXJuVHJ1ZSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICBsZWF2ZXMucHVzaChuZXcgTGVhZlJhbmdlKHtcbiAgICAgIHN0YXJ0OiBzdGFydCArIG9mZnNldCxcbiAgICAgIGVuZDogZW5kICsgb2Zmc2V0XG4gICAgfSkpO1xuICB9KTtcbiAgcmV0dXJuIExpc3QobGVhdmVzKTtcbn1cblxuZnVuY3Rpb24gYXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCbG9ja1RyZWU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldE5leHREZWxpbWl0ZXJCbG9ja0tleVxuICogQGZvcm1hdFxuICogXG4gKlxuICogVGhpcyBpcyB1bnN0YWJsZSBhbmQgbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBieVxuICogcHJvZHVjdGlvbiBzeXN0ZW1zLiBUaGlzIGZpbGUgbWF5IGJlIHVwZGF0ZS9yZW1vdmVkIHdpdGhvdXQgbm90aWNlLlxuICovXG5cbnZhciBDb250ZW50QmxvY2tOb2RlID0gcmVxdWlyZSgnLi9Db250ZW50QmxvY2tOb2RlJyk7XG5cbnZhciBnZXROZXh0RGVsaW1pdGVyQmxvY2tLZXkgPSBmdW5jdGlvbiBnZXROZXh0RGVsaW1pdGVyQmxvY2tLZXkoYmxvY2ssIGJsb2NrTWFwKSB7XG4gIHZhciBpc0V4cGVyaW1lbnRhbFRyZWVCbG9jayA9IGJsb2NrIGluc3RhbmNlb2YgQ29udGVudEJsb2NrTm9kZTtcblxuICBpZiAoIWlzRXhwZXJpbWVudGFsVHJlZUJsb2NrKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbmV4dFNpYmxpbmdLZXkgPSBibG9jay5nZXROZXh0U2libGluZ0tleSgpO1xuXG4gIGlmIChuZXh0U2libGluZ0tleSkge1xuICAgIHJldHVybiBuZXh0U2libGluZ0tleTtcbiAgfVxuXG4gIHZhciBwYXJlbnQgPSBibG9jay5nZXRQYXJlbnRLZXkoKTtcblxuICBpZiAoIXBhcmVudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIG5leHROb25EZXNjZW5kYW50QmxvY2sgPSBibG9ja01hcC5nZXQocGFyZW50KTtcbiAgd2hpbGUgKG5leHROb25EZXNjZW5kYW50QmxvY2sgJiYgIW5leHROb25EZXNjZW5kYW50QmxvY2suZ2V0TmV4dFNpYmxpbmdLZXkoKSkge1xuICAgIHZhciBwYXJlbnRLZXkgPSBuZXh0Tm9uRGVzY2VuZGFudEJsb2NrLmdldFBhcmVudEtleSgpO1xuICAgIG5leHROb25EZXNjZW5kYW50QmxvY2sgPSBwYXJlbnRLZXkgPyBibG9ja01hcC5nZXQocGFyZW50S2V5KSA6IG51bGw7XG4gIH1cblxuICBpZiAoIW5leHROb25EZXNjZW5kYW50QmxvY2spIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBuZXh0Tm9uRGVzY2VuZGFudEJsb2NrLmdldE5leHRTaWJsaW5nS2V5KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5leHREZWxpbWl0ZXJCbG9ja0tleTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGluc2VydEludG9MaXN0XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTWFpbnRhaW4gcGVyc2lzdGVuY2UgZm9yIHRhcmdldCBsaXN0IHdoZW4gYXBwZW5kaW5nIGFuZCBwcmVwZW5kaW5nLlxuICovXG5mdW5jdGlvbiBpbnNlcnRJbnRvTGlzdCh0YXJnZXRMaXN0LCB0b0luc2VydCwgb2Zmc2V0KSB7XG4gIGlmIChvZmZzZXQgPT09IHRhcmdldExpc3QuY291bnQoKSkge1xuICAgIHRvSW5zZXJ0LmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHRhcmdldExpc3QgPSB0YXJnZXRMaXN0LnB1c2goYyk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgdG9JbnNlcnQucmV2ZXJzZSgpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHRhcmdldExpc3QgPSB0YXJnZXRMaXN0LnVuc2hpZnQoYyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGhlYWQgPSB0YXJnZXRMaXN0LnNsaWNlKDAsIG9mZnNldCk7XG4gICAgdmFyIHRhaWwgPSB0YXJnZXRMaXN0LnNsaWNlKG9mZnNldCk7XG4gICAgdGFyZ2V0TGlzdCA9IGhlYWQuY29uY2F0KHRvSW5zZXJ0LCB0YWlsKS50b0xpc3QoKTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0TGlzdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRJbnRvTGlzdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHJlbW92ZUVudGl0aWVzQXRFZGdlc1xuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2hhcmFjdGVyTWV0YWRhdGEgPSByZXF1aXJlKCcuL0NoYXJhY3Rlck1ldGFkYXRhJyk7XG5cbnZhciBmaW5kUmFuZ2VzSW1tdXRhYmxlID0gcmVxdWlyZSgnLi9maW5kUmFuZ2VzSW1tdXRhYmxlJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbmZ1bmN0aW9uIHJlbW92ZUVudGl0aWVzQXRFZGdlcyhjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlKSB7XG4gIHZhciBibG9ja01hcCA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja01hcCgpO1xuICB2YXIgZW50aXR5TWFwID0gY29udGVudFN0YXRlLmdldEVudGl0eU1hcCgpO1xuXG4gIHZhciB1cGRhdGVkQmxvY2tzID0ge307XG5cbiAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIHN0YXJ0QmxvY2sgPSBibG9ja01hcC5nZXQoc3RhcnRLZXkpO1xuICB2YXIgdXBkYXRlZFN0YXJ0ID0gcmVtb3ZlRm9yQmxvY2soZW50aXR5TWFwLCBzdGFydEJsb2NrLCBzdGFydE9mZnNldCk7XG5cbiAgaWYgKHVwZGF0ZWRTdGFydCAhPT0gc3RhcnRCbG9jaykge1xuICAgIHVwZGF0ZWRCbG9ja3Nbc3RhcnRLZXldID0gdXBkYXRlZFN0YXJ0O1xuICB9XG5cbiAgdmFyIGVuZEtleSA9IHNlbGVjdGlvblN0YXRlLmdldEVuZEtleSgpO1xuICB2YXIgZW5kT2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kT2Zmc2V0KCk7XG4gIHZhciBlbmRCbG9jayA9IGJsb2NrTWFwLmdldChlbmRLZXkpO1xuICBpZiAoc3RhcnRLZXkgPT09IGVuZEtleSkge1xuICAgIGVuZEJsb2NrID0gdXBkYXRlZFN0YXJ0O1xuICB9XG5cbiAgdmFyIHVwZGF0ZWRFbmQgPSByZW1vdmVGb3JCbG9jayhlbnRpdHlNYXAsIGVuZEJsb2NrLCBlbmRPZmZzZXQpO1xuXG4gIGlmICh1cGRhdGVkRW5kICE9PSBlbmRCbG9jaykge1xuICAgIHVwZGF0ZWRCbG9ja3NbZW5kS2V5XSA9IHVwZGF0ZWRFbmQ7XG4gIH1cblxuICBpZiAoIU9iamVjdC5rZXlzKHVwZGF0ZWRCbG9ja3MpLmxlbmd0aCkge1xuICAgIHJldHVybiBjb250ZW50U3RhdGUuc2V0KCdzZWxlY3Rpb25BZnRlcicsIHNlbGVjdGlvblN0YXRlKTtcbiAgfVxuXG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiBibG9ja01hcC5tZXJnZSh1cGRhdGVkQmxvY2tzKSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFJlbW92YWxSYW5nZShjaGFyYWN0ZXJzLCBrZXksIG9mZnNldCkge1xuICB2YXIgcmVtb3ZhbFJhbmdlO1xuICBmaW5kUmFuZ2VzSW1tdXRhYmxlKGNoYXJhY3RlcnMsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEuZ2V0RW50aXR5KCkgPT09IGIuZ2V0RW50aXR5KCk7XG4gIH0sIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0RW50aXR5KCkgPT09IGtleTtcbiAgfSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoc3RhcnQgPD0gb2Zmc2V0ICYmIGVuZCA+PSBvZmZzZXQpIHtcbiAgICAgIHJlbW92YWxSYW5nZSA9IHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgIH1cbiAgfSk7XG4gICEodHlwZW9mIHJlbW92YWxSYW5nZSA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlbW92YWwgcmFuZ2UgbXVzdCBleGlzdCB3aXRoaW4gY2hhcmFjdGVyIGxpc3QuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcmVtb3ZhbFJhbmdlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGb3JCbG9jayhlbnRpdHlNYXAsIGJsb2NrLCBvZmZzZXQpIHtcbiAgdmFyIGNoYXJzID0gYmxvY2suZ2V0Q2hhcmFjdGVyTGlzdCgpO1xuICB2YXIgY2hhckJlZm9yZSA9IG9mZnNldCA+IDAgPyBjaGFycy5nZXQob2Zmc2V0IC0gMSkgOiB1bmRlZmluZWQ7XG4gIHZhciBjaGFyQWZ0ZXIgPSBvZmZzZXQgPCBjaGFycy5jb3VudCgpID8gY2hhcnMuZ2V0KG9mZnNldCkgOiB1bmRlZmluZWQ7XG4gIHZhciBlbnRpdHlCZWZvcmVDdXJzb3IgPSBjaGFyQmVmb3JlID8gY2hhckJlZm9yZS5nZXRFbnRpdHkoKSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVudGl0eUFmdGVyQ3Vyc29yID0gY2hhckFmdGVyID8gY2hhckFmdGVyLmdldEVudGl0eSgpIDogdW5kZWZpbmVkO1xuXG4gIGlmIChlbnRpdHlBZnRlckN1cnNvciAmJiBlbnRpdHlBZnRlckN1cnNvciA9PT0gZW50aXR5QmVmb3JlQ3Vyc29yKSB7XG4gICAgdmFyIGVudGl0eSA9IGVudGl0eU1hcC5fX2dldChlbnRpdHlBZnRlckN1cnNvcik7XG4gICAgaWYgKGVudGl0eS5nZXRNdXRhYmlsaXR5KCkgIT09ICdNVVRBQkxFJykge1xuICAgICAgdmFyIF9nZXRSZW1vdmFsUmFuZ2UgPSBnZXRSZW1vdmFsUmFuZ2UoY2hhcnMsIGVudGl0eUFmdGVyQ3Vyc29yLCBvZmZzZXQpLFxuICAgICAgICAgIHN0YXJ0ID0gX2dldFJlbW92YWxSYW5nZS5zdGFydCxcbiAgICAgICAgICBlbmQgPSBfZ2V0UmVtb3ZhbFJhbmdlLmVuZDtcblxuICAgICAgdmFyIGN1cnJlbnQ7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgY3VycmVudCA9IGNoYXJzLmdldChzdGFydCk7XG4gICAgICAgIGNoYXJzID0gY2hhcnMuc2V0KHN0YXJ0LCBDaGFyYWN0ZXJNZXRhZGF0YS5hcHBseUVudGl0eShjdXJyZW50LCBudWxsKSk7XG4gICAgICAgIHN0YXJ0Kys7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmxvY2suc2V0KCdjaGFyYWN0ZXJMaXN0JywgY2hhcnMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBibG9jaztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZW1vdmVFbnRpdGllc0F0RWRnZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSByYW5kb21pemVCbG9ja01hcEtleXNcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENvbnRlbnRCbG9ja05vZGUgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9ja05vZGUnKTtcbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIGdlbmVyYXRlUmFuZG9tS2V5ID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVJhbmRvbUtleScpO1xuXG52YXIgT3JkZXJlZE1hcCA9IEltbXV0YWJsZS5PcmRlcmVkTWFwO1xuXG5cbnZhciByYW5kb21pemVDb250ZW50QmxvY2tOb2RlS2V5cyA9IGZ1bmN0aW9uIHJhbmRvbWl6ZUNvbnRlbnRCbG9ja05vZGVLZXlzKGJsb2NrTWFwKSB7XG4gIHZhciBuZXdLZXlzUmVmID0ge307XG5cbiAgLy8gd2Uga2VlcCB0cmFjayBvZiByb290IGJsb2NrcyBpbiBvcmRlciB0byB1cGRhdGUgc3Vic2VxdWVudCBzaWJsaW5nIGxpbmtzXG4gIHZhciBsYXN0Um9vdEJsb2NrID0gdm9pZCAwO1xuXG4gIHJldHVybiBPcmRlcmVkTWFwKGJsb2NrTWFwLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKGJsb2NrTWFwU3RhdGUpIHtcbiAgICBibG9ja01hcFN0YXRlLmZvckVhY2goZnVuY3Rpb24gKGJsb2NrLCBpbmRleCkge1xuICAgICAgdmFyIG9sZEtleSA9IGJsb2NrLmdldEtleSgpO1xuICAgICAgdmFyIG5leHRLZXkgPSBibG9jay5nZXROZXh0U2libGluZ0tleSgpO1xuICAgICAgdmFyIHByZXZLZXkgPSBibG9jay5nZXRQcmV2U2libGluZ0tleSgpO1xuICAgICAgdmFyIGNoaWxkcmVuS2V5cyA9IGJsb2NrLmdldENoaWxkS2V5cygpO1xuICAgICAgdmFyIHBhcmVudEtleSA9IGJsb2NrLmdldFBhcmVudEtleSgpO1xuXG4gICAgICAvLyBuZXcga2V5IHRoYXQgd2Ugd2lsbCB1c2UgdG8gYnVpbGQgbGlua2luZ1xuICAgICAgdmFyIGtleSA9IGdlbmVyYXRlUmFuZG9tS2V5KCk7XG5cbiAgICAgIC8vIHdlIHdpbGwgYWRkIGl0IGhlcmUgdG8gcmUtdXNlIGl0IGxhdGVyXG4gICAgICBuZXdLZXlzUmVmW29sZEtleV0gPSBrZXk7XG5cbiAgICAgIGlmIChuZXh0S2V5KSB7XG4gICAgICAgIHZhciBuZXh0QmxvY2sgPSBibG9ja01hcFN0YXRlLmdldChuZXh0S2V5KTtcbiAgICAgICAgaWYgKG5leHRCbG9jaykge1xuICAgICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW25leHRLZXksICdwcmV2U2libGluZyddLCBrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHRoaXMgY2FuIGhhcHBlbiB3aGVuIGdlbmVyYXRpbmcgcmFuZG9tIGtleXMgZm9yIGZyYWdtZW50c1xuICAgICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW29sZEtleSwgJ25leHRTaWJsaW5nJ10sIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmV2S2V5KSB7XG4gICAgICAgIHZhciBwcmV2QmxvY2sgPSBibG9ja01hcFN0YXRlLmdldChwcmV2S2V5KTtcbiAgICAgICAgaWYgKHByZXZCbG9jaykge1xuICAgICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW3ByZXZLZXksICduZXh0U2libGluZyddLCBrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHRoaXMgY2FuIGhhcHBlbiB3aGVuIGdlbmVyYXRpbmcgcmFuZG9tIGtleXMgZm9yIGZyYWdtZW50c1xuICAgICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW29sZEtleSwgJ3ByZXZTaWJsaW5nJ10sIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnRLZXkgJiYgYmxvY2tNYXBTdGF0ZS5nZXQocGFyZW50S2V5KSkge1xuICAgICAgICB2YXIgcGFyZW50QmxvY2sgPSBibG9ja01hcFN0YXRlLmdldChwYXJlbnRLZXkpO1xuICAgICAgICB2YXIgcGFyZW50Q2hpbGRyZW5MaXN0ID0gcGFyZW50QmxvY2suZ2V0Q2hpbGRLZXlzKCk7XG4gICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW3BhcmVudEtleSwgJ2NoaWxkcmVuJ10sIHBhcmVudENoaWxkcmVuTGlzdC5zZXQocGFyZW50Q2hpbGRyZW5MaXN0LmluZGV4T2YoYmxvY2suZ2V0S2V5KCkpLCBrZXkpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGJsb2NrcyB3aWxsIHRoZW4gYmUgdHJlYXRlZCBhcyByb290IGJsb2NrIG5vZGVzXG4gICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW29sZEtleSwgJ3BhcmVudCddLCBudWxsKTtcblxuICAgICAgICBpZiAobGFzdFJvb3RCbG9jaykge1xuICAgICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW2xhc3RSb290QmxvY2suZ2V0S2V5KCksICduZXh0U2libGluZyddLCBrZXkpO1xuICAgICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW29sZEtleSwgJ3ByZXZTaWJsaW5nJ10sIG5ld0tleXNSZWZbbGFzdFJvb3RCbG9jay5nZXRLZXkoKV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdFJvb3RCbG9jayA9IGJsb2NrTWFwU3RhdGUuZ2V0KG9sZEtleSk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkcmVuS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZEtleSkge1xuICAgICAgICB2YXIgY2hpbGRCbG9jayA9IGJsb2NrTWFwU3RhdGUuZ2V0KGNoaWxkS2V5KTtcbiAgICAgICAgaWYgKGNoaWxkQmxvY2spIHtcbiAgICAgICAgICBibG9ja01hcFN0YXRlLnNldEluKFtjaGlsZEtleSwgJ3BhcmVudCddLCBrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW29sZEtleSwgJ2NoaWxkcmVuJ10sIGJsb2NrLmdldENoaWxkS2V5cygpLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZCAhPT0gY2hpbGRLZXk7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSkudG9BcnJheSgpLm1hcChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICByZXR1cm4gW25ld0tleXNSZWZbYmxvY2suZ2V0S2V5KCldLCBibG9jay5zZXQoJ2tleScsIG5ld0tleXNSZWZbYmxvY2suZ2V0S2V5KCldKV07XG4gIH0pKTtcbn07XG5cbnZhciByYW5kb21pemVDb250ZW50QmxvY2tLZXlzID0gZnVuY3Rpb24gcmFuZG9taXplQ29udGVudEJsb2NrS2V5cyhibG9ja01hcCkge1xuICByZXR1cm4gT3JkZXJlZE1hcChibG9ja01hcC50b0FycmF5KCkubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgIHZhciBrZXkgPSBnZW5lcmF0ZVJhbmRvbUtleSgpO1xuICAgIHJldHVybiBba2V5LCBibG9jay5zZXQoJ2tleScsIGtleSldO1xuICB9KSk7XG59O1xuXG52YXIgcmFuZG9taXplQmxvY2tNYXBLZXlzID0gZnVuY3Rpb24gcmFuZG9taXplQmxvY2tNYXBLZXlzKGJsb2NrTWFwKSB7XG4gIHZhciBpc1RyZWVCYXNlZEJsb2NrTWFwID0gYmxvY2tNYXAuZmlyc3QoKSBpbnN0YW5jZW9mIENvbnRlbnRCbG9ja05vZGU7XG5cbiAgaWYgKCFpc1RyZWVCYXNlZEJsb2NrTWFwKSB7XG4gICAgcmV0dXJuIHJhbmRvbWl6ZUNvbnRlbnRCbG9ja0tleXMoYmxvY2tNYXApO1xuICB9XG5cbiAgcmV0dXJuIHJhbmRvbWl6ZUNvbnRlbnRCbG9ja05vZGVLZXlzKGJsb2NrTWFwKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmFuZG9taXplQmxvY2tNYXBLZXlzOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jYW5Vc2VET00gPSB1bmRlZmluZWQ7XG5cbnZhciBfZXhlbnYgPSByZXF1aXJlKFwiZXhlbnZcIik7XG5cbnZhciBfZXhlbnYyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlbnYpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgRUUgPSBfZXhlbnYyLmRlZmF1bHQ7XG5cbnZhciBTYWZlSFRNTEVsZW1lbnQgPSBFRS5jYW5Vc2VET00gPyB3aW5kb3cuSFRNTEVsZW1lbnQgOiB7fTtcblxudmFyIGNhblVzZURPTSA9IGV4cG9ydHMuY2FuVXNlRE9NID0gRUUuY2FuVXNlRE9NO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTYWZlSFRNTEVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFzc2VydE5vZGVMaXN0ID0gYXNzZXJ0Tm9kZUxpc3Q7XG5leHBvcnRzLnNldEVsZW1lbnQgPSBzZXRFbGVtZW50O1xuZXhwb3J0cy52YWxpZGF0ZUVsZW1lbnQgPSB2YWxpZGF0ZUVsZW1lbnQ7XG5leHBvcnRzLmhpZGUgPSBoaWRlO1xuZXhwb3J0cy5zaG93ID0gc2hvdztcbmV4cG9ydHMuZG9jdW1lbnROb3RSZWFkeU9yU1NSVGVzdGluZyA9IGRvY3VtZW50Tm90UmVhZHlPclNTUlRlc3Rpbmc7XG5leHBvcnRzLnJlc2V0Rm9yVGVzdGluZyA9IHJlc2V0Rm9yVGVzdGluZztcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZShcIndhcm5pbmdcIik7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGdsb2JhbEVsZW1lbnQgPSBudWxsO1xuXG5mdW5jdGlvbiBhc3NlcnROb2RlTGlzdChub2RlTGlzdCwgc2VsZWN0b3IpIHtcbiAgaWYgKCFub2RlTGlzdCB8fCAhbm9kZUxpc3QubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwicmVhY3QtbW9kYWw6IE5vIGVsZW1lbnRzIHdlcmUgZm91bmQgZm9yIHNlbGVjdG9yIFwiICsgc2VsZWN0b3IgKyBcIi5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0RWxlbWVudChlbGVtZW50KSB7XG4gIHZhciB1c2VFbGVtZW50ID0gZWxlbWVudDtcbiAgaWYgKHR5cGVvZiB1c2VFbGVtZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh1c2VFbGVtZW50KTtcbiAgICBhc3NlcnROb2RlTGlzdChlbCwgdXNlRWxlbWVudCk7XG4gICAgdXNlRWxlbWVudCA9IFwibGVuZ3RoXCIgaW4gZWwgPyBlbFswXSA6IGVsO1xuICB9XG4gIGdsb2JhbEVsZW1lbnQgPSB1c2VFbGVtZW50IHx8IGdsb2JhbEVsZW1lbnQ7XG4gIHJldHVybiBnbG9iYWxFbGVtZW50O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUVsZW1lbnQoYXBwRWxlbWVudCkge1xuICBpZiAoIWFwcEVsZW1lbnQgJiYgIWdsb2JhbEVsZW1lbnQpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCBbXCJyZWFjdC1tb2RhbDogQXBwIGVsZW1lbnQgaXMgbm90IGRlZmluZWQuXCIsIFwiUGxlYXNlIHVzZSBgTW9kYWwuc2V0QXBwRWxlbWVudChlbClgIG9yIHNldCBgYXBwRWxlbWVudD17ZWx9YC5cIiwgXCJUaGlzIGlzIG5lZWRlZCBzbyBzY3JlZW4gcmVhZGVycyBkb24ndCBzZWUgbWFpbiBjb250ZW50XCIsIFwid2hlbiBtb2RhbCBpcyBvcGVuZWQuIEl0IGlzIG5vdCByZWNvbW1lbmRlZCwgYnV0IHlvdSBjYW4gb3B0LW91dFwiLCBcImJ5IHNldHRpbmcgYGFyaWFIaWRlQXBwPXtmYWxzZX1gLlwiXS5qb2luKFwiIFwiKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaGlkZShhcHBFbGVtZW50KSB7XG4gIGlmICh2YWxpZGF0ZUVsZW1lbnQoYXBwRWxlbWVudCkpIHtcbiAgICAoYXBwRWxlbWVudCB8fCBnbG9iYWxFbGVtZW50KS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2hvdyhhcHBFbGVtZW50KSB7XG4gIGlmICh2YWxpZGF0ZUVsZW1lbnQoYXBwRWxlbWVudCkpIHtcbiAgICAoYXBwRWxlbWVudCB8fCBnbG9iYWxFbGVtZW50KS5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkb2N1bWVudE5vdFJlYWR5T3JTU1JUZXN0aW5nKCkge1xuICBnbG9iYWxFbGVtZW50ID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gcmVzZXRGb3JUZXN0aW5nKCkge1xuICBnbG9iYWxFbGVtZW50ID0gbnVsbDtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZpbmRUYWJiYWJsZURlc2NlbmRhbnRzO1xuLyohXG4gKiBBZGFwdGVkIGZyb20galF1ZXJ5IFVJIGNvcmVcbiAqXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMTQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2NhdGVnb3J5L3VpLWNvcmUvXG4gKi9cblxudmFyIHRhYmJhYmxlTm9kZSA9IC9pbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9ufG9iamVjdC87XG5cbmZ1bmN0aW9uIGhpZGVzQ29udGVudHMoZWxlbWVudCkge1xuICB2YXIgemVyb1NpemUgPSBlbGVtZW50Lm9mZnNldFdpZHRoIDw9IDAgJiYgZWxlbWVudC5vZmZzZXRIZWlnaHQgPD0gMDtcblxuICAvLyBJZiB0aGUgbm9kZSBpcyBlbXB0eSwgdGhpcyBpcyBnb29kIGVub3VnaFxuICBpZiAoemVyb1NpemUgJiYgIWVsZW1lbnQuaW5uZXJIVE1MKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBPdGhlcndpc2Ugd2UgbmVlZCB0byBjaGVjayBzb21lIHN0eWxlc1xuICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgcmV0dXJuIHplcm9TaXplID8gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShcIm92ZXJmbG93XCIpICE9PSBcInZpc2libGVcIiA6IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJkaXNwbGF5XCIpID09IFwibm9uZVwiO1xufVxuXG5mdW5jdGlvbiB2aXNpYmxlKGVsZW1lbnQpIHtcbiAgdmFyIHBhcmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICB3aGlsZSAocGFyZW50RWxlbWVudCkge1xuICAgIGlmIChwYXJlbnRFbGVtZW50ID09PSBkb2N1bWVudC5ib2R5KSBicmVhaztcbiAgICBpZiAoaGlkZXNDb250ZW50cyhwYXJlbnRFbGVtZW50KSkgcmV0dXJuIGZhbHNlO1xuICAgIHBhcmVudEVsZW1lbnQgPSBwYXJlbnRFbGVtZW50LnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGZvY3VzYWJsZShlbGVtZW50LCBpc1RhYkluZGV4Tm90TmFOKSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgdmFyIHJlcyA9IHRhYmJhYmxlTm9kZS50ZXN0KG5vZGVOYW1lKSAmJiAhZWxlbWVudC5kaXNhYmxlZCB8fCAobm9kZU5hbWUgPT09IFwiYVwiID8gZWxlbWVudC5ocmVmIHx8IGlzVGFiSW5kZXhOb3ROYU4gOiBpc1RhYkluZGV4Tm90TmFOKTtcbiAgcmV0dXJuIHJlcyAmJiB2aXNpYmxlKGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiB0YWJiYWJsZShlbGVtZW50KSB7XG4gIHZhciB0YWJJbmRleCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIik7XG4gIGlmICh0YWJJbmRleCA9PT0gbnVsbCkgdGFiSW5kZXggPSB1bmRlZmluZWQ7XG4gIHZhciBpc1RhYkluZGV4TmFOID0gaXNOYU4odGFiSW5kZXgpO1xuICByZXR1cm4gKGlzVGFiSW5kZXhOYU4gfHwgdGFiSW5kZXggPj0gMCkgJiYgZm9jdXNhYmxlKGVsZW1lbnQsICFpc1RhYkluZGV4TmFOKTtcbn1cblxuZnVuY3Rpb24gZmluZFRhYmJhYmxlRGVzY2VuZGFudHMoZWxlbWVudCkge1xuICByZXR1cm4gW10uc2xpY2UuY2FsbChlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqXCIpLCAwKS5maWx0ZXIodGFiYmFibGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9Nb2RhbCA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvTW9kYWxcIik7XG5cbnZhciBfTW9kYWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTW9kYWwpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfTW9kYWwyLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL0hlYWRlci5qcyc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vRm9vdGVyLmpzJztcbmltcG9ydCBKb2JzUGFnZSBmcm9tICcuLi9qb2JzL0pvYnNQYWdlLmpzJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmNsYXNzIExvZ2luIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKVxuICAgICAgICB0aGlzLnN1Ym1pdExvZ2luRm9ybSA9IHRoaXMuc3VibWl0TG9naW5Gb3JtLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlRW1haWxDaGFuZ2UgPSB0aGlzLmhhbmRsZUVtYWlsQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlUGFzc3dvcmRDaGFuZ2UgPSB0aGlzLmhhbmRsZVBhc3N3b3JkQ2hhbmdlLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGVtYWlsOiBcIlwiLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IFwiXCIsXG4gICAgICAgICAgICByZXNwb25zZURhdGE6IHt9LFxuICAgICAgICAgICAgcmVkaXJlY3RUb0Rhc2hib2FyZDogZmFsc2VcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgc3VibWl0TG9naW5Gb3JtKGUpIHtcbiAgICAgICAgY29uc3QgbG9naW5FbmRwb2ludCA9ICdodHRwOi8vMTI3LjAuMC4xOjgwMDAvdG9rZW4tYXV0aC8nO1xuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBheGlvcyh7XG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgICAgIHVybDogbG9naW5FbmRwb2ludCwgXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiB0aGlzLnN0YXRlLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogdGhpcy5zdGF0ZS5wYXNzd29yZFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNwb25zZVR5cGU6ICdqc29uJ1xuICAgICAgICB9KVxuICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4geyBcbiAgIFxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VG9EYXNoYm9hcmQ6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VEYXRhOiByZXNwb25zZS5kYXRhXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Jlc3BvbnNlVG9rZW4nLCByZXNwb25zZS5kYXRhLnRva2VuKTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncmVzcG9uc2VFbWFpbCcsIHJlc3BvbnNlLmRhdGEudXNlci5lbWFpbCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5zdGF0ZS5yZXNwb25zZURhdGEpO1xuICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gPFJlZGlyZWN0IHRvPScvZW1wbG95ZXJfZGFzaGJvYXJkJy8+O1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0aGlzIGlzIGFuIGVycm9yIHlvXCIsIGVycm9yKTtcbiAgICAgICAgICB9KVxuICAgIH1cblxuICAgIGhhbmRsZUVtYWlsQ2hhbmdlKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGVtYWlsOiBlLnRhcmdldC52YWx1ZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoYW5kbGVQYXNzd29yZENoYW5nZShlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBwYXNzd29yZDogZS50YXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5yZWRpcmVjdFRvRGFzaGJvYXJkKSB7XG4gICAgICAgICAgICByZXR1cm4gPFJlZGlyZWN0IHRvPScvZW1wbG95ZXJfZGFzaGJvYXJkJy8+XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICggICAgICAgICBcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPSdsb2dpbi13cmFwcGVyJz5cbiAgICAgICAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuc3VibWl0TG9naW5Gb3JtfSBpZD1cImxvZ2luLWZvcm1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJsb2dpbi1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+TG9naW48L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwibG9naW4tYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImVtYWlsX2ZpZWxkXCI+RW1haWw8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImVtYWlsXCIgaWQ9XCJlbWFpbF9maWVsZFwiIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUVtYWlsQ2hhbmdlfSBjbGFzc05hbWU9XCJsb2dpbi1pbnB1dCBsb2dpbi1pbnB1dC1vbmVcIi8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJwYXNzd29yZF9maWVsZFwiPlBhc3N3b3JkPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIGlkPVwicGFzc3dvcmRfZmllbGRcIiBvbkNoYW5nZT17dGhpcy5oYW5kbGVQYXNzd29yZENoYW5nZX0gY2xhc3NOYW1lPVwibG9naW4taW5wdXQgbG9naW4taW5wdXQtdHdvXCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIGlkPVwibG9naW4tc3VibWl0XCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IExvZ2luOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4vSGVhZGVyLmpzJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi9Gb290ZXIuanMnO1xuaW1wb3J0IEpvYnNQYWdlIGZyb20gJy4uL2pvYnMvSm9ic1BhZ2UuanMnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuY2xhc3MgUmVnaXN0ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuc3VibWl0UmVnaXN0ZXJGb3JtID0gdGhpcy5zdWJtaXRSZWdpc3RlckZvcm0uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVGaXJzdE5hbWVDaGFuZ2UgPSAgIHRoaXMuaGFuZGxlRmlyc3ROYW1lQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlTGFzdE5hbWVDaGFuZ2UgPSB0aGlzLmhhbmRsZUxhc3ROYW1lQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlRW1haWxDaGFuZ2UgPSB0aGlzLmhhbmRsZUVtYWlsQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlUGFzc3dvcmRDaGFuZ2UgPSB0aGlzLmhhbmRsZVBhc3N3b3JkQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlVXNlclR5cGVFbXBsb3llZSA9IHRoaXMuaGFuZGxlVXNlclR5cGVFbXBsb3llZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZVVzZXJUeXBlRW1wbG95ZXIgPSB0aGlzLmhhbmRsZVVzZXJUeXBlRW1wbG95ZXIuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZmlyc3RfbmFtZTogXCJcIixcbiAgICAgICAgICAgIGxhc3RfbmFtZTogXCJcIixcbiAgICAgICAgICAgIGVtYWlsOiBcIlwiLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IFwiXCIsXG4gICAgICAgICAgICB1c2VyX3R5cGU6IFwiXCIsXG4gICAgICAgICAgICByZWRpcmVjdFRvRGFzaGJvYXJkOiBmYWxzZVxuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdWJtaXRSZWdpc3RlckZvcm0oZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IGNyZWF0ZVVzZXJFbmRwb2ludCA9IFwiaHR0cDovLzEyNy4wLjAuMTo4MDAwL2F1dGhlbnRpY2F0ZS91c2Vycy9cIjtcblxuICAgICAgICBheGlvcy5kZWZhdWx0cy54c3JmQ29va2llTmFtZSA9ICdjc3JmdG9rZW4nO1xuICAgICAgICBheGlvcy5kZWZhdWx0cy54c3JmSGVhZGVyTmFtZSA9ICdYLUNTUkZUb2tlbic7XG5cblxuICAgICAgICBpZiAoICF0aGlzLnN0YXRlLmVtYWlsICkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJlbWFpbCBjYW5ub3QgYmUgZW1wdHlcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc3RhdGUucGFzc3dvcmQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJcIik7XG4gICAgICAgIH1cblxuICAgICBcbiAgICAgICAgXG5cbiAgICAgICAgYXhpb3Moe1xuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICB1cmw6IGNyZWF0ZVVzZXJFbmRwb2ludCwgXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0X25hbWU6IHRoaXMuc3RhdGUuZmlyc3RfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdF9uYW1lOiB0aGlzLnN0YXRlLmxhc3RfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IHRoaXMuc3RhdGUuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLnN0YXRlLnBhc3N3b3JkLFxuICAgICAgICAgICAgICAgICAgICB1c2VyX3R5cGU6IHRoaXMuc3RhdGUudXNlcl90eXBlXG4gICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCByZXNwb25zZSA9PiB7IFxuICAgXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDEpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImdvb2QgZW1haWwgYW5kIHBhc3N3b3JkXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFRvRGFzaGJvYXJkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiA8UmVkaXJlY3QgdG89Jy9lbXBsb3llcl9kYXNoYm9hcmQnLz5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBhbiBlcnJvciB5b1wiLCBlcnJvcik7XG4gICAgICAgICAgfSlcbiAgICB9XG5cbiAgICBoYW5kbGVGaXJzdE5hbWVDaGFuZ2UoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGZpcnN0X25hbWU6IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgaGFuZGxlTGFzdE5hbWVDaGFuZ2UoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxhc3RfbmFtZTogZS50YXJnZXQudmFsdWVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBoYW5kbGVFbWFpbENoYW5nZShlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZW1haWw6IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgaGFuZGxlUGFzc3dvcmRDaGFuZ2UoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHBhc3N3b3JkOiBlLnRhcmdldC52YWx1ZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGhhbmRsZVVzZXJUeXBlRW1wbG95ZWUoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHVzZXJfdHlwZTogXCJlbXBsb3llZVwiXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgaGFuZGxlVXNlclR5cGVFbXBsb3llcihlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdXNlcl90eXBlOiBcImVtbXBsb3llclwiXG4gICAgICAgIH0pXG4gICAgfVxuXG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnJlZGlyZWN0VG9EYXNoYm9hcmQpIHtcbiAgICAgICAgICAgIHJldHVybiA8UmVkaXJlY3QgdG89Jy9lbXBsb3llcl9kYXNoYm9hcmQnLz5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBpZD0ncmVnaXN0ZXJfd3JhcHBlcic+XG4gICAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9eyB0aGlzLnN1Ym1pdFJlZ2lzdGVyRm9ybSB9IGlkPVwicmVnaXN0ZXItZm9ybVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwicmVnaXN0ZXItaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDE+UmVnaXN0ZXI8L2gxPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cInJlZ2lzdGVyLWJvZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiaWRfZmlyc3RfbmFtZVwiPkZpcnN0IE5hbWU8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJmaXJzdF9uYW1lXCIgaWQ9XCJpZF9maXJzdF9uYW1lXCIgY2xhc3NOYW1lPVwicmVnaXN0ZXItaW5wdXRcIiBtYXhsZW5ndGg9XCIzMlwiIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUZpcnN0TmFtZUNoYW5nZX0gdmFsdWU9e3RoaXMuc3RhdGUuZmlyc3RfbmFtZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImlkX2xhc3RfbmFtZVwiPkxhc3QgTmFtZTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImxhc3RfbmFtZVwiIGlkPVwiaWRfbGFzdF9uYW1lXCIgY2xhc3NOYW1lPVwicmVnaXN0ZXItaW5wdXRcIiBvbkNoYW5nZT17dGhpcy5oYW5kbGVMYXN0TmFtZUNoYW5nZX0gdmFsdWU9e3RoaXMuc3RhdGUubGFzdF9uYW1lfSBtYXhsZW5ndGg9XCIzMlwiLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImVtYWlsX2ZpZWxkXCI+RW1haWw6PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImVtYWlsXCIgaWQ9XCJlbWFpbF9maWVsZFwiIG9uQ2hhbmdlPXsgdGhpcy5oYW5kbGVFbWFpbENoYW5nZSB9IHZhbHVlPXsgdGhpcy5zdGF0ZS5lbWFpbCB9IGNsYXNzTmFtZT1cInJlZ2lzdGVyLWlucHV0IHJlZ2lzdGVyLWlucHV0LW9uZVwiLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInBhc3N3b3JkX2ZpZWxkXCI+UGFzc3dvcmQ6PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgaWQ9XCJwYXNzd29yZF9maWVsZFwiIG9uQ2hhbmdlPXsgdGhpcy5oYW5kbGVQYXNzd29yZENoYW5nZSB9IHZhbHVlPXsgdGhpcy5zdGF0ZS5wYXNzd29yZCB9IGNsYXNzTmFtZT1cInJlZ2lzdGVyLWlucHV0IHJlZ2lzdGVyLWlucHV0LXR3b1wiLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+QXJlIHlvdSBhbjo8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInR5cGVFbXBsb3llZVwiPkVtcGxveWVlPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJ1c2VyX3R5cGVcIiB2YWx1ZT1cImVtcGxveWVlXCIgaWQ9XCJ0eXBlRW1wbG95ZWVcIiBvbkNoYW5nZT17IHRoaXMuaGFuZGxlVXNlclR5cGVFbXBsb3llZSB9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwidHlwZUVtcGxveWVyXCI+RW1wbG95ZXI8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInVzZXJfdHlwZVwiIHZhbHVlPVwiZW1wbG95ZXJcIiBpZD1cInR5cGVFbXBsb3llclwiIG9uQ2hhbmdlPXsgdGhpcy5oYW5kbGVVc2VyVHlwZUVtcGxveWVyIH0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIGlkPVwicmVnaXN0ZXItc3VibWl0XCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZ2lzdGVyOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciBidG9hID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5idG9hICYmIHdpbmRvdy5idG9hLmJpbmQod2luZG93KSkgfHwgcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J0b2EnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG4gICAgdmFyIHhEb21haW4gPSBmYWxzZTtcblxuICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG4gICAgLy8gT25seSBzdXBwb3J0cyBQT1NUIGFuZCBHRVQgY2FsbHMgYW5kIGRvZXNuJ3QgcmV0dXJucyB0aGUgcmVzcG9uc2UgaGVhZGVycy5cbiAgICAvLyBET04nVCBkbyB0aGlzIGZvciB0ZXN0aW5nIGIvYyBYTUxIdHRwUmVxdWVzdCBpcyBtb2NrZWQsIG5vdCBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgICAhaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG4gICAgICB4RG9tYWluID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uIGhhbmRsZVByb2dyZXNzKCkge307XG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0W2xvYWRFdmVudF0gPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQgJiYgIXhEb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIC8vIElFIHNlbmRzIDEyMjMgaW5zdGVhZCBvZiAyMDQgKGh0dHBzOi8vZ2l0aHViLmNvbS9heGlvcy9heGlvcy9pc3N1ZXMvMjAxKVxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gMjA0IDogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gJ05vIENvbnRlbnQnIDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG5mdW5jdGlvbiBTaW5nbGVKb2IocHJvcHMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpbmdsZS1qb2JcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnJvbnQtbGlzdC10aXRsZVwiPlxuICAgICAgICAgICAgICAgIDxoMj57cHJvcHMuam9iVGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgICA8cD57cHJvcHMuam9iQ29tcGFueX08L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnJvbnQtbGlzdC1taWRkbGVcIj5cbiAgICAgICAgICAgICAgICA8cD57cHJvcHMuam9iU2x1Z308L3A+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmcm9udC1saXN0LWRldGFpbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmcm9udC1saXN0LWRlc2NyaXB0aW9uLWdyb3VwXCI+PGkgY2xhc3NOYW1lPVwiZmFyIGZhLWNsb2NrIGZyb250LWxpc3QtaWNvblwiPjwvaT48cD57cHJvcHMuam9iSG91cnN9PC9wPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZyb250LWxpc3QtZGVzY3JpcHRpb24tZ3JvdXBcIj48aSBjbGFzc05hbWU9XCJmYXMgZmEtZmxhc2sgZnJvbnQtbGlzdC1pY29uXCI+PC9pPjxwPntwcm9wcy5qb2JBcmVhfTwvcD48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmcm9udC1saXN0LWRlc2NyaXB0aW9uLWdyb3VwXCI+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLW1hcC1tYXJrZXItYWx0IGZyb250LWxpc3QtaWNvblwiPjwvaT48cD5Mb2NhdGlvbjogTG9uZG9uPC9wPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZyb250LWxpc3QtZGVzY3JpcHRpb24tZ3JvdXBcIj48aSBjbGFzc05hbWU9XCJmYXMgZmEtZG9sbGFyLXNpZ24gZnJvbnQtbGlzdC1pY29uXCI+PC9pPjxwPlNhbGFyeTogTmVnb3RpYWJsZTwvcD48L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmcm9udC1saXN0aW5nLWNvbXBhbnktbG9nb1wiPjxpIGNsYXNzTmFtZT1cImZhciBmYS1idWlsZGluZ1wiPjwvaT48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2luZ2xlSm9iOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBjYW5Vc2VET00gPSBleHBvcnRzLmNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbnZhciBhZGRFdmVudExpc3RlbmVyID0gZXhwb3J0cy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG52YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIGdldENvbmZpcm1hdGlvbiA9IGV4cG9ydHMuZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbnZhciBzdXBwb3J0c0hpc3RvcnkgPSBleHBvcnRzLnN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG52YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGV4cG9ydHMuc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbnZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGV4cG9ydHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbnZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZXhwb3J0cy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwuaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBcbiAgICB2YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICAgICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICAgICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgICAgIG1peGluczogdHJ1ZSxcbiAgICAgICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgICAgICB0eXBlOiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgbGVuZ3RoOiB0cnVlLFxuICAgICAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgICAgIGNhbGxlcjogdHJ1ZSxcbiAgICAgICAgY2FsbGVlOiB0cnVlLFxuICAgICAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgICAgIGFyaXR5OiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4gICAgdmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICB2YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gICAgdmFyIG9iamVjdFByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKE9iamVjdCk7XG4gICAgXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5XSAmJiAhS05PV05fU1RBVElDU1trZXldICYmICghYmxhY2tsaXN0IHx8ICFibGFja2xpc3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH07XG59KSkpO1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cbnZhciBjcmVhdGVNZW1vcnlIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGdldFVzZXJDb25maXJtYXRpb24gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdW5kZWZpbmVkID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IF9QYXRoVXRpbHMuY3JlYXRlUGF0aDtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9Mb2NhdGlvblV0aWxzID0gcmVxdWlyZSgnLi9Mb2NhdGlvblV0aWxzJyk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbnZhciBfRE9NVXRpbHMgPSByZXF1aXJlKCcuL0RPTVV0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyAoMCwgX1BhdGhVdGlscy5zdHJpcExlYWRpbmdTbGFzaCkocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IF9QYXRoVXRpbHMuc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG52YXIgZ2V0SGFzaFBhdGggPSBmdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn07XG5cbnZhciBwdXNoSGFzaFBhdGggPSBmdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufTtcblxudmFyIHJlcGxhY2VIYXNoUGF0aCA9IGZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG5cbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaGFzaEluZGV4ID49IDAgPyBoYXNoSW5kZXggOiAwKSArICcjJyArIHBhdGgpO1xufTtcblxudmFyIGNyZWF0ZUhhc2hIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKF9ET01VdGlscy5jYW5Vc2VET00sICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gKDAsIF9ET01VdGlscy5zdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCkoKTtcblxuICB2YXIgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IF9ET01VdGlscy5nZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBwcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB1bmRlZmluZWQgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gKDAsIF9QYXRoVXRpbHMuc3RyaXBUcmFpbGluZ1NsYXNoKSgoMCwgX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gpKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuXG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghYmFzZW5hbWUgfHwgKDAsIF9QYXRoVXRpbHMuaGFzQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSAoMCwgX1BhdGhVdGlscy5zdHJpcEJhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgKDAsIF9Mb2NhdGlvblV0aWxzLmxvY2F0aW9uc0FyZUVxdWFsKShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKHRvTG9jYXRpb24pKTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoZnJvbUxvY2F0aW9uKSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaW5pdGlhbExvY2F0aW9uKV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcblxuICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJyk7XG5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShoaXN0b3J5LmxvY2F0aW9uKSk7XG5cbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpO1xuXG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlSGFzaEhpc3Rvcnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gcmVxdWlyZSgnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcicpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKTtcblxudmFyIF9ET01VdGlscyA9IHJlcXVpcmUoJy4vRE9NVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIGdldEhpc3RvcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKF9ET01VdGlscy5jYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNIaXN0b3J5KSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhKDAsIF9ET01VdGlscy5zdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IF9ET01VdGlscy5nZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyAoMCwgX1BhdGhVdGlscy5zdHJpcFRyYWlsaW5nU2xhc2gpKCgwLCBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaCkocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghYmFzZW5hbWUgfHwgKDAsIF9QYXRoVXRpbHMuaGFzQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSAoMCwgX1BhdGhVdGlscy5zdHJpcEJhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKCgwLCBfRE9NVXRpbHMuaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCkoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAncmVhY3QtbW9kYWwnO1xuXG5Nb2RhbC5zZXRBcHBFbGVtZW50KCcjYXBwJyk7XG5cbmNsYXNzIE5ld0NvbXBhbnlNb2RhbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gIFxuICAgIHJldHVybiAoXG4gICAgICA8TW9kYWwgXG4gICAgICAgIGlzT3Blbj17dGhpcy5wcm9wcy5uZXdDb21wYW55TW9kYWxJc09wZW59XG4gICAgICAgIGNvbnRlbnRMYWJlbD1cImxlYXJuLXBhdGgtbW9kYWxcIlxuICAgICAgICBvblJlcXVlc3RDbG9zZT17dGhpcy5wcm9wcy5jbG9zZU5ld0NvbXBhbnlNb2RhbH1cbiAgICAgID5cbiAgICAgICAgPGZvcm0+XG4gICAgICAgICAgICA8ZmllbGRzZXQ+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cIm5ldy1jb21wYW55LW1vZGFsLWNvbXBhbnktbmFtZVwiPkNvbXBhbnkgTmFtZTo8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwibmV3LWNvbXBhbnktbW9kYWwtY29tcGFueS1uYW1lXCIvPlxuICAgICAgICAgICAgPC9maWVsZHNldD5cbiAgICAgICAgICAgIDxmaWVsZHNldD5cbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwibmV3LWNvbXBhbnktbW9kYWwtY29tcGFueS1kZXNjcmlwdGlvblwiPkNvbXBhbnkgRGVzY3JpcHRpb246PC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9XCJuZXctY29tcGFueS1tb2RhbC1jb21wYW55LWRlc2NyaXB0aW9uXCIvPlxuICAgICAgICAgICAgPC9maWVsZHNldD5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIvPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L01vZGFsPlxuICAgICl9XG4gIFxufVxuXG5leHBvcnQgZGVmYXVsdCBOZXdDb21wYW55TW9kYWw7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRSYW5nZUJvdW5kaW5nQ2xpZW50UmVjdFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UmFuZ2VDbGllbnRSZWN0cyA9IHJlcXVpcmUoJy4vZ2V0UmFuZ2VDbGllbnRSZWN0cycpO1xuXG4vKipcbiAqIExpa2UgcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgYnV0IG5vcm1hbGl6ZXMgZm9yIGJyb3dzZXIgYnVncy5cbiAqL1xuZnVuY3Rpb24gZ2V0UmFuZ2VCb3VuZGluZ0NsaWVudFJlY3QocmFuZ2UpIHtcbiAgLy8gXCJSZXR1cm4gYSBET01SZWN0IG9iamVjdCBkZXNjcmliaW5nIHRoZSBzbWFsbGVzdCByZWN0YW5nbGUgdGhhdCBpbmNsdWRlc1xuICAvLyB0aGUgZmlyc3QgcmVjdGFuZ2xlIGluIGxpc3QgYW5kIGFsbCBvZiB0aGUgcmVtYWluaW5nIHJlY3RhbmdsZXMgb2Ygd2hpY2hcbiAgLy8gdGhlIGhlaWdodCBvciB3aWR0aCBpcyBub3QgemVyby5cIlxuICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3NvbS12aWV3LyNkb20tcmFuZ2UtZ2V0Ym91bmRpbmdjbGllbnRyZWN0XG4gIHZhciByZWN0cyA9IGdldFJhbmdlQ2xpZW50UmVjdHMocmFuZ2UpO1xuICB2YXIgdG9wID0gMDtcbiAgdmFyIHJpZ2h0ID0gMDtcbiAgdmFyIGJvdHRvbSA9IDA7XG4gIHZhciBsZWZ0ID0gMDtcblxuICBpZiAocmVjdHMubGVuZ3RoKSB7XG4gICAgLy8gSWYgdGhlIGZpcnN0IHJlY3RhbmdsZSBoYXMgMCB3aWR0aCwgd2UgdXNlIHRoZSBzZWNvbmQsIHRoaXMgaXMgbmVlZGVkXG4gICAgLy8gYmVjYXVzZSBDaHJvbWUgcmVuZGVycyBhIDAgd2lkdGggcmVjdGFuZ2xlIHdoZW4gdGhlIHNlbGVjdGlvbiBjb250YWluc1xuICAgIC8vIGEgbGluZSBicmVhay5cbiAgICBpZiAocmVjdHMubGVuZ3RoID4gMSAmJiByZWN0c1swXS53aWR0aCA9PT0gMCkge1xuICAgICAgdmFyIF9yZWN0cyQgPSByZWN0c1sxXTtcbiAgICAgIHRvcCA9IF9yZWN0cyQudG9wO1xuICAgICAgcmlnaHQgPSBfcmVjdHMkLnJpZ2h0O1xuICAgICAgYm90dG9tID0gX3JlY3RzJC5ib3R0b207XG4gICAgICBsZWZ0ID0gX3JlY3RzJC5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX3JlY3RzJDIgPSByZWN0c1swXTtcbiAgICAgIHRvcCA9IF9yZWN0cyQyLnRvcDtcbiAgICAgIHJpZ2h0ID0gX3JlY3RzJDIucmlnaHQ7XG4gICAgICBib3R0b20gPSBfcmVjdHMkMi5ib3R0b207XG4gICAgICBsZWZ0ID0gX3JlY3RzJDIubGVmdDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpaSA9IDE7IGlpIDwgcmVjdHMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICB2YXIgcmVjdCA9IHJlY3RzW2lpXTtcbiAgICAgIGlmIChyZWN0LmhlaWdodCAhPT0gMCAmJiByZWN0LndpZHRoICE9PSAwKSB7XG4gICAgICAgIHRvcCA9IE1hdGgubWluKHRvcCwgcmVjdC50b3ApO1xuICAgICAgICByaWdodCA9IE1hdGgubWF4KHJpZ2h0LCByZWN0LnJpZ2h0KTtcbiAgICAgICAgYm90dG9tID0gTWF0aC5tYXgoYm90dG9tLCByZWN0LmJvdHRvbSk7XG4gICAgICAgIGxlZnQgPSBNYXRoLm1pbihsZWZ0LCByZWN0LmxlZnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiB0b3AsXG4gICAgcmlnaHQ6IHJpZ2h0LFxuICAgIGJvdHRvbTogYm90dG9tLFxuICAgIGxlZnQ6IGxlZnQsXG4gICAgd2lkdGg6IHJpZ2h0IC0gbGVmdCxcbiAgICBoZWlnaHQ6IGJvdHRvbSAtIHRvcFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhbmdlQm91bmRpbmdDbGllbnRSZWN0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0VmlzaWJsZVNlbGVjdGlvblJlY3RcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGdldFJhbmdlQm91bmRpbmdDbGllbnRSZWN0ID0gcmVxdWlyZSgnLi9nZXRSYW5nZUJvdW5kaW5nQ2xpZW50UmVjdCcpO1xuXG4vKipcbiAqIFJldHVybiB0aGUgYm91bmRpbmcgQ2xpZW50UmVjdCBmb3IgdGhlIHZpc2libGUgRE9NIHNlbGVjdGlvbiwgaWYgYW55LlxuICogSW4gY2FzZXMgd2hlcmUgdGhlcmUgYXJlIG5vIHNlbGVjdGVkIHJhbmdlcyBvciB0aGUgYm91bmRpbmcgcmVjdCBpc1xuICogdGVtcG9yYXJpbHkgaW52YWxpZCwgcmV0dXJuIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGdldFZpc2libGVTZWxlY3Rpb25SZWN0KGdsb2JhbCkge1xuICB2YXIgc2VsZWN0aW9uID0gZ2xvYmFsLmdldFNlbGVjdGlvbigpO1xuICBpZiAoIXNlbGVjdGlvbi5yYW5nZUNvdW50KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgcmFuZ2UgPSBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IGdldFJhbmdlQm91bmRpbmdDbGllbnRSZWN0KHJhbmdlKTtcbiAgdmFyIHRvcCA9IGJvdW5kaW5nUmVjdC50b3AsXG4gICAgICByaWdodCA9IGJvdW5kaW5nUmVjdC5yaWdodCxcbiAgICAgIGJvdHRvbSA9IGJvdW5kaW5nUmVjdC5ib3R0b20sXG4gICAgICBsZWZ0ID0gYm91bmRpbmdSZWN0LmxlZnQ7XG5cbiAgLy8gV2hlbiBhIHJlLXJlbmRlciBsZWFkcyB0byBhIG5vZGUgYmVpbmcgcmVtb3ZlZCwgdGhlIERPTSBzZWxlY3Rpb24gd2lsbFxuICAvLyB0ZW1wb3JhcmlseSBiZSBwbGFjZWQgb24gYW4gYW5jZXN0b3Igbm9kZSwgd2hpY2ggbGVhZHMgdG8gYW4gaW52YWxpZFxuICAvLyBib3VuZGluZyByZWN0LiBEaXNjYXJkIHRoaXMgc3RhdGUuXG5cbiAgaWYgKHRvcCA9PT0gMCAmJiByaWdodCA9PT0gMCAmJiBib3R0b20gPT09IDAgJiYgbGVmdCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGJvdW5kaW5nUmVjdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWaXNpYmxlU2VsZWN0aW9uUmVjdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGRlY29kZUlubGluZVN0eWxlUmFuZ2VzXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpLFxuICAgIE9yZGVyZWRTZXQgPSBfcmVxdWlyZS5PcmRlcmVkU2V0O1xuXG52YXIgVW5pY29kZVV0aWxzID0gcmVxdWlyZSgnZmJqcy9saWIvVW5pY29kZVV0aWxzJyk7XG5cbnZhciBzdWJzdHIgPSBVbmljb2RlVXRpbHMuc3Vic3RyO1xuXG5cbnZhciBFTVBUWV9TRVQgPSBPcmRlcmVkU2V0KCk7XG5cbi8qKlxuICogQ29udmVydCB0byBuYXRpdmUgSmF2YVNjcmlwdCBzdHJpbmcgbGVuZ3RocyB0byBkZXRlcm1pbmUgcmFuZ2VzLlxuICovXG5mdW5jdGlvbiBkZWNvZGVJbmxpbmVTdHlsZVJhbmdlcyh0ZXh0LCByYW5nZXMpIHtcbiAgdmFyIHN0eWxlcyA9IEFycmF5KHRleHQubGVuZ3RoKS5maWxsKEVNUFRZX1NFVCk7XG4gIGlmIChyYW5nZXMpIHtcbiAgICByYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAoIC8qb2JqZWN0Ki9yYW5nZSkge1xuICAgICAgdmFyIGN1cnNvciA9IHN1YnN0cih0ZXh0LCAwLCByYW5nZS5vZmZzZXQpLmxlbmd0aDtcbiAgICAgIHZhciBlbmQgPSBjdXJzb3IgKyBzdWJzdHIodGV4dCwgcmFuZ2Uub2Zmc2V0LCByYW5nZS5sZW5ndGgpLmxlbmd0aDtcbiAgICAgIHdoaWxlIChjdXJzb3IgPCBlbmQpIHtcbiAgICAgICAgc3R5bGVzW2N1cnNvcl0gPSBzdHlsZXNbY3Vyc29yXS5hZGQocmFuZ2Uuc3R5bGUpO1xuICAgICAgICBjdXJzb3IrKztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc3R5bGVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY29kZUlubGluZVN0eWxlUmFuZ2VzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZGVjb2RlRW50aXR5UmFuZ2VzXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVbmljb2RlVXRpbHMgPSByZXF1aXJlKCdmYmpzL2xpYi9Vbmljb2RlVXRpbHMnKTtcblxudmFyIHN1YnN0ciA9IFVuaWNvZGVVdGlscy5zdWJzdHI7XG5cbi8qKlxuICogQ29udmVydCB0byBuYXRpdmUgSmF2YVNjcmlwdCBzdHJpbmcgbGVuZ3RocyB0byBkZXRlcm1pbmUgcmFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGRlY29kZUVudGl0eVJhbmdlcyh0ZXh0LCByYW5nZXMpIHtcbiAgdmFyIGVudGl0aWVzID0gQXJyYXkodGV4dC5sZW5ndGgpLmZpbGwobnVsbCk7XG4gIGlmIChyYW5nZXMpIHtcbiAgICByYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgIC8vIFVzaW5nIFVuaWNvZGUtZW5hYmxlZCBzdWJzdHJpbmdzIGNvbnZlcnRlZCB0byBKYXZhU2NyaXB0IGxlbmd0aHMsXG4gICAgICAvLyBmaWxsIHRoZSBvdXRwdXQgYXJyYXkgd2l0aCBlbnRpdHkga2V5cy5cbiAgICAgIHZhciBzdGFydCA9IHN1YnN0cih0ZXh0LCAwLCByYW5nZS5vZmZzZXQpLmxlbmd0aDtcbiAgICAgIHZhciBlbmQgPSBzdGFydCArIHN1YnN0cih0ZXh0LCByYW5nZS5vZmZzZXQsIHJhbmdlLmxlbmd0aCkubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaWkgPSBzdGFydDsgaWkgPCBlbmQ7IGlpKyspIHtcbiAgICAgICAgZW50aXRpZXNbaWldID0gcmFuZ2Uua2V5O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBlbnRpdGllcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWNvZGVFbnRpdHlSYW5nZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjcmVhdGVDaGFyYWN0ZXJMaXN0XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyTWV0YWRhdGEnKTtcbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIExpc3QgPSBJbW11dGFibGUuTGlzdDtcblxuXG5mdW5jdGlvbiBjcmVhdGVDaGFyYWN0ZXJMaXN0KGlubGluZVN0eWxlcywgZW50aXRpZXMpIHtcbiAgdmFyIGNoYXJhY3RlckFycmF5ID0gaW5saW5lU3R5bGVzLm1hcChmdW5jdGlvbiAoc3R5bGUsIGlpKSB7XG4gICAgdmFyIGVudGl0eSA9IGVudGl0aWVzW2lpXTtcbiAgICByZXR1cm4gQ2hhcmFjdGVyTWV0YWRhdGEuY3JlYXRlKHsgc3R5bGU6IHN0eWxlLCBlbnRpdHk6IGVudGl0eSB9KTtcbiAgfSk7XG4gIHJldHVybiBMaXN0KGNoYXJhY3RlckFycmF5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVDaGFyYWN0ZXJMaXN0OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBfZXh0ZW5kcyA9IF9hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRHJhZnRUcmVlQWRhcHRlclxuICogQGZvcm1hdFxuICogXG4gKlxuICogVGhpcyBpcyB1bnN0YWJsZSBhbmQgbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBieVxuICogcHJvZHVjdGlvbiBzeXN0ZW1zLiBUaGlzIGZpbGUgbWF5IGJlIHVwZGF0ZS9yZW1vdmVkIHdpdGhvdXQgbm90aWNlLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIHRyYXZlcnNlSW5EZXB0aE9yZGVyID0gZnVuY3Rpb24gdHJhdmVyc2VJbkRlcHRoT3JkZXIoYmxvY2tzLCBmbikge1xuICB2YXIgc3RhY2sgPSBbXS5jb25jYXQoYmxvY2tzKS5yZXZlcnNlKCk7XG4gIHdoaWxlIChzdGFjay5sZW5ndGgpIHtcbiAgICB2YXIgX2Jsb2NrID0gc3RhY2sucG9wKCk7XG5cbiAgICBmbihfYmxvY2spO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gX2Jsb2NrLmNoaWxkcmVuO1xuXG4gICAgIUFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0ludmFsaWQgdHJlZSByYXcgYmxvY2snKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBzdGFjayA9IHN0YWNrLmNvbmNhdChbXS5jb25jYXQoY2hpbGRyZW4ucmV2ZXJzZSgpKSk7XG4gIH1cbn07XG5cbnZhciBpc0xpc3RCbG9jayA9IGZ1bmN0aW9uIGlzTGlzdEJsb2NrKGJsb2NrKSB7XG4gIGlmICghKGJsb2NrICYmIGJsb2NrLnR5cGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gYmxvY2sudHlwZTtcblxuICByZXR1cm4gdHlwZSA9PT0gJ3Vub3JkZXJlZC1saXN0LWl0ZW0nIHx8IHR5cGUgPT09ICdvcmRlcmVkLWxpc3QtaXRlbSc7XG59O1xuXG52YXIgYWRkRGVwdGhUb0NoaWxkcmVuID0gZnVuY3Rpb24gYWRkRGVwdGhUb0NoaWxkcmVuKGJsb2NrKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJsb2NrLmNoaWxkcmVuKSkge1xuICAgIGJsb2NrLmNoaWxkcmVuID0gYmxvY2suY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkLnR5cGUgPT09IGJsb2NrLnR5cGUgPyBfZXh0ZW5kcyh7fSwgY2hpbGQsIHsgZGVwdGg6IChibG9jay5kZXB0aCB8fCAwKSArIDEgfSkgOiBjaGlsZDtcbiAgICB9KTtcbiAgfVxufTtcblxuLyoqXG4gKiBUaGlzIGFkYXB0ZXIgaXMgaW50ZW5kZWQgdG8gYmUgYmUgdXNlZCBhcyBhbiBhZGFwdGVyIHRvIGRyYWZ0IHRyZWUgZGF0YVxuICpcbiAqIGRyYWZ0IHN0YXRlIDw9PT09PT4gZHJhZnQgdHJlZSBzdGF0ZVxuICovXG52YXIgRHJhZnRUcmVlQWRhcHRlciA9IHtcbiAgLyoqXG4gICAqIENvbnZlcnRzIGZyb20gYSB0cmVlIHJhdyBzdGF0ZSBiYWNrIHRvICBkcmFmdCByYXcgc3RhdGVcbiAgICovXG4gIGZyb21SYXdUcmVlU3RhdGVUb1Jhd1N0YXRlOiBmdW5jdGlvbiBmcm9tUmF3VHJlZVN0YXRlVG9SYXdTdGF0ZShkcmFmdFRyZWVTdGF0ZSkge1xuICAgIHZhciBibG9ja3MgPSBkcmFmdFRyZWVTdGF0ZS5ibG9ja3M7XG5cbiAgICB2YXIgdHJhbnNmb3JtZWRCbG9ja3MgPSBbXTtcblxuICAgICFBcnJheS5pc0FycmF5KGJsb2NrcykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnSW52YWxpZCByYXcgc3RhdGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYmxvY2tzKSB8fCAhYmxvY2tzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGRyYWZ0VHJlZVN0YXRlO1xuICAgIH1cblxuICAgIHRyYXZlcnNlSW5EZXB0aE9yZGVyKGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICB2YXIgbmV3QmxvY2sgPSBfZXh0ZW5kcyh7fSwgYmxvY2spO1xuXG4gICAgICBpZiAoaXNMaXN0QmxvY2soYmxvY2spKSB7XG4gICAgICAgIG5ld0Jsb2NrLmRlcHRoID0gbmV3QmxvY2suZGVwdGggfHwgMDtcbiAgICAgICAgYWRkRGVwdGhUb0NoaWxkcmVuKGJsb2NrKTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIG5ld0Jsb2NrLmNoaWxkcmVuO1xuXG4gICAgICB0cmFuc2Zvcm1lZEJsb2Nrcy5wdXNoKG5ld0Jsb2NrKTtcbiAgICB9KTtcblxuICAgIGRyYWZ0VHJlZVN0YXRlLmJsb2NrcyA9IHRyYW5zZm9ybWVkQmxvY2tzO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBkcmFmdFRyZWVTdGF0ZSwge1xuICAgICAgYmxvY2tzOiB0cmFuc2Zvcm1lZEJsb2Nrc1xuICAgIH0pO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGZyb20gZHJhZnQgcmF3IHN0YXRlIHRvIHRyZWUgZHJhZnQgc3RhdGVcbiAgICovXG4gIGZyb21SYXdTdGF0ZVRvUmF3VHJlZVN0YXRlOiBmdW5jdGlvbiBmcm9tUmF3U3RhdGVUb1Jhd1RyZWVTdGF0ZShkcmFmdFN0YXRlKSB7XG4gICAgdmFyIGxhc3RMaXN0RGVwdGhDYWNoZVJlZiA9IHt9O1xuICAgIHZhciB0cmFuc2Zvcm1lZEJsb2NrcyA9IFtdO1xuXG4gICAgZHJhZnRTdGF0ZS5ibG9ja3MuZm9yRWFjaChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHZhciBpc0xpc3QgPSBpc0xpc3RCbG9jayhibG9jayk7XG4gICAgICB2YXIgZGVwdGggPSBibG9jay5kZXB0aCB8fCAwO1xuICAgICAgdmFyIHRyZWVCbG9jayA9IF9leHRlbmRzKHt9LCBibG9jaywge1xuICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWlzTGlzdCkge1xuICAgICAgICAvLyByZXNldCB0aGUgY2FjaGUgcGF0aFxuICAgICAgICBsYXN0TGlzdERlcHRoQ2FjaGVSZWYgPSB7fTtcbiAgICAgICAgdHJhbnNmb3JtZWRCbG9ja3MucHVzaCh0cmVlQmxvY2spO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIHVwZGF0ZSBvdXIgZGVwdGggY2FjaGUgcmVmZXJlbmNlIHBhdGhcbiAgICAgIGxhc3RMaXN0RGVwdGhDYWNoZVJlZltkZXB0aF0gPSB0cmVlQmxvY2s7XG5cbiAgICAgIC8vIGlmIHdlIGFyZSBncmVhdGVyIHRoYW4gemVybyB3ZSBtdXN0IGhhdmUgc2VlbiBhIHBhcmVudCBhbHJlYWR5XG4gICAgICBpZiAoZGVwdGggPiAwKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBsYXN0TGlzdERlcHRoQ2FjaGVSZWZbZGVwdGggLSAxXTtcblxuICAgICAgICAhcGFyZW50ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0ludmFsaWQgZGVwdGggZm9yIFJhd0RyYWZ0Q29udGVudEJsb2NrJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgICAgIC8vIHB1c2ggbmVzdGVkIGxpc3QgYmxvY2tzXG4gICAgICAgIHBhcmVudC5jaGlsZHJlbi5wdXNoKHRyZWVCbG9jayk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gcHVzaCByb290IGxpc3QgYmxvY2tzXG4gICAgICB0cmFuc2Zvcm1lZEJsb2Nrcy5wdXNoKHRyZWVCbG9jayk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGRyYWZ0U3RhdGUsIHtcbiAgICAgIGJsb2NrczogdHJhbnNmb3JtZWRCbG9ja3NcbiAgICB9KTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdFRyZWVBZGFwdGVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY29udmVydEZyb21SYXdUb0RyYWZ0U3RhdGVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBfZXh0ZW5kcyA9IF9hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBDb250ZW50QmxvY2sgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9jaycpO1xudmFyIENvbnRlbnRCbG9ja05vZGUgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9ja05vZGUnKTtcbnZhciBDb250ZW50U3RhdGUgPSByZXF1aXJlKCcuL0NvbnRlbnRTdGF0ZScpO1xudmFyIERyYWZ0RW50aXR5ID0gcmVxdWlyZSgnLi9EcmFmdEVudGl0eScpO1xudmFyIERyYWZ0RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi9EcmFmdEZlYXR1cmVGbGFncycpO1xudmFyIERyYWZ0VHJlZUFkYXB0ZXIgPSByZXF1aXJlKCcuL0RyYWZ0VHJlZUFkYXB0ZXInKTtcbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcbnZhciBTZWxlY3Rpb25TdGF0ZSA9IHJlcXVpcmUoJy4vU2VsZWN0aW9uU3RhdGUnKTtcblxudmFyIGNyZWF0ZUNoYXJhY3Rlckxpc3QgPSByZXF1aXJlKCcuL2NyZWF0ZUNoYXJhY3Rlckxpc3QnKTtcbnZhciBkZWNvZGVFbnRpdHlSYW5nZXMgPSByZXF1aXJlKCcuL2RlY29kZUVudGl0eVJhbmdlcycpO1xudmFyIGRlY29kZUlubGluZVN0eWxlUmFuZ2VzID0gcmVxdWlyZSgnLi9kZWNvZGVJbmxpbmVTdHlsZVJhbmdlcycpO1xudmFyIGdlbmVyYXRlUmFuZG9tS2V5ID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVJhbmRvbUtleScpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0ID0gRHJhZnRGZWF0dXJlRmxhZ3MuZHJhZnRfdHJlZV9kYXRhX3N1cHBvcnQ7XG5cbnZhciBMaXN0ID0gSW1tdXRhYmxlLkxpc3QsXG4gICAgTWFwID0gSW1tdXRhYmxlLk1hcCxcbiAgICBPcmRlcmVkTWFwID0gSW1tdXRhYmxlLk9yZGVyZWRNYXA7XG5cblxudmFyIGRlY29kZUJsb2NrTm9kZUNvbmZpZyA9IGZ1bmN0aW9uIGRlY29kZUJsb2NrTm9kZUNvbmZpZyhibG9jaywgZW50aXR5TWFwKSB7XG4gIHZhciBrZXkgPSBibG9jay5rZXksXG4gICAgICB0eXBlID0gYmxvY2sudHlwZSxcbiAgICAgIGRhdGEgPSBibG9jay5kYXRhLFxuICAgICAgdGV4dCA9IGJsb2NrLnRleHQsXG4gICAgICBkZXB0aCA9IGJsb2NrLmRlcHRoO1xuXG5cbiAgdmFyIGJsb2NrTm9kZUNvbmZpZyA9IHtcbiAgICB0ZXh0OiB0ZXh0LFxuICAgIGRlcHRoOiBkZXB0aCB8fCAwLFxuICAgIHR5cGU6IHR5cGUgfHwgJ3Vuc3R5bGVkJyxcbiAgICBrZXk6IGtleSB8fCBnZW5lcmF0ZVJhbmRvbUtleSgpLFxuICAgIGRhdGE6IE1hcChkYXRhKSxcbiAgICBjaGFyYWN0ZXJMaXN0OiBkZWNvZGVDaGFyYWN0ZXJMaXN0KGJsb2NrLCBlbnRpdHlNYXApXG4gIH07XG5cbiAgcmV0dXJuIGJsb2NrTm9kZUNvbmZpZztcbn07XG5cbnZhciBkZWNvZGVDaGFyYWN0ZXJMaXN0ID0gZnVuY3Rpb24gZGVjb2RlQ2hhcmFjdGVyTGlzdChibG9jaywgZW50aXR5TWFwKSB7XG4gIHZhciB0ZXh0ID0gYmxvY2sudGV4dCxcbiAgICAgIHJhd0VudGl0eVJhbmdlcyA9IGJsb2NrLmVudGl0eVJhbmdlcyxcbiAgICAgIHJhd0lubGluZVN0eWxlUmFuZ2VzID0gYmxvY2suaW5saW5lU3R5bGVSYW5nZXM7XG5cblxuICB2YXIgZW50aXR5UmFuZ2VzID0gcmF3RW50aXR5UmFuZ2VzIHx8IFtdO1xuICB2YXIgaW5saW5lU3R5bGVSYW5nZXMgPSByYXdJbmxpbmVTdHlsZVJhbmdlcyB8fCBbXTtcblxuICAvLyBUcmFuc2xhdGUgZW50aXR5IHJhbmdlIGtleXMgdG8gdGhlIERyYWZ0RW50aXR5IG1hcC5cbiAgcmV0dXJuIGNyZWF0ZUNoYXJhY3Rlckxpc3QoZGVjb2RlSW5saW5lU3R5bGVSYW5nZXModGV4dCwgaW5saW5lU3R5bGVSYW5nZXMpLCBkZWNvZGVFbnRpdHlSYW5nZXModGV4dCwgZW50aXR5UmFuZ2VzLmZpbHRlcihmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICByZXR1cm4gZW50aXR5TWFwLmhhc093blByb3BlcnR5KHJhbmdlLmtleSk7XG4gIH0pLm1hcChmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIHJhbmdlLCB7IGtleTogZW50aXR5TWFwW3JhbmdlLmtleV0gfSk7XG4gIH0pKSk7XG59O1xuXG52YXIgYWRkS2V5SWZNaXNzaW5nID0gZnVuY3Rpb24gYWRkS2V5SWZNaXNzaW5nKGJsb2NrKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgYmxvY2ssIHtcbiAgICBrZXk6IGJsb2NrLmtleSB8fCBnZW5lcmF0ZVJhbmRvbUtleSgpXG4gIH0pO1xufTtcblxuLyoqXG4gKiBOb2RlIHN0YWNrIGlzIHJlc3BvbnNpYmxlIHRvIGVuc3VyZSB3ZSB0cmF2ZXJzZSB0aGUgdHJlZSBvbmx5IG9uY2VcbiAqIGluIGRlcHRoIG9yZGVyLCB3aGlsZSBhbHNvIHByb3ZpZGluZyBwYXJlbnQgcmVmcyB0byBpbm5lciBub2RlcyB0b1xuICogY29uc3RydWN0IHRoZWlyIGxpbmtzLlxuICovXG52YXIgdXBkYXRlTm9kZVN0YWNrID0gZnVuY3Rpb24gdXBkYXRlTm9kZVN0YWNrKHN0YWNrLCBub2RlcywgcGFyZW50UmVmKSB7XG4gIHZhciBub2Rlc1dpdGhQYXJlbnRSZWYgPSBub2Rlcy5tYXAoZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBibG9jaywge1xuICAgICAgcGFyZW50UmVmOiBwYXJlbnRSZWZcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gc2luY2Ugd2UgcG9wIG5vZGVzIGZyb20gdGhlIHN0YWNrIHdlIG5lZWQgdG8gaW5zZXJ0IHRoZW0gaW4gcmV2ZXJzZVxuICByZXR1cm4gc3RhY2suY29uY2F0KG5vZGVzV2l0aFBhcmVudFJlZi5yZXZlcnNlKCkpO1xufTtcblxuLyoqXG4gKiBUaGlzIHdpbGwgYnVpbGQgYSB0cmVlIGRyYWZ0IGNvbnRlbnQgc3RhdGUgYnkgY3JlYXRpbmcgdGhlIG5vZGVcbiAqIHJlZmVyZW5jZSBsaW5rcyBpbnRvIGEgc2luZ2xlIHRyZWUgd2Fsay4gRWFjaCBub2RlIGhhcyBhIGxpbmtcbiAqIHJlZmVyZW5jZSB0byBcInBhcmVudFwiLCBcImNoaWxkcmVuXCIsIFwibmV4dFNpYmxpbmdcIiBhbmQgXCJwcmV2U2libGluZ1wiXG4gKiBibG9ja01hcCB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgZGVwdGggb3JkZXJpbmcuXG4gKi9cbnZhciBkZWNvZGVDb250ZW50QmxvY2tOb2RlcyA9IGZ1bmN0aW9uIGRlY29kZUNvbnRlbnRCbG9ja05vZGVzKGJsb2NrcywgZW50aXR5TWFwKSB7XG4gIHJldHVybiBibG9ja3NcbiAgLy8gZW5zdXJlIGNoaWxkcmVuIGhhdmUgdmFsaWQga2V5cyB0byBlbmFibGUgc2libGluZyBsaW5rc1xuICAubWFwKGFkZEtleUlmTWlzc2luZykucmVkdWNlKGZ1bmN0aW9uIChibG9ja01hcCwgYmxvY2ssIGluZGV4KSB7XG4gICAgIUFycmF5LmlzQXJyYXkoYmxvY2suY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2ludmFsaWQgUmF3RHJhZnRDb250ZW50QmxvY2sgY2FuIG5vdCBiZSBjb252ZXJ0ZWQgdG8gQ29udGVudEJsb2NrTm9kZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIC8vIGVuc3VyZSBjaGlsZHJlbiBoYXZlIHZhbGlkIGtleXMgdG8gZW5hYmxlIHNpYmxpbmcgbGlua3NcbiAgICB2YXIgY2hpbGRyZW4gPSBibG9jay5jaGlsZHJlbi5tYXAoYWRkS2V5SWZNaXNzaW5nKTtcblxuICAgIC8vIHJvb3QgbGV2ZWwgbm9kZXNcbiAgICB2YXIgY29udGVudEJsb2NrTm9kZSA9IG5ldyBDb250ZW50QmxvY2tOb2RlKF9leHRlbmRzKHt9LCBkZWNvZGVCbG9ja05vZGVDb25maWcoYmxvY2ssIGVudGl0eU1hcCksIHtcbiAgICAgIHByZXZTaWJsaW5nOiBpbmRleCA9PT0gMCA/IG51bGwgOiBibG9ja3NbaW5kZXggLSAxXS5rZXksXG4gICAgICBuZXh0U2libGluZzogaW5kZXggPT09IGJsb2Nrcy5sZW5ndGggLSAxID8gbnVsbCA6IGJsb2Nrc1tpbmRleCArIDFdLmtleSxcbiAgICAgIGNoaWxkcmVuOiBMaXN0KGNoaWxkcmVuLm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkLmtleTtcbiAgICAgIH0pKVxuICAgIH0pKTtcblxuICAgIC8vIHB1c2ggcm9vdCBub2RlIHRvIGJsb2NrTWFwXG4gICAgYmxvY2tNYXAgPSBibG9ja01hcC5zZXQoY29udGVudEJsb2NrTm9kZS5nZXRLZXkoKSwgY29udGVudEJsb2NrTm9kZSk7XG5cbiAgICAvLyB0aGlzIHN0YWNrIGlzIHVzZWQgdG8gZW5zdXJlIHdlIHZpc2l0IGFsbCBub2RlcyByZXNwZWN0aW5nIGRlcHRoIG9yZGVyaW5nXG4gICAgdmFyIHN0YWNrID0gdXBkYXRlTm9kZVN0YWNrKFtdLCBjaGlsZHJlbiwgY29udGVudEJsb2NrTm9kZSk7XG5cbiAgICAvLyBzdGFydCBjb21wdXRpbmcgY2hpbGRyZW4gbm9kZXNcbiAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgLy8gd2UgcG9wIGZyb20gdGhlIHN0YWNrIGFuZCBzdGFydCBwcm9jZXNzaW5nIHRoaXMgbm9kZVxuICAgICAgdmFyIG5vZGUgPSBzdGFjay5wb3AoKTtcblxuICAgICAgLy8gcGFyZW50UmVmIGFscmVhZHkgcG9pbnRzIHRvIGEgY29udmVydGVkIENvbnRlbnRCbG9ja05vZGVcbiAgICAgIHZhciBwYXJlbnRSZWYgPSBub2RlLnBhcmVudFJlZjtcbiAgICAgIHZhciBzaWJsaW5ncyA9IHBhcmVudFJlZi5nZXRDaGlsZEtleXMoKTtcbiAgICAgIHZhciBfaW5kZXggPSBzaWJsaW5ncy5pbmRleE9mKG5vZGUua2V5KTtcbiAgICAgIHZhciBpc1ZhbGlkQmxvY2sgPSBBcnJheS5pc0FycmF5KG5vZGUuY2hpbGRyZW4pO1xuXG4gICAgICBpZiAoIWlzVmFsaWRCbG9jaykge1xuICAgICAgICAhaXNWYWxpZEJsb2NrID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2ludmFsaWQgUmF3RHJhZnRDb250ZW50QmxvY2sgY2FuIG5vdCBiZSBjb252ZXJ0ZWQgdG8gQ29udGVudEJsb2NrTm9kZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIC8vIGVuc3VyZSBjaGlsZHJlbiBoYXZlIHZhbGlkIGtleXMgdG8gZW5hYmxlIHNpYmxpbmcgbGlua3NcbiAgICAgIHZhciBfY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLm1hcChhZGRLZXlJZk1pc3NpbmcpO1xuXG4gICAgICB2YXIgX2NvbnRlbnRCbG9ja05vZGUgPSBuZXcgQ29udGVudEJsb2NrTm9kZShfZXh0ZW5kcyh7fSwgZGVjb2RlQmxvY2tOb2RlQ29uZmlnKG5vZGUsIGVudGl0eU1hcCksIHtcbiAgICAgICAgcGFyZW50OiBwYXJlbnRSZWYuZ2V0S2V5KCksXG4gICAgICAgIGNoaWxkcmVuOiBMaXN0KF9jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkLmtleTtcbiAgICAgICAgfSkpLFxuICAgICAgICBwcmV2U2libGluZzogX2luZGV4ID09PSAwID8gbnVsbCA6IHNpYmxpbmdzLmdldChfaW5kZXggLSAxKSxcbiAgICAgICAgbmV4dFNpYmxpbmc6IF9pbmRleCA9PT0gc2libGluZ3Muc2l6ZSAtIDEgPyBudWxsIDogc2libGluZ3MuZ2V0KF9pbmRleCArIDEpXG4gICAgICB9KSk7XG5cbiAgICAgIC8vIHB1c2ggbm9kZSB0byBibG9ja01hcFxuICAgICAgYmxvY2tNYXAgPSBibG9ja01hcC5zZXQoX2NvbnRlbnRCbG9ja05vZGUuZ2V0S2V5KCksIF9jb250ZW50QmxvY2tOb2RlKTtcblxuICAgICAgLy8gdGhpcyBzdGFjayBpcyB1c2VkIHRvIGVuc3VyZSB3ZSB2aXNpdCBhbGwgbm9kZXMgcmVzcGVjdGluZyBkZXB0aCBvcmRlcmluZ1xuICAgICAgc3RhY2sgPSB1cGRhdGVOb2RlU3RhY2soc3RhY2ssIF9jaGlsZHJlbiwgX2NvbnRlbnRCbG9ja05vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBibG9ja01hcDtcbiAgfSwgT3JkZXJlZE1hcCgpKTtcbn07XG5cbnZhciBkZWNvZGVDb250ZW50QmxvY2tzID0gZnVuY3Rpb24gZGVjb2RlQ29udGVudEJsb2NrcyhibG9ja3MsIGVudGl0eU1hcCkge1xuICByZXR1cm4gT3JkZXJlZE1hcChibG9ja3MubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgIHZhciBjb250ZW50QmxvY2sgPSBuZXcgQ29udGVudEJsb2NrKGRlY29kZUJsb2NrTm9kZUNvbmZpZyhibG9jaywgZW50aXR5TWFwKSk7XG4gICAgcmV0dXJuIFtjb250ZW50QmxvY2suZ2V0S2V5KCksIGNvbnRlbnRCbG9ja107XG4gIH0pKTtcbn07XG5cbnZhciBkZWNvZGVSYXdCbG9ja3MgPSBmdW5jdGlvbiBkZWNvZGVSYXdCbG9ja3MocmF3U3RhdGUsIGVudGl0eU1hcCkge1xuICB2YXIgaXNUcmVlUmF3QmxvY2sgPSBBcnJheS5pc0FycmF5KHJhd1N0YXRlLmJsb2Nrc1swXS5jaGlsZHJlbik7XG4gIHZhciByYXdCbG9ja3MgPSBleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQgJiYgIWlzVHJlZVJhd0Jsb2NrID8gRHJhZnRUcmVlQWRhcHRlci5mcm9tUmF3U3RhdGVUb1Jhd1RyZWVTdGF0ZShyYXdTdGF0ZSkuYmxvY2tzIDogcmF3U3RhdGUuYmxvY2tzO1xuXG4gIGlmICghZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0KSB7XG4gICAgcmV0dXJuIGRlY29kZUNvbnRlbnRCbG9ja3MoaXNUcmVlUmF3QmxvY2sgPyBEcmFmdFRyZWVBZGFwdGVyLmZyb21SYXdUcmVlU3RhdGVUb1Jhd1N0YXRlKHJhd1N0YXRlKS5ibG9ja3MgOiByYXdCbG9ja3MsIGVudGl0eU1hcCk7XG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29udGVudEJsb2NrTm9kZXMocmF3QmxvY2tzLCBlbnRpdHlNYXApO1xufTtcblxudmFyIGRlY29kZVJhd0VudGl0eU1hcCA9IGZ1bmN0aW9uIGRlY29kZVJhd0VudGl0eU1hcChyYXdTdGF0ZSkge1xuICB2YXIgcmF3RW50aXR5TWFwID0gcmF3U3RhdGUuZW50aXR5TWFwO1xuXG4gIHZhciBlbnRpdHlNYXAgPSB7fTtcblxuICAvLyBUT0RPOiBVcGRhdGUgdGhpcyBvbmNlIHdlIGNvbXBsZXRlbHkgcmVtb3ZlIERyYWZ0RW50aXR5XG4gIE9iamVjdC5rZXlzKHJhd0VudGl0eU1hcCkuZm9yRWFjaChmdW5jdGlvbiAocmF3RW50aXR5S2V5KSB7XG4gICAgdmFyIF9yYXdFbnRpdHlNYXAkcmF3RW50aSA9IHJhd0VudGl0eU1hcFtyYXdFbnRpdHlLZXldLFxuICAgICAgICB0eXBlID0gX3Jhd0VudGl0eU1hcCRyYXdFbnRpLnR5cGUsXG4gICAgICAgIG11dGFiaWxpdHkgPSBfcmF3RW50aXR5TWFwJHJhd0VudGkubXV0YWJpbGl0eSxcbiAgICAgICAgZGF0YSA9IF9yYXdFbnRpdHlNYXAkcmF3RW50aS5kYXRhO1xuXG4gICAgLy8gZ2V0IHRoZSBrZXkgcmVmZXJlbmNlIHRvIGNyZWF0ZWQgZW50aXR5XG5cbiAgICBlbnRpdHlNYXBbcmF3RW50aXR5S2V5XSA9IERyYWZ0RW50aXR5Ll9fY3JlYXRlKHR5cGUsIG11dGFiaWxpdHksIGRhdGEgfHwge30pO1xuICB9KTtcblxuICByZXR1cm4gZW50aXR5TWFwO1xufTtcblxudmFyIGNvbnZlcnRGcm9tUmF3VG9EcmFmdFN0YXRlID0gZnVuY3Rpb24gY29udmVydEZyb21SYXdUb0RyYWZ0U3RhdGUocmF3U3RhdGUpIHtcbiAgIUFycmF5LmlzQXJyYXkocmF3U3RhdGUuYmxvY2tzKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdpbnZhbGlkIFJhd0RyYWZ0Q29udGVudFN0YXRlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIC8vIGRlY29kZSBlbnRpdGllc1xuICB2YXIgZW50aXR5TWFwID0gZGVjb2RlUmF3RW50aXR5TWFwKHJhd1N0YXRlKTtcblxuICAvLyBkZWNvZGUgYmxvY2tNYXBcbiAgdmFyIGJsb2NrTWFwID0gZGVjb2RlUmF3QmxvY2tzKHJhd1N0YXRlLCBlbnRpdHlNYXApO1xuXG4gIC8vIGNyZWF0ZSBpbml0aWFsIHNlbGVjdGlvblxuICB2YXIgc2VsZWN0aW9uU3RhdGUgPSBibG9ja01hcC5pc0VtcHR5KCkgPyBuZXcgU2VsZWN0aW9uU3RhdGUoKSA6IFNlbGVjdGlvblN0YXRlLmNyZWF0ZUVtcHR5KGJsb2NrTWFwLmZpcnN0KCkuZ2V0S2V5KCkpO1xuXG4gIHJldHVybiBuZXcgQ29udGVudFN0YXRlKHtcbiAgICBibG9ja01hcDogYmxvY2tNYXAsXG4gICAgZW50aXR5TWFwOiBlbnRpdHlNYXAsXG4gICAgc2VsZWN0aW9uQmVmb3JlOiBzZWxlY3Rpb25TdGF0ZSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGVcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZlcnRGcm9tUmF3VG9EcmFmdFN0YXRlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZW5jb2RlSW5saW5lU3R5bGVSYW5nZXNcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFVuaWNvZGVVdGlscyA9IHJlcXVpcmUoJ2ZianMvbGliL1VuaWNvZGVVdGlscycpO1xuXG52YXIgZmluZFJhbmdlc0ltbXV0YWJsZSA9IHJlcXVpcmUoJy4vZmluZFJhbmdlc0ltbXV0YWJsZScpO1xuXG52YXIgYXJlRXF1YWwgPSBmdW5jdGlvbiBhcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcbnZhciBpc1RydXRoeSA9IGZ1bmN0aW9uIGlzVHJ1dGh5KGEpIHtcbiAgcmV0dXJuICEhYTtcbn07XG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGdldHRpbmcgZW5jb2RlZCBzdHlsZXMgZm9yIGVhY2ggaW5saW5lIHN0eWxlLiBDb252ZXJ0XG4gKiB0byBVVEYtOCBjaGFyYWN0ZXIgY291bnRzIGZvciBzdG9yYWdlLlxuICovXG5mdW5jdGlvbiBnZXRFbmNvZGVkSW5saW5lc0ZvclR5cGUoYmxvY2ssIHN0eWxlTGlzdCwgc3R5bGVUb0VuY29kZSkge1xuICB2YXIgcmFuZ2VzID0gW107XG5cbiAgLy8gT2J0YWluIGFuIGFycmF5IHdpdGggcmFuZ2VzIGZvciBvbmx5IHRoZSBzcGVjaWZpZWQgc3R5bGUuXG4gIHZhciBmaWx0ZXJlZElubGluZXMgPSBzdHlsZUxpc3QubWFwKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgIHJldHVybiBzdHlsZS5oYXMoc3R5bGVUb0VuY29kZSk7XG4gIH0pLnRvTGlzdCgpO1xuXG4gIGZpbmRSYW5nZXNJbW11dGFibGUoZmlsdGVyZWRJbmxpbmVzLCBhcmVFcXVhbCxcbiAgLy8gV2Ugb25seSB3YW50IHRvIGtlZXAgcmFuZ2VzIHdpdGggbm9uemVybyBzdHlsZSB2YWx1ZXMuXG4gIGlzVHJ1dGh5LCBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgIHZhciB0ZXh0ID0gYmxvY2suZ2V0VGV4dCgpO1xuICAgIHJhbmdlcy5wdXNoKHtcbiAgICAgIG9mZnNldDogVW5pY29kZVV0aWxzLnN0cmxlbih0ZXh0LnNsaWNlKDAsIHN0YXJ0KSksXG4gICAgICBsZW5ndGg6IFVuaWNvZGVVdGlscy5zdHJsZW4odGV4dC5zbGljZShzdGFydCwgZW5kKSksXG4gICAgICBzdHlsZTogc3R5bGVUb0VuY29kZVxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gcmFuZ2VzO1xufVxuXG4vKlxuICogUmV0cmlldmUgdGhlIGVuY29kZWQgYXJyYXlzIG9mIGlubGluZSBzdHlsZXMsIHdpdGggZWFjaCBpbmRpdmlkdWFsIHN0eWxlXG4gKiB0cmVhdGVkIHNlcGFyYXRlbHkuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZUlubGluZVN0eWxlUmFuZ2VzKGJsb2NrKSB7XG4gIHZhciBzdHlsZUxpc3QgPSBibG9jay5nZXRDaGFyYWN0ZXJMaXN0KCkubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuZ2V0U3R5bGUoKTtcbiAgfSkudG9MaXN0KCk7XG4gIHZhciByYW5nZXMgPSBzdHlsZUxpc3QuZmxhdHRlbigpLnRvU2V0KCkubWFwKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgIHJldHVybiBnZXRFbmNvZGVkSW5saW5lc0ZvclR5cGUoYmxvY2ssIHN0eWxlTGlzdCwgc3R5bGUpO1xuICB9KTtcblxuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShFTVBUWV9BUlJBWSwgcmFuZ2VzLnRvSlMoKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW5jb2RlSW5saW5lU3R5bGVSYW5nZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlbmNvZGVFbnRpdHlSYW5nZXNcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0U3RyaW5nS2V5ID0gcmVxdWlyZSgnLi9EcmFmdFN0cmluZ0tleScpO1xudmFyIFVuaWNvZGVVdGlscyA9IHJlcXVpcmUoJ2ZianMvbGliL1VuaWNvZGVVdGlscycpO1xuXG52YXIgc3RybGVuID0gVW5pY29kZVV0aWxzLnN0cmxlbjtcblxuLyoqXG4gKiBDb252ZXJ0IHRvIFVURi04IGNoYXJhY3RlciBjb3VudHMgZm9yIHN0b3JhZ2UuXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlRW50aXR5UmFuZ2VzKGJsb2NrLCBzdG9yYWdlTWFwKSB7XG4gIHZhciBlbmNvZGVkID0gW107XG4gIGJsb2NrLmZpbmRFbnRpdHlSYW5nZXMoZnVuY3Rpb24gKGNoYXJhY3Rlcikge1xuICAgIHJldHVybiAhIWNoYXJhY3Rlci5nZXRFbnRpdHkoKTtcbiAgfSwgZnVuY3Rpb24gKCAvKm51bWJlciovc3RhcnQsIC8qbnVtYmVyKi9lbmQpIHtcbiAgICB2YXIgdGV4dCA9IGJsb2NrLmdldFRleHQoKTtcbiAgICB2YXIga2V5ID0gYmxvY2suZ2V0RW50aXR5QXQoc3RhcnQpO1xuICAgIGVuY29kZWQucHVzaCh7XG4gICAgICBvZmZzZXQ6IHN0cmxlbih0ZXh0LnNsaWNlKDAsIHN0YXJ0KSksXG4gICAgICBsZW5ndGg6IHN0cmxlbih0ZXh0LnNsaWNlKHN0YXJ0LCBlbmQpKSxcbiAgICAgIC8vIEVuY29kZSB0aGUga2V5IGFzIGEgbnVtYmVyIGZvciByYW5nZSBzdG9yYWdlLlxuICAgICAga2V5OiBOdW1iZXIoc3RvcmFnZU1hcFtEcmFmdFN0cmluZ0tleS5zdHJpbmdpZnkoa2V5KV0pXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gZW5jb2RlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbmNvZGVFbnRpdHlSYW5nZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjb252ZXJ0RnJvbURyYWZ0U3RhdGVUb1Jhd1xuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIF9leHRlbmRzID0gX2Fzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIENvbnRlbnRCbG9jayA9IHJlcXVpcmUoJy4vQ29udGVudEJsb2NrJyk7XG52YXIgQ29udGVudEJsb2NrTm9kZSA9IHJlcXVpcmUoJy4vQ29udGVudEJsb2NrTm9kZScpO1xudmFyIERyYWZ0U3RyaW5nS2V5ID0gcmVxdWlyZSgnLi9EcmFmdFN0cmluZ0tleScpO1xuXG52YXIgZW5jb2RlRW50aXR5UmFuZ2VzID0gcmVxdWlyZSgnLi9lbmNvZGVFbnRpdHlSYW5nZXMnKTtcbnZhciBlbmNvZGVJbmxpbmVTdHlsZVJhbmdlcyA9IHJlcXVpcmUoJy4vZW5jb2RlSW5saW5lU3R5bGVSYW5nZXMnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIGNyZWF0ZVJhd0Jsb2NrID0gZnVuY3Rpb24gY3JlYXRlUmF3QmxvY2soYmxvY2ssIGVudGl0eVN0b3JhZ2VNYXApIHtcbiAgcmV0dXJuIHtcbiAgICBrZXk6IGJsb2NrLmdldEtleSgpLFxuICAgIHRleHQ6IGJsb2NrLmdldFRleHQoKSxcbiAgICB0eXBlOiBibG9jay5nZXRUeXBlKCksXG4gICAgZGVwdGg6IGJsb2NrLmdldERlcHRoKCksXG4gICAgaW5saW5lU3R5bGVSYW5nZXM6IGVuY29kZUlubGluZVN0eWxlUmFuZ2VzKGJsb2NrKSxcbiAgICBlbnRpdHlSYW5nZXM6IGVuY29kZUVudGl0eVJhbmdlcyhibG9jaywgZW50aXR5U3RvcmFnZU1hcCksXG4gICAgZGF0YTogYmxvY2suZ2V0RGF0YSgpLnRvT2JqZWN0KClcbiAgfTtcbn07XG5cbnZhciBpbnNlcnRSYXdCbG9jayA9IGZ1bmN0aW9uIGluc2VydFJhd0Jsb2NrKGJsb2NrLCBlbnRpdHlNYXAsIHJhd0Jsb2NrcywgYmxvY2tDYWNoZVJlZikge1xuICBpZiAoYmxvY2sgaW5zdGFuY2VvZiBDb250ZW50QmxvY2spIHtcbiAgICByYXdCbG9ja3MucHVzaChjcmVhdGVSYXdCbG9jayhibG9jaywgZW50aXR5TWFwKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgIShibG9jayBpbnN0YW5jZW9mIENvbnRlbnRCbG9ja05vZGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Jsb2NrIGlzIG5vdCBhIEJsb2NrTm9kZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICB2YXIgcGFyZW50S2V5ID0gYmxvY2suZ2V0UGFyZW50S2V5KCk7XG4gIHZhciByYXdCbG9jayA9IGJsb2NrQ2FjaGVSZWZbYmxvY2suZ2V0S2V5KCldID0gX2V4dGVuZHMoe30sIGNyZWF0ZVJhd0Jsb2NrKGJsb2NrLCBlbnRpdHlNYXApLCB7XG4gICAgY2hpbGRyZW46IFtdXG4gIH0pO1xuXG4gIGlmIChwYXJlbnRLZXkpIHtcbiAgICBibG9ja0NhY2hlUmVmW3BhcmVudEtleV0uY2hpbGRyZW4ucHVzaChyYXdCbG9jayk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmF3QmxvY2tzLnB1c2gocmF3QmxvY2spO1xufTtcblxudmFyIGVuY29kZVJhd0Jsb2NrcyA9IGZ1bmN0aW9uIGVuY29kZVJhd0Jsb2Nrcyhjb250ZW50U3RhdGUsIHJhd1N0YXRlKSB7XG4gIHZhciBlbnRpdHlNYXAgPSByYXdTdGF0ZS5lbnRpdHlNYXA7XG5cblxuICB2YXIgcmF3QmxvY2tzID0gW107XG5cbiAgdmFyIGJsb2NrQ2FjaGVSZWYgPSB7fTtcbiAgdmFyIGVudGl0eUNhY2hlUmVmID0ge307XG4gIHZhciBlbnRpdHlTdG9yYWdlS2V5ID0gMDtcblxuICBjb250ZW50U3RhdGUuZ2V0QmxvY2tNYXAoKS5mb3JFYWNoKGZ1bmN0aW9uIChibG9jaykge1xuICAgIGJsb2NrLmZpbmRFbnRpdHlSYW5nZXMoZnVuY3Rpb24gKGNoYXJhY3Rlcikge1xuICAgICAgcmV0dXJuIGNoYXJhY3Rlci5nZXRFbnRpdHkoKSAhPT0gbnVsbDtcbiAgICB9LCBmdW5jdGlvbiAoc3RhcnQpIHtcbiAgICAgIHZhciBlbnRpdHlLZXkgPSBibG9jay5nZXRFbnRpdHlBdChzdGFydCk7XG4gICAgICAvLyBTdHJpbmdpZnkgdG8gbWFpbnRhaW4gb3JkZXIgb2Ygb3RoZXJ3aXNlIG51bWVyaWMga2V5cy5cbiAgICAgIHZhciBzdHJpbmdpZmllZEVudGl0eUtleSA9IERyYWZ0U3RyaW5nS2V5LnN0cmluZ2lmeShlbnRpdHlLZXkpO1xuICAgICAgLy8gVGhpcyBtYWtlcyB0aGlzIGZ1bmN0aW9uIHJlc2lsaWVudCB0byB0d28gZW50aXRpZXNcbiAgICAgIC8vIGVycm9uZW91c2x5IGhhdmluZyB0aGUgc2FtZSBrZXlcbiAgICAgIGlmIChlbnRpdHlDYWNoZVJlZltzdHJpbmdpZmllZEVudGl0eUtleV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZW50aXR5Q2FjaGVSZWZbc3RyaW5naWZpZWRFbnRpdHlLZXldID0gZW50aXR5S2V5O1xuICAgICAgLy8gd2UgbmVlZCB0aGUgYGFueWAgY2FzdGluZyBoZXJlIHNpbmNlIHRoaXMgaXMgYSB0ZW1wb3Jhcnkgc3RhdGVcbiAgICAgIC8vIHdoZXJlIHdlIHdpbGwgbGF0ZXIgb24gZmxpcCB0aGUgZW50aXR5IG1hcCBhbmQgcG9wdWxhdGUgaXQgd2l0aFxuICAgICAgLy8gcmVhbCBlbnRpdHksIGF0IHRoaXMgc3RhZ2Ugd2UganVzdCBuZWVkIHRvIG1hcCBiYWNrIHRoZSBlbnRpdHlcbiAgICAgIC8vIGtleSB1c2VkIGJ5IHRoZSBCbG9ja05vZGVcbiAgICAgIGVudGl0eU1hcFtzdHJpbmdpZmllZEVudGl0eUtleV0gPSAnJyArIGVudGl0eVN0b3JhZ2VLZXk7XG4gICAgICBlbnRpdHlTdG9yYWdlS2V5Kys7XG4gICAgfSk7XG5cbiAgICBpbnNlcnRSYXdCbG9jayhibG9jaywgZW50aXR5TWFwLCByYXdCbG9ja3MsIGJsb2NrQ2FjaGVSZWYpO1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGJsb2NrczogcmF3QmxvY2tzLFxuICAgIGVudGl0eU1hcDogZW50aXR5TWFwXG4gIH07XG59O1xuXG4vLyBGbGlwIHN0b3JhZ2UgbWFwIHNvIHRoYXQgb3VyIHN0b3JhZ2Uga2V5cyBtYXAgdG8gZ2xvYmFsXG4vLyBEcmFmdEVudGl0eSBrZXlzLlxudmFyIGVuY29kZVJhd0VudGl0eU1hcCA9IGZ1bmN0aW9uIGVuY29kZVJhd0VudGl0eU1hcChjb250ZW50U3RhdGUsIHJhd1N0YXRlKSB7XG4gIHZhciBibG9ja3MgPSByYXdTdGF0ZS5ibG9ja3MsXG4gICAgICBlbnRpdHlNYXAgPSByYXdTdGF0ZS5lbnRpdHlNYXA7XG5cblxuICB2YXIgcmF3RW50aXR5TWFwID0ge307XG5cbiAgT2JqZWN0LmtleXMoZW50aXR5TWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXksIGluZGV4KSB7XG4gICAgdmFyIGVudGl0eSA9IGNvbnRlbnRTdGF0ZS5nZXRFbnRpdHkoRHJhZnRTdHJpbmdLZXkudW5zdHJpbmdpZnkoa2V5KSk7XG4gICAgcmF3RW50aXR5TWFwW2luZGV4XSA9IHtcbiAgICAgIHR5cGU6IGVudGl0eS5nZXRUeXBlKCksXG4gICAgICBtdXRhYmlsaXR5OiBlbnRpdHkuZ2V0TXV0YWJpbGl0eSgpLFxuICAgICAgZGF0YTogZW50aXR5LmdldERhdGEoKVxuICAgIH07XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgYmxvY2tzOiBibG9ja3MsXG4gICAgZW50aXR5TWFwOiByYXdFbnRpdHlNYXBcbiAgfTtcbn07XG5cbnZhciBjb252ZXJ0RnJvbURyYWZ0U3RhdGVUb1JhdyA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tRHJhZnRTdGF0ZVRvUmF3KGNvbnRlbnRTdGF0ZSkge1xuICB2YXIgcmF3RHJhZnRDb250ZW50U3RhdGUgPSB7XG4gICAgZW50aXR5TWFwOiB7fSxcbiAgICBibG9ja3M6IFtdXG4gIH07XG5cbiAgLy8gYWRkIGJsb2Nrc1xuICByYXdEcmFmdENvbnRlbnRTdGF0ZSA9IGVuY29kZVJhd0Jsb2Nrcyhjb250ZW50U3RhdGUsIHJhd0RyYWZ0Q29udGVudFN0YXRlKTtcblxuICAvLyBhZGQgZW50aXRpZXNcbiAgcmF3RHJhZnRDb250ZW50U3RhdGUgPSBlbmNvZGVSYXdFbnRpdHlNYXAoY29udGVudFN0YXRlLCByYXdEcmFmdENvbnRlbnRTdGF0ZSk7XG5cbiAgcmV0dXJuIHJhd0RyYWZ0Q29udGVudFN0YXRlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0RnJvbURyYWZ0U3RhdGVUb1JhdzsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0RWRpdG9yUGxhY2Vob2xkZXIucmVhY3RcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgY3ggPSByZXF1aXJlKCdmYmpzL2xpYi9jeCcpO1xuXG4vKipcbiAqIFRoaXMgY29tcG9uZW50IGlzIHJlc3BvbnNpYmxlIGZvciByZW5kZXJpbmcgcGxhY2Vob2xkZXIgdGV4dCBmb3IgdGhlXG4gKiBgRHJhZnRFZGl0b3JgIGNvbXBvbmVudC5cbiAqXG4gKiBPdmVycmlkZSBwbGFjZWhvbGRlciBzdHlsZSB2aWEgQ1NTLlxuICovXG52YXIgRHJhZnRFZGl0b3JQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEcmFmdEVkaXRvclBsYWNlaG9sZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcmFmdEVkaXRvclBsYWNlaG9sZGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcmFmdEVkaXRvclBsYWNlaG9sZGVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgRHJhZnRFZGl0b3JQbGFjZWhvbGRlci5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnRleHQgIT09IG5leHRQcm9wcy50ZXh0IHx8IHRoaXMucHJvcHMuZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkuZ2V0SGFzRm9jdXMoKSAhPT0gbmV4dFByb3BzLmVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLmdldEhhc0ZvY3VzKCk7XG4gIH07XG5cbiAgRHJhZnRFZGl0b3JQbGFjZWhvbGRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBoYXNGb2N1cyA9IHRoaXMucHJvcHMuZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkuZ2V0SGFzRm9jdXMoKTtcblxuICAgIHZhciBjbGFzc05hbWUgPSBjeCh7XG4gICAgICAncHVibGljL0RyYWZ0RWRpdG9yUGxhY2Vob2xkZXIvcm9vdCc6IHRydWUsXG4gICAgICAncHVibGljL0RyYWZ0RWRpdG9yUGxhY2Vob2xkZXIvaGFzRm9jdXMnOiBoYXNGb2N1c1xuICAgIH0pO1xuXG4gICAgdmFyIGNvbnRlbnRTdHlsZSA9IHtcbiAgICAgIHdoaXRlU3BhY2U6ICdwcmUtd3JhcCdcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjeCgncHVibGljL0RyYWZ0RWRpdG9yUGxhY2Vob2xkZXIvaW5uZXInKSxcbiAgICAgICAgICBpZDogdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5SUQsXG4gICAgICAgICAgc3R5bGU6IGNvbnRlbnRTdHlsZSB9LFxuICAgICAgICB0aGlzLnByb3BzLnRleHRcbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBEcmFmdEVkaXRvclBsYWNlaG9sZGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RWRpdG9yUGxhY2Vob2xkZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXREcmFmdEVkaXRvclNlbGVjdGlvblxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25XaXRoTm9kZXMgPSByZXF1aXJlKCcuL2dldERyYWZ0RWRpdG9yU2VsZWN0aW9uV2l0aE5vZGVzJyk7XG5cbi8qKlxuICogQ29udmVydCB0aGUgY3VycmVudCBzZWxlY3Rpb24gcmFuZ2UgdG8gYW4gYW5jaG9yL2ZvY3VzIHBhaXIgb2Ygb2Zmc2V0IGtleXNcbiAqIGFuZCB2YWx1ZXMgdGhhdCBjYW4gYmUgaW50ZXJwcmV0ZWQgYnkgY29tcG9uZW50cy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIHJvb3QpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGdsb2JhbC5nZXRTZWxlY3Rpb24oKTtcblxuICAvLyBObyBhY3RpdmUgc2VsZWN0aW9uLlxuICBpZiAoc2VsZWN0aW9uLnJhbmdlQ291bnQgPT09IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0aW9uU3RhdGU6IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLnNldCgnaGFzRm9jdXMnLCBmYWxzZSksXG4gICAgICBuZWVkc1JlY292ZXJ5OiBmYWxzZVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25XaXRoTm9kZXMoZWRpdG9yU3RhdGUsIHJvb3QsIHNlbGVjdGlvbi5hbmNob3JOb2RlLCBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LCBzZWxlY3Rpb24uZm9jdXNOb2RlLCBzZWxlY3Rpb24uZm9jdXNPZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldERyYWZ0RWRpdG9yU2VsZWN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZWRpdE9uU2VsZWN0XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcbnZhciBSZWFjdERPTSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb24gPSByZXF1aXJlKCcuL2dldERyYWZ0RWRpdG9yU2VsZWN0aW9uJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbmZ1bmN0aW9uIGVkaXRPblNlbGVjdChlZGl0b3IpIHtcbiAgaWYgKGVkaXRvci5fYmxvY2tTZWxlY3RFdmVudHMgfHwgZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZSAhPT0gZWRpdG9yLnByb3BzLmVkaXRvclN0YXRlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGVkaXRvclN0YXRlID0gZWRpdG9yLnByb3BzLmVkaXRvclN0YXRlO1xuICB2YXIgZWRpdG9yTm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGVkaXRvci5lZGl0b3JDb250YWluZXIpO1xuICAhZWRpdG9yTm9kZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdNaXNzaW5nIGVkaXRvck5vZGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICEoZWRpdG9yTm9kZS5maXJzdENoaWxkIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2VkaXRvck5vZGUuZmlyc3RDaGlsZCBpcyBub3QgYW4gSFRNTEVsZW1lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBkb2N1bWVudFNlbGVjdGlvbiA9IGdldERyYWZ0RWRpdG9yU2VsZWN0aW9uKGVkaXRvclN0YXRlLCBlZGl0b3JOb2RlLmZpcnN0Q2hpbGQpO1xuICB2YXIgdXBkYXRlZFNlbGVjdGlvblN0YXRlID0gZG9jdW1lbnRTZWxlY3Rpb24uc2VsZWN0aW9uU3RhdGU7XG5cbiAgaWYgKHVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSAhPT0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkpIHtcbiAgICBpZiAoZG9jdW1lbnRTZWxlY3Rpb24ubmVlZHNSZWNvdmVyeSkge1xuICAgICAgZWRpdG9yU3RhdGUgPSBFZGl0b3JTdGF0ZS5mb3JjZVNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgdXBkYXRlZFNlbGVjdGlvblN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWRpdG9yU3RhdGUgPSBFZGl0b3JTdGF0ZS5hY2NlcHRTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIHVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSk7XG4gICAgfVxuICAgIGVkaXRvci51cGRhdGUoZWRpdG9yU3RhdGUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWRpdE9uU2VsZWN0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgc3BsaXRUZXh0SW50b1RleHRCbG9ja3NcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIE5FV0xJTkVfUkVHRVggPSAvXFxyXFxuP3xcXG4vZztcblxuZnVuY3Rpb24gc3BsaXRUZXh0SW50b1RleHRCbG9ja3ModGV4dCkge1xuICByZXR1cm4gdGV4dC5zcGxpdChORVdMSU5FX1JFR0VYKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzcGxpdFRleHRJbnRvVGV4dEJsb2NrczsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGFkanVzdEJsb2NrRGVwdGhGb3JDb250ZW50U3RhdGVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gYWRqdXN0QmxvY2tEZXB0aEZvckNvbnRlbnRTdGF0ZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBhZGp1c3RtZW50LCBtYXhEZXB0aCkge1xuICB2YXIgc3RhcnRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydEtleSgpO1xuICB2YXIgZW5kS2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kS2V5KCk7XG4gIHZhciBibG9ja01hcCA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja01hcCgpO1xuICB2YXIgYmxvY2tzID0gYmxvY2tNYXAudG9TZXEoKS5za2lwVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gc3RhcnRLZXk7XG4gIH0pLnRha2VVbnRpbChmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBrID09PSBlbmRLZXk7XG4gIH0pLmNvbmNhdChbW2VuZEtleSwgYmxvY2tNYXAuZ2V0KGVuZEtleSldXSkubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgIHZhciBkZXB0aCA9IGJsb2NrLmdldERlcHRoKCkgKyBhZGp1c3RtZW50O1xuICAgIGRlcHRoID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oZGVwdGgsIG1heERlcHRoKSk7XG4gICAgcmV0dXJuIGJsb2NrLnNldCgnZGVwdGgnLCBkZXB0aCk7XG4gIH0pO1xuXG4gIGJsb2NrTWFwID0gYmxvY2tNYXAubWVyZ2UoYmxvY2tzKTtcblxuICByZXR1cm4gY29udGVudFN0YXRlLm1lcmdlKHtcbiAgICBibG9ja01hcDogYmxvY2tNYXAsXG4gICAgc2VsZWN0aW9uQmVmb3JlOiBzZWxlY3Rpb25TdGF0ZSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGVcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWRqdXN0QmxvY2tEZXB0aEZvckNvbnRlbnRTdGF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFVSSSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVVJJKHVyaSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVUkkpO1xuXG4gICAgdGhpcy5fdXJpID0gdXJpO1xuICB9XG5cbiAgVVJJLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl91cmk7XG4gIH07XG5cbiAgcmV0dXJuIFVSSTtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBVUkk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdFBhc3RlUHJvY2Vzc29yXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgX2V4dGVuZHMgPSBfYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgQ2hhcmFjdGVyTWV0YWRhdGEgPSByZXF1aXJlKCcuL0NoYXJhY3Rlck1ldGFkYXRhJyk7XG52YXIgQ29udGVudEJsb2NrID0gcmVxdWlyZSgnLi9Db250ZW50QmxvY2snKTtcbnZhciBDb250ZW50QmxvY2tOb2RlID0gcmVxdWlyZSgnLi9Db250ZW50QmxvY2tOb2RlJyk7XG52YXIgRHJhZnRGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuL0RyYWZ0RmVhdHVyZUZsYWdzJyk7XG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbnZhciBjb252ZXJ0RnJvbUhUTUx0b0NvbnRlbnRCbG9ja3MgPSByZXF1aXJlKCcuL2NvbnZlcnRGcm9tSFRNTFRvQ29udGVudEJsb2NrcycpO1xudmFyIGdlbmVyYXRlUmFuZG9tS2V5ID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVJhbmRvbUtleScpO1xudmFyIGdldFNhZmVCb2R5RnJvbUhUTUwgPSByZXF1aXJlKCcuL2dldFNhZmVCb2R5RnJvbUhUTUwnKTtcbnZhciBzYW5pdGl6ZURyYWZ0VGV4dCA9IHJlcXVpcmUoJy4vc2FuaXRpemVEcmFmdFRleHQnKTtcblxudmFyIExpc3QgPSBJbW11dGFibGUuTGlzdCxcbiAgICBSZXBlYXQgPSBJbW11dGFibGUuUmVwZWF0O1xuXG5cbnZhciBleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQgPSBEcmFmdEZlYXR1cmVGbGFncy5kcmFmdF90cmVlX2RhdGFfc3VwcG9ydDtcbnZhciBDb250ZW50QmxvY2tSZWNvcmQgPSBleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQgPyBDb250ZW50QmxvY2tOb2RlIDogQ29udGVudEJsb2NrO1xuXG52YXIgRHJhZnRQYXN0ZVByb2Nlc3NvciA9IHtcbiAgcHJvY2Vzc0hUTUw6IGZ1bmN0aW9uIHByb2Nlc3NIVE1MKGh0bWwsIGJsb2NrUmVuZGVyTWFwKSB7XG4gICAgcmV0dXJuIGNvbnZlcnRGcm9tSFRNTHRvQ29udGVudEJsb2NrcyhodG1sLCBnZXRTYWZlQm9keUZyb21IVE1MLCBibG9ja1JlbmRlck1hcCk7XG4gIH0sXG4gIHByb2Nlc3NUZXh0OiBmdW5jdGlvbiBwcm9jZXNzVGV4dCh0ZXh0QmxvY2tzLCBjaGFyYWN0ZXIsIHR5cGUpIHtcbiAgICByZXR1cm4gdGV4dEJsb2Nrcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgdGV4dExpbmUsIGluZGV4KSB7XG4gICAgICB0ZXh0TGluZSA9IHNhbml0aXplRHJhZnRUZXh0KHRleHRMaW5lKTtcbiAgICAgIHZhciBrZXkgPSBnZW5lcmF0ZVJhbmRvbUtleSgpO1xuXG4gICAgICB2YXIgYmxvY2tOb2RlQ29uZmlnID0ge1xuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgdGV4dDogdGV4dExpbmUsXG4gICAgICAgIGNoYXJhY3Rlckxpc3Q6IExpc3QoUmVwZWF0KGNoYXJhY3RlciwgdGV4dExpbmUubGVuZ3RoKSlcbiAgICAgIH07XG5cbiAgICAgIC8vIG5leHQgYmxvY2sgdXBkYXRlcyBwcmV2aW91cyBibG9ja1xuICAgICAgaWYgKGV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCAmJiBpbmRleCAhPT0gMCkge1xuICAgICAgICB2YXIgcHJldlNpYmxpbmdJbmRleCA9IGluZGV4IC0gMTtcbiAgICAgICAgLy8gdXBkYXRlIHByZXZpb3VzIGJsb2NrXG4gICAgICAgIHZhciBwcmV2aW91c0Jsb2NrID0gYWNjW3ByZXZTaWJsaW5nSW5kZXhdID0gYWNjW3ByZXZTaWJsaW5nSW5kZXhdLm1lcmdlKHtcbiAgICAgICAgICBuZXh0U2libGluZzoga2V5XG4gICAgICAgIH0pO1xuICAgICAgICBibG9ja05vZGVDb25maWcgPSBfZXh0ZW5kcyh7fSwgYmxvY2tOb2RlQ29uZmlnLCB7XG4gICAgICAgICAgcHJldlNpYmxpbmc6IHByZXZpb3VzQmxvY2suZ2V0S2V5KClcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGFjYy5wdXNoKG5ldyBDb250ZW50QmxvY2tSZWNvcmQoYmxvY2tOb2RlQ29uZmlnKSk7XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0UGFzdGVQcm9jZXNzb3I7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlZGl0T25QYXN0ZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQmxvY2tNYXBCdWlsZGVyID0gcmVxdWlyZSgnLi9CbG9ja01hcEJ1aWxkZXInKTtcbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyTWV0YWRhdGEnKTtcbnZhciBEYXRhVHJhbnNmZXIgPSByZXF1aXJlKCdmYmpzL2xpYi9EYXRhVHJhbnNmZXInKTtcbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZSgnLi9EcmFmdE1vZGlmaWVyJyk7XG52YXIgRHJhZnRQYXN0ZVByb2Nlc3NvciA9IHJlcXVpcmUoJy4vRHJhZnRQYXN0ZVByb2Nlc3NvcicpO1xudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xudmFyIFJpY2hUZXh0RWRpdG9yVXRpbCA9IHJlcXVpcmUoJy4vUmljaFRleHRFZGl0b3JVdGlsJyk7XG5cbnZhciBnZXRFbnRpdHlLZXlGb3JTZWxlY3Rpb24gPSByZXF1aXJlKCcuL2dldEVudGl0eUtleUZvclNlbGVjdGlvbicpO1xudmFyIGdldFRleHRDb250ZW50RnJvbUZpbGVzID0gcmVxdWlyZSgnLi9nZXRUZXh0Q29udGVudEZyb21GaWxlcycpO1xudmFyIGlzRXZlbnRIYW5kbGVkID0gcmVxdWlyZSgnLi9pc0V2ZW50SGFuZGxlZCcpO1xudmFyIHNwbGl0VGV4dEludG9UZXh0QmxvY2tzID0gcmVxdWlyZSgnLi9zcGxpdFRleHRJbnRvVGV4dEJsb2NrcycpO1xuXG4vKipcbiAqIFBhc3RlIGNvbnRlbnQuXG4gKi9cbmZ1bmN0aW9uIGVkaXRPblBhc3RlKGVkaXRvciwgZSkge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIHZhciBkYXRhID0gbmV3IERhdGFUcmFuc2ZlcihlLmNsaXBib2FyZERhdGEpO1xuXG4gIC8vIEdldCBmaWxlcywgdW5sZXNzIHRoaXMgaXMgbGlrZWx5IHRvIGJlIGEgc3RyaW5nIHRoZSB1c2VyIHdhbnRzIGlubGluZS5cbiAgaWYgKCFkYXRhLmlzUmljaFRleHQoKSkge1xuICAgIHZhciBmaWxlcyA9IGRhdGEuZ2V0RmlsZXMoKTtcbiAgICB2YXIgZGVmYXVsdEZpbGVUZXh0ID0gZGF0YS5nZXRUZXh0KCk7XG4gICAgaWYgKGZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIEFsbG93IGN1c3RvbWl6ZWQgcGFzdGUgaGFuZGxpbmcgZm9yIGltYWdlcywgZXRjLiBPdGhlcndpc2UsIGZhbGxcbiAgICAgIC8vIHRocm91Z2ggdG8gaW5zZXJ0IHRleHQgY29udGVudHMgaW50byB0aGUgZWRpdG9yLlxuICAgICAgaWYgKGVkaXRvci5wcm9wcy5oYW5kbGVQYXN0ZWRGaWxlcyAmJiBpc0V2ZW50SGFuZGxlZChlZGl0b3IucHJvcHMuaGFuZGxlUGFzdGVkRmlsZXMoZmlsZXMpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGdldFRleHRDb250ZW50RnJvbUZpbGVzKGZpbGVzLCBmdW5jdGlvbiAoIC8qc3RyaW5nKi9maWxlVGV4dCkge1xuICAgICAgICBmaWxlVGV4dCA9IGZpbGVUZXh0IHx8IGRlZmF1bHRGaWxlVGV4dDtcbiAgICAgICAgaWYgKCFmaWxlVGV4dCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlZGl0b3JTdGF0ZSA9IGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGU7XG4gICAgICAgIHZhciBibG9ja3MgPSBzcGxpdFRleHRJbnRvVGV4dEJsb2NrcyhmaWxlVGV4dCk7XG4gICAgICAgIHZhciBjaGFyYWN0ZXIgPSBDaGFyYWN0ZXJNZXRhZGF0YS5jcmVhdGUoe1xuICAgICAgICAgIHN0eWxlOiBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50SW5saW5lU3R5bGUoKSxcbiAgICAgICAgICBlbnRpdHk6IGdldEVudGl0eUtleUZvclNlbGVjdGlvbihlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSlcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBjdXJyZW50QmxvY2tUeXBlID0gUmljaFRleHRFZGl0b3JVdGlsLmdldEN1cnJlbnRCbG9ja1R5cGUoZWRpdG9yU3RhdGUpO1xuXG4gICAgICAgIHZhciB0ZXh0ID0gRHJhZnRQYXN0ZVByb2Nlc3Nvci5wcm9jZXNzVGV4dChibG9ja3MsIGNoYXJhY3RlciwgY3VycmVudEJsb2NrVHlwZSk7XG4gICAgICAgIHZhciBmcmFnbWVudCA9IEJsb2NrTWFwQnVpbGRlci5jcmVhdGVGcm9tQXJyYXkodGV4dCk7XG5cbiAgICAgICAgdmFyIHdpdGhJbnNlcnRlZFRleHQgPSBEcmFmdE1vZGlmaWVyLnJlcGxhY2VXaXRoRnJhZ21lbnQoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCksIGZyYWdtZW50KTtcblxuICAgICAgICBlZGl0b3IudXBkYXRlKEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIHdpdGhJbnNlcnRlZFRleHQsICdpbnNlcnQtZnJhZ21lbnQnKSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0ZXh0QmxvY2tzID0gW107XG4gIHZhciB0ZXh0ID0gZGF0YS5nZXRUZXh0KCk7XG4gIHZhciBodG1sID0gZGF0YS5nZXRIVE1MKCk7XG4gIHZhciBlZGl0b3JTdGF0ZSA9IGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGU7XG5cbiAgaWYgKGVkaXRvci5wcm9wcy5oYW5kbGVQYXN0ZWRUZXh0ICYmIGlzRXZlbnRIYW5kbGVkKGVkaXRvci5wcm9wcy5oYW5kbGVQYXN0ZWRUZXh0KHRleHQsIGh0bWwsIGVkaXRvclN0YXRlKSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGV4dCkge1xuICAgIHRleHRCbG9ja3MgPSBzcGxpdFRleHRJbnRvVGV4dEJsb2Nrcyh0ZXh0KTtcbiAgfVxuXG4gIGlmICghZWRpdG9yLnByb3BzLnN0cmlwUGFzdGVkU3R5bGVzKSB7XG4gICAgLy8gSWYgdGhlIHRleHQgZnJvbSB0aGUgcGFzdGUgZXZlbnQgaXMgcmljaCBjb250ZW50IHRoYXQgbWF0Y2hlcyB3aGF0IHdlXG4gICAgLy8gYWxyZWFkeSBoYXZlIG9uIHRoZSBpbnRlcm5hbCBjbGlwYm9hcmQsIGFzc3VtZSB0aGF0IHdlIHNob3VsZCBqdXN0IHVzZVxuICAgIC8vIHRoZSBjbGlwYm9hcmQgZnJhZ21lbnQgZm9yIHRoZSBwYXN0ZS4gVGhpcyB3aWxsIGFsbG93IHVzIHRvIHByZXNlcnZlXG4gICAgLy8gc3R5bGluZyBhbmQgZW50aXRpZXMsIGlmIGFueSBhcmUgcHJlc2VudC4gTm90ZSB0aGF0IG5ld2xpbmVzIGFyZVxuICAgIC8vIHN0cmlwcGVkIGR1cmluZyBjb21wYXJpc29uIC0tIHRoaXMgaXMgYmVjYXVzZSBjb3B5L3Bhc3RlIHdpdGhpbiB0aGVcbiAgICAvLyBlZGl0b3IgaW4gRmlyZWZveCBhbmQgSUUgd2lsbCBub3QgaW5jbHVkZSBlbXB0eSBsaW5lcy4gVGhlIHJlc3VsdGluZ1xuICAgIC8vIHBhc3RlIHdpbGwgcHJlc2VydmUgdGhlIG5ld2xpbmVzIGNvcnJlY3RseS5cbiAgICB2YXIgaW50ZXJuYWxDbGlwYm9hcmQgPSBlZGl0b3IuZ2V0Q2xpcGJvYXJkKCk7XG4gICAgaWYgKGRhdGEuaXNSaWNoVGV4dCgpICYmIGludGVybmFsQ2xpcGJvYXJkKSB7XG4gICAgICBpZiAoXG4gICAgICAvLyBJZiB0aGUgZWRpdG9yS2V5IGlzIHByZXNlbnQgaW4gdGhlIHBhc3RlZCBIVE1MLCBpdCBzaG91bGQgYmUgc2FmZSB0b1xuICAgICAgLy8gYXNzdW1lIHRoaXMgaXMgYW4gaW50ZXJuYWwgcGFzdGUuXG4gICAgICBodG1sLmluZGV4T2YoZWRpdG9yLmdldEVkaXRvcktleSgpKSAhPT0gLTEgfHxcbiAgICAgIC8vIFRoZSBjb3B5IG1heSBoYXZlIGJlZW4gbWFkZSB3aXRoaW4gYSBzaW5nbGUgYmxvY2ssIGluIHdoaWNoIGNhc2UgdGhlXG4gICAgICAvLyBlZGl0b3Iga2V5IHdvbid0IGJlIHBhcnQgb2YgdGhlIHBhc3RlLiBJbiB0aGlzIGNhc2UsIGp1c3QgY2hlY2tcbiAgICAgIC8vIHdoZXRoZXIgdGhlIHBhc3RlZCB0ZXh0IG1hdGNoZXMgdGhlIGludGVybmFsIGNsaXBib2FyZC5cbiAgICAgIHRleHRCbG9ja3MubGVuZ3RoID09PSAxICYmIGludGVybmFsQ2xpcGJvYXJkLnNpemUgPT09IDEgJiYgaW50ZXJuYWxDbGlwYm9hcmQuZmlyc3QoKS5nZXRUZXh0KCkgPT09IHRleHQpIHtcbiAgICAgICAgZWRpdG9yLnVwZGF0ZShpbnNlcnRGcmFnbWVudChlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlLCBpbnRlcm5hbENsaXBib2FyZCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpbnRlcm5hbENsaXBib2FyZCAmJiBkYXRhLnR5cGVzLmluY2x1ZGVzKCdjb20uYXBwbGUud2ViYXJjaGl2ZScpICYmICFkYXRhLnR5cGVzLmluY2x1ZGVzKCd0ZXh0L2h0bWwnKSAmJiBhcmVUZXh0QmxvY2tzQW5kQ2xpcGJvYXJkRXF1YWwodGV4dEJsb2NrcywgaW50ZXJuYWxDbGlwYm9hcmQpKSB7XG4gICAgICAvLyBTYWZhcmkgZG9lcyBub3QgcHJvcGVybHkgc3RvcmUgdGV4dC9odG1sIGluIHNvbWUgY2FzZXMuXG4gICAgICAvLyBVc2UgdGhlIGludGVybmFsQ2xpcGJvYXJkIGlmIHByZXNlbnQgYW5kIGVxdWFsIHRvIHdoYXQgaXMgb25cbiAgICAgIC8vIHRoZSBjbGlwYm9hcmQuIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTk4OTMuXG4gICAgICBlZGl0b3IudXBkYXRlKGluc2VydEZyYWdtZW50KGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGUsIGludGVybmFsQ2xpcGJvYXJkKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgaXMgaHRtbCBwYXN0ZSBkYXRhLCB0cnkgdG8gcGFyc2UgdGhhdC5cbiAgICBpZiAoaHRtbCkge1xuICAgICAgdmFyIGh0bWxGcmFnbWVudCA9IERyYWZ0UGFzdGVQcm9jZXNzb3IucHJvY2Vzc0hUTUwoaHRtbCwgZWRpdG9yLnByb3BzLmJsb2NrUmVuZGVyTWFwKTtcbiAgICAgIGlmIChodG1sRnJhZ21lbnQpIHtcbiAgICAgICAgdmFyIGNvbnRlbnRCbG9ja3MgPSBodG1sRnJhZ21lbnQuY29udGVudEJsb2NrcyxcbiAgICAgICAgICAgIGVudGl0eU1hcCA9IGh0bWxGcmFnbWVudC5lbnRpdHlNYXA7XG5cbiAgICAgICAgaWYgKGNvbnRlbnRCbG9ja3MpIHtcbiAgICAgICAgICB2YXIgaHRtbE1hcCA9IEJsb2NrTWFwQnVpbGRlci5jcmVhdGVGcm9tQXJyYXkoY29udGVudEJsb2Nrcyk7XG4gICAgICAgICAgZWRpdG9yLnVwZGF0ZShpbnNlcnRGcmFnbWVudChlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlLCBodG1sTWFwLCBlbnRpdHlNYXApKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGNyZWF0ZSBhIG5ldyBmcmFnbWVudCBmcm9tIG91ciBwYXN0ZWQgdGV4dC4gQWxzb1xuICAgIC8vIGVtcHR5IHRoZSBpbnRlcm5hbCBjbGlwYm9hcmQsIHNpbmNlIGl0J3Mgbm8gbG9uZ2VyIHZhbGlkLlxuICAgIGVkaXRvci5zZXRDbGlwYm9hcmQobnVsbCk7XG4gIH1cblxuICBpZiAodGV4dEJsb2Nrcy5sZW5ndGgpIHtcbiAgICB2YXIgY2hhcmFjdGVyID0gQ2hhcmFjdGVyTWV0YWRhdGEuY3JlYXRlKHtcbiAgICAgIHN0eWxlOiBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50SW5saW5lU3R5bGUoKSxcbiAgICAgIGVudGl0eTogZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uKGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCksIGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpKVxuICAgIH0pO1xuXG4gICAgdmFyIGN1cnJlbnRCbG9ja1R5cGUgPSBSaWNoVGV4dEVkaXRvclV0aWwuZ2V0Q3VycmVudEJsb2NrVHlwZShlZGl0b3JTdGF0ZSk7XG5cbiAgICB2YXIgdGV4dEZyYWdtZW50ID0gRHJhZnRQYXN0ZVByb2Nlc3Nvci5wcm9jZXNzVGV4dCh0ZXh0QmxvY2tzLCBjaGFyYWN0ZXIsIGN1cnJlbnRCbG9ja1R5cGUpO1xuXG4gICAgdmFyIHRleHRNYXAgPSBCbG9ja01hcEJ1aWxkZXIuY3JlYXRlRnJvbUFycmF5KHRleHRGcmFnbWVudCk7XG4gICAgZWRpdG9yLnVwZGF0ZShpbnNlcnRGcmFnbWVudChlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlLCB0ZXh0TWFwKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0RnJhZ21lbnQoZWRpdG9yU3RhdGUsIGZyYWdtZW50LCBlbnRpdHlNYXApIHtcbiAgdmFyIG5ld0NvbnRlbnQgPSBEcmFmdE1vZGlmaWVyLnJlcGxhY2VXaXRoRnJhZ21lbnQoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCksIGZyYWdtZW50KTtcbiAgLy8gVE9ETzogbWVyZ2UgdGhlIGVudGl0eSBtYXAgb25jZSB3ZSBzdG9wIHVzaW5nIERyYWZ0RW50aXR5XG4gIC8vIGxpa2UgdGhpczpcbiAgLy8gY29uc3QgbWVyZ2VkRW50aXR5TWFwID0gbmV3Q29udGVudC5nZXRFbnRpdHlNYXAoKS5tZXJnZShlbnRpdHlNYXApO1xuXG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBuZXdDb250ZW50LnNldCgnZW50aXR5TWFwJywgZW50aXR5TWFwKSwgJ2luc2VydC1mcmFnbWVudCcpO1xufVxuXG5mdW5jdGlvbiBhcmVUZXh0QmxvY2tzQW5kQ2xpcGJvYXJkRXF1YWwodGV4dEJsb2NrcywgYmxvY2tNYXApIHtcbiAgcmV0dXJuIHRleHRCbG9ja3MubGVuZ3RoID09PSBibG9ja01hcC5zaXplICYmIGJsb2NrTWFwLnZhbHVlU2VxKCkuZXZlcnkoZnVuY3Rpb24gKGJsb2NrLCBpaSkge1xuICAgIHJldHVybiBibG9jay5nZXRUZXh0KCkgPT09IHRleHRCbG9ja3NbaWldO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25QYXN0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGtleUNvbW1hbmRVbmRvXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcblxuZnVuY3Rpb24ga2V5Q29tbWFuZFVuZG8oZSwgZWRpdG9yU3RhdGUsIHVwZGF0ZUZuKSB7XG4gIHZhciB1bmRvbmVTdGF0ZSA9IEVkaXRvclN0YXRlLnVuZG8oZWRpdG9yU3RhdGUpO1xuXG4gIC8vIElmIHRoZSBsYXN0IGNoYW5nZSB0byBvY2N1ciB3YXMgYSBzcGVsbGNoZWNrIGNoYW5nZSwgYWxsb3cgdGhlIHVuZG9cbiAgLy8gZXZlbnQgdG8gZmFsbCB0aHJvdWdoIHRvIHRoZSBicm93c2VyLiBUaGlzIGFsbG93cyB0aGUgYnJvd3NlciB0byByZWNvcmRcbiAgLy8gdGhlIHVud2FudGVkIGNoYW5nZSwgd2hpY2ggc2hvdWxkIHNvb24gbGVhZCBpdCB0byBsZWFybiBub3QgdG8gc3VnZ2VzdFxuICAvLyB0aGUgY29ycmVjdGlvbiBhZ2Fpbi5cbiAgaWYgKGVkaXRvclN0YXRlLmdldExhc3RDaGFuZ2VUeXBlKCkgPT09ICdzcGVsbGNoZWNrLWNoYW5nZScpIHtcbiAgICB2YXIgbmF0aXZlbHlSZW5kZXJlZENvbnRlbnQgPSB1bmRvbmVTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHVwZGF0ZUZuKEVkaXRvclN0YXRlLnNldCh1bmRvbmVTdGF0ZSwgeyBuYXRpdmVseVJlbmRlcmVkQ29udGVudDogbmF0aXZlbHlSZW5kZXJlZENvbnRlbnQgfSkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIE90aGVyaXdzZSwgbWFuYWdlIHRoZSB1bmRvIGJlaGF2aW9yIG1hbnVhbGx5LlxuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGlmICghZWRpdG9yU3RhdGUuZ2V0TmF0aXZlbHlSZW5kZXJlZENvbnRlbnQoKSkge1xuICAgIHVwZGF0ZUZuKHVuZG9uZVN0YXRlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBUcmlnZ2VyIGEgcmUtcmVuZGVyIHdpdGggdGhlIGN1cnJlbnQgY29udGVudCBzdGF0ZSB0byBlbnN1cmUgdGhhdCB0aGVcbiAgLy8gY29tcG9uZW50IHRyZWUgaGFzIHVwLXRvLWRhdGUgcHJvcHMgZm9yIGNvbXBhcmlzb24uXG4gIHVwZGF0ZUZuKEVkaXRvclN0YXRlLnNldChlZGl0b3JTdGF0ZSwgeyBuYXRpdmVseVJlbmRlcmVkQ29udGVudDogbnVsbCB9KSk7XG5cbiAgLy8gV2FpdCB0byBlbnN1cmUgdGhhdCB0aGUgcmUtcmVuZGVyIGhhcyBvY2N1cnJlZCBiZWZvcmUgcGVyZm9ybWluZ1xuICAvLyB0aGUgdW5kbyBhY3Rpb24uXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHVwZGF0ZUZuKHVuZG9uZVN0YXRlKTtcbiAgfSwgMCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Q29tbWFuZFVuZG87IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBrZXlDb21tYW5kVHJhbnNwb3NlQ2hhcmFjdGVyc1xuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRNb2RpZmllciA9IHJlcXVpcmUoJy4vRHJhZnRNb2RpZmllcicpO1xudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xuXG52YXIgZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQgPSByZXF1aXJlKCcuL2dldENvbnRlbnRTdGF0ZUZyYWdtZW50Jyk7XG5cbi8qKlxuICogVHJhbnNwb3NlIHRoZSBjaGFyYWN0ZXJzIG9uIGVpdGhlciBzaWRlIG9mIGEgY29sbGFwc2VkIGN1cnNvciwgb3JcbiAqIGlmIHRoZSBjdXJzb3IgaXMgYXQgdGhlIGVuZCBvZiB0aGUgYmxvY2ssIHRyYW5zcG9zZSB0aGUgbGFzdCB0d29cbiAqIGNoYXJhY3RlcnMuXG4gKi9cbmZ1bmN0aW9uIGtleUNvbW1hbmRUcmFuc3Bvc2VDaGFyYWN0ZXJzKGVkaXRvclN0YXRlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgaWYgKCFzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgfVxuXG4gIHZhciBvZmZzZXQgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yT2Zmc2V0KCk7XG4gIGlmIChvZmZzZXQgPT09IDApIHtcbiAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gIH1cblxuICB2YXIgYmxvY2tLZXkgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yS2V5KCk7XG4gIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgdmFyIGJsb2NrID0gY29udGVudC5nZXRCbG9ja0ZvcktleShibG9ja0tleSk7XG4gIHZhciBsZW5ndGggPSBibG9jay5nZXRMZW5ndGgoKTtcblxuICAvLyBOb3RoaW5nIHRvIHRyYW5zcG9zZSBpZiB0aGVyZSBhcmVuJ3QgdHdvIGNoYXJhY3RlcnMuXG4gIGlmIChsZW5ndGggPD0gMSkge1xuICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgfVxuXG4gIHZhciByZW1vdmFsUmFuZ2U7XG4gIHZhciBmaW5hbFNlbGVjdGlvbjtcblxuICBpZiAob2Zmc2V0ID09PSBsZW5ndGgpIHtcbiAgICAvLyBUaGUgY3Vyc29yIGlzIGF0IHRoZSBlbmQgb2YgdGhlIGJsb2NrLiBTd2FwIHRoZSBsYXN0IHR3byBjaGFyYWN0ZXJzLlxuICAgIHJlbW92YWxSYW5nZSA9IHNlbGVjdGlvbi5zZXQoJ2FuY2hvck9mZnNldCcsIG9mZnNldCAtIDEpO1xuICAgIGZpbmFsU2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuICB9IGVsc2Uge1xuICAgIHJlbW92YWxSYW5nZSA9IHNlbGVjdGlvbi5zZXQoJ2ZvY3VzT2Zmc2V0Jywgb2Zmc2V0ICsgMSk7XG4gICAgZmluYWxTZWxlY3Rpb24gPSByZW1vdmFsUmFuZ2Uuc2V0KCdhbmNob3JPZmZzZXQnLCBvZmZzZXQgKyAxKTtcbiAgfVxuXG4gIC8vIEV4dHJhY3QgdGhlIGNoYXJhY3RlciB0byBtb3ZlIGFzIGEgZnJhZ21lbnQuIFRoaXMgcHJlc2VydmVzIGl0c1xuICAvLyBzdHlsaW5nIGFuZCBlbnRpdHksIGlmIGFueS5cbiAgdmFyIG1vdmVkRnJhZ21lbnQgPSBnZXRDb250ZW50U3RhdGVGcmFnbWVudChjb250ZW50LCByZW1vdmFsUmFuZ2UpO1xuICB2YXIgYWZ0ZXJSZW1vdmFsID0gRHJhZnRNb2RpZmllci5yZW1vdmVSYW5nZShjb250ZW50LCByZW1vdmFsUmFuZ2UsICdiYWNrd2FyZCcpO1xuXG4gIC8vIEFmdGVyIHRoZSByZW1vdmFsLCB0aGUgaW5zZXJ0aW9uIHRhcmdldCBpcyBvbmUgY2hhcmFjdGVyIGJhY2suXG4gIHZhciBzZWxlY3Rpb25BZnRlciA9IGFmdGVyUmVtb3ZhbC5nZXRTZWxlY3Rpb25BZnRlcigpO1xuICB2YXIgdGFyZ2V0T2Zmc2V0ID0gc2VsZWN0aW9uQWZ0ZXIuZ2V0QW5jaG9yT2Zmc2V0KCkgLSAxO1xuICB2YXIgdGFyZ2V0UmFuZ2UgPSBzZWxlY3Rpb25BZnRlci5tZXJnZSh7XG4gICAgYW5jaG9yT2Zmc2V0OiB0YXJnZXRPZmZzZXQsXG4gICAgZm9jdXNPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9KTtcblxuICB2YXIgYWZ0ZXJJbnNlcnQgPSBEcmFmdE1vZGlmaWVyLnJlcGxhY2VXaXRoRnJhZ21lbnQoYWZ0ZXJSZW1vdmFsLCB0YXJnZXRSYW5nZSwgbW92ZWRGcmFnbWVudCk7XG5cbiAgdmFyIG5ld0VkaXRvclN0YXRlID0gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgYWZ0ZXJJbnNlcnQsICdpbnNlcnQtZnJhZ21lbnQnKTtcblxuICByZXR1cm4gRWRpdG9yU3RhdGUuYWNjZXB0U2VsZWN0aW9uKG5ld0VkaXRvclN0YXRlLCBmaW5hbFNlbGVjdGlvbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Q29tbWFuZFRyYW5zcG9zZUNoYXJhY3RlcnM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBrZXlDb21tYW5kUGxhaW5EZWxldGVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xudmFyIFVuaWNvZGVVdGlscyA9IHJlcXVpcmUoJ2ZianMvbGliL1VuaWNvZGVVdGlscycpO1xuXG52YXIgbW92ZVNlbGVjdGlvbkZvcndhcmQgPSByZXF1aXJlKCcuL21vdmVTZWxlY3Rpb25Gb3J3YXJkJyk7XG52YXIgcmVtb3ZlVGV4dFdpdGhTdHJhdGVneSA9IHJlcXVpcmUoJy4vcmVtb3ZlVGV4dFdpdGhTdHJhdGVneScpO1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgc2VsZWN0ZWQgcmFuZ2UuIElmIHRoZSBjdXJzb3IgaXMgY29sbGFwc2VkLCByZW1vdmUgdGhlIGZvbGxvd2luZ1xuICogY2hhcmFjdGVyLiBUaGlzIG9wZXJhdGlvbiBpcyBVbmljb2RlLWF3YXJlLCBzbyByZW1vdmluZyBhIHNpbmdsZSBjaGFyYWN0ZXJcbiAqIHdpbGwgcmVtb3ZlIGEgc3Vycm9nYXRlIHBhaXIgcHJvcGVybHkgYXMgd2VsbC5cbiAqL1xuZnVuY3Rpb24ga2V5Q29tbWFuZFBsYWluRGVsZXRlKGVkaXRvclN0YXRlKSB7XG4gIHZhciBhZnRlclJlbW92YWwgPSByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5KGVkaXRvclN0YXRlLCBmdW5jdGlvbiAoc3RyYXRlZ3lTdGF0ZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBzdHJhdGVneVN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIHZhciBjb250ZW50ID0gc3RyYXRlZ3lTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciBrZXkgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yS2V5KCk7XG4gICAgdmFyIG9mZnNldCA9IHNlbGVjdGlvbi5nZXRBbmNob3JPZmZzZXQoKTtcbiAgICB2YXIgY2hhckFoZWFkID0gY29udGVudC5nZXRCbG9ja0ZvcktleShrZXkpLmdldFRleHQoKVtvZmZzZXRdO1xuICAgIHJldHVybiBtb3ZlU2VsZWN0aW9uRm9yd2FyZChzdHJhdGVneVN0YXRlLCBjaGFyQWhlYWQgPyBVbmljb2RlVXRpbHMuZ2V0VVRGMTZMZW5ndGgoY2hhckFoZWFkLCAwKSA6IDEpO1xuICB9LCAnZm9yd2FyZCcpO1xuXG4gIGlmIChhZnRlclJlbW92YWwgPT09IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkpIHtcbiAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIGFmdGVyUmVtb3ZhbC5zZXQoJ3NlbGVjdGlvbkJlZm9yZScsIHNlbGVjdGlvbiksIHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpID8gJ2RlbGV0ZS1jaGFyYWN0ZXInIDogJ3JlbW92ZS1yYW5nZScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmRQbGFpbkRlbGV0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGtleUNvbW1hbmRQbGFpbkJhY2tzcGFjZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG52YXIgVW5pY29kZVV0aWxzID0gcmVxdWlyZSgnZmJqcy9saWIvVW5pY29kZVV0aWxzJyk7XG5cbnZhciBtb3ZlU2VsZWN0aW9uQmFja3dhcmQgPSByZXF1aXJlKCcuL21vdmVTZWxlY3Rpb25CYWNrd2FyZCcpO1xudmFyIHJlbW92ZVRleHRXaXRoU3RyYXRlZ3kgPSByZXF1aXJlKCcuL3JlbW92ZVRleHRXaXRoU3RyYXRlZ3knKTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIHNlbGVjdGVkIHJhbmdlLiBJZiB0aGUgY3Vyc29yIGlzIGNvbGxhcHNlZCwgcmVtb3ZlIHRoZSBwcmVjZWRpbmdcbiAqIGNoYXJhY3Rlci4gVGhpcyBvcGVyYXRpb24gaXMgVW5pY29kZS1hd2FyZSwgc28gcmVtb3ZpbmcgYSBzaW5nbGUgY2hhcmFjdGVyXG4gKiB3aWxsIHJlbW92ZSBhIHN1cnJvZ2F0ZSBwYWlyIHByb3Blcmx5IGFzIHdlbGwuXG4gKi9cbmZ1bmN0aW9uIGtleUNvbW1hbmRQbGFpbkJhY2tzcGFjZShlZGl0b3JTdGF0ZSkge1xuICB2YXIgYWZ0ZXJSZW1vdmFsID0gcmVtb3ZlVGV4dFdpdGhTdHJhdGVneShlZGl0b3JTdGF0ZSwgZnVuY3Rpb24gKHN0cmF0ZWd5U3RhdGUpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gc3RyYXRlZ3lTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgY29udGVudCA9IHN0cmF0ZWd5U3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIga2V5ID0gc2VsZWN0aW9uLmdldEFuY2hvcktleSgpO1xuICAgIHZhciBvZmZzZXQgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yT2Zmc2V0KCk7XG4gICAgdmFyIGNoYXJCZWhpbmQgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGtleSkuZ2V0VGV4dCgpW29mZnNldCAtIDFdO1xuICAgIHJldHVybiBtb3ZlU2VsZWN0aW9uQmFja3dhcmQoc3RyYXRlZ3lTdGF0ZSwgY2hhckJlaGluZCA/IFVuaWNvZGVVdGlscy5nZXRVVEYxNkxlbmd0aChjaGFyQmVoaW5kLCAwKSA6IDEpO1xuICB9LCAnYmFja3dhcmQnKTtcblxuICBpZiAoYWZ0ZXJSZW1vdmFsID09PSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpKSB7XG4gICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgYWZ0ZXJSZW1vdmFsLnNldCgnc2VsZWN0aW9uQmVmb3JlJywgc2VsZWN0aW9uKSwgc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgPyAnYmFja3NwYWNlLWNoYXJhY3RlcicgOiAncmVtb3ZlLXJhbmdlJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Q29tbWFuZFBsYWluQmFja3NwYWNlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUga2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub1N0YXJ0T2ZCbG9ja1xuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG5cbi8qKlxuICogQ29sbGFwc2Ugc2VsZWN0aW9uIGF0IHRoZSBzdGFydCBvZiB0aGUgZmlyc3Qgc2VsZWN0ZWQgYmxvY2suIFRoaXMgaXMgdXNlZFxuICogZm9yIEZpcmVmb3ggdmVyc2lvbnMgdGhhdCBhdHRlbXB0IHRvIG5hdmlnYXRlIGZvcndhcmQvYmFja3dhcmQgaW5zdGVhZCBvZlxuICogbW92aW5nIHRoZSBjdXJzb3IuIE90aGVyIGJyb3dzZXJzIGFyZSBhYmxlIHRvIG1vdmUgdGhlIGN1cnNvciBuYXRpdmVseS5cbiAqL1xuZnVuY3Rpb24ga2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub1N0YXJ0T2ZCbG9jayhlZGl0b3JTdGF0ZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBzdGFydEtleSA9IHNlbGVjdGlvbi5nZXRTdGFydEtleSgpO1xuICByZXR1cm4gRWRpdG9yU3RhdGUuc2V0KGVkaXRvclN0YXRlLCB7XG4gICAgc2VsZWN0aW9uOiBzZWxlY3Rpb24ubWVyZ2Uoe1xuICAgICAgYW5jaG9yS2V5OiBzdGFydEtleSxcbiAgICAgIGFuY2hvck9mZnNldDogMCxcbiAgICAgIGZvY3VzS2V5OiBzdGFydEtleSxcbiAgICAgIGZvY3VzT2Zmc2V0OiAwLFxuICAgICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgICB9KSxcbiAgICBmb3JjZVNlbGVjdGlvbjogdHJ1ZVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlDb21tYW5kTW92ZVNlbGVjdGlvblRvU3RhcnRPZkJsb2NrOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUga2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub0VuZE9mQmxvY2tcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xuXG4vKipcbiAqIFNlZSBjb21tZW50IGZvciBgbW92ZVNlbGVjdGlvblRvU3RhcnRPZkJsb2NrYC5cbiAqL1xuZnVuY3Rpb24ga2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub0VuZE9mQmxvY2soZWRpdG9yU3RhdGUpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICB2YXIgZW5kS2V5ID0gc2VsZWN0aW9uLmdldEVuZEtleSgpO1xuICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gIHZhciB0ZXh0TGVuZ3RoID0gY29udGVudC5nZXRCbG9ja0ZvcktleShlbmRLZXkpLmdldExlbmd0aCgpO1xuICByZXR1cm4gRWRpdG9yU3RhdGUuc2V0KGVkaXRvclN0YXRlLCB7XG4gICAgc2VsZWN0aW9uOiBzZWxlY3Rpb24ubWVyZ2Uoe1xuICAgICAgYW5jaG9yS2V5OiBlbmRLZXksXG4gICAgICBhbmNob3JPZmZzZXQ6IHRleHRMZW5ndGgsXG4gICAgICBmb2N1c0tleTogZW5kS2V5LFxuICAgICAgZm9jdXNPZmZzZXQ6IHRleHRMZW5ndGgsXG4gICAgICBpc0JhY2t3YXJkOiBmYWxzZVxuICAgIH0pLFxuICAgIGZvcmNlU2VsZWN0aW9uOiB0cnVlXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9FbmRPZkJsb2NrOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUga2V5Q29tbWFuZEluc2VydE5ld2xpbmVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0TW9kaWZpZXIgPSByZXF1aXJlKCcuL0RyYWZ0TW9kaWZpZXInKTtcbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcblxuZnVuY3Rpb24ga2V5Q29tbWFuZEluc2VydE5ld2xpbmUoZWRpdG9yU3RhdGUpIHtcbiAgdmFyIGNvbnRlbnRTdGF0ZSA9IERyYWZ0TW9kaWZpZXIuc3BsaXRCbG9jayhlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSk7XG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBjb250ZW50U3RhdGUsICdzcGxpdC1ibG9jaycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmRJbnNlcnROZXdsaW5lOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUga2V5Q29tbWFuZERlbGV0ZVdvcmRcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0UmVtb3ZhYmxlV29yZCA9IHJlcXVpcmUoJy4vRHJhZnRSZW1vdmFibGVXb3JkJyk7XG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG5cbnZhciBtb3ZlU2VsZWN0aW9uRm9yd2FyZCA9IHJlcXVpcmUoJy4vbW92ZVNlbGVjdGlvbkZvcndhcmQnKTtcbnZhciByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5ID0gcmVxdWlyZSgnLi9yZW1vdmVUZXh0V2l0aFN0cmF0ZWd5Jyk7XG5cbi8qKlxuICogRGVsZXRlIHRoZSB3b3JkIHRoYXQgaXMgcmlnaHQgb2YgdGhlIGN1cnNvciwgYXMgd2VsbCBhcyBhbnkgc3BhY2VzIG9yXG4gKiBwdW5jdHVhdGlvbiBiZWZvcmUgdGhlIHdvcmQuXG4gKi9cbmZ1bmN0aW9uIGtleUNvbW1hbmREZWxldGVXb3JkKGVkaXRvclN0YXRlKSB7XG4gIHZhciBhZnRlclJlbW92YWwgPSByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5KGVkaXRvclN0YXRlLCBmdW5jdGlvbiAoc3RyYXRlZ3lTdGF0ZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBzdHJhdGVneVN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIHZhciBvZmZzZXQgPSBzZWxlY3Rpb24uZ2V0U3RhcnRPZmZzZXQoKTtcbiAgICB2YXIga2V5ID0gc2VsZWN0aW9uLmdldFN0YXJ0S2V5KCk7XG4gICAgdmFyIGNvbnRlbnQgPSBzdHJhdGVneVN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIHRleHQgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGtleSkuZ2V0VGV4dCgpLnNsaWNlKG9mZnNldCk7XG4gICAgdmFyIHRvUmVtb3ZlID0gRHJhZnRSZW1vdmFibGVXb3JkLmdldEZvcndhcmQodGV4dCk7XG5cbiAgICAvLyBJZiB0aGVyZSBhcmUgbm8gd29yZHMgaW4gZnJvbnQgb2YgdGhlIGN1cnNvciwgcmVtb3ZlIHRoZSBuZXdsaW5lLlxuICAgIHJldHVybiBtb3ZlU2VsZWN0aW9uRm9yd2FyZChzdHJhdGVneVN0YXRlLCB0b1JlbW92ZS5sZW5ndGggfHwgMSk7XG4gIH0sICdmb3J3YXJkJyk7XG5cbiAgaWYgKGFmdGVyUmVtb3ZhbCA9PT0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSkge1xuICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgfVxuXG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBhZnRlclJlbW92YWwsICdyZW1vdmUtcmFuZ2UnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlDb21tYW5kRGVsZXRlV29yZDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBAc3R1YlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBcXHUwMGExLVxcdTAwYjFcXHUwMGI0LVxcdTAwYjhcXHUwMGJhXFx1MDBiYlxcdTAwYmZcbi8vICAgICAgICAgICAgIGlzIGxhdGluIHN1cHBsZW1lbnQgcHVuY3R1YXRpb24gZXhjZXB0IGZyYWN0aW9ucyBhbmQgc3VwZXJzY3JpcHRcbi8vICAgICAgICAgICAgIG51bWJlcnNcbi8vIFxcdTIwMTAtXFx1MjAyN1xcdTIwMzAtXFx1MjA1ZVxuLy8gICAgICAgICAgICAgaXMgcHVuY3R1YXRpb24gZnJvbSB0aGUgZ2VuZXJhbCBwdW5jdHVhdGlvbiBibG9jazpcbi8vICAgICAgICAgICAgIHdlaXJkIHF1b3RlcywgY29tbWFzLCBidWxsZXRzLCBkYXNoZXMsIGV0Yy5cbi8vIFxcdTMwZmJcXHUzMDAxXFx1MzAwMlxcdTMwMDgtXFx1MzAxMVxcdTMwMTQtXFx1MzAxZlxuLy8gICAgICAgICAgICAgaXMgQ0pLIHB1bmN0dWF0aW9uXG4vLyBcXHVmZjFhLVxcdWZmMWZcXHVmZjAxLVxcdWZmMGZcXHVmZjNiLVxcdWZmNDBcXHVmZjViLVxcdWZmNjVcbi8vICAgICAgICAgICAgIGlzIHNvbWUgZnVsbC13aWR0aC9oYWxmLXdpZHRoIHB1bmN0dWF0aW9uXG4vLyBcXHUyRTJFXFx1MDYxZlxcdTA2NmEtXFx1MDY2Y1xcdTA2MWJcXHUwNjBjXFx1MDYwZFxcdUZEM2VcXHVGRDNGXG4vLyAgICAgICAgICAgICBpcyBzb21lIEFyYWJpYyBwdW5jdHVhdGlvbiBtYXJrc1xuLy8gXFx1MTgwMVxcdTA5NjRcXHUxMDRhXFx1MTA0YlxuLy8gICAgICAgICAgICAgaXMgbWlzYy4gb3RoZXIgbGFuZ3VhZ2UgcHVuY3R1YXRpb24gbWFya3NcblxudmFyIFBVTkNUVUFUSU9OID0gJ1suLCsqPyR8I3t9KClcXCdcXFxcXlxcXFwtXFxcXFtcXFxcXVxcXFxcXFxcXFxcXC8hQCVcIn49PD5fOjsnICsgJ1xcdTMwRkJcXHUzMDAxXFx1MzAwMlxcdTMwMDgtXFx1MzAxMVxcdTMwMTQtXFx1MzAxRlxcdUZGMUEtXFx1RkYxRlxcdUZGMDEtXFx1RkYwRicgKyAnXFx1RkYzQi1cXHVGRjQwXFx1RkY1Qi1cXHVGRjY1XFx1MkUyRVxcdTA2MUZcXHUwNjZBLVxcdTA2NkNcXHUwNjFCXFx1MDYwQ1xcdTA2MEQnICsgJ1xcdUZEM0VcXHVGRDNGXFx1MTgwMVxcdTA5NjRcXHUxMDRBXFx1MTA0QlxcdTIwMTAtXFx1MjAyN1xcdTIwMzAtXFx1MjA1RScgKyAnXFx4QTEtXFx4QjFcXHhCNC1cXHhCOFxceEJBXFx4QkJcXHhCRl0nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0UHVuY3R1YXRpb246IGZ1bmN0aW9uIGdldFB1bmN0dWF0aW9uKCkge1xuICAgIHJldHVybiBQVU5DVFVBVElPTjtcbiAgfVxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGtleUNvbW1hbmRCYWNrc3BhY2VXb3JkXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdFJlbW92YWJsZVdvcmQgPSByZXF1aXJlKCcuL0RyYWZ0UmVtb3ZhYmxlV29yZCcpO1xudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xuXG52YXIgbW92ZVNlbGVjdGlvbkJhY2t3YXJkID0gcmVxdWlyZSgnLi9tb3ZlU2VsZWN0aW9uQmFja3dhcmQnKTtcbnZhciByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5ID0gcmVxdWlyZSgnLi9yZW1vdmVUZXh0V2l0aFN0cmF0ZWd5Jyk7XG5cbi8qKlxuICogRGVsZXRlIHRoZSB3b3JkIHRoYXQgaXMgbGVmdCBvZiB0aGUgY3Vyc29yLCBhcyB3ZWxsIGFzIGFueSBzcGFjZXMgb3JcbiAqIHB1bmN0dWF0aW9uIGFmdGVyIHRoZSB3b3JkLlxuICovXG5mdW5jdGlvbiBrZXlDb21tYW5kQmFja3NwYWNlV29yZChlZGl0b3JTdGF0ZSkge1xuICB2YXIgYWZ0ZXJSZW1vdmFsID0gcmVtb3ZlVGV4dFdpdGhTdHJhdGVneShlZGl0b3JTdGF0ZSwgZnVuY3Rpb24gKHN0cmF0ZWd5U3RhdGUpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gc3RyYXRlZ3lTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCk7XG4gICAgLy8gSWYgdGhlcmUgYXJlIG5vIHdvcmRzIGJlZm9yZSB0aGUgY3Vyc29yLCByZW1vdmUgdGhlIHByZWNlZGluZyBuZXdsaW5lLlxuICAgIGlmIChvZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiBtb3ZlU2VsZWN0aW9uQmFja3dhcmQoc3RyYXRlZ3lTdGF0ZSwgMSk7XG4gICAgfVxuICAgIHZhciBrZXkgPSBzZWxlY3Rpb24uZ2V0U3RhcnRLZXkoKTtcbiAgICB2YXIgY29udGVudCA9IHN0cmF0ZWd5U3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgdGV4dCA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoa2V5KS5nZXRUZXh0KCkuc2xpY2UoMCwgb2Zmc2V0KTtcbiAgICB2YXIgdG9SZW1vdmUgPSBEcmFmdFJlbW92YWJsZVdvcmQuZ2V0QmFja3dhcmQodGV4dCk7XG4gICAgcmV0dXJuIG1vdmVTZWxlY3Rpb25CYWNrd2FyZChzdHJhdGVneVN0YXRlLCB0b1JlbW92ZS5sZW5ndGggfHwgMSk7XG4gIH0sICdiYWNrd2FyZCcpO1xuXG4gIGlmIChhZnRlclJlbW92YWwgPT09IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkpIHtcbiAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gIH1cblxuICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgYWZ0ZXJSZW1vdmFsLCAncmVtb3ZlLXJhbmdlJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Q29tbWFuZEJhY2tzcGFjZVdvcmQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGV4cGFuZFJhbmdlVG9TdGFydE9mTGluZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxudmFyIFVuaWNvZGVVdGlscyA9IHJlcXVpcmUoJ2ZianMvbGliL1VuaWNvZGVVdGlscycpO1xuXG52YXIgZ2V0UmFuZ2VDbGllbnRSZWN0cyA9IHJlcXVpcmUoJy4vZ2V0UmFuZ2VDbGllbnRSZWN0cycpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFJldHVybiB0aGUgY29tcHV0ZWQgbGluZSBoZWlnaHQsIGluIHBpeGVscywgZm9yIHRoZSBwcm92aWRlZCBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBnZXRMaW5lSGVpZ2h0UHgoZWxlbWVudCkge1xuICB2YXIgY29tcHV0ZWQgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5zdHlsZS5mb250RmFtaWx5ID0gY29tcHV0ZWQuZm9udEZhbWlseTtcbiAgZGl2LnN0eWxlLmZvbnRTaXplID0gY29tcHV0ZWQuZm9udFNpemU7XG4gIGRpdi5zdHlsZS5mb250U3R5bGUgPSBjb21wdXRlZC5mb250U3R5bGU7XG4gIGRpdi5zdHlsZS5mb250V2VpZ2h0ID0gY29tcHV0ZWQuZm9udFdlaWdodDtcbiAgZGl2LnN0eWxlLmxpbmVIZWlnaHQgPSBjb21wdXRlZC5saW5lSGVpZ2h0O1xuICBkaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICBkaXYudGV4dENvbnRlbnQgPSAnTSc7XG5cbiAgdmFyIGRvY3VtZW50Qm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICFkb2N1bWVudEJvZHkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWlzc2luZyBkb2N1bWVudC5ib2R5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIC8vIGZvcmNlZCBsYXlvdXQgaGVyZVxuICBkb2N1bWVudEJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgdmFyIHJlY3QgPSBkaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGRvY3VtZW50Qm9keS5yZW1vdmVDaGlsZChkaXYpO1xuXG4gIHJldHVybiByZWN0LmhlaWdodDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gd2hldGhlciBldmVyeSBDbGllbnRSZWN0IGluIHRoZSBwcm92aWRlZCBsaXN0IGxpZXMgb24gdGhlIHNhbWUgbGluZS5cbiAqXG4gKiBXZSBhc3N1bWUgdGhhdCB0aGUgcmVjdHMgb24gdGhlIHNhbWUgbGluZSBhbGwgY29udGFpbiB0aGUgYmFzZWxpbmUsIHNvIHRoZVxuICogbG93ZXN0IHRvcCBsaW5lIG5lZWRzIHRvIGJlIGFib3ZlIHRoZSBoaWdoZXN0IGJvdHRvbSBsaW5lIChpLmUuLCBpZiB5b3Ugd2VyZVxuICogdG8gcHJvamVjdCB0aGUgcmVjdHMgb250byB0aGUgeS1heGlzLCB0aGVpciBpbnRlcnNlY3Rpb24gd291bGQgYmUgbm9uZW1wdHkpLlxuICpcbiAqIEluIGFkZGl0aW9uLCB3ZSByZXF1aXJlIHRoYXQgbm8gdHdvIGJveGVzIGFyZSBsaW5lSGVpZ2h0IChvciBtb3JlKSBhcGFydCBhdFxuICogZWl0aGVyIHRvcCBvciBib3R0b20sIHdoaWNoIGhlbHBzIHByb3RlY3QgYWdhaW5zdCBmYWxzZSBwb3NpdGl2ZXMgZm9yIGZvbnRzXG4gKiB3aXRoIGV4dHJlbWVseSBsYXJnZSBnbHlwaCBoZWlnaHRzIChlLmcuLCB3aXRoIGEgZm9udCBzaXplIG9mIDE3cHgsIFphcGZpbm9cbiAqIHByb2R1Y2VzIHJlY3RzIG9mIGhlaWdodCA1OHB4ISkuXG4gKi9cbmZ1bmN0aW9uIGFyZVJlY3RzT25PbmVMaW5lKHJlY3RzLCBsaW5lSGVpZ2h0KSB7XG4gIHZhciBtaW5Ub3AgPSBJbmZpbml0eTtcbiAgdmFyIG1pbkJvdHRvbSA9IEluZmluaXR5O1xuICB2YXIgbWF4VG9wID0gLUluZmluaXR5O1xuICB2YXIgbWF4Qm90dG9tID0gLUluZmluaXR5O1xuXG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCByZWN0cy5sZW5ndGg7IGlpKyspIHtcbiAgICB2YXIgcmVjdCA9IHJlY3RzW2lpXTtcbiAgICBpZiAocmVjdC53aWR0aCA9PT0gMCB8fCByZWN0LndpZHRoID09PSAxKSB7XG4gICAgICAvLyBXaGVuIGEgcmFuZ2Ugc3RhcnRzIG9yIGVuZHMgYSBzb2Z0IHdyYXAsIG1hbnkgYnJvd3NlcnMgKENocm9tZSwgSUUsXG4gICAgICAvLyBTYWZhcmkpIGluY2x1ZGUgYW4gZW1wdHkgcmVjdCBvbiB0aGUgcHJldmlvdXMgb3IgbmV4dCBsaW5lLiBXaGVuIHRoZVxuICAgICAgLy8gdGV4dCBsaWVzIGluIGEgY29udGFpbmVyIHdob3NlIHBvc2l0aW9uIGlzIG5vdCBpbnRlZ3JhbCAoZS5nLiwgZnJvbVxuICAgICAgLy8gbWFyZ2luOiBhdXRvKSwgU2FmYXJpIG1ha2VzIHRoZXNlIGVtcHR5IHJlY3RzIGhhdmUgd2lkdGggMSAoaW5zdGVhZCBvZlxuICAgICAgLy8gMCkuIEhhdmluZyBvbmUtcGl4ZWwtd2lkZSBjaGFyYWN0ZXJzIHNlZW1zIHVubGlrZWx5IChhbmQgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gcmVwb3J0IHdpZHRocyBpbiBzdWJwaXhlbCBwcmVjaXNpb24gYW55d2F5KSBzbyBpdCdzIHJlbGF0aXZlbHkgc2FmZSB0b1xuICAgICAgLy8gc2tpcCBvdmVyIHRoZW0uXG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgbWluVG9wID0gTWF0aC5taW4obWluVG9wLCByZWN0LnRvcCk7XG4gICAgbWluQm90dG9tID0gTWF0aC5taW4obWluQm90dG9tLCByZWN0LmJvdHRvbSk7XG4gICAgbWF4VG9wID0gTWF0aC5tYXgobWF4VG9wLCByZWN0LnRvcCk7XG4gICAgbWF4Qm90dG9tID0gTWF0aC5tYXgobWF4Qm90dG9tLCByZWN0LmJvdHRvbSk7XG4gIH1cblxuICByZXR1cm4gbWF4VG9wIDw9IG1pbkJvdHRvbSAmJiBtYXhUb3AgLSBtaW5Ub3AgPCBsaW5lSGVpZ2h0ICYmIG1heEJvdHRvbSAtIG1pbkJvdHRvbSA8IGxpbmVIZWlnaHQ7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsZW5ndGggb2YgYSBub2RlLCBhcyB1c2VkIGJ5IFJhbmdlIG9mZnNldHMuXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVMZW5ndGgobm9kZSkge1xuICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9kb20vI2NvbmNlcHQtbm9kZS1sZW5ndGhcbiAgc3dpdGNoIChub2RlLm5vZGVUeXBlKSB7XG4gICAgY2FzZSBOb2RlLkRPQ1VNRU5UX1RZUEVfTk9ERTpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgTm9kZS5URVhUX05PREU6XG4gICAgY2FzZSBOb2RlLlBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERTpcbiAgICBjYXNlIE5vZGUuQ09NTUVOVF9OT0RFOlxuICAgICAgcmV0dXJuIG5vZGUubGVuZ3RoO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgfVxufVxuXG4vKipcbiAqIEdpdmVuIGEgY29sbGFwc2VkIHJhbmdlLCBtb3ZlIHRoZSBzdGFydCBwb3NpdGlvbiBiYWNrd2FyZHMgYXMgZmFyIGFzXG4gKiBwb3NzaWJsZSB3aGlsZSB0aGUgcmFuZ2Ugc3RpbGwgc3BhbnMgb25seSBhIHNpbmdsZSBsaW5lLlxuICovXG5mdW5jdGlvbiBleHBhbmRSYW5nZVRvU3RhcnRPZkxpbmUocmFuZ2UpIHtcbiAgIXJhbmdlLmNvbGxhcHNlZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdleHBhbmRSYW5nZVRvU3RhcnRPZkxpbmU6IFByb3ZpZGVkIHJhbmdlIGlzIG5vdCBjb2xsYXBzZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByYW5nZSA9IHJhbmdlLmNsb25lUmFuZ2UoKTtcblxuICB2YXIgY29udGFpbmluZ0VsZW1lbnQgPSByYW5nZS5zdGFydENvbnRhaW5lcjtcbiAgaWYgKGNvbnRhaW5pbmdFbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgY29udGFpbmluZ0VsZW1lbnQgPSBjb250YWluaW5nRWxlbWVudC5wYXJlbnROb2RlO1xuICB9XG4gIHZhciBsaW5lSGVpZ2h0ID0gZ2V0TGluZUhlaWdodFB4KGNvbnRhaW5pbmdFbGVtZW50KTtcblxuICAvLyBJbWFnaW5lIG91ciB0ZXh0IGxvb2tzIGxpa2U6XG4gIC8vICAgPGRpdj48c3Bhbj5vbmNlIHVwb24gYSB0aW1lLCB0aGVyZSB3YXMgYSA8ZW0+Ym95XG4gIC8vICAgd2hvIGxpdmVkPC9lbT4gPC9zcGFuPjxxPjxzdHJvbmc+dW5kZXJeIHRoZVxuICAvLyAgIHN0YWlyczwvc3Ryb25nPiBpbiBhIHNtYWxsIGNsb3NldC48L3E+PC9kaXY+XG4gIC8vIHdoZXJlIHRoZSBjYXJldCByZXByZXNlbnRzIHRoZSBjdXJzb3IuIEZpcnN0LCB3ZSBjcmF3bCB1cCB0aGUgdHJlZSB1bnRpbFxuICAvLyB0aGUgcmFuZ2Ugc3BhbnMgbXVsdGlwbGUgbGluZXMgKHNldHRpbmcgdGhlIHN0YXJ0IHBvaW50IHRvIGJlZm9yZVxuICAvLyBcIjxzdHJvbmc+XCIsIHRoZW4gYmVmb3JlIFwiPGRpdj5cIiksIHRoZW4gYXQgZWFjaCBsZXZlbCB3ZSBkbyBhIHNlYXJjaCB0b1xuICAvLyBmaW5kIHRoZSBsYXRlc3QgcG9pbnQgd2hpY2ggaXMgc3RpbGwgb24gYSBwcmV2aW91cyBsaW5lLiBXZSdsbCBmaW5kIHRoYXRcbiAgLy8gdGhlIGJyZWFrIHBvaW50IGlzIGluc2lkZSB0aGUgc3BhbiwgdGhlbiBpbnNpZGUgdGhlIDxlbT4sIHRoZW4gaW4gaXRzIHRleHRcbiAgLy8gbm9kZSBjaGlsZCwgdGhlIGFjdHVhbCBicmVhayBwb2ludCBiZWZvcmUgXCJ3aG9cIi5cblxuICB2YXIgYmVzdENvbnRhaW5lciA9IHJhbmdlLmVuZENvbnRhaW5lcjtcbiAgdmFyIGJlc3RPZmZzZXQgPSByYW5nZS5lbmRPZmZzZXQ7XG4gIHJhbmdlLnNldFN0YXJ0KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCAwKTtcblxuICB3aGlsZSAoYXJlUmVjdHNPbk9uZUxpbmUoZ2V0UmFuZ2VDbGllbnRSZWN0cyhyYW5nZSksIGxpbmVIZWlnaHQpKSB7XG4gICAgYmVzdENvbnRhaW5lciA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xuICAgIGJlc3RPZmZzZXQgPSByYW5nZS5zdGFydE9mZnNldDtcbiAgICAhYmVzdENvbnRhaW5lci5wYXJlbnROb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0ZvdW5kIHVuZXhwZWN0ZWQgZGV0YWNoZWQgc3VidHJlZSB3aGVuIHRyYXZlcnNpbmcuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJhbmdlLnNldFN0YXJ0QmVmb3JlKGJlc3RDb250YWluZXIpO1xuICAgIGlmIChiZXN0Q29udGFpbmVyLm5vZGVUeXBlID09PSAxICYmIGdldENvbXB1dGVkU3R5bGUoYmVzdENvbnRhaW5lcikuZGlzcGxheSAhPT0gJ2lubGluZScpIHtcbiAgICAgIC8vIFRoZSBzdGFydCBvZiB0aGUgbGluZSBpcyBuZXZlciBpbiBhIGRpZmZlcmVudCBibG9jay1sZXZlbCBjb250YWluZXIuXG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvLyBJbiB0aGUgYWJvdmUgZXhhbXBsZSwgcmFuZ2Ugbm93IHNwYW5zIGZyb20gXCI8ZGl2PlwiIHRvIFwidW5kZXJcIixcbiAgLy8gYmVzdENvbnRhaW5lciBpcyA8ZGl2PiwgYW5kIGJlc3RPZmZzZXQgaXMgMSAoaW5kZXggb2YgPHE+IGluc2lkZSA8ZGl2PildLlxuICAvLyBQaWNraW5nIG91dCB3aGljaCBjaGlsZCB0byByZWN1cnNlIGludG8gaGVyZSBpcyBhIHNwZWNpYWwgY2FzZSBzaW5jZSB3ZVxuICAvLyBkb24ndCB3YW50IHRvIGNoZWNrIHBhc3QgPHE+IC0tIG9uY2Ugd2UgZmluZCB0aGF0IHRoZSBmaW5hbCByYW5nZSBzdGFydHNcbiAgLy8gaW4gPHNwYW4+LCB3ZSBjYW4gbG9vayBhdCBhbGwgb2YgaXRzIGNoaWxkcmVuIChhbmQgYWxsIG9mIHRoZWlyIGNoaWxkcmVuKVxuICAvLyB0byBmaW5kIHRoZSBicmVhayBwb2ludC5cblxuICAvLyBBdCBhbGwgdGltZXMsIChiZXN0Q29udGFpbmVyLCBiZXN0T2Zmc2V0KSBpcyB0aGUgbGF0ZXN0IHNpbmdsZS1saW5lIHN0YXJ0XG4gIC8vIHBvaW50IHRoYXQgd2Uga25vdyBvZi5cbiAgdmFyIGN1cnJlbnRDb250YWluZXIgPSBiZXN0Q29udGFpbmVyO1xuICB2YXIgbWF4SW5kZXhUb0NvbnNpZGVyID0gYmVzdE9mZnNldCAtIDE7XG5cbiAgZG8ge1xuICAgIHZhciBub2RlVmFsdWUgPSBjdXJyZW50Q29udGFpbmVyLm5vZGVWYWx1ZTtcblxuICAgIGZvciAodmFyIGlpID0gbWF4SW5kZXhUb0NvbnNpZGVyOyBpaSA+PSAwOyBpaS0tKSB7XG4gICAgICBpZiAobm9kZVZhbHVlICE9IG51bGwgJiYgaWkgPiAwICYmIFVuaWNvZGVVdGlscy5pc1N1cnJvZ2F0ZVBhaXIobm9kZVZhbHVlLCBpaSAtIDEpKSB7XG4gICAgICAgIC8vIFdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSBzdXJyb2dhdGUgcGFpciAtLSBza2lwIG92ZXIgc28gd2UgbmV2ZXJcbiAgICAgICAgLy8gcmV0dXJuIGEgcmFuZ2Ugd2l0aCBhbiBlbmRwb2ludCBpbiB0aGUgbWlkZGxlIG9mIGEgY29kZSBwb2ludC5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHJhbmdlLnNldFN0YXJ0KGN1cnJlbnRDb250YWluZXIsIGlpKTtcbiAgICAgIGlmIChhcmVSZWN0c09uT25lTGluZShnZXRSYW5nZUNsaWVudFJlY3RzKHJhbmdlKSwgbGluZUhlaWdodCkpIHtcbiAgICAgICAgYmVzdENvbnRhaW5lciA9IGN1cnJlbnRDb250YWluZXI7XG4gICAgICAgIGJlc3RPZmZzZXQgPSBpaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpaSA9PT0gLTEgfHwgY3VycmVudENvbnRhaW5lci5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gSWYgaWkgPT09IC0xLCB0aGVuIChiZXN0Q29udGFpbmVyLCBiZXN0T2Zmc2V0KSwgd2hpY2ggaXMgZXF1YWwgdG9cbiAgICAgIC8vIChjdXJyZW50Q29udGFpbmVyLCAwKSwgd2FzIGEgc2luZ2xlLWxpbmUgc3RhcnQgcG9pbnQgYnV0IGEgc3RhcnRcbiAgICAgIC8vIHBvaW50IGJlZm9yZSBjdXJyZW50Q29udGFpbmVyIHdhc24ndCwgc28gdGhlIGxpbmUgYnJlYWsgc2VlbXMgdG9cbiAgICAgIC8vIGhhdmUgb2NjdXJyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgY3VycmVudENvbnRhaW5lcidzIHN0YXJ0IHRhZ1xuICAgICAgLy9cbiAgICAgIC8vIElmIGN1cnJlbnRDb250YWluZXIuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAsIHdlJ3JlIGFscmVhZHkgYXQgYVxuICAgICAgLy8gdGVybWluYWwgbm9kZSAoZS5nLiwgdGV4dCBub2RlKSBhbmQgc2hvdWxkIHJldHVybiBvdXIgY3VycmVudCBiZXN0LlxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY3VycmVudENvbnRhaW5lciA9IGN1cnJlbnRDb250YWluZXIuY2hpbGROb2Rlc1tpaV07XG4gICAgbWF4SW5kZXhUb0NvbnNpZGVyID0gZ2V0Tm9kZUxlbmd0aChjdXJyZW50Q29udGFpbmVyKTtcbiAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgcmFuZ2Uuc2V0U3RhcnQoYmVzdENvbnRhaW5lciwgYmVzdE9mZnNldCk7XG4gIHJldHVybiByYW5nZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBhbmRSYW5nZVRvU3RhcnRPZkxpbmU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBrZXlDb21tYW5kQmFja3NwYWNlVG9TdGFydE9mTGluZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG5cbnZhciBleHBhbmRSYW5nZVRvU3RhcnRPZkxpbmUgPSByZXF1aXJlKCcuL2V4cGFuZFJhbmdlVG9TdGFydE9mTGluZScpO1xudmFyIGdldERyYWZ0RWRpdG9yU2VsZWN0aW9uV2l0aE5vZGVzID0gcmVxdWlyZSgnLi9nZXREcmFmdEVkaXRvclNlbGVjdGlvbldpdGhOb2RlcycpO1xudmFyIG1vdmVTZWxlY3Rpb25CYWNrd2FyZCA9IHJlcXVpcmUoJy4vbW92ZVNlbGVjdGlvbkJhY2t3YXJkJyk7XG52YXIgcmVtb3ZlVGV4dFdpdGhTdHJhdGVneSA9IHJlcXVpcmUoJy4vcmVtb3ZlVGV4dFdpdGhTdHJhdGVneScpO1xuXG5mdW5jdGlvbiBrZXlDb21tYW5kQmFja3NwYWNlVG9TdGFydE9mTGluZShlZGl0b3JTdGF0ZSkge1xuICB2YXIgYWZ0ZXJSZW1vdmFsID0gcmVtb3ZlVGV4dFdpdGhTdHJhdGVneShlZGl0b3JTdGF0ZSwgZnVuY3Rpb24gKHN0cmF0ZWd5U3RhdGUpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gc3RyYXRlZ3lTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgICBpZiAoc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgJiYgc2VsZWN0aW9uLmdldEFuY2hvck9mZnNldCgpID09PSAwKSB7XG4gICAgICByZXR1cm4gbW92ZVNlbGVjdGlvbkJhY2t3YXJkKHN0cmF0ZWd5U3RhdGUsIDEpO1xuICAgIH1cblxuICAgIHZhciBkb21TZWxlY3Rpb24gPSBnbG9iYWwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgdmFyIHJhbmdlID0gZG9tU2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG4gICAgcmFuZ2UgPSBleHBhbmRSYW5nZVRvU3RhcnRPZkxpbmUocmFuZ2UpO1xuXG4gICAgcmV0dXJuIGdldERyYWZ0RWRpdG9yU2VsZWN0aW9uV2l0aE5vZGVzKHN0cmF0ZWd5U3RhdGUsIG51bGwsIHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0LCByYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpLnNlbGVjdGlvblN0YXRlO1xuICB9LCAnYmFja3dhcmQnKTtcblxuICBpZiAoYWZ0ZXJSZW1vdmFsID09PSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpKSB7XG4gICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICB9XG5cbiAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIGFmdGVyUmVtb3ZhbCwgJ3JlbW92ZS1yYW5nZScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmRCYWNrc3BhY2VUb1N0YXJ0T2ZMaW5lOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU2Vjb25kYXJ5Q2xpcGJvYXJkXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZSgnLi9EcmFmdE1vZGlmaWVyJyk7XG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG5cbnZhciBnZXRDb250ZW50U3RhdGVGcmFnbWVudCA9IHJlcXVpcmUoJy4vZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQnKTtcbnZhciBudWxsdGhyb3dzID0gcmVxdWlyZSgnZmJqcy9saWIvbnVsbHRocm93cycpO1xuXG52YXIgY2xpcGJvYXJkID0gbnVsbDtcblxuLyoqXG4gKiBTb21lIHN5c3RlbXMgb2ZmZXIgYSBcInNlY29uZGFyeVwiIGNsaXBib2FyZCB0byBhbGxvdyBxdWljayBpbnRlcm5hbCBjdXRcbiAqIGFuZCBwYXN0ZSBiZWhhdmlvci4gRm9yIGluc3RhbmNlLCBDdHJsK0sgKGN1dCkgYW5kIEN0cmwrWSAocGFzdGUpLlxuICovXG52YXIgU2Vjb25kYXJ5Q2xpcGJvYXJkID0ge1xuICBjdXQ6IGZ1bmN0aW9uIGN1dChlZGl0b3JTdGF0ZSkge1xuICAgIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gICAgdmFyIHRhcmdldFJhbmdlID0gbnVsbDtcblxuICAgIGlmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgICAgdmFyIGFuY2hvcktleSA9IHNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKTtcbiAgICAgIHZhciBibG9ja0VuZCA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoYW5jaG9yS2V5KS5nZXRMZW5ndGgoKTtcblxuICAgICAgaWYgKGJsb2NrRW5kID09PSBzZWxlY3Rpb24uZ2V0QW5jaG9yT2Zmc2V0KCkpIHtcbiAgICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRSYW5nZSA9IHNlbGVjdGlvbi5zZXQoJ2ZvY3VzT2Zmc2V0JywgYmxvY2tFbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRSYW5nZSA9IHNlbGVjdGlvbjtcbiAgICB9XG5cbiAgICB0YXJnZXRSYW5nZSA9IG51bGx0aHJvd3ModGFyZ2V0UmFuZ2UpO1xuICAgIGNsaXBib2FyZCA9IGdldENvbnRlbnRTdGF0ZUZyYWdtZW50KGNvbnRlbnQsIHRhcmdldFJhbmdlKTtcblxuICAgIHZhciBhZnRlclJlbW92YWwgPSBEcmFmdE1vZGlmaWVyLnJlbW92ZVJhbmdlKGNvbnRlbnQsIHRhcmdldFJhbmdlLCAnZm9yd2FyZCcpO1xuXG4gICAgaWYgKGFmdGVyUmVtb3ZhbCA9PT0gY29udGVudCkge1xuICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICAgIH1cblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBhZnRlclJlbW92YWwsICdyZW1vdmUtcmFuZ2UnKTtcbiAgfSxcblxuICBwYXN0ZTogZnVuY3Rpb24gcGFzdGUoZWRpdG9yU3RhdGUpIHtcbiAgICBpZiAoIWNsaXBib2FyZCkge1xuICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICAgIH1cblxuICAgIHZhciBuZXdDb250ZW50ID0gRHJhZnRNb2RpZmllci5yZXBsYWNlV2l0aEZyYWdtZW50KGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCksIGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLCBjbGlwYm9hcmQpO1xuXG4gICAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIG5ld0NvbnRlbnQsICdpbnNlcnQtZnJhZ21lbnQnKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZWNvbmRhcnlDbGlwYm9hcmQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlZGl0T25LZXlEb3duXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZSgnLi9EcmFmdE1vZGlmaWVyJyk7XG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG52YXIgS2V5QmluZGluZ1V0aWwgPSByZXF1aXJlKCcuL0tleUJpbmRpbmdVdGlsJyk7XG52YXIgS2V5cyA9IHJlcXVpcmUoJ2ZianMvbGliL0tleXMnKTtcbnZhciBTZWNvbmRhcnlDbGlwYm9hcmQgPSByZXF1aXJlKCcuL1NlY29uZGFyeUNsaXBib2FyZCcpO1xudmFyIFVzZXJBZ2VudCA9IHJlcXVpcmUoJ2ZianMvbGliL1VzZXJBZ2VudCcpO1xuXG52YXIgaXNFdmVudEhhbmRsZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRIYW5kbGVkJyk7XG52YXIga2V5Q29tbWFuZEJhY2tzcGFjZVRvU3RhcnRPZkxpbmUgPSByZXF1aXJlKCcuL2tleUNvbW1hbmRCYWNrc3BhY2VUb1N0YXJ0T2ZMaW5lJyk7XG52YXIga2V5Q29tbWFuZEJhY2tzcGFjZVdvcmQgPSByZXF1aXJlKCcuL2tleUNvbW1hbmRCYWNrc3BhY2VXb3JkJyk7XG52YXIga2V5Q29tbWFuZERlbGV0ZVdvcmQgPSByZXF1aXJlKCcuL2tleUNvbW1hbmREZWxldGVXb3JkJyk7XG52YXIga2V5Q29tbWFuZEluc2VydE5ld2xpbmUgPSByZXF1aXJlKCcuL2tleUNvbW1hbmRJbnNlcnROZXdsaW5lJyk7XG52YXIga2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub0VuZE9mQmxvY2sgPSByZXF1aXJlKCcuL2tleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9FbmRPZkJsb2NrJyk7XG52YXIga2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub1N0YXJ0T2ZCbG9jayA9IHJlcXVpcmUoJy4va2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub1N0YXJ0T2ZCbG9jaycpO1xudmFyIGtleUNvbW1hbmRQbGFpbkJhY2tzcGFjZSA9IHJlcXVpcmUoJy4va2V5Q29tbWFuZFBsYWluQmFja3NwYWNlJyk7XG52YXIga2V5Q29tbWFuZFBsYWluRGVsZXRlID0gcmVxdWlyZSgnLi9rZXlDb21tYW5kUGxhaW5EZWxldGUnKTtcbnZhciBrZXlDb21tYW5kVHJhbnNwb3NlQ2hhcmFjdGVycyA9IHJlcXVpcmUoJy4va2V5Q29tbWFuZFRyYW5zcG9zZUNoYXJhY3RlcnMnKTtcbnZhciBrZXlDb21tYW5kVW5kbyA9IHJlcXVpcmUoJy4va2V5Q29tbWFuZFVuZG8nKTtcblxudmFyIGlzT3B0aW9uS2V5Q29tbWFuZCA9IEtleUJpbmRpbmdVdGlsLmlzT3B0aW9uS2V5Q29tbWFuZDtcblxudmFyIGlzQ2hyb21lID0gVXNlckFnZW50LmlzQnJvd3NlcignQ2hyb21lJyk7XG5cbi8qKlxuICogTWFwIGEgYERyYWZ0RWRpdG9yQ29tbWFuZGAgY29tbWFuZCB2YWx1ZSB0byBhIGNvcnJlc3BvbmRpbmcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG9uS2V5Q29tbWFuZChjb21tYW5kLCBlZGl0b3JTdGF0ZSkge1xuICBzd2l0Y2ggKGNvbW1hbmQpIHtcbiAgICBjYXNlICdyZWRvJzpcbiAgICAgIHJldHVybiBFZGl0b3JTdGF0ZS5yZWRvKGVkaXRvclN0YXRlKTtcbiAgICBjYXNlICdkZWxldGUnOlxuICAgICAgcmV0dXJuIGtleUNvbW1hbmRQbGFpbkRlbGV0ZShlZGl0b3JTdGF0ZSk7XG4gICAgY2FzZSAnZGVsZXRlLXdvcmQnOlxuICAgICAgcmV0dXJuIGtleUNvbW1hbmREZWxldGVXb3JkKGVkaXRvclN0YXRlKTtcbiAgICBjYXNlICdiYWNrc3BhY2UnOlxuICAgICAgcmV0dXJuIGtleUNvbW1hbmRQbGFpbkJhY2tzcGFjZShlZGl0b3JTdGF0ZSk7XG4gICAgY2FzZSAnYmFja3NwYWNlLXdvcmQnOlxuICAgICAgcmV0dXJuIGtleUNvbW1hbmRCYWNrc3BhY2VXb3JkKGVkaXRvclN0YXRlKTtcbiAgICBjYXNlICdiYWNrc3BhY2UtdG8tc3RhcnQtb2YtbGluZSc6XG4gICAgICByZXR1cm4ga2V5Q29tbWFuZEJhY2tzcGFjZVRvU3RhcnRPZkxpbmUoZWRpdG9yU3RhdGUpO1xuICAgIGNhc2UgJ3NwbGl0LWJsb2NrJzpcbiAgICAgIHJldHVybiBrZXlDb21tYW5kSW5zZXJ0TmV3bGluZShlZGl0b3JTdGF0ZSk7XG4gICAgY2FzZSAndHJhbnNwb3NlLWNoYXJhY3RlcnMnOlxuICAgICAgcmV0dXJuIGtleUNvbW1hbmRUcmFuc3Bvc2VDaGFyYWN0ZXJzKGVkaXRvclN0YXRlKTtcbiAgICBjYXNlICdtb3ZlLXNlbGVjdGlvbi10by1zdGFydC1vZi1ibG9jayc6XG4gICAgICByZXR1cm4ga2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub1N0YXJ0T2ZCbG9jayhlZGl0b3JTdGF0ZSk7XG4gICAgY2FzZSAnbW92ZS1zZWxlY3Rpb24tdG8tZW5kLW9mLWJsb2NrJzpcbiAgICAgIHJldHVybiBrZXlDb21tYW5kTW92ZVNlbGVjdGlvblRvRW5kT2ZCbG9jayhlZGl0b3JTdGF0ZSk7XG4gICAgY2FzZSAnc2Vjb25kYXJ5LWN1dCc6XG4gICAgICByZXR1cm4gU2Vjb25kYXJ5Q2xpcGJvYXJkLmN1dChlZGl0b3JTdGF0ZSk7XG4gICAgY2FzZSAnc2Vjb25kYXJ5LXBhc3RlJzpcbiAgICAgIHJldHVybiBTZWNvbmRhcnlDbGlwYm9hcmQucGFzdGUoZWRpdG9yU3RhdGUpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gIH1cbn1cblxuLyoqXG4gKiBJbnRlcmNlcHQga2V5ZG93biBiZWhhdmlvciB0byBoYW5kbGUga2V5cyBhbmQgY29tbWFuZHMgbWFudWFsbHksIGlmIGRlc2lyZWQuXG4gKlxuICogS2V5ZG93biBjb21iaW5hdGlvbnMgbWF5IGJlIG1hcHBlZCB0byBgRHJhZnRDb21tYW5kYCB2YWx1ZXMsIHdoaWNoIG1heVxuICogY29ycmVzcG9uZCB0byBjb21tYW5kIGZ1bmN0aW9ucyB0aGF0IG1vZGlmeSB0aGUgZWRpdG9yIG9yIGl0cyBjb250ZW50cy5cbiAqXG4gKiBTZWUgYGdldERlZmF1bHRLZXlCaW5kaW5nYCBmb3IgZGVmYXVsdHMuIEFsdGVybmF0aXZlbHksIHRoZSB0b3AtbGV2ZWxcbiAqIGNvbXBvbmVudCBtYXkgcHJvdmlkZSBhIGN1c3RvbSBtYXBwaW5nIHZpYSB0aGUgYGtleUJpbmRpbmdGbmAgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZWRpdE9uS2V5RG93bihlZGl0b3IsIGUpIHtcbiAgdmFyIGtleUNvZGUgPSBlLndoaWNoO1xuICB2YXIgZWRpdG9yU3RhdGUgPSBlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlO1xuXG4gIHN3aXRjaCAoa2V5Q29kZSkge1xuICAgIGNhc2UgS2V5cy5SRVRVUk46XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyBUaGUgdG9wLWxldmVsIGNvbXBvbmVudCBtYXkgbWFudWFsbHkgaGFuZGxlIG5ld2xpbmUgaW5zZXJ0aW9uLiBJZlxuICAgICAgLy8gbm8gc3BlY2lhbCBoYW5kbGluZyBpcyBwZXJmb3JtZWQsIGZhbGwgdGhyb3VnaCB0byBjb21tYW5kIGhhbmRsaW5nLlxuICAgICAgaWYgKGVkaXRvci5wcm9wcy5oYW5kbGVSZXR1cm4gJiYgaXNFdmVudEhhbmRsZWQoZWRpdG9yLnByb3BzLmhhbmRsZVJldHVybihlLCBlZGl0b3JTdGF0ZSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgS2V5cy5FU0M6XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlZGl0b3IucHJvcHMub25Fc2NhcGUgJiYgZWRpdG9yLnByb3BzLm9uRXNjYXBlKGUpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgS2V5cy5UQUI6XG4gICAgICBlZGl0b3IucHJvcHMub25UYWIgJiYgZWRpdG9yLnByb3BzLm9uVGFiKGUpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgS2V5cy5VUDpcbiAgICAgIGVkaXRvci5wcm9wcy5vblVwQXJyb3cgJiYgZWRpdG9yLnByb3BzLm9uVXBBcnJvdyhlKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIEtleXMuUklHSFQ6XG4gICAgICBlZGl0b3IucHJvcHMub25SaWdodEFycm93ICYmIGVkaXRvci5wcm9wcy5vblJpZ2h0QXJyb3coZSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBLZXlzLkRPV046XG4gICAgICBlZGl0b3IucHJvcHMub25Eb3duQXJyb3cgJiYgZWRpdG9yLnByb3BzLm9uRG93bkFycm93KGUpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgS2V5cy5MRUZUOlxuICAgICAgZWRpdG9yLnByb3BzLm9uTGVmdEFycm93ICYmIGVkaXRvci5wcm9wcy5vbkxlZnRBcnJvdyhlKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIEtleXMuU1BBQ0U6XG4gICAgICAvLyBIYW5kbGluZyBmb3IgT1NYIHdoZXJlIG9wdGlvbiArIHNwYWNlIHNjcm9sbHMuXG4gICAgICBpZiAoaXNDaHJvbWUgJiYgaXNPcHRpb25LZXlDb21tYW5kKGUpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy8gSW5zZXJ0IGEgbmJzcCBpbnRvIHRoZSBlZGl0b3IuXG4gICAgICAgIHZhciBjb250ZW50U3RhdGUgPSBEcmFmdE1vZGlmaWVyLnJlcGxhY2VUZXh0KGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCksIGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLCAnXFx4QTAnKTtcbiAgICAgICAgZWRpdG9yLnVwZGF0ZShFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBjb250ZW50U3RhdGUsICdpbnNlcnQtY2hhcmFjdGVycycpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG5cbiAgdmFyIGNvbW1hbmQgPSBlZGl0b3IucHJvcHMua2V5QmluZGluZ0ZuKGUpO1xuXG4gIC8vIElmIG5vIGNvbW1hbmQgaXMgc3BlY2lmaWVkLCBhbGxvdyBrZXlkb3duIGV2ZW50IHRvIGNvbnRpbnVlLlxuICBpZiAoIWNvbW1hbmQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoY29tbWFuZCA9PT0gJ3VuZG8nKSB7XG4gICAgLy8gU2luY2UgdW5kbyByZXF1aXJlcyBzb21lIHNwZWNpYWwgdXBkYXRpbmcgYmVoYXZpb3IgdG8ga2VlcCB0aGUgZWRpdG9yXG4gICAgLy8gaW4gc3luYywgaGFuZGxlIGl0IHNlcGFyYXRlbHkuXG4gICAga2V5Q29tbWFuZFVuZG8oZSwgZWRpdG9yU3RhdGUsIGVkaXRvci51cGRhdGUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGtub3cgdGhhdCB3ZSdyZSBoYW5kbGluZyBhIGNvbW1hbmQgb2Ygc29tZSBraW5kLCBzb1xuICAvLyB3ZSBkb24ndCB3YW50IHRvIGluc2VydCBhIGNoYXJhY3RlciBmb2xsb3dpbmcgdGhlIGtleWRvd24uXG4gIGUucHJldmVudERlZmF1bHQoKTtcblxuICAvLyBBbGxvdyBjb21wb25lbnRzIGhpZ2hlciB1cCB0aGUgdHJlZSB0byBoYW5kbGUgdGhlIGNvbW1hbmQgZmlyc3QuXG4gIGlmIChlZGl0b3IucHJvcHMuaGFuZGxlS2V5Q29tbWFuZCAmJiBpc0V2ZW50SGFuZGxlZChlZGl0b3IucHJvcHMuaGFuZGxlS2V5Q29tbWFuZChjb21tYW5kLCBlZGl0b3JTdGF0ZSkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG5ld1N0YXRlID0gb25LZXlDb21tYW5kKGNvbW1hbmQsIGVkaXRvclN0YXRlKTtcbiAgaWYgKG5ld1N0YXRlICE9PSBlZGl0b3JTdGF0ZSkge1xuICAgIGVkaXRvci51cGRhdGUobmV3U3RhdGUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWRpdE9uS2V5RG93bjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVkaXRPbklucHV0XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdEZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vRHJhZnRGZWF0dXJlRmxhZ3MnKTtcbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZSgnLi9EcmFmdE1vZGlmaWVyJyk7XG52YXIgRHJhZnRPZmZzZXRLZXkgPSByZXF1aXJlKCcuL0RyYWZ0T2Zmc2V0S2V5Jyk7XG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG52YXIgVXNlckFnZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvVXNlckFnZW50Jyk7XG5cbnZhciBmaW5kQW5jZXN0b3JPZmZzZXRLZXkgPSByZXF1aXJlKCcuL2ZpbmRBbmNlc3Rvck9mZnNldEtleScpO1xudmFyIG51bGx0aHJvd3MgPSByZXF1aXJlKCdmYmpzL2xpYi9udWxsdGhyb3dzJyk7XG5cbnZhciBpc0dlY2tvID0gVXNlckFnZW50LmlzRW5naW5lKCdHZWNrbycpO1xuXG52YXIgRE9VQkxFX05FV0xJTkUgPSAnXFxuXFxuJztcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGludGVuZGVkIHRvIGhhbmRsZSBzcGVsbGNoZWNrIGFuZCBhdXRvY29ycmVjdCBjaGFuZ2VzLFxuICogd2hpY2ggb2NjdXIgaW4gdGhlIERPTSBuYXRpdmVseSB3aXRob3V0IGFueSBvcHBvcnR1bml0eSB0byBvYnNlcnZlIG9yXG4gKiBpbnRlcnByZXQgdGhlIGNoYW5nZXMgYmVmb3JlIHRoZXkgb2NjdXIuXG4gKlxuICogVGhlIGBpbnB1dGAgZXZlbnQgZmlyZXMgaW4gY29udGVudEVkaXRhYmxlIGVsZW1lbnRzIHJlbGlhYmx5IGZvciBub24tSUVcbiAqIGJyb3dzZXJzLCBpbW1lZGlhdGVseSBhZnRlciBjaGFuZ2VzIG9jY3VyIHRvIHRoZSBlZGl0b3IgRE9NLiBTaW5jZSBvdXIgb3RoZXJcbiAqIGhhbmRsZXJzIG92ZXJyaWRlIG9yIG90aGVyd2lzZSBoYW5kbGUgY292ZXIgb3RoZXIgdmFyaWV0aWVzIG9mIHRleHQgaW5wdXQsXG4gKiB0aGUgRE9NIHN0YXRlIHNob3VsZCBtYXRjaCB0aGUgbW9kZWwgaW4gYWxsIGNvbnRyb2xsZWQgaW5wdXQgY2FzZXMuIFRodXMsXG4gKiB3aGVuIGFuIGBpbnB1dGAgY2hhbmdlIGxlYWRzIHRvIGEgRE9NL21vZGVsIG1pc21hdGNoLCB0aGUgY2hhbmdlIHNob3VsZCBiZVxuICogZHVlIHRvIGEgc3BlbGxjaGVjayBjaGFuZ2UsIGFuZCB3ZSBjYW4gaW5jb3Jwb3JhdGUgaXQgaW50byBvdXIgbW9kZWwuXG4gKi9cbmZ1bmN0aW9uIGVkaXRPbklucHV0KGVkaXRvcikge1xuICBpZiAoZWRpdG9yLl9wZW5kaW5nU3RhdGVGcm9tQmVmb3JlSW5wdXQgIT09IHVuZGVmaW5lZCkge1xuICAgIGVkaXRvci51cGRhdGUoZWRpdG9yLl9wZW5kaW5nU3RhdGVGcm9tQmVmb3JlSW5wdXQpO1xuICAgIGVkaXRvci5fcGVuZGluZ1N0YXRlRnJvbUJlZm9yZUlucHV0ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIGRvbVNlbGVjdGlvbiA9IGdsb2JhbC5nZXRTZWxlY3Rpb24oKTtcblxuICB2YXIgYW5jaG9yTm9kZSA9IGRvbVNlbGVjdGlvbi5hbmNob3JOb2RlLFxuICAgICAgaXNDb2xsYXBzZWQgPSBkb21TZWxlY3Rpb24uaXNDb2xsYXBzZWQ7XG5cbiAgdmFyIGlzTm90VGV4dE5vZGUgPSBhbmNob3JOb2RlLm5vZGVUeXBlICE9PSBOb2RlLlRFWFRfTk9ERTtcbiAgdmFyIGlzTm90VGV4dE9yRWxlbWVudE5vZGUgPSBhbmNob3JOb2RlLm5vZGVUeXBlICE9PSBOb2RlLlRFWFRfTk9ERSAmJiBhbmNob3JOb2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERTtcblxuICBpZiAoRHJhZnRGZWF0dXJlRmxhZ3MuZHJhZnRfa2lsbHN3aXRjaF9hbGxvd19ub250ZXh0bm9kZXMpIHtcbiAgICBpZiAoaXNOb3RUZXh0Tm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNOb3RUZXh0T3JFbGVtZW50Tm9kZSkge1xuICAgICAgLy8gVE9ETzogKHQxNjE0OTI3MikgZmlndXJlIG91dCBjb250ZXh0IGZvciB0aGlzIGNoYW5nZVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhbmNob3JOb2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiAoYW5jaG9yTm9kZS5wcmV2aW91c1NpYmxpbmcgIT09IG51bGwgfHwgYW5jaG9yTm9kZS5uZXh0U2libGluZyAhPT0gbnVsbCkpIHtcbiAgICAvLyBXaGVuIHR5cGluZyBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgdmlzdWFsIGxpbmUsIENocm9tZSBzcGxpdHMgdGhlIHRleHRcbiAgICAvLyBub2RlcyBpbnRvIHR3by4gV2h5PyBObyBvbmUga25vd3MuIFRoaXMgY29tbWl0IGlzIHN1c3BpY2lvdXM6XG4gICAgLy8gaHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYy8rL2EzYjYwMDk4MTI4NmIxMzU2MzIzNzE0NzdmOTAyMjE0YzU1YTE3MjRcbiAgICAvLyBUbyB3b3JrIGFyb3VuZCwgd2UnbGwgbWVyZ2UgdGhlIHNpYmxpbmcgdGV4dCBub2RlcyBiYWNrIGludG8gdGhpcyBvbmUuXG4gICAgdmFyIHNwYW4gPSBhbmNob3JOb2RlLnBhcmVudE5vZGU7XG4gICAgYW5jaG9yTm9kZS5ub2RlVmFsdWUgPSBzcGFuLnRleHRDb250ZW50O1xuICAgIGZvciAodmFyIGNoaWxkID0gc3Bhbi5maXJzdENoaWxkOyBjaGlsZCAhPT0gbnVsbDsgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZykge1xuICAgICAgaWYgKGNoaWxkICE9PSBhbmNob3JOb2RlKSB7XG4gICAgICAgIHNwYW4ucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBkb21UZXh0ID0gYW5jaG9yTm9kZS50ZXh0Q29udGVudDtcbiAgdmFyIGVkaXRvclN0YXRlID0gZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZTtcbiAgdmFyIG9mZnNldEtleSA9IG51bGx0aHJvd3MoZmluZEFuY2VzdG9yT2Zmc2V0S2V5KGFuY2hvck5vZGUpKTtcblxuICB2YXIgX0RyYWZ0T2Zmc2V0S2V5JGRlY29kID0gRHJhZnRPZmZzZXRLZXkuZGVjb2RlKG9mZnNldEtleSksXG4gICAgICBibG9ja0tleSA9IF9EcmFmdE9mZnNldEtleSRkZWNvZC5ibG9ja0tleSxcbiAgICAgIGRlY29yYXRvcktleSA9IF9EcmFmdE9mZnNldEtleSRkZWNvZC5kZWNvcmF0b3JLZXksXG4gICAgICBsZWFmS2V5ID0gX0RyYWZ0T2Zmc2V0S2V5JGRlY29kLmxlYWZLZXk7XG5cbiAgdmFyIF9lZGl0b3JTdGF0ZSRnZXRCbG9jayA9IGVkaXRvclN0YXRlLmdldEJsb2NrVHJlZShibG9ja0tleSkuZ2V0SW4oW2RlY29yYXRvcktleSwgJ2xlYXZlcycsIGxlYWZLZXldKSxcbiAgICAgIHN0YXJ0ID0gX2VkaXRvclN0YXRlJGdldEJsb2NrLnN0YXJ0LFxuICAgICAgZW5kID0gX2VkaXRvclN0YXRlJGdldEJsb2NrLmVuZDtcblxuICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gIHZhciBibG9jayA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoYmxvY2tLZXkpO1xuICB2YXIgbW9kZWxUZXh0ID0gYmxvY2suZ2V0VGV4dCgpLnNsaWNlKHN0YXJ0LCBlbmQpO1xuXG4gIC8vIFNwZWNpYWwtY2FzZSBzb2Z0IG5ld2xpbmVzIGhlcmUuIElmIHRoZSBET00gdGV4dCBlbmRzIGluIGEgc29mdCBuZXdsaW5lLFxuICAvLyB3ZSB3aWxsIGhhdmUgbWFudWFsbHkgaW5zZXJ0ZWQgYW4gZXh0cmEgc29mdCBuZXdsaW5lIGluIERyYWZ0RWRpdG9yTGVhZi5cbiAgLy8gV2Ugd2FudCB0byByZW1vdmUgdGhpcyBleHRyYSBuZXdsaW5lIGZvciB0aGUgcHVycG9zZSBvZiBvdXIgY29tcGFyaXNvblxuICAvLyBvZiBET00gYW5kIG1vZGVsIHRleHQuXG4gIGlmIChkb21UZXh0LmVuZHNXaXRoKERPVUJMRV9ORVdMSU5FKSkge1xuICAgIGRvbVRleHQgPSBkb21UZXh0LnNsaWNlKDAsIC0xKTtcbiAgfVxuXG4gIC8vIE5vIGNoYW5nZSAtLSB0aGUgRE9NIGlzIHVwIHRvIGRhdGUuIE5vdGhpbmcgdG8gZG8gaGVyZS5cbiAgaWYgKGRvbVRleHQgPT09IG1vZGVsVGV4dCkge1xuICAgIC8vIFRoaXMgY2FuIGJlIGJ1Z2d5IGZvciBzb21lIEFuZHJvaWQga2V5Ym9hcmRzIGJlY2F1c2UgdGhleSBkb24ndCBmaXJlXG4gICAgLy8gc3RhbmRhcmQgb25rZXlkb3duL3ByZXNzZWQgZXZlbnRzIGFuZCBvbmx5IGZpcmVkIGVkaXRPbklucHV0XG4gICAgLy8gc28gZG9tVGV4dCBpcyBhbHJlYWR5IGNoYW5nZWQgYnkgdGhlIGJyb3dzZXIgYW5kIGVuZHMgdXAgYmVpbmcgZXF1YWxcbiAgICAvLyB0byBtb2RlbFRleHQgdW5leHBlY3RlZGx5XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuXG4gIC8vIFdlJ2xsIHJlcGxhY2UgdGhlIGVudGlyZSBsZWFmIHdpdGggdGhlIHRleHQgY29udGVudCBvZiB0aGUgdGFyZ2V0LlxuICB2YXIgdGFyZ2V0UmFuZ2UgPSBzZWxlY3Rpb24ubWVyZ2Uoe1xuICAgIGFuY2hvck9mZnNldDogc3RhcnQsXG4gICAgZm9jdXNPZmZzZXQ6IGVuZCxcbiAgICBpc0JhY2t3YXJkOiBmYWxzZVxuICB9KTtcblxuICB2YXIgZW50aXR5S2V5ID0gYmxvY2suZ2V0RW50aXR5QXQoc3RhcnQpO1xuICB2YXIgZW50aXR5ID0gZW50aXR5S2V5ICYmIGNvbnRlbnQuZ2V0RW50aXR5KGVudGl0eUtleSk7XG4gIHZhciBlbnRpdHlUeXBlID0gZW50aXR5ICYmIGVudGl0eS5nZXRNdXRhYmlsaXR5KCk7XG4gIHZhciBwcmVzZXJ2ZUVudGl0eSA9IGVudGl0eVR5cGUgPT09ICdNVVRBQkxFJztcblxuICAvLyBJbW11dGFibGUgb3Igc2VnbWVudGVkIGVudGl0aWVzIGNhbm5vdCBwcm9wZXJseSBiZSBoYW5kbGVkIGJ5IHRoZVxuICAvLyBkZWZhdWx0IGJyb3dzZXIgdW5kbywgc28gd2UgaGF2ZSB0byB1c2UgYSBkaWZmZXJlbnQgY2hhbmdlIHR5cGUgdG9cbiAgLy8gZm9yY2UgdXNpbmcgb3VyIGludGVybmFsIHVuZG8gbWV0aG9kIGluc3RlYWQgb2YgZmFsbGluZyB0aHJvdWdoIHRvIHRoZVxuICAvLyBuYXRpdmUgYnJvd3NlciB1bmRvLlxuICB2YXIgY2hhbmdlVHlwZSA9IHByZXNlcnZlRW50aXR5ID8gJ3NwZWxsY2hlY2stY2hhbmdlJyA6ICdhcHBseS1lbnRpdHknO1xuXG4gIHZhciBuZXdDb250ZW50ID0gRHJhZnRNb2RpZmllci5yZXBsYWNlVGV4dChjb250ZW50LCB0YXJnZXRSYW5nZSwgZG9tVGV4dCwgYmxvY2suZ2V0SW5saW5lU3R5bGVBdChzdGFydCksIHByZXNlcnZlRW50aXR5ID8gYmxvY2suZ2V0RW50aXR5QXQoc3RhcnQpIDogbnVsbCk7XG5cbiAgdmFyIGFuY2hvck9mZnNldCwgZm9jdXNPZmZzZXQsIHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQ7XG5cbiAgaWYgKGlzR2Vja28pIHtcbiAgICAvLyBGaXJlZm94IHNlbGVjdGlvbiBkb2VzIG5vdCBjaGFuZ2Ugd2hpbGUgdGhlIGNvbnRleHQgbWVudSBpcyBvcGVuLCBzb1xuICAgIC8vIHdlIHByZXNlcnZlIHRoZSBhbmNob3IgYW5kIGZvY3VzIHZhbHVlcyBvZiB0aGUgRE9NIHNlbGVjdGlvbi5cbiAgICBhbmNob3JPZmZzZXQgPSBkb21TZWxlY3Rpb24uYW5jaG9yT2Zmc2V0O1xuICAgIGZvY3VzT2Zmc2V0ID0gZG9tU2VsZWN0aW9uLmZvY3VzT2Zmc2V0O1xuICAgIHN0YXJ0T2Zmc2V0ID0gc3RhcnQgKyBNYXRoLm1pbihhbmNob3JPZmZzZXQsIGZvY3VzT2Zmc2V0KTtcbiAgICBlbmRPZmZzZXQgPSBzdGFydE9mZnNldCArIE1hdGguYWJzKGFuY2hvck9mZnNldCAtIGZvY3VzT2Zmc2V0KTtcbiAgICBhbmNob3JPZmZzZXQgPSBzdGFydE9mZnNldDtcbiAgICBmb2N1c09mZnNldCA9IGVuZE9mZnNldDtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VycyBvdGhlciB0aGFuIEZpcmVmb3ggbWF5IGFkanVzdCBET00gc2VsZWN0aW9uIHdoaWxlIHRoZSBjb250ZXh0XG4gICAgLy8gbWVudSBpcyBvcGVuLCBhbmQgU2FmYXJpIGF1dG9jb3JyZWN0IGlzIHByb25lIHRvIHByb3ZpZGluZyBhbiBpbmFjY3VyYXRlXG4gICAgLy8gRE9NIHNlbGVjdGlvbi4gRG9uJ3QgdHJ1c3QgaXQuIEluc3RlYWQsIHVzZSBvdXIgZXhpc3RpbmcgU2VsZWN0aW9uU3RhdGVcbiAgICAvLyBhbmQgYWRqdXN0IGl0IGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBjaGFuZ2VkIGR1cmluZyB0aGVcbiAgICAvLyBtdXRhdGlvbi5cbiAgICB2YXIgY2hhckRlbHRhID0gZG9tVGV4dC5sZW5ndGggLSBtb2RlbFRleHQubGVuZ3RoO1xuICAgIHN0YXJ0T2Zmc2V0ID0gc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCk7XG4gICAgZW5kT2Zmc2V0ID0gc2VsZWN0aW9uLmdldEVuZE9mZnNldCgpO1xuXG4gICAgYW5jaG9yT2Zmc2V0ID0gaXNDb2xsYXBzZWQgPyBlbmRPZmZzZXQgKyBjaGFyRGVsdGEgOiBzdGFydE9mZnNldDtcbiAgICBmb2N1c09mZnNldCA9IGVuZE9mZnNldCArIGNoYXJEZWx0YTtcbiAgfVxuXG4gIC8vIFNlZ21lbnRlZCBlbnRpdGllcyBhcmUgY29tcGxldGVseSBvciBwYXJ0aWFsbHkgcmVtb3ZlZCB3aGVuIHRoZWlyXG4gIC8vIHRleHQgY29udGVudCBjaGFuZ2VzLiBGb3IgdGhpcyBjYXNlIHdlIGRvIG5vdCB3YW50IGFueSB0ZXh0IHRvIGJlIHNlbGVjdGVkXG4gIC8vIGFmdGVyIHRoZSBjaGFuZ2UsIHNvIHdlIGFyZSBub3QgbWVyZ2luZyB0aGUgc2VsZWN0aW9uLlxuICB2YXIgY29udGVudFdpdGhBZGp1c3RlZERPTVNlbGVjdGlvbiA9IG5ld0NvbnRlbnQubWVyZ2Uoe1xuICAgIHNlbGVjdGlvbkJlZm9yZTogY29udGVudC5nZXRTZWxlY3Rpb25BZnRlcigpLFxuICAgIHNlbGVjdGlvbkFmdGVyOiBzZWxlY3Rpb24ubWVyZ2UoeyBhbmNob3JPZmZzZXQ6IGFuY2hvck9mZnNldCwgZm9jdXNPZmZzZXQ6IGZvY3VzT2Zmc2V0IH0pXG4gIH0pO1xuXG4gIGVkaXRvci51cGRhdGUoRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgY29udGVudFdpdGhBZGp1c3RlZERPTVNlbGVjdGlvbiwgY2hhbmdlVHlwZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRPbklucHV0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZWRpdE9uRm9jdXNcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xudmFyIFVzZXJBZ2VudCA9IHJlcXVpcmUoJ2ZianMvbGliL1VzZXJBZ2VudCcpO1xuXG5mdW5jdGlvbiBlZGl0T25Gb2N1cyhlZGl0b3IsIGUpIHtcbiAgdmFyIGVkaXRvclN0YXRlID0gZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZTtcbiAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgaWYgKGN1cnJlbnRTZWxlY3Rpb24uZ2V0SGFzRm9jdXMoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb24gPSBjdXJyZW50U2VsZWN0aW9uLnNldCgnaGFzRm9jdXMnLCB0cnVlKTtcbiAgZWRpdG9yLnByb3BzLm9uRm9jdXMgJiYgZWRpdG9yLnByb3BzLm9uRm9jdXMoZSk7XG5cbiAgLy8gV2hlbiB0aGUgdGFiIGNvbnRhaW5pbmcgdGhpcyB0ZXh0IGVkaXRvciBpcyBoaWRkZW4gYW5kIHRoZSB1c2VyIGRvZXMgYVxuICAvLyBmaW5kLWluLXBhZ2UgaW4gYSBfZGlmZmVyZW50XyB0YWIsIENocm9tZSBvbiBNYWMgbGlrZXMgdG8gZm9yZ2V0IHdoYXQgdGhlXG4gIC8vIHNlbGVjdGlvbiB3YXMgcmlnaHQgYWZ0ZXIgc2VuZGluZyB0aGlzIGZvY3VzIGV2ZW50IGFuZCAoaWYgeW91IGxldCBpdClcbiAgLy8gbW92ZXMgdGhlIGN1cnNvciBiYWNrIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGVkaXRvciwgc28gd2UgZm9yY2UgdGhlXG4gIC8vIHNlbGVjdGlvbiBoZXJlIGluc3RlYWQgb2Ygc2ltcGx5IGFjY2VwdGluZyBpdCBpbiBvcmRlciB0byBwcmVzZXJ2ZSB0aGVcbiAgLy8gb2xkIGN1cnNvciBwb3NpdGlvbi4gU2VlIGh0dHBzOi8vY3JidWcuY29tLzU0MDAwNC5cbiAgLy8gQnV0IGl0IGxvb2tzIGxpa2UgdGhpcyBpcyBmaXhlZCBpbiBDaHJvbWUgNjAuMC4zMDgxLjAuXG4gIC8vIE90aGVyIGJyb3dzZXJzIGFsc28gZG9uJ3QgaGF2ZSB0aGlzIGJ1Zywgc28gd2UgcHJlZmVyIHRvIGFjY2VwdFNlbGVjdGlvblxuICAvLyB3aGVuIHBvc3NpYmxlLCB0byBlbnN1cmUgdGhhdCB1bmZvY3VzaW5nIGFuZCByZWZvY3VzaW5nIGEgRHJhZnQgZWRpdG9yXG4gIC8vIGRvZXNuJ3QgcHJlc2VydmUgdGhlIHNlbGVjdGlvbiwgbWF0Y2hpbmcgaG93IHRleHRhcmVhcyB3b3JrLlxuICBpZiAoVXNlckFnZW50LmlzQnJvd3NlcignQ2hyb21lIDwgNjAuMC4zMDgxLjAnKSkge1xuICAgIGVkaXRvci51cGRhdGUoRWRpdG9yU3RhdGUuZm9yY2VTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIHNlbGVjdGlvbikpO1xuICB9IGVsc2Uge1xuICAgIGVkaXRvci51cGRhdGUoRWRpdG9yU3RhdGUuYWNjZXB0U2VsZWN0aW9uKGVkaXRvclN0YXRlLCBzZWxlY3Rpb24pKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRPbkZvY3VzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZWRpdE9uRHJhZ1N0YXJ0XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgZHJhZ3N0YXJ0YCBldmVudCBoYXMgYmVndW4gd2l0aGluIHRoZSB0ZXh0IGVkaXRvciBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIGVkaXRPbkRyYWdTdGFydChlZGl0b3IpIHtcbiAgZWRpdG9yLl9pbnRlcm5hbERyYWcgPSB0cnVlO1xuICBlZGl0b3Iuc2V0TW9kZSgnZHJhZycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRPbkRyYWdTdGFydDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVkaXRPbkRyYWdPdmVyXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRHJhZyBiZWhhdmlvciBoYXMgYmVndW4gZnJvbSBvdXRzaWRlIHRoZSBlZGl0b3IgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gZWRpdE9uRHJhZ092ZXIoZWRpdG9yLCBlKSB7XG4gIGVkaXRvci5faW50ZXJuYWxEcmFnID0gZmFsc2U7XG4gIGVkaXRvci5zZXRNb2RlKCdkcmFnJyk7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25EcmFnT3ZlcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVkaXRPbkN1dFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRNb2RpZmllciA9IHJlcXVpcmUoJy4vRHJhZnRNb2RpZmllcicpO1xudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xudmFyIFN0eWxlID0gcmVxdWlyZSgnZmJqcy9saWIvU3R5bGUnKTtcblxudmFyIGdldEZyYWdtZW50RnJvbVNlbGVjdGlvbiA9IHJlcXVpcmUoJy4vZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uJyk7XG52YXIgZ2V0U2Nyb2xsUG9zaXRpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRTY3JvbGxQb3NpdGlvbicpO1xuXG4vKipcbiAqIE9uIGBjdXRgIGV2ZW50cywgbmF0aXZlIGJlaGF2aW9yIGlzIGFsbG93ZWQgdG8gb2NjdXIgc28gdGhhdCB0aGUgc3lzdGVtXG4gKiBjbGlwYm9hcmQgaXMgc2V0IHByb3Blcmx5LiBUaGlzIG1lYW5zIHRoYXQgd2UgbmVlZCB0byB0YWtlIHN0ZXBzIHRvIHJlY292ZXJcbiAqIHRoZSBlZGl0b3IgRE9NIHN0YXRlIGFmdGVyIHRoZSBgY3V0YCBoYXMgb2NjdXJyZWQgaW4gb3JkZXIgdG8gbWFpbnRhaW5cbiAqIGNvbnRyb2wgb2YgdGhlIGNvbXBvbmVudC5cbiAqXG4gKiBJbiBhZGRpdGlvbiwgd2UgY2FuIGtlZXAgYSBjb3B5IG9mIHRoZSByZW1vdmVkIGZyYWdtZW50LCBpbmNsdWRpbmcgYWxsXG4gKiBzdHlsZXMgYW5kIGVudGl0aWVzLCBmb3IgdXNlIGFzIGFuIGludGVybmFsIHBhc3RlLlxuICovXG5mdW5jdGlvbiBlZGl0T25DdXQoZWRpdG9yLCBlKSB7XG4gIHZhciBlZGl0b3JTdGF0ZSA9IGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGU7XG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGVsZW1lbnQgPSBlLnRhcmdldDtcbiAgdmFyIHNjcm9sbFBvc2l0aW9uID0gdm9pZCAwO1xuXG4gIC8vIE5vIHNlbGVjdGlvbiwgc28gdGhlcmUncyBub3RoaW5nIHRvIGN1dC5cbiAgaWYgKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFRyYWNrIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBzbyB0aGF0IGl0IGNhbiBiZSBmb3JjZWQgYmFjayBpbiBwbGFjZVxuICAvLyBhZnRlciB0aGUgZWRpdG9yIHJlZ2FpbnMgY29udHJvbCBvZiB0aGUgRE9NLlxuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICBzY3JvbGxQb3NpdGlvbiA9IGdldFNjcm9sbFBvc2l0aW9uKFN0eWxlLmdldFNjcm9sbFBhcmVudChlbGVtZW50KSk7XG4gIH1cblxuICB2YXIgZnJhZ21lbnQgPSBnZXRGcmFnbWVudEZyb21TZWxlY3Rpb24oZWRpdG9yU3RhdGUpO1xuICBlZGl0b3Iuc2V0Q2xpcGJvYXJkKGZyYWdtZW50KTtcblxuICAvLyBTZXQgYGN1dGAgbW9kZSB0byBkaXNhYmxlIGFsbCBldmVudCBoYW5kbGluZyB0ZW1wb3JhcmlseS5cbiAgZWRpdG9yLnNldE1vZGUoJ2N1dCcpO1xuXG4gIC8vIExldCBuYXRpdmUgYGN1dGAgYmVoYXZpb3Igb2NjdXIsIHRoZW4gcmVjb3ZlciBjb250cm9sLlxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBlZGl0b3IucmVzdG9yZUVkaXRvckRPTShzY3JvbGxQb3NpdGlvbik7XG4gICAgZWRpdG9yLmV4aXRDdXJyZW50TW9kZSgpO1xuICAgIGVkaXRvci51cGRhdGUocmVtb3ZlRnJhZ21lbnQoZWRpdG9yU3RhdGUpKTtcbiAgfSwgMCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZyYWdtZW50KGVkaXRvclN0YXRlKSB7XG4gIHZhciBuZXdDb250ZW50ID0gRHJhZnRNb2RpZmllci5yZW1vdmVSYW5nZShlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSwgJ2ZvcndhcmQnKTtcbiAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIG5ld0NvbnRlbnQsICdyZW1vdmUtcmFuZ2UnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25DdXQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlZGl0T25Db3B5XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBnZXRGcmFnbWVudEZyb21TZWxlY3Rpb24gPSByZXF1aXJlKCcuL2dldEZyYWdtZW50RnJvbVNlbGVjdGlvbicpO1xuXG4vKipcbiAqIElmIHdlIGhhdmUgYSBzZWxlY3Rpb24sIGNyZWF0ZSBhIENvbnRlbnRTdGF0ZSBmcmFnbWVudCBhbmQgc3RvcmVcbiAqIGl0IGluIG91ciBpbnRlcm5hbCBjbGlwYm9hcmQuIFN1YnNlcXVlbnQgcGFzdGUgZXZlbnRzIHdpbGwgdXNlIHRoaXNcbiAqIGZyYWdtZW50IGlmIG5vIGV4dGVybmFsIGNsaXBib2FyZCBkYXRhIGlzIHN1cHBsaWVkLlxuICovXG5mdW5jdGlvbiBlZGl0T25Db3B5KGVkaXRvciwgZSkge1xuICB2YXIgZWRpdG9yU3RhdGUgPSBlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlO1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgLy8gTm8gc2VsZWN0aW9uLCBzbyB0aGVyZSdzIG5vdGhpbmcgdG8gY29weS5cbiAgaWYgKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGVkaXRvci5zZXRDbGlwYm9hcmQoZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uKGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25Db3B5OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZWRpdE9uQ29tcG9zaXRpb25TdGFydFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG5cbi8qKlxuICogVGhlIHVzZXIgaGFzIGJlZ3VuIHVzaW5nIGFuIElNRSBpbnB1dCBzeXN0ZW0uIFN3aXRjaGluZyB0byBgY29tcG9zaXRlYCBtb2RlXG4gKiBhbGxvd3MgaGFuZGxpbmcgY29tcG9zaXRpb24gaW5wdXQgYW5kIGRpc2FibGVzIG90aGVyIGVkaXQgYmVoYXZpb3IuXG4gKi9cbmZ1bmN0aW9uIGVkaXRPbkNvbXBvc2l0aW9uU3RhcnQoZWRpdG9yLCBlKSB7XG4gIGVkaXRvci5zZXRNb2RlKCdjb21wb3NpdGUnKTtcbiAgZWRpdG9yLnVwZGF0ZShFZGl0b3JTdGF0ZS5zZXQoZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZSwgeyBpbkNvbXBvc2l0aW9uTW9kZTogdHJ1ZSB9KSk7XG4gIC8vIEFsbG93IGNvbXBvc2l0aW9uIGhhbmRsZXIgdG8gaW50ZXJwcmV0IHRoZSBjb21wb3NpdGlvbnN0YXJ0IGV2ZW50XG4gIGVkaXRvci5fb25Db21wb3NpdGlvblN0YXJ0KGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRPbkNvbXBvc2l0aW9uU3RhcnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlZGl0T25CbHVyXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcblxudmFyIGNvbnRhaW5zTm9kZSA9IHJlcXVpcmUoJ2ZianMvbGliL2NvbnRhaW5zTm9kZScpO1xudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50Jyk7XG5cbmZ1bmN0aW9uIGVkaXRPbkJsdXIoZWRpdG9yLCBlKSB7XG4gIC8vIEluIGEgY29udGVudEVkaXRhYmxlIGVsZW1lbnQsIHdoZW4geW91IHNlbGVjdCBhIHJhbmdlIGFuZCB0aGVuIGNsaWNrXG4gIC8vIGFub3RoZXIgYWN0aXZlIGVsZW1lbnQsIHRoaXMgZG9lcyB0cmlnZ2VyIGEgYGJsdXJgIGV2ZW50IGJ1dCB3aWxsIG5vdFxuICAvLyByZW1vdmUgdGhlIERPTSBzZWxlY3Rpb24gZnJvbSB0aGUgY29udGVudGVkaXRhYmxlLlxuICAvLyBUaGlzIGlzIGNvbnNpc3RlbnQgYWNyb3NzIGFsbCBicm93c2VycywgYnV0IHdlIHByZWZlciB0aGF0IHRoZSBlZGl0b3JcbiAgLy8gYmVoYXZlIGxpa2UgYSB0ZXh0YXJlYSwgd2hlcmUgYSBgYmx1cmAgZXZlbnQgY2xlYXJzIHRoZSBET00gc2VsZWN0aW9uLlxuICAvLyBXZSB0aGVyZWZvcmUgZm9yY2UgdGhlIGlzc3VlIHRvIGJlIGNlcnRhaW4sIGNoZWNraW5nIHdoZXRoZXIgdGhlIGFjdGl2ZVxuICAvLyBlbGVtZW50IGlzIGBib2R5YCB0byBmb3JjZSBpdCB3aGVuIGJsdXJyaW5nIG9jY3VycyB3aXRoaW4gdGhlIHdpbmRvdyAoYXNcbiAgLy8gb3Bwb3NlZCB0byBjbGlja2luZyB0byBhbm90aGVyIHRhYiBvciB3aW5kb3cpLlxuICBpZiAoZ2V0QWN0aXZlRWxlbWVudCgpID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgdmFyIF9zZWxlY3Rpb24gPSBnbG9iYWwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgdmFyIGVkaXRvck5vZGUgPSBlZGl0b3IuZWRpdG9yO1xuICAgIGlmIChfc2VsZWN0aW9uLnJhbmdlQ291bnQgPT09IDEgJiYgY29udGFpbnNOb2RlKGVkaXRvck5vZGUsIF9zZWxlY3Rpb24uYW5jaG9yTm9kZSkgJiYgY29udGFpbnNOb2RlKGVkaXRvck5vZGUsIF9zZWxlY3Rpb24uZm9jdXNOb2RlKSkge1xuICAgICAgX3NlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICB9XG4gIH1cblxuICB2YXIgZWRpdG9yU3RhdGUgPSBlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlO1xuICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICBpZiAoIWN1cnJlbnRTZWxlY3Rpb24uZ2V0SGFzRm9jdXMoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb24gPSBjdXJyZW50U2VsZWN0aW9uLnNldCgnaGFzRm9jdXMnLCBmYWxzZSk7XG4gIGVkaXRvci5wcm9wcy5vbkJsdXIgJiYgZWRpdG9yLnByb3BzLm9uQmx1cihlKTtcbiAgZWRpdG9yLnVwZGF0ZShFZGl0b3JTdGF0ZS5hY2NlcHRTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIHNlbGVjdGlvbikpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRPbkJsdXI7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBzZXRpbW1lZGlhdGUgYWRkcyBzZXRJbW1lZGlhdGUgdG8gdGhlIGdsb2JhbC4gV2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgZXhwb3J0XG4vLyB0aGUgYWN0dWFsIGZ1bmN0aW9uLlxuXG5yZXF1aXJlKCdzZXRpbW1lZGlhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLnNldEltbWVkaWF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVkaXRPbkJlZm9yZUlucHV0XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBCbG9ja1RyZWUgPSByZXF1aXJlKCcuL0Jsb2NrVHJlZScpO1xudmFyIERyYWZ0TW9kaWZpZXIgPSByZXF1aXJlKCcuL0RyYWZ0TW9kaWZpZXInKTtcbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcbnZhciBVc2VyQWdlbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9Vc2VyQWdlbnQnKTtcblxudmFyIGdldEVudGl0eUtleUZvclNlbGVjdGlvbiA9IHJlcXVpcmUoJy4vZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uJyk7XG52YXIgaXNFdmVudEhhbmRsZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRIYW5kbGVkJyk7XG52YXIgaXNTZWxlY3Rpb25BdExlYWZTdGFydCA9IHJlcXVpcmUoJy4vaXNTZWxlY3Rpb25BdExlYWZTdGFydCcpO1xudmFyIG51bGx0aHJvd3MgPSByZXF1aXJlKCdmYmpzL2xpYi9udWxsdGhyb3dzJyk7XG52YXIgc2V0SW1tZWRpYXRlID0gcmVxdWlyZSgnZmJqcy9saWIvc2V0SW1tZWRpYXRlJyk7XG5cbi8vIFdoZW4gbm90aGluZyBpcyBmb2N1c2VkLCBGaXJlZm94IHJlZ2FyZHMgdHdvIGNoYXJhY3RlcnMsIGAnYCBhbmQgYC9gLCBhc1xuLy8gY29tbWFuZHMgdGhhdCBzaG91bGQgb3BlbiBhbmQgZm9jdXMgdGhlIFwicXVpY2tmaW5kXCIgc2VhcmNoIGJhci4gVGhpcyBzaG91bGRcbi8vICpuZXZlciogaGFwcGVuIHdoaWxlIGEgY29udGVudGVkaXRhYmxlIGlzIGZvY3VzZWQsIGJ1dCBhcyBvZiB2MjgsIGl0XG4vLyBzb21ldGltZXMgZG9lcywgZXZlbiB3aGVuIHRoZSBrZXlwcmVzcyBldmVudCB0YXJnZXQgaXMgdGhlIGNvbnRlbnRlZGl0YWJsZS5cbi8vIFRoaXMgYnJlYWtzIHRoZSBpbnB1dC4gU3BlY2lhbCBjYXNlIHRoZXNlIGNoYXJhY3RlcnMgdG8gZW5zdXJlIHRoYXQgd2hlblxuLy8gdGhleSBhcmUgdHlwZWQsIHdlIHByZXZlbnQgZGVmYXVsdCBvbiB0aGUgZXZlbnQgdG8gbWFrZSBzdXJlIG5vdCB0b1xuLy8gdHJpZ2dlciBxdWlja2ZpbmQuXG52YXIgRkZfUVVJQ0tGSU5EX0NIQVIgPSBcIidcIjtcbnZhciBGRl9RVUlDS0ZJTkRfTElOS19DSEFSID0gJy8nO1xudmFyIGlzRmlyZWZveCA9IFVzZXJBZ2VudC5pc0Jyb3dzZXIoJ0ZpcmVmb3gnKTtcblxuZnVuY3Rpb24gbXVzdFByZXZlbnREZWZhdWx0Rm9yQ2hhcmFjdGVyKGNoYXJhY3Rlcikge1xuICByZXR1cm4gaXNGaXJlZm94ICYmIChjaGFyYWN0ZXIgPT0gRkZfUVVJQ0tGSU5EX0NIQVIgfHwgY2hhcmFjdGVyID09IEZGX1FVSUNLRklORF9MSU5LX0NIQVIpO1xufVxuXG4vKipcbiAqIFJlcGxhY2UgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIHdpdGggdGhlIHNwZWNpZmllZCB0ZXh0IHN0cmluZywgd2l0aCB0aGVcbiAqIGlubGluZSBzdHlsZSBhbmQgZW50aXR5IGtleSBhcHBsaWVkIHRvIHRoZSBuZXdseSBpbnNlcnRlZCB0ZXh0LlxuICovXG5mdW5jdGlvbiByZXBsYWNlVGV4dChlZGl0b3JTdGF0ZSwgdGV4dCwgaW5saW5lU3R5bGUsIGVudGl0eUtleSkge1xuICB2YXIgY29udGVudFN0YXRlID0gRHJhZnRNb2RpZmllci5yZXBsYWNlVGV4dChlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSwgdGV4dCwgaW5saW5lU3R5bGUsIGVudGl0eUtleSk7XG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBjb250ZW50U3RhdGUsICdpbnNlcnQtY2hhcmFjdGVycycpO1xufVxuXG4vKipcbiAqIFdoZW4gYG9uQmVmb3JlSW5wdXRgIGV4ZWN1dGVzLCB0aGUgYnJvd3NlciBpcyBhdHRlbXB0aW5nIHRvIGluc2VydCBhXG4gKiBjaGFyYWN0ZXIgaW50byB0aGUgZWRpdG9yLiBBcHBseSB0aGlzIGNoYXJhY3RlciBkYXRhIHRvIHRoZSBkb2N1bWVudCxcbiAqIGFsbG93aW5nIG5hdGl2ZSBpbnNlcnRpb24gaWYgcG9zc2libGUuXG4gKlxuICogTmF0aXZlIGluc2VydGlvbiBpcyBlbmNvdXJhZ2VkIGluIG9yZGVyIHRvIGxpbWl0IHJlLXJlbmRlcmluZyBhbmQgdG9cbiAqIHByZXNlcnZlIHNwZWxsY2hlY2sgaGlnaGxpZ2h0aW5nLCB3aGljaCBkaXNhcHBlYXJzIG9yIGZsYXNoZXMgaWYgcmUtcmVuZGVyXG4gKiBvY2N1cnMgb24gdGhlIHJlbGV2YW50IHRleHQgbm9kZXMuXG4gKi9cbmZ1bmN0aW9uIGVkaXRPbkJlZm9yZUlucHV0KGVkaXRvciwgZSkge1xuICBpZiAoZWRpdG9yLl9wZW5kaW5nU3RhdGVGcm9tQmVmb3JlSW5wdXQgIT09IHVuZGVmaW5lZCkge1xuICAgIGVkaXRvci51cGRhdGUoZWRpdG9yLl9wZW5kaW5nU3RhdGVGcm9tQmVmb3JlSW5wdXQpO1xuICAgIGVkaXRvci5fcGVuZGluZ1N0YXRlRnJvbUJlZm9yZUlucHV0ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIGVkaXRvclN0YXRlID0gZWRpdG9yLl9sYXRlc3RFZGl0b3JTdGF0ZTtcblxuICB2YXIgY2hhcnMgPSBlLmRhdGE7XG5cbiAgLy8gSW4gc29tZSBjYXNlcyAoZXg6IElFIGlkZW9ncmFwaGljIHNwYWNlIGluc2VydGlvbikgbm8gY2hhcmFjdGVyIGRhdGFcbiAgLy8gaXMgcHJvdmlkZWQuIFRoZXJlJ3Mgbm90aGluZyB0byBkbyB3aGVuIHRoaXMgaGFwcGVucy5cbiAgaWYgKCFjaGFycykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEFsbG93IHRoZSB0b3AtbGV2ZWwgY29tcG9uZW50IHRvIGhhbmRsZSB0aGUgaW5zZXJ0aW9uIG1hbnVhbGx5LiBUaGlzIGlzXG4gIC8vIHVzZWZ1bCB3aGVuIHRyaWdnZXJpbmcgaW50ZXJlc3RpbmcgYmVoYXZpb3JzIGZvciBhIGNoYXJhY3RlciBpbnNlcnRpb24sXG4gIC8vIFNpbXBsZSBleGFtcGxlczogcmVwbGFjaW5nIGEgcmF3IHRleHQgJzopJyB3aXRoIGEgc21pbGUgZW1vamkgb3IgaW1hZ2VcbiAgLy8gZGVjb3JhdG9yLCBvciBzZXR0aW5nIGEgYmxvY2sgdG8gYmUgYSBsaXN0IGl0ZW0gYWZ0ZXIgdHlwaW5nICctICcgYXQgdGhlXG4gIC8vIHN0YXJ0IG9mIHRoZSBibG9jay5cbiAgaWYgKGVkaXRvci5wcm9wcy5oYW5kbGVCZWZvcmVJbnB1dCAmJiBpc0V2ZW50SGFuZGxlZChlZGl0b3IucHJvcHMuaGFuZGxlQmVmb3JlSW5wdXQoY2hhcnMsIGVkaXRvclN0YXRlKSkpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgc2VsZWN0aW9uIGlzIGNvbGxhcHNlZCwgY29uZGl0aW9uYWxseSBhbGxvdyBuYXRpdmUgYmVoYXZpb3IuIFRoaXNcbiAgLy8gcmVkdWNlcyByZS1yZW5kZXJzIGFuZCBwcmVzZXJ2ZXMgc3BlbGxjaGVjayBoaWdobGlnaHRpbmcuIElmIHRoZSBzZWxlY3Rpb25cbiAgLy8gaXMgbm90IGNvbGxhcHNlZCwgd2Ugd2lsbCByZS1yZW5kZXIuXG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIHNlbGVjdGlvblN0YXJ0ID0gc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCk7XG4gIHZhciBzZWxlY3Rpb25FbmQgPSBzZWxlY3Rpb24uZ2V0RW5kT2Zmc2V0KCk7XG4gIHZhciBhbmNob3JLZXkgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yS2V5KCk7XG5cbiAgaWYgKCFzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIC8vIElmIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdGV4dCBtYXRjaGVzIHdoYXQgdGhlIHVzZXIgaXMgdHJ5aW5nIHRvXG4gICAgLy8gcmVwbGFjZSBpdCB3aXRoLCBsZXQncyBqdXN0IHVwZGF0ZSB0aGUgYFNlbGVjdGlvblN0YXRlYC4gSWYgbm90LCB1cGRhdGVcbiAgICAvLyB0aGUgYENvbnRlbnRTdGF0ZWAgd2l0aCB0aGUgbmV3IHRleHQuXG4gICAgdmFyIGN1cnJlbnRseVNlbGVjdGVkQ2hhcnMgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLmdldFBsYWluVGV4dCgpLnNsaWNlKHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQpO1xuICAgIGlmIChjaGFycyA9PT0gY3VycmVudGx5U2VsZWN0ZWRDaGFycykge1xuICAgICAgZWRpdG9yLnVwZGF0ZShFZGl0b3JTdGF0ZS5mb3JjZVNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgc2VsZWN0aW9uLm1lcmdlKHtcbiAgICAgICAgZm9jdXNPZmZzZXQ6IHNlbGVjdGlvbkVuZFxuICAgICAgfSkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWRpdG9yLnVwZGF0ZShyZXBsYWNlVGV4dChlZGl0b3JTdGF0ZSwgY2hhcnMsIGVkaXRvclN0YXRlLmdldEN1cnJlbnRJbmxpbmVTdHlsZSgpLCBnZXRFbnRpdHlLZXlGb3JTZWxlY3Rpb24oZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkpKSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBuZXdFZGl0b3JTdGF0ZSA9IHJlcGxhY2VUZXh0KGVkaXRvclN0YXRlLCBjaGFycywgZWRpdG9yU3RhdGUuZ2V0Q3VycmVudElubGluZVN0eWxlKCksIGdldEVudGl0eUtleUZvclNlbGVjdGlvbihlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSkpO1xuXG4gIC8vIEJ1bmNoIG9mIGRpZmZlcmVudCBjYXNlcyBmb2xsb3cgd2hlcmUgd2UgbmVlZCB0byBwcmV2ZW50IG5hdGl2ZSBpbnNlcnRpb24uXG4gIHZhciBtdXN0UHJldmVudE5hdGl2ZSA9IGZhbHNlO1xuICBpZiAoIW11c3RQcmV2ZW50TmF0aXZlKSB7XG4gICAgLy8gQnJvd3NlcnMgdGVuZCB0byBpbnNlcnQgdGV4dCBpbiB3ZWlyZCBwbGFjZXMgaW4gdGhlIERPTSB3aGVuIHR5cGluZyBhdFxuICAgIC8vIHRoZSBzdGFydCBvZiBhIGxlYWYsIHNvIHdlJ2xsIGhhbmRsZSBpdCBvdXJzZWx2ZXMuXG4gICAgbXVzdFByZXZlbnROYXRpdmUgPSBpc1NlbGVjdGlvbkF0TGVhZlN0YXJ0KGVkaXRvci5fbGF0ZXN0Q29tbWl0dGVkRWRpdG9yU3RhdGUpO1xuICB9XG4gIGlmICghbXVzdFByZXZlbnROYXRpdmUpIHtcbiAgICAvLyBDaHJvbWUgd2lsbCBhbHNvIHNwbGl0IHVwIGEgbm9kZSBpbnRvIHR3byBwaWVjZXMgaWYgaXQgY29udGFpbnMgYSBUYWJcbiAgICAvLyBjaGFyLCBmb3Igbm8gZXhwbGljYWJsZSByZWFzb24uIFNlZW1pbmdseSBjYXVzZWQgYnkgdGhpcyBjb21taXQ6XG4gICAgLy8gaHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYy8rLzAxM2FjNWVhZjMlNUUlMjEvXG4gICAgdmFyIG5hdGl2ZVNlbGVjdGlvbiA9IGdsb2JhbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAvLyBTZWxlY3Rpb24gaXMgbmVjZXNzYXJpbHkgY29sbGFwc2VkIGF0IHRoaXMgcG9pbnQgZHVlIHRvIGVhcmxpZXIgY2hlY2suXG4gICAgaWYgKG5hdGl2ZVNlbGVjdGlvbi5hbmNob3JOb2RlICYmIG5hdGl2ZVNlbGVjdGlvbi5hbmNob3JOb2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgLy8gU2VlIGlzVGFiSFRNTFNwYW5FbGVtZW50IGluIGNocm9taXVtIEVkaXRpbmdVdGlsaXRpZXMuY3BwLlxuICAgICAgdmFyIHBhcmVudE5vZGUgPSBuYXRpdmVTZWxlY3Rpb24uYW5jaG9yTm9kZS5wYXJlbnROb2RlO1xuICAgICAgbXVzdFByZXZlbnROYXRpdmUgPSBwYXJlbnROb2RlLm5vZGVOYW1lID09PSAnU1BBTicgJiYgcGFyZW50Tm9kZS5maXJzdENoaWxkLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiBwYXJlbnROb2RlLmZpcnN0Q2hpbGQubm9kZVZhbHVlLmluZGV4T2YoJ1xcdCcpICE9PSAtMTtcbiAgICB9XG4gIH1cbiAgaWYgKCFtdXN0UHJldmVudE5hdGl2ZSkge1xuICAgIC8vIENoZWNrIHRoZSBvbGQgYW5kIG5ldyBcImZpbmdlcnByaW50c1wiIG9mIHRoZSBjdXJyZW50IGJsb2NrIHRvIGRldGVybWluZVxuICAgIC8vIHdoZXRoZXIgdGhpcyBpbnNlcnRpb24gcmVxdWlyZXMgYW55IGFkZGl0aW9uIG9yIHJlbW92YWwgb2YgdGV4dCBub2RlcyxcbiAgICAvLyBpbiB3aGljaCBjYXNlIHdlIHdvdWxkIHByZXZlbnQgdGhlIG5hdGl2ZSBjaGFyYWN0ZXIgaW5zZXJ0aW9uLlxuICAgIHZhciBvcmlnaW5hbEZpbmdlcnByaW50ID0gQmxvY2tUcmVlLmdldEZpbmdlcnByaW50KGVkaXRvclN0YXRlLmdldEJsb2NrVHJlZShhbmNob3JLZXkpKTtcbiAgICB2YXIgbmV3RmluZ2VycHJpbnQgPSBCbG9ja1RyZWUuZ2V0RmluZ2VycHJpbnQobmV3RWRpdG9yU3RhdGUuZ2V0QmxvY2tUcmVlKGFuY2hvcktleSkpO1xuICAgIG11c3RQcmV2ZW50TmF0aXZlID0gb3JpZ2luYWxGaW5nZXJwcmludCAhPT0gbmV3RmluZ2VycHJpbnQ7XG4gIH1cbiAgaWYgKCFtdXN0UHJldmVudE5hdGl2ZSkge1xuICAgIG11c3RQcmV2ZW50TmF0aXZlID0gbXVzdFByZXZlbnREZWZhdWx0Rm9yQ2hhcmFjdGVyKGNoYXJzKTtcbiAgfVxuICBpZiAoIW11c3RQcmV2ZW50TmF0aXZlKSB7XG4gICAgbXVzdFByZXZlbnROYXRpdmUgPSBudWxsdGhyb3dzKG5ld0VkaXRvclN0YXRlLmdldERpcmVjdGlvbk1hcCgpKS5nZXQoYW5jaG9yS2V5KSAhPT0gbnVsbHRocm93cyhlZGl0b3JTdGF0ZS5nZXREaXJlY3Rpb25NYXAoKSkuZ2V0KGFuY2hvcktleSk7XG4gIH1cblxuICBpZiAobXVzdFByZXZlbnROYXRpdmUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZWRpdG9yLnVwZGF0ZShuZXdFZGl0b3JTdGF0ZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gV2UgbWFkZSBpdCBhbGwgdGhlIHdheSEgTGV0IHRoZSBicm93c2VyIGRvIGl0cyB0aGluZyBhbmQgaW5zZXJ0IHRoZSBjaGFyLlxuICBuZXdFZGl0b3JTdGF0ZSA9IEVkaXRvclN0YXRlLnNldChuZXdFZGl0b3JTdGF0ZSwge1xuICAgIG5hdGl2ZWx5UmVuZGVyZWRDb250ZW50OiBuZXdFZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpXG4gIH0pO1xuICAvLyBUaGUgbmF0aXZlIGV2ZW50IGlzIGFsbG93ZWQgdG8gb2NjdXIuIFRvIGFsbG93IHVzZXIgb25DaGFuZ2UgaGFuZGxlcnMgdG9cbiAgLy8gY2hhbmdlIHRoZSBpbnNlcnRlZCB0ZXh0LCB3ZSB3YWl0IHVudGlsIHRoZSB0ZXh0IGlzIGFjdHVhbGx5IGluc2VydGVkXG4gIC8vIGJlZm9yZSB3ZSBhY3R1YWxseSB1cGRhdGUgb3VyIHN0YXRlLiBUaGF0IHdheSB3aGVuIHdlIHJlcmVuZGVyLCB0aGUgdGV4dFxuICAvLyB3ZSBzZWUgaW4gdGhlIERPTSB3aWxsIGFscmVhZHkgaGF2ZSBiZWVuIGluc2VydGVkIHByb3Blcmx5LlxuICBlZGl0b3IuX3BlbmRpbmdTdGF0ZUZyb21CZWZvcmVJbnB1dCA9IG5ld0VkaXRvclN0YXRlO1xuICBzZXRJbW1lZGlhdGUoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlZGl0b3IuX3BlbmRpbmdTdGF0ZUZyb21CZWZvcmVJbnB1dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBlZGl0b3IudXBkYXRlKGVkaXRvci5fcGVuZGluZ1N0YXRlRnJvbUJlZm9yZUlucHV0KTtcbiAgICAgIGVkaXRvci5fcGVuZGluZ1N0YXRlRnJvbUJlZm9yZUlucHV0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWRpdE9uQmVmb3JlSW5wdXQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdEVkaXRvckVkaXRIYW5kbGVyXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBvbkJlZm9yZUlucHV0ID0gcmVxdWlyZSgnLi9lZGl0T25CZWZvcmVJbnB1dCcpO1xudmFyIG9uQmx1ciA9IHJlcXVpcmUoJy4vZWRpdE9uQmx1cicpO1xudmFyIG9uQ29tcG9zaXRpb25TdGFydCA9IHJlcXVpcmUoJy4vZWRpdE9uQ29tcG9zaXRpb25TdGFydCcpO1xudmFyIG9uQ29weSA9IHJlcXVpcmUoJy4vZWRpdE9uQ29weScpO1xudmFyIG9uQ3V0ID0gcmVxdWlyZSgnLi9lZGl0T25DdXQnKTtcbnZhciBvbkRyYWdPdmVyID0gcmVxdWlyZSgnLi9lZGl0T25EcmFnT3ZlcicpO1xudmFyIG9uRHJhZ1N0YXJ0ID0gcmVxdWlyZSgnLi9lZGl0T25EcmFnU3RhcnQnKTtcbnZhciBvbkZvY3VzID0gcmVxdWlyZSgnLi9lZGl0T25Gb2N1cycpO1xudmFyIG9uSW5wdXQgPSByZXF1aXJlKCcuL2VkaXRPbklucHV0Jyk7XG52YXIgb25LZXlEb3duID0gcmVxdWlyZSgnLi9lZGl0T25LZXlEb3duJyk7XG52YXIgb25QYXN0ZSA9IHJlcXVpcmUoJy4vZWRpdE9uUGFzdGUnKTtcbnZhciBvblNlbGVjdCA9IHJlcXVpcmUoJy4vZWRpdE9uU2VsZWN0Jyk7XG5cbnZhciBEcmFmdEVkaXRvckVkaXRIYW5kbGVyID0ge1xuICBvbkJlZm9yZUlucHV0OiBvbkJlZm9yZUlucHV0LFxuICBvbkJsdXI6IG9uQmx1cixcbiAgb25Db21wb3NpdGlvblN0YXJ0OiBvbkNvbXBvc2l0aW9uU3RhcnQsXG4gIG9uQ29weTogb25Db3B5LFxuICBvbkN1dDogb25DdXQsXG4gIG9uRHJhZ092ZXI6IG9uRHJhZ092ZXIsXG4gIG9uRHJhZ1N0YXJ0OiBvbkRyYWdTdGFydCxcbiAgb25Gb2N1czogb25Gb2N1cyxcbiAgb25JbnB1dDogb25JbnB1dCxcbiAgb25LZXlEb3duOiBvbktleURvd24sXG4gIG9uUGFzdGU6IG9uUGFzdGUsXG4gIG9uU2VsZWN0OiBvblNlbGVjdFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVkaXRvckVkaXRIYW5kbGVyOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIENvbnZlcnQgYXJyYXktbGlrZSBvYmplY3RzIHRvIGFycmF5cy5cbiAqXG4gKiBUaGlzIEFQSSBhc3N1bWVzIHRoZSBjYWxsZXIga25vd3MgdGhlIGNvbnRlbnRzIG9mIHRoZSBkYXRhIHR5cGUuIEZvciBsZXNzXG4gKiB3ZWxsIGRlZmluZWQgaW5wdXRzIHVzZSBjcmVhdGVBcnJheUZyb21NaXhlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbnxmaWxlbGlzdH0gb2JqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gdG9BcnJheShvYmopIHtcbiAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cbiAgLy8gU29tZSBicm93c2VycyBidWlsdGluIG9iamVjdHMgY2FuIHJlcG9ydCB0eXBlb2YgJ2Z1bmN0aW9uJyAoZS5nLiBOb2RlTGlzdFxuICAvLyBpbiBvbGQgdmVyc2lvbnMgb2YgU2FmYXJpKS5cbiAgISghQXJyYXkuaXNBcnJheShvYmopICYmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogQXJyYXktbGlrZSBvYmplY3QgZXhwZWN0ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgISh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogT2JqZWN0IG5lZWRzIGEgbGVuZ3RoIHByb3BlcnR5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICEobGVuZ3RoID09PSAwIHx8IGxlbmd0aCAtIDEgaW4gb2JqKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBPYmplY3Qgc2hvdWxkIGhhdmUga2V5cyBmb3IgaW5kaWNlcycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAhKHR5cGVvZiBvYmouY2FsbGVlICE9PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBPYmplY3QgY2FuXFwndCBiZSBgYXJndW1lbnRzYC4gVXNlIHJlc3QgcGFyYW1zICcgKyAnKGZ1bmN0aW9uKC4uLmFyZ3MpIHt9KSBvciBBcnJheS5mcm9tKCkgaW5zdGVhZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgLy8gT2xkIElFIGRvZXNuJ3QgZ2l2ZSBjb2xsZWN0aW9ucyBhY2Nlc3MgdG8gaGFzT3duUHJvcGVydHkuIEFzc3VtZSBpbnB1dHNcbiAgLy8gd2l0aG91dCBtZXRob2Qgd2lsbCB0aHJvdyBkdXJpbmcgdGhlIHNsaWNlIGNhbGwgYW5kIHNraXAgc3RyYWlnaHQgdG8gdGhlXG4gIC8vIGZhbGxiYWNrLlxuICBpZiAob2JqLmhhc093blByb3BlcnR5KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvYmopO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElFIDwgOSBkb2VzIG5vdCBzdXBwb3J0IEFycmF5I3NsaWNlIG9uIGNvbGxlY3Rpb25zIG9iamVjdHNcbiAgICB9XG4gIH1cblxuICAvLyBGYWxsIGJhY2sgdG8gY29weWluZyBrZXkgYnkga2V5LiBUaGlzIGFzc3VtZXMgYWxsIGtleXMgaGF2ZSBhIHZhbHVlLFxuICAvLyBzbyB3aWxsIG5vdCBwcmVzZXJ2ZSBzcGFyc2VseSBwb3B1bGF0ZWQgaW5wdXRzLlxuICB2YXIgcmV0ID0gQXJyYXkobGVuZ3RoKTtcbiAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGxlbmd0aDsgaWkrKykge1xuICAgIHJldFtpaV0gPSBvYmpbaWldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogUGVyZm9ybSBhIGhldXJpc3RpYyB0ZXN0IHRvIGRldGVybWluZSBpZiBhbiBvYmplY3QgaXMgXCJhcnJheS1saWtlXCIuXG4gKlxuICogICBBIG1vbmsgYXNrZWQgSm9zaHUsIGEgWmVuIG1hc3RlciwgXCJIYXMgYSBkb2cgQnVkZGhhIG5hdHVyZT9cIlxuICogICBKb3NodSByZXBsaWVkOiBcIk11LlwiXG4gKlxuICogVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGl0cyBhcmd1bWVudCBoYXMgXCJhcnJheSBuYXR1cmVcIjogaXQgcmV0dXJuc1xuICogdHJ1ZSBpZiB0aGUgYXJndW1lbnQgaXMgYW4gYWN0dWFsIGFycmF5LCBhbiBgYXJndW1lbnRzJyBvYmplY3QsIG9yIGFuXG4gKiBIVE1MQ29sbGVjdGlvbiAoZS5nLiBub2RlLmNoaWxkTm9kZXMgb3Igbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgpKS5cbiAqXG4gKiBJdCB3aWxsIHJldHVybiBmYWxzZSBmb3Igb3RoZXIgYXJyYXktbGlrZSBvYmplY3RzIGxpa2UgRmlsZWxpc3QuXG4gKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGhhc0FycmF5TmF0dXJlKG9iaikge1xuICByZXR1cm4gKFxuICAgIC8vIG5vdCBudWxsL2ZhbHNlXG4gICAgISFvYmogJiYgKFxuICAgIC8vIGFycmF5cyBhcmUgb2JqZWN0cywgTm9kZUxpc3RzIGFyZSBmdW5jdGlvbnMgaW4gU2FmYXJpXG4gICAgdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09ICdmdW5jdGlvbicpICYmXG4gICAgLy8gcXVhY2tzIGxpa2UgYW4gYXJyYXlcbiAgICAnbGVuZ3RoJyBpbiBvYmogJiZcbiAgICAvLyBub3Qgd2luZG93XG4gICAgISgnc2V0SW50ZXJ2YWwnIGluIG9iaikgJiZcbiAgICAvLyBubyBET00gbm9kZSBzaG91bGQgYmUgY29uc2lkZXJlZCBhbiBhcnJheS1saWtlXG4gICAgLy8gYSAnc2VsZWN0JyBlbGVtZW50IGhhcyAnbGVuZ3RoJyBhbmQgJ2l0ZW0nIHByb3BlcnRpZXMgb24gSUU4XG4gICAgdHlwZW9mIG9iai5ub2RlVHlwZSAhPSAnbnVtYmVyJyAmJiAoXG4gICAgLy8gYSByZWFsIGFycmF5XG4gICAgQXJyYXkuaXNBcnJheShvYmopIHx8XG4gICAgLy8gYXJndW1lbnRzXG4gICAgJ2NhbGxlZScgaW4gb2JqIHx8XG4gICAgLy8gSFRNTENvbGxlY3Rpb24vTm9kZUxpc3RcbiAgICAnaXRlbScgaW4gb2JqKVxuICApO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheSBieSB3cmFwcGluZyBpdCBpbiBhbiBhcnJheSBpZiBpdCBpcyBub3QuXG4gKiBDcmVhdGVzIGEgY29weSBvZiB0aGUgYXJndW1lbnQgaWYgaXQgaXMgYWxyZWFkeSBhbiBhcnJheS5cbiAqXG4gKiBUaGlzIGlzIG1vc3RseSB1c2VmdWwgaWRpb21hdGljYWxseTpcbiAqXG4gKiAgIHZhciBjcmVhdGVBcnJheUZyb21NaXhlZCA9IHJlcXVpcmUoJ2NyZWF0ZUFycmF5RnJvbU1peGVkJyk7XG4gKlxuICogICBmdW5jdGlvbiB0YWtlc09uZU9yTW9yZVRoaW5ncyh0aGluZ3MpIHtcbiAqICAgICB0aGluZ3MgPSBjcmVhdGVBcnJheUZyb21NaXhlZCh0aGluZ3MpO1xuICogICAgIC4uLlxuICogICB9XG4gKlxuICogVGhpcyBhbGxvd3MgeW91IHRvIHRyZWF0IGB0aGluZ3MnIGFzIGFuIGFycmF5LCBidXQgYWNjZXB0IHNjYWxhcnMgaW4gdGhlIEFQSS5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byBjb252ZXJ0IGFuIGFycmF5LWxpa2Ugb2JqZWN0LCBsaWtlIGBhcmd1bWVudHNgLCBpbnRvIGFuIGFycmF5XG4gKiB1c2UgdG9BcnJheSBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXJyYXlGcm9tTWl4ZWQob2JqKSB7XG4gIGlmICghaGFzQXJyYXlOYXR1cmUob2JqKSkge1xuICAgIHJldHVybiBbb2JqXTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqLnNsaWNlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRvQXJyYXkob2JqKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUFycmF5RnJvbU1peGVkOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbnZhciBQaG90b3NNaW1lVHlwZSA9IHtcbiAgaXNJbWFnZTogZnVuY3Rpb24gaXNJbWFnZShtaW1lU3RyaW5nKSB7XG4gICAgcmV0dXJuIGdldFBhcnRzKG1pbWVTdHJpbmcpWzBdID09PSAnaW1hZ2UnO1xuICB9LFxuICBpc0pwZWc6IGZ1bmN0aW9uIGlzSnBlZyhtaW1lU3RyaW5nKSB7XG4gICAgdmFyIHBhcnRzID0gZ2V0UGFydHMobWltZVN0cmluZyk7XG4gICAgcmV0dXJuIFBob3Rvc01pbWVUeXBlLmlzSW1hZ2UobWltZVN0cmluZykgJiYgKFxuICAgIC8vIHNlZSBodHRwOi8vZmJ1cmwuY29tLzEwOTcyMTk0XG4gICAgcGFydHNbMV0gPT09ICdqcGVnJyB8fCBwYXJ0c1sxXSA9PT0gJ3BqcGVnJyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldFBhcnRzKG1pbWVTdHJpbmcpIHtcbiAgcmV0dXJuIG1pbWVTdHJpbmcuc3BsaXQoJy8nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQaG90b3NNaW1lVHlwZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0RWRpdG9yRHJhZ0hhbmRsZXJcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERhdGFUcmFuc2ZlciA9IHJlcXVpcmUoJ2ZianMvbGliL0RhdGFUcmFuc2ZlcicpO1xudmFyIERyYWZ0TW9kaWZpZXIgPSByZXF1aXJlKCcuL0RyYWZ0TW9kaWZpZXInKTtcbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoJy4vRWRpdG9yU3RhdGUnKTtcblxudmFyIGZpbmRBbmNlc3Rvck9mZnNldEtleSA9IHJlcXVpcmUoJy4vZmluZEFuY2VzdG9yT2Zmc2V0S2V5Jyk7XG52YXIgZ2V0VGV4dENvbnRlbnRGcm9tRmlsZXMgPSByZXF1aXJlKCcuL2dldFRleHRDb250ZW50RnJvbUZpbGVzJyk7XG52YXIgZ2V0VXBkYXRlZFNlbGVjdGlvblN0YXRlID0gcmVxdWlyZSgnLi9nZXRVcGRhdGVkU2VsZWN0aW9uU3RhdGUnKTtcbnZhciBpc0V2ZW50SGFuZGxlZCA9IHJlcXVpcmUoJy4vaXNFdmVudEhhbmRsZWQnKTtcbnZhciBudWxsdGhyb3dzID0gcmVxdWlyZSgnZmJqcy9saWIvbnVsbHRocm93cycpO1xuXG4vKipcbiAqIEdldCBhIFNlbGVjdGlvblN0YXRlIGZvciB0aGUgc3VwcGxpZWQgbW91c2UgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbkZvckV2ZW50KGV2ZW50LCBlZGl0b3JTdGF0ZSkge1xuICB2YXIgbm9kZSA9IG51bGw7XG4gIHZhciBvZmZzZXQgPSBudWxsO1xuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQuY2FyZXRSYW5nZUZyb21Qb2ludCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBkcm9wUmFuZ2UgPSBkb2N1bWVudC5jYXJldFJhbmdlRnJvbVBvaW50KGV2ZW50LngsIGV2ZW50LnkpO1xuICAgIG5vZGUgPSBkcm9wUmFuZ2Uuc3RhcnRDb250YWluZXI7XG4gICAgb2Zmc2V0ID0gZHJvcFJhbmdlLnN0YXJ0T2Zmc2V0O1xuICB9IGVsc2UgaWYgKGV2ZW50LnJhbmdlUGFyZW50KSB7XG4gICAgbm9kZSA9IGV2ZW50LnJhbmdlUGFyZW50O1xuICAgIG9mZnNldCA9IGV2ZW50LnJhbmdlT2Zmc2V0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbm9kZSA9IG51bGx0aHJvd3Mobm9kZSk7XG4gIG9mZnNldCA9IG51bGx0aHJvd3Mob2Zmc2V0KTtcbiAgdmFyIG9mZnNldEtleSA9IG51bGx0aHJvd3MoZmluZEFuY2VzdG9yT2Zmc2V0S2V5KG5vZGUpKTtcblxuICByZXR1cm4gZ2V0VXBkYXRlZFNlbGVjdGlvblN0YXRlKGVkaXRvclN0YXRlLCBvZmZzZXRLZXksIG9mZnNldCwgb2Zmc2V0S2V5LCBvZmZzZXQpO1xufVxuXG52YXIgRHJhZnRFZGl0b3JEcmFnSGFuZGxlciA9IHtcbiAgLyoqXG4gICAqIERyYWcgb3JpZ2luYXRpbmcgZnJvbSBpbnB1dCB0ZXJtaW5hdGVkLlxuICAgKi9cbiAgb25EcmFnRW5kOiBmdW5jdGlvbiBvbkRyYWdFbmQoZWRpdG9yKSB7XG4gICAgZWRpdG9yLmV4aXRDdXJyZW50TW9kZSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBIYW5kbGUgZGF0YSBiZWluZyBkcm9wcGVkLlxuICAgKi9cbiAgb25Ecm9wOiBmdW5jdGlvbiBvbkRyb3AoZWRpdG9yLCBlKSB7XG4gICAgdmFyIGRhdGEgPSBuZXcgRGF0YVRyYW5zZmVyKGUubmF0aXZlRXZlbnQuZGF0YVRyYW5zZmVyKTtcblxuICAgIHZhciBlZGl0b3JTdGF0ZSA9IGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGU7XG4gICAgdmFyIGRyb3BTZWxlY3Rpb24gPSBnZXRTZWxlY3Rpb25Gb3JFdmVudChlLm5hdGl2ZUV2ZW50LCBlZGl0b3JTdGF0ZSk7XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZWRpdG9yLmV4aXRDdXJyZW50TW9kZSgpO1xuXG4gICAgaWYgKGRyb3BTZWxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBmaWxlcyA9IGRhdGEuZ2V0RmlsZXMoKTtcbiAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKGVkaXRvci5wcm9wcy5oYW5kbGVEcm9wcGVkRmlsZXMgJiYgaXNFdmVudEhhbmRsZWQoZWRpdG9yLnByb3BzLmhhbmRsZURyb3BwZWRGaWxlcyhkcm9wU2VsZWN0aW9uLCBmaWxlcykpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZ2V0VGV4dENvbnRlbnRGcm9tRmlsZXMoZmlsZXMsIGZ1bmN0aW9uIChmaWxlVGV4dCkge1xuICAgICAgICBmaWxlVGV4dCAmJiBlZGl0b3IudXBkYXRlKGluc2VydFRleHRBdFNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgZHJvcFNlbGVjdGlvbiwgZmlsZVRleHQpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkcmFnVHlwZSA9IGVkaXRvci5faW50ZXJuYWxEcmFnID8gJ2ludGVybmFsJyA6ICdleHRlcm5hbCc7XG4gICAgaWYgKGVkaXRvci5wcm9wcy5oYW5kbGVEcm9wICYmIGlzRXZlbnRIYW5kbGVkKGVkaXRvci5wcm9wcy5oYW5kbGVEcm9wKGRyb3BTZWxlY3Rpb24sIGRhdGEsIGRyYWdUeXBlKSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWRpdG9yLl9pbnRlcm5hbERyYWcpIHtcbiAgICAgIGVkaXRvci51cGRhdGUobW92ZVRleHQoZWRpdG9yU3RhdGUsIGRyb3BTZWxlY3Rpb24pKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlZGl0b3IudXBkYXRlKGluc2VydFRleHRBdFNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgZHJvcFNlbGVjdGlvbiwgZGF0YS5nZXRUZXh0KCkpKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbW92ZVRleHQoZWRpdG9yU3RhdGUsIHRhcmdldFNlbGVjdGlvbikge1xuICB2YXIgbmV3Q29udGVudFN0YXRlID0gRHJhZnRNb2RpZmllci5tb3ZlVGV4dChlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSwgdGFyZ2V0U2VsZWN0aW9uKTtcbiAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIG5ld0NvbnRlbnRTdGF0ZSwgJ2luc2VydC1mcmFnbWVudCcpO1xufVxuXG4vKipcbiAqIEluc2VydCB0ZXh0IGF0IGEgc3BlY2lmaWVkIHNlbGVjdGlvbi5cbiAqL1xuZnVuY3Rpb24gaW5zZXJ0VGV4dEF0U2VsZWN0aW9uKGVkaXRvclN0YXRlLCBzZWxlY3Rpb24sIHRleHQpIHtcbiAgdmFyIG5ld0NvbnRlbnRTdGF0ZSA9IERyYWZ0TW9kaWZpZXIuaW5zZXJ0VGV4dChlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBzZWxlY3Rpb24sIHRleHQsIGVkaXRvclN0YXRlLmdldEN1cnJlbnRJbmxpbmVTdHlsZSgpKTtcbiAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIG5ld0NvbnRlbnRTdGF0ZSwgJ2luc2VydC1mcmFnbWVudCcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RWRpdG9yRHJhZ0hhbmRsZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb21iaW5lcyBtdWx0aXBsZSBjbGFzc05hbWUgc3RyaW5ncyBpbnRvIG9uZS5cbiAqIGh0dHA6Ly9qc3BlcmYuY29tL2pvaW5jbGFzc2VzLWFyZ3MtdnMtYXJyYXlcbiAqXG4gKiBAcGFyYW0gey4uLj9zdHJpbmd9IGNsYXNzTmFtZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGpvaW5DbGFzc2VzKGNsYXNzTmFtZSAvKiwgLi4uICovKSB7XG4gIGlmICghY2xhc3NOYW1lKSB7XG4gICAgY2xhc3NOYW1lID0gJyc7XG4gIH1cbiAgdmFyIG5leHRDbGFzcyA9IHZvaWQgMDtcbiAgdmFyIGFyZ0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIGlmIChhcmdMZW5ndGggPiAxKSB7XG4gICAgZm9yICh2YXIgaWkgPSAxOyBpaSA8IGFyZ0xlbmd0aDsgaWkrKykge1xuICAgICAgbmV4dENsYXNzID0gYXJndW1lbnRzW2lpXTtcbiAgICAgIGlmIChuZXh0Q2xhc3MpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gKGNsYXNzTmFtZSA/IGNsYXNzTmFtZSArICcgJyA6ICcnKSArIG5leHRDbGFzcztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNsYXNzTmFtZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBqb2luQ2xhc3NlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRXaWR0aCgpIHtcbiAgdmFyIHdpZHRoID0gdm9pZCAwO1xuICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgd2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIH1cblxuICBpZiAoIXdpZHRoICYmIGRvY3VtZW50LmJvZHkpIHtcbiAgICB3aWR0aCA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7XG4gIH1cblxuICByZXR1cm4gd2lkdGggfHwgMDtcbn0gLyoqXG4gICAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICAgKlxuICAgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAgICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICAgKlxuICAgKiBcbiAgICogQHR5cGVjaGVja3NcbiAgICovXG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0SGVpZ2h0KCkge1xuICB2YXIgaGVpZ2h0ID0gdm9pZCAwO1xuICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgaGVpZ2h0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgfVxuXG4gIGlmICghaGVpZ2h0ICYmIGRvY3VtZW50LmJvZHkpIHtcbiAgICBoZWlnaHQgPSBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodDtcbiAgfVxuXG4gIHJldHVybiBoZWlnaHQgfHwgMDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2aWV3cG9ydCBkaW1lbnNpb25zIGluY2x1ZGluZyBhbnkgc2Nyb2xsYmFycy5cbiAqL1xuZnVuY3Rpb24gZ2V0Vmlld3BvcnREaW1lbnNpb25zKCkge1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCB8fCBnZXRWaWV3cG9ydFdpZHRoKCksXG4gICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZ2V0Vmlld3BvcnRIZWlnaHQoKVxuICB9O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHZpZXdwb3J0IGRpbWVuc2lvbnMgZXhjbHVkaW5nIGFueSBzY3JvbGxiYXJzLlxuICovXG5nZXRWaWV3cG9ydERpbWVuc2lvbnMud2l0aG91dFNjcm9sbGJhcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IGdldFZpZXdwb3J0V2lkdGgoKSxcbiAgICBoZWlnaHQ6IGdldFZpZXdwb3J0SGVpZ2h0KClcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Vmlld3BvcnREaW1lbnNpb25zOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBzdXBwbGllZCBlbGVtZW50IG9yIHdpbmRvdy5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlcyBhcmUgdW5ib3VuZGVkLCB1bmxpa2UgYGdldFNjcm9sbFBvc2l0aW9uYC4gVGhpcyBtZWFucyB0aGV5XG4gKiBtYXkgYmUgbmVnYXRpdmUgb3IgZXhjZWVkIHRoZSBlbGVtZW50IGJvdW5kYXJpZXMgKHdoaWNoIGlzIHBvc3NpYmxlIHVzaW5nXG4gKiBpbmVydGlhbCBzY3JvbGxpbmcpLlxuICpcbiAqIEBwYXJhbSB7RE9NV2luZG93fERPTUVsZW1lbnR9IHNjcm9sbGFibGVcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwIHdpdGggYHhgIGFuZCBgeWAga2V5cy5cbiAqL1xuXG5mdW5jdGlvbiBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlKSB7XG4gIGlmIChzY3JvbGxhYmxlLldpbmRvdyAmJiBzY3JvbGxhYmxlIGluc3RhbmNlb2Ygc2Nyb2xsYWJsZS5XaW5kb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogc2Nyb2xsYWJsZS5wYWdlWE9mZnNldCB8fCBzY3JvbGxhYmxlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgeTogc2Nyb2xsYWJsZS5wYWdlWU9mZnNldCB8fCBzY3JvbGxhYmxlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogc2Nyb2xsYWJsZS5zY3JvbGxMZWZ0LFxuICAgIHk6IHNjcm9sbGFibGUuc2Nyb2xsVG9wXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzV2Via2l0ID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdBcHBsZVdlYktpdCcpID4gLTE7XG5cbi8qKlxuICogR2V0cyB0aGUgZWxlbWVudCB3aXRoIHRoZSBkb2N1bWVudCBzY3JvbGwgcHJvcGVydGllcyBzdWNoIGFzIGBzY3JvbGxMZWZ0YCBhbmRcbiAqIGBzY3JvbGxIZWlnaHRgLiBUaGlzIG1heSBkaWZmZXIgYWNyb3NzIGRpZmZlcmVudCBicm93c2Vycy5cbiAqXG4gKiBOT1RFOiBUaGUgcmV0dXJuIHZhbHVlIGNhbiBiZSBudWxsIGlmIHRoZSBET00gaXMgbm90IHlldCByZWFkeS5cbiAqXG4gKiBAcGFyYW0gez9ET01Eb2N1bWVudH0gZG9jIERlZmF1bHRzIHRvIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZ2V0RG9jdW1lbnRTY3JvbGxFbGVtZW50KGRvYykge1xuICBkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG4gIGlmIChkb2Muc2Nyb2xsaW5nRWxlbWVudCkge1xuICAgIHJldHVybiBkb2Muc2Nyb2xsaW5nRWxlbWVudDtcbiAgfVxuICByZXR1cm4gIWlzV2Via2l0ICYmIGRvYy5jb21wYXRNb2RlID09PSAnQ1NTMUNvbXBhdCcgPyBkb2MuZG9jdW1lbnRFbGVtZW50IDogZG9jLmJvZHk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RG9jdW1lbnRTY3JvbGxFbGVtZW50OyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBjb250YWluc05vZGUgPSByZXF1aXJlKCcuL2NvbnRhaW5zTm9kZScpO1xuXG4vKipcbiAqIEdldHMgYW4gZWxlbWVudCdzIGJvdW5kaW5nIHJlY3QgaW4gcGl4ZWxzIHJlbGF0aXZlIHRvIHRoZSB2aWV3cG9ydC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0RWxlbWVudFJlY3QoZWxlbSkge1xuICB2YXIgZG9jRWxlbSA9IGVsZW0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgLy8gRkYgMiwgU2FmYXJpIDMgYW5kIE9wZXJhIDkuNS0gZG8gbm90IHN1cHBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuXG4gIC8vIElFOS0gd2lsbCB0aHJvdyBpZiB0aGUgZWxlbWVudCBpcyBub3QgaW4gdGhlIGRvY3VtZW50LlxuICBpZiAoISgnZ2V0Qm91bmRpbmdDbGllbnRSZWN0JyBpbiBlbGVtKSB8fCAhY29udGFpbnNOb2RlKGRvY0VsZW0sIGVsZW0pKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGJvdHRvbTogMFxuICAgIH07XG4gIH1cblxuICAvLyBTdWJ0cmFjdHMgY2xpZW50VG9wL0xlZnQgYmVjYXVzZSBJRTgtIGFkZGVkIGEgMnB4IGJvcmRlciB0byB0aGVcbiAgLy8gPGh0bWw+IGVsZW1lbnQgKHNlZSBodHRwOi8vZmJ1cmwuY29tLzE0OTMyMTMpLiBJRSA3IGluXG4gIC8vIFF1aWNrc21vZGUgZG9lcyBub3QgcmVwb3J0IGNsaWVudExlZnQvY2xpZW50VG9wIHNvIHRoZXJlXG4gIC8vIHdpbGwgYmUgYW4gdW5hY2NvdW50ZWQgb2Zmc2V0IG9mIDJweCB3aGVuIGluIHF1aXJrc21vZGVcbiAgdmFyIHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIHJldHVybiB7XG4gICAgbGVmdDogTWF0aC5yb3VuZChyZWN0LmxlZnQpIC0gZG9jRWxlbS5jbGllbnRMZWZ0LFxuICAgIHJpZ2h0OiBNYXRoLnJvdW5kKHJlY3QucmlnaHQpIC0gZG9jRWxlbS5jbGllbnRMZWZ0LFxuICAgIHRvcDogTWF0aC5yb3VuZChyZWN0LnRvcCkgLSBkb2NFbGVtLmNsaWVudFRvcCxcbiAgICBib3R0b206IE1hdGgucm91bmQocmVjdC5ib3R0b20pIC0gZG9jRWxlbS5jbGllbnRUb3BcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFbGVtZW50UmVjdDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgZ2V0RWxlbWVudFJlY3QgPSByZXF1aXJlKCcuL2dldEVsZW1lbnRSZWN0Jyk7XG5cbi8qKlxuICogR2V0cyBhbiBlbGVtZW50J3MgcG9zaXRpb24gaW4gcGl4ZWxzIHJlbGF0aXZlIHRvIHRoZSB2aWV3cG9ydC4gVGhlIHJldHVybmVkXG4gKiBvYmplY3QgcmVwcmVzZW50cyB0aGUgcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQncyB0b3AgbGVmdCBjb3JuZXIuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldEVsZW1lbnRQb3NpdGlvbihlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZ2V0RWxlbWVudFJlY3QoZWxlbWVudCk7XG4gIHJldHVybiB7XG4gICAgeDogcmVjdC5sZWZ0LFxuICAgIHk6IHJlY3QudG9wLFxuICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LFxuICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEVsZW1lbnRQb3NpdGlvbjsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgX3VwcGVyY2FzZVBhdHRlcm4gPSAvKFtBLVpdKS9nO1xuXG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIHN0cmluZywgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICpcbiAqIEZvciBDU1Mgc3R5bGUgbmFtZXMsIHVzZSBgaHlwaGVuYXRlU3R5bGVOYW1lYCBpbnN0ZWFkIHdoaWNoIHdvcmtzIHByb3Blcmx5XG4gKiB3aXRoIGFsbCB2ZW5kb3IgcHJlZml4ZXMsIGluY2x1ZGluZyBgbXNgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gaHlwaGVuYXRlKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoX3VwcGVyY2FzZVBhdHRlcm4sICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG5cbi8qKlxuICogQ2FtZWxjYXNlcyBhIGh5cGhlbmF0ZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gY2FtZWxpemUoJ2JhY2tncm91bmQtY29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZENvbG9yXCJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoX2h5cGhlblBhdHRlcm4sIGZ1bmN0aW9uIChfLCBjaGFyYWN0ZXIpIHtcbiAgICByZXR1cm4gY2hhcmFjdGVyLnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbWVsaXplOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBjYW1lbGl6ZSA9IHJlcXVpcmUoJy4vY2FtZWxpemUnKTtcbnZhciBoeXBoZW5hdGUgPSByZXF1aXJlKCcuL2h5cGhlbmF0ZScpO1xuXG5mdW5jdGlvbiBhc1N0cmluZyh2YWx1ZSkgLyo/c3RyaW5nKi97XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdmFsdWUgOiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBnZXRTdHlsZVByb3BlcnR5KCAvKkRPTU5vZGUqL25vZGUsIC8qc3RyaW5nKi9uYW1lKSAvKj9zdHJpbmcqL3tcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSB2b2lkIDA7XG5cbiAgLy8gVzNDIFN0YW5kYXJkXG4gIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgIC8vIEluIGNlcnRhaW4gY2FzZXMgc3VjaCBhcyB3aXRoaW4gYW4gaWZyYW1lIGluIEZGMywgdGhpcyByZXR1cm5zIG51bGwuXG4gICAgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpO1xuICAgIGlmIChjb21wdXRlZFN0eWxlKSB7XG4gICAgICByZXR1cm4gYXNTdHJpbmcoY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKGh5cGhlbmF0ZShuYW1lKSkpO1xuICAgIH1cbiAgfVxuICAvLyBTYWZhcmlcbiAgaWYgKGRvY3VtZW50LmRlZmF1bHRWaWV3ICYmIGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICBjb21wdXRlZFN0eWxlID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKTtcbiAgICAvLyBBIFNhZmFyaSBidWcgY2F1c2VzIHRoaXMgdG8gcmV0dXJuIG51bGwgZm9yIGBkaXNwbGF5OiBub25lYCBlbGVtZW50cy5cbiAgICBpZiAoY29tcHV0ZWRTdHlsZSkge1xuICAgICAgcmV0dXJuIGFzU3RyaW5nKGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShoeXBoZW5hdGUobmFtZSkpKTtcbiAgICB9XG4gICAgaWYgKG5hbWUgPT09ICdkaXNwbGF5Jykge1xuICAgICAgcmV0dXJuICdub25lJztcbiAgICB9XG4gIH1cbiAgLy8gSW50ZXJuZXQgRXhwbG9yZXJcbiAgaWYgKG5vZGUuY3VycmVudFN0eWxlKSB7XG4gICAgaWYgKG5hbWUgPT09ICdmbG9hdCcpIHtcbiAgICAgIHJldHVybiBhc1N0cmluZyhub2RlLmN1cnJlbnRTdHlsZS5jc3NGbG9hdCB8fCBub2RlLmN1cnJlbnRTdHlsZS5zdHlsZUZsb2F0KTtcbiAgICB9XG4gICAgcmV0dXJuIGFzU3RyaW5nKG5vZGUuY3VycmVudFN0eWxlW2NhbWVsaXplKG5hbWUpXSk7XG4gIH1cbiAgcmV0dXJuIGFzU3RyaW5nKG5vZGUuc3R5bGUgJiYgbm9kZS5zdHlsZVtjYW1lbGl6ZShuYW1lKV0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN0eWxlUHJvcGVydHk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdEpzRGVidWdMb2dnaW5nXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbG9nU2VsZWN0aW9uU3RhdGVGYWlsdXJlOiBmdW5jdGlvbiBsb2dTZWxlY3Rpb25TdGF0ZUZhaWx1cmUoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzZXREcmFmdEVkaXRvclNlbGVjdGlvblxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRKc0RlYnVnTG9nZ2luZyA9IHJlcXVpcmUoJy4vRHJhZnRKc0RlYnVnTG9nZ2luZycpO1xuXG52YXIgY29udGFpbnNOb2RlID0gcmVxdWlyZSgnZmJqcy9saWIvY29udGFpbnNOb2RlJyk7XG52YXIgZ2V0QWN0aXZlRWxlbWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuZnVuY3Rpb24gZ2V0QW5vbnltaXplZERPTShub2RlLCBnZXROb2RlTGFiZWxzKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybiAnW2VtcHR5XSc7XG4gIH1cblxuICB2YXIgYW5vbnltaXplZCA9IGFub255bWl6ZVRleHRXaXRoaW4obm9kZSwgZ2V0Tm9kZUxhYmVscyk7XG4gIGlmIChhbm9ueW1pemVkLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgIHJldHVybiBhbm9ueW1pemVkLnRleHRDb250ZW50O1xuICB9XG5cbiAgIShhbm9ueW1pemVkIGluc3RhbmNlb2YgRWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTm9kZSBtdXN0IGJlIGFuIEVsZW1lbnQgaWYgaXQgaXMgbm90IGEgdGV4dCBub2RlLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGFub255bWl6ZWQub3V0ZXJIVE1MO1xufVxuXG5mdW5jdGlvbiBhbm9ueW1pemVUZXh0V2l0aGluKG5vZGUsIGdldE5vZGVMYWJlbHMpIHtcbiAgdmFyIGxhYmVscyA9IGdldE5vZGVMYWJlbHMgIT09IHVuZGVmaW5lZCA/IGdldE5vZGVMYWJlbHMobm9kZSkgOiBbXTtcblxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICB2YXIgbGVuZ3RoID0gbm9kZS50ZXh0Q29udGVudC5sZW5ndGg7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdbdGV4dCAnICsgbGVuZ3RoICsgKGxhYmVscy5sZW5ndGggPyAnIHwgJyArIGxhYmVscy5qb2luKCcsICcpIDogJycpICsgJ10nKTtcbiAgfVxuXG4gIHZhciBjbG9uZSA9IG5vZGUuY2xvbmVOb2RlKCk7XG4gIGlmIChjbG9uZS5ub2RlVHlwZSA9PT0gMSAmJiBsYWJlbHMubGVuZ3RoKSB7XG4gICAgY2xvbmUuc2V0QXR0cmlidXRlKCdkYXRhLWxhYmVscycsIGxhYmVscy5qb2luKCcsICcpKTtcbiAgfVxuICB2YXIgY2hpbGROb2RlcyA9IG5vZGUuY2hpbGROb2RlcztcbiAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGNoaWxkTm9kZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgY2xvbmUuYXBwZW5kQ2hpbGQoYW5vbnltaXplVGV4dFdpdGhpbihjaGlsZE5vZGVzW2lpXSwgZ2V0Tm9kZUxhYmVscykpO1xuICB9XG5cbiAgcmV0dXJuIGNsb25lO1xufVxuXG5mdW5jdGlvbiBnZXRBbm9ueW1pemVkRWRpdG9yRE9NKG5vZGUsIGdldE5vZGVMYWJlbHMpIHtcbiAgLy8gZ3JhYmJpbmcgdGhlIERPTSBjb250ZW50IG9mIHRoZSBEcmFmdCBlZGl0b3JcbiAgdmFyIGN1cnJlbnROb2RlID0gbm9kZTtcbiAgd2hpbGUgKGN1cnJlbnROb2RlKSB7XG4gICAgaWYgKGN1cnJlbnROb2RlIGluc3RhbmNlb2YgRWxlbWVudCAmJiBjdXJyZW50Tm9kZS5oYXNBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpKSB7XG4gICAgICAvLyBmb3VuZCB0aGUgRHJhZnQgZWRpdG9yIGNvbnRhaW5lclxuICAgICAgcmV0dXJuIGdldEFub255bWl6ZWRET00oY3VycmVudE5vZGUsIGdldE5vZGVMYWJlbHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG4gIHJldHVybiAnQ291bGQgbm90IGZpbmQgY29udGVudEVkaXRhYmxlIHBhcmVudCBvZiBub2RlJztcbn1cblxuZnVuY3Rpb24gZ2V0Tm9kZUxlbmd0aChub2RlKSB7XG4gIHJldHVybiBub2RlLm5vZGVWYWx1ZSA9PT0gbnVsbCA/IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggOiBub2RlLm5vZGVWYWx1ZS5sZW5ndGg7XG59XG5cbi8qKlxuICogSW4gbW9kZXJuIG5vbi1JRSBicm93c2Vycywgd2UgY2FuIHN1cHBvcnQgYm90aCBmb3J3YXJkIGFuZCBiYWNrd2FyZFxuICogc2VsZWN0aW9ucy5cbiAqXG4gKiBOb3RlOiBJRTEwKyBzdXBwb3J0cyB0aGUgU2VsZWN0aW9uIG9iamVjdCwgYnV0IGl0IGRvZXMgbm90IHN1cHBvcnRcbiAqIHRoZSBgZXh0ZW5kYCBtZXRob2QsIHdoaWNoIG1lYW5zIHRoYXQgZXZlbiBpbiBtb2Rlcm4gSUUsIGl0J3Mgbm90IHBvc3NpYmxlXG4gKiB0byBwcm9ncmFtYXRpY2FsbHkgY3JlYXRlIGEgYmFja3dhcmQgc2VsZWN0aW9uLiBUaHVzLCBmb3IgYWxsIElFXG4gKiB2ZXJzaW9ucywgd2UgdXNlIHRoZSBvbGQgSUUgQVBJIHRvIGNyZWF0ZSBvdXIgc2VsZWN0aW9ucy5cbiAqL1xuZnVuY3Rpb24gc2V0RHJhZnRFZGl0b3JTZWxlY3Rpb24oc2VsZWN0aW9uU3RhdGUsIG5vZGUsIGJsb2NrS2V5LCBub2RlU3RhcnQsIG5vZGVFbmQpIHtcbiAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHRoZSBlZGl0b3IgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBET00gYnV0XG4gIC8vIG91ciBzZWxlY3Rpb24gY29kZSBkb2Vzbid0IGtub3cgaXQgeWV0LiBGb3JjaW5nIHNlbGVjdGlvbiBpblxuICAvLyB0aGlzIGNhc2UgbWF5IGxlYWQgdG8gZXJyb3JzLCBzbyBqdXN0IGJhaWwgbm93LlxuICBpZiAoIWNvbnRhaW5zTm9kZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIG5vZGUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbiA9IGdsb2JhbC5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGFuY2hvcktleSA9IHNlbGVjdGlvblN0YXRlLmdldEFuY2hvcktleSgpO1xuICB2YXIgYW5jaG9yT2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0QW5jaG9yT2Zmc2V0KCk7XG4gIHZhciBmb2N1c0tleSA9IHNlbGVjdGlvblN0YXRlLmdldEZvY3VzS2V5KCk7XG4gIHZhciBmb2N1c09mZnNldCA9IHNlbGVjdGlvblN0YXRlLmdldEZvY3VzT2Zmc2V0KCk7XG4gIHZhciBpc0JhY2t3YXJkID0gc2VsZWN0aW9uU3RhdGUuZ2V0SXNCYWNrd2FyZCgpO1xuXG4gIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBiYWNrd2FyZCBzZWxlY3Rpb24uIFN3YXAga2V5L29mZnNldCBwYWlycy5cbiAgaWYgKCFzZWxlY3Rpb24uZXh0ZW5kICYmIGlzQmFja3dhcmQpIHtcbiAgICB2YXIgdGVtcEtleSA9IGFuY2hvcktleTtcbiAgICB2YXIgdGVtcE9mZnNldCA9IGFuY2hvck9mZnNldDtcbiAgICBhbmNob3JLZXkgPSBmb2N1c0tleTtcbiAgICBhbmNob3JPZmZzZXQgPSBmb2N1c09mZnNldDtcbiAgICBmb2N1c0tleSA9IHRlbXBLZXk7XG4gICAgZm9jdXNPZmZzZXQgPSB0ZW1wT2Zmc2V0O1xuICAgIGlzQmFja3dhcmQgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciBoYXNBbmNob3IgPSBhbmNob3JLZXkgPT09IGJsb2NrS2V5ICYmIG5vZGVTdGFydCA8PSBhbmNob3JPZmZzZXQgJiYgbm9kZUVuZCA+PSBhbmNob3JPZmZzZXQ7XG5cbiAgdmFyIGhhc0ZvY3VzID0gZm9jdXNLZXkgPT09IGJsb2NrS2V5ICYmIG5vZGVTdGFydCA8PSBmb2N1c09mZnNldCAmJiBub2RlRW5kID49IGZvY3VzT2Zmc2V0O1xuXG4gIC8vIElmIHRoZSBzZWxlY3Rpb24gaXMgZW50aXJlbHkgYm91bmQgd2l0aGluIHRoaXMgbm9kZSwgc2V0IHRoZSBzZWxlY3Rpb25cbiAgLy8gYW5kIGJlIGRvbmUuXG4gIGlmIChoYXNBbmNob3IgJiYgaGFzRm9jdXMpIHtcbiAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgYWRkUG9pbnRUb1NlbGVjdGlvbihzZWxlY3Rpb24sIG5vZGUsIGFuY2hvck9mZnNldCAtIG5vZGVTdGFydCwgc2VsZWN0aW9uU3RhdGUpO1xuICAgIGFkZEZvY3VzVG9TZWxlY3Rpb24oc2VsZWN0aW9uLCBub2RlLCBmb2N1c09mZnNldCAtIG5vZGVTdGFydCwgc2VsZWN0aW9uU3RhdGUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghaXNCYWNrd2FyZCkge1xuICAgIC8vIElmIHRoZSBhbmNob3IgaXMgd2l0aGluIHRoaXMgbm9kZSwgc2V0IHRoZSByYW5nZSBzdGFydC5cbiAgICBpZiAoaGFzQW5jaG9yKSB7XG4gICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICBhZGRQb2ludFRvU2VsZWN0aW9uKHNlbGVjdGlvbiwgbm9kZSwgYW5jaG9yT2Zmc2V0IC0gbm9kZVN0YXJ0LCBzZWxlY3Rpb25TdGF0ZSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIGZvY3VzIGlzIHdpdGhpbiB0aGlzIG5vZGUsIHdlIGNhbiBhc3N1bWUgdGhhdCB3ZSBoYXZlXG4gICAgLy8gYWxyZWFkeSBzZXQgdGhlIGFwcHJvcHJpYXRlIHN0YXJ0IHJhbmdlIG9uIHRoZSBzZWxlY3Rpb24sIGFuZFxuICAgIC8vIGNhbiBzaW1wbHkgZXh0ZW5kIHRoZSBzZWxlY3Rpb24uXG4gICAgaWYgKGhhc0ZvY3VzKSB7XG4gICAgICBhZGRGb2N1c1RvU2VsZWN0aW9uKHNlbGVjdGlvbiwgbm9kZSwgZm9jdXNPZmZzZXQgLSBub2RlU3RhcnQsIHNlbGVjdGlvblN0YXRlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdGhpcyBub2RlIGhhcyB0aGUgZm9jdXMsIHNldCB0aGUgc2VsZWN0aW9uIHJhbmdlIHRvIGJlIGFcbiAgICAvLyBjb2xsYXBzZWQgcmFuZ2UgYmVnaW5uaW5nIGhlcmUuIExhdGVyLCB3aGVuIHdlIGVuY291bnRlciB0aGUgYW5jaG9yLFxuICAgIC8vIHdlJ2xsIHVzZSB0aGlzIGluZm9ybWF0aW9uIHRvIGV4dGVuZCB0aGUgc2VsZWN0aW9uLlxuICAgIGlmIChoYXNGb2N1cykge1xuICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgYWRkUG9pbnRUb1NlbGVjdGlvbihzZWxlY3Rpb24sIG5vZGUsIGZvY3VzT2Zmc2V0IC0gbm9kZVN0YXJ0LCBzZWxlY3Rpb25TdGF0ZSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyBub2RlIGhhcyB0aGUgYW5jaG9yLCB3ZSBtYXkgYXNzdW1lIHRoYXQgdGhlIGNvcnJlY3RcbiAgICAvLyBmb2N1cyBpbmZvcm1hdGlvbiBpcyBhbHJlYWR5IHN0b3JlZCBvbiB0aGUgc2VsZWN0aW9uIG9iamVjdC5cbiAgICAvLyBXZSBrZWVwIHRyYWNrIG9mIGl0LCByZXNldCB0aGUgc2VsZWN0aW9uIHJhbmdlLCBhbmQgZXh0ZW5kIGl0XG4gICAgLy8gYmFjayB0byB0aGUgZm9jdXMgcG9pbnQuXG4gICAgaWYgKGhhc0FuY2hvcikge1xuICAgICAgdmFyIHN0b3JlZEZvY3VzTm9kZSA9IHNlbGVjdGlvbi5mb2N1c05vZGU7XG4gICAgICB2YXIgc3RvcmVkRm9jdXNPZmZzZXQgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG5cbiAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgIGFkZFBvaW50VG9TZWxlY3Rpb24oc2VsZWN0aW9uLCBub2RlLCBhbmNob3JPZmZzZXQgLSBub2RlU3RhcnQsIHNlbGVjdGlvblN0YXRlKTtcbiAgICAgIGFkZEZvY3VzVG9TZWxlY3Rpb24oc2VsZWN0aW9uLCBzdG9yZWRGb2N1c05vZGUsIHN0b3JlZEZvY3VzT2Zmc2V0LCBzZWxlY3Rpb25TdGF0ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRXh0ZW5kIHNlbGVjdGlvbiB0b3dhcmRzIGZvY3VzIHBvaW50LlxuICovXG5mdW5jdGlvbiBhZGRGb2N1c1RvU2VsZWN0aW9uKHNlbGVjdGlvbiwgbm9kZSwgb2Zmc2V0LCBzZWxlY3Rpb25TdGF0ZSkge1xuICB2YXIgYWN0aXZlRWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoKTtcbiAgaWYgKHNlbGVjdGlvbi5leHRlbmQgJiYgY29udGFpbnNOb2RlKGFjdGl2ZUVsZW1lbnQsIG5vZGUpKSB7XG4gICAgLy8gSWYgYGV4dGVuZGAgaXMgY2FsbGVkIHdoaWxlIGFub3RoZXIgZWxlbWVudCBoYXMgZm9jdXMsIGFuIGVycm9yIGlzXG4gICAgLy8gdGhyb3duLiBXZSB0aGVyZWZvcmUgZGlzYWJsZSBgZXh0ZW5kYCBpZiB0aGUgYWN0aXZlIGVsZW1lbnQgaXMgc29tZXdoZXJlXG4gICAgLy8gb3RoZXIgdGhhbiB0aGUgbm9kZSB3ZSBhcmUgc2VsZWN0aW5nLiBUaGlzIHNob3VsZCBvbmx5IG9jY3VyIGluIEZpcmVmb3gsXG4gICAgLy8gc2luY2UgaXQgaXMgdGhlIG9ubHkgYnJvd3NlciB0byBzdXBwb3J0IG11bHRpcGxlIHNlbGVjdGlvbnMuXG4gICAgLy8gU2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTkyMTQ0NC5cblxuICAgIC8vIGxvZ2dpbmcgdG8gY2F0Y2ggYnVnIHRoYXQgaXMgYmVpbmcgcmVwb3J0ZWQgaW4gdDE2MjUwNzk1XG4gICAgaWYgKG9mZnNldCA+IGdldE5vZGVMZW5ndGgobm9kZSkpIHtcbiAgICAgIC8vIHRoZSBjYWxsIHRvICdzZWxlY3Rpb24uZXh0ZW5kJyBpcyBhYm91dCB0byB0aHJvd1xuICAgICAgRHJhZnRKc0RlYnVnTG9nZ2luZy5sb2dTZWxlY3Rpb25TdGF0ZUZhaWx1cmUoe1xuICAgICAgICBhbm9ueW1pemVkRG9tOiBnZXRBbm9ueW1pemVkRWRpdG9yRE9NKG5vZGUpLFxuICAgICAgICBleHRyYVBhcmFtczogSlNPTi5zdHJpbmdpZnkoeyBvZmZzZXQ6IG9mZnNldCB9KSxcbiAgICAgICAgc2VsZWN0aW9uU3RhdGU6IEpTT04uc3RyaW5naWZ5KHNlbGVjdGlvblN0YXRlLnRvSlMoKSlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGxvZ2dpbmcgdG8gY2F0Y2ggYnVnIHRoYXQgaXMgYmVpbmcgcmVwb3J0ZWQgaW4gdDE4MTEwNjMyXG4gICAgdmFyIG5vZGVXYXNGb2N1cyA9IG5vZGUgPT09IHNlbGVjdGlvbi5mb2N1c05vZGU7XG4gICAgdHJ5IHtcbiAgICAgIHNlbGVjdGlvbi5leHRlbmQobm9kZSwgb2Zmc2V0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBEcmFmdEpzRGVidWdMb2dnaW5nLmxvZ1NlbGVjdGlvblN0YXRlRmFpbHVyZSh7XG4gICAgICAgIGFub255bWl6ZWREb206IGdldEFub255bWl6ZWRFZGl0b3JET00obm9kZSwgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICB2YXIgbGFiZWxzID0gW107XG4gICAgICAgICAgaWYgKG4gPT09IGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIGxhYmVscy5wdXNoKCdhY3RpdmUgZWxlbWVudCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobiA9PT0gc2VsZWN0aW9uLmFuY2hvck5vZGUpIHtcbiAgICAgICAgICAgIGxhYmVscy5wdXNoKCdzZWxlY3Rpb24gYW5jaG9yIG5vZGUnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG4gPT09IHNlbGVjdGlvbi5mb2N1c05vZGUpIHtcbiAgICAgICAgICAgIGxhYmVscy5wdXNoKCdzZWxlY3Rpb24gZm9jdXMgbm9kZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbGFiZWxzO1xuICAgICAgICB9KSxcbiAgICAgICAgZXh0cmFQYXJhbXM6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50TmFtZTogYWN0aXZlRWxlbWVudCA/IGFjdGl2ZUVsZW1lbnQubm9kZU5hbWUgOiBudWxsLFxuICAgICAgICAgIG5vZGVJc0ZvY3VzOiBub2RlID09PSBzZWxlY3Rpb24uZm9jdXNOb2RlLFxuICAgICAgICAgIG5vZGVXYXNGb2N1czogbm9kZVdhc0ZvY3VzLFxuICAgICAgICAgIHNlbGVjdGlvblJhbmdlQ291bnQ6IHNlbGVjdGlvbi5yYW5nZUNvdW50LFxuICAgICAgICAgIHNlbGVjdGlvbkFuY2hvck5vZGVOYW1lOiBzZWxlY3Rpb24uYW5jaG9yTm9kZSA/IHNlbGVjdGlvbi5hbmNob3JOb2RlLm5vZGVOYW1lIDogbnVsbCxcbiAgICAgICAgICBzZWxlY3Rpb25BbmNob3JPZmZzZXQ6IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgICAgICAgc2VsZWN0aW9uRm9jdXNOb2RlTmFtZTogc2VsZWN0aW9uLmZvY3VzTm9kZSA/IHNlbGVjdGlvbi5mb2N1c05vZGUubm9kZU5hbWUgOiBudWxsLFxuICAgICAgICAgIHNlbGVjdGlvbkZvY3VzT2Zmc2V0OiBzZWxlY3Rpb24uZm9jdXNPZmZzZXQsXG4gICAgICAgICAgbWVzc2FnZTogZSA/ICcnICsgZSA6IG51bGwsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXRcbiAgICAgICAgfSwgbnVsbCwgMiksXG4gICAgICAgIHNlbGVjdGlvblN0YXRlOiBKU09OLnN0cmluZ2lmeShzZWxlY3Rpb25TdGF0ZS50b0pTKCksIG51bGwsIDIpXG4gICAgICB9KTtcbiAgICAgIC8vIGFsbG93IHRoZSBlcnJvciB0byBiZSB0aHJvd24gLVxuICAgICAgLy8gYmV0dGVyIHRoYW4gY29udGludWluZyBpbiBhIGJyb2tlbiBzdGF0ZVxuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IGV4dGVuZC4gVGhpcyB3aWxsIG1lYW4gbm8gYmFja3dhcmQgc2VsZWN0aW9uLlxuICAgIC8vIEV4dHJhY3QgdGhlIGV4aXN0aW5nIHNlbGVjdGlvbiByYW5nZSBhbmQgYWRkIGZvY3VzIHRvIGl0LlxuICAgIC8vIEFkZGl0aW9uYWxseSwgY2xvbmUgdGhlIHNlbGVjdGlvbiByYW5nZS4gSUUxMSB0aHJvd3MgYW5cbiAgICAvLyBJbnZhbGlkU3RhdGVFcnJvciB3aGVuIGF0dGVtcHRpbmcgdG8gYWNjZXNzIHNlbGVjdGlvbiBwcm9wZXJ0aWVzXG4gICAgLy8gYWZ0ZXIgdGhlIHJhbmdlIGlzIGRldGFjaGVkLlxuICAgIHZhciByYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuICAgIHJhbmdlLnNldEVuZChub2RlLCBvZmZzZXQpO1xuICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZS5jbG9uZVJhbmdlKCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFBvaW50VG9TZWxlY3Rpb24oc2VsZWN0aW9uLCBub2RlLCBvZmZzZXQsIHNlbGVjdGlvblN0YXRlKSB7XG4gIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIC8vIGxvZ2dpbmcgdG8gY2F0Y2ggYnVnIHRoYXQgaXMgYmVpbmcgcmVwb3J0ZWQgaW4gdDE2MjUwNzk1XG4gIGlmIChvZmZzZXQgPiBnZXROb2RlTGVuZ3RoKG5vZGUpKSB7XG4gICAgLy8gaW4gdGhpcyBjYXNlIHdlIGtub3cgdGhhdCB0aGUgY2FsbCB0byAncmFuZ2Uuc2V0U3RhcnQnIGlzIGFib3V0IHRvIHRocm93XG4gICAgRHJhZnRKc0RlYnVnTG9nZ2luZy5sb2dTZWxlY3Rpb25TdGF0ZUZhaWx1cmUoe1xuICAgICAgYW5vbnltaXplZERvbTogZ2V0QW5vbnltaXplZEVkaXRvckRPTShub2RlKSxcbiAgICAgIGV4dHJhUGFyYW1zOiBKU09OLnN0cmluZ2lmeSh7IG9mZnNldDogb2Zmc2V0IH0pLFxuICAgICAgc2VsZWN0aW9uU3RhdGU6IEpTT04uc3RyaW5naWZ5KHNlbGVjdGlvblN0YXRlLnRvSlMoKSlcbiAgICB9KTtcbiAgfVxuICByYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQpO1xuICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldERyYWZ0RWRpdG9yU2VsZWN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNZW1vaXplcyB0aGUgcmV0dXJuIHZhbHVlIG9mIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIG9uZSBzdHJpbmcgYXJndW1lbnQuXG4gKi9cblxuZnVuY3Rpb24gbWVtb2l6ZVN0cmluZ09ubHkoY2FsbGJhY2spIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgaWYgKCFjYWNoZS5oYXNPd25Qcm9wZXJ0eShzdHJpbmcpKSB7XG4gICAgICBjYWNoZVtzdHJpbmddID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzdHJpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbc3RyaW5nXTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplU3RyaW5nT25seTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIHByb3ZpZGVkIGBjYWxsYmFja2Agb25jZSBmb3IgZWFjaCBlbnVtZXJhYmxlIG93biBwcm9wZXJ0eSBpbiB0aGVcbiAqIG9iamVjdCBhbmQgY29uc3RydWN0cyBhIG5ldyBvYmplY3QgZnJvbSB0aGUgcmVzdWx0cy4gVGhlIGBjYWxsYmFja2AgaXNcbiAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKlxuICogIC0gdGhlIHByb3BlcnR5IHZhbHVlXG4gKiAgLSB0aGUgcHJvcGVydHkgbmFtZVxuICogIC0gdGhlIG9iamVjdCBiZWluZyB0cmF2ZXJzZWRcbiAqXG4gKiBQcm9wZXJ0aWVzIHRoYXQgYXJlIGFkZGVkIGFmdGVyIHRoZSBjYWxsIHRvIGBtYXBPYmplY3RgIHdpbGwgbm90IGJlIHZpc2l0ZWRcbiAqIGJ5IGBjYWxsYmFja2AuIElmIHRoZSB2YWx1ZXMgb2YgZXhpc3RpbmcgcHJvcGVydGllcyBhcmUgY2hhbmdlZCwgdGhlIHZhbHVlXG4gKiBwYXNzZWQgdG8gYGNhbGxiYWNrYCB3aWxsIGJlIHRoZSB2YWx1ZSBhdCB0aGUgdGltZSBgbWFwT2JqZWN0YCB2aXNpdHMgdGhlbS5cbiAqIFByb3BlcnRpZXMgdGhhdCBhcmUgZGVsZXRlZCBiZWZvcmUgYmVpbmcgdmlzaXRlZCBhcmUgbm90IHZpc2l0ZWQuXG4gKlxuICogQGdyZXAgZnVuY3Rpb24gb2JqZWN0TWFwKClcbiAqIEBncmVwIGZ1bmN0aW9uIG9iak1hcCgpXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcGFyYW0geyp9IGNvbnRleHRcbiAqIEByZXR1cm4gez9vYmplY3R9XG4gKi9cbmZ1bmN0aW9uIG1hcE9iamVjdChvYmplY3QsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gIGlmICghb2JqZWN0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgbmFtZSkpIHtcbiAgICAgIHJlc3VsdFtuYW1lXSA9IGNhbGxiYWNrLmNhbGwoY29udGV4dCwgb2JqZWN0W25hbWVdLCBuYW1lLCBvYmplY3QpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcE9iamVjdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG52YXIgY29tcG9uZW50UmVnZXggPSAvXFwuLztcbnZhciBvclJlZ2V4ID0gL1xcfFxcfC87XG52YXIgcmFuZ2VSZWdleCA9IC9cXHMrXFwtXFxzKy87XG52YXIgbW9kaWZpZXJSZWdleCA9IC9eKDw9fDx8PXw+PXx+Pnx+fD58KT9cXHMqKC4rKS87XG52YXIgbnVtZXJpY1JlZ2V4ID0gL14oXFxkKikoLiopLztcblxuLyoqXG4gKiBTcGxpdHMgaW5wdXQgYHJhbmdlYCBvbiBcInx8XCIgYW5kIHJldHVybnMgdHJ1ZSBpZiBhbnkgc3VicmFuZ2UgbWF0Y2hlc1xuICogYHZlcnNpb25gLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByYW5nZVxuICogQHBhcmFtIHtzdHJpbmd9IHZlcnNpb25cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjaGVja09yRXhwcmVzc2lvbihyYW5nZSwgdmVyc2lvbikge1xuICB2YXIgZXhwcmVzc2lvbnMgPSByYW5nZS5zcGxpdChvclJlZ2V4KTtcblxuICBpZiAoZXhwcmVzc2lvbnMubGVuZ3RoID4gMSkge1xuICAgIHJldHVybiBleHByZXNzaW9ucy5zb21lKGZ1bmN0aW9uIChyYW5nZSkge1xuICAgICAgcmV0dXJuIFZlcnNpb25SYW5nZS5jb250YWlucyhyYW5nZSwgdmVyc2lvbik7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmFuZ2UgPSBleHByZXNzaW9uc1swXS50cmltKCk7XG4gICAgcmV0dXJuIGNoZWNrUmFuZ2VFeHByZXNzaW9uKHJhbmdlLCB2ZXJzaW9uKTtcbiAgfVxufVxuXG4vKipcbiAqIFNwbGl0cyBpbnB1dCBgcmFuZ2VgIG9uIFwiIC0gXCIgKHRoZSBzdXJyb3VuZGluZyB3aGl0ZXNwYWNlIGlzIHJlcXVpcmVkKSBhbmRcbiAqIHJldHVybnMgdHJ1ZSBpZiB2ZXJzaW9uIGZhbGxzIGJldHdlZW4gdGhlIHR3byBvcGVyYW5kcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmFuZ2VcbiAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJzaW9uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY2hlY2tSYW5nZUV4cHJlc3Npb24ocmFuZ2UsIHZlcnNpb24pIHtcbiAgdmFyIGV4cHJlc3Npb25zID0gcmFuZ2Uuc3BsaXQocmFuZ2VSZWdleCk7XG5cbiAgIShleHByZXNzaW9ucy5sZW5ndGggPiAwICYmIGV4cHJlc3Npb25zLmxlbmd0aCA8PSAyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0aGUgXCItXCIgb3BlcmF0b3IgZXhwZWN0cyBleGFjdGx5IDIgb3BlcmFuZHMnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgaWYgKGV4cHJlc3Npb25zLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBjaGVja1NpbXBsZUV4cHJlc3Npb24oZXhwcmVzc2lvbnNbMF0sIHZlcnNpb24pO1xuICB9IGVsc2Uge1xuICAgIHZhciBzdGFydFZlcnNpb24gPSBleHByZXNzaW9uc1swXSxcbiAgICAgICAgZW5kVmVyc2lvbiA9IGV4cHJlc3Npb25zWzFdO1xuXG4gICAgIShpc1NpbXBsZVZlcnNpb24oc3RhcnRWZXJzaW9uKSAmJiBpc1NpbXBsZVZlcnNpb24oZW5kVmVyc2lvbikpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ29wZXJhbmRzIHRvIHRoZSBcIi1cIiBvcGVyYXRvciBtdXN0IGJlIHNpbXBsZSAobm8gbW9kaWZpZXJzKScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHJldHVybiBjaGVja1NpbXBsZUV4cHJlc3Npb24oJz49JyArIHN0YXJ0VmVyc2lvbiwgdmVyc2lvbikgJiYgY2hlY2tTaW1wbGVFeHByZXNzaW9uKCc8PScgKyBlbmRWZXJzaW9uLCB2ZXJzaW9uKTtcbiAgfVxufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgcmFuZ2VgIG1hdGNoZXMgYHZlcnNpb25gLiBgcmFuZ2VgIHNob3VsZCBiZSBhIFwic2ltcGxlXCIgcmFuZ2UgKGllLlxuICogbm90IGEgY29tcG91bmQgcmFuZ2UgdXNpbmcgdGhlIFwiIC0gXCIgb3IgXCJ8fFwiIG9wZXJhdG9ycykuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJhbmdlXG4gKiBAcGFyYW0ge3N0cmluZ30gdmVyc2lvblxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNoZWNrU2ltcGxlRXhwcmVzc2lvbihyYW5nZSwgdmVyc2lvbikge1xuICByYW5nZSA9IHJhbmdlLnRyaW0oKTtcbiAgaWYgKHJhbmdlID09PSAnJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIHZlcnNpb25Db21wb25lbnRzID0gdmVyc2lvbi5zcGxpdChjb21wb25lbnRSZWdleCk7XG5cbiAgdmFyIF9nZXRNb2RpZmllckFuZENvbXBvbiA9IGdldE1vZGlmaWVyQW5kQ29tcG9uZW50cyhyYW5nZSksXG4gICAgICBtb2RpZmllciA9IF9nZXRNb2RpZmllckFuZENvbXBvbi5tb2RpZmllcixcbiAgICAgIHJhbmdlQ29tcG9uZW50cyA9IF9nZXRNb2RpZmllckFuZENvbXBvbi5yYW5nZUNvbXBvbmVudHM7XG5cbiAgc3dpdGNoIChtb2RpZmllcikge1xuICAgIGNhc2UgJzwnOlxuICAgICAgcmV0dXJuIGNoZWNrTGVzc1RoYW4odmVyc2lvbkNvbXBvbmVudHMsIHJhbmdlQ29tcG9uZW50cyk7XG4gICAgY2FzZSAnPD0nOlxuICAgICAgcmV0dXJuIGNoZWNrTGVzc1RoYW5PckVxdWFsKHZlcnNpb25Db21wb25lbnRzLCByYW5nZUNvbXBvbmVudHMpO1xuICAgIGNhc2UgJz49JzpcbiAgICAgIHJldHVybiBjaGVja0dyZWF0ZXJUaGFuT3JFcXVhbCh2ZXJzaW9uQ29tcG9uZW50cywgcmFuZ2VDb21wb25lbnRzKTtcbiAgICBjYXNlICc+JzpcbiAgICAgIHJldHVybiBjaGVja0dyZWF0ZXJUaGFuKHZlcnNpb25Db21wb25lbnRzLCByYW5nZUNvbXBvbmVudHMpO1xuICAgIGNhc2UgJ34nOlxuICAgIGNhc2UgJ34+JzpcbiAgICAgIHJldHVybiBjaGVja0FwcHJveGltYXRlVmVyc2lvbih2ZXJzaW9uQ29tcG9uZW50cywgcmFuZ2VDb21wb25lbnRzKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGNoZWNrRXF1YWwodmVyc2lvbkNvbXBvbmVudHMsIHJhbmdlQ29tcG9uZW50cyk7XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBgYWAgaXMgbGVzcyB0aGFuIGBiYC5cbiAqXG4gKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IGFcbiAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNoZWNrTGVzc1RoYW4oYSwgYikge1xuICByZXR1cm4gY29tcGFyZUNvbXBvbmVudHMoYSwgYikgPT09IC0xO1xufVxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGBhYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYGJgLlxuICpcbiAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gYVxuICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBiXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY2hlY2tMZXNzVGhhbk9yRXF1YWwoYSwgYikge1xuICB2YXIgcmVzdWx0ID0gY29tcGFyZUNvbXBvbmVudHMoYSwgYik7XG4gIHJldHVybiByZXN1bHQgPT09IC0xIHx8IHJlc3VsdCA9PT0gMDtcbn1cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBgYWAgaXMgZXF1YWwgdG8gYGJgLlxuICpcbiAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gYVxuICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBiXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY2hlY2tFcXVhbChhLCBiKSB7XG4gIHJldHVybiBjb21wYXJlQ29tcG9uZW50cyhhLCBiKSA9PT0gMDtcbn1cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBgYWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBiYC5cbiAqXG4gKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IGFcbiAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNoZWNrR3JlYXRlclRoYW5PckVxdWFsKGEsIGIpIHtcbiAgdmFyIHJlc3VsdCA9IGNvbXBhcmVDb21wb25lbnRzKGEsIGIpO1xuICByZXR1cm4gcmVzdWx0ID09PSAxIHx8IHJlc3VsdCA9PT0gMDtcbn1cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBgYWAgaXMgZ3JlYXRlciB0aGFuIGBiYC5cbiAqXG4gKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IGFcbiAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNoZWNrR3JlYXRlclRoYW4oYSwgYikge1xuICByZXR1cm4gY29tcGFyZUNvbXBvbmVudHMoYSwgYikgPT09IDE7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYGFgIGlzIFwicmVhc29uYWJseSBjbG9zZVwiIHRvIGBiYCAoYXMgZGVzY3JpYmVkIGluXG4gKiBodHRwczovL3d3dy5ucG1qcy5vcmcvZG9jL21pc2Mvc2VtdmVyLmh0bWwpLiBGb3IgZXhhbXBsZSwgaWYgYGJgIGlzIFwiMS4zLjFcIlxuICogdGhlbiBcInJlYXNvbmFibHkgY2xvc2VcIiBpcyBkZWZpbmVkIGFzIFwiPj0gMS4zLjEgYW5kIDwgMS40XCIuXG4gKlxuICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBhXG4gKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IGJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjaGVja0FwcHJveGltYXRlVmVyc2lvbihhLCBiKSB7XG4gIHZhciBsb3dlckJvdW5kID0gYi5zbGljZSgpO1xuICB2YXIgdXBwZXJCb3VuZCA9IGIuc2xpY2UoKTtcblxuICBpZiAodXBwZXJCb3VuZC5sZW5ndGggPiAxKSB7XG4gICAgdXBwZXJCb3VuZC5wb3AoKTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gdXBwZXJCb3VuZC5sZW5ndGggLSAxO1xuICB2YXIgbnVtZXJpYyA9IHBhcnNlSW50KHVwcGVyQm91bmRbbGFzdEluZGV4XSwgMTApO1xuICBpZiAoaXNOdW1iZXIobnVtZXJpYykpIHtcbiAgICB1cHBlckJvdW5kW2xhc3RJbmRleF0gPSBudW1lcmljICsgMSArICcnO1xuICB9XG5cbiAgcmV0dXJuIGNoZWNrR3JlYXRlclRoYW5PckVxdWFsKGEsIGxvd2VyQm91bmQpICYmIGNoZWNrTGVzc1RoYW4oYSwgdXBwZXJCb3VuZCk7XG59XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIG9wdGlvbmFsIG1vZGlmaWVyICg8LCA8PSwgPSwgPj0sID4sIH4sIH4+KSBhbmQgdmVyc2lvblxuICogY29tcG9uZW50cyBmcm9tIGByYW5nZWAuXG4gKlxuICogRm9yIGV4YW1wbGUsIGdpdmVuIGByYW5nZWAgXCI+PSAxLjIuM1wiIHJldHVybnMgYW4gb2JqZWN0IHdpdGggYSBgbW9kaWZpZXJgIG9mXG4gKiBgXCI+PVwiYCBhbmQgYGNvbXBvbmVudHNgIG9mIGBbMSwgMiwgM11gLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByYW5nZVxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kaWZpZXJBbmRDb21wb25lbnRzKHJhbmdlKSB7XG4gIHZhciByYW5nZUNvbXBvbmVudHMgPSByYW5nZS5zcGxpdChjb21wb25lbnRSZWdleCk7XG4gIHZhciBtYXRjaGVzID0gcmFuZ2VDb21wb25lbnRzWzBdLm1hdGNoKG1vZGlmaWVyUmVnZXgpO1xuICAhbWF0Y2hlcyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdleHBlY3RlZCByZWdleCB0byBtYXRjaCBidXQgaXQgZGlkIG5vdCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICByZXR1cm4ge1xuICAgIG1vZGlmaWVyOiBtYXRjaGVzWzFdLFxuICAgIHJhbmdlQ29tcG9uZW50czogW21hdGNoZXNbMl1dLmNvbmNhdChyYW5nZUNvbXBvbmVudHMuc2xpY2UoMSkpXG4gIH07XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBgbnVtYmVyYCBpcyBhIG51bWJlci5cbiAqXG4gKiBAcGFyYW0ge21peGVkfSBudW1iZXJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWJlcihudW1iZXIpIHtcbiAgcmV0dXJuICFpc05hTihudW1iZXIpICYmIGlzRmluaXRlKG51bWJlcik7XG59XG5cbi8qKlxuICogVGVzdHMgd2hldGhlciBgcmFuZ2VgIGlzIGEgXCJzaW1wbGVcIiB2ZXJzaW9uIG51bWJlciB3aXRob3V0IGFueSBtb2RpZmllcnNcbiAqIChcIj5cIiwgXCJ+XCIgZXRjKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmFuZ2VcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NpbXBsZVZlcnNpb24ocmFuZ2UpIHtcbiAgcmV0dXJuICFnZXRNb2RpZmllckFuZENvbXBvbmVudHMocmFuZ2UpLm1vZGlmaWVyO1xufVxuXG4vKipcbiAqIFplcm8tcGFkcyBhcnJheSBgYXJyYXlgIHVudGlsIGl0IGlzIGF0IGxlYXN0IGBsZW5ndGhgIGxvbmcuXG4gKlxuICogQHBhcmFtIHthcnJheX0gYXJyYXlcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqL1xuZnVuY3Rpb24gemVyb1BhZChhcnJheSwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGFycmF5W2ldID0gJzAnO1xuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplcyBgYWAgYW5kIGBiYCBpbiBwcmVwYXJhdGlvbiBmb3IgY29tcGFyaXNvbiBieSBkb2luZyB0aGUgZm9sbG93aW5nOlxuICpcbiAqIC0gemVyby1wYWRzIGBhYCBhbmQgYGJgXG4gKiAtIG1hcmtzIGFueSBcInhcIiwgXCJYXCIgb3IgXCIqXCIgY29tcG9uZW50IGluIGBiYCBhcyBlcXVpdmFsZW50IGJ5IHplcm8taW5nIGl0IG91dFxuICogICBpbiBib3RoIGBhYCBhbmQgYGJgXG4gKiAtIG1hcmtzIGFueSBmaW5hbCBcIipcIiBjb21wb25lbnQgaW4gYGJgIGFzIGEgZ3JlZWR5IHdpbGRjYXJkIGJ5IHplcm8taW5nIGl0XG4gKiAgIGFuZCBhbGwgb2YgaXRzIHN1Y2Nlc3NvcnMgaW4gYGFgXG4gKlxuICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBhXG4gKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IGJcbiAqIEByZXR1cm5zIHthcnJheTxhcnJheTxzdHJpbmc+Pn1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplVmVyc2lvbnMoYSwgYikge1xuICBhID0gYS5zbGljZSgpO1xuICBiID0gYi5zbGljZSgpO1xuXG4gIHplcm9QYWQoYSwgYi5sZW5ndGgpO1xuXG4gIC8vIG1hcmsgXCJ4XCIgYW5kIFwiKlwiIGNvbXBvbmVudHMgYXMgZXF1YWxcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1hdGNoZXMgPSBiW2ldLm1hdGNoKC9eW3gqXSQvaSk7XG4gICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgIGJbaV0gPSBhW2ldID0gJzAnO1xuXG4gICAgICAvLyBmaW5hbCBcIipcIiBncmVlZGlseSB6ZXJvcyBhbGwgcmVtYWluaW5nIGNvbXBvbmVudHNcbiAgICAgIGlmIChtYXRjaGVzWzBdID09PSAnKicgJiYgaSA9PT0gYi5sZW5ndGggLSAxKSB7XG4gICAgICAgIGZvciAodmFyIGogPSBpOyBqIDwgYS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGFbal0gPSAnMCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB6ZXJvUGFkKGIsIGEubGVuZ3RoKTtcblxuICByZXR1cm4gW2EsIGJdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG51bWVyaWNhbCAtLSBub3QgdGhlIGxleGljb2dyYXBoaWNhbCAtLSBvcmRlcmluZyBvZiBgYWAgYW5kIGBiYC5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgYDEwLWFscGhhYCBpcyBncmVhdGVyIHRoYW4gYDItYmV0YWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFcbiAqIEBwYXJhbSB7c3RyaW5nfSBiXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtMSwgMCBvciAxIHRvIGluZGljYXRlIHdoZXRoZXIgYGFgIGlzIGxlc3MgdGhhbiwgZXF1YWwgdG8sXG4gKiBvciBncmVhdGVyIHRoYW4gYGJgLCByZXNwZWN0aXZlbHlcbiAqL1xuZnVuY3Rpb24gY29tcGFyZU51bWVyaWMoYSwgYikge1xuICB2YXIgYVByZWZpeCA9IGEubWF0Y2gobnVtZXJpY1JlZ2V4KVsxXTtcbiAgdmFyIGJQcmVmaXggPSBiLm1hdGNoKG51bWVyaWNSZWdleClbMV07XG4gIHZhciBhTnVtZXJpYyA9IHBhcnNlSW50KGFQcmVmaXgsIDEwKTtcbiAgdmFyIGJOdW1lcmljID0gcGFyc2VJbnQoYlByZWZpeCwgMTApO1xuXG4gIGlmIChpc051bWJlcihhTnVtZXJpYykgJiYgaXNOdW1iZXIoYk51bWVyaWMpICYmIGFOdW1lcmljICE9PSBiTnVtZXJpYykge1xuICAgIHJldHVybiBjb21wYXJlKGFOdW1lcmljLCBiTnVtZXJpYyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmRlcmluZyBvZiBgYWAgYW5kIGBiYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGFcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gYlxuICogQHJldHVybnMge251bWJlcn0gLTEsIDAgb3IgMSB0byBpbmRpY2F0ZSB3aGV0aGVyIGBhYCBpcyBsZXNzIHRoYW4sIGVxdWFsIHRvLFxuICogb3IgZ3JlYXRlciB0aGFuIGBiYCwgcmVzcGVjdGl2ZWx5XG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICAhKHR5cGVvZiBhID09PSB0eXBlb2YgYikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnXCJhXCIgYW5kIFwiYlwiIG11c3QgYmUgb2YgdGhlIHNhbWUgdHlwZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICBpZiAoYSA+IGIpIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIGlmIChhIDwgYikge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG4vKipcbiAqIENvbXBhcmVzIGFycmF5cyBvZiB2ZXJzaW9uIGNvbXBvbmVudHMuXG4gKlxuICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBhXG4gKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IGJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0xLCAwIG9yIDEgdG8gaW5kaWNhdGUgd2hldGhlciBgYWAgaXMgbGVzcyB0aGFuLCBlcXVhbCB0byxcbiAqIG9yIGdyZWF0ZXIgdGhhbiBgYmAsIHJlc3BlY3RpdmVseVxuICovXG5mdW5jdGlvbiBjb21wYXJlQ29tcG9uZW50cyhhLCBiKSB7XG4gIHZhciBfbm9ybWFsaXplVmVyc2lvbnMgPSBub3JtYWxpemVWZXJzaW9ucyhhLCBiKSxcbiAgICAgIGFOb3JtYWxpemVkID0gX25vcm1hbGl6ZVZlcnNpb25zWzBdLFxuICAgICAgYk5vcm1hbGl6ZWQgPSBfbm9ybWFsaXplVmVyc2lvbnNbMV07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiTm9ybWFsaXplZC5sZW5ndGg7IGkrKykge1xuICAgIHZhciByZXN1bHQgPSBjb21wYXJlTnVtZXJpYyhhTm9ybWFsaXplZFtpXSwgYk5vcm1hbGl6ZWRbaV0pO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbnZhciBWZXJzaW9uUmFuZ2UgPSB7XG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBgdmVyc2lvbmAgc2F0aXNmaWVzIHRoZSBgcmFuZ2VgIHNwZWNpZmljYXRpb24uXG4gICAqXG4gICAqIFdlIHN1cHBvcnQgYSBzdWJzZXQgb2YgdGhlIGV4cHJlc3Npb25zIGRlZmluZWQgaW5cbiAgICogaHR0cHM6Ly93d3cubnBtanMub3JnL2RvYy9taXNjL3NlbXZlci5odG1sOlxuICAgKlxuICAgKiAgICB2ZXJzaW9uICAgTXVzdCBtYXRjaCB2ZXJzaW9uIGV4YWN0bHlcbiAgICogICAgPXZlcnNpb24gIFNhbWUgYXMganVzdCB2ZXJzaW9uXG4gICAqICAgID52ZXJzaW9uICBNdXN0IGJlIGdyZWF0ZXIgdGhhbiB2ZXJzaW9uXG4gICAqICAgID49dmVyc2lvbiBNdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB2ZXJzaW9uXG4gICAqICAgIDx2ZXJzaW9uICBNdXN0IGJlIGxlc3MgdGhhbiB2ZXJzaW9uXG4gICAqICAgIDw9dmVyc2lvbiBNdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB2ZXJzaW9uXG4gICAqICAgIH52ZXJzaW9uICBNdXN0IGJlIGF0IGxlYXN0IHZlcnNpb24sIGJ1dCBsZXNzIHRoYW4gdGhlIG5leHQgc2lnbmlmaWNhbnRcbiAgICogICAgICAgICAgICAgIHJldmlzaW9uIGFib3ZlIHZlcnNpb246XG4gICAqICAgICAgICAgICAgICBcIn4xLjIuM1wiIGlzIGVxdWl2YWxlbnQgdG8gXCI+PSAxLjIuMyBhbmQgPCAxLjNcIlxuICAgKiAgICB+PnZlcnNpb24gRXF1aXZhbGVudCB0byB+dmVyc2lvblxuICAgKiAgICAxLjIueCAgICAgTXVzdCBtYXRjaCBcIjEuMi54XCIsIHdoZXJlIFwieFwiIGlzIGEgd2lsZGNhcmQgdGhhdCBtYXRjaGVzXG4gICAqICAgICAgICAgICAgICBhbnl0aGluZ1xuICAgKiAgICAxLjIuKiAgICAgU2ltaWxhciB0byBcIjEuMi54XCIsIGJ1dCBcIipcIiBpbiB0aGUgdHJhaWxpbmcgcG9zaXRpb24gaXMgYVxuICAgKiAgICAgICAgICAgICAgXCJncmVlZHlcIiB3aWxkY2FyZCwgc28gd2lsbCBtYXRjaCBhbnkgbnVtYmVyIG9mIGFkZGl0aW9uYWxcbiAgICogICAgICAgICAgICAgIGNvbXBvbmVudHM6XG4gICAqICAgICAgICAgICAgICBcIjEuMi4qXCIgd2lsbCBtYXRjaCBcIjEuMi4xXCIsIFwiMS4yLjEuMVwiLCBcIjEuMi4xLjEuMVwiIGV0Y1xuICAgKiAgICAqICAgICAgICAgQW55IHZlcnNpb25cbiAgICogICAgXCJcIiAgICAgICAgKEVtcHR5IHN0cmluZykgU2FtZSBhcyAqXG4gICAqICAgIHYxIC0gdjIgICBFcXVpdmFsZW50IHRvIFwiPj0gdjEgYW5kIDw9IHYyXCJcbiAgICogICAgcjEgfHwgcjIgIFBhc3NlcyBpZiBlaXRoZXIgcjEgb3IgcjIgYXJlIHNhdGlzZmllZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmFuZ2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZlcnNpb25cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBjb250YWluczogZnVuY3Rpb24gY29udGFpbnMocmFuZ2UsIHZlcnNpb24pIHtcbiAgICByZXR1cm4gY2hlY2tPckV4cHJlc3Npb24ocmFuZ2UudHJpbSgpLCB2ZXJzaW9uLnRyaW0oKSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVmVyc2lvblJhbmdlOyIsIi8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcclxuIiwiLyohXG4gKiBVQVBhcnNlci5qcyB2MC43LjE4XG4gKiBMaWdodHdlaWdodCBKYXZhU2NyaXB0LWJhc2VkIFVzZXItQWdlbnQgc3RyaW5nIHBhcnNlclxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhaXNhbG1hbi91YS1wYXJzZXItanNcbiAqXG4gKiBDb3B5cmlnaHQgwqkgMjAxMi0yMDE2IEZhaXNhbCBTYWxtYW4gPGZ5emxtYW5AZ21haWwuY29tPlxuICogRHVhbCBsaWNlbnNlZCB1bmRlciBHUEx2MiBvciBNSVRcbiAqL1xuXG4oZnVuY3Rpb24gKHdpbmRvdywgdW5kZWZpbmVkKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLy8vLy8vLy8vLy8vL1xuICAgIC8vIENvbnN0YW50c1xuICAgIC8vLy8vLy8vLy8vLy9cblxuXG4gICAgdmFyIExJQlZFUlNJT04gID0gJzAuNy4xOCcsXG4gICAgICAgIEVNUFRZICAgICAgID0gJycsXG4gICAgICAgIFVOS05PV04gICAgID0gJz8nLFxuICAgICAgICBGVU5DX1RZUEUgICA9ICdmdW5jdGlvbicsXG4gICAgICAgIFVOREVGX1RZUEUgID0gJ3VuZGVmaW5lZCcsXG4gICAgICAgIE9CSl9UWVBFICAgID0gJ29iamVjdCcsXG4gICAgICAgIFNUUl9UWVBFICAgID0gJ3N0cmluZycsXG4gICAgICAgIE1BSk9SICAgICAgID0gJ21ham9yJywgLy8gZGVwcmVjYXRlZFxuICAgICAgICBNT0RFTCAgICAgICA9ICdtb2RlbCcsXG4gICAgICAgIE5BTUUgICAgICAgID0gJ25hbWUnLFxuICAgICAgICBUWVBFICAgICAgICA9ICd0eXBlJyxcbiAgICAgICAgVkVORE9SICAgICAgPSAndmVuZG9yJyxcbiAgICAgICAgVkVSU0lPTiAgICAgPSAndmVyc2lvbicsXG4gICAgICAgIEFSQ0hJVEVDVFVSRT0gJ2FyY2hpdGVjdHVyZScsXG4gICAgICAgIENPTlNPTEUgICAgID0gJ2NvbnNvbGUnLFxuICAgICAgICBNT0JJTEUgICAgICA9ICdtb2JpbGUnLFxuICAgICAgICBUQUJMRVQgICAgICA9ICd0YWJsZXQnLFxuICAgICAgICBTTUFSVFRWICAgICA9ICdzbWFydHR2JyxcbiAgICAgICAgV0VBUkFCTEUgICAgPSAnd2VhcmFibGUnLFxuICAgICAgICBFTUJFRERFRCAgICA9ICdlbWJlZGRlZCc7XG5cblxuICAgIC8vLy8vLy8vLy8vXG4gICAgLy8gSGVscGVyXG4gICAgLy8vLy8vLy8vL1xuXG5cbiAgICB2YXIgdXRpbCA9IHtcbiAgICAgICAgZXh0ZW5kIDogZnVuY3Rpb24gKHJlZ2V4ZXMsIGV4dGVuc2lvbnMpIHtcbiAgICAgICAgICAgIHZhciBtYXJnZWRSZWdleGVzID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIHJlZ2V4ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXh0ZW5zaW9uc1tpXSAmJiBleHRlbnNpb25zW2ldLmxlbmd0aCAlIDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2VkUmVnZXhlc1tpXSA9IGV4dGVuc2lvbnNbaV0uY29uY2F0KHJlZ2V4ZXNbaV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdlZFJlZ2V4ZXNbaV0gPSByZWdleGVzW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYXJnZWRSZWdleGVzO1xuICAgICAgICB9LFxuICAgICAgICBoYXMgOiBmdW5jdGlvbiAoc3RyMSwgc3RyMikge1xuICAgICAgICAgIGlmICh0eXBlb2Ygc3RyMSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIHN0cjIudG9Mb3dlckNhc2UoKS5pbmRleE9mKHN0cjEudG9Mb3dlckNhc2UoKSkgIT09IC0xO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsb3dlcml6ZSA6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgbWFqb3IgOiBmdW5jdGlvbiAodmVyc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZih2ZXJzaW9uKSA9PT0gU1RSX1RZUEUgPyB2ZXJzaW9uLnJlcGxhY2UoL1teXFxkXFwuXS9nLCcnKS5zcGxpdChcIi5cIilbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHRyaW0gOiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZywgJycpO1xuICAgICAgICB9XG4gICAgfTtcblxuXG4gICAgLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gTWFwIGhlbHBlclxuICAgIC8vLy8vLy8vLy8vLy8vXG5cblxuICAgIHZhciBtYXBwZXIgPSB7XG5cbiAgICAgICAgcmd4IDogZnVuY3Rpb24gKHVhLCBhcnJheXMpIHtcblxuICAgICAgICAgICAgLy92YXIgcmVzdWx0ID0ge30sXG4gICAgICAgICAgICB2YXIgaSA9IDAsIGosIGssIHAsIHEsIG1hdGNoZXMsIG1hdGNoOy8vLCBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgICAgICAgICAvKi8vIGNvbnN0cnVjdCBvYmplY3QgYmFyZWJvbmVzXG4gICAgICAgICAgICBmb3IgKHAgPSAwOyBwIDwgYXJnc1sxXS5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgICAgIHEgPSBhcmdzWzFdW3BdO1xuICAgICAgICAgICAgICAgIHJlc3VsdFt0eXBlb2YgcSA9PT0gT0JKX1RZUEUgPyBxWzBdIDogcV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9Ki9cblxuICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIGFsbCByZWdleGVzIG1hcHNcbiAgICAgICAgICAgIHdoaWxlIChpIDwgYXJyYXlzLmxlbmd0aCAmJiAhbWF0Y2hlcykge1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlZ2V4ID0gYXJyYXlzW2ldLCAgICAgICAvLyBldmVuIHNlcXVlbmNlICgwLDIsNCwuLilcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMgPSBhcnJheXNbaSArIDFdOyAgIC8vIG9kZCBzZXF1ZW5jZSAoMSwzLDUsLi4pXG4gICAgICAgICAgICAgICAgaiA9IGsgPSAwO1xuXG4gICAgICAgICAgICAgICAgLy8gdHJ5IG1hdGNoaW5nIHVhc3RyaW5nIHdpdGggcmVnZXhlc1xuICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgcmVnZXgubGVuZ3RoICYmICFtYXRjaGVzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IHJlZ2V4W2orK10uZXhlYyh1YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhbWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwID0gMDsgcCA8IHByb3BzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBtYXRjaGVzWysra107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcSA9IHByb3BzW3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGdpdmVuIHByb3BlcnR5IGlzIGFjdHVhbGx5IGFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBxID09PSBPQkpfVFlQRSAmJiBxLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEubGVuZ3RoID09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcVsxXSA9PSBGVU5DX1RZUEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhc3NpZ24gbW9kaWZpZWQgbWF0Y2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3FbMF1dID0gcVsxXS5jYWxsKHRoaXMsIG1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXNzaWduIGdpdmVuIHZhbHVlLCBpZ25vcmUgcmVnZXggbWF0Y2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3FbMF1dID0gcVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChxLmxlbmd0aCA9PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayB3aGV0aGVyIGZ1bmN0aW9uIG9yIHJlZ2V4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHFbMV0gPT09IEZVTkNfVFlQRSAmJiAhKHFbMV0uZXhlYyAmJiBxWzFdLnRlc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbCBmdW5jdGlvbiAodXN1YWxseSBzdHJpbmcgbWFwcGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcVswXV0gPSBtYXRjaCA/IHFbMV0uY2FsbCh0aGlzLCBtYXRjaCwgcVsyXSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNhbml0aXplIG1hdGNoIHVzaW5nIGdpdmVuIHJlZ2V4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1txWzBdXSA9IG1hdGNoID8gbWF0Y2gucmVwbGFjZShxWzFdLCBxWzJdKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChxLmxlbmd0aCA9PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1txWzBdXSA9IG1hdGNoID8gcVszXS5jYWxsKHRoaXMsIG1hdGNoLnJlcGxhY2UocVsxXSwgcVsyXSkpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1txXSA9IG1hdGNoID8gbWF0Y2ggOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMpO1xuICAgICAgICAgICAgLy9yZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICBzdHIgOiBmdW5jdGlvbiAoc3RyLCBtYXApIHtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBtYXApIHtcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBhcnJheVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWFwW2ldID09PSBPQkpfVFlQRSAmJiBtYXBbaV0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1hcFtpXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaGFzKG1hcFtpXVtqXSwgc3RyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoaSA9PT0gVU5LTk9XTikgPyB1bmRlZmluZWQgOiBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLmhhcyhtYXBbaV0sIHN0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChpID09PSBVTktOT1dOKSA/IHVuZGVmaW5lZCA6IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfVxuICAgIH07XG5cblxuICAgIC8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFN0cmluZyBtYXBcbiAgICAvLy8vLy8vLy8vLy8vL1xuXG5cbiAgICB2YXIgbWFwcyA9IHtcblxuICAgICAgICBicm93c2VyIDoge1xuICAgICAgICAgICAgb2xkc2FmYXJpIDoge1xuICAgICAgICAgICAgICAgIHZlcnNpb24gOiB7XG4gICAgICAgICAgICAgICAgICAgICcxLjAnICAgOiAnLzgnLFxuICAgICAgICAgICAgICAgICAgICAnMS4yJyAgIDogJy8xJyxcbiAgICAgICAgICAgICAgICAgICAgJzEuMycgICA6ICcvMycsXG4gICAgICAgICAgICAgICAgICAgICcyLjAnICAgOiAnLzQxMicsXG4gICAgICAgICAgICAgICAgICAgICcyLjAuMicgOiAnLzQxNicsXG4gICAgICAgICAgICAgICAgICAgICcyLjAuMycgOiAnLzQxNycsXG4gICAgICAgICAgICAgICAgICAgICcyLjAuNCcgOiAnLzQxOScsXG4gICAgICAgICAgICAgICAgICAgICc/JyAgICAgOiAnLydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGV2aWNlIDoge1xuICAgICAgICAgICAgYW1hem9uIDoge1xuICAgICAgICAgICAgICAgIG1vZGVsIDoge1xuICAgICAgICAgICAgICAgICAgICAnRmlyZSBQaG9uZScgOiBbJ1NEJywgJ0tGJ11cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3ByaW50IDoge1xuICAgICAgICAgICAgICAgIG1vZGVsIDoge1xuICAgICAgICAgICAgICAgICAgICAnRXZvIFNoaWZ0IDRHJyA6ICc3MzczS1QnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2ZW5kb3IgOiB7XG4gICAgICAgICAgICAgICAgICAgICdIVEMnICAgICAgIDogJ0FQQScsXG4gICAgICAgICAgICAgICAgICAgICdTcHJpbnQnICAgIDogJ1NwcmludCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgb3MgOiB7XG4gICAgICAgICAgICB3aW5kb3dzIDoge1xuICAgICAgICAgICAgICAgIHZlcnNpb24gOiB7XG4gICAgICAgICAgICAgICAgICAgICdNRScgICAgICAgIDogJzQuOTAnLFxuICAgICAgICAgICAgICAgICAgICAnTlQgMy4xMScgICA6ICdOVDMuNTEnLFxuICAgICAgICAgICAgICAgICAgICAnTlQgNC4wJyAgICA6ICdOVDQuMCcsXG4gICAgICAgICAgICAgICAgICAgICcyMDAwJyAgICAgIDogJ05UIDUuMCcsXG4gICAgICAgICAgICAgICAgICAgICdYUCcgICAgICAgIDogWydOVCA1LjEnLCAnTlQgNS4yJ10sXG4gICAgICAgICAgICAgICAgICAgICdWaXN0YScgICAgIDogJ05UIDYuMCcsXG4gICAgICAgICAgICAgICAgICAgICc3JyAgICAgICAgIDogJ05UIDYuMScsXG4gICAgICAgICAgICAgICAgICAgICc4JyAgICAgICAgIDogJ05UIDYuMicsXG4gICAgICAgICAgICAgICAgICAgICc4LjEnICAgICAgIDogJ05UIDYuMycsXG4gICAgICAgICAgICAgICAgICAgICcxMCcgICAgICAgIDogWydOVCA2LjQnLCAnTlQgMTAuMCddLFxuICAgICAgICAgICAgICAgICAgICAnUlQnICAgICAgICA6ICdBUk0nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuXG4gICAgLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBSZWdleCBtYXBcbiAgICAvLy8vLy8vLy8vLy8vXG5cblxuICAgIHZhciByZWdleGVzID0ge1xuXG4gICAgICAgIGJyb3dzZXIgOiBbW1xuXG4gICAgICAgICAgICAvLyBQcmVzdG8gYmFzZWRcbiAgICAgICAgICAgIC8ob3BlcmFcXHNtaW5pKVxcLyhbXFx3XFwuLV0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZXJhIE1pbmlcbiAgICAgICAgICAgIC8ob3BlcmFcXHNbbW9iaWxldGFiXSspLit2ZXJzaW9uXFwvKFtcXHdcXC4tXSspL2ksICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZXJhIE1vYmkvVGFibGV0XG4gICAgICAgICAgICAvKG9wZXJhKS4rdmVyc2lvblxcLyhbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZXJhID4gOS44MFxuICAgICAgICAgICAgLyhvcGVyYSlbXFwvXFxzXSsoW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgPCA5LjgwXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhvcGlvcylbXFwvXFxzXSsoW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgbWluaSBvbiBpcGhvbmUgPj0gOC4wXG4gICAgICAgICAgICBdLCBbW05BTUUsICdPcGVyYSBNaW5pJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC9cXHMob3ByKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZXJhIFdlYmtpdFxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnT3BlcmEnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLy8gTWl4ZWRcbiAgICAgICAgICAgIC8oa2luZGxlKVxcLyhbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2luZGxlXG4gICAgICAgICAgICAvKGx1bmFzY2FwZXxtYXh0aG9ufG5ldGZyb250fGphc21pbmV8YmxhemVyKVtcXC9cXHNdPyhbXFx3XFwuXSopL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEx1bmFzY2FwZS9NYXh0aG9uL05ldGZyb250L0phc21pbmUvQmxhemVyXG5cbiAgICAgICAgICAgIC8vIFRyaWRlbnQgYmFzZWRcbiAgICAgICAgICAgIC8oYXZhbnRcXHN8aWVtb2JpbGV8c2xpbXxiYWlkdSkoPzpicm93c2VyKT9bXFwvXFxzXT8oW1xcd1xcLl0qKS9pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBdmFudC9JRU1vYmlsZS9TbGltQnJvd3Nlci9CYWlkdVxuICAgICAgICAgICAgLyg/Om1zfFxcKCkoaWUpXFxzKFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW50ZXJuZXQgRXhwbG9yZXJcblxuICAgICAgICAgICAgLy8gV2Via2l0L0tIVE1MIGJhc2VkXG4gICAgICAgICAgICAvKHJla29ucSlcXC8oW1xcd1xcLl0qKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJla29ucVxuICAgICAgICAgICAgLyhjaHJvbWl1bXxmbG9ja3xyb2NrbWVsdHxtaWRvcml8ZXBpcGhhbnl8c2lsa3xza3lmaXJlfG92aWJyb3dzZXJ8Ym9sdHxpcm9ufHZpdmFsZGl8aXJpZGl1bXxwaGFudG9tanN8Ym93c2VyfHF1YXJrKVxcLyhbXFx3XFwuLV0rKS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENocm9taXVtL0Zsb2NrL1JvY2tNZWx0L01pZG9yaS9FcGlwaGFueS9TaWxrL1NreWZpcmUvQm9sdC9Jcm9uL0lyaWRpdW0vUGhhbnRvbUpTL0Jvd3NlclxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8odHJpZGVudCkuK3J2WzpcXHNdKFtcXHdcXC5dKykuK2xpa2VcXHNnZWNrby9pICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElFMTFcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ0lFJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oZWRnZXxlZGdpb3N8ZWRnZWEpXFwvKChcXGQrKT9bXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1pY3Jvc29mdCBFZGdlXG4gICAgICAgICAgICBdLCBbW05BTUUsICdFZGdlJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oeWFicm93c2VyKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gWWFuZGV4XG4gICAgICAgICAgICBdLCBbW05BTUUsICdZYW5kZXgnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhwdWZmaW4pXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQdWZmaW5cbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ1B1ZmZpbiddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKCg/OltcXHNcXC9dKXVjP1xccz9icm93c2VyfCg/Omp1Yy4rKXVjd2ViKVtcXC9cXHNdPyhbXFx3XFwuXSspL2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVUNCcm93c2VyXG4gICAgICAgICAgICBdLCBbW05BTUUsICdVQ0Jyb3dzZXInXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhjb21vZG9fZHJhZ29uKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21vZG8gRHJhZ29uXG4gICAgICAgICAgICBdLCBbW05BTUUsIC9fL2csICcgJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8obWljcm9tZXNzZW5nZXIpXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2VDaGF0XG4gICAgICAgICAgICBdLCBbW05BTUUsICdXZUNoYXQnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhxcWJyb3dzZXJsaXRlKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBRUUJyb3dzZXJMaXRlXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhRUSlcXC8oW1xcZFxcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBRUSwgYWthIFNob3VRXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgL20/KHFxYnJvd3NlcilbXFwvXFxzXT8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUVFCcm93c2VyXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhCSURVQnJvd3NlcilbXFwvXFxzXT8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFpZHUgQnJvd3NlclxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oMjM0NUV4cGxvcmVyKVtcXC9cXHNdPyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDIzNDUgQnJvd3NlclxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oTWV0YVNyKVtcXC9cXHNdPyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvdUdvdUJyb3dzZXJcbiAgICAgICAgICAgIF0sIFtOQU1FXSwgW1xuXG4gICAgICAgICAgICAvKExCQlJPV1NFUikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGllQmFvIEJyb3dzZXJcbiAgICAgICAgICAgIF0sIFtOQU1FXSwgW1xuXG4gICAgICAgICAgICAveGlhb21pXFwvbWl1aWJyb3dzZXJcXC8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNSVVJIEJyb3dzZXJcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ01JVUkgQnJvd3NlciddXSwgW1xuXG4gICAgICAgICAgICAvO2ZiYXZcXC8oW1xcd1xcLl0rKTsvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZhY2Vib29rIEFwcCBmb3IgaU9TICYgQW5kcm9pZFxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnRmFjZWJvb2snXV0sIFtcblxuICAgICAgICAgICAgL2hlYWRsZXNzY2hyb21lKD86XFwvKFtcXHdcXC5dKyl8XFxzKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hyb21lIEhlYWRsZXNzXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsICdDaHJvbWUgSGVhZGxlc3MnXV0sIFtcblxuICAgICAgICAgICAgL1xcc3d2XFwpLisoY2hyb21lKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENocm9tZSBXZWJWaWV3XG4gICAgICAgICAgICBdLCBbW05BTUUsIC8oLispLywgJyQxIFdlYlZpZXcnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLygoPzpvY3VsdXN8c2Ftc3VuZylicm93c2VyKVxcLyhbXFx3XFwuXSspL2lcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgLyguKyg/Omd8dXMpKSguKykvLCAnJDEgJDInXSwgVkVSU0lPTl0sIFsgICAgICAgICAgICAgICAgLy8gT2N1bHVzIC8gU2Ftc3VuZyBCcm93c2VyXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLit2ZXJzaW9uXFwvKFtcXHdcXC5dKylcXHMrKD86bW9iaWxlXFxzP3NhZmFyaXxzYWZhcmkpKi9pICAgICAgICAvLyBBbmRyb2lkIEJyb3dzZXJcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ0FuZHJvaWQgQnJvd3NlciddXSwgW1xuXG4gICAgICAgICAgICAvKGNocm9tZXxvbW5pd2VifGFyb3JhfFt0aXplbm9rYV17NX1cXHM/YnJvd3NlcilcXC92PyhbXFx3XFwuXSspL2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hyb21lL09tbmlXZWIvQXJvcmEvVGl6ZW4vTm9raWFcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGRvbGZpbilcXC8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbHBoaW5cbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ0RvbHBoaW4nXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLygoPzphbmRyb2lkLispY3Jtb3xjcmlvcylcXC8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaHJvbWUgZm9yIEFuZHJvaWQvaU9TXG4gICAgICAgICAgICBdLCBbW05BTUUsICdDaHJvbWUnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhjb2FzdClcXC8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPcGVyYSBDb2FzdFxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnT3BlcmEgQ29hc3QnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgL2Z4aW9zXFwvKFtcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJlZm94IGZvciBpT1NcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ0ZpcmVmb3gnXV0sIFtcblxuICAgICAgICAgICAgL3ZlcnNpb25cXC8oW1xcd1xcLl0rKS4rP21vYmlsZVxcL1xcdytcXHMoc2FmYXJpKS9pICAgICAgICAgICAgICAgICAgICAgICAvLyBNb2JpbGUgU2FmYXJpXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsICdNb2JpbGUgU2FmYXJpJ11dLCBbXG5cbiAgICAgICAgICAgIC92ZXJzaW9uXFwvKFtcXHdcXC5dKykuKz8obW9iaWxlXFxzP3NhZmFyaXxzYWZhcmkpL2kgICAgICAgICAgICAgICAgICAgIC8vIFNhZmFyaSAmIFNhZmFyaSBNb2JpbGVcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBOQU1FXSwgW1xuXG4gICAgICAgICAgICAvd2Via2l0Lis/KGdzYSlcXC8oW1xcd1xcLl0rKS4rPyhtb2JpbGVcXHM/c2FmYXJpfHNhZmFyaSkoXFwvW1xcd1xcLl0rKS9pICAvLyBHb29nbGUgU2VhcmNoIEFwcGxpYW5jZSBvbiBpT1NcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ0dTQSddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvd2Via2l0Lis/KG1vYmlsZVxccz9zYWZhcml8c2FmYXJpKShcXC9bXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAvLyBTYWZhcmkgPCAzLjBcbiAgICAgICAgICAgIF0sIFtOQU1FLCBbVkVSU0lPTiwgbWFwcGVyLnN0ciwgbWFwcy5icm93c2VyLm9sZHNhZmFyaS52ZXJzaW9uXV0sIFtcblxuICAgICAgICAgICAgLyhrb25xdWVyb3IpXFwvKFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLb25xdWVyb3JcbiAgICAgICAgICAgIC8od2Via2l0fGtodG1sKVxcLyhbXFx3XFwuXSspL2lcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvLyBHZWNrbyBiYXNlZFxuICAgICAgICAgICAgLyhuYXZpZ2F0b3J8bmV0c2NhcGUpXFwvKFtcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZXRzY2FwZVxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnTmV0c2NhcGUnXSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC8oc3dpZnRmb3gpL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3dpZnRmb3hcbiAgICAgICAgICAgIC8oaWNlZHJhZ29ufGljZXdlYXNlbHxjYW1pbm98Y2hpbWVyYXxmZW5uZWN8bWFlbW9cXHNicm93c2VyfG1pbmltb3xjb25rZXJvcilbXFwvXFxzXT8oW1xcd1xcLlxcK10rKS9pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJY2VEcmFnb24vSWNld2Vhc2VsL0NhbWluby9DaGltZXJhL0Zlbm5lYy9NYWVtby9NaW5pbW8vQ29ua2Vyb3JcbiAgICAgICAgICAgIC8oZmlyZWZveHxzZWFtb25rZXl8ay1tZWxlb258aWNlY2F0fGljZWFwZXxmaXJlYmlyZHxwaG9lbml4fHBhbGVtb29ufGJhc2lsaXNrfHdhdGVyZm94KVxcLyhbXFx3XFwuLV0rKSQvaSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJlZm94L1NlYU1vbmtleS9LLU1lbGVvbi9JY2VDYXQvSWNlQXBlL0ZpcmViaXJkL1Bob2VuaXhcbiAgICAgICAgICAgIC8obW96aWxsYSlcXC8oW1xcd1xcLl0rKS4rcnZcXDouK2dlY2tvXFwvXFxkKy9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTW96aWxsYVxuXG4gICAgICAgICAgICAvLyBPdGhlclxuICAgICAgICAgICAgLyhwb2xhcmlzfGx5bnh8ZGlsbG98aWNhYnxkb3Jpc3xhbWF5YXx3M218bmV0c3VyZnxzbGVpcG5pcilbXFwvXFxzXT8oW1xcd1xcLl0rKS9pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQb2xhcmlzL0x5bngvRGlsbG8vaUNhYi9Eb3Jpcy9BbWF5YS93M20vTmV0U3VyZi9TbGVpcG5pclxuICAgICAgICAgICAgLyhsaW5rcylcXHNcXCgoW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGlua3NcbiAgICAgICAgICAgIC8oZ29icm93c2VyKVxcLz8oW1xcd1xcLl0qKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR29Ccm93c2VyXG4gICAgICAgICAgICAvKGljZVxccz9icm93c2VyKVxcL3Y/KFtcXHdcXC5fXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJQ0UgQnJvd3NlclxuICAgICAgICAgICAgLyhtb3NhaWMpW1xcL1xcc10oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTW9zYWljXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl1cblxuICAgICAgICAgICAgLyogLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAvLyBNZWRpYSBwbGF5ZXJzIEJFR0lOXG4gICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAgICAgLCBbXG5cbiAgICAgICAgICAgIC8oYXBwbGUoPzpjb3JlbWVkaWF8KSlcXC8oKFxcZCspW1xcd1xcLl9dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdlbmVyaWMgQXBwbGUgQ29yZU1lZGlhXG4gICAgICAgICAgICAvKGNvcmVtZWRpYSkgdigoXFxkKylbXFx3XFwuX10rKS9pXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhhcXVhbHVuZ3xseXNzbmF8YnNwbGF5ZXIpXFwvKChcXGQrKT9bXFx3XFwuLV0rKS9pICAgICAgICAgICAgICAgICAgICAgLy8gQXF1YWx1bmcvTHlzc25hL0JTUGxheWVyXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhhcmVzfG9zc3Byb3h5KVxccygoXFxkKylbXFx3XFwuLV0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXJlcy9PU1NQcm94eVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oYXVkYWNpb3VzfGF1ZGltdXNpY3N0cmVhbXxhbWFyb2t8YmFzc3xjb3JlfGRhbHZpa3xnbm9tZW1wbGF5ZXJ8bXVzaWMgb24gY29uc29sZXxuc3BsYXllcnxwc3AtaW50ZXJuZXRyYWRpb3BsYXllcnx2aWRlb3MpXFwvKChcXGQrKVtcXHdcXC4tXSspL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEF1ZGFjaW91cy9BdWRpTXVzaWNTdHJlYW0vQW1hcm9rL0JBU1MvT3BlbkNPUkUvRGFsdmlrL0dub21lTXBsYXllci9Nb0NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTlNQbGF5ZXIvUFNQLUludGVybmV0UmFkaW9QbGF5ZXIvVmlkZW9zXG4gICAgICAgICAgICAvKGNsZW1lbnRpbmV8bXVzaWMgcGxheWVyIGRhZW1vbilcXHMoKFxcZCspW1xcd1xcLi1dKykvaSwgICAgICAgICAgICAgICAvLyBDbGVtZW50aW5lL01QRFxuICAgICAgICAgICAgLyhsZyBwbGF5ZXJ8bmV4cGxheWVyKVxccygoXFxkKylbXFxkXFwuXSspL2ksXG4gICAgICAgICAgICAvcGxheWVyXFwvKG5leHBsYXllcnxsZyBwbGF5ZXIpXFxzKChcXGQrKVtcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgLy8gTmV4UGxheWVyL0xHIFBsYXllclxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG4gICAgICAgICAgICAvKG5leHBsYXllcilcXHMoKFxcZCspW1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZXhwbGF5ZXJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGZscnApXFwvKChcXGQrKVtcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGbGlwIFBsYXllclxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnRmxpcCBQbGF5ZXInXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhmc3RyZWFtfG5hdGl2ZWhvc3R8cXVlcnlzZWVrc3BpZGVyfGlhLWFyY2hpdmVyfGZhY2Vib29rZXh0ZXJuYWxoaXQpL2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRlN0cmVhbS9OYXRpdmVIb3N0L1F1ZXJ5U2Vla1NwaWRlci9JQSBBcmNoaXZlci9mYWNlYm9va2V4dGVybmFsaGl0XG4gICAgICAgICAgICBdLCBbTkFNRV0sIFtcblxuICAgICAgICAgICAgLyhnc3RyZWFtZXIpIHNvdXBodHRwc3JjICg/OlxcKFteXFwpXStcXCkpezAsMX0gbGlic291cFxcLygoXFxkKylbXFx3XFwuLV0rKS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdzdHJlYW1lclxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oaHRjIHN0cmVhbWluZyBwbGF5ZXIpXFxzW1xcd19dK1xcc1xcL1xccygoXFxkKylbXFxkXFwuXSspL2ksICAgICAgICAgICAgICAvLyBIVEMgU3RyZWFtaW5nIFBsYXllclxuICAgICAgICAgICAgLyhqYXZhfHB5dGhvbi11cmxsaWJ8cHl0aG9uLXJlcXVlc3RzfHdnZXR8bGliY3VybClcXC8oKFxcZCspW1xcd1xcLi1fXSspL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEphdmEvdXJsbGliL3JlcXVlc3RzL3dnZXQvY1VSTFxuICAgICAgICAgICAgLyhsYXZmKSgoXFxkKylbXFxkXFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMYXZmIChGRk1QRUcpXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhodGNfb25lX3MpXFwvKChcXGQrKVtcXGRcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSFRDIE9uZSBTXG4gICAgICAgICAgICBdLCBbW05BTUUsIC9fL2csICcgJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8obXBsYXllcikoPzpcXHN8XFwvKSg/Oig/OnNoZXJweWEtKXswLDF9c3ZuKSg/Oi18XFxzKShyXFxkKyg/Oi1cXGQrW1xcd1xcLi1dKyl7MCwxfSkvaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNUGxheWVyIFNWTlxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8obXBsYXllcikoPzpcXHN8XFwvfFt1bmtvdy1dKykoKFxcZCspW1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAgICAvLyBNUGxheWVyXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhtcGxheWVyKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNUGxheWVyIChubyBvdGhlciBpbmZvKVxuICAgICAgICAgICAgLyh5b3VybXV6ZSkvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBZb3VyTXV6ZVxuICAgICAgICAgICAgLyhtZWRpYSBwbGF5ZXIgY2xhc3NpY3xuZXJvIHNob3d0aW1lKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNZWRpYSBQbGF5ZXIgQ2xhc3NpYy9OZXJvIFNob3dUaW1lXG4gICAgICAgICAgICBdLCBbTkFNRV0sIFtcblxuICAgICAgICAgICAgLyhuZXJvICg/OmhvbWV8c2NvdXQpKVxcLygoXFxkKylbXFx3XFwuLV0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmVybyBIb21lL05lcm8gU2NvdXRcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKG5va2lhXFxkKylcXC8oKFxcZCspW1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm9raWFcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvXFxzKHNvbmdiaXJkKVxcLygoXFxkKylbXFx3XFwuLV0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU29uZ2JpcmQvUGhpbGlwcy1Tb25nYmlyZFxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8od2luYW1wKTMgdmVyc2lvbiAoKFxcZCspW1xcd1xcLi1dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2luYW1wXG4gICAgICAgICAgICAvKHdpbmFtcClcXHMoKFxcZCspW1xcd1xcLi1dKykvaSxcbiAgICAgICAgICAgIC8od2luYW1wKW1wZWdcXC8oKFxcZCspW1xcd1xcLi1dKykvaVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8ob2Ntcy1ib3R8dGFwaW5yYWRpb3x0dW5laW4gcmFkaW98dW5rbm93bnx3aW5hbXB8aW5saWdodCByYWRpbykvaSAgLy8gT0NNUy1ib3QvdGFwIGluIHJhZGlvL3R1bmVpbi91bmtub3duL3dpbmFtcCAobm8gb3RoZXIgaW5mbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5saWdodCByYWRpb1xuICAgICAgICAgICAgXSwgW05BTUVdLCBbXG5cbiAgICAgICAgICAgIC8ocXVpY2t0aW1lfHJtYXxyYWRpb2FwcHxyYWRpb2NsaWVudGFwcGxpY2F0aW9ufHNvdW5kdGFwfHRvdGVtfHN0YWdlZnJpZ2h0fHN0cmVhbWl1bSlcXC8oKFxcZCspW1xcd1xcLi1dKykvaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBRdWlja1RpbWUvUmVhbE1lZGlhL1JhZGlvQXBwL1JhZGlvQ2xpZW50QXBwbGljYXRpb24vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvdW5kVGFwL1RvdGVtL1N0YWdlZnJpZ2h0L1N0cmVhbWl1bVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oc21wKSgoXFxkKylbXFxkXFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU01QXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyh2bGMpIG1lZGlhIHBsYXllciAtIHZlcnNpb24gKChcXGQrKVtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAvLyBWTEMgVmlkZW9sYW5cbiAgICAgICAgICAgIC8odmxjKVxcLygoXFxkKylbXFx3XFwuLV0rKS9pLFxuICAgICAgICAgICAgLyh4Ym1jfGd2ZnN8eGluZXx4bW1zfGlyYXBwKVxcLygoXFxkKylbXFx3XFwuLV0rKS9pLCAgICAgICAgICAgICAgICAgICAgLy8gWEJNQy9ndmZzL1hpbmUvWE1NUy9pcmFwcFxuICAgICAgICAgICAgLyhmb29iYXIyMDAwKVxcLygoXFxkKylbXFxkXFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9vYmFyMjAwMFxuICAgICAgICAgICAgLyhpdHVuZXMpXFwvKChcXGQrKVtcXGRcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaVR1bmVzXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyh3bXBsYXllcilcXC8oKFxcZCspW1xcd1xcLi1dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2luZG93cyBNZWRpYSBQbGF5ZXJcbiAgICAgICAgICAgIC8od2luZG93cy1tZWRpYS1wbGF5ZXIpXFwvKChcXGQrKVtcXHdcXC4tXSspL2lcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgLy0vZywgJyAnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgL3dpbmRvd3NcXC8oKFxcZCspW1xcd1xcLi1dKykgdXBucFxcL1tcXGRcXC5dKyBkbG5hZG9jXFwvW1xcZFxcLl0rIChob21lIG1lZGlhIHNlcnZlcikvaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaW5kb3dzIE1lZGlhIFNlcnZlclxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnV2luZG93cyddXSwgW1xuXG4gICAgICAgICAgICAvKGNvbVxcLnJpc2V1cHJhZGlvYWxhcm0pXFwvKChcXGQrKVtcXGRcXC5dKikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmlzZVVQIFJhZGlvIEFsYXJtXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhyYWQuaW8pXFxzKChcXGQrKVtcXGRcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmFkLmlvXG4gICAgICAgICAgICAvKHJhZGlvLig/OmRlfGF0fGZyKSlcXHMoKFxcZCspW1xcZFxcLl0rKS9pXG4gICAgICAgICAgICBdLCBbW05BTUUsICdyYWQuaW8nXSwgVkVSU0lPTl1cblxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgLy8gTWVkaWEgcGxheWVycyBFTkRcbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vKi9cblxuICAgICAgICBdLFxuXG4gICAgICAgIGNwdSA6IFtbXG5cbiAgICAgICAgICAgIC8oPzooYW1kfHgoPzooPzo4Nnw2NClbXy1dKT98d293fHdpbik2NClbO1xcKV0vaSAgICAgICAgICAgICAgICAgICAgIC8vIEFNRDY0XG4gICAgICAgICAgICBdLCBbW0FSQ0hJVEVDVFVSRSwgJ2FtZDY0J11dLCBbXG5cbiAgICAgICAgICAgIC8oaWEzMig/PTspKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSUEzMiAocXVpY2t0aW1lKVxuICAgICAgICAgICAgXSwgW1tBUkNISVRFQ1RVUkUsIHV0aWwubG93ZXJpemVdXSwgW1xuXG4gICAgICAgICAgICAvKCg/OmlbMzQ2XXx4KTg2KVs7XFwpXS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJQTMyXG4gICAgICAgICAgICBdLCBbW0FSQ0hJVEVDVFVSRSwgJ2lhMzInXV0sIFtcblxuICAgICAgICAgICAgLy8gUG9ja2V0UEMgbWlzdGFrZW5seSBpZGVudGlmaWVkIGFzIFBvd2VyUENcbiAgICAgICAgICAgIC93aW5kb3dzXFxzKGNlfG1vYmlsZSk7XFxzcHBjOy9pXG4gICAgICAgICAgICBdLCBbW0FSQ0hJVEVDVFVSRSwgJ2FybSddXSwgW1xuXG4gICAgICAgICAgICAvKCg/OnBwY3xwb3dlcnBjKSg/OjY0KT8pKD86XFxzbWFjfDt8XFwpKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUG93ZXJQQ1xuICAgICAgICAgICAgXSwgW1tBUkNISVRFQ1RVUkUsIC9vd2VyLywgJycsIHV0aWwubG93ZXJpemVdXSwgW1xuXG4gICAgICAgICAgICAvKHN1bjRcXHcpWztcXCldL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU1BBUkNcbiAgICAgICAgICAgIF0sIFtbQVJDSElURUNUVVJFLCAnc3BhcmMnXV0sIFtcblxuICAgICAgICAgICAgLygoPzphdnIzMnxpYTY0KD89OykpfDY4ayg/PVxcKSl8YXJtKD86NjR8KD89dlxcZCs7KSl8KD89YXRtZWxcXHMpYXZyfCg/OmlyaXh8bWlwc3xzcGFyYykoPzo2NCk/KD89Oyl8cGEtcmlzYykvaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJQTY0LCA2OEssIEFSTS82NCwgQVZSLzMyLCBJUklYLzY0LCBNSVBTLzY0LCBTUEFSQy82NCwgUEEtUklTQ1xuICAgICAgICAgICAgXSwgW1tBUkNISVRFQ1RVUkUsIHV0aWwubG93ZXJpemVdXVxuICAgICAgICBdLFxuXG4gICAgICAgIGRldmljZSA6IFtbXG5cbiAgICAgICAgICAgIC9cXCgoaXBhZHxwbGF5Ym9vayk7W1xcd1xcc1xcKTstXSsocmltfGFwcGxlKS9pICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlQYWQvUGxheUJvb2tcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgVkVORE9SLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FwcGxlY29yZW1lZGlhXFwvW1xcd1xcLl0rIFxcKChpcGFkKS8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaVBhZFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnQXBwbGUnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC8oYXBwbGVcXHN7MCwxfXR2KS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGxlIFRWXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnQXBwbGUgVFYnXSwgW1ZFTkRPUiwgJ0FwcGxlJ11dLCBbXG5cbiAgICAgICAgICAgIC8oYXJjaG9zKVxccyhnYW1lcGFkMj8pL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFyY2hvc1xuICAgICAgICAgICAgLyhocCkuKyh0b3VjaHBhZCkvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIUCBUb3VjaFBhZFxuICAgICAgICAgICAgLyhocCkuKyh0YWJsZXQpL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIUCBUYWJsZXRcbiAgICAgICAgICAgIC8oa2luZGxlKVxcLyhbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2luZGxlXG4gICAgICAgICAgICAvXFxzKG5vb2spW1xcd1xcc10rYnVpbGRcXC8oXFx3KykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm9va1xuICAgICAgICAgICAgLyhkZWxsKVxccyhzdHJlYVtrcHJcXHNcXGRdKltcXGRrb10pL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVsbCBTdHJlYWtcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgLyhrZltBLXpdKylcXHNidWlsZFxcLy4rc2lsa1xcLy9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLaW5kbGUgRmlyZSBIRFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnQW1hem9uJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgLyhzZHxrZilbMDM0OWhpam9yc3R1d10rXFxzYnVpbGRcXC8uK3NpbGtcXC8vaSAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJlIFBob25lXG4gICAgICAgICAgICBdLCBbW01PREVMLCBtYXBwZXIuc3RyLCBtYXBzLmRldmljZS5hbWF6b24ubW9kZWxdLCBbVkVORE9SLCAnQW1hem9uJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvXFwoKGlwW2hvbmVkfFxcc1xcdypdKyk7LisoYXBwbGUpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlQb2QvaVBob25lXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFZFTkRPUiwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvXFwoKGlwW2hvbmVkfFxcc1xcdypdKyk7L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlQb2QvaVBob25lXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdBcHBsZSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhibGFja2JlcnJ5KVtcXHMtXT8oXFx3KykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJsYWNrQmVycnlcbiAgICAgICAgICAgIC8oYmxhY2tiZXJyeXxiZW5xfHBhbG0oPz1cXC0pfHNvbnllcmljc3NvbnxhY2VyfGFzdXN8ZGVsbHxtZWl6dXxtb3Rvcm9sYXxwb2x5dHJvbilbXFxzXy1dPyhbXFx3LV0qKS9pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCZW5RL1BhbG0vU29ueS1Fcmljc3Nvbi9BY2VyL0FzdXMvRGVsbC9NZWl6dS9Nb3Rvcm9sYS9Qb2x5dHJvblxuICAgICAgICAgICAgLyhocClcXHMoW1xcd1xcc10rXFx3KS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSFAgaVBBUVxuICAgICAgICAgICAgLyhhc3VzKS0/KFxcdyspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXN1c1xuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgL1xcKGJiMTA7XFxzKFxcdyspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCbGFja0JlcnJ5IDEwXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdCbGFja0JlcnJ5J10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBc3VzIFRhYmxldHNcbiAgICAgICAgICAgIC9hbmRyb2lkLisodHJhbnNmb1twcmltZVxcc117NCwxMH1cXHNcXHcrfGVlZXBjfHNsaWRlclxcc1xcdyt8bmV4dXMgN3xwYWRmb25lKS9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdBc3VzJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvKHNvbnkpXFxzKHRhYmxldFxcc1twc10pXFxzYnVpbGRcXC8vaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU29ueVxuICAgICAgICAgICAgLyhzb255KT8oPzpzZ3AuKylcXHNidWlsZFxcLy9pXG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgJ1NvbnknXSwgW01PREVMLCAnWHBlcmlhIFRhYmxldCddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC9hbmRyb2lkLitcXHMoW2MtZ11cXGR7NH18c29bLWxdXFx3KylcXHNidWlsZFxcLy9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdTb255J10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvXFxzKG91eWEpXFxzL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3V5YVxuICAgICAgICAgICAgLyhuaW50ZW5kbylcXHMoW3dpZHMzdV0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmludGVuZG9cbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgQ09OU09MRV1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLis7XFxzKHNoaWVsZClcXHNidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOdmlkaWFcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ052aWRpYSddLCBbVFlQRSwgQ09OU09MRV1dLCBbXG5cbiAgICAgICAgICAgIC8ocGxheXN0YXRpb25cXHNbMzRwb3J0YWJsZXZpXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBsYXlzdGF0aW9uXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdTb255J10sIFtUWVBFLCBDT05TT0xFXV0sIFtcblxuICAgICAgICAgICAgLyhzcHJpbnRcXHMoXFx3KykpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNwcmludCBQaG9uZXNcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCBtYXBwZXIuc3RyLCBtYXBzLmRldmljZS5zcHJpbnQudmVuZG9yXSwgW01PREVMLCBtYXBwZXIuc3RyLCBtYXBzLmRldmljZS5zcHJpbnQubW9kZWxdLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhsZW5vdm8pXFxzPyhTKD86NTAwMHw2MDAwKSsoPzpbLV1bXFx3K10pKS9pICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExlbm92byB0YWJsZXRzXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC8oaHRjKVs7X1xccy1dKyhbXFx3XFxzXSsoPz1cXCkpfFxcdyspKi9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIVENcbiAgICAgICAgICAgIC8oenRlKS0oXFx3KikvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFpURVxuICAgICAgICAgICAgLyhhbGNhdGVsfGdlZWtzcGhvbmV8bGVub3ZvfG5leGlhbnxwYW5hc29uaWN8KD89O1xccylzb255KVtfXFxzLV0/KFtcXHctXSopL2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxjYXRlbC9HZWVrc1Bob25lL0xlbm92by9OZXhpYW4vUGFuYXNvbmljL1NvbnlcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIFtNT0RFTCwgL18vZywgJyAnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8obmV4dXNcXHM5KS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhUQyBOZXh1cyA5XG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdIVEMnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9kXFwvaHVhd2VpKFtcXHdcXHMtXSspWztcXCldL2ksXG4gICAgICAgICAgICAvKG5leHVzXFxzNnApL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIdWF3ZWlcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0h1YXdlaSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhtaWNyb3NvZnQpO1xccyhsdW1pYVtcXHNcXHddKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaWNyb3NvZnQgTHVtaWFcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL1tcXHNcXCg7XSh4Ym94KD86XFxzb25lKT8pW1xcc1xcKTtdL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1pY3Jvc29mdCBYYm94XG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdNaWNyb3NvZnQnXSwgW1RZUEUsIENPTlNPTEVdXSwgW1xuICAgICAgICAgICAgLyhraW5cXC5bb25ldHddezN9KS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWljcm9zb2Z0IEtpblxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgL1xcLi9nLCAnICddLCBbVkVORE9SLCAnTWljcm9zb2Z0J10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vdG9yb2xhXG4gICAgICAgICAgICAvXFxzKG1pbGVzdG9uZXxkcm9pZCg/OlsyLTR4XXxcXHMoPzpiaW9uaWN8eDJ8cHJvfHJhenIpKT86PyhcXHM0Zyk/KVtcXHdcXHNdK2J1aWxkXFwvL2ksXG4gICAgICAgICAgICAvbW90W1xccy1dPyhcXHcqKS9pLFxuICAgICAgICAgICAgLyhYVFxcZHszLDR9KSBidWlsZFxcLy9pLFxuICAgICAgICAgICAgLyhuZXh1c1xcczYpL2lcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ01vdG9yb2xhJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgL2FuZHJvaWQuK1xccyhtejYwXFxkfHhvb21bXFxzMl17MCwyfSlcXHNidWlsZFxcLy9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdNb3Rvcm9sYSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2hiYnR2XFwvXFxkK1xcLlxcZCtcXC5cXGQrXFxzK1xcKFtcXHdcXHNdKjtcXHMqKFxcd1teO10qKTsoW147XSopL2kgICAgICAgICAgICAvLyBIYmJUViBkZXZpY2VzXG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgdXRpbC50cmltXSwgW01PREVMLCB1dGlsLnRyaW1dLCBbVFlQRSwgU01BUlRUVl1dLCBbXG5cbiAgICAgICAgICAgIC9oYmJ0di4rbWFwbGU7KFxcZCspL2lcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsIC9eLywgJ1NtYXJ0VFYnXSwgW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgW1RZUEUsIFNNQVJUVFZdXSwgW1xuXG4gICAgICAgICAgICAvXFwoZHR2W1xcKTtdLisoYXF1b3MpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hhcnBcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1NoYXJwJ10sIFtUWVBFLCBTTUFSVFRWXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKygoc2NoLWlbODldMFxcZHxzaHctbTM4MHN8Z3QtcFxcZHs0fXxndC1uXFxkK3xzZ2gtdDhbNTZdOXxuZXh1cyAxMCkpL2ksXG4gICAgICAgICAgICAvKChTTS1UXFx3KykpL2lcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCAnU2Ftc3VuZyddLCBNT0RFTCwgW1RZUEUsIFRBQkxFVF1dLCBbICAgICAgICAgICAgICAgICAgLy8gU2Ftc3VuZ1xuICAgICAgICAgICAgL3NtYXJ0LXR2Lisoc2Ftc3VuZykvaVxuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgW1RZUEUsIFNNQVJUVFZdLCBNT0RFTF0sIFtcbiAgICAgICAgICAgIC8oKHNbY2dwXWgtXFx3K3xndC1cXHcrfGdhbGF4eVxcc25leHVzfHNtLVxcd1tcXHdcXGRdKykpL2ksXG4gICAgICAgICAgICAvKHNhbVtzdW5nXSopW1xccy1dKihcXHcrLT9bXFx3LV0qKS9pLFxuICAgICAgICAgICAgL3NlYy0oKHNnaFxcdyspKS9pXG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvc2llLShcXHcqKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaWVtZW5zXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdTaWVtZW5zJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvKG1hZW1vfG5va2lhKS4qKG45MDB8bHVtaWFcXHNcXGQrKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm9raWFcbiAgICAgICAgICAgIC8obm9raWEpW1xcc18tXT8oW1xcdy1dKikvaVxuICAgICAgICAgICAgXSwgW1tWRU5ET1IsICdOb2tpYSddLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkXFxzM1xcLltcXHNcXHc7LV17MTB9KGFcXGR7M30pL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBY2VyXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdBY2VyJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rKFt2bF1rXFwtP1xcZHszfSlcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExHIFRhYmxldFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTEcnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvYW5kcm9pZFxcczNcXC5bXFxzXFx3Oy1dezEwfShsZz8pLShbMDZjdjldezMsNH0pL2kgICAgICAgICAgICAgICAgICAgICAvLyBMRyBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCAnTEcnXSwgTU9ERUwsIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgLyhsZykgbmV0Y2FzdFxcLnR2L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTEcgU21hcnRUVlxuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBTTUFSVFRWXV0sIFtcbiAgICAgICAgICAgIC8obmV4dXNcXHNbNDVdKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExHXG4gICAgICAgICAgICAvbGdbZTtcXHNcXC8tXSsoXFx3KikvaSxcbiAgICAgICAgICAgIC9hbmRyb2lkLitsZyhcXC0/W1xcZFxcd10rKVxccytidWlsZC9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdMRyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKyhpZGVhdGFiW2EtejAtOVxcLVxcc10rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExlbm92b1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTGVub3ZvJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvbGludXg7LisoKGpvbGxhKSk7L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEpvbGxhXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8oKHBlYmJsZSkpYXBwXFwvW1xcZFxcLl0rXFxzL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBlYmJsZVxuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBXRUFSQUJMRV1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLis7XFxzKG9wcG8pXFxzPyhbXFx3XFxzXSspXFxzYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPUFBPXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC9jcmtleS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR29vZ2xlIENocm9tZWNhc3RcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdDaHJvbWVjYXN0J10sIFtWRU5ET1IsICdHb29nbGUnXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKztcXHMoZ2xhc3MpXFxzXFxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHb29nbGUgR2xhc3NcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0dvb2dsZSddLCBbVFlQRSwgV0VBUkFCTEVdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rO1xccyhwaXhlbCBjKVxccy9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR29vZ2xlIFBpeGVsIENcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0dvb2dsZSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKztcXHMocGl4ZWwgeGx8cGl4ZWwpXFxzL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdvb2dsZSBQaXhlbFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnR29vZ2xlJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rO1xccyhcXHcrKVxccytidWlsZFxcL2htXFwxL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gWGlhb21pIEhvbmdtaSAnbnVtZXJpYycgbW9kZWxzXG4gICAgICAgICAgICAvYW5kcm9pZC4rKGhtW1xcc1xcLV9dKm5vdGU/W1xcc19dKig/OlxcZFxcdyk/KVxccytidWlsZC9pLCAgICAgICAgICAgICAgIC8vIFhpYW9taSBIb25nbWlcbiAgICAgICAgICAgIC9hbmRyb2lkLisobWlbXFxzXFwtX10qKD86b25lfG9uZVtcXHNfXXBsdXN8bm90ZSBsdGUpP1tcXHNfXSooPzpcXGQ/XFx3PylbXFxzX10qKD86cGx1cyk/KVxccytidWlsZC9pLCAgICAvLyBYaWFvbWkgTWlcbiAgICAgICAgICAgIC9hbmRyb2lkLisocmVkbWlbXFxzXFwtX10qKD86bm90ZSk/KD86W1xcc19dKltcXHdcXHNdKykpXFxzK2J1aWxkL2kgICAgICAgLy8gUmVkbWkgUGhvbmVzXG4gICAgICAgICAgICBdLCBbW01PREVMLCAvXy9nLCAnICddLCBbVkVORE9SLCAnWGlhb21pJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgL2FuZHJvaWQuKyhtaVtcXHNcXC1fXSooPzpwYWQpKD86W1xcc19dKltcXHdcXHNdKykpXFxzK2J1aWxkL2kgICAgICAgICAgICAvLyBNaSBQYWQgdGFibGV0c1xuICAgICAgICAgICAgXSxbW01PREVMLCAvXy9nLCAnICddLCBbVkVORE9SLCAnWGlhb21pJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgL2FuZHJvaWQuKztcXHMobVsxLTVdXFxzbm90ZSlcXHNidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNZWl6dSBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ01laXp1J10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rYTAwMCgxKVxccytidWlsZC9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPbmVQbHVzXG4gICAgICAgICAgICAvYW5kcm9pZC4rb25lcGx1c1xccyhhXFxkezR9KVxccytidWlsZC9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdPbmVQbHVzJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKihSQ1RbXFxkXFx3XSspXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUkNBIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1JDQSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXFxzXSsoVmVudWVbXFxkXFxzXXsyLDd9KVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgIC8vIERlbGwgVmVudWUgVGFibGV0c1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnRGVsbCddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooUVtUfE1dW1xcZFxcd10rKVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcml6b24gVGFibGV0XG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdWZXJpem9uJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKyhCYXJuZXNbJlxcc10rTm9ibGVcXHMrfEJOW1JUXSkoVj8uKilcXHMrYnVpbGQvaSAgICAgLy8gQmFybmVzICYgTm9ibGUgVGFibGV0XG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgJ0Jhcm5lcyAmIE5vYmxlJ10sIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccysoVE1cXGR7M30uKlxcYilcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhcm5lcyAmIE5vYmxlIFRhYmxldFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTnVWaXNpb24nXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLis7XFxzKGs4OClcXHNidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBaVEUgSyBTZXJpZXMgVGFibGV0XG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdaVEUnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKGdlblxcZHszfSlcXHMrYnVpbGQuKjQ5aC9pICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN3aXNzIEdFTiBNb2JpbGVcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1N3aXNzJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKih6dXJcXGR7M30pXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTd2lzcyBaVVIgVGFibGV0XG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdTd2lzcyddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooKFpla2kpP1RCLipcXGIpXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgLy8gWmVraSBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdaZWtpJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvKGFuZHJvaWQpLitbO1xcL11cXHMrKFtZUl1cXGR7Mn0pXFxzK2J1aWxkL2ksXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKyhEcmFnb25bXFwtXFxzXStUb3VjaFxccyt8RFQpKFxcd3s1fSlcXHNidWlsZC9pICAgICAgICAvLyBEcmFnb24gVG91Y2ggVGFibGV0XG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgJ0RyYWdvbiBUb3VjaCddLCBNT0RFTCwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKE5TLT9cXHd7MCw5fSlcXHNidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluc2lnbmlhIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0luc2lnbmlhJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKigoTlh8TmV4dCktP1xcd3swLDl9KVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAvLyBOZXh0Qm9vayBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdOZXh0Qm9vayddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooWHRyZW1lXFxfKT8oVigxWzA0NV18MlswMTVdfDMwfDQwfDYwfDdbMDVdfDkwKSlcXHMrYnVpbGQvaVxuICAgICAgICAgICAgXSwgW1tWRU5ET1IsICdWb2ljZSddLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLCBbICAgICAgICAgICAgICAgICAgICAvLyBWb2ljZSBYdHJlbWUgUGhvbmVzXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKExWVEVMXFwtKT8oVjFbMTJdKVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgLy8gTHZUZWwgUGhvbmVzXG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgJ0x2VGVsJ10sIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooVigxMDBNRHw3MDBOQXw3MDExfDkxN0cpLipcXGIpXFxzK2J1aWxkL2kgICAgICAgICAgLy8gRW52aXplbiBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdFbnZpemVuJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKihMZVtcXHNcXC1dK1BhbilbXFxzXFwtXSsoXFx3ezEsOX0pXFxzK2J1aWxkL2kgICAgICAgICAgLy8gTGUgUGFuIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooVHJpb1tcXHNcXC1dKi4qKVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hY2hTcGVlZCBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdNYWNoU3BlZWQnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKFRyaW5pdHkpW1xcLVxcc10qKFRcXGR7M30pXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgLy8gVHJpbml0eSBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqVFVfKDE0OTEpXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUm90b3IgVGFibGV0c1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnUm90b3InXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLisoS1MoLispKVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFtYXpvbiBLaW5kbGUgVGFibGV0c1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnQW1hem9uJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rKEdpZ2FzZXQpW1xcc1xcLV0rKFFcXHd7MSw5fSlcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAvLyBHaWdhc2V0IFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL1xccyh0YWJsZXR8dGFiKVs7XFwvXS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVuaWRlbnRpZmlhYmxlIFRhYmxldFxuICAgICAgICAgICAgL1xccyhtb2JpbGUpKD86WztcXC9dfFxcc3NhZmFyaSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVbmlkZW50aWZpYWJsZSBNb2JpbGVcbiAgICAgICAgICAgIF0sIFtbVFlQRSwgdXRpbC5sb3dlcml6ZV0sIFZFTkRPUiwgTU9ERUxdLCBbXG5cbiAgICAgICAgICAgIC8oYW5kcm9pZFtcXHdcXC5cXHNcXC1dezAsOX0pOy4rYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdlbmVyaWMgQW5kcm9pZCBEZXZpY2VcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0dlbmVyaWMnXV1cblxuXG4gICAgICAgIC8qLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgIC8vIFRPRE86IG1vdmUgdG8gc3RyaW5nIG1hcFxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgICAgICAvKEM2NjAzKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvbnkgWHBlcmlhIFogQzY2MDNcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdYcGVyaWEgWiBDNjYwMyddLCBbVkVORE9SLCAnU29ueSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oQzY5MDMpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU29ueSBYcGVyaWEgWiAxXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnWHBlcmlhIFogMSddLCBbVkVORE9SLCAnU29ueSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhTTS1HOTAwW0Z8SF0pL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYW1zdW5nIEdhbGF4eSBTNVxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ0dhbGF4eSBTNSddLCBbVkVORE9SLCAnU2Ftc3VuZyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oU00tRzcxMDIpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2Ftc3VuZyBHYWxheHkgR3JhbmQgMlxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ0dhbGF4eSBHcmFuZCAyJ10sIFtWRU5ET1IsICdTYW1zdW5nJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgLyhTTS1HNTMwSCkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYW1zdW5nIEdhbGF4eSBHcmFuZCBQcmltZVxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ0dhbGF4eSBHcmFuZCBQcmltZSddLCBbVkVORE9SLCAnU2Ftc3VuZyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oU00tRzMxM0haKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2Ftc3VuZyBHYWxheHkgVlxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ0dhbGF4eSBWJ10sIFtWRU5ET1IsICdTYW1zdW5nJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgLyhTTS1UODA1KS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYW1zdW5nIEdhbGF4eSBUYWIgUyAxMC41XG4gICAgICAgICAgICBdLCBbW01PREVMLCAnR2FsYXh5IFRhYiBTIDEwLjUnXSwgW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvKFNNLUc4MDBGKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbXN1bmcgR2FsYXh5IFM1IE1pbmlcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdHYWxheHkgUzUgTWluaSddLCBbVkVORE9SLCAnU2Ftc3VuZyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oU00tVDMxMSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2Ftc3VuZyBHYWxheHkgVGFiIDMgOC4wXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnR2FsYXh5IFRhYiAzIDguMCddLCBbVkVORE9SLCAnU2Ftc3VuZyddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgLyhUM0MpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZHZhbiBWYW5kcm9pZCBUM0NcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0FkdmFuJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgLyhBRFZBTiBUMUpcXCspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWR2YW4gVmFuZHJvaWQgVDFKK1xuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ1ZhbmRyb2lkIFQxSisnXSwgW1ZFTkRPUiwgJ0FkdmFuJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgLyhBRFZBTiBTNEEpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZHZhbiBWYW5kcm9pZCBTNEFcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdWYW5kcm9pZCBTNEEnXSwgW1ZFTkRPUiwgJ0FkdmFuJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvKFY5NzJNKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFpURSBWOTcyTVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnWlRFJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvKGktbW9iaWxlKVxccyhJUVxcc1tcXGRcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLW1vYmlsZSBJUVxuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgLyhJUTYuMykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLW1vYmlsZSBJUSBJUSA2LjNcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdJUSA2LjMnXSwgW1ZFTkRPUiwgJ2ktbW9iaWxlJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgLyhpLW1vYmlsZSlcXHMoaS1zdHlsZVxcc1tcXGRcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS1tb2JpbGUgaS1TVFlMRVxuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgLyhpLVNUWUxFMi4xKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLW1vYmlsZSBpLVNUWUxFIDIuMVxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ2ktU1RZTEUgMi4xJ10sIFtWRU5ET1IsICdpLW1vYmlsZSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhtb2JpaXN0YXIgdG91Y2ggTEFJIDUxMikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtb2JpaXN0YXIgdG91Y2ggTEFJIDUxMlxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ1RvdWNoIExBSSA1MTInXSwgW1ZFTkRPUiwgJ21vYmlpc3RhciddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgLy8gRU5EIFRPRE9cbiAgICAgICAgICAgIC8vLy8vLy8vLy8vKi9cblxuICAgICAgICBdLFxuXG4gICAgICAgIGVuZ2luZSA6IFtbXG5cbiAgICAgICAgICAgIC93aW5kb3dzLitcXHNlZGdlXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVkZ2VIVE1MXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsICdFZGdlSFRNTCddXSwgW1xuXG4gICAgICAgICAgICAvKHByZXN0bylcXC8oW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZXN0b1xuICAgICAgICAgICAgLyh3ZWJraXR8dHJpZGVudHxuZXRmcm9udHxuZXRzdXJmfGFtYXlhfGx5bnh8dzNtKVxcLyhbXFx3XFwuXSspL2ksICAgICAvLyBXZWJLaXQvVHJpZGVudC9OZXRGcm9udC9OZXRTdXJmL0FtYXlhL0x5bngvdzNtXG4gICAgICAgICAgICAvKGtodG1sfHRhc21hbnxsaW5rcylbXFwvXFxzXVxcKD8oW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS0hUTUwvVGFzbWFuL0xpbmtzXG4gICAgICAgICAgICAvKGljYWIpW1xcL1xcc10oWzIzXVxcLltcXGRcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaUNhYlxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC9ydlxcOihbXFx3XFwuXXsxLDl9KS4rKGdlY2tvKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2Vja29cbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBOQU1FXVxuICAgICAgICBdLFxuXG4gICAgICAgIG9zIDogW1tcblxuICAgICAgICAgICAgLy8gV2luZG93cyBiYXNlZFxuICAgICAgICAgICAgL21pY3Jvc29mdFxccyh3aW5kb3dzKVxccyh2aXN0YXx4cCkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdpbmRvd3MgKGlUdW5lcylcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuICAgICAgICAgICAgLyh3aW5kb3dzKVxcc250XFxzNlxcLjI7XFxzKGFybSkvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2luZG93cyBSVFxuICAgICAgICAgICAgLyh3aW5kb3dzXFxzcGhvbmUoPzpcXHNvcykqKVtcXHNcXC9dPyhbXFxkXFwuXFxzXFx3XSopL2ksICAgICAgICAgICAgICAgICAgIC8vIFdpbmRvd3MgUGhvbmVcbiAgICAgICAgICAgIC8od2luZG93c1xcc21vYmlsZXx3aW5kb3dzKVtcXHNcXC9dPyhbbnRjZVxcZFxcLlxcc10rXFx3KS9pXG4gICAgICAgICAgICBdLCBbTkFNRSwgW1ZFUlNJT04sIG1hcHBlci5zdHIsIG1hcHMub3Mud2luZG93cy52ZXJzaW9uXV0sIFtcbiAgICAgICAgICAgIC8od2luKD89M3w5fG4pfHdpblxcczl4XFxzKShbbnRcXGRcXC5dKykvaVxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnV2luZG93cyddLCBbVkVSU0lPTiwgbWFwcGVyLnN0ciwgbWFwcy5vcy53aW5kb3dzLnZlcnNpb25dXSwgW1xuXG4gICAgICAgICAgICAvLyBNb2JpbGUvRW1iZWRkZWQgT1NcbiAgICAgICAgICAgIC9cXCgoYmIpKDEwKTsvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJsYWNrQmVycnkgMTBcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ0JsYWNrQmVycnknXSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC8oYmxhY2tiZXJyeSlcXHcqXFwvPyhbXFx3XFwuXSopL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJsYWNrYmVycnlcbiAgICAgICAgICAgIC8odGl6ZW4pW1xcL1xcc10oW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRpemVuXG4gICAgICAgICAgICAvKGFuZHJvaWR8d2Vib3N8cGFsbVxcc29zfHFueHxiYWRhfHJpbVxcc3RhYmxldFxcc29zfG1lZWdvfGNvbnRpa2kpW1xcL1xccy1dPyhbXFx3XFwuXSopL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFuZHJvaWQvV2ViT1MvUGFsbS9RTlgvQmFkYS9SSU0vTWVlR28vQ29udGlraVxuICAgICAgICAgICAgL2xpbnV4Oy4rKHNhaWxmaXNoKTsvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYWlsZmlzaCBPU1xuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG4gICAgICAgICAgICAvKHN5bWJpYW5cXHM/b3N8c3ltYm9zfHM2MCg/PTspKVtcXC9cXHMtXT8oW1xcd1xcLl0qKS9pICAgICAgICAgICAgICAgICAgLy8gU3ltYmlhblxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnU3ltYmlhbiddLCBWRVJTSU9OXSwgW1xuICAgICAgICAgICAgL1xcKChzZXJpZXM0MCk7L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2VyaWVzIDQwXG4gICAgICAgICAgICBdLCBbTkFNRV0sIFtcbiAgICAgICAgICAgIC9tb3ppbGxhLitcXChtb2JpbGU7LitnZWNrby4rZmlyZWZveC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggT1NcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ0ZpcmVmb3ggT1MnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLy8gQ29uc29sZVxuICAgICAgICAgICAgLyhuaW50ZW5kb3xwbGF5c3RhdGlvbilcXHMoW3dpZHMzNHBvcnRhYmxldnVdKykvaSwgICAgICAgICAgICAgICAgICAgLy8gTmludGVuZG8vUGxheXN0YXRpb25cblxuICAgICAgICAgICAgLy8gR05VL0xpbnV4IGJhc2VkXG4gICAgICAgICAgICAvKG1pbnQpW1xcL1xcc1xcKF0/KFxcdyopL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaW50XG4gICAgICAgICAgICAvKG1hZ2VpYXx2ZWN0b3JsaW51eClbO1xcc10vaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYWdlaWEvVmVjdG9yTGludXhcbiAgICAgICAgICAgIC8oam9saXxba3hsbl0/dWJ1bnR1fGRlYmlhbnxzdXNlfG9wZW5zdXNlfGdlbnRvb3woPz1cXHMpYXJjaHxzbGFja3dhcmV8ZmVkb3JhfG1hbmRyaXZhfGNlbnRvc3xwY2xpbnV4b3N8cmVkaGF0fHplbndhbGt8bGlucHVzKVtcXC9cXHMtXT8oPyFjaHJvbSkoW1xcd1xcLi1dKikvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSm9saS9VYnVudHUvRGViaWFuL1NVU0UvR2VudG9vL0FyY2gvU2xhY2t3YXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZlZG9yYS9NYW5kcml2YS9DZW50T1MvUENMaW51eE9TL1JlZEhhdC9aZW53YWxrL0xpbnB1c1xuICAgICAgICAgICAgLyhodXJkfGxpbnV4KVxccz8oW1xcd1xcLl0qKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIdXJkL0xpbnV4XG4gICAgICAgICAgICAvKGdudSlcXHM/KFtcXHdcXC5dKikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdOVVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oY3JvcylcXHNbXFx3XStcXHMoW1xcd1xcLl0rXFx3KS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hyb21pdW0gT1NcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ0Nocm9taXVtIE9TJ10sIFZFUlNJT05dLFtcblxuICAgICAgICAgICAgLy8gU29sYXJpc1xuICAgICAgICAgICAgLyhzdW5vcylcXHM/KFtcXHdcXC5cXGRdKikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU29sYXJpc1xuICAgICAgICAgICAgXSwgW1tOQU1FLCAnU29sYXJpcyddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvLyBCU0QgYmFzZWRcbiAgICAgICAgICAgIC9cXHMoW2ZyZW50b3BjLV17MCw0fWJzZHxkcmFnb25mbHkpXFxzPyhbXFx3XFwuXSopL2kgICAgICAgICAgICAgICAgICAgIC8vIEZyZWVCU0QvTmV0QlNEL09wZW5CU0QvUEMtQlNEL0RyYWdvbkZseVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLFtcblxuICAgICAgICAgICAgLyhoYWlrdSlcXHMoXFx3KykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhaWt1XG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sW1xuXG4gICAgICAgICAgICAvY2ZuZXR3b3JrXFwvLitkYXJ3aW4vaSxcbiAgICAgICAgICAgIC9pcFtob25lYWRdezIsNH0oPzouKm9zXFxzKFtcXHddKylcXHNsaWtlXFxzbWFjfDtcXHNvcGVyYSkvaSAgICAgICAgICAgICAvLyBpT1NcbiAgICAgICAgICAgIF0sIFtbVkVSU0lPTiwgL18vZywgJy4nXSwgW05BTUUsICdpT1MnXV0sIFtcblxuICAgICAgICAgICAgLyhtYWNcXHNvc1xcc3gpXFxzPyhbXFx3XFxzXFwuXSopL2ksXG4gICAgICAgICAgICAvKG1hY2ludG9zaHxtYWMoPz1fcG93ZXJwYylcXHMpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYWMgT1NcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ01hYyBPUyddLCBbVkVSU0lPTiwgL18vZywgJy4nXV0sIFtcblxuICAgICAgICAgICAgLy8gT3RoZXJcbiAgICAgICAgICAgIC8oKD86b3Blbik/c29sYXJpcylbXFwvXFxzLV0/KFtcXHdcXC5dKikvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvbGFyaXNcbiAgICAgICAgICAgIC8oYWl4KVxccygoXFxkKSg/PVxcLnxcXCl8XFxzKVtcXHdcXC5dKSovaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFJWFxuICAgICAgICAgICAgLyhwbGFuXFxzOXxtaW5peHxiZW9zfG9zXFwvMnxhbWlnYW9zfG1vcnBob3N8cmlzY1xcc29zfG9wZW52bXMpL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBsYW45L01pbml4L0JlT1MvT1MyL0FtaWdhT1MvTW9ycGhPUy9SSVNDT1MvT3BlblZNU1xuICAgICAgICAgICAgLyh1bml4KVxccz8oW1xcd1xcLl0qKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVTklYXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl1cbiAgICAgICAgXVxuICAgIH07XG5cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQ29uc3RydWN0b3JcbiAgICAvLy8vLy8vLy8vLy8vLy8vXG4gICAgLypcbiAgICB2YXIgQnJvd3NlciA9IGZ1bmN0aW9uIChuYW1lLCB2ZXJzaW9uKSB7XG4gICAgICAgIHRoaXNbTkFNRV0gPSBuYW1lO1xuICAgICAgICB0aGlzW1ZFUlNJT05dID0gdmVyc2lvbjtcbiAgICB9O1xuICAgIHZhciBDUFUgPSBmdW5jdGlvbiAoYXJjaCkge1xuICAgICAgICB0aGlzW0FSQ0hJVEVDVFVSRV0gPSBhcmNoO1xuICAgIH07XG4gICAgdmFyIERldmljZSA9IGZ1bmN0aW9uICh2ZW5kb3IsIG1vZGVsLCB0eXBlKSB7XG4gICAgICAgIHRoaXNbVkVORE9SXSA9IHZlbmRvcjtcbiAgICAgICAgdGhpc1tNT0RFTF0gPSBtb2RlbDtcbiAgICAgICAgdGhpc1tUWVBFXSA9IHR5cGU7XG4gICAgfTtcbiAgICB2YXIgRW5naW5lID0gQnJvd3NlcjtcbiAgICB2YXIgT1MgPSBCcm93c2VyO1xuICAgICovXG4gICAgdmFyIFVBUGFyc2VyID0gZnVuY3Rpb24gKHVhc3RyaW5nLCBleHRlbnNpb25zKSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB1YXN0cmluZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGV4dGVuc2lvbnMgPSB1YXN0cmluZztcbiAgICAgICAgICAgIHVhc3RyaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFVBUGFyc2VyKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVQVBhcnNlcih1YXN0cmluZywgZXh0ZW5zaW9ucykuZ2V0UmVzdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdWEgPSB1YXN0cmluZyB8fCAoKHdpbmRvdyAmJiB3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KSA/IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50IDogRU1QVFkpO1xuICAgICAgICB2YXIgcmd4bWFwID0gZXh0ZW5zaW9ucyA/IHV0aWwuZXh0ZW5kKHJlZ2V4ZXMsIGV4dGVuc2lvbnMpIDogcmVnZXhlcztcbiAgICAgICAgLy92YXIgYnJvd3NlciA9IG5ldyBCcm93c2VyKCk7XG4gICAgICAgIC8vdmFyIGNwdSA9IG5ldyBDUFUoKTtcbiAgICAgICAgLy92YXIgZGV2aWNlID0gbmV3IERldmljZSgpO1xuICAgICAgICAvL3ZhciBlbmdpbmUgPSBuZXcgRW5naW5lKCk7XG4gICAgICAgIC8vdmFyIG9zID0gbmV3IE9TKCk7XG5cbiAgICAgICAgdGhpcy5nZXRCcm93c2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGJyb3dzZXIgPSB7IG5hbWU6IHVuZGVmaW5lZCwgdmVyc2lvbjogdW5kZWZpbmVkIH07XG4gICAgICAgICAgICBtYXBwZXIucmd4LmNhbGwoYnJvd3NlciwgdWEsIHJneG1hcC5icm93c2VyKTtcbiAgICAgICAgICAgIGJyb3dzZXIubWFqb3IgPSB1dGlsLm1ham9yKGJyb3dzZXIudmVyc2lvbik7IC8vIGRlcHJlY2F0ZWRcbiAgICAgICAgICAgIHJldHVybiBicm93c2VyO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldENQVSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjcHUgPSB7IGFyY2hpdGVjdHVyZTogdW5kZWZpbmVkIH07XG4gICAgICAgICAgICBtYXBwZXIucmd4LmNhbGwoY3B1LCB1YSwgcmd4bWFwLmNwdSk7XG4gICAgICAgICAgICByZXR1cm4gY3B1O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldERldmljZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkZXZpY2UgPSB7IHZlbmRvcjogdW5kZWZpbmVkLCBtb2RlbDogdW5kZWZpbmVkLCB0eXBlOiB1bmRlZmluZWQgfTtcbiAgICAgICAgICAgIG1hcHBlci5yZ3guY2FsbChkZXZpY2UsIHVhLCByZ3htYXAuZGV2aWNlKTtcbiAgICAgICAgICAgIHJldHVybiBkZXZpY2U7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0RW5naW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVuZ2luZSA9IHsgbmFtZTogdW5kZWZpbmVkLCB2ZXJzaW9uOiB1bmRlZmluZWQgfTtcbiAgICAgICAgICAgIG1hcHBlci5yZ3guY2FsbChlbmdpbmUsIHVhLCByZ3htYXAuZW5naW5lKTtcbiAgICAgICAgICAgIHJldHVybiBlbmdpbmU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0T1MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3MgPSB7IG5hbWU6IHVuZGVmaW5lZCwgdmVyc2lvbjogdW5kZWZpbmVkIH07XG4gICAgICAgICAgICBtYXBwZXIucmd4LmNhbGwob3MsIHVhLCByZ3htYXAub3MpO1xuICAgICAgICAgICAgcmV0dXJuIG9zO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldFJlc3VsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdWEgICAgICA6IHRoaXMuZ2V0VUEoKSxcbiAgICAgICAgICAgICAgICBicm93c2VyIDogdGhpcy5nZXRCcm93c2VyKCksXG4gICAgICAgICAgICAgICAgZW5naW5lICA6IHRoaXMuZ2V0RW5naW5lKCksXG4gICAgICAgICAgICAgICAgb3MgICAgICA6IHRoaXMuZ2V0T1MoKSxcbiAgICAgICAgICAgICAgICBkZXZpY2UgIDogdGhpcy5nZXREZXZpY2UoKSxcbiAgICAgICAgICAgICAgICBjcHUgICAgIDogdGhpcy5nZXRDUFUoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRVQSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB1YTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRVQSA9IGZ1bmN0aW9uICh1YXN0cmluZykge1xuICAgICAgICAgICAgdWEgPSB1YXN0cmluZztcbiAgICAgICAgICAgIC8vYnJvd3NlciA9IG5ldyBCcm93c2VyKCk7XG4gICAgICAgICAgICAvL2NwdSA9IG5ldyBDUFUoKTtcbiAgICAgICAgICAgIC8vZGV2aWNlID0gbmV3IERldmljZSgpO1xuICAgICAgICAgICAgLy9lbmdpbmUgPSBuZXcgRW5naW5lKCk7XG4gICAgICAgICAgICAvL29zID0gbmV3IE9TKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFVBUGFyc2VyLlZFUlNJT04gPSBMSUJWRVJTSU9OO1xuICAgIFVBUGFyc2VyLkJST1dTRVIgPSB7XG4gICAgICAgIE5BTUUgICAgOiBOQU1FLFxuICAgICAgICBNQUpPUiAgIDogTUFKT1IsIC8vIGRlcHJlY2F0ZWRcbiAgICAgICAgVkVSU0lPTiA6IFZFUlNJT05cbiAgICB9O1xuICAgIFVBUGFyc2VyLkNQVSA9IHtcbiAgICAgICAgQVJDSElURUNUVVJFIDogQVJDSElURUNUVVJFXG4gICAgfTtcbiAgICBVQVBhcnNlci5ERVZJQ0UgPSB7XG4gICAgICAgIE1PREVMICAgOiBNT0RFTCxcbiAgICAgICAgVkVORE9SICA6IFZFTkRPUixcbiAgICAgICAgVFlQRSAgICA6IFRZUEUsXG4gICAgICAgIENPTlNPTEUgOiBDT05TT0xFLFxuICAgICAgICBNT0JJTEUgIDogTU9CSUxFLFxuICAgICAgICBTTUFSVFRWIDogU01BUlRUVixcbiAgICAgICAgVEFCTEVUICA6IFRBQkxFVCxcbiAgICAgICAgV0VBUkFCTEU6IFdFQVJBQkxFLFxuICAgICAgICBFTUJFRERFRDogRU1CRURERURcbiAgICB9O1xuICAgIFVBUGFyc2VyLkVOR0lORSA9IHtcbiAgICAgICAgTkFNRSAgICA6IE5BTUUsXG4gICAgICAgIFZFUlNJT04gOiBWRVJTSU9OXG4gICAgfTtcbiAgICBVQVBhcnNlci5PUyA9IHtcbiAgICAgICAgTkFNRSAgICA6IE5BTUUsXG4gICAgICAgIFZFUlNJT04gOiBWRVJTSU9OXG4gICAgfTtcbiAgICAvL1VBUGFyc2VyLlV0aWxzID0gdXRpbDtcblxuICAgIC8vLy8vLy8vLy8vXG4gICAgLy8gRXhwb3J0XG4gICAgLy8vLy8vLy8vL1xuXG5cbiAgICAvLyBjaGVjayBqcyBlbnZpcm9ubWVudFxuICAgIGlmICh0eXBlb2YoZXhwb3J0cykgIT09IFVOREVGX1RZUEUpIHtcbiAgICAgICAgLy8gbm9kZWpzIGVudlxuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gVU5ERUZfVFlQRSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gVUFQYXJzZXI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogdGVzdCEhISEhISEhXG4gICAgICAgIC8qXG4gICAgICAgIGlmIChyZXF1aXJlICYmIHJlcXVpcmUubWFpbiA9PT0gbW9kdWxlICYmIHByb2Nlc3MpIHtcbiAgICAgICAgICAgIC8vIGNsaVxuICAgICAgICAgICAgdmFyIGpzb25pemUgPSBmdW5jdGlvbiAoYXJyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gYXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKG5ldyBVQVBhcnNlcihhcnJbaV0pLmdldFJlc3VsdCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoSlNPTi5zdHJpbmdpZnkocmVzLCBudWxsLCAyKSArICdcXG4nKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5zdGRpbi5pc1RUWSkge1xuICAgICAgICAgICAgICAgIC8vIHZpYSBhcmdzXG4gICAgICAgICAgICAgICAganNvbml6ZShwcm9jZXNzLmFyZ3Yuc2xpY2UoMikpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB2aWEgcGlwZVxuICAgICAgICAgICAgICAgIHZhciBzdHIgPSAnJztcbiAgICAgICAgICAgICAgICBwcm9jZXNzLnN0ZGluLm9uKCdyZWFkYWJsZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVhZCA9IHByb2Nlc3Muc3RkaW4ucmVhZCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVhZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IHJlYWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzLnN0ZGluLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGpzb25pemUoc3RyLnJlcGxhY2UoL1xcbiQvLCAnJykuc3BsaXQoJ1xcbicpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAqL1xuICAgICAgICBleHBvcnRzLlVBUGFyc2VyID0gVUFQYXJzZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcmVxdWlyZWpzIGVudiAob3B0aW9uYWwpXG4gICAgICAgIGlmICh0eXBlb2YoZGVmaW5lKSA9PT0gRlVOQ19UWVBFICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFVBUGFyc2VyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAod2luZG93KSB7XG4gICAgICAgICAgICAvLyBicm93c2VyIGVudlxuICAgICAgICAgICAgd2luZG93LlVBUGFyc2VyID0gVUFQYXJzZXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBqUXVlcnkvWmVwdG8gc3BlY2lmaWMgKG9wdGlvbmFsKVxuICAgIC8vIE5vdGU6XG4gICAgLy8gICBJbiBBTUQgZW52IHRoZSBnbG9iYWwgc2NvcGUgc2hvdWxkIGJlIGtlcHQgY2xlYW4sIGJ1dCBqUXVlcnkgaXMgYW4gZXhjZXB0aW9uLlxuICAgIC8vICAgalF1ZXJ5IGFsd2F5cyBleHBvcnRzIHRvIGdsb2JhbCBzY29wZSwgdW5sZXNzIGpRdWVyeS5ub0NvbmZsaWN0KHRydWUpIGlzIHVzZWQsXG4gICAgLy8gICBhbmQgd2Ugc2hvdWxkIGNhdGNoIHRoYXQuXG4gICAgdmFyICQgPSB3aW5kb3cgJiYgKHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvKTtcbiAgICBpZiAodHlwZW9mICQgIT09IFVOREVGX1RZUEUpIHtcbiAgICAgICAgdmFyIHBhcnNlciA9IG5ldyBVQVBhcnNlcigpO1xuICAgICAgICAkLnVhID0gcGFyc2VyLmdldFJlc3VsdCgpO1xuICAgICAgICAkLnVhLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZXIuZ2V0VUEoKTtcbiAgICAgICAgfTtcbiAgICAgICAgJC51YS5zZXQgPSBmdW5jdGlvbiAodWFzdHJpbmcpIHtcbiAgICAgICAgICAgIHBhcnNlci5zZXRVQSh1YXN0cmluZyk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gcGFyc2VyLmdldFJlc3VsdCgpO1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAkLnVhW3Byb3BdID0gcmVzdWx0W3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxufSkodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgPyB3aW5kb3cgOiB0aGlzKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbi8qKlxuICogVXNhZ2Ugbm90ZTpcbiAqIFRoaXMgbW9kdWxlIG1ha2VzIGEgYmVzdCBlZmZvcnQgdG8gZXhwb3J0IHRoZSBzYW1lIGRhdGEgd2Ugd291bGQgaW50ZXJuYWxseS5cbiAqIEF0IEZhY2Vib29rIHdlIHVzZSBhIHNlcnZlci1nZW5lcmF0ZWQgbW9kdWxlIHRoYXQgZG9lcyB0aGUgcGFyc2luZyBhbmRcbiAqIGV4cG9ydHMgdGhlIGRhdGEgZm9yIHRoZSBjbGllbnQgdG8gdXNlLiBXZSBjYW4ndCByZWx5IG9uIGEgc2VydmVyLXNpZGVcbiAqIGltcGxlbWVudGF0aW9uIGluIG9wZW4gc291cmNlIHNvIGluc3RlYWQgd2UgbWFrZSB1c2Ugb2YgYW4gb3BlbiBzb3VyY2VcbiAqIGxpYnJhcnkgdG8gZG8gdGhlIGhlYXZ5IGxpZnRpbmcgYW5kIHRoZW4gbWFrZSBzb21lIGFkanVzdG1lbnRzIGFzIG5lY2Vzc2FyeS5cbiAqIEl0J3MgbGlrZWx5IHRoZXJlIHdpbGwgYmUgc29tZSBkaWZmZXJlbmNlcy4gU29tZSB3ZSBjYW4gc21vb3RoIG92ZXIuXG4gKiBPdGhlcnMgYXJlIGdvaW5nIHRvIGJlIGhhcmRlci5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVQVBhcnNlciA9IHJlcXVpcmUoJ3VhLXBhcnNlci1qcycpO1xuXG52YXIgVU5LTk9XTiA9ICdVbmtub3duJztcblxudmFyIFBMQVRGT1JNX01BUCA9IHtcbiAgJ01hYyBPUyc6ICdNYWMgT1MgWCdcbn07XG5cbi8qKlxuICogQ29udmVydCBmcm9tIFVBUGFyc2VyIHBsYXRmb3JtIG5hbWUgdG8gd2hhdCB3ZSBleHBlY3QuXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRQbGF0Zm9ybU5hbWUobmFtZSkge1xuICByZXR1cm4gUExBVEZPUk1fTUFQW25hbWVdIHx8IG5hbWU7XG59XG5cbi8qKlxuICogR2V0IHRoZSB2ZXJzaW9uIG51bWJlciBpbiBwYXJ0cy4gVGhpcyBpcyB2ZXJ5IG5haXZlLiBXZSBhY3R1YWxseSBnZXQgbWFqb3JcbiAqIHZlcnNpb24gYXMgYSBwYXJ0IG9mIFVBUGFyc2VyIGFscmVhZHksIHdoaWNoIGlzIGdlbmVyYWxseSBnb29kIGVub3VnaCwgYnV0XG4gKiBsZXQncyBnZXQgdGhlIG1pbm9yIGp1c3QgaW4gY2FzZS5cbiAqL1xuZnVuY3Rpb24gZ2V0QnJvd3NlclZlcnNpb24odmVyc2lvbikge1xuICBpZiAoIXZlcnNpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFqb3I6ICcnLFxuICAgICAgbWlub3I6ICcnXG4gICAgfTtcbiAgfVxuICB2YXIgcGFydHMgPSB2ZXJzaW9uLnNwbGl0KCcuJyk7XG4gIHJldHVybiB7XG4gICAgbWFqb3I6IHBhcnRzWzBdLFxuICAgIG1pbm9yOiBwYXJ0c1sxXVxuICB9O1xufVxuXG4vKipcbiAqIEdldCB0aGUgVUEgZGF0YSBmb20gVUFQYXJzZXIgYW5kIHRoZW4gY29udmVydCBpdCB0byB0aGUgZm9ybWF0IHdlJ3JlXG4gKiBleHBlY3RpbmcgZm9yIG91ciBBUElTLlxuICovXG52YXIgcGFyc2VyID0gbmV3IFVBUGFyc2VyKCk7XG52YXIgcmVzdWx0cyA9IHBhcnNlci5nZXRSZXN1bHQoKTtcblxuLy8gRG8gc29tZSBjb252ZXJzaW9uIGZpcnN0LlxudmFyIGJyb3dzZXJWZXJzaW9uRGF0YSA9IGdldEJyb3dzZXJWZXJzaW9uKHJlc3VsdHMuYnJvd3Nlci52ZXJzaW9uKTtcbnZhciB1YURhdGEgPSB7XG4gIGJyb3dzZXJBcmNoaXRlY3R1cmU6IHJlc3VsdHMuY3B1LmFyY2hpdGVjdHVyZSB8fCBVTktOT1dOLFxuICBicm93c2VyRnVsbFZlcnNpb246IHJlc3VsdHMuYnJvd3Nlci52ZXJzaW9uIHx8IFVOS05PV04sXG4gIGJyb3dzZXJNaW5vclZlcnNpb246IGJyb3dzZXJWZXJzaW9uRGF0YS5taW5vciB8fCBVTktOT1dOLFxuICBicm93c2VyTmFtZTogcmVzdWx0cy5icm93c2VyLm5hbWUgfHwgVU5LTk9XTixcbiAgYnJvd3NlclZlcnNpb246IHJlc3VsdHMuYnJvd3Nlci5tYWpvciB8fCBVTktOT1dOLFxuICBkZXZpY2VOYW1lOiByZXN1bHRzLmRldmljZS5tb2RlbCB8fCBVTktOT1dOLFxuICBlbmdpbmVOYW1lOiByZXN1bHRzLmVuZ2luZS5uYW1lIHx8IFVOS05PV04sXG4gIGVuZ2luZVZlcnNpb246IHJlc3VsdHMuZW5naW5lLnZlcnNpb24gfHwgVU5LTk9XTixcbiAgcGxhdGZvcm1BcmNoaXRlY3R1cmU6IHJlc3VsdHMuY3B1LmFyY2hpdGVjdHVyZSB8fCBVTktOT1dOLFxuICBwbGF0Zm9ybU5hbWU6IGNvbnZlcnRQbGF0Zm9ybU5hbWUocmVzdWx0cy5vcy5uYW1lKSB8fCBVTktOT1dOLFxuICBwbGF0Zm9ybVZlcnNpb246IHJlc3VsdHMub3MudmVyc2lvbiB8fCBVTktOT1dOLFxuICBwbGF0Zm9ybUZ1bGxWZXJzaW9uOiByZXN1bHRzLm9zLnZlcnNpb24gfHwgVU5LTk9XTlxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB1YURhdGE7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdEVkaXRvclRleHROb2RlLnJlYWN0XG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBSZWFjdERPTSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xudmFyIFVzZXJBZ2VudCA9IHJlcXVpcmUoJ2ZianMvbGliL1VzZXJBZ2VudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8vIEluIElFLCBzcGFucyB3aXRoIDxicj4gdGFncyByZW5kZXIgYXMgdHdvIG5ld2xpbmVzLiBCeSByZW5kZXJpbmcgYSBzcGFuXG4vLyB3aXRoIG9ubHkgYSBuZXdsaW5lIGNoYXJhY3Rlciwgd2UgY2FuIGJlIHN1cmUgdG8gcmVuZGVyIGEgc2luZ2xlIGxpbmUuXG52YXIgdXNlTmV3bGluZUNoYXIgPSBVc2VyQWdlbnQuaXNCcm93c2VyKCdJRSA8PSAxMScpO1xuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIG5vZGUgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBuZXdsaW5lLlxuICovXG5mdW5jdGlvbiBpc05ld2xpbmUobm9kZSkge1xuICByZXR1cm4gdXNlTmV3bGluZUNoYXIgPyBub2RlLnRleHRDb250ZW50ID09PSAnXFxuJyA6IG5vZGUudGFnTmFtZSA9PT0gJ0JSJztcbn1cblxuLyoqXG4gKiBQbGFjZWhvbGRlciBlbGVtZW50cyBmb3IgZW1wdHkgdGV4dCBjb250ZW50LlxuICpcbiAqIFdoYXQgaXMgdGhpcyBgZGF0YS10ZXh0YCBhdHRyaWJ1dGUsIGFueXdheT8gSXQgdHVybnMgb3V0IHRoYXQgd2UgbmVlZCB0b1xuICogcHV0IGFuIGF0dHJpYnV0ZSBvbiB0aGUgbG93ZXN0LWxldmVsIHRleHQgbm9kZSBpbiBvcmRlciB0byBwcmVzZXJ2ZSBjb3JyZWN0XG4gKiBzcGVsbGNoZWNrIGhhbmRsaW5nLiBJZiB0aGUgPHNwYW4+IGlzIG5ha2VkLCBDaHJvbWUgYW5kIFNhZmFyaSBtYXkgZG9cbiAqIGJpemFycmUgdGhpbmdzIHRvIGRvIHRoZSBET00gLS0gc3BsaXQgdGV4dCBub2RlcywgY3JlYXRlIGV4dHJhIHNwYW5zLCBldGMuXG4gKiBJZiB0aGUgPHNwYW4+IGhhcyBhbiBhdHRyaWJ1dGUsIHRoaXMgYXBwZWFycyBub3QgdG8gaGFwcGVuLlxuICogU2VlIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvOWtoZGF2b2QvIGZvciB0aGUgZmFpbHVyZSBjYXNlLCBhbmRcbiAqIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvN3BnMTQzZjcvIGZvciB0aGUgZml4ZWQgY2FzZS5cbiAqL1xudmFyIE5FV0xJTkVfQSA9IHVzZU5ld2xpbmVDaGFyID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgJ3NwYW4nLFxuICB7IGtleTogJ0EnLCAnZGF0YS10ZXh0JzogJ3RydWUnIH0sXG4gICdcXG4nXG4pIDogUmVhY3QuY3JlYXRlRWxlbWVudCgnYnInLCB7IGtleTogJ0EnLCAnZGF0YS10ZXh0JzogJ3RydWUnIH0pO1xuXG52YXIgTkVXTElORV9CID0gdXNlTmV3bGluZUNoYXIgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAnc3BhbicsXG4gIHsga2V5OiAnQicsICdkYXRhLXRleHQnOiAndHJ1ZScgfSxcbiAgJ1xcbidcbikgOiBSZWFjdC5jcmVhdGVFbGVtZW50KCdicicsIHsga2V5OiAnQicsICdkYXRhLXRleHQnOiAndHJ1ZScgfSk7XG5cbi8qKlxuICogVGhlIGxvd2VzdC1sZXZlbCBjb21wb25lbnQgaW4gYSBgRHJhZnRFZGl0b3JgLCB0aGUgdGV4dCBub2RlIGNvbXBvbmVudFxuICogcmVwbGFjZXMgdGhlIGRlZmF1bHQgUmVhY3QgdGV4dCBub2RlIGltcGxlbWVudGF0aW9uLiBUaGlzIGFsbG93cyB1cyB0b1xuICogcGVyZm9ybSBjdXN0b20gaGFuZGxpbmcgb2YgbmV3bGluZSBiZWhhdmlvciBhbmQgYXZvaWQgcmUtcmVuZGVyaW5nIHRleHRcbiAqIG5vZGVzIHdpdGggRE9NIHN0YXRlIHRoYXQgYWxyZWFkeSBtYXRjaGVzIHRoZSBleHBlY3RhdGlvbnMgb2Ygb3VyIGltbXV0YWJsZVxuICogZWRpdG9yIHN0YXRlLlxuICovXG52YXIgRHJhZnRFZGl0b3JUZXh0Tm9kZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEcmFmdEVkaXRvclRleHROb2RlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcmFmdEVkaXRvclRleHROb2RlKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyYWZ0RWRpdG9yVGV4dE5vZGUpO1xuXG4gICAgLy8gQnkgZmxpcHBpbmcgdGhpcyBmbGFnLCB3ZSBhbHNvIGtlZXAgZmxpcHBpbmcga2V5cyB3aGljaCBmb3JjZXNcbiAgICAvLyBSZWFjdCB0byByZW1vdW50IHRoaXMgbm9kZSBldmVyeSB0aW1lIGl0IHJlcmVuZGVycy5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLl9mb3JjZUZsYWcgPSBmYWxzZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBEcmFmdEVkaXRvclRleHROb2RlLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICB2YXIgc2hvdWxkQmVOZXdsaW5lID0gbmV4dFByb3BzLmNoaWxkcmVuID09PSAnJztcbiAgICAhKG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdub2RlIGlzIG5vdCBhbiBFbGVtZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmIChzaG91bGRCZU5ld2xpbmUpIHtcbiAgICAgIHJldHVybiAhaXNOZXdsaW5lKG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZS50ZXh0Q29udGVudCAhPT0gbmV4dFByb3BzLmNoaWxkcmVuO1xuICB9O1xuXG4gIERyYWZ0RWRpdG9yVGV4dE5vZGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fZm9yY2VGbGFnID0gIXRoaXMuX2ZvcmNlRmxhZztcbiAgfTtcblxuICBEcmFmdEVkaXRvclRleHROb2RlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5fZm9yY2VGbGFnID0gIXRoaXMuX2ZvcmNlRmxhZztcbiAgfTtcblxuICBEcmFmdEVkaXRvclRleHROb2RlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuY2hpbGRyZW4gPT09ICcnKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZm9yY2VGbGFnID8gTkVXTElORV9BIDogTkVXTElORV9CO1xuICAgIH1cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIHsga2V5OiB0aGlzLl9mb3JjZUZsYWcgPyAnQScgOiAnQicsICdkYXRhLXRleHQnOiAndHJ1ZScgfSxcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBEcmFmdEVkaXRvclRleHROb2RlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RWRpdG9yVGV4dE5vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdEVkaXRvckxlYWYucmVhY3RcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIERyYWZ0RWRpdG9yVGV4dE5vZGUgPSByZXF1aXJlKCcuL0RyYWZ0RWRpdG9yVGV4dE5vZGUucmVhY3QnKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgUmVhY3RET00gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHNldERyYWZ0RWRpdG9yU2VsZWN0aW9uID0gcmVxdWlyZSgnLi9zZXREcmFmdEVkaXRvclNlbGVjdGlvbicpO1xuXG4vKipcbiAqIEFsbCBsZWFmIG5vZGVzIGluIHRoZSBlZGl0b3IgYXJlIHNwYW5zIHdpdGggc2luZ2xlIHRleHQgbm9kZXMuIExlYWZcbiAqIGVsZW1lbnRzIGFyZSBzdHlsZWQgYmFzZWQgb24gdGhlIG1lcmdpbmcgb2YgYW4gb3B0aW9uYWwgY3VzdG9tIHN0eWxlIG1hcFxuICogYW5kIGEgZGVmYXVsdCBzdHlsZSBtYXAuXG4gKlxuICogYERyYWZ0RWRpdG9yTGVhZmAgYWxzbyBwcm92aWRlcyBhIHdyYXBwZXIgZm9yIGNhbGxpbmcgaW50byB0aGUgaW1wZXJhdGl2ZVxuICogRE9NIFNlbGVjdGlvbiBBUEkuIEluIHRoaXMgd2F5LCB0b3AtbGV2ZWwgY29tcG9uZW50cyBjYW4gZGVjbGFyYXRpdmVseVxuICogbWFpbnRhaW4gdGhlIHNlbGVjdGlvbiBzdGF0ZS5cbiAqL1xudmFyIERyYWZ0RWRpdG9yTGVhZiA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEcmFmdEVkaXRvckxlYWYsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERyYWZ0RWRpdG9yTGVhZigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJhZnRFZGl0b3JMZWFmKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgRHJhZnRFZGl0b3JMZWFmLnByb3RvdHlwZS5fc2V0U2VsZWN0aW9uID0gZnVuY3Rpb24gX3NldFNlbGVjdGlvbigpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gdGhpcy5wcm9wcy5zZWxlY3Rpb247XG5cbiAgICAvLyBJZiBzZWxlY3Rpb24gc3RhdGUgaXMgaXJyZWxldmFudCB0byB0aGUgcGFyZW50IGJsb2NrLCBuby1vcC5cblxuICAgIGlmIChzZWxlY3Rpb24gPT0gbnVsbCB8fCAhc2VsZWN0aW9uLmdldEhhc0ZvY3VzKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYmxvY2sgPSBfcHJvcHMuYmxvY2ssXG4gICAgICAgIHN0YXJ0ID0gX3Byb3BzLnN0YXJ0LFxuICAgICAgICB0ZXh0ID0gX3Byb3BzLnRleHQ7XG5cbiAgICB2YXIgYmxvY2tLZXkgPSBibG9jay5nZXRLZXkoKTtcbiAgICB2YXIgZW5kID0gc3RhcnQgKyB0ZXh0Lmxlbmd0aDtcbiAgICBpZiAoIXNlbGVjdGlvbi5oYXNFZGdlV2l0aGluKGJsb2NrS2V5LCBzdGFydCwgZW5kKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIERldGVybWluZSB0aGUgYXBwcm9wcmlhdGUgdGFyZ2V0IG5vZGUgZm9yIHNlbGVjdGlvbi4gSWYgdGhlIGNoaWxkXG4gICAgLy8gaXMgbm90IGEgdGV4dCBub2RlLCBpdCBpcyBhIDxiciAvPiBzcGFjZXIuIEluIHRoaXMgY2FzZSwgdXNlIHRoZVxuICAgIC8vIDxzcGFuPiBpdHNlbGYgYXMgdGhlIHNlbGVjdGlvbiB0YXJnZXQuXG4gICAgdmFyIG5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICAhbm9kZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdNaXNzaW5nIG5vZGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgICFjaGlsZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdNaXNzaW5nIGNoaWxkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciB0YXJnZXROb2RlID0gdm9pZCAwO1xuXG4gICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgdGFyZ2V0Tm9kZSA9IGNoaWxkO1xuICAgIH0gZWxzZSBpZiAoY2hpbGQudGFnTmFtZSA9PT0gJ0JSJykge1xuICAgICAgdGFyZ2V0Tm9kZSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldE5vZGUgPSBjaGlsZC5maXJzdENoaWxkO1xuICAgICAgIXRhcmdldE5vZGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWlzc2luZyB0YXJnZXROb2RlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHNldERyYWZ0RWRpdG9yU2VsZWN0aW9uKHNlbGVjdGlvbiwgdGFyZ2V0Tm9kZSwgYmxvY2tLZXksIHN0YXJ0LCBlbmQpO1xuICB9O1xuICAvKipcbiAgICogQnkgbWFraW5nIGluZGl2aWR1YWwgbGVhZiBpbnN0YW5jZXMgYXdhcmUgb2YgdGhlaXIgY29udGV4dCB3aXRoaW5cbiAgICogdGhlIHRleHQgb2YgdGhlIGVkaXRvciwgd2UgY2FuIHNldCBvdXIgc2VsZWN0aW9uIHJhbmdlIG1vcmVcbiAgICogZWFzaWx5IHRoYW4gd2UgY291bGQgaW4gdGhlIG5vbi1SZWFjdCB3b3JsZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgZGVwZW5kcyBvbiBvdXIgbWFpbnRhaW5pbmcgdGlnaHQgY29udHJvbCBvdmVyIHRoZVxuICAgKiBET00gc3RydWN0dXJlIG9mIHRoZSBEcmFmdEVkaXRvciBjb21wb25lbnQuIElmIGxlYXZlcyBoYWQgbXVsdGlwbGVcbiAgICogdGV4dCBub2RlcywgdGhpcyB3b3VsZCBiZSBoYXJkZXIuXG4gICAqL1xuXG4gIERyYWZ0RWRpdG9yTGVhZi5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgIHZhciBsZWFmTm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMubGVhZik7XG4gICAgIWxlYWZOb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01pc3NpbmcgbGVhZk5vZGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGxlYWZOb2RlLnRleHRDb250ZW50ICE9PSBuZXh0UHJvcHMudGV4dCB8fCBuZXh0UHJvcHMuc3R5bGVTZXQgIT09IHRoaXMucHJvcHMuc3R5bGVTZXQgfHwgbmV4dFByb3BzLmZvcmNlU2VsZWN0aW9uO1xuICB9O1xuXG4gIERyYWZ0RWRpdG9yTGVhZi5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMuX3NldFNlbGVjdGlvbigpO1xuICB9O1xuXG4gIERyYWZ0RWRpdG9yTGVhZi5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9zZXRTZWxlY3Rpb24oKTtcbiAgfTtcblxuICBEcmFmdEVkaXRvckxlYWYucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBibG9jayA9IHRoaXMucHJvcHMuYmxvY2s7XG4gICAgdmFyIHRleHQgPSB0aGlzLnByb3BzLnRleHQ7XG5cbiAgICAvLyBJZiB0aGUgbGVhZiBpcyBhdCB0aGUgZW5kIG9mIGl0cyBibG9jayBhbmQgZW5kcyBpbiBhIHNvZnQgbmV3bGluZSwgYXBwZW5kXG4gICAgLy8gYW4gZXh0cmEgbGluZSBmZWVkIGNoYXJhY3Rlci4gQnJvd3NlcnMgY29sbGFwc2UgdHJhaWxpbmcgbmV3bGluZVxuICAgIC8vIGNoYXJhY3RlcnMsIHdoaWNoIGxlYXZlcyB0aGUgY3Vyc29yIGluIHRoZSB3cm9uZyBwbGFjZSBhZnRlciBhXG4gICAgLy8gc2hpZnQrZW50ZXIuIFRoZSBleHRyYSBjaGFyYWN0ZXIgcmVwYWlycyB0aGlzLlxuXG4gICAgaWYgKHRleHQuZW5kc1dpdGgoJ1xcbicpICYmIHRoaXMucHJvcHMuaXNMYXN0KSB7XG4gICAgICB0ZXh0ICs9ICdcXG4nO1xuICAgIH1cblxuICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY3VzdG9tU3R5bGVNYXAgPSBfcHJvcHMyLmN1c3RvbVN0eWxlTWFwLFxuICAgICAgICBjdXN0b21TdHlsZUZuID0gX3Byb3BzMi5jdXN0b21TdHlsZUZuLFxuICAgICAgICBvZmZzZXRLZXkgPSBfcHJvcHMyLm9mZnNldEtleSxcbiAgICAgICAgc3R5bGVTZXQgPSBfcHJvcHMyLnN0eWxlU2V0O1xuXG4gICAgdmFyIHN0eWxlT2JqID0gc3R5bGVTZXQucmVkdWNlKGZ1bmN0aW9uIChtYXAsIHN0eWxlTmFtZSkge1xuICAgICAgdmFyIG1lcmdlZFN0eWxlcyA9IHt9O1xuICAgICAgdmFyIHN0eWxlID0gY3VzdG9tU3R5bGVNYXBbc3R5bGVOYW1lXTtcblxuICAgICAgaWYgKHN0eWxlICE9PSB1bmRlZmluZWQgJiYgbWFwLnRleHREZWNvcmF0aW9uICE9PSBzdHlsZS50ZXh0RGVjb3JhdGlvbikge1xuICAgICAgICAvLyAudHJpbSgpIGlzIG5lY2Vzc2FyeSBmb3IgSUU5LzEwLzExIGFuZCBFZGdlXG4gICAgICAgIG1lcmdlZFN0eWxlcy50ZXh0RGVjb3JhdGlvbiA9IFttYXAudGV4dERlY29yYXRpb24sIHN0eWxlLnRleHREZWNvcmF0aW9uXS5qb2luKCcgJykudHJpbSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2Fzc2lnbihtYXAsIHN0eWxlLCBtZXJnZWRTdHlsZXMpO1xuICAgIH0sIHt9KTtcblxuICAgIGlmIChjdXN0b21TdHlsZUZuKSB7XG4gICAgICB2YXIgbmV3U3R5bGVzID0gY3VzdG9tU3R5bGVGbihzdHlsZVNldCwgYmxvY2spO1xuICAgICAgc3R5bGVPYmogPSBfYXNzaWduKHN0eWxlT2JqLCBuZXdTdHlsZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3NwYW4nLFxuICAgICAge1xuICAgICAgICAnZGF0YS1vZmZzZXQta2V5Jzogb2Zmc2V0S2V5LFxuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihfcmVmKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5sZWFmID0gX3JlZjtcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHN0eWxlT2JqIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBEcmFmdEVkaXRvclRleHROb2RlLFxuICAgICAgICBudWxsLFxuICAgICAgICB0ZXh0XG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gRHJhZnRFZGl0b3JMZWFmO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RWRpdG9yTGVhZjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0RWRpdG9yQ29udGVudHMtY29yZS5yZWFjdFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIF9leHRlbmRzID0gX2Fzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgRHJhZnRFZGl0b3JCbG9jayA9IHJlcXVpcmUoJy4vRHJhZnRFZGl0b3JCbG9jay5yZWFjdCcpO1xudmFyIERyYWZ0T2Zmc2V0S2V5ID0gcmVxdWlyZSgnLi9EcmFmdE9mZnNldEtleScpO1xudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIGN4ID0gcmVxdWlyZSgnZmJqcy9saWIvY3gnKTtcbnZhciBqb2luQ2xhc3NlcyA9IHJlcXVpcmUoJ2ZianMvbGliL2pvaW5DbGFzc2VzJyk7XG52YXIgbnVsbHRocm93cyA9IHJlcXVpcmUoJ2ZianMvbGliL251bGx0aHJvd3MnKTtcblxuLyoqXG4gKiBQcm92aWRlIGRlZmF1bHQgc3R5bGluZyBmb3IgbGlzdCBpdGVtcy4gVGhpcyB3YXksIGxpc3RzIHdpbGwgYmUgc3R5bGVkIHdpdGhcbiAqIHByb3BlciBjb3VudGVycyBhbmQgaW5kZW50YXRpb24gZXZlbiBpZiB0aGUgY2FsbGVyIGRvZXMgbm90IHNwZWNpZnlcbiAqIHRoZWlyIG93biBzdHlsaW5nIGF0IGFsbC4gSWYgbW9yZSB0aGFuIGZpdmUgbGV2ZWxzIG9mIG5lc3RpbmcgYXJlIG5lZWRlZCxcbiAqIHRoZSBuZWNlc3NhcnkgQ1NTIGNsYXNzZXMgY2FuIGJlIHByb3ZpZGVkIHZpYSBgYmxvY2tTdHlsZUZuYCBjb25maWd1cmF0aW9uLlxuICovXG52YXIgZ2V0TGlzdEl0ZW1DbGFzc2VzID0gZnVuY3Rpb24gZ2V0TGlzdEl0ZW1DbGFzc2VzKHR5cGUsIGRlcHRoLCBzaG91bGRSZXNldENvdW50LCBkaXJlY3Rpb24pIHtcbiAgcmV0dXJuIGN4KHtcbiAgICAncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L3Vub3JkZXJlZExpc3RJdGVtJzogdHlwZSA9PT0gJ3Vub3JkZXJlZC1saXN0LWl0ZW0nLFxuICAgICdwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvb3JkZXJlZExpc3RJdGVtJzogdHlwZSA9PT0gJ29yZGVyZWQtbGlzdC1pdGVtJyxcbiAgICAncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L3Jlc2V0Jzogc2hvdWxkUmVzZXRDb3VudCxcbiAgICAncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2RlcHRoMCc6IGRlcHRoID09PSAwLFxuICAgICdwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvZGVwdGgxJzogZGVwdGggPT09IDEsXG4gICAgJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9kZXB0aDInOiBkZXB0aCA9PT0gMixcbiAgICAncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2RlcHRoMyc6IGRlcHRoID09PSAzLFxuICAgICdwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvZGVwdGg0JzogZGVwdGggPT09IDQsXG4gICAgJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9saXN0TFRSJzogZGlyZWN0aW9uID09PSAnTFRSJyxcbiAgICAncHVibGljL0RyYWZ0U3R5bGVEZWZhdWx0L2xpc3RSVEwnOiBkaXJlY3Rpb24gPT09ICdSVEwnXG4gIH0pO1xufTtcblxuLyoqXG4gKiBgRHJhZnRFZGl0b3JDb250ZW50c2AgaXMgdGhlIGNvbnRhaW5lciBjb21wb25lbnQgZm9yIGFsbCBibG9jayBjb21wb25lbnRzXG4gKiByZW5kZXJlZCBmb3IgYSBgRHJhZnRFZGl0b3JgLiBJdCBpcyBvcHRpbWl6ZWQgdG8gYWdncmVzc2l2ZWx5IGF2b2lkXG4gKiByZS1yZW5kZXJpbmcgYmxvY2tzIHdoZW5ldmVyIHBvc3NpYmxlLlxuICpcbiAqIFRoaXMgY29tcG9uZW50IGlzIHNlcGFyYXRlIGZyb20gYERyYWZ0RWRpdG9yYCBiZWNhdXNlIGNlcnRhaW4gcHJvcHNcbiAqIChmb3IgaW5zdGFuY2UsIEFSSUEgcHJvcHMpIG11c3QgYmUgYWxsb3dlZCB0byB1cGRhdGUgd2l0aG91dCBhZmZlY3RpbmdcbiAqIHRoZSBjb250ZW50cyBvZiB0aGUgZWRpdG9yLlxuICovXG5cbnZhciBEcmFmdEVkaXRvckNvbnRlbnRzID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERyYWZ0RWRpdG9yQ29udGVudHMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERyYWZ0RWRpdG9yQ29udGVudHMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyYWZ0RWRpdG9yQ29udGVudHMpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBEcmFmdEVkaXRvckNvbnRlbnRzLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgdmFyIHByZXZFZGl0b3JTdGF0ZSA9IHRoaXMucHJvcHMuZWRpdG9yU3RhdGU7XG4gICAgdmFyIG5leHRFZGl0b3JTdGF0ZSA9IG5leHRQcm9wcy5lZGl0b3JTdGF0ZTtcblxuICAgIHZhciBwcmV2RGlyZWN0aW9uTWFwID0gcHJldkVkaXRvclN0YXRlLmdldERpcmVjdGlvbk1hcCgpO1xuICAgIHZhciBuZXh0RGlyZWN0aW9uTWFwID0gbmV4dEVkaXRvclN0YXRlLmdldERpcmVjdGlvbk1hcCgpO1xuXG4gICAgLy8gVGV4dCBkaXJlY3Rpb24gaGFzIGNoYW5nZWQgZm9yIG9uZSBvciBtb3JlIGJsb2Nrcy4gV2UgbXVzdCByZS1yZW5kZXIuXG4gICAgaWYgKHByZXZEaXJlY3Rpb25NYXAgIT09IG5leHREaXJlY3Rpb25NYXApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBkaWRIYXZlRm9jdXMgPSBwcmV2RWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkuZ2V0SGFzRm9jdXMoKTtcbiAgICB2YXIgbm93SGFzRm9jdXMgPSBuZXh0RWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkuZ2V0SGFzRm9jdXMoKTtcblxuICAgIGlmIChkaWRIYXZlRm9jdXMgIT09IG5vd0hhc0ZvY3VzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dE5hdGl2ZUNvbnRlbnQgPSBuZXh0RWRpdG9yU3RhdGUuZ2V0TmF0aXZlbHlSZW5kZXJlZENvbnRlbnQoKTtcblxuICAgIHZhciB3YXNDb21wb3NpbmcgPSBwcmV2RWRpdG9yU3RhdGUuaXNJbkNvbXBvc2l0aW9uTW9kZSgpO1xuICAgIHZhciBub3dDb21wb3NpbmcgPSBuZXh0RWRpdG9yU3RhdGUuaXNJbkNvbXBvc2l0aW9uTW9kZSgpO1xuXG4gICAgLy8gSWYgdGhlIHN0YXRlIGlzIHVuY2hhbmdlZCBvciB3ZSdyZSBjdXJyZW50bHkgcmVuZGVyaW5nIGEgbmF0aXZlbHlcbiAgICAvLyByZW5kZXJlZCBzdGF0ZSwgdGhlcmUncyBub3RoaW5nIG5ldyB0byBiZSBkb25lLlxuICAgIGlmIChwcmV2RWRpdG9yU3RhdGUgPT09IG5leHRFZGl0b3JTdGF0ZSB8fCBuZXh0TmF0aXZlQ29udGVudCAhPT0gbnVsbCAmJiBuZXh0RWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSA9PT0gbmV4dE5hdGl2ZUNvbnRlbnQgfHwgd2FzQ29tcG9zaW5nICYmIG5vd0NvbXBvc2luZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBwcmV2Q29udGVudCA9IHByZXZFZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciBuZXh0Q29udGVudCA9IG5leHRFZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciBwcmV2RGVjb3JhdG9yID0gcHJldkVkaXRvclN0YXRlLmdldERlY29yYXRvcigpO1xuICAgIHZhciBuZXh0RGVjb3JhdG9yID0gbmV4dEVkaXRvclN0YXRlLmdldERlY29yYXRvcigpO1xuICAgIHJldHVybiB3YXNDb21wb3NpbmcgIT09IG5vd0NvbXBvc2luZyB8fCBwcmV2Q29udGVudCAhPT0gbmV4dENvbnRlbnQgfHwgcHJldkRlY29yYXRvciAhPT0gbmV4dERlY29yYXRvciB8fCBuZXh0RWRpdG9yU3RhdGUubXVzdEZvcmNlU2VsZWN0aW9uKCk7XG4gIH07XG5cbiAgRHJhZnRFZGl0b3JDb250ZW50cy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBibG9ja1JlbmRlck1hcCA9IF9wcm9wcy5ibG9ja1JlbmRlck1hcCxcbiAgICAgICAgYmxvY2tSZW5kZXJlckZuID0gX3Byb3BzLmJsb2NrUmVuZGVyZXJGbixcbiAgICAgICAgYmxvY2tTdHlsZUZuID0gX3Byb3BzLmJsb2NrU3R5bGVGbixcbiAgICAgICAgY3VzdG9tU3R5bGVNYXAgPSBfcHJvcHMuY3VzdG9tU3R5bGVNYXAsXG4gICAgICAgIGN1c3RvbVN0eWxlRm4gPSBfcHJvcHMuY3VzdG9tU3R5bGVGbixcbiAgICAgICAgZWRpdG9yU3RhdGUgPSBfcHJvcHMuZWRpdG9yU3RhdGUsXG4gICAgICAgIGVkaXRvcktleSA9IF9wcm9wcy5lZGl0b3JLZXksXG4gICAgICAgIHRleHREaXJlY3Rpb25hbGl0eSA9IF9wcm9wcy50ZXh0RGlyZWN0aW9uYWxpdHk7XG5cblxuICAgIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gICAgdmFyIGZvcmNlU2VsZWN0aW9uID0gZWRpdG9yU3RhdGUubXVzdEZvcmNlU2VsZWN0aW9uKCk7XG4gICAgdmFyIGRlY29yYXRvciA9IGVkaXRvclN0YXRlLmdldERlY29yYXRvcigpO1xuICAgIHZhciBkaXJlY3Rpb25NYXAgPSBudWxsdGhyb3dzKGVkaXRvclN0YXRlLmdldERpcmVjdGlvbk1hcCgpKTtcblxuICAgIHZhciBibG9ja3NBc0FycmF5ID0gY29udGVudC5nZXRCbG9ja3NBc0FycmF5KCk7XG4gICAgdmFyIHByb2Nlc3NlZEJsb2NrcyA9IFtdO1xuXG4gICAgdmFyIGN1cnJlbnREZXB0aCA9IG51bGw7XG4gICAgdmFyIGxhc3RXcmFwcGVyVGVtcGxhdGUgPSBudWxsO1xuXG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGJsb2Nrc0FzQXJyYXkubGVuZ3RoOyBpaSsrKSB7XG4gICAgICB2YXIgX2Jsb2NrID0gYmxvY2tzQXNBcnJheVtpaV07XG4gICAgICB2YXIga2V5ID0gX2Jsb2NrLmdldEtleSgpO1xuICAgICAgdmFyIGJsb2NrVHlwZSA9IF9ibG9jay5nZXRUeXBlKCk7XG5cbiAgICAgIHZhciBjdXN0b21SZW5kZXJlciA9IGJsb2NrUmVuZGVyZXJGbihfYmxvY2spO1xuICAgICAgdmFyIEN1c3RvbUNvbXBvbmVudCA9IHZvaWQgMCxcbiAgICAgICAgICBjdXN0b21Qcm9wcyA9IHZvaWQgMCxcbiAgICAgICAgICBjdXN0b21FZGl0YWJsZSA9IHZvaWQgMDtcbiAgICAgIGlmIChjdXN0b21SZW5kZXJlcikge1xuICAgICAgICBDdXN0b21Db21wb25lbnQgPSBjdXN0b21SZW5kZXJlci5jb21wb25lbnQ7XG4gICAgICAgIGN1c3RvbVByb3BzID0gY3VzdG9tUmVuZGVyZXIucHJvcHM7XG4gICAgICAgIGN1c3RvbUVkaXRhYmxlID0gY3VzdG9tUmVuZGVyZXIuZWRpdGFibGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBkaXJlY3Rpb24gPSB0ZXh0RGlyZWN0aW9uYWxpdHkgPyB0ZXh0RGlyZWN0aW9uYWxpdHkgOiBkaXJlY3Rpb25NYXAuZ2V0KGtleSk7XG4gICAgICB2YXIgb2Zmc2V0S2V5ID0gRHJhZnRPZmZzZXRLZXkuZW5jb2RlKGtleSwgMCwgMCk7XG4gICAgICB2YXIgY29tcG9uZW50UHJvcHMgPSB7XG4gICAgICAgIGNvbnRlbnRTdGF0ZTogY29udGVudCxcbiAgICAgICAgYmxvY2s6IF9ibG9jayxcbiAgICAgICAgYmxvY2tQcm9wczogY3VzdG9tUHJvcHMsXG4gICAgICAgIGJsb2NrU3R5bGVGbjogYmxvY2tTdHlsZUZuLFxuICAgICAgICBjdXN0b21TdHlsZU1hcDogY3VzdG9tU3R5bGVNYXAsXG4gICAgICAgIGN1c3RvbVN0eWxlRm46IGN1c3RvbVN0eWxlRm4sXG4gICAgICAgIGRlY29yYXRvcjogZGVjb3JhdG9yLFxuICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcbiAgICAgICAgZm9yY2VTZWxlY3Rpb246IGZvcmNlU2VsZWN0aW9uLFxuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgb2Zmc2V0S2V5OiBvZmZzZXRLZXksXG4gICAgICAgIHNlbGVjdGlvbjogc2VsZWN0aW9uLFxuICAgICAgICB0cmVlOiBlZGl0b3JTdGF0ZS5nZXRCbG9ja1RyZWUoa2V5KVxuICAgICAgfTtcblxuICAgICAgdmFyIGNvbmZpZ0ZvclR5cGUgPSBibG9ja1JlbmRlck1hcC5nZXQoYmxvY2tUeXBlKSB8fCBibG9ja1JlbmRlck1hcC5nZXQoJ3Vuc3R5bGVkJyk7XG4gICAgICB2YXIgd3JhcHBlclRlbXBsYXRlID0gY29uZmlnRm9yVHlwZS53cmFwcGVyO1xuXG4gICAgICB2YXIgRWxlbWVudCA9IGNvbmZpZ0ZvclR5cGUuZWxlbWVudCB8fCBibG9ja1JlbmRlck1hcC5nZXQoJ3Vuc3R5bGVkJykuZWxlbWVudDtcblxuICAgICAgdmFyIGRlcHRoID0gX2Jsb2NrLmdldERlcHRoKCk7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gJyc7XG4gICAgICBpZiAoYmxvY2tTdHlsZUZuKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGJsb2NrU3R5bGVGbihfYmxvY2spO1xuICAgICAgfVxuXG4gICAgICAvLyBMaXN0IGl0ZW1zIGFyZSBzcGVjaWFsIHNub3dmbGFrZXMsIHNpbmNlIHdlIGhhbmRsZSBuZXN0aW5nIGFuZFxuICAgICAgLy8gY291bnRlcnMgbWFudWFsbHkuXG4gICAgICBpZiAoRWxlbWVudCA9PT0gJ2xpJykge1xuICAgICAgICB2YXIgc2hvdWxkUmVzZXRDb3VudCA9IGxhc3RXcmFwcGVyVGVtcGxhdGUgIT09IHdyYXBwZXJUZW1wbGF0ZSB8fCBjdXJyZW50RGVwdGggPT09IG51bGwgfHwgZGVwdGggPiBjdXJyZW50RGVwdGg7XG4gICAgICAgIGNsYXNzTmFtZSA9IGpvaW5DbGFzc2VzKGNsYXNzTmFtZSwgZ2V0TGlzdEl0ZW1DbGFzc2VzKGJsb2NrVHlwZSwgZGVwdGgsIHNob3VsZFJlc2V0Q291bnQsIGRpcmVjdGlvbikpO1xuICAgICAgfVxuXG4gICAgICB2YXIgQ29tcG9uZW50ID0gQ3VzdG9tQ29tcG9uZW50IHx8IERyYWZ0RWRpdG9yQmxvY2s7XG4gICAgICB2YXIgY2hpbGRQcm9wcyA9IHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgICdkYXRhLWJsb2NrJzogdHJ1ZSxcbiAgICAgICAgJ2RhdGEtZWRpdG9yJzogZWRpdG9yS2V5LFxuICAgICAgICAnZGF0YS1vZmZzZXQta2V5Jzogb2Zmc2V0S2V5LFxuICAgICAgICBrZXk6IGtleVxuICAgICAgfTtcbiAgICAgIGlmIChjdXN0b21FZGl0YWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNoaWxkUHJvcHMgPSBfZXh0ZW5kcyh7fSwgY2hpbGRQcm9wcywge1xuICAgICAgICAgIGNvbnRlbnRFZGl0YWJsZTogY3VzdG9tRWRpdGFibGUsXG4gICAgICAgICAgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnQsIGNoaWxkUHJvcHMsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBjb21wb25lbnRQcm9wcykpO1xuXG4gICAgICBwcm9jZXNzZWRCbG9ja3MucHVzaCh7XG4gICAgICAgIGJsb2NrOiBjaGlsZCxcbiAgICAgICAgd3JhcHBlclRlbXBsYXRlOiB3cmFwcGVyVGVtcGxhdGUsXG4gICAgICAgIGtleToga2V5LFxuICAgICAgICBvZmZzZXRLZXk6IG9mZnNldEtleVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh3cmFwcGVyVGVtcGxhdGUpIHtcbiAgICAgICAgY3VycmVudERlcHRoID0gX2Jsb2NrLmdldERlcHRoKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50RGVwdGggPSBudWxsO1xuICAgICAgfVxuICAgICAgbGFzdFdyYXBwZXJUZW1wbGF0ZSA9IHdyYXBwZXJUZW1wbGF0ZTtcbiAgICB9XG5cbiAgICAvLyBHcm91cCBjb250aWd1b3VzIHJ1bnMgb2YgYmxvY2tzIHRoYXQgaGF2ZSB0aGUgc2FtZSB3cmFwcGVyVGVtcGxhdGVcbiAgICB2YXIgb3V0cHV0QmxvY2tzID0gW107XG4gICAgZm9yICh2YXIgX2lpID0gMDsgX2lpIDwgcHJvY2Vzc2VkQmxvY2tzLmxlbmd0aDspIHtcbiAgICAgIHZhciBpbmZvID0gcHJvY2Vzc2VkQmxvY2tzW19paV07XG4gICAgICBpZiAoaW5mby53cmFwcGVyVGVtcGxhdGUpIHtcbiAgICAgICAgdmFyIGJsb2NrcyA9IFtdO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgYmxvY2tzLnB1c2gocHJvY2Vzc2VkQmxvY2tzW19paV0uYmxvY2spO1xuICAgICAgICAgIF9paSsrO1xuICAgICAgICB9IHdoaWxlIChfaWkgPCBwcm9jZXNzZWRCbG9ja3MubGVuZ3RoICYmIHByb2Nlc3NlZEJsb2Nrc1tfaWldLndyYXBwZXJUZW1wbGF0ZSA9PT0gaW5mby53cmFwcGVyVGVtcGxhdGUpO1xuICAgICAgICB2YXIgd3JhcHBlckVsZW1lbnQgPSBSZWFjdC5jbG9uZUVsZW1lbnQoaW5mby53cmFwcGVyVGVtcGxhdGUsIHtcbiAgICAgICAgICBrZXk6IGluZm8ua2V5ICsgJy13cmFwJyxcbiAgICAgICAgICAnZGF0YS1vZmZzZXQta2V5JzogaW5mby5vZmZzZXRLZXlcbiAgICAgICAgfSwgYmxvY2tzKTtcbiAgICAgICAgb3V0cHV0QmxvY2tzLnB1c2god3JhcHBlckVsZW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0QmxvY2tzLnB1c2goaW5mby5ibG9jayk7XG4gICAgICAgIF9paSsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7ICdkYXRhLWNvbnRlbnRzJzogJ3RydWUnIH0sXG4gICAgICBvdXRwdXRCbG9ja3NcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBEcmFmdEVkaXRvckNvbnRlbnRzO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RWRpdG9yQ29udGVudHM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0RWRpdG9yQ29udGVudHMucmVhY3RcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0RWRpdG9yQ29udGVudHMgPSByZXF1aXJlKCcuL0RyYWZ0RWRpdG9yQ29udGVudHMtY29yZS5yZWFjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RWRpdG9yQ29udGVudHM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdEVkaXRvckNvbXBvc2l0aW9uSGFuZGxlclxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuL0RyYWZ0RmVhdHVyZUZsYWdzJyk7XG52YXIgRHJhZnRNb2RpZmllciA9IHJlcXVpcmUoJy4vRHJhZnRNb2RpZmllcicpO1xudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xudmFyIEtleXMgPSByZXF1aXJlKCdmYmpzL2xpYi9LZXlzJyk7XG5cbnZhciBnZXRFbnRpdHlLZXlGb3JTZWxlY3Rpb24gPSByZXF1aXJlKCcuL2dldEVudGl0eUtleUZvclNlbGVjdGlvbicpO1xudmFyIGlzRXZlbnRIYW5kbGVkID0gcmVxdWlyZSgnLi9pc0V2ZW50SGFuZGxlZCcpO1xudmFyIGlzU2VsZWN0aW9uQXRMZWFmU3RhcnQgPSByZXF1aXJlKCcuL2lzU2VsZWN0aW9uQXRMZWFmU3RhcnQnKTtcblxuLyoqXG4gKiBNaWxsaXNlY29uZCBkZWxheSB0byBhbGxvdyBgY29tcG9zaXRpb25zdGFydGAgdG8gZmlyZSBhZ2FpbiB1cG9uXG4gKiBgY29tcG9zaXRpb25lbmRgLlxuICpcbiAqIFRoaXMgaXMgdXNlZCBmb3IgS29yZWFuIGlucHV0IHRvIGVuc3VyZSB0aGF0IHR5cGluZyBjYW4gY29udGludWUgd2l0aG91dFxuICogdGhlIGVkaXRvciB0cnlpbmcgdG8gcmVuZGVyIHRvbyBxdWlja2x5LiBNb3JlIHNwZWNpZmljYWxseSwgU2FmYXJpIDcuMStcbiAqIHRyaWdnZXJzIGBjb21wb3NpdGlvbnN0YXJ0YCBhIGxpdHRsZSBzbG93ZXIgdGhhbiBDaHJvbWUvRkYsIHdoaWNoXG4gKiBsZWFkcyB0byBjb21wb3NlZCBjaGFyYWN0ZXJzIGJlaW5nIHJlc29sdmVkIGFuZCByZS1yZW5kZXIgb2NjdXJyaW5nXG4gKiBzb29uZXIgdGhhbiB3ZSB3YW50LlxuICovXG52YXIgUkVTT0xWRV9ERUxBWSA9IDIwO1xuXG4vKipcbiAqIEEgaGFuZGZ1bCBvZiB2YXJpYWJsZXMgdXNlZCB0byB0cmFjayB0aGUgY3VycmVudCBjb21wb3NpdGlvbiBhbmQgaXRzXG4gKiByZXNvbHV0aW9uIHN0YXR1cy4gVGhlc2UgZXhpc3QgYXQgdGhlIG1vZHVsZSBsZXZlbCBiZWNhdXNlIGl0IGlzIG5vdFxuICogcG9zc2libGUgdG8gaGF2ZSBjb21wb3NpdGlvbnMgb2NjdXJyaW5nIGluIG11bHRpcGxlIGVkaXRvcnMgc2ltdWx0YW5lb3VzbHksXG4gKiBhbmQgaXQgc2ltcGxpZmllcyBzdGF0ZSBtYW5hZ2VtZW50IHdpdGggcmVzcGVjdCB0byB0aGUgRHJhZnRFZGl0b3IgY29tcG9uZW50LlxuICovXG52YXIgcmVzb2x2ZWQgPSBmYWxzZTtcbnZhciBzdGlsbENvbXBvc2luZyA9IGZhbHNlO1xudmFyIHRleHRJbnB1dERhdGEgPSAnJztcblxudmFyIERyYWZ0RWRpdG9yQ29tcG9zaXRpb25IYW5kbGVyID0ge1xuICBvbkJlZm9yZUlucHV0OiBmdW5jdGlvbiBvbkJlZm9yZUlucHV0KGVkaXRvciwgZSkge1xuICAgIHRleHRJbnB1dERhdGEgPSAodGV4dElucHV0RGF0YSB8fCAnJykgKyBlLmRhdGE7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEEgYGNvbXBvc2l0aW9uc3RhcnRgIGV2ZW50IGhhcyBmaXJlZCB3aGlsZSB3ZSdyZSBzdGlsbCBpbiBjb21wb3NpdGlvblxuICAgKiBtb2RlLiBDb250aW51ZSB0aGUgY3VycmVudCBjb21wb3NpdGlvbiBzZXNzaW9uIHRvIHByZXZlbnQgYSByZS1yZW5kZXIuXG4gICAqL1xuICBvbkNvbXBvc2l0aW9uU3RhcnQ6IGZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydChlZGl0b3IpIHtcbiAgICBzdGlsbENvbXBvc2luZyA9IHRydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gZW5kIHRoZSBjdXJyZW50IGNvbXBvc2l0aW9uIHNlc3Npb24uXG4gICAqXG4gICAqIERlZmVyIGhhbmRsaW5nIGJlY2F1c2UgYnJvd3NlciB3aWxsIHN0aWxsIGluc2VydCB0aGUgY2hhcnMgaW50byBhY3RpdmVcbiAgICogZWxlbWVudCBhZnRlciBgY29tcG9zaXRpb25lbmRgLiBJZiBhIGBjb21wb3NpdGlvbnN0YXJ0YCBldmVudCBmaXJlc1xuICAgKiBiZWZvcmUgYHJlc29sdmVDb21wb3NpdGlvbmAgZXhlY3V0ZXMsIG91ciBjb21wb3NpdGlvbiBzZXNzaW9uIHdpbGxcbiAgICogY29udGludWUuXG4gICAqXG4gICAqIFRoZSBgcmVzb2x2ZWRgIGZsYWcgaXMgdXNlZnVsIGJlY2F1c2UgY2VydGFpbiBJTUUgaW50ZXJmYWNlcyBmaXJlIHRoZVxuICAgKiBgY29tcG9zaXRpb25lbmRgIGV2ZW50IG11bHRpcGxlIHRpbWVzLCB0aHVzIHF1ZXVlaW5nIHVwIG11bHRpcGxlIGF0dGVtcHRzXG4gICAqIGF0IGhhbmRsaW5nIHRoZSBjb21wb3NpdGlvbi4gU2luY2UgaGFuZGxpbmcgdGhlIHNhbWUgY29tcG9zaXRpb24gZXZlbnRcbiAgICogdHdpY2UgY291bGQgYnJlYWsgdGhlIERPTSwgd2Ugb25seSB1c2UgdGhlIGZpcnN0IGV2ZW50LiBFeGFtcGxlOiBBcmFiaWNcbiAgICogR29vZ2xlIElucHV0IFRvb2xzIG9uIFdpbmRvd3MgOC4xIGZpcmVzIGBjb21wb3NpdGlvbmVuZGAgdGhyZWUgdGltZXMuXG4gICAqL1xuICBvbkNvbXBvc2l0aW9uRW5kOiBmdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kKGVkaXRvcikge1xuICAgIHJlc29sdmVkID0gZmFsc2U7XG4gICAgc3RpbGxDb21wb3NpbmcgPSBmYWxzZTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghcmVzb2x2ZWQpIHtcbiAgICAgICAgRHJhZnRFZGl0b3JDb21wb3NpdGlvbkhhbmRsZXIucmVzb2x2ZUNvbXBvc2l0aW9uKGVkaXRvcik7XG4gICAgICB9XG4gICAgfSwgUkVTT0xWRV9ERUxBWSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluIFNhZmFyaSwga2V5ZG93biBldmVudHMgbWF5IGZpcmUgd2hlbiBjb21taXR0aW5nIGNvbXBvc2l0aW9ucy4gSWZcbiAgICogdGhlIGFycm93IGtleXMgYXJlIHVzZWQgdG8gY29tbWl0LCBwcmV2ZW50IGRlZmF1bHQgc28gdGhhdCB0aGUgY3Vyc29yXG4gICAqIGRvZXNuJ3QgbW92ZSwgb3RoZXJ3aXNlIGl0IHdpbGwganVtcCBiYWNrIG5vdGljZWFibHkgb24gcmUtcmVuZGVyLlxuICAgKi9cbiAgb25LZXlEb3duOiBmdW5jdGlvbiBvbktleURvd24oZWRpdG9yLCBlKSB7XG4gICAgaWYgKCFzdGlsbENvbXBvc2luZykge1xuICAgICAgLy8gSWYgYSBrZXlkb3duIGV2ZW50IGlzIHJlY2VpdmVkIGFmdGVyIGNvbXBvc2l0aW9uZW5kIGJ1dCBiZWZvcmUgdGhlXG4gICAgICAvLyAyMG1zIHRpbWVyIGV4cGlyZXMgKGV4OiB0eXBlIG9wdGlvbi1FIHRoZW4gYmFja3NwYWNlLCBvciB0eXBlIEEgdGhlblxuICAgICAgLy8gYmFja3NwYWNlIGluIDItU2V0IEtvcmVhbiksIHdlIHNob3VsZCBpbW1lZGlhdGVseSByZXNvbHZlIHRoZVxuICAgICAgLy8gY29tcG9zaXRpb24gYW5kIHJlaW50ZXJwcmV0IHRoZSBrZXkgcHJlc3MgaW4gZWRpdCBtb2RlLlxuICAgICAgRHJhZnRFZGl0b3JDb21wb3NpdGlvbkhhbmRsZXIucmVzb2x2ZUNvbXBvc2l0aW9uKGVkaXRvcik7XG4gICAgICBlZGl0b3IuX29uS2V5RG93bihlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGUud2hpY2ggPT09IEtleXMuUklHSFQgfHwgZS53aGljaCA9PT0gS2V5cy5MRUZUKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBLZXlwcmVzcyBldmVudHMgbWF5IGZpcmUgd2hlbiBjb21taXR0aW5nIGNvbXBvc2l0aW9ucy4gSW4gRmlyZWZveCxcbiAgICogcHJlc3NpbmcgUkVUVVJOIGNvbW1pdHMgdGhlIGNvbXBvc2l0aW9uIGFuZCBpbnNlcnRzIGV4dHJhIG5ld2xpbmVcbiAgICogY2hhcmFjdGVycyB0aGF0IHdlIGRvIG5vdCB3YW50LiBgcHJldmVudERlZmF1bHRgIGFsbG93cyB0aGUgY29tcG9zaXRpb25cbiAgICogdG8gYmUgY29tbWl0dGVkIHdoaWxlIHByZXZlbnRpbmcgdGhlIGV4dHJhIGNoYXJhY3RlcnMuXG4gICAqL1xuICBvbktleVByZXNzOiBmdW5jdGlvbiBvbktleVByZXNzKGVkaXRvciwgZSkge1xuICAgIGlmIChlLndoaWNoID09PSBLZXlzLlJFVFVSTikge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQXR0ZW1wdCB0byBpbnNlcnQgY29tcG9zZWQgY2hhcmFjdGVycyBpbnRvIHRoZSBkb2N1bWVudC5cbiAgICpcbiAgICogSWYgd2UgYXJlIHN0aWxsIGluIGEgY29tcG9zaXRpb24gc2Vzc2lvbiwgZG8gbm90aGluZy4gT3RoZXJ3aXNlLCBpbnNlcnRcbiAgICogdGhlIGNoYXJhY3RlcnMgaW50byB0aGUgZG9jdW1lbnQgYW5kIHRlcm1pbmF0ZSB0aGUgY29tcG9zaXRpb24gc2Vzc2lvbi5cbiAgICpcbiAgICogSWYgbm8gY2hhcmFjdGVycyB3ZXJlIGNvbXBvc2VkIC0tIGZvciBpbnN0YW5jZSwgdGhlIHVzZXJcbiAgICogZGVsZXRlZCBhbGwgY29tcG9zZWQgY2hhcmFjdGVycyBhbmQgY29tbWl0dGVkIG5vdGhpbmcgbmV3IC0tXG4gICAqIGZvcmNlIGEgcmUtcmVuZGVyLiBXZSBhbHNvIHJlLXJlbmRlciB3aGVuIHRoZSBjb21wb3NpdGlvbiBvY2N1cnNcbiAgICogYXQgdGhlIGJlZ2lubmluZyBvZiBhIGxlYWYsIHRvIGVuc3VyZSB0aGF0IGlmIHRoZSBicm93c2VyIGhhc1xuICAgKiBjcmVhdGVkIGEgbmV3IHRleHQgbm9kZSBmb3IgdGhlIGNvbXBvc2l0aW9uLCB3ZSB3aWxsIGRpc2NhcmQgaXQuXG4gICAqXG4gICAqIFJlc2V0dGluZyBpbm5lckhUTUwgd2lsbCBtb3ZlIGZvY3VzIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGVkaXRvcixcbiAgICogc28gd2UgdXBkYXRlIHRvIGZvcmNlIGl0IGJhY2sgdG8gdGhlIGNvcnJlY3QgcGxhY2UuXG4gICAqL1xuICByZXNvbHZlQ29tcG9zaXRpb246IGZ1bmN0aW9uIHJlc29sdmVDb21wb3NpdGlvbihlZGl0b3IpIHtcbiAgICBpZiAoc3RpbGxDb21wb3NpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXNvbHZlZCA9IHRydWU7XG4gICAgdmFyIGNvbXBvc2VkQ2hhcnMgPSB0ZXh0SW5wdXREYXRhO1xuICAgIHRleHRJbnB1dERhdGEgPSAnJztcblxuICAgIHZhciBlZGl0b3JTdGF0ZSA9IEVkaXRvclN0YXRlLnNldChlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlLCB7XG4gICAgICBpbkNvbXBvc2l0aW9uTW9kZTogZmFsc2VcbiAgICB9KTtcblxuICAgIHZhciBjdXJyZW50U3R5bGUgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50SW5saW5lU3R5bGUoKTtcbiAgICB2YXIgZW50aXR5S2V5ID0gZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uKGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCksIGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpKTtcblxuICAgIHZhciBtdXN0UmVzZXQgPSAhY29tcG9zZWRDaGFycyB8fCBpc1NlbGVjdGlvbkF0TGVhZlN0YXJ0KGVkaXRvclN0YXRlKSB8fCBjdXJyZW50U3R5bGUuc2l6ZSA+IDAgfHwgZW50aXR5S2V5ICE9PSBudWxsO1xuXG4gICAgaWYgKG11c3RSZXNldCkge1xuICAgICAgZWRpdG9yLnJlc3RvcmVFZGl0b3JET00oKTtcbiAgICB9XG5cbiAgICBlZGl0b3IuZXhpdEN1cnJlbnRNb2RlKCk7XG5cbiAgICBpZiAoY29tcG9zZWRDaGFycykge1xuICAgICAgaWYgKERyYWZ0RmVhdHVyZUZsYWdzLmRyYWZ0X2hhbmRsZWJlZm9yZWlucHV0X2NvbXBvc2VkX3RleHQgJiYgZWRpdG9yLnByb3BzLmhhbmRsZUJlZm9yZUlucHV0ICYmIGlzRXZlbnRIYW5kbGVkKGVkaXRvci5wcm9wcy5oYW5kbGVCZWZvcmVJbnB1dChjb21wb3NlZENoYXJzLCBlZGl0b3JTdGF0ZSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIElmIGNoYXJhY3RlcnMgaGF2ZSBiZWVuIGNvbXBvc2VkLCByZS1yZW5kZXJpbmcgd2l0aCB0aGUgdXBkYXRlXG4gICAgICAvLyBpcyBzdWZmaWNpZW50IHRvIHJlc2V0IHRoZSBlZGl0b3IuXG4gICAgICB2YXIgY29udGVudFN0YXRlID0gRHJhZnRNb2RpZmllci5yZXBsYWNlVGV4dChlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKSwgY29tcG9zZWRDaGFycywgY3VycmVudFN0eWxlLCBlbnRpdHlLZXkpO1xuICAgICAgZWRpdG9yLnVwZGF0ZShFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBjb250ZW50U3RhdGUsICdpbnNlcnQtY2hhcmFjdGVycycpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobXVzdFJlc2V0KSB7XG4gICAgICBlZGl0b3IudXBkYXRlKEVkaXRvclN0YXRlLnNldChlZGl0b3JTdGF0ZSwge1xuICAgICAgICBuYXRpdmVseVJlbmRlcmVkQ29udGVudDogbnVsbCxcbiAgICAgICAgZm9yY2VTZWxlY3Rpb246IHRydWVcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRFZGl0b3JDb21wb3NpdGlvbkhhbmRsZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdEVkaXRvci5yZWFjdFxuICogQGZvcm1hdFxuICogXG4gKiBAcHJldmVudE11bmdlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIF9leHRlbmRzID0gX2Fzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXAgPSByZXF1aXJlKCcuL0RlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwJyk7XG52YXIgRGVmYXVsdERyYWZ0SW5saW5lU3R5bGUgPSByZXF1aXJlKCcuL0RlZmF1bHREcmFmdElubGluZVN0eWxlJyk7XG52YXIgRHJhZnRFZGl0b3JDb21wb3NpdGlvbkhhbmRsZXIgPSByZXF1aXJlKCcuL0RyYWZ0RWRpdG9yQ29tcG9zaXRpb25IYW5kbGVyJyk7XG52YXIgRHJhZnRFZGl0b3JDb250ZW50cyA9IHJlcXVpcmUoJy4vRHJhZnRFZGl0b3JDb250ZW50cy5yZWFjdCcpO1xudmFyIERyYWZ0RWRpdG9yRHJhZ0hhbmRsZXIgPSByZXF1aXJlKCcuL0RyYWZ0RWRpdG9yRHJhZ0hhbmRsZXInKTtcbnZhciBEcmFmdEVkaXRvckVkaXRIYW5kbGVyID0gcmVxdWlyZSgnLi9EcmFmdEVkaXRvckVkaXRIYW5kbGVyJyk7XG52YXIgRHJhZnRFZGl0b3JQbGFjZWhvbGRlciA9IHJlcXVpcmUoJy4vRHJhZnRFZGl0b3JQbGFjZWhvbGRlci5yZWFjdCcpO1xudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBSZWFjdERPTSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xudmFyIFNjcm9sbCA9IHJlcXVpcmUoJ2ZianMvbGliL1Njcm9sbCcpO1xudmFyIFN0eWxlID0gcmVxdWlyZSgnZmJqcy9saWIvU3R5bGUnKTtcbnZhciBVc2VyQWdlbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9Vc2VyQWdlbnQnKTtcblxudmFyIGN4ID0gcmVxdWlyZSgnZmJqcy9saWIvY3gnKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGdlbmVyYXRlUmFuZG9tS2V5ID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVJhbmRvbUtleScpO1xudmFyIGdldERlZmF1bHRLZXlCaW5kaW5nID0gcmVxdWlyZSgnLi9nZXREZWZhdWx0S2V5QmluZGluZycpO1xudmFyIGdldFNjcm9sbFBvc2l0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZ2V0U2Nyb2xsUG9zaXRpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBudWxsdGhyb3dzID0gcmVxdWlyZSgnZmJqcy9saWIvbnVsbHRocm93cycpO1xuXG52YXIgaXNJRSA9IFVzZXJBZ2VudC5pc0Jyb3dzZXIoJ0lFJyk7XG5cbi8vIElFIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBpbnB1dGAgZXZlbnQgb24gY29udGVudEVkaXRhYmxlLCBzbyB3ZSBjYW4ndFxuLy8gb2JzZXJ2ZSBzcGVsbGNoZWNrIGJlaGF2aW9yLlxudmFyIGFsbG93U3BlbGxDaGVjayA9ICFpc0lFO1xuXG4vLyBEZWZpbmUgYSBzZXQgb2YgaGFuZGxlciBvYmplY3RzIHRvIGNvcnJlc3BvbmQgdG8gZWFjaCBwb3NzaWJsZSBgbW9kZWBcbi8vIG9mIGVkaXRvciBiZWhhdmlvci5cbnZhciBoYW5kbGVyTWFwID0ge1xuICBlZGl0OiBEcmFmdEVkaXRvckVkaXRIYW5kbGVyLFxuICBjb21wb3NpdGU6IERyYWZ0RWRpdG9yQ29tcG9zaXRpb25IYW5kbGVyLFxuICBkcmFnOiBEcmFmdEVkaXRvckRyYWdIYW5kbGVyLFxuICBjdXQ6IG51bGwsXG4gIHJlbmRlcjogbnVsbFxufTtcblxuLyoqXG4gKiBgRHJhZnRFZGl0b3JgIGlzIHRoZSByb290IGVkaXRvciBjb21wb25lbnQuIEl0IGNvbXBvc2VzIGEgYGNvbnRlbnRFZGl0YWJsZWBcbiAqIGRpdiwgYW5kIHByb3ZpZGVzIGEgd2lkZSB2YXJpZXR5IG9mIHVzZWZ1bCBmdW5jdGlvbiBwcm9wcyBmb3IgbWFuYWdpbmcgdGhlXG4gKiBzdGF0ZSBvZiB0aGUgZWRpdG9yLiBTZWUgYERyYWZ0RWRpdG9yUHJvcHNgIGZvciBkZXRhaWxzLlxuICovXG52YXIgRHJhZnRFZGl0b3IgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRHJhZnRFZGl0b3IsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERyYWZ0RWRpdG9yKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyYWZ0RWRpdG9yKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuZm9jdXMgPSBmdW5jdGlvbiAoc2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgIHZhciBlZGl0b3JTdGF0ZSA9IF90aGlzLnByb3BzLmVkaXRvclN0YXRlO1xuXG4gICAgICB2YXIgYWxyZWFkeUhhc0ZvY3VzID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkuZ2V0SGFzRm9jdXMoKTtcbiAgICAgIHZhciBlZGl0b3JOb2RlID0gUmVhY3RET00uZmluZERPTU5vZGUoX3RoaXMuZWRpdG9yKTtcblxuICAgICAgaWYgKCFlZGl0b3JOb2RlKSB7XG4gICAgICAgIC8vIG9uY2UgaW4gYSB3aGlsZSBwZW9wbGUgY2FsbCAnZm9jdXMnIGluIGEgc2V0VGltZW91dCwgYW5kIHRoZSBub2RlIGhhc1xuICAgICAgICAvLyBiZWVuIGRlbGV0ZWQsIHNvIGl0IGNhbiBiZSBudWxsIGluIHRoYXQgY2FzZS5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2Nyb2xsUGFyZW50ID0gU3R5bGUuZ2V0U2Nyb2xsUGFyZW50KGVkaXRvck5vZGUpO1xuXG4gICAgICB2YXIgX3JlZiA9IHNjcm9sbFBvc2l0aW9uIHx8IGdldFNjcm9sbFBvc2l0aW9uKHNjcm9sbFBhcmVudCksXG4gICAgICAgICAgeCA9IF9yZWYueCxcbiAgICAgICAgICB5ID0gX3JlZi55O1xuXG4gICAgICAhKGVkaXRvck5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZWRpdG9yTm9kZSBpcyBub3QgYW4gSFRNTEVsZW1lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBlZGl0b3JOb2RlLmZvY3VzKCk7XG5cbiAgICAgIC8vIFJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICBpZiAoc2Nyb2xsUGFyZW50ID09PSB3aW5kb3cpIHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKHgsIHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgU2Nyb2xsLnNldFRvcChzY3JvbGxQYXJlbnQsIHkpO1xuICAgICAgfVxuXG4gICAgICAvLyBPbiBDaHJvbWUgYW5kIFNhZmFyaSwgY2FsbGluZyBmb2N1cyBvbiBjb250ZW50ZWRpdGFibGUgZm9jdXNlcyB0aGVcbiAgICAgIC8vIGN1cnNvciBhdCB0aGUgZmlyc3QgY2hhcmFjdGVyLiBUaGlzIGlzIHNvbWV0aGluZyB5b3UgZG9uJ3QgZXhwZWN0IHdoZW5cbiAgICAgIC8vIHlvdSdyZSBjbGlja2luZyBvbiBhbiBpbnB1dCBlbGVtZW50IGJ1dCBub3QgZGlyZWN0bHkgb24gYSBjaGFyYWN0ZXIuXG4gICAgICAvLyBQdXQgdGhlIGN1cnNvciBiYWNrIHdoZXJlIGl0IHdhcyBiZWZvcmUgdGhlIGJsdXIuXG4gICAgICBpZiAoIWFscmVhZHlIYXNGb2N1cykge1xuICAgICAgICBfdGhpcy51cGRhdGUoRWRpdG9yU3RhdGUuZm9yY2VTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZWRpdG9yTm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKF90aGlzLmVkaXRvcik7XG4gICAgICAhKGVkaXRvck5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZWRpdG9yTm9kZSBpcyBub3QgYW4gSFRNTEVsZW1lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBlZGl0b3JOb2RlLmJsdXIoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0TW9kZSA9IGZ1bmN0aW9uIChtb2RlKSB7XG4gICAgICBfdGhpcy5faGFuZGxlciA9IGhhbmRsZXJNYXBbbW9kZV07XG4gICAgfTtcblxuICAgIF90aGlzLmV4aXRDdXJyZW50TW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldE1vZGUoJ2VkaXQnKTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVzdG9yZUVkaXRvckRPTSA9IGZ1bmN0aW9uIChzY3JvbGxQb3NpdGlvbikge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBjb250ZW50c0tleTogX3RoaXMuc3RhdGUuY29udGVudHNLZXkgKyAxIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuZm9jdXMoc2Nyb2xsUG9zaXRpb24pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnNldENsaXBib2FyZCA9IGZ1bmN0aW9uIChjbGlwYm9hcmQpIHtcbiAgICAgIF90aGlzLl9jbGlwYm9hcmQgPSBjbGlwYm9hcmQ7XG4gICAgfTtcblxuICAgIF90aGlzLmdldENsaXBib2FyZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5fY2xpcGJvYXJkO1xuICAgIH07XG5cbiAgICBfdGhpcy51cGRhdGUgPSBmdW5jdGlvbiAoZWRpdG9yU3RhdGUpIHtcbiAgICAgIF90aGlzLl9sYXRlc3RFZGl0b3JTdGF0ZSA9IGVkaXRvclN0YXRlO1xuICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UoZWRpdG9yU3RhdGUpO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbkRyYWdFbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLl9kcmFnQ291bnQrKztcbiAgICB9O1xuXG4gICAgX3RoaXMub25EcmFnTGVhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5fZHJhZ0NvdW50LS07XG4gICAgICBpZiAoX3RoaXMuX2RyYWdDb3VudCA9PT0gMCkge1xuICAgICAgICBfdGhpcy5leGl0Q3VycmVudE1vZGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuX2Jsb2NrU2VsZWN0RXZlbnRzID0gZmFsc2U7XG4gICAgX3RoaXMuX2NsaXBib2FyZCA9IG51bGw7XG4gICAgX3RoaXMuX2hhbmRsZXIgPSBudWxsO1xuICAgIF90aGlzLl9kcmFnQ291bnQgPSAwO1xuICAgIF90aGlzLl9lZGl0b3JLZXkgPSBwcm9wcy5lZGl0b3JLZXkgfHwgZ2VuZXJhdGVSYW5kb21LZXkoKTtcbiAgICBfdGhpcy5fcGxhY2Vob2xkZXJBY2Nlc3NpYmlsaXR5SUQgPSAncGxhY2Vob2xkZXItJyArIF90aGlzLl9lZGl0b3JLZXk7XG4gICAgX3RoaXMuX2xhdGVzdEVkaXRvclN0YXRlID0gcHJvcHMuZWRpdG9yU3RhdGU7XG4gICAgX3RoaXMuX2xhdGVzdENvbW1pdHRlZEVkaXRvclN0YXRlID0gcHJvcHMuZWRpdG9yU3RhdGU7XG5cbiAgICBfdGhpcy5fb25CZWZvcmVJbnB1dCA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uQmVmb3JlSW5wdXQnKTtcbiAgICBfdGhpcy5fb25CbHVyID0gX3RoaXMuX2J1aWxkSGFuZGxlcignb25CbHVyJyk7XG4gICAgX3RoaXMuX29uQ2hhcmFjdGVyRGF0YSA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uQ2hhcmFjdGVyRGF0YScpO1xuICAgIF90aGlzLl9vbkNvbXBvc2l0aW9uRW5kID0gX3RoaXMuX2J1aWxkSGFuZGxlcignb25Db21wb3NpdGlvbkVuZCcpO1xuICAgIF90aGlzLl9vbkNvbXBvc2l0aW9uU3RhcnQgPSBfdGhpcy5fYnVpbGRIYW5kbGVyKCdvbkNvbXBvc2l0aW9uU3RhcnQnKTtcbiAgICBfdGhpcy5fb25Db3B5ID0gX3RoaXMuX2J1aWxkSGFuZGxlcignb25Db3B5Jyk7XG4gICAgX3RoaXMuX29uQ3V0ID0gX3RoaXMuX2J1aWxkSGFuZGxlcignb25DdXQnKTtcbiAgICBfdGhpcy5fb25EcmFnRW5kID0gX3RoaXMuX2J1aWxkSGFuZGxlcignb25EcmFnRW5kJyk7XG4gICAgX3RoaXMuX29uRHJhZ092ZXIgPSBfdGhpcy5fYnVpbGRIYW5kbGVyKCdvbkRyYWdPdmVyJyk7XG4gICAgX3RoaXMuX29uRHJhZ1N0YXJ0ID0gX3RoaXMuX2J1aWxkSGFuZGxlcignb25EcmFnU3RhcnQnKTtcbiAgICBfdGhpcy5fb25Ecm9wID0gX3RoaXMuX2J1aWxkSGFuZGxlcignb25Ecm9wJyk7XG4gICAgX3RoaXMuX29uSW5wdXQgPSBfdGhpcy5fYnVpbGRIYW5kbGVyKCdvbklucHV0Jyk7XG4gICAgX3RoaXMuX29uRm9jdXMgPSBfdGhpcy5fYnVpbGRIYW5kbGVyKCdvbkZvY3VzJyk7XG4gICAgX3RoaXMuX29uS2V5RG93biA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uS2V5RG93bicpO1xuICAgIF90aGlzLl9vbktleVByZXNzID0gX3RoaXMuX2J1aWxkSGFuZGxlcignb25LZXlQcmVzcycpO1xuICAgIF90aGlzLl9vbktleVVwID0gX3RoaXMuX2J1aWxkSGFuZGxlcignb25LZXlVcCcpO1xuICAgIF90aGlzLl9vbk1vdXNlRG93biA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uTW91c2VEb3duJyk7XG4gICAgX3RoaXMuX29uTW91c2VVcCA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uTW91c2VVcCcpO1xuICAgIF90aGlzLl9vblBhc3RlID0gX3RoaXMuX2J1aWxkSGFuZGxlcignb25QYXN0ZScpO1xuICAgIF90aGlzLl9vblNlbGVjdCA9IF90aGlzLl9idWlsZEhhbmRsZXIoJ29uU2VsZWN0Jyk7XG5cbiAgICBfdGhpcy5nZXRFZGl0b3JLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuX2VkaXRvcktleTtcbiAgICB9O1xuXG4gICAgLy8gU2VlIGByZXN0b3JlRWRpdG9yRE9NKClgLlxuICAgIF90aGlzLnN0YXRlID0geyBjb250ZW50c0tleTogMCB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZCBhIG1ldGhvZCB0aGF0IHdpbGwgcGFzcyB0aGUgZXZlbnQgdG8gdGhlIHNwZWNpZmllZCBoYW5kbGVyIG1ldGhvZC5cbiAgICogVGhpcyBhbGxvd3MgdXMgdG8gbG9vayB1cCB0aGUgY29ycmVjdCBoYW5kbGVyIGZ1bmN0aW9uIGZvciB0aGUgY3VycmVudFxuICAgKiBlZGl0b3IgbW9kZSwgaWYgYW55IGhhcyBiZWVuIHNwZWNpZmllZC5cbiAgICovXG5cblxuICAvKipcbiAgICogRGVmaW5lIHByb3hpZXMgdGhhdCBjYW4gcm91dGUgZXZlbnRzIHRvIHRoZSBjdXJyZW50IGhhbmRsZXIuXG4gICAqL1xuXG5cbiAgRHJhZnRFZGl0b3IucHJvdG90eXBlLl9idWlsZEhhbmRsZXIgPSBmdW5jdGlvbiBfYnVpbGRIYW5kbGVyKGV2ZW50TmFtZSkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoIV90aGlzMi5wcm9wcy5yZWFkT25seSkge1xuICAgICAgICB2YXIgbWV0aG9kID0gX3RoaXMyLl9oYW5kbGVyICYmIF90aGlzMi5faGFuZGxlcltldmVudE5hbWVdO1xuICAgICAgICBtZXRob2QgJiYgbWV0aG9kKF90aGlzMiwgZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBEcmFmdEVkaXRvci5wcm90b3R5cGUuX3Nob3dQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIF9zaG93UGxhY2Vob2xkZXIoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5wcm9wcy5wbGFjZWhvbGRlciAmJiAhdGhpcy5wcm9wcy5lZGl0b3JTdGF0ZS5pc0luQ29tcG9zaXRpb25Nb2RlKCkgJiYgIXRoaXMucHJvcHMuZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKS5oYXNUZXh0KCk7XG4gIH07XG5cbiAgRHJhZnRFZGl0b3IucHJvdG90eXBlLl9yZW5kZXJQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIF9yZW5kZXJQbGFjZWhvbGRlcigpIHtcbiAgICBpZiAodGhpcy5fc2hvd1BsYWNlaG9sZGVyKCkpIHtcbiAgICAgIHZhciBwbGFjZUhvbGRlclByb3BzID0ge1xuICAgICAgICB0ZXh0OiBudWxsdGhyb3dzKHRoaXMucHJvcHMucGxhY2Vob2xkZXIpLFxuICAgICAgICBlZGl0b3JTdGF0ZTogdGhpcy5wcm9wcy5lZGl0b3JTdGF0ZSxcbiAgICAgICAgdGV4dEFsaWdubWVudDogdGhpcy5wcm9wcy50ZXh0QWxpZ25tZW50LFxuICAgICAgICBhY2Nlc3NpYmlsaXR5SUQ6IHRoaXMuX3BsYWNlaG9sZGVyQWNjZXNzaWJpbGl0eUlEXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChEcmFmdEVkaXRvclBsYWNlaG9sZGVyLCBwbGFjZUhvbGRlclByb3BzKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgRHJhZnRFZGl0b3IucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBibG9ja1JlbmRlck1hcCA9IF9wcm9wcy5ibG9ja1JlbmRlck1hcCxcbiAgICAgICAgYmxvY2tSZW5kZXJlckZuID0gX3Byb3BzLmJsb2NrUmVuZGVyZXJGbixcbiAgICAgICAgYmxvY2tTdHlsZUZuID0gX3Byb3BzLmJsb2NrU3R5bGVGbixcbiAgICAgICAgY3VzdG9tU3R5bGVGbiA9IF9wcm9wcy5jdXN0b21TdHlsZUZuLFxuICAgICAgICBjdXN0b21TdHlsZU1hcCA9IF9wcm9wcy5jdXN0b21TdHlsZU1hcCxcbiAgICAgICAgZWRpdG9yU3RhdGUgPSBfcHJvcHMuZWRpdG9yU3RhdGUsXG4gICAgICAgIHJlYWRPbmx5ID0gX3Byb3BzLnJlYWRPbmx5LFxuICAgICAgICB0ZXh0QWxpZ25tZW50ID0gX3Byb3BzLnRleHRBbGlnbm1lbnQsXG4gICAgICAgIHRleHREaXJlY3Rpb25hbGl0eSA9IF9wcm9wcy50ZXh0RGlyZWN0aW9uYWxpdHk7XG5cblxuICAgIHZhciByb290Q2xhc3MgPSBjeCh7XG4gICAgICAnRHJhZnRFZGl0b3Ivcm9vdCc6IHRydWUsXG4gICAgICAnRHJhZnRFZGl0b3IvYWxpZ25MZWZ0JzogdGV4dEFsaWdubWVudCA9PT0gJ2xlZnQnLFxuICAgICAgJ0RyYWZ0RWRpdG9yL2FsaWduUmlnaHQnOiB0ZXh0QWxpZ25tZW50ID09PSAncmlnaHQnLFxuICAgICAgJ0RyYWZ0RWRpdG9yL2FsaWduQ2VudGVyJzogdGV4dEFsaWdubWVudCA9PT0gJ2NlbnRlcidcbiAgICB9KTtcblxuICAgIHZhciBjb250ZW50U3R5bGUgPSB7XG4gICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAvLyBmaXggcGFyZW50LWRyYWdnYWJsZSBTYWZhcmkgYnVnLiAjMTMyNlxuICAgICAgdXNlclNlbGVjdDogJ3RleHQnLFxuICAgICAgV2Via2l0VXNlclNlbGVjdDogJ3RleHQnLFxuICAgICAgd2hpdGVTcGFjZTogJ3ByZS13cmFwJyxcbiAgICAgIHdvcmRXcmFwOiAnYnJlYWstd29yZCdcbiAgICB9O1xuXG4gICAgLy8gVGhlIGFyaWEtZXhwYW5kZWQgYW5kIGFyaWEtaGFzcG9wdXAgcHJvcGVydGllcyBzaG91bGQgb25seSBiZSByZW5kZXJlZFxuICAgIC8vIGZvciBhIGNvbWJvYm94LlxuICAgIHZhciBhcmlhUm9sZSA9IHRoaXMucHJvcHMucm9sZSB8fCAndGV4dGJveCc7XG4gICAgdmFyIGFyaWFFeHBhbmRlZCA9IGFyaWFSb2xlID09PSAnY29tYm9ib3gnID8gISF0aGlzLnByb3BzLmFyaWFFeHBhbmRlZCA6IG51bGw7XG5cbiAgICB2YXIgZWRpdG9yQ29udGVudHNQcm9wcyA9IHtcbiAgICAgIGJsb2NrUmVuZGVyTWFwOiBibG9ja1JlbmRlck1hcCxcbiAgICAgIGJsb2NrUmVuZGVyZXJGbjogYmxvY2tSZW5kZXJlckZuLFxuICAgICAgYmxvY2tTdHlsZUZuOiBibG9ja1N0eWxlRm4sXG4gICAgICBjdXN0b21TdHlsZU1hcDogX2V4dGVuZHMoe30sIERlZmF1bHREcmFmdElubGluZVN0eWxlLCBjdXN0b21TdHlsZU1hcCksXG4gICAgICBjdXN0b21TdHlsZUZuOiBjdXN0b21TdHlsZUZuLFxuICAgICAgZWRpdG9yS2V5OiB0aGlzLl9lZGl0b3JLZXksXG4gICAgICBlZGl0b3JTdGF0ZTogZWRpdG9yU3RhdGUsXG4gICAgICBrZXk6ICdjb250ZW50cycgKyB0aGlzLnN0YXRlLmNvbnRlbnRzS2V5LFxuICAgICAgdGV4dERpcmVjdGlvbmFsaXR5OiB0ZXh0RGlyZWN0aW9uYWxpdHlcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3NOYW1lOiByb290Q2xhc3MgfSxcbiAgICAgIHRoaXMuX3JlbmRlclBsYWNlaG9sZGVyKCksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogY3goJ0RyYWZ0RWRpdG9yL2VkaXRvckNvbnRhaW5lcicpLFxuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYzKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLmVkaXRvckNvbnRhaW5lciA9IF9yZWYzO1xuICAgICAgICAgIH0gfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JzogcmVhZE9ubHkgPyBudWxsIDogdGhpcy5wcm9wcy5hcmlhQWN0aXZlRGVzY2VuZGFudElELFxuICAgICAgICAgICAgJ2FyaWEtYXV0b2NvbXBsZXRlJzogcmVhZE9ubHkgPyBudWxsIDogdGhpcy5wcm9wcy5hcmlhQXV0b0NvbXBsZXRlLFxuICAgICAgICAgICAgJ2FyaWEtY29udHJvbHMnOiByZWFkT25seSA/IG51bGwgOiB0aGlzLnByb3BzLmFyaWFDb250cm9scyxcbiAgICAgICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogdGhpcy5wcm9wcy5hcmlhRGVzY3JpYmVkQnkgfHwgdGhpcy5fcGxhY2Vob2xkZXJBY2Nlc3NpYmlsaXR5SUQsXG4gICAgICAgICAgICAnYXJpYS1leHBhbmRlZCc6IHJlYWRPbmx5ID8gbnVsbCA6IGFyaWFFeHBhbmRlZCxcbiAgICAgICAgICAgICdhcmlhLWxhYmVsJzogdGhpcy5wcm9wcy5hcmlhTGFiZWwsXG4gICAgICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogdGhpcy5wcm9wcy5hcmlhTGFiZWxsZWRCeSxcbiAgICAgICAgICAgICdhcmlhLW11bHRpbGluZSc6IHRoaXMucHJvcHMuYXJpYU11bHRpbGluZSxcbiAgICAgICAgICAgIGF1dG9DYXBpdGFsaXplOiB0aGlzLnByb3BzLmF1dG9DYXBpdGFsaXplLFxuICAgICAgICAgICAgYXV0b0NvbXBsZXRlOiB0aGlzLnByb3BzLmF1dG9Db21wbGV0ZSxcbiAgICAgICAgICAgIGF1dG9Db3JyZWN0OiB0aGlzLnByb3BzLmF1dG9Db3JyZWN0LFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjeCh7XG4gICAgICAgICAgICAgIC8vIENocm9tZSdzIGJ1aWx0LWluIHRyYW5zbGF0aW9uIGZlYXR1cmUgbXV0YXRlcyB0aGUgRE9NIGluIHdheXNcbiAgICAgICAgICAgICAgLy8gdGhhdCBEcmFmdCBkb2Vzbid0IGV4cGVjdCAoZXg6IGFkZGluZyA8Zm9udD4gdGFncyBpbnNpZGVcbiAgICAgICAgICAgICAgLy8gRHJhZnRFZGl0b3JMZWFmIHNwYW5zKSBhbmQgY2F1c2VzIHByb2JsZW1zLiBXZSBhZGQgbm90cmFuc2xhdGVcbiAgICAgICAgICAgICAgLy8gaGVyZSB3aGljaCBtYWtlcyBpdHMgYXV0b3RyYW5zbGF0aW9uIHNraXAgb3ZlciB0aGlzIHN1YnRyZWUuXG4gICAgICAgICAgICAgIG5vdHJhbnNsYXRlOiAhcmVhZE9ubHksXG4gICAgICAgICAgICAgICdwdWJsaWMvRHJhZnRFZGl0b3IvY29udGVudCc6IHRydWVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY29udGVudEVkaXRhYmxlOiAhcmVhZE9ubHksXG4gICAgICAgICAgICAnZGF0YS10ZXN0aWQnOiB0aGlzLnByb3BzLndlYkRyaXZlclRlc3RJRCxcbiAgICAgICAgICAgIG9uQmVmb3JlSW5wdXQ6IHRoaXMuX29uQmVmb3JlSW5wdXQsXG4gICAgICAgICAgICBvbkJsdXI6IHRoaXMuX29uQmx1cixcbiAgICAgICAgICAgIG9uQ29tcG9zaXRpb25FbmQ6IHRoaXMuX29uQ29tcG9zaXRpb25FbmQsXG4gICAgICAgICAgICBvbkNvbXBvc2l0aW9uU3RhcnQ6IHRoaXMuX29uQ29tcG9zaXRpb25TdGFydCxcbiAgICAgICAgICAgIG9uQ29weTogdGhpcy5fb25Db3B5LFxuICAgICAgICAgICAgb25DdXQ6IHRoaXMuX29uQ3V0LFxuICAgICAgICAgICAgb25EcmFnRW5kOiB0aGlzLl9vbkRyYWdFbmQsXG4gICAgICAgICAgICBvbkRyYWdFbnRlcjogdGhpcy5vbkRyYWdFbnRlcixcbiAgICAgICAgICAgIG9uRHJhZ0xlYXZlOiB0aGlzLm9uRHJhZ0xlYXZlLFxuICAgICAgICAgICAgb25EcmFnT3ZlcjogdGhpcy5fb25EcmFnT3ZlcixcbiAgICAgICAgICAgIG9uRHJhZ1N0YXJ0OiB0aGlzLl9vbkRyYWdTdGFydCxcbiAgICAgICAgICAgIG9uRHJvcDogdGhpcy5fb25Ecm9wLFxuICAgICAgICAgICAgb25Gb2N1czogdGhpcy5fb25Gb2N1cyxcbiAgICAgICAgICAgIG9uSW5wdXQ6IHRoaXMuX29uSW5wdXQsXG4gICAgICAgICAgICBvbktleURvd246IHRoaXMuX29uS2V5RG93bixcbiAgICAgICAgICAgIG9uS2V5UHJlc3M6IHRoaXMuX29uS2V5UHJlc3MsXG4gICAgICAgICAgICBvbktleVVwOiB0aGlzLl9vbktleVVwLFxuICAgICAgICAgICAgb25Nb3VzZVVwOiB0aGlzLl9vbk1vdXNlVXAsXG4gICAgICAgICAgICBvblBhc3RlOiB0aGlzLl9vblBhc3RlLFxuICAgICAgICAgICAgb25TZWxlY3Q6IHRoaXMuX29uU2VsZWN0LFxuICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoX3JlZjIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5lZGl0b3IgPSBfcmVmMjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByb2xlOiByZWFkT25seSA/IG51bGwgOiBhcmlhUm9sZSxcbiAgICAgICAgICAgIHNwZWxsQ2hlY2s6IGFsbG93U3BlbGxDaGVjayAmJiB0aGlzLnByb3BzLnNwZWxsQ2hlY2ssXG4gICAgICAgICAgICBzdHlsZTogY29udGVudFN0eWxlLFxuICAgICAgICAgICAgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nOiB0cnVlLFxuICAgICAgICAgICAgdGFiSW5kZXg6IHRoaXMucHJvcHMudGFiSW5kZXggfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERyYWZ0RWRpdG9yQ29udGVudHMsIGVkaXRvckNvbnRlbnRzUHJvcHMpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIERyYWZ0RWRpdG9yLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuc2V0TW9kZSgnZWRpdCcpO1xuXG4gICAgLyoqXG4gICAgICogSUUgaGFzIGEgaGFyZGNvZGVkIFwiZmVhdHVyZVwiIHRoYXQgYXR0ZW1wdHMgdG8gY29udmVydCBsaW5rIHRleHQgaW50b1xuICAgICAqIGFuY2hvcnMgaW4gY29udGVudEVkaXRhYmxlIERPTS4gVGhpcyBicmVha3MgdGhlIGVkaXRvcidzIGV4cGVjdGF0aW9ucyBvZlxuICAgICAqIHRoZSBET00sIGFuZCBjb250cm9sIGlzIGxvc3QuIERpc2FibGUgaXQgdG8gbWFrZSBJRSBiZWhhdmUuXG4gICAgICogU2VlOiBodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZWludGVybmFscy9hcmNoaXZlLzIwMTAvMDkvMTUvXG4gICAgICogaWU5LWJldGEtbWlub3ItY2hhbmdlLWxpc3QuYXNweFxuICAgICAqL1xuICAgIGlmIChpc0lFKSB7XG4gICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnQXV0b1VybERldGVjdCcsIGZhbHNlLCBmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBQcmV2ZW50IHNlbGVjdGlvbiBldmVudHMgZnJvbSBhZmZlY3RpbmcgdGhlIGN1cnJlbnQgZWRpdG9yIHN0YXRlLiBUaGlzXG4gICAqIGlzIG1vc3RseSBpbnRlbmRlZCB0byBkZWZlbmQgYWdhaW5zdCBJRSwgd2hpY2ggZmlyZXMgb2ZmIGBzZWxlY3Rpb25jaGFuZ2VgXG4gICAqIGV2ZW50cyByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBzZXQgdmlhIHRoZSBicm93c2VyIG9yXG4gICAqIHByb2dyYW1tYXRpY2FsbHkuIFdlIG9ubHkgY2FyZSBhYm91dCBzZWxlY3Rpb24gZXZlbnRzIHRoYXQgb2NjdXIgYmVjYXVzZVxuICAgKiBvZiBicm93c2VyIGludGVyYWN0aW9uLCBub3QgcmUtcmVuZGVycyBhbmQgZm9yY2VkIHNlbGVjdGlvbnMuXG4gICAqL1xuXG5cbiAgRHJhZnRFZGl0b3IucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcykge1xuICAgIHRoaXMuX2Jsb2NrU2VsZWN0RXZlbnRzID0gdHJ1ZTtcbiAgICB0aGlzLl9sYXRlc3RFZGl0b3JTdGF0ZSA9IG5leHRQcm9wcy5lZGl0b3JTdGF0ZTtcbiAgfTtcblxuICBEcmFmdEVkaXRvci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMuX2Jsb2NrU2VsZWN0RXZlbnRzID0gZmFsc2U7XG4gICAgdGhpcy5fbGF0ZXN0Q29tbWl0dGVkRWRpdG9yU3RhdGUgPSB0aGlzLnByb3BzLmVkaXRvclN0YXRlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBVc2VkIHZpYSBgdGhpcy5mb2N1cygpYC5cbiAgICpcbiAgICogRm9yY2UgZm9jdXMgYmFjayBvbnRvIHRoZSBlZGl0b3Igbm9kZS5cbiAgICpcbiAgICogV2UgYXR0ZW1wdCB0byBwcmVzZXJ2ZSBzY3JvbGwgcG9zaXRpb24gd2hlbiBmb2N1c2luZy4gWW91IGNhbiBhbHNvIHBhc3NcbiAgICogYSBzcGVjaWZpZWQgc2Nyb2xsIHBvc2l0aW9uIChmb3IgY2FzZXMgbGlrZSBgY3V0YCBiZWhhdmlvciB3aGVyZSBpdCBzaG91bGRcbiAgICogYmUgcmVzdG9yZWQgdG8gYSBrbm93biBwb3NpdGlvbikuXG4gICAqL1xuXG5cbiAgLyoqXG4gICAqIFVzZWQgdmlhIGB0aGlzLnNldE1vZGUoLi4uKWAuXG4gICAqXG4gICAqIFNldCB0aGUgYmVoYXZpb3IgbW9kZSBmb3IgdGhlIGVkaXRvciBjb21wb25lbnQuIFRoaXMgc3dpdGNoZXMgdGhlIGN1cnJlbnRcbiAgICogaGFuZGxlciBtb2R1bGUgdG8gZW5zdXJlIHRoYXQgRE9NIGV2ZW50cyBhcmUgbWFuYWdlZCBhcHByb3ByaWF0ZWx5IGZvclxuICAgKiB0aGUgYWN0aXZlIG1vZGUuXG4gICAqL1xuXG5cbiAgLyoqXG4gICAqIFVzZWQgdmlhIGB0aGlzLnJlc3RvcmVFZGl0b3JET00oKWAuXG4gICAqXG4gICAqIEZvcmNlIGEgY29tcGxldGUgcmUtcmVuZGVyIG9mIHRoZSBEcmFmdEVkaXRvckNvbnRlbnRzIGJhc2VkIG9uIHRoZSBjdXJyZW50XG4gICAqIEVkaXRvclN0YXRlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHdlIGtub3cgd2UgYXJlIGdvaW5nIHRvIGxvc2UgY29udHJvbCBvZlxuICAgKiB0aGUgRE9NIHN0YXRlIChjdXQgY29tbWFuZCwgSU1FKSBhbmQgd2Ugd2FudCB0byBtYWtlIHN1cmUgdGhhdFxuICAgKiByZWNvbmNpbGlhdGlvbiBvY2N1cnMgb24gYSB2ZXJzaW9uIG9mIHRoZSBET00gdGhhdCBpcyBzeW5jaHJvbml6ZWQgd2l0aFxuICAgKiBvdXIgRWRpdG9yU3RhdGUuXG4gICAqL1xuXG5cbiAgLyoqXG4gICAqIFVzZWQgdmlhIGB0aGlzLnNldENsaXBib2FyZCguLi4pYC5cbiAgICpcbiAgICogU2V0IHRoZSBjbGlwYm9hcmQgc3RhdGUgZm9yIGEgY3V0L2NvcHkgZXZlbnQuXG4gICAqL1xuXG5cbiAgLyoqXG4gICAqIFVzZWQgdmlhIGB0aGlzLmdldENsaXBib2FyZCgpYC5cbiAgICpcbiAgICogUmV0cmlldmUgdGhlIGNsaXBib2FyZCBzdGF0ZSBmb3IgYSBjdXQvY29weSBldmVudC5cbiAgICovXG5cblxuICAvKipcbiAgICogVXNlZCB2aWEgYHRoaXMudXBkYXRlKC4uLilgLlxuICAgKlxuICAgKiBQcm9wYWdhdGUgYSBuZXcgYEVkaXRvclN0YXRlYCBvYmplY3QgdG8gaGlnaGVyLWxldmVsIGNvbXBvbmVudHMuIFRoaXMgaXNcbiAgICogdGhlIG1ldGhvZCBieSB3aGljaCBldmVudCBoYW5kbGVycyBpbmZvcm0gdGhlIGBEcmFmdEVkaXRvcmAgY29tcG9uZW50IG9mXG4gICAqIHN0YXRlIGNoYW5nZXMuIEEgY29tcG9uZW50IHRoYXQgY29tcG9zZXMgYSBgRHJhZnRFZGl0b3JgICoqbXVzdCoqIHByb3ZpZGVcbiAgICogYW4gYG9uQ2hhbmdlYCBwcm9wIHRvIHJlY2VpdmUgc3RhdGUgdXBkYXRlcyBwYXNzZWQgYWxvbmcgZnJvbSB0aGlzXG4gICAqIGZ1bmN0aW9uLlxuICAgKi9cblxuXG4gIC8qKlxuICAgKiBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYG9uRHJhZ0xlYXZlKClgLCBieSBjb3VudGluZyB0aGUgbnVtYmVyIG9mIHRpbWVzXG4gICAqIGEgZHJhZ2dlZCBlbGVtZW50IGVudGVycyBhbmQgbGVhdmVzIHRoZSBlZGl0b3IgKG9yIGFueSBvZiBpdHMgY2hpbGRyZW4pLFxuICAgKiB0byBkZXRlcm1pbmUgd2hlbiB0aGUgZHJhZ2dlZCBlbGVtZW50IGFic29sdXRlbHkgbGVhdmVzIHRoZSBlZGl0b3IuXG4gICAqL1xuXG5cbiAgLyoqXG4gICAqIFNlZSBgb25EcmFnRW50ZXIoKWAuXG4gICAqL1xuXG5cbiAgcmV0dXJuIERyYWZ0RWRpdG9yO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5EcmFmdEVkaXRvci5kZWZhdWx0UHJvcHMgPSB7XG4gIGJsb2NrUmVuZGVyTWFwOiBEZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcCxcbiAgYmxvY2tSZW5kZXJlckZuOiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCxcbiAgYmxvY2tTdHlsZUZuOiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zKCcnKSxcbiAga2V5QmluZGluZ0ZuOiBnZXREZWZhdWx0S2V5QmluZGluZyxcbiAgcmVhZE9ubHk6IGZhbHNlLFxuICBzcGVsbENoZWNrOiBmYWxzZSxcbiAgc3RyaXBQYXN0ZWRTdHlsZXM6IGZhbHNlXG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRFZGl0b3I7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDb21wb3NpdGVEcmFmdERlY29yYXRvclxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbnZhciBMaXN0ID0gSW1tdXRhYmxlLkxpc3Q7XG5cblxudmFyIERFTElNSVRFUiA9ICcuJztcblxuLyoqXG4gKiBBIENvbXBvc2l0ZURyYWZ0RGVjb3JhdG9yIHRyYXZlcnNlcyB0aHJvdWdoIGEgbGlzdCBvZiBEcmFmdERlY29yYXRvclxuICogaW5zdGFuY2VzIHRvIGlkZW50aWZ5IHNlY3Rpb25zIG9mIGEgQ29udGVudEJsb2NrIHRoYXQgc2hvdWxkIGJlIHJlbmRlcmVkXG4gKiBpbiBhIFwiZGVjb3JhdGVkXCIgbWFubmVyLiBGb3IgZXhhbXBsZSwgaGFzaHRhZ3MsIG1lbnRpb25zLCBhbmQgbGlua3MgbWF5XG4gKiBiZSBpbnRlbmRlZCB0byBzdGFuZCBvdXQgdmlzdWFsbHksIGJlIHJlbmRlcmVkIGFzIGFuY2hvcnMsIGV0Yy5cbiAqXG4gKiBUaGUgbGlzdCBvZiBkZWNvcmF0b3JzIHN1cHBsaWVkIHRvIHRoZSBjb25zdHJ1Y3RvciB3aWxsIGJlIHVzZWQgaW4gdGhlXG4gKiBvcmRlciB0aGV5IGFyZSBwcm92aWRlZC4gVGhpcyBhbGxvd3MgdGhlIGNhbGxlciB0byBzcGVjaWZ5IGEgcHJpb3JpdHkgZm9yXG4gKiBzdHJpbmcgbWF0Y2hpbmcsIGluIGNhc2Ugb2YgbWF0Y2ggY29sbGlzaW9ucyBhbW9uZyBkZWNvcmF0b3JzLlxuICpcbiAqIEZvciBpbnN0YW5jZSwgSSBtYXkgaGF2ZSBhIGxpbmsgd2l0aCBhIGAjYCBpbiBpdHMgdGV4dC4gVGhvdWdoIHRoaXMgc2VjdGlvblxuICogb2YgdGV4dCBtYXkgbWF0Y2ggb3VyIGhhc2h0YWcgZGVjb3JhdG9yLCBpdCBzaG91bGQgbm90IGJlIHRyZWF0ZWQgYXMgYVxuICogaGFzaHRhZy4gSSBzaG91bGQgdGhlcmVmb3JlIGxpc3QgbXkgbGluayBEcmFmdERlY29yYXRvclxuICogYmVmb3JlIG15IGhhc2h0YWcgRHJhZnREZWNvcmF0b3Igd2hlbiBjb25zdHJ1Y3RpbmcgdGhpcyBjb21wb3NpdGVcbiAqIGRlY29yYXRvciBpbnN0YW5jZS5cbiAqXG4gKiBUaHVzLCB3aGVuIGEgY29sbGlzaW9uIGxpa2UgdGhpcyBpcyBlbmNvdW50ZXJlZCwgdGhlIGVhcmxpZXIgbWF0Y2ggaXNcbiAqIHByZXNlcnZlZCBhbmQgdGhlIG5ldyBtYXRjaCBpcyBkaXNjYXJkZWQuXG4gKi9cblxudmFyIENvbXBvc2l0ZURyYWZ0RGVjb3JhdG9yID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb21wb3NpdGVEcmFmdERlY29yYXRvcihkZWNvcmF0b3JzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbXBvc2l0ZURyYWZ0RGVjb3JhdG9yKTtcblxuICAgIC8vIENvcHkgdGhlIGRlY29yYXRvciBhcnJheSwgc2luY2Ugd2UgdXNlIHRoaXMgYXJyYXkgb3JkZXIgdG8gZGV0ZXJtaW5lXG4gICAgLy8gcHJlY2VkZW5jZSBvZiBkZWNvcmF0aW9uIG1hdGNoaW5nLiBJZiB0aGUgYXJyYXkgaXMgbXV0YXRlZCBleHRlcm5hbGx5LFxuICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gYmUgYWZmZWN0ZWQgaGVyZS5cbiAgICB0aGlzLl9kZWNvcmF0b3JzID0gZGVjb3JhdG9ycy5zbGljZSgpO1xuICB9XG5cbiAgQ29tcG9zaXRlRHJhZnREZWNvcmF0b3IucHJvdG90eXBlLmdldERlY29yYXRpb25zID0gZnVuY3Rpb24gZ2V0RGVjb3JhdGlvbnMoYmxvY2ssIGNvbnRlbnRTdGF0ZSkge1xuICAgIHZhciBkZWNvcmF0aW9ucyA9IEFycmF5KGJsb2NrLmdldFRleHQoKS5sZW5ndGgpLmZpbGwobnVsbCk7XG5cbiAgICB0aGlzLl9kZWNvcmF0b3JzLmZvckVhY2goZnVuY3Rpb24gKCAvKm9iamVjdCovZGVjb3JhdG9yLCAvKm51bWJlciovaWkpIHtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciBzdHJhdGVneSA9IGRlY29yYXRvci5zdHJhdGVneTtcbiAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKCAvKm51bWJlciovc3RhcnQsIC8qbnVtYmVyKi9lbmQpIHtcbiAgICAgICAgLy8gRmluZCBvdXQgaWYgYW55IG9mIG91ciBtYXRjaGluZyByYW5nZSBpcyBhbHJlYWR5IG9jY3VwaWVkXG4gICAgICAgIC8vIGJ5IGFub3RoZXIgZGVjb3JhdG9yLiBJZiBzbywgZGlzY2FyZCB0aGUgbWF0Y2guIE90aGVyd2lzZSwgc3RvcmVcbiAgICAgICAgLy8gdGhlIGNvbXBvbmVudCBrZXkgZm9yIHJlbmRlcmluZy5cbiAgICAgICAgaWYgKGNhbk9jY3VweVNsaWNlKGRlY29yYXRpb25zLCBzdGFydCwgZW5kKSkge1xuICAgICAgICAgIG9jY3VweVNsaWNlKGRlY29yYXRpb25zLCBzdGFydCwgZW5kLCBpaSArIERFTElNSVRFUiArIGNvdW50ZXIpO1xuICAgICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHN0cmF0ZWd5KGJsb2NrLCBjYWxsYmFjaywgY29udGVudFN0YXRlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBMaXN0KGRlY29yYXRpb25zKTtcbiAgfTtcblxuICBDb21wb3NpdGVEcmFmdERlY29yYXRvci5wcm90b3R5cGUuZ2V0Q29tcG9uZW50Rm9yS2V5ID0gZnVuY3Rpb24gZ2V0Q29tcG9uZW50Rm9yS2V5KGtleSkge1xuICAgIHZhciBjb21wb25lbnRLZXkgPSBwYXJzZUludChrZXkuc3BsaXQoREVMSU1JVEVSKVswXSwgMTApO1xuICAgIHJldHVybiB0aGlzLl9kZWNvcmF0b3JzW2NvbXBvbmVudEtleV0uY29tcG9uZW50O1xuICB9O1xuXG4gIENvbXBvc2l0ZURyYWZ0RGVjb3JhdG9yLnByb3RvdHlwZS5nZXRQcm9wc0ZvcktleSA9IGZ1bmN0aW9uIGdldFByb3BzRm9yS2V5KGtleSkge1xuICAgIHZhciBjb21wb25lbnRLZXkgPSBwYXJzZUludChrZXkuc3BsaXQoREVMSU1JVEVSKVswXSwgMTApO1xuICAgIHJldHVybiB0aGlzLl9kZWNvcmF0b3JzW2NvbXBvbmVudEtleV0ucHJvcHM7XG4gIH07XG5cbiAgcmV0dXJuIENvbXBvc2l0ZURyYWZ0RGVjb3JhdG9yO1xufSgpO1xuXG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIHdlIGNhbiBvY2N1cHkgdGhlIHNwZWNpZmllZCBzbGljZSBvZiB0aGUgZGVjb3JhdGlvbnNcbiAqIGFycmF5LlxuICovXG5cblxuZnVuY3Rpb24gY2FuT2NjdXB5U2xpY2UoZGVjb3JhdGlvbnMsIHN0YXJ0LCBlbmQpIHtcbiAgZm9yICh2YXIgaWkgPSBzdGFydDsgaWkgPCBlbmQ7IGlpKyspIHtcbiAgICBpZiAoZGVjb3JhdGlvbnNbaWldICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogU3BsaWNlIHRoZSBzcGVjaWZpZWQgY29tcG9uZW50IGludG8gb3VyIGRlY29yYXRpb24gYXJyYXkgYXQgdGhlIGRlc2lyZWRcbiAqIHJhbmdlLlxuICovXG5mdW5jdGlvbiBvY2N1cHlTbGljZSh0YXJnZXRBcnIsIHN0YXJ0LCBlbmQsIGNvbXBvbmVudEtleSkge1xuICBmb3IgKHZhciBpaSA9IHN0YXJ0OyBpaSA8IGVuZDsgaWkrKykge1xuICAgIHRhcmdldEFycltpaV0gPSBjb21wb25lbnRLZXk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb3NpdGVEcmFmdERlY29yYXRvcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG1vdmVCbG9ja0luQ29udGVudFN0YXRlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDb250ZW50QmxvY2tOb2RlID0gcmVxdWlyZSgnLi9Db250ZW50QmxvY2tOb2RlJyk7XG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbnZhciBnZXROZXh0RGVsaW1pdGVyQmxvY2tLZXkgPSByZXF1aXJlKCcuL2dldE5leHREZWxpbWl0ZXJCbG9ja0tleScpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgT3JkZXJlZE1hcCA9IEltbXV0YWJsZS5PcmRlcmVkTWFwLFxuICAgIExpc3QgPSBJbW11dGFibGUuTGlzdDtcblxuXG52YXIgdHJhbnNmb3JtQmxvY2sgPSBmdW5jdGlvbiB0cmFuc2Zvcm1CbG9jayhrZXksIGJsb2NrTWFwLCBmdW5jKSB7XG4gIGlmICgha2V5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGJsb2NrID0gYmxvY2tNYXAuZ2V0KGtleSk7XG5cbiAgaWYgKCFibG9jaykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGJsb2NrTWFwLnNldChrZXksIGZ1bmMoYmxvY2spKTtcbn07XG5cbnZhciB1cGRhdGVCbG9ja01hcExpbmtzID0gZnVuY3Rpb24gdXBkYXRlQmxvY2tNYXBMaW5rcyhibG9ja01hcCwgb3JpZ2luYWxCbG9ja1RvQmVNb3ZlZCwgb3JpZ2luYWxUYXJnZXRCbG9jaywgaW5zZXJ0aW9uTW9kZSwgaXNFeHBlcmltZW50YWxUcmVlQmxvY2spIHtcbiAgaWYgKCFpc0V4cGVyaW1lbnRhbFRyZWVCbG9jaykge1xuICAgIHJldHVybiBibG9ja01hcDtcbiAgfVxuICAvLyBwb3NzaWJsZSB2YWx1ZXMgb2YgJ2luc2VydGlvbk1vZGUnIGFyZTogJ2FmdGVyJywgJ2JlZm9yZSdcbiAgdmFyIGlzSW5zZXJ0ZWRBZnRlclRhcmdldCA9IGluc2VydGlvbk1vZGUgPT09ICdhZnRlcic7XG5cbiAgdmFyIG9yaWdpbmFsQmxvY2tLZXkgPSBvcmlnaW5hbEJsb2NrVG9CZU1vdmVkLmdldEtleSgpO1xuICB2YXIgb3JpZ2luYWxUYXJnZXRLZXkgPSBvcmlnaW5hbFRhcmdldEJsb2NrLmdldEtleSgpO1xuICB2YXIgb3JpZ2luYWxQYXJlbnRLZXkgPSBvcmlnaW5hbEJsb2NrVG9CZU1vdmVkLmdldFBhcmVudEtleSgpO1xuICB2YXIgb3JpZ2luYWxOZXh0U2libGluZ0tleSA9IG9yaWdpbmFsQmxvY2tUb0JlTW92ZWQuZ2V0TmV4dFNpYmxpbmdLZXkoKTtcbiAgdmFyIG9yaWdpbmFsUHJldlNpYmxpbmdLZXkgPSBvcmlnaW5hbEJsb2NrVG9CZU1vdmVkLmdldFByZXZTaWJsaW5nS2V5KCk7XG4gIHZhciBuZXdQYXJlbnRLZXkgPSBvcmlnaW5hbFRhcmdldEJsb2NrLmdldFBhcmVudEtleSgpO1xuICB2YXIgbmV3TmV4dFNpYmxpbmdLZXkgPSBpc0luc2VydGVkQWZ0ZXJUYXJnZXQgPyBvcmlnaW5hbFRhcmdldEJsb2NrLmdldE5leHRTaWJsaW5nS2V5KCkgOiBvcmlnaW5hbFRhcmdldEtleTtcbiAgdmFyIG5ld1ByZXZTaWJsaW5nS2V5ID0gaXNJbnNlcnRlZEFmdGVyVGFyZ2V0ID8gb3JpZ2luYWxUYXJnZXRLZXkgOiBvcmlnaW5hbFRhcmdldEJsb2NrLmdldFByZXZTaWJsaW5nS2V5KCk7XG5cbiAgcmV0dXJuIGJsb2NrTWFwLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKGJsb2Nrcykge1xuICAgIC8vIHVwZGF0ZSBvbGQgcGFyZW50XG4gICAgdHJhbnNmb3JtQmxvY2sob3JpZ2luYWxQYXJlbnRLZXksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICB2YXIgcGFyZW50Q2hpbGRyZW5MaXN0ID0gYmxvY2suZ2V0Q2hpbGRLZXlzKCk7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICBjaGlsZHJlbjogcGFyZW50Q2hpbGRyZW5MaXN0WydkZWxldGUnXShwYXJlbnRDaGlsZHJlbkxpc3QuaW5kZXhPZihvcmlnaW5hbEJsb2NrS2V5KSlcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIG9sZCBwcmV2XG4gICAgdHJhbnNmb3JtQmxvY2sob3JpZ2luYWxQcmV2U2libGluZ0tleSwgYmxvY2tzLCBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIG5leHRTaWJsaW5nOiBvcmlnaW5hbE5leHRTaWJsaW5nS2V5XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBvbGQgbmV4dFxuICAgIHRyYW5zZm9ybUJsb2NrKG9yaWdpbmFsTmV4dFNpYmxpbmdLZXksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICBwcmV2U2libGluZzogb3JpZ2luYWxQcmV2U2libGluZ0tleVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgbmV3IG5leHRcbiAgICB0cmFuc2Zvcm1CbG9jayhuZXdOZXh0U2libGluZ0tleSwgYmxvY2tzLCBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIHByZXZTaWJsaW5nOiBvcmlnaW5hbEJsb2NrS2V5XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBuZXcgcHJldlxuICAgIHRyYW5zZm9ybUJsb2NrKG5ld1ByZXZTaWJsaW5nS2V5LCBibG9ja3MsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgbmV4dFNpYmxpbmc6IG9yaWdpbmFsQmxvY2tLZXlcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIG5ldyBwYXJlbnRcbiAgICB0cmFuc2Zvcm1CbG9jayhuZXdQYXJlbnRLZXksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICB2YXIgbmV3UGFyZW50Q2hpbGRyZW5MaXN0ID0gYmxvY2suZ2V0Q2hpbGRLZXlzKCk7XG4gICAgICB2YXIgdGFyZ2V0QmxvY2tJbmRleCA9IG5ld1BhcmVudENoaWxkcmVuTGlzdC5pbmRleE9mKG9yaWdpbmFsVGFyZ2V0S2V5KTtcblxuICAgICAgdmFyIGluc2VydGlvbkluZGV4ID0gaXNJbnNlcnRlZEFmdGVyVGFyZ2V0ID8gdGFyZ2V0QmxvY2tJbmRleCArIDEgOiB0YXJnZXRCbG9ja0luZGV4ICE9PSAwID8gdGFyZ2V0QmxvY2tJbmRleCAtIDEgOiAwO1xuXG4gICAgICB2YXIgbmV3Q2hpbGRyZW5BcnJheSA9IG5ld1BhcmVudENoaWxkcmVuTGlzdC50b0FycmF5KCk7XG4gICAgICBuZXdDaGlsZHJlbkFycmF5LnNwbGljZShpbnNlcnRpb25JbmRleCwgMCwgb3JpZ2luYWxCbG9ja0tleSk7XG5cbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIGNoaWxkcmVuOiBMaXN0KG5ld0NoaWxkcmVuQXJyYXkpXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBibG9ja1xuICAgIHRyYW5zZm9ybUJsb2NrKG9yaWdpbmFsQmxvY2tLZXksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICBuZXh0U2libGluZzogbmV3TmV4dFNpYmxpbmdLZXksXG4gICAgICAgIHByZXZTaWJsaW5nOiBuZXdQcmV2U2libGluZ0tleSxcbiAgICAgICAgcGFyZW50OiBuZXdQYXJlbnRLZXlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbnZhciBtb3ZlQmxvY2tJbkNvbnRlbnRTdGF0ZSA9IGZ1bmN0aW9uIG1vdmVCbG9ja0luQ29udGVudFN0YXRlKGNvbnRlbnRTdGF0ZSwgYmxvY2tUb0JlTW92ZWQsIHRhcmdldEJsb2NrLCBpbnNlcnRpb25Nb2RlKSB7XG4gICEoaW5zZXJ0aW9uTW9kZSAhPT0gJ3JlcGxhY2UnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZXBsYWNpbmcgYmxvY2tzIGlzIG5vdCBzdXBwb3J0ZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIHZhciB0YXJnZXRLZXkgPSB0YXJnZXRCbG9jay5nZXRLZXkoKTtcbiAgdmFyIGJsb2NrS2V5ID0gYmxvY2tUb0JlTW92ZWQuZ2V0S2V5KCk7XG5cbiAgIShibG9ja0tleSAhPT0gdGFyZ2V0S2V5KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdCbG9jayBjYW5ub3QgYmUgbW92ZWQgbmV4dCB0byBpdHNlbGYuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIHZhciBibG9ja01hcCA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja01hcCgpO1xuICB2YXIgaXNFeHBlcmltZW50YWxUcmVlQmxvY2sgPSBibG9ja1RvQmVNb3ZlZCBpbnN0YW5jZW9mIENvbnRlbnRCbG9ja05vZGU7XG5cbiAgdmFyIGJsb2Nrc1RvQmVNb3ZlZCA9IFtibG9ja1RvQmVNb3ZlZF07XG4gIHZhciBibG9ja01hcFdpdGhvdXRCbG9ja3NUb0JlTW92ZWQgPSBibG9ja01hcFsnZGVsZXRlJ10oYmxvY2tLZXkpO1xuXG4gIGlmIChpc0V4cGVyaW1lbnRhbFRyZWVCbG9jaykge1xuICAgIGJsb2Nrc1RvQmVNb3ZlZCA9IFtdO1xuICAgIGJsb2NrTWFwV2l0aG91dEJsb2Nrc1RvQmVNb3ZlZCA9IGJsb2NrTWFwLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKGJsb2Nrcykge1xuICAgICAgdmFyIG5leHRTaWJsaW5nS2V5ID0gYmxvY2tUb0JlTW92ZWQuZ2V0TmV4dFNpYmxpbmdLZXkoKTtcbiAgICAgIHZhciBuZXh0RGVsaW1pdGVyQmxvY2tLZXkgPSBnZXROZXh0RGVsaW1pdGVyQmxvY2tLZXkoYmxvY2tUb0JlTW92ZWQsIGJsb2Nrcyk7XG5cbiAgICAgIGJsb2Nrcy50b1NlcSgpLnNraXBVbnRpbChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgICAgcmV0dXJuIGJsb2NrLmdldEtleSgpID09PSBibG9ja0tleTtcbiAgICAgIH0pLnRha2VXaGlsZShmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgICAgdmFyIGtleSA9IGJsb2NrLmdldEtleSgpO1xuICAgICAgICB2YXIgaXNCbG9ja1RvQmVNb3ZlZCA9IGtleSA9PT0gYmxvY2tLZXk7XG4gICAgICAgIHZhciBoYXNOZXh0U2libGluZ0FuZElzTm90TmV4dFNpYmxpbmcgPSBuZXh0U2libGluZ0tleSAmJiBrZXkgIT09IG5leHRTaWJsaW5nS2V5O1xuICAgICAgICB2YXIgZG9lc05vdEhhdmVOZXh0U2libGluZ0FuZElzTm90RGVsaW1pdGVyID0gIW5leHRTaWJsaW5nS2V5ICYmIGJsb2NrLmdldFBhcmVudEtleSgpICYmICghbmV4dERlbGltaXRlckJsb2NrS2V5IHx8IGtleSAhPT0gbmV4dERlbGltaXRlckJsb2NrS2V5KTtcblxuICAgICAgICByZXR1cm4gISEoaXNCbG9ja1RvQmVNb3ZlZCB8fCBoYXNOZXh0U2libGluZ0FuZElzTm90TmV4dFNpYmxpbmcgfHwgZG9lc05vdEhhdmVOZXh0U2libGluZ0FuZElzTm90RGVsaW1pdGVyKTtcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICAgIGJsb2Nrc1RvQmVNb3ZlZC5wdXNoKGJsb2NrKTtcbiAgICAgICAgYmxvY2tzWydkZWxldGUnXShibG9jay5nZXRLZXkoKSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBibG9ja3NCZWZvcmUgPSBibG9ja01hcFdpdGhvdXRCbG9ja3NUb0JlTW92ZWQudG9TZXEoKS50YWtlVW50aWwoZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gdiA9PT0gdGFyZ2V0QmxvY2s7XG4gIH0pO1xuXG4gIHZhciBibG9ja3NBZnRlciA9IGJsb2NrTWFwV2l0aG91dEJsb2Nrc1RvQmVNb3ZlZC50b1NlcSgpLnNraXBVbnRpbChmdW5jdGlvbiAodikge1xuICAgIHJldHVybiB2ID09PSB0YXJnZXRCbG9jaztcbiAgfSkuc2tpcCgxKTtcblxuICB2YXIgc2xpY2VkQmxvY2tzID0gYmxvY2tzVG9CZU1vdmVkLm1hcChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICByZXR1cm4gW2Jsb2NrLmdldEtleSgpLCBibG9ja107XG4gIH0pO1xuXG4gIHZhciBuZXdCbG9ja3MgPSBPcmRlcmVkTWFwKCk7XG5cbiAgaWYgKGluc2VydGlvbk1vZGUgPT09ICdiZWZvcmUnKSB7XG4gICAgdmFyIGJsb2NrQmVmb3JlID0gY29udGVudFN0YXRlLmdldEJsb2NrQmVmb3JlKHRhcmdldEtleSk7XG5cbiAgICAhKCFibG9ja0JlZm9yZSB8fCBibG9ja0JlZm9yZS5nZXRLZXkoKSAhPT0gYmxvY2tUb0JlTW92ZWQuZ2V0S2V5KCkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Jsb2NrIGNhbm5vdCBiZSBtb3ZlZCBuZXh0IHRvIGl0c2VsZi4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBuZXdCbG9ja3MgPSBibG9ja3NCZWZvcmUuY29uY2F0KFtdLmNvbmNhdChzbGljZWRCbG9ja3MsIFtbdGFyZ2V0S2V5LCB0YXJnZXRCbG9ja11dKSwgYmxvY2tzQWZ0ZXIpLnRvT3JkZXJlZE1hcCgpO1xuICB9IGVsc2UgaWYgKGluc2VydGlvbk1vZGUgPT09ICdhZnRlcicpIHtcbiAgICB2YXIgYmxvY2tBZnRlciA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja0FmdGVyKHRhcmdldEtleSk7XG5cbiAgICAhKCFibG9ja0FmdGVyIHx8IGJsb2NrQWZ0ZXIuZ2V0S2V5KCkgIT09IGJsb2NrS2V5KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdCbG9jayBjYW5ub3QgYmUgbW92ZWQgbmV4dCB0byBpdHNlbGYuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgbmV3QmxvY2tzID0gYmxvY2tzQmVmb3JlLmNvbmNhdChbW3RhcmdldEtleSwgdGFyZ2V0QmxvY2tdXS5jb25jYXQoc2xpY2VkQmxvY2tzKSwgYmxvY2tzQWZ0ZXIpLnRvT3JkZXJlZE1hcCgpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRlbnRTdGF0ZS5tZXJnZSh7XG4gICAgYmxvY2tNYXA6IHVwZGF0ZUJsb2NrTWFwTGlua3MobmV3QmxvY2tzLCBibG9ja1RvQmVNb3ZlZCwgdGFyZ2V0QmxvY2ssIGluc2VydGlvbk1vZGUsIGlzRXhwZXJpbWVudGFsVHJlZUJsb2NrKSxcbiAgICBzZWxlY3Rpb25CZWZvcmU6IGNvbnRlbnRTdGF0ZS5nZXRTZWxlY3Rpb25BZnRlcigpLFxuICAgIHNlbGVjdGlvbkFmdGVyOiBjb250ZW50U3RhdGUuZ2V0U2VsZWN0aW9uQWZ0ZXIoKS5tZXJnZSh7XG4gICAgICBhbmNob3JLZXk6IGJsb2NrS2V5LFxuICAgICAgZm9jdXNLZXk6IGJsb2NrS2V5XG4gICAgfSlcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1vdmVCbG9ja0luQ29udGVudFN0YXRlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qKlxuICogU3RhdGVmdWwgQVBJIGZvciB0ZXh0IGRpcmVjdGlvbiBkZXRlY3Rpb25cbiAqXG4gKiBUaGlzIGNsYXNzIGNhbiBiZSB1c2VkIGluIGFwcGxpY2F0aW9ucyB3aGVyZSB5b3UgbmVlZCB0byBkZXRlY3QgdGhlXG4gKiBkaXJlY3Rpb24gb2YgYSBzZXF1ZW5jZSBvZiB0ZXh0IGJsb2Nrcywgd2hlcmUgZWFjaCBkaXJlY3Rpb24gc2hhbGwgYmUgdXNlZFxuICogYXMgdGhlIGZhbGxiYWNrIGRpcmVjdGlvbiBmb3IgdGhlIG5leHQgb25lLlxuICpcbiAqIE5PVEU6IEEgZGVmYXVsdCBkaXJlY3Rpb24sIGlmIG5vdCBwcm92aWRlZCwgaXMgc2V0IGJhc2VkIG9uIHRoZSBnbG9iYWxcbiAqICAgICAgIGRpcmVjdGlvbiwgYXMgZGVmaW5lZCBieSBgVW5pY29kZUJpZGlEaXJlY3Rpb25gLlxuICpcbiAqID09IEV4YW1wbGUgPT1cbiAqIGBgYFxuICogdmFyIFVuaWNvZGVCaWRpU2VydmljZSA9IHJlcXVpcmUoJ1VuaWNvZGVCaWRpU2VydmljZScpO1xuICpcbiAqIHZhciBiaWRpU2VydmljZSA9IG5ldyBVbmljb2RlQmlkaVNlcnZpY2UoKTtcbiAqXG4gKiAuLi5cbiAqXG4gKiBiaWRpU2VydmljZS5yZXNldCgpO1xuICogZm9yICh2YXIgcGFyYSBpbiBwYXJhZ3JhcGhzKSB7XG4gKiAgIHZhciBkaXIgPSBiaWRpU2VydmljZS5nZXREaXJlY3Rpb24ocGFyYSk7XG4gKiAgIC4uLlxuICogfVxuICogYGBgXG4gKlxuICogUGFydCBvZiBvdXIgaW1wbGVtZW50YXRpb24gb2YgVW5pY29kZSBCaWRpcmVjdGlvbmFsIEFsZ29yaXRobSAoVUJBKVxuICogVW5pY29kZSBTdGFuZGFyZCBBbm5leCAjOSAoVUFYOSlcbiAqIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjkvXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgVW5pY29kZUJpZGkgPSByZXF1aXJlKCcuL1VuaWNvZGVCaWRpJyk7XG52YXIgVW5pY29kZUJpZGlEaXJlY3Rpb24gPSByZXF1aXJlKCcuL1VuaWNvZGVCaWRpRGlyZWN0aW9uJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG52YXIgVW5pY29kZUJpZGlTZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xuXG4gIC8qKlxuICAgKiBTdGF0ZWZ1bCBjbGFzcyBmb3IgcGFyYWdyYXBoIGRpcmVjdGlvbiBkZXRlY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIGRlZmF1bHREaXIgIERlZmF1bHQgZGlyZWN0aW9uIG9mIHRoZSBzZXJ2aWNlXG4gICAqL1xuICBmdW5jdGlvbiBVbmljb2RlQmlkaVNlcnZpY2UoZGVmYXVsdERpcikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVbmljb2RlQmlkaVNlcnZpY2UpO1xuXG4gICAgaWYgKCFkZWZhdWx0RGlyKSB7XG4gICAgICBkZWZhdWx0RGlyID0gVW5pY29kZUJpZGlEaXJlY3Rpb24uZ2V0R2xvYmFsRGlyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICFVbmljb2RlQmlkaURpcmVjdGlvbi5pc1N0cm9uZyhkZWZhdWx0RGlyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdEZWZhdWx0IGRpcmVjdGlvbiBtdXN0IGJlIGEgc3Ryb25nIGRpcmVjdGlvbiAoTFRSIG9yIFJUTCknKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfVxuICAgIHRoaXMuX2RlZmF1bHREaXIgPSBkZWZhdWx0RGlyO1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCB0aGUgaW50ZXJuYWwgc3RhdGVcbiAgICpcbiAgICogSW5zdGVhZCBvZiBjcmVhdGluZyBhIG5ldyBpbnN0YW5jZSwgeW91IGNhbiBqdXN0IHJlc2V0KCkgeW91ciBpbnN0YW5jZVxuICAgKiBldmVyeXRpbWUgeW91IHN0YXJ0IGEgbmV3IGxvb3AuXG4gICAqL1xuXG5cbiAgVW5pY29kZUJpZGlTZXJ2aWNlLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHRoaXMuX2xhc3REaXIgPSB0aGlzLl9kZWZhdWx0RGlyO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkaXJlY3Rpb24gb2YgYSBibG9jayBvZiB0ZXh0LCBhbmQgcmVtZW1iZXJzIGl0IGFzIHRoZVxuICAgKiBmYWxsLWJhY2sgZGlyZWN0aW9uIGZvciB0aGUgbmV4dCBwYXJhZ3JhcGguXG4gICAqXG4gICAqIEBwYXJhbSBzdHIgIEEgdGV4dCBibG9jaywgZS5nLiBwYXJhZ3JhcGgsIHRhYmxlIGNlbGwsIHRhZ1xuICAgKiBAcmV0dXJuICAgICBUaGUgcmVzb2x2ZWQgZGlyZWN0aW9uXG4gICAqL1xuXG5cbiAgVW5pY29kZUJpZGlTZXJ2aWNlLnByb3RvdHlwZS5nZXREaXJlY3Rpb24gPSBmdW5jdGlvbiBnZXREaXJlY3Rpb24oc3RyKSB7XG4gICAgdGhpcy5fbGFzdERpciA9IFVuaWNvZGVCaWRpLmdldERpcmVjdGlvbihzdHIsIHRoaXMuX2xhc3REaXIpO1xuICAgIHJldHVybiB0aGlzLl9sYXN0RGlyO1xuICB9O1xuXG4gIHJldHVybiBVbmljb2RlQmlkaVNlcnZpY2U7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gVW5pY29kZUJpZGlTZXJ2aWNlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRWRpdG9yQmlkaVNlcnZpY2VcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xudmFyIFVuaWNvZGVCaWRpU2VydmljZSA9IHJlcXVpcmUoJ2ZianMvbGliL1VuaWNvZGVCaWRpU2VydmljZScpO1xuXG52YXIgbnVsbHRocm93cyA9IHJlcXVpcmUoJ2ZianMvbGliL251bGx0aHJvd3MnKTtcblxudmFyIE9yZGVyZWRNYXAgPSBJbW11dGFibGUuT3JkZXJlZE1hcDtcblxuXG52YXIgYmlkaVNlcnZpY2U7XG5cbnZhciBFZGl0b3JCaWRpU2VydmljZSA9IHtcbiAgZ2V0RGlyZWN0aW9uTWFwOiBmdW5jdGlvbiBnZXREaXJlY3Rpb25NYXAoY29udGVudCwgcHJldkJpZGlNYXApIHtcbiAgICBpZiAoIWJpZGlTZXJ2aWNlKSB7XG4gICAgICBiaWRpU2VydmljZSA9IG5ldyBVbmljb2RlQmlkaVNlcnZpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmlkaVNlcnZpY2UucmVzZXQoKTtcbiAgICB9XG5cbiAgICB2YXIgYmxvY2tNYXAgPSBjb250ZW50LmdldEJsb2NrTWFwKCk7XG4gICAgdmFyIG5leHRCaWRpID0gYmxvY2tNYXAudmFsdWVTZXEoKS5tYXAoZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gbnVsbHRocm93cyhiaWRpU2VydmljZSkuZ2V0RGlyZWN0aW9uKGJsb2NrLmdldFRleHQoKSk7XG4gICAgfSk7XG4gICAgdmFyIGJpZGlNYXAgPSBPcmRlcmVkTWFwKGJsb2NrTWFwLmtleVNlcSgpLnppcChuZXh0QmlkaSkpO1xuXG4gICAgaWYgKHByZXZCaWRpTWFwICE9IG51bGwgJiYgSW1tdXRhYmxlLmlzKHByZXZCaWRpTWFwLCBiaWRpTWFwKSkge1xuICAgICAgcmV0dXJuIHByZXZCaWRpTWFwO1xuICAgIH1cblxuICAgIHJldHVybiBiaWRpTWFwO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVkaXRvckJpZGlTZXJ2aWNlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgc3BsaXRCbG9ja0luQ29udGVudFN0YXRlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDb250ZW50QmxvY2tOb2RlID0gcmVxdWlyZSgnLi9Db250ZW50QmxvY2tOb2RlJyk7XG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbnZhciBnZW5lcmF0ZVJhbmRvbUtleSA9IHJlcXVpcmUoJy4vZ2VuZXJhdGVSYW5kb21LZXknKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIExpc3QgPSBJbW11dGFibGUuTGlzdCxcbiAgICBNYXAgPSBJbW11dGFibGUuTWFwO1xuXG5cbnZhciB0cmFuc2Zvcm1CbG9jayA9IGZ1bmN0aW9uIHRyYW5zZm9ybUJsb2NrKGtleSwgYmxvY2tNYXAsIGZ1bmMpIHtcbiAgaWYgKCFrZXkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgYmxvY2sgPSBibG9ja01hcC5nZXQoa2V5KTtcblxuICBpZiAoIWJsb2NrKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYmxvY2tNYXAuc2V0KGtleSwgZnVuYyhibG9jaykpO1xufTtcblxudmFyIHVwZGF0ZUJsb2NrTWFwTGlua3MgPSBmdW5jdGlvbiB1cGRhdGVCbG9ja01hcExpbmtzKGJsb2NrTWFwLCBvcmlnaW5hbEJsb2NrLCBiZWxvd0Jsb2NrKSB7XG4gIHJldHVybiBibG9ja01hcC53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChibG9ja3MpIHtcbiAgICB2YXIgb3JpZ2luYWxCbG9ja0tleSA9IG9yaWdpbmFsQmxvY2suZ2V0S2V5KCk7XG4gICAgdmFyIGJlbG93QmxvY2tLZXkgPSBiZWxvd0Jsb2NrLmdldEtleSgpO1xuXG4gICAgLy8gdXBkYXRlIGJsb2NrIHBhcmVudFxuICAgIHRyYW5zZm9ybUJsb2NrKG9yaWdpbmFsQmxvY2suZ2V0UGFyZW50S2V5KCksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICB2YXIgcGFyZW50Q2hpbGRyZW5MaXN0ID0gYmxvY2suZ2V0Q2hpbGRLZXlzKCk7XG4gICAgICB2YXIgaW5zZXJ0aW9uSW5kZXggPSBwYXJlbnRDaGlsZHJlbkxpc3QuaW5kZXhPZihvcmlnaW5hbEJsb2NrS2V5KSArIDE7XG4gICAgICB2YXIgbmV3Q2hpbGRyZW5BcnJheSA9IHBhcmVudENoaWxkcmVuTGlzdC50b0FycmF5KCk7XG5cbiAgICAgIG5ld0NoaWxkcmVuQXJyYXkuc3BsaWNlKGluc2VydGlvbkluZGV4LCAwLCBiZWxvd0Jsb2NrS2V5KTtcblxuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgY2hpbGRyZW46IExpc3QobmV3Q2hpbGRyZW5BcnJheSlcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIG9yaWdpbmFsIG5leHQgYmxvY2tcbiAgICB0cmFuc2Zvcm1CbG9jayhvcmlnaW5hbEJsb2NrLmdldE5leHRTaWJsaW5nS2V5KCksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICBwcmV2U2libGluZzogYmVsb3dCbG9ja0tleVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgb3JpZ2luYWwgYmxvY2tcbiAgICB0cmFuc2Zvcm1CbG9jayhvcmlnaW5hbEJsb2NrS2V5LCBibG9ja3MsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgbmV4dFNpYmxpbmc6IGJlbG93QmxvY2tLZXlcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIGJlbG93IGJsb2NrXG4gICAgdHJhbnNmb3JtQmxvY2soYmVsb3dCbG9ja0tleSwgYmxvY2tzLCBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIHByZXZTaWJsaW5nOiBvcmlnaW5hbEJsb2NrS2V5XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG52YXIgc3BsaXRCbG9ja0luQ29udGVudFN0YXRlID0gZnVuY3Rpb24gc3BsaXRCbG9ja0luQ29udGVudFN0YXRlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUpIHtcbiAgIXNlbGVjdGlvblN0YXRlLmlzQ29sbGFwc2VkKCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnU2VsZWN0aW9uIHJhbmdlIG11c3QgYmUgY29sbGFwc2VkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICB2YXIga2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0QW5jaG9yS2V5KCk7XG4gIHZhciBvZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRBbmNob3JPZmZzZXQoKTtcbiAgdmFyIGJsb2NrTWFwID0gY29udGVudFN0YXRlLmdldEJsb2NrTWFwKCk7XG4gIHZhciBibG9ja1RvU3BsaXQgPSBibG9ja01hcC5nZXQoa2V5KTtcbiAgdmFyIHRleHQgPSBibG9ja1RvU3BsaXQuZ2V0VGV4dCgpO1xuICB2YXIgY2hhcnMgPSBibG9ja1RvU3BsaXQuZ2V0Q2hhcmFjdGVyTGlzdCgpO1xuICB2YXIga2V5QmVsb3cgPSBnZW5lcmF0ZVJhbmRvbUtleSgpO1xuICB2YXIgaXNFeHBlcmltZW50YWxUcmVlQmxvY2sgPSBibG9ja1RvU3BsaXQgaW5zdGFuY2VvZiBDb250ZW50QmxvY2tOb2RlO1xuXG4gIHZhciBibG9ja0Fib3ZlID0gYmxvY2tUb1NwbGl0Lm1lcmdlKHtcbiAgICB0ZXh0OiB0ZXh0LnNsaWNlKDAsIG9mZnNldCksXG4gICAgY2hhcmFjdGVyTGlzdDogY2hhcnMuc2xpY2UoMCwgb2Zmc2V0KVxuICB9KTtcbiAgdmFyIGJsb2NrQmVsb3cgPSBibG9ja0Fib3ZlLm1lcmdlKHtcbiAgICBrZXk6IGtleUJlbG93LFxuICAgIHRleHQ6IHRleHQuc2xpY2Uob2Zmc2V0KSxcbiAgICBjaGFyYWN0ZXJMaXN0OiBjaGFycy5zbGljZShvZmZzZXQpLFxuICAgIGRhdGE6IE1hcCgpXG4gIH0pO1xuXG4gIHZhciBibG9ja3NCZWZvcmUgPSBibG9ja01hcC50b1NlcSgpLnRha2VVbnRpbChmdW5jdGlvbiAodikge1xuICAgIHJldHVybiB2ID09PSBibG9ja1RvU3BsaXQ7XG4gIH0pO1xuICB2YXIgYmxvY2tzQWZ0ZXIgPSBibG9ja01hcC50b1NlcSgpLnNraXBVbnRpbChmdW5jdGlvbiAodikge1xuICAgIHJldHVybiB2ID09PSBibG9ja1RvU3BsaXQ7XG4gIH0pLnJlc3QoKTtcbiAgdmFyIG5ld0Jsb2NrcyA9IGJsb2Nrc0JlZm9yZS5jb25jYXQoW1trZXksIGJsb2NrQWJvdmVdLCBba2V5QmVsb3csIGJsb2NrQmVsb3ddXSwgYmxvY2tzQWZ0ZXIpLnRvT3JkZXJlZE1hcCgpO1xuXG4gIGlmIChpc0V4cGVyaW1lbnRhbFRyZWVCbG9jaykge1xuICAgICFibG9ja1RvU3BsaXQuZ2V0Q2hpbGRLZXlzKCkuaXNFbXB0eSgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0NvbnRlbnRCbG9ja05vZGUgbXVzdCBub3QgaGF2ZSBjaGlsZHJlbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIG5ld0Jsb2NrcyA9IHVwZGF0ZUJsb2NrTWFwTGlua3MobmV3QmxvY2tzLCBibG9ja0Fib3ZlLCBibG9ja0JlbG93KTtcbiAgfVxuXG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiBuZXdCbG9ja3MsXG4gICAgc2VsZWN0aW9uQmVmb3JlOiBzZWxlY3Rpb25TdGF0ZSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGUubWVyZ2Uoe1xuICAgICAgYW5jaG9yS2V5OiBrZXlCZWxvdyxcbiAgICAgIGFuY2hvck9mZnNldDogMCxcbiAgICAgIGZvY3VzS2V5OiBrZXlCZWxvdyxcbiAgICAgIGZvY3VzT2Zmc2V0OiAwLFxuICAgICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgICB9KVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc3BsaXRCbG9ja0luQ29udGVudFN0YXRlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgcmVtb3ZlUmFuZ2VGcm9tQ29udGVudFN0YXRlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDb250ZW50QmxvY2tOb2RlID0gcmVxdWlyZSgnLi9Db250ZW50QmxvY2tOb2RlJyk7XG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbnZhciBnZXROZXh0RGVsaW1pdGVyQmxvY2tLZXkgPSByZXF1aXJlKCcuL2dldE5leHREZWxpbWl0ZXJCbG9ja0tleScpO1xuXG52YXIgTGlzdCA9IEltbXV0YWJsZS5MaXN0LFxuICAgIE1hcCA9IEltbXV0YWJsZS5NYXA7XG5cblxudmFyIHRyYW5zZm9ybUJsb2NrID0gZnVuY3Rpb24gdHJhbnNmb3JtQmxvY2soa2V5LCBibG9ja01hcCwgZnVuYykge1xuICBpZiAoIWtleSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBibG9jayA9IGJsb2NrTWFwLmdldChrZXkpO1xuXG4gIGlmICghYmxvY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBibG9ja01hcC5zZXQoa2V5LCBmdW5jKGJsb2NrKSk7XG59O1xuXG4vKipcbiAqIEFuY2VzdG9ycyBuZWVkcyB0byBiZSBwcmVzZXJ2ZWQgd2hlbiB0aGVyZSBhcmUgbm9uIHNlbGVjdGVkXG4gKiBjaGlsZHJlbiB0byBtYWtlIHN1cmUgd2UgZG8gbm90IGxlYXZlIGFueSBvcnBoYW5zIGJlaGluZFxuICovXG52YXIgZ2V0QW5jZXN0b3JzS2V5cyA9IGZ1bmN0aW9uIGdldEFuY2VzdG9yc0tleXMoYmxvY2tLZXksIGJsb2NrTWFwKSB7XG4gIHZhciBwYXJlbnRzID0gW107XG5cbiAgaWYgKCFibG9ja0tleSkge1xuICAgIHJldHVybiBwYXJlbnRzO1xuICB9XG5cbiAgdmFyIGJsb2NrTm9kZSA9IGJsb2NrTWFwLmdldChibG9ja0tleSk7XG4gIHdoaWxlIChibG9ja05vZGUgJiYgYmxvY2tOb2RlLmdldFBhcmVudEtleSgpKSB7XG4gICAgdmFyIHBhcmVudEtleSA9IGJsb2NrTm9kZS5nZXRQYXJlbnRLZXkoKTtcbiAgICBpZiAocGFyZW50S2V5KSB7XG4gICAgICBwYXJlbnRzLnB1c2gocGFyZW50S2V5KTtcbiAgICB9XG4gICAgYmxvY2tOb2RlID0gcGFyZW50S2V5ID8gYmxvY2tNYXAuZ2V0KHBhcmVudEtleSkgOiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHBhcmVudHM7XG59O1xuXG4vKipcbiAqIEdldCBhbGwgbmV4dCBkZWxpbWl0ZXIga2V5cyB1bnRpbCB3ZSBoaXQgYSByb290IGRlbGltaXRlciBhbmQgcmV0dXJuXG4gKiBhbiBhcnJheSBvZiBrZXkgcmVmZXJlbmNlc1xuICovXG52YXIgZ2V0TmV4dERlbGltaXRlcnNCbG9ja0tleXMgPSBmdW5jdGlvbiBnZXROZXh0RGVsaW1pdGVyc0Jsb2NrS2V5cyhibG9jaywgYmxvY2tNYXApIHtcbiAgdmFyIG5leHREZWxpbWl0ZXJzID0gW107XG5cbiAgaWYgKCFibG9jaykge1xuICAgIHJldHVybiBuZXh0RGVsaW1pdGVycztcbiAgfVxuXG4gIHZhciBuZXh0RGVsaW1pdGVyID0gZ2V0TmV4dERlbGltaXRlckJsb2NrS2V5KGJsb2NrLCBibG9ja01hcCk7XG4gIHdoaWxlIChuZXh0RGVsaW1pdGVyICYmIGJsb2NrTWFwLmdldChuZXh0RGVsaW1pdGVyKSkge1xuICAgIHZhciBfYmxvY2sgPSBibG9ja01hcC5nZXQobmV4dERlbGltaXRlcik7XG4gICAgbmV4dERlbGltaXRlcnMucHVzaChuZXh0RGVsaW1pdGVyKTtcblxuICAgIC8vIHdlIGRvIG5vdCBuZWVkIHRvIGtlZXAgY2hlY2tpbmcgYWxsIHJvb3Qgbm9kZSBzaWJsaW5ncywganVzdCB0aGUgZmlyc3Qgb2NjdXJhbmNlXG4gICAgbmV4dERlbGltaXRlciA9IF9ibG9jay5nZXRQYXJlbnRLZXkoKSA/IGdldE5leHREZWxpbWl0ZXJCbG9ja0tleShfYmxvY2ssIGJsb2NrTWFwKSA6IG51bGw7XG4gIH1cblxuICByZXR1cm4gbmV4dERlbGltaXRlcnM7XG59O1xuXG52YXIgZ2V0TmV4dFZhbGlkU2libGluZyA9IGZ1bmN0aW9uIGdldE5leHRWYWxpZFNpYmxpbmcoYmxvY2ssIGJsb2NrTWFwLCBvcmlnaW5hbEJsb2NrTWFwKSB7XG4gIGlmICghYmxvY2spIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIG5vdGUgdGhhdCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB3ZSByZWZlciB0byB0aGUgb3JpZ2luYWwgYmxvY2sgc2luY2UgdGhpc1xuICAvLyBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aGluIGEgd2l0aE11dGF0aW9uc1xuICB2YXIgbmV4dFZhbGlkU2libGluZ0tleSA9IG9yaWdpbmFsQmxvY2tNYXAuZ2V0KGJsb2NrLmdldEtleSgpKS5nZXROZXh0U2libGluZ0tleSgpO1xuXG4gIHdoaWxlIChuZXh0VmFsaWRTaWJsaW5nS2V5ICYmICFibG9ja01hcC5nZXQobmV4dFZhbGlkU2libGluZ0tleSkpIHtcbiAgICBuZXh0VmFsaWRTaWJsaW5nS2V5ID0gb3JpZ2luYWxCbG9ja01hcC5nZXQobmV4dFZhbGlkU2libGluZ0tleSkuZ2V0TmV4dFNpYmxpbmdLZXkoKSB8fCBudWxsO1xuICB9XG5cbiAgcmV0dXJuIG5leHRWYWxpZFNpYmxpbmdLZXk7XG59O1xuXG52YXIgZ2V0UHJldlZhbGlkU2libGluZyA9IGZ1bmN0aW9uIGdldFByZXZWYWxpZFNpYmxpbmcoYmxvY2ssIGJsb2NrTWFwLCBvcmlnaW5hbEJsb2NrTWFwKSB7XG4gIGlmICghYmxvY2spIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIG5vdGUgdGhhdCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB3ZSByZWZlciB0byB0aGUgb3JpZ2luYWwgYmxvY2sgc2luY2UgdGhpc1xuICAvLyBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aGluIGEgd2l0aE11dGF0aW9uc1xuICB2YXIgcHJldlZhbGlkU2libGluZ0tleSA9IG9yaWdpbmFsQmxvY2tNYXAuZ2V0KGJsb2NrLmdldEtleSgpKS5nZXRQcmV2U2libGluZ0tleSgpO1xuXG4gIHdoaWxlIChwcmV2VmFsaWRTaWJsaW5nS2V5ICYmICFibG9ja01hcC5nZXQocHJldlZhbGlkU2libGluZ0tleSkpIHtcbiAgICBwcmV2VmFsaWRTaWJsaW5nS2V5ID0gb3JpZ2luYWxCbG9ja01hcC5nZXQocHJldlZhbGlkU2libGluZ0tleSkuZ2V0UHJldlNpYmxpbmdLZXkoKSB8fCBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHByZXZWYWxpZFNpYmxpbmdLZXk7XG59O1xuXG52YXIgdXBkYXRlQmxvY2tNYXBMaW5rcyA9IGZ1bmN0aW9uIHVwZGF0ZUJsb2NrTWFwTGlua3MoYmxvY2tNYXAsIHN0YXJ0QmxvY2ssIGVuZEJsb2NrLCBvcmlnaW5hbEJsb2NrTWFwKSB7XG4gIHJldHVybiBibG9ja01hcC53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChibG9ja3MpIHtcbiAgICAvLyB1cGRhdGUgc3RhcnQgYmxvY2sgaWYgaXRzIHJldGFpbmVkXG4gICAgdHJhbnNmb3JtQmxvY2soc3RhcnRCbG9jay5nZXRLZXkoKSwgYmxvY2tzLCBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIG5leHRTaWJsaW5nOiBnZXROZXh0VmFsaWRTaWJsaW5nKHN0YXJ0QmxvY2ssIGJsb2Nrcywgb3JpZ2luYWxCbG9ja01hcCksXG4gICAgICAgIHByZXZTaWJsaW5nOiBnZXRQcmV2VmFsaWRTaWJsaW5nKHN0YXJ0QmxvY2ssIGJsb2Nrcywgb3JpZ2luYWxCbG9ja01hcClcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIGVuZGJsb2NrIGlmIGl0cyByZXRhaW5lZFxuICAgIHRyYW5zZm9ybUJsb2NrKGVuZEJsb2NrLmdldEtleSgpLCBibG9ja3MsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgbmV4dFNpYmxpbmc6IGdldE5leHRWYWxpZFNpYmxpbmcoZW5kQmxvY2ssIGJsb2Nrcywgb3JpZ2luYWxCbG9ja01hcCksXG4gICAgICAgIHByZXZTaWJsaW5nOiBnZXRQcmV2VmFsaWRTaWJsaW5nKGVuZEJsb2NrLCBibG9ja3MsIG9yaWdpbmFsQmxvY2tNYXApXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBzdGFydCBibG9jayBwYXJlbnQgYW5jZXN0b3JzXG4gICAgZ2V0QW5jZXN0b3JzS2V5cyhzdGFydEJsb2NrLmdldEtleSgpLCBvcmlnaW5hbEJsb2NrTWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJlbnRLZXkpIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1CbG9jayhwYXJlbnRLZXksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgICAgY2hpbGRyZW46IGJsb2NrLmdldENoaWxkS2V5cygpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gYmxvY2tzLmdldChrZXkpO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5leHRTaWJsaW5nOiBnZXROZXh0VmFsaWRTaWJsaW5nKGJsb2NrLCBibG9ja3MsIG9yaWdpbmFsQmxvY2tNYXApLFxuICAgICAgICAgIHByZXZTaWJsaW5nOiBnZXRQcmV2VmFsaWRTaWJsaW5nKGJsb2NrLCBibG9ja3MsIG9yaWdpbmFsQmxvY2tNYXApXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgc3RhcnQgYmxvY2sgbmV4dCAtIGNhbiBvbmx5IGhhcHBlbiBpZiBzdGFydEJsb2NrID09IGVuZEJsb2NrXG4gICAgdHJhbnNmb3JtQmxvY2soc3RhcnRCbG9jay5nZXROZXh0U2libGluZ0tleSgpLCBibG9ja3MsIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgcHJldlNpYmxpbmc6IHN0YXJ0QmxvY2suZ2V0UHJldlNpYmxpbmdLZXkoKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgc3RhcnQgYmxvY2sgcHJldlxuICAgIHRyYW5zZm9ybUJsb2NrKHN0YXJ0QmxvY2suZ2V0UHJldlNpYmxpbmdLZXkoKSwgYmxvY2tzLCBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIG5leHRTaWJsaW5nOiBnZXROZXh0VmFsaWRTaWJsaW5nKHN0YXJ0QmxvY2ssIGJsb2Nrcywgb3JpZ2luYWxCbG9ja01hcClcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIGVuZCBibG9jayBuZXh0XG4gICAgdHJhbnNmb3JtQmxvY2soZW5kQmxvY2suZ2V0TmV4dFNpYmxpbmdLZXkoKSwgYmxvY2tzLCBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIHByZXZTaWJsaW5nOiBnZXRQcmV2VmFsaWRTaWJsaW5nKGVuZEJsb2NrLCBibG9ja3MsIG9yaWdpbmFsQmxvY2tNYXApXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBlbmQgYmxvY2sgcHJldlxuICAgIHRyYW5zZm9ybUJsb2NrKGVuZEJsb2NrLmdldFByZXZTaWJsaW5nS2V5KCksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICBuZXh0U2libGluZzogZW5kQmxvY2suZ2V0TmV4dFNpYmxpbmdLZXkoKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgZW5kIGJsb2NrIHBhcmVudCBhbmNlc3RvcnNcbiAgICBnZXRBbmNlc3RvcnNLZXlzKGVuZEJsb2NrLmdldEtleSgpLCBvcmlnaW5hbEJsb2NrTWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJlbnRLZXkpIHtcbiAgICAgIHRyYW5zZm9ybUJsb2NrKHBhcmVudEtleSwgYmxvY2tzLCBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgICBjaGlsZHJlbjogYmxvY2suZ2V0Q2hpbGRLZXlzKCkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBibG9ja3MuZ2V0KGtleSk7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV4dFNpYmxpbmc6IGdldE5leHRWYWxpZFNpYmxpbmcoYmxvY2ssIGJsb2Nrcywgb3JpZ2luYWxCbG9ja01hcCksXG4gICAgICAgICAgcHJldlNpYmxpbmc6IGdldFByZXZWYWxpZFNpYmxpbmcoYmxvY2ssIGJsb2Nrcywgb3JpZ2luYWxCbG9ja01hcClcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBuZXh0IGRlbGltaXRlcnMgYWxsIHRoZSB3YXkgdG8gYSByb290IGRlbGltaXRlclxuICAgIGdldE5leHREZWxpbWl0ZXJzQmxvY2tLZXlzKGVuZEJsb2NrLCBvcmlnaW5hbEJsb2NrTWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChkZWxpbWl0ZXJLZXkpIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1CbG9jayhkZWxpbWl0ZXJLZXksIGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgICAgbmV4dFNpYmxpbmc6IGdldE5leHRWYWxpZFNpYmxpbmcoYmxvY2ssIGJsb2Nrcywgb3JpZ2luYWxCbG9ja01hcCksXG4gICAgICAgICAgcHJldlNpYmxpbmc6IGdldFByZXZWYWxpZFNpYmxpbmcoYmxvY2ssIGJsb2Nrcywgb3JpZ2luYWxCbG9ja01hcClcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG52YXIgcmVtb3ZlUmFuZ2VGcm9tQ29udGVudFN0YXRlID0gZnVuY3Rpb24gcmVtb3ZlUmFuZ2VGcm9tQ29udGVudFN0YXRlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUpIHtcbiAgaWYgKHNlbGVjdGlvblN0YXRlLmlzQ29sbGFwc2VkKCkpIHtcbiAgICByZXR1cm4gY29udGVudFN0YXRlO1xuICB9XG5cbiAgdmFyIGJsb2NrTWFwID0gY29udGVudFN0YXRlLmdldEJsb2NrTWFwKCk7XG4gIHZhciBzdGFydEtleSA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0S2V5KCk7XG4gIHZhciBzdGFydE9mZnNldCA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0T2Zmc2V0KCk7XG4gIHZhciBlbmRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRFbmRLZXkoKTtcbiAgdmFyIGVuZE9mZnNldCA9IHNlbGVjdGlvblN0YXRlLmdldEVuZE9mZnNldCgpO1xuXG4gIHZhciBzdGFydEJsb2NrID0gYmxvY2tNYXAuZ2V0KHN0YXJ0S2V5KTtcbiAgdmFyIGVuZEJsb2NrID0gYmxvY2tNYXAuZ2V0KGVuZEtleSk7XG5cbiAgLy8gd2UgYXNzdW1lIHRoYXQgQ29udGVudEJsb2NrTm9kZSBhbmQgQ29udGVudEJsb2NrcyBhcmUgbm90IG1peGVkIHRvZ2V0aGVyXG4gIHZhciBpc0V4cGVyaW1lbnRhbFRyZWVCbG9jayA9IHN0YXJ0QmxvY2sgaW5zdGFuY2VvZiBDb250ZW50QmxvY2tOb2RlO1xuXG4gIC8vIHVzZWQgdG8gcmV0YWluIGJsb2NrcyB0aGF0IHNob3VsZCBub3QgYmUgZGVsZXRlZCB0byBhdm9pZCBvcnBoYW4gY2hpbGRyZW5cbiAgdmFyIHBhcmVudEFuY2VzdG9ycyA9IFtdO1xuXG4gIGlmIChpc0V4cGVyaW1lbnRhbFRyZWVCbG9jaykge1xuICAgIHZhciBlbmRCbG9ja2NoaWxkcmVuS2V5cyA9IGVuZEJsb2NrLmdldENoaWxkS2V5cygpO1xuICAgIHZhciBlbmRCbG9ja0FuY2VzdG9ycyA9IGdldEFuY2VzdG9yc0tleXMoZW5kS2V5LCBibG9ja01hcCk7XG5cbiAgICAvLyBlbmRCbG9jayBoYXMgdW5zZWxlY3RlZCBzaWJibGluZ3Mgc28gd2UgY2FuIG5vdCByZW1vdmUgaXRzIGFuY2VzdG9ycyBwYXJlbnRzXG4gICAgaWYgKGVuZEJsb2NrLmdldE5leHRTaWJsaW5nS2V5KCkpIHtcbiAgICAgIHBhcmVudEFuY2VzdG9ycyA9IHBhcmVudEFuY2VzdG9ycy5jb25jYXQoZW5kQmxvY2tBbmNlc3RvcnMpO1xuICAgIH1cblxuICAgIC8vIGVuZEJsb2NrIGhhcyBjaGlsZHJlbiBzbyBjYW4gbm90IHJlbW92ZSB0aGlzIGJsb2NrIG9yIGFueSBvZiBpdHMgYW5jZXN0b3JzXG4gICAgaWYgKCFlbmRCbG9ja2NoaWxkcmVuS2V5cy5pc0VtcHR5KCkpIHtcbiAgICAgIHBhcmVudEFuY2VzdG9ycyA9IHBhcmVudEFuY2VzdG9ycy5jb25jYXQoZW5kQmxvY2tBbmNlc3RvcnMuY29uY2F0KFtlbmRLZXldKSk7XG4gICAgfVxuXG4gICAgLy8gd2UgbmVlZCB0byByZXRhaW4gYWxsIGFuY2VzdG9ycyBvZiB0aGUgbmV4dCBkZWxpbWl0ZXIgYmxvY2tcbiAgICBwYXJlbnRBbmNlc3RvcnMgPSBwYXJlbnRBbmNlc3RvcnMuY29uY2F0KGdldEFuY2VzdG9yc0tleXMoZ2V0TmV4dERlbGltaXRlckJsb2NrS2V5KGVuZEJsb2NrLCBibG9ja01hcCksIGJsb2NrTWFwKSk7XG4gIH1cblxuICB2YXIgY2hhcmFjdGVyTGlzdCA9IHZvaWQgMDtcblxuICBpZiAoc3RhcnRCbG9jayA9PT0gZW5kQmxvY2spIHtcbiAgICBjaGFyYWN0ZXJMaXN0ID0gcmVtb3ZlRnJvbUxpc3Qoc3RhcnRCbG9jay5nZXRDaGFyYWN0ZXJMaXN0KCksIHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpO1xuICB9IGVsc2Uge1xuICAgIGNoYXJhY3Rlckxpc3QgPSBzdGFydEJsb2NrLmdldENoYXJhY3Rlckxpc3QoKS5zbGljZSgwLCBzdGFydE9mZnNldCkuY29uY2F0KGVuZEJsb2NrLmdldENoYXJhY3Rlckxpc3QoKS5zbGljZShlbmRPZmZzZXQpKTtcbiAgfVxuXG4gIHZhciBtb2RpZmllZFN0YXJ0ID0gc3RhcnRCbG9jay5tZXJnZSh7XG4gICAgdGV4dDogc3RhcnRCbG9jay5nZXRUZXh0KCkuc2xpY2UoMCwgc3RhcnRPZmZzZXQpICsgZW5kQmxvY2suZ2V0VGV4dCgpLnNsaWNlKGVuZE9mZnNldCksXG4gICAgY2hhcmFjdGVyTGlzdDogY2hhcmFjdGVyTGlzdFxuICB9KTtcblxuICB2YXIgbmV3QmxvY2tzID0gYmxvY2tNYXAudG9TZXEoKS5za2lwVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gc3RhcnRLZXk7XG4gIH0pLnRha2VVbnRpbChmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBrID09PSBlbmRLZXk7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBwYXJlbnRBbmNlc3RvcnMuaW5kZXhPZihrKSA9PT0gLTE7XG4gIH0pLmNvbmNhdChNYXAoW1tlbmRLZXksIG51bGxdXSkpLm1hcChmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBrID09PSBzdGFydEtleSA/IG1vZGlmaWVkU3RhcnQgOiBudWxsO1xuICB9KTtcblxuICB2YXIgdXBkYXRlZEJsb2NrTWFwID0gYmxvY2tNYXAubWVyZ2UobmV3QmxvY2tzKS5maWx0ZXIoZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgcmV0dXJuICEhYmxvY2s7XG4gIH0pO1xuXG4gIGlmIChpc0V4cGVyaW1lbnRhbFRyZWVCbG9jaykge1xuICAgIHVwZGF0ZWRCbG9ja01hcCA9IHVwZGF0ZUJsb2NrTWFwTGlua3ModXBkYXRlZEJsb2NrTWFwLCBzdGFydEJsb2NrLCBlbmRCbG9jaywgYmxvY2tNYXApO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRlbnRTdGF0ZS5tZXJnZSh7XG4gICAgYmxvY2tNYXA6IHVwZGF0ZWRCbG9ja01hcCxcbiAgICBzZWxlY3Rpb25CZWZvcmU6IHNlbGVjdGlvblN0YXRlLFxuICAgIHNlbGVjdGlvbkFmdGVyOiBzZWxlY3Rpb25TdGF0ZS5tZXJnZSh7XG4gICAgICBhbmNob3JLZXk6IHN0YXJ0S2V5LFxuICAgICAgYW5jaG9yT2Zmc2V0OiBzdGFydE9mZnNldCxcbiAgICAgIGZvY3VzS2V5OiBzdGFydEtleSxcbiAgICAgIGZvY3VzT2Zmc2V0OiBzdGFydE9mZnNldCxcbiAgICAgIGlzQmFja3dhcmQ6IGZhbHNlXG4gICAgfSlcbiAgfSk7XG59O1xuXG4vKipcbiAqIE1haW50YWluIHBlcnNpc3RlbmNlIGZvciB0YXJnZXQgbGlzdCB3aGVuIHJlbW92aW5nIGNoYXJhY3RlcnMgb24gdGhlXG4gKiBoZWFkIGFuZCB0YWlsIG9mIHRoZSBjaGFyYWN0ZXIgbGlzdC5cbiAqL1xudmFyIHJlbW92ZUZyb21MaXN0ID0gZnVuY3Rpb24gcmVtb3ZlRnJvbUxpc3QodGFyZ2V0TGlzdCwgc3RhcnRPZmZzZXQsIGVuZE9mZnNldCkge1xuICBpZiAoc3RhcnRPZmZzZXQgPT09IDApIHtcbiAgICB3aGlsZSAoc3RhcnRPZmZzZXQgPCBlbmRPZmZzZXQpIHtcbiAgICAgIHRhcmdldExpc3QgPSB0YXJnZXRMaXN0LnNoaWZ0KCk7XG4gICAgICBzdGFydE9mZnNldCsrO1xuICAgIH1cbiAgfSBlbHNlIGlmIChlbmRPZmZzZXQgPT09IHRhcmdldExpc3QuY291bnQoKSkge1xuICAgIHdoaWxlIChlbmRPZmZzZXQgPiBzdGFydE9mZnNldCkge1xuICAgICAgdGFyZ2V0TGlzdCA9IHRhcmdldExpc3QucG9wKCk7XG4gICAgICBlbmRPZmZzZXQtLTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGhlYWQgPSB0YXJnZXRMaXN0LnNsaWNlKDAsIHN0YXJ0T2Zmc2V0KTtcbiAgICB2YXIgdGFpbCA9IHRhcmdldExpc3Quc2xpY2UoZW5kT2Zmc2V0KTtcbiAgICB0YXJnZXRMaXN0ID0gaGVhZC5jb25jYXQodGFpbCkudG9MaXN0KCk7XG4gIH1cbiAgcmV0dXJuIHRhcmdldExpc3Q7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZVJhbmdlRnJvbUNvbnRlbnRTdGF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG1vZGlmeUJsb2NrRm9yQ29udGVudFN0YXRlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcblxudmFyIE1hcCA9IEltbXV0YWJsZS5NYXA7XG5cblxuZnVuY3Rpb24gbW9kaWZ5QmxvY2tGb3JDb250ZW50U3RhdGUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgb3BlcmF0aW9uKSB7XG4gIHZhciBzdGFydEtleSA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0S2V5KCk7XG4gIHZhciBlbmRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRFbmRLZXkoKTtcbiAgdmFyIGJsb2NrTWFwID0gY29udGVudFN0YXRlLmdldEJsb2NrTWFwKCk7XG4gIHZhciBuZXdCbG9ja3MgPSBibG9ja01hcC50b1NlcSgpLnNraXBVbnRpbChmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBrID09PSBzdGFydEtleTtcbiAgfSkudGFrZVVudGlsKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgcmV0dXJuIGsgPT09IGVuZEtleTtcbiAgfSkuY29uY2F0KE1hcChbW2VuZEtleSwgYmxvY2tNYXAuZ2V0KGVuZEtleSldXSkpLm1hcChvcGVyYXRpb24pO1xuXG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiBibG9ja01hcC5tZXJnZShuZXdCbG9ja3MpLFxuICAgIHNlbGVjdGlvbkJlZm9yZTogc2VsZWN0aW9uU3RhdGUsXG4gICAgc2VsZWN0aW9uQWZ0ZXI6IHNlbGVjdGlvblN0YXRlXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vZGlmeUJsb2NrRm9yQ29udGVudFN0YXRlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaW5zZXJ0VGV4dEludG9Db250ZW50U3RhdGVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG52YXIgaW5zZXJ0SW50b0xpc3QgPSByZXF1aXJlKCcuL2luc2VydEludG9MaXN0Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBSZXBlYXQgPSBJbW11dGFibGUuUmVwZWF0O1xuXG5cbmZ1bmN0aW9uIGluc2VydFRleHRJbnRvQ29udGVudFN0YXRlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIHRleHQsIGNoYXJhY3Rlck1ldGFkYXRhKSB7XG4gICFzZWxlY3Rpb25TdGF0ZS5pc0NvbGxhcHNlZCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2BpbnNlcnRUZXh0YCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2l0aCBhIGNvbGxhcHNlZCByYW5nZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgdmFyIGxlbiA9IHRleHQubGVuZ3RoO1xuICBpZiAoIWxlbikge1xuICAgIHJldHVybiBjb250ZW50U3RhdGU7XG4gIH1cblxuICB2YXIgYmxvY2tNYXAgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tNYXAoKTtcbiAgdmFyIGtleSA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0S2V5KCk7XG4gIHZhciBvZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgYmxvY2sgPSBibG9ja01hcC5nZXQoa2V5KTtcbiAgdmFyIGJsb2NrVGV4dCA9IGJsb2NrLmdldFRleHQoKTtcblxuICB2YXIgbmV3QmxvY2sgPSBibG9jay5tZXJnZSh7XG4gICAgdGV4dDogYmxvY2tUZXh0LnNsaWNlKDAsIG9mZnNldCkgKyB0ZXh0ICsgYmxvY2tUZXh0LnNsaWNlKG9mZnNldCwgYmxvY2suZ2V0TGVuZ3RoKCkpLFxuICAgIGNoYXJhY3Rlckxpc3Q6IGluc2VydEludG9MaXN0KGJsb2NrLmdldENoYXJhY3Rlckxpc3QoKSwgUmVwZWF0KGNoYXJhY3Rlck1ldGFkYXRhLCBsZW4pLnRvTGlzdCgpLCBvZmZzZXQpXG4gIH0pO1xuXG4gIHZhciBuZXdPZmZzZXQgPSBvZmZzZXQgKyBsZW47XG5cbiAgcmV0dXJuIGNvbnRlbnRTdGF0ZS5tZXJnZSh7XG4gICAgYmxvY2tNYXA6IGJsb2NrTWFwLnNldChrZXksIG5ld0Jsb2NrKSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGUubWVyZ2Uoe1xuICAgICAgYW5jaG9yT2Zmc2V0OiBuZXdPZmZzZXQsXG4gICAgICBmb2N1c09mZnNldDogbmV3T2Zmc2V0XG4gICAgfSlcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0VGV4dEludG9Db250ZW50U3RhdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpbnNlcnRGcmFnbWVudEludG9Db250ZW50U3RhdGVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEJsb2NrTWFwQnVpbGRlciA9IHJlcXVpcmUoJy4vQmxvY2tNYXBCdWlsZGVyJyk7XG52YXIgQ29udGVudEJsb2NrTm9kZSA9IHJlcXVpcmUoJy4vQ29udGVudEJsb2NrTm9kZScpO1xudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG52YXIgaW5zZXJ0SW50b0xpc3QgPSByZXF1aXJlKCcuL2luc2VydEludG9MaXN0Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgcmFuZG9taXplQmxvY2tNYXBLZXlzID0gcmVxdWlyZSgnLi9yYW5kb21pemVCbG9ja01hcEtleXMnKTtcblxudmFyIExpc3QgPSBJbW11dGFibGUuTGlzdDtcblxuXG52YXIgdXBkYXRlRXhpc3RpbmdCbG9jayA9IGZ1bmN0aW9uIHVwZGF0ZUV4aXN0aW5nQmxvY2soY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgYmxvY2tNYXAsIGZyYWdtZW50QmxvY2ssIHRhcmdldEtleSwgdGFyZ2V0T2Zmc2V0KSB7XG4gIHZhciB0YXJnZXRCbG9jayA9IGJsb2NrTWFwLmdldCh0YXJnZXRLZXkpO1xuICB2YXIgdGV4dCA9IHRhcmdldEJsb2NrLmdldFRleHQoKTtcbiAgdmFyIGNoYXJzID0gdGFyZ2V0QmxvY2suZ2V0Q2hhcmFjdGVyTGlzdCgpO1xuICB2YXIgZmluYWxLZXkgPSB0YXJnZXRLZXk7XG4gIHZhciBmaW5hbE9mZnNldCA9IHRhcmdldE9mZnNldCArIGZyYWdtZW50QmxvY2suZ2V0VGV4dCgpLmxlbmd0aDtcblxuICB2YXIgbmV3QmxvY2sgPSB0YXJnZXRCbG9jay5tZXJnZSh7XG4gICAgdGV4dDogdGV4dC5zbGljZSgwLCB0YXJnZXRPZmZzZXQpICsgZnJhZ21lbnRCbG9jay5nZXRUZXh0KCkgKyB0ZXh0LnNsaWNlKHRhcmdldE9mZnNldCksXG4gICAgY2hhcmFjdGVyTGlzdDogaW5zZXJ0SW50b0xpc3QoY2hhcnMsIGZyYWdtZW50QmxvY2suZ2V0Q2hhcmFjdGVyTGlzdCgpLCB0YXJnZXRPZmZzZXQpLFxuICAgIGRhdGE6IGZyYWdtZW50QmxvY2suZ2V0RGF0YSgpXG4gIH0pO1xuXG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiBibG9ja01hcC5zZXQodGFyZ2V0S2V5LCBuZXdCbG9jayksXG4gICAgc2VsZWN0aW9uQmVmb3JlOiBzZWxlY3Rpb25TdGF0ZSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGUubWVyZ2Uoe1xuICAgICAgYW5jaG9yS2V5OiBmaW5hbEtleSxcbiAgICAgIGFuY2hvck9mZnNldDogZmluYWxPZmZzZXQsXG4gICAgICBmb2N1c0tleTogZmluYWxLZXksXG4gICAgICBmb2N1c09mZnNldDogZmluYWxPZmZzZXQsXG4gICAgICBpc0JhY2t3YXJkOiBmYWxzZVxuICAgIH0pXG4gIH0pO1xufTtcblxuLyoqXG4gKiBBcHBlbmRzIHRleHQvY2hhcmFjdGVyTGlzdCBmcm9tIHRoZSBmcmFnbWVudCBmaXJzdCBibG9jayB0b1xuICogdGFyZ2V0IGJsb2NrLlxuICovXG52YXIgdXBkYXRlSGVhZCA9IGZ1bmN0aW9uIHVwZGF0ZUhlYWQoYmxvY2ssIHRhcmdldE9mZnNldCwgZnJhZ21lbnQpIHtcbiAgdmFyIHRleHQgPSBibG9jay5nZXRUZXh0KCk7XG4gIHZhciBjaGFycyA9IGJsb2NrLmdldENoYXJhY3Rlckxpc3QoKTtcblxuICAvLyBNb2RpZnkgaGVhZCBwb3J0aW9uIG9mIGJsb2NrLlxuICB2YXIgaGVhZFRleHQgPSB0ZXh0LnNsaWNlKDAsIHRhcmdldE9mZnNldCk7XG4gIHZhciBoZWFkQ2hhcmFjdGVycyA9IGNoYXJzLnNsaWNlKDAsIHRhcmdldE9mZnNldCk7XG4gIHZhciBhcHBlbmRUb0hlYWQgPSBmcmFnbWVudC5maXJzdCgpO1xuXG4gIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgdGV4dDogaGVhZFRleHQgKyBhcHBlbmRUb0hlYWQuZ2V0VGV4dCgpLFxuICAgIGNoYXJhY3Rlckxpc3Q6IGhlYWRDaGFyYWN0ZXJzLmNvbmNhdChhcHBlbmRUb0hlYWQuZ2V0Q2hhcmFjdGVyTGlzdCgpKSxcbiAgICB0eXBlOiBoZWFkVGV4dCA/IGJsb2NrLmdldFR5cGUoKSA6IGFwcGVuZFRvSGVhZC5nZXRUeXBlKCksXG4gICAgZGF0YTogYXBwZW5kVG9IZWFkLmdldERhdGEoKVxuICB9KTtcbn07XG5cbi8qKlxuICogQXBwZW5kcyBvZmZzZXQgdGV4dC9jaGFyYWN0ZXJMaXN0IGZyb20gdGhlIHRhcmdldCBibG9jayB0byB0aGUgbGFzdFxuICogZnJhZ21lbnQgYmxvY2suXG4gKi9cbnZhciB1cGRhdGVUYWlsID0gZnVuY3Rpb24gdXBkYXRlVGFpbChibG9jaywgdGFyZ2V0T2Zmc2V0LCBmcmFnbWVudCkge1xuICAvLyBNb2RpZnkgdGFpbCBwb3J0aW9uIG9mIGJsb2NrLlxuICB2YXIgdGV4dCA9IGJsb2NrLmdldFRleHQoKTtcbiAgdmFyIGNoYXJzID0gYmxvY2suZ2V0Q2hhcmFjdGVyTGlzdCgpO1xuXG4gIC8vIE1vZGlmeSBoZWFkIHBvcnRpb24gb2YgYmxvY2suXG4gIHZhciBibG9ja1NpemUgPSB0ZXh0Lmxlbmd0aDtcbiAgdmFyIHRhaWxUZXh0ID0gdGV4dC5zbGljZSh0YXJnZXRPZmZzZXQsIGJsb2NrU2l6ZSk7XG4gIHZhciB0YWlsQ2hhcmFjdGVycyA9IGNoYXJzLnNsaWNlKHRhcmdldE9mZnNldCwgYmxvY2tTaXplKTtcbiAgdmFyIHByZXBlbmRUb1RhaWwgPSBmcmFnbWVudC5sYXN0KCk7XG5cbiAgcmV0dXJuIHByZXBlbmRUb1RhaWwubWVyZ2Uoe1xuICAgIHRleHQ6IHByZXBlbmRUb1RhaWwuZ2V0VGV4dCgpICsgdGFpbFRleHQsXG4gICAgY2hhcmFjdGVyTGlzdDogcHJlcGVuZFRvVGFpbC5nZXRDaGFyYWN0ZXJMaXN0KCkuY29uY2F0KHRhaWxDaGFyYWN0ZXJzKSxcbiAgICBkYXRhOiBwcmVwZW5kVG9UYWlsLmdldERhdGEoKVxuICB9KTtcbn07XG5cbnZhciBnZXRSb290QmxvY2tzID0gZnVuY3Rpb24gZ2V0Um9vdEJsb2NrcyhibG9jaywgYmxvY2tNYXApIHtcbiAgdmFyIGhlYWRLZXkgPSBibG9jay5nZXRLZXkoKTtcbiAgdmFyIHJvb3RCbG9jayA9IGJsb2NrO1xuICB2YXIgcm9vdEJsb2NrcyA9IFtdO1xuXG4gIC8vIHNvbWV0aW1lcyB0aGUgZnJhZ21lbnQgaGVhZCBibG9jayB3aWxsIG5vdCBiZSBwYXJ0IG9mIHRoZSBibG9ja01hcCBpdHNlbGYgdGhpcyBjYW4gaGFwcGVuIHdoZW5cbiAgLy8gdGhlIGZyYWdtZW50IGhlYWQgaXMgdXNlZCB0byB1cGRhdGUgdGhlIHRhcmdldCBibG9jaywgaG93ZXZlciB3aGVuIHRoaXMgZG9lcyBub3QgaGFwcGVuIHdlIG5lZWRcbiAgLy8gdG8gbWFrZSBzdXJlIHRoYXQgd2UgaW5jbHVkZSBpdCBvbiB0aGUgcm9vdEJsb2NrcyBzaW5jZSB0aGUgZmlyc3QgYmxvY2sgb2YgYSBmcmFnbWVudCBpcyBhbHdheXMgYVxuICAvLyBmcmFnbWVudCByb290IGJsb2NrXG4gIGlmIChibG9ja01hcC5nZXQoaGVhZEtleSkpIHtcbiAgICByb290QmxvY2tzLnB1c2goaGVhZEtleSk7XG4gIH1cblxuICB3aGlsZSAocm9vdEJsb2NrICYmIHJvb3RCbG9jay5nZXROZXh0U2libGluZ0tleSgpKSB7XG4gICAgdmFyIGxhc3RTaWJsaW5nS2V5ID0gcm9vdEJsb2NrLmdldE5leHRTaWJsaW5nS2V5KCk7XG5cbiAgICBpZiAoIWxhc3RTaWJsaW5nS2V5KSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICByb290QmxvY2tzLnB1c2gobGFzdFNpYmxpbmdLZXkpO1xuICAgIHJvb3RCbG9jayA9IGJsb2NrTWFwLmdldChsYXN0U2libGluZ0tleSk7XG4gIH1cblxuICByZXR1cm4gcm9vdEJsb2Nrcztcbn07XG5cbnZhciB1cGRhdGVCbG9ja01hcExpbmtzID0gZnVuY3Rpb24gdXBkYXRlQmxvY2tNYXBMaW5rcyhibG9ja01hcCwgb3JpZ2luYWxCbG9ja01hcCwgdGFyZ2V0QmxvY2ssIGZyYWdtZW50SGVhZEJsb2NrKSB7XG4gIHJldHVybiBibG9ja01hcC53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChibG9ja01hcFN0YXRlKSB7XG4gICAgdmFyIHRhcmdldEtleSA9IHRhcmdldEJsb2NrLmdldEtleSgpO1xuICAgIHZhciBoZWFkS2V5ID0gZnJhZ21lbnRIZWFkQmxvY2suZ2V0S2V5KCk7XG4gICAgdmFyIHRhcmdldE5leHRLZXkgPSB0YXJnZXRCbG9jay5nZXROZXh0U2libGluZ0tleSgpO1xuICAgIHZhciB0YXJnZXRQYXJlbnRLZXkgPSB0YXJnZXRCbG9jay5nZXRQYXJlbnRLZXkoKTtcbiAgICB2YXIgZnJhZ21lbnRSb290QmxvY2tzID0gZ2V0Um9vdEJsb2NrcyhmcmFnbWVudEhlYWRCbG9jaywgYmxvY2tNYXApO1xuICAgIHZhciBsYXN0Um9vdEZyYWdtZW50QmxvY2tLZXkgPSBmcmFnbWVudFJvb3RCbG9ja3NbZnJhZ21lbnRSb290QmxvY2tzLmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKGJsb2NrTWFwU3RhdGUuZ2V0KGhlYWRLZXkpKSB7XG4gICAgICAvLyB1cGRhdGUgdGhlIGZyYWdtZW50IGhlYWQgd2hlbiBpdCBpcyBwYXJ0IG9mIHRoZSBibG9ja01hcCBvdGhlcndpc2VcbiAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW3RhcmdldEtleSwgJ25leHRTaWJsaW5nJ10sIGhlYWRLZXkpO1xuICAgICAgYmxvY2tNYXBTdGF0ZS5zZXRJbihbaGVhZEtleSwgJ3ByZXZTaWJsaW5nJ10sIHRhcmdldEtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZSB0aGUgdGFyZ2V0IGJsb2NrIHRoYXQgaGFkIHRoZSBmcmFnbWVudCBoZWFkIGNvbnRlbnRzIG1lcmdlZCBpbnRvIGl0XG4gICAgICBibG9ja01hcFN0YXRlLnNldEluKFt0YXJnZXRLZXksICduZXh0U2libGluZyddLCBmcmFnbWVudEhlYWRCbG9jay5nZXROZXh0U2libGluZ0tleSgpKTtcbiAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW2ZyYWdtZW50SGVhZEJsb2NrLmdldE5leHRTaWJsaW5nS2V5KCksICdwcmV2U2libGluZyddLCB0YXJnZXRLZXkpO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSB0aGUgbGFzdCByb290IGJsb2NrIGZyYWdtZW50XG4gICAgYmxvY2tNYXBTdGF0ZS5zZXRJbihbbGFzdFJvb3RGcmFnbWVudEJsb2NrS2V5LCAnbmV4dFNpYmxpbmcnXSwgdGFyZ2V0TmV4dEtleSk7XG5cbiAgICAvLyB1cGRhdGUgdGhlIG9yaWdpbmFsIHRhcmdldCBuZXh0IGJsb2NrXG4gICAgaWYgKHRhcmdldE5leHRLZXkpIHtcbiAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW3RhcmdldE5leHRLZXksICdwcmV2U2libGluZyddLCBsYXN0Um9vdEZyYWdtZW50QmxvY2tLZXkpO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSBmcmFnbWVudCBwYXJlbnQgbGlua3NcbiAgICBmcmFnbWVudFJvb3RCbG9ja3MuZm9yRWFjaChmdW5jdGlvbiAoYmxvY2tLZXkpIHtcbiAgICAgIHJldHVybiBibG9ja01hcFN0YXRlLnNldEluKFtibG9ja0tleSwgJ3BhcmVudCddLCB0YXJnZXRQYXJlbnRLZXkpO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIHRhcmdldEJsb2NrIHBhcmVudCBjaGlsZCBsaW5rc1xuICAgIGlmICh0YXJnZXRQYXJlbnRLZXkpIHtcbiAgICAgIHZhciB0YXJnZXRQYXJlbnQgPSBibG9ja01hcC5nZXQodGFyZ2V0UGFyZW50S2V5KTtcbiAgICAgIHZhciBvcmlnaW5hbFRhcmdldFBhcmVudENoaWxkS2V5cyA9IHRhcmdldFBhcmVudC5nZXRDaGlsZEtleXMoKTtcblxuICAgICAgdmFyIHRhcmdldEJsb2NrSW5kZXggPSBvcmlnaW5hbFRhcmdldFBhcmVudENoaWxkS2V5cy5pbmRleE9mKHRhcmdldEtleSk7XG4gICAgICB2YXIgaW5zZXJ0aW9uSW5kZXggPSB0YXJnZXRCbG9ja0luZGV4ICsgMTtcblxuICAgICAgdmFyIG5ld0NoaWxkcmVuS2V5c0FycmF5ID0gb3JpZ2luYWxUYXJnZXRQYXJlbnRDaGlsZEtleXMudG9BcnJheSgpO1xuXG4gICAgICAvLyBpbnNlcnQgZnJhZ21lbnQgY2hpbGRyZW5cbiAgICAgIG5ld0NoaWxkcmVuS2V5c0FycmF5LnNwbGljZS5hcHBseShuZXdDaGlsZHJlbktleXNBcnJheSwgW2luc2VydGlvbkluZGV4LCAwXS5jb25jYXQoZnJhZ21lbnRSb290QmxvY2tzKSk7XG5cbiAgICAgIGJsb2NrTWFwU3RhdGUuc2V0SW4oW3RhcmdldFBhcmVudEtleSwgJ2NoaWxkcmVuJ10sIExpc3QobmV3Q2hpbGRyZW5LZXlzQXJyYXkpKTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGluc2VydEZyYWdtZW50ID0gZnVuY3Rpb24gaW5zZXJ0RnJhZ21lbnQoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgYmxvY2tNYXAsIGZyYWdtZW50LCB0YXJnZXRLZXksIHRhcmdldE9mZnNldCkge1xuICB2YXIgaXNUcmVlQmFzZWRCbG9ja01hcCA9IGJsb2NrTWFwLmZpcnN0KCkgaW5zdGFuY2VvZiBDb250ZW50QmxvY2tOb2RlO1xuICB2YXIgbmV3QmxvY2tBcnIgPSBbXTtcbiAgdmFyIGZyYWdtZW50U2l6ZSA9IGZyYWdtZW50LnNpemU7XG4gIHZhciB0YXJnZXQgPSBibG9ja01hcC5nZXQodGFyZ2V0S2V5KTtcbiAgdmFyIGhlYWQgPSBmcmFnbWVudC5maXJzdCgpO1xuICB2YXIgdGFpbCA9IGZyYWdtZW50Lmxhc3QoKTtcbiAgdmFyIGZpbmFsT2Zmc2V0ID0gdGFpbC5nZXRMZW5ndGgoKTtcbiAgdmFyIGZpbmFsS2V5ID0gdGFpbC5nZXRLZXkoKTtcbiAgdmFyIHNob3VsZE5vdFVwZGF0ZUZyb21GcmFnbWVudEJsb2NrID0gaXNUcmVlQmFzZWRCbG9ja01hcCAmJiAoIXRhcmdldC5nZXRDaGlsZEtleXMoKS5pc0VtcHR5KCkgfHwgIWhlYWQuZ2V0Q2hpbGRLZXlzKCkuaXNFbXB0eSgpKTtcblxuICBibG9ja01hcC5mb3JFYWNoKGZ1bmN0aW9uIChibG9jaywgYmxvY2tLZXkpIHtcbiAgICBpZiAoYmxvY2tLZXkgIT09IHRhcmdldEtleSkge1xuICAgICAgbmV3QmxvY2tBcnIucHVzaChibG9jayk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZE5vdFVwZGF0ZUZyb21GcmFnbWVudEJsb2NrKSB7XG4gICAgICBuZXdCbG9ja0Fyci5wdXNoKGJsb2NrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3QmxvY2tBcnIucHVzaCh1cGRhdGVIZWFkKGJsb2NrLCB0YXJnZXRPZmZzZXQsIGZyYWdtZW50KSk7XG4gICAgfVxuXG4gICAgLy8gSW5zZXJ0IGZyYWdtZW50IGJsb2NrcyBhZnRlciB0aGUgaGVhZCBhbmQgYmVmb3JlIHRoZSB0YWlsLlxuICAgIGZyYWdtZW50XG4gICAgLy8gd2hlbiB3ZSBhcmUgdXBkYXRpbmcgdGhlIHRhcmdldCBibG9jayB3aXRoIHRoZSBoZWFkIGZyYWdtZW50IGJsb2NrIHdlIHNraXAgdGhlIGZpcnN0IGZyYWdtZW50XG4gICAgLy8gaGVhZCBzaW5jZSBpdHMgY29udGVudHMgaGF2ZSBhbHJlYWR5IGJlZW4gbWVyZ2VkIHdpdGggdGhlIHRhcmdldCBibG9jayBvdGhlcndpc2Ugd2UgaW5jbHVkZVxuICAgIC8vIHRoZSB3aG9sZSBmcmFnbWVudFxuICAgIC5zbGljZShzaG91bGROb3RVcGRhdGVGcm9tRnJhZ21lbnRCbG9jayA/IDAgOiAxLCBmcmFnbWVudFNpemUgLSAxKS5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnbWVudEJsb2NrKSB7XG4gICAgICByZXR1cm4gbmV3QmxvY2tBcnIucHVzaChmcmFnbWVudEJsb2NrKTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSB0YWlsXG4gICAgbmV3QmxvY2tBcnIucHVzaCh1cGRhdGVUYWlsKGJsb2NrLCB0YXJnZXRPZmZzZXQsIGZyYWdtZW50KSk7XG4gIH0pO1xuXG4gIHZhciB1cGRhdGVkQmxvY2tNYXAgPSBCbG9ja01hcEJ1aWxkZXIuY3JlYXRlRnJvbUFycmF5KG5ld0Jsb2NrQXJyKTtcblxuICBpZiAoaXNUcmVlQmFzZWRCbG9ja01hcCkge1xuICAgIHVwZGF0ZWRCbG9ja01hcCA9IHVwZGF0ZUJsb2NrTWFwTGlua3ModXBkYXRlZEJsb2NrTWFwLCBibG9ja01hcCwgdGFyZ2V0LCBoZWFkKTtcbiAgfVxuXG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiB1cGRhdGVkQmxvY2tNYXAsXG4gICAgc2VsZWN0aW9uQmVmb3JlOiBzZWxlY3Rpb25TdGF0ZSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGUubWVyZ2Uoe1xuICAgICAgYW5jaG9yS2V5OiBmaW5hbEtleSxcbiAgICAgIGFuY2hvck9mZnNldDogZmluYWxPZmZzZXQsXG4gICAgICBmb2N1c0tleTogZmluYWxLZXksXG4gICAgICBmb2N1c09mZnNldDogZmluYWxPZmZzZXQsXG4gICAgICBpc0JhY2t3YXJkOiBmYWxzZVxuICAgIH0pXG4gIH0pO1xufTtcblxudmFyIGluc2VydEZyYWdtZW50SW50b0NvbnRlbnRTdGF0ZSA9IGZ1bmN0aW9uIGluc2VydEZyYWdtZW50SW50b0NvbnRlbnRTdGF0ZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBmcmFnbWVudEJsb2NrTWFwKSB7XG4gICFzZWxlY3Rpb25TdGF0ZS5pc0NvbGxhcHNlZCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2BpbnNlcnRGcmFnbWVudGAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdpdGggYSBjb2xsYXBzZWQgc2VsZWN0aW9uIHN0YXRlLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICB2YXIgYmxvY2tNYXAgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tNYXAoKTtcbiAgdmFyIGZyYWdtZW50ID0gcmFuZG9taXplQmxvY2tNYXBLZXlzKGZyYWdtZW50QmxvY2tNYXApO1xuICB2YXIgdGFyZ2V0S2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIHRhcmdldE9mZnNldCA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0T2Zmc2V0KCk7XG5cbiAgdmFyIHRhcmdldEJsb2NrID0gYmxvY2tNYXAuZ2V0KHRhcmdldEtleSk7XG5cbiAgaWYgKHRhcmdldEJsb2NrIGluc3RhbmNlb2YgQ29udGVudEJsb2NrTm9kZSkge1xuICAgICF0YXJnZXRCbG9jay5nZXRDaGlsZEtleXMoKS5pc0VtcHR5KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnYGluc2VydEZyYWdtZW50YCBzaG91bGQgbm90IGJlIGNhbGxlZCB3aGVuIGEgY29udGFpbmVyIG5vZGUgaXMgc2VsZWN0ZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgLy8gV2hlbiB3ZSBpbnNlcnQgYSBmcmFnbWVudCB3aXRoIGEgc2luZ2xlIGJsb2NrIHdlIHNpbXBseSB1cGRhdGUgdGhlIHRhcmdldCBibG9ja1xuICAvLyB3aXRoIHRoZSBjb250ZW50cyBvZiB0aGUgaW5zZXJ0ZWQgZnJhZ21lbnQgYmxvY2tcbiAgaWYgKGZyYWdtZW50LnNpemUgPT09IDEpIHtcbiAgICByZXR1cm4gdXBkYXRlRXhpc3RpbmdCbG9jayhjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBibG9ja01hcCwgZnJhZ21lbnQuZmlyc3QoKSwgdGFyZ2V0S2V5LCB0YXJnZXRPZmZzZXQpO1xuICB9XG5cbiAgcmV0dXJuIGluc2VydEZyYWdtZW50KGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGJsb2NrTWFwLCBmcmFnbWVudCwgdGFyZ2V0S2V5LCB0YXJnZXRPZmZzZXQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRGcmFnbWVudEludG9Db250ZW50U3RhdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRSYW5nZXNGb3JEcmFmdEVudGl0eVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogT2J0YWluIHRoZSBzdGFydCBhbmQgZW5kIHBvc2l0aW9ucyBvZiB0aGUgcmFuZ2UgdGhhdCBoYXMgdGhlXG4gKiBzcGVjaWZpZWQgZW50aXR5IGFwcGxpZWQgdG8gaXQuXG4gKlxuICogRW50aXR5IGtleXMgYXJlIGFwcGxpZWQgb25seSB0byBjb250aWd1b3VzIHN0cmV0Y2hlcyBvZiB0ZXh0LCBzbyB0aGlzXG4gKiBtZXRob2Qgc2VhcmNoZXMgZm9yIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiB0aGUgZW50aXR5IGtleSBhbmQgcmV0dXJuc1xuICogdGhlIHN1YnNlcXVlbnQgcmFuZ2UuXG4gKi9cbmZ1bmN0aW9uIGdldFJhbmdlc0ZvckRyYWZ0RW50aXR5KGJsb2NrLCBrZXkpIHtcbiAgdmFyIHJhbmdlcyA9IFtdO1xuICBibG9jay5maW5kRW50aXR5UmFuZ2VzKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuZ2V0RW50aXR5KCkgPT09IGtleTtcbiAgfSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICByYW5nZXMucHVzaCh7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfSk7XG4gIH0pO1xuXG4gICEhIXJhbmdlcy5sZW5ndGggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRW50aXR5IGtleSBub3QgZm91bmQgaW4gdGhpcyByYW5nZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgcmV0dXJuIHJhbmdlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYW5nZXNGb3JEcmFmdEVudGl0eTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0RW50aXR5U2VnbWVudHNcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBJZGVudGlmeSB0aGUgcmFuZ2UgdG8gZGVsZXRlIGZyb20gYSBzZWdtZW50ZWQgZW50aXR5LlxuICpcbiAqIFJ1bGVzOlxuICpcbiAqICBFeGFtcGxlOiAnSm9obiBGLiBLZW5uZWR5J1xuICpcbiAqICAgLSBEZWxldGlvbiBmcm9tIHdpdGhpbiBhbnkgbm9uLXdoaXRlc3BhY2UgKGkuZS4gWydKb2huJywgJ0YuJywgJ0tlbm5lZHknXSlcbiAqICAgICB3aWxsIHJldHVybiB0aGUgcmFuZ2Ugb2YgdGhhdCB0ZXh0LlxuICpcbiAqICAgICAgICdKb2huIEYuIEtlbm5lZHknIC0+ICdKb2huIEYuJ1xuICogICAgICAgICAgICAgICAgICBeXG4gKlxuICogICAtIEZvcndhcmQgZGVsZXRpb24gb2Ygd2hpdGVzcGFjZSB3aWxsIHJlbW92ZSB0aGUgZm9sbG93aW5nIHNlY3Rpb246XG4gKlxuICogICAgICAgJ0pvaG4gRi4gS2VubmVkeScgLT4gJ0pvaG4gS2VubmVkeSdcbiAqICAgICAgICAgICAgXlxuICpcbiAqICAgLSBCYWNrd2FyZCBkZWxldGlvbiBvZiB3aGl0ZXNwYWNlIHdpbGwgcmVtb3ZlIHRoZSBwcmV2aW91cyBzZWN0aW9uOlxuICpcbiAqICAgICAgICdKb2huIEYuIEtlbm5lZHknIC0+ICdGLiBLZW5uZWR5J1xuICogICAgICAgICAgICBeXG4gKi9cbnZhciBEcmFmdEVudGl0eVNlZ21lbnRzID0ge1xuICBnZXRSZW1vdmFsUmFuZ2U6IGZ1bmN0aW9uIGdldFJlbW92YWxSYW5nZShzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kLCB0ZXh0LCBlbnRpdHlTdGFydCwgZGlyZWN0aW9uKSB7XG4gICAgdmFyIHNlZ21lbnRzID0gdGV4dC5zcGxpdCgnICcpO1xuICAgIHNlZ21lbnRzID0gc2VnbWVudHMubWFwKGZ1bmN0aW9uICggLypzdHJpbmcqL3NlZ21lbnQsIC8qbnVtYmVyKi9paSkge1xuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICAgIGlmIChpaSA+IDApIHtcbiAgICAgICAgICByZXR1cm4gJyAnICsgc2VnbWVudDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpaSA8IHNlZ21lbnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuIHNlZ21lbnQgKyAnICc7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VnbWVudDtcbiAgICB9KTtcblxuICAgIHZhciBzZWdtZW50U3RhcnQgPSBlbnRpdHlTdGFydDtcbiAgICB2YXIgc2VnbWVudEVuZDtcbiAgICB2YXIgc2VnbWVudDtcbiAgICB2YXIgcmVtb3ZhbFN0YXJ0ID0gbnVsbDtcbiAgICB2YXIgcmVtb3ZhbEVuZCA9IG51bGw7XG5cbiAgICBmb3IgKHZhciBqaiA9IDA7IGpqIDwgc2VnbWVudHMubGVuZ3RoOyBqaisrKSB7XG4gICAgICBzZWdtZW50ID0gc2VnbWVudHNbampdO1xuICAgICAgc2VnbWVudEVuZCA9IHNlZ21lbnRTdGFydCArIHNlZ21lbnQubGVuZ3RoO1xuXG4gICAgICAvLyBPdXIgc2VsZWN0aW9uIG92ZXJsYXBzIHRoaXMgc2VnbWVudC5cbiAgICAgIGlmIChzZWxlY3Rpb25TdGFydCA8IHNlZ21lbnRFbmQgJiYgc2VnbWVudFN0YXJ0IDwgc2VsZWN0aW9uRW5kKSB7XG4gICAgICAgIGlmIChyZW1vdmFsU3RhcnQgIT09IG51bGwpIHtcbiAgICAgICAgICByZW1vdmFsRW5kID0gc2VnbWVudEVuZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmFsU3RhcnQgPSBzZWdtZW50U3RhcnQ7XG4gICAgICAgICAgcmVtb3ZhbEVuZCA9IHNlZ21lbnRFbmQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVtb3ZhbFN0YXJ0ICE9PSBudWxsKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBzZWdtZW50U3RhcnQgPSBzZWdtZW50RW5kO1xuICAgIH1cblxuICAgIHZhciBlbnRpdHlFbmQgPSBlbnRpdHlTdGFydCArIHRleHQubGVuZ3RoO1xuICAgIHZhciBhdFN0YXJ0ID0gcmVtb3ZhbFN0YXJ0ID09PSBlbnRpdHlTdGFydDtcbiAgICB2YXIgYXRFbmQgPSByZW1vdmFsRW5kID09PSBlbnRpdHlFbmQ7XG5cbiAgICBpZiAoIWF0U3RhcnQgJiYgYXRFbmQgfHwgYXRTdGFydCAmJiAhYXRFbmQpIHtcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdmb3J3YXJkJykge1xuICAgICAgICBpZiAocmVtb3ZhbEVuZCAhPT0gZW50aXR5RW5kKSB7XG4gICAgICAgICAgcmVtb3ZhbEVuZCsrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlbW92YWxTdGFydCAhPT0gZW50aXR5U3RhcnQpIHtcbiAgICAgICAgcmVtb3ZhbFN0YXJ0LS07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiByZW1vdmFsU3RhcnQsXG4gICAgICBlbmQ6IHJlbW92YWxFbmRcbiAgICB9O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RW50aXR5U2VnbWVudHM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRDaGFyYWN0ZXJSZW1vdmFsUmFuZ2VcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0RW50aXR5U2VnbWVudHMgPSByZXF1aXJlKCcuL0RyYWZ0RW50aXR5U2VnbWVudHMnKTtcblxudmFyIGdldFJhbmdlc0ZvckRyYWZ0RW50aXR5ID0gcmVxdWlyZSgnLi9nZXRSYW5nZXNGb3JEcmFmdEVudGl0eScpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIEdpdmVuIGEgU2VsZWN0aW9uU3RhdGUgYW5kIGEgcmVtb3ZhbCBkaXJlY3Rpb24sIGRldGVybWluZSB0aGUgZW50aXJlIHJhbmdlXG4gKiB0aGF0IHNob3VsZCBiZSByZW1vdmVkIGZyb20gYSBDb250ZW50U3RhdGUuIFRoaXMgaXMgYmFzZWQgb24gYW55IGVudGl0aWVzXG4gKiB3aXRoaW4gdGhlIHRhcmdldCwgd2l0aCB0aGVpciBgbXV0YWJpbGl0eWAgdmFsdWVzIHRha2VuIGludG8gYWNjb3VudC5cbiAqXG4gKiBGb3IgaW5zdGFuY2UsIGlmIHdlIGFyZSBhdHRlbXB0aW5nIHRvIHJlbW92ZSBwYXJ0IG9mIGFuIFwiaW1tdXRhYmxlXCIgZW50aXR5XG4gKiByYW5nZSwgdGhlIGVudGlyZSBlbnRpdHkgbXVzdCBiZSByZW1vdmVkLiBUaGUgcmV0dXJuZWQgYFNlbGVjdGlvblN0YXRlYFxuICogd2lsbCBiZSBhZGp1c3RlZCBhY2NvcmRpbmdseS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q2hhcmFjdGVyUmVtb3ZhbFJhbmdlKGVudGl0eU1hcCwgc3RhcnRCbG9jaywgZW5kQmxvY2ssIHNlbGVjdGlvblN0YXRlLCBkaXJlY3Rpb24pIHtcbiAgdmFyIHN0YXJ0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIGVuZCA9IHNlbGVjdGlvblN0YXRlLmdldEVuZE9mZnNldCgpO1xuICB2YXIgc3RhcnRFbnRpdHlLZXkgPSBzdGFydEJsb2NrLmdldEVudGl0eUF0KHN0YXJ0KTtcbiAgdmFyIGVuZEVudGl0eUtleSA9IGVuZEJsb2NrLmdldEVudGl0eUF0KGVuZCAtIDEpO1xuICBpZiAoIXN0YXJ0RW50aXR5S2V5ICYmICFlbmRFbnRpdHlLZXkpIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uU3RhdGU7XG4gIH1cbiAgdmFyIG5ld1NlbGVjdGlvblN0YXRlID0gc2VsZWN0aW9uU3RhdGU7XG4gIGlmIChzdGFydEVudGl0eUtleSAmJiBzdGFydEVudGl0eUtleSA9PT0gZW5kRW50aXR5S2V5KSB7XG4gICAgbmV3U2VsZWN0aW9uU3RhdGUgPSBnZXRFbnRpdHlSZW1vdmFsUmFuZ2UoZW50aXR5TWFwLCBzdGFydEJsb2NrLCBuZXdTZWxlY3Rpb25TdGF0ZSwgZGlyZWN0aW9uLCBzdGFydEVudGl0eUtleSwgdHJ1ZSwgdHJ1ZSk7XG4gIH0gZWxzZSBpZiAoc3RhcnRFbnRpdHlLZXkgJiYgZW5kRW50aXR5S2V5KSB7XG4gICAgdmFyIHN0YXJ0U2VsZWN0aW9uU3RhdGUgPSBnZXRFbnRpdHlSZW1vdmFsUmFuZ2UoZW50aXR5TWFwLCBzdGFydEJsb2NrLCBuZXdTZWxlY3Rpb25TdGF0ZSwgZGlyZWN0aW9uLCBzdGFydEVudGl0eUtleSwgZmFsc2UsIHRydWUpO1xuICAgIHZhciBlbmRTZWxlY3Rpb25TdGF0ZSA9IGdldEVudGl0eVJlbW92YWxSYW5nZShlbnRpdHlNYXAsIGVuZEJsb2NrLCBuZXdTZWxlY3Rpb25TdGF0ZSwgZGlyZWN0aW9uLCBlbmRFbnRpdHlLZXksIGZhbHNlLCBmYWxzZSk7XG4gICAgbmV3U2VsZWN0aW9uU3RhdGUgPSBuZXdTZWxlY3Rpb25TdGF0ZS5tZXJnZSh7XG4gICAgICBhbmNob3JPZmZzZXQ6IHN0YXJ0U2VsZWN0aW9uU3RhdGUuZ2V0QW5jaG9yT2Zmc2V0KCksXG4gICAgICBmb2N1c09mZnNldDogZW5kU2VsZWN0aW9uU3RhdGUuZ2V0Rm9jdXNPZmZzZXQoKSxcbiAgICAgIGlzQmFja3dhcmQ6IGZhbHNlXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoc3RhcnRFbnRpdHlLZXkpIHtcbiAgICB2YXIgX3N0YXJ0U2VsZWN0aW9uU3RhdGUgPSBnZXRFbnRpdHlSZW1vdmFsUmFuZ2UoZW50aXR5TWFwLCBzdGFydEJsb2NrLCBuZXdTZWxlY3Rpb25TdGF0ZSwgZGlyZWN0aW9uLCBzdGFydEVudGl0eUtleSwgZmFsc2UsIHRydWUpO1xuICAgIG5ld1NlbGVjdGlvblN0YXRlID0gbmV3U2VsZWN0aW9uU3RhdGUubWVyZ2Uoe1xuICAgICAgYW5jaG9yT2Zmc2V0OiBfc3RhcnRTZWxlY3Rpb25TdGF0ZS5nZXRTdGFydE9mZnNldCgpLFxuICAgICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChlbmRFbnRpdHlLZXkpIHtcbiAgICB2YXIgX2VuZFNlbGVjdGlvblN0YXRlID0gZ2V0RW50aXR5UmVtb3ZhbFJhbmdlKGVudGl0eU1hcCwgZW5kQmxvY2ssIG5ld1NlbGVjdGlvblN0YXRlLCBkaXJlY3Rpb24sIGVuZEVudGl0eUtleSwgZmFsc2UsIGZhbHNlKTtcbiAgICBuZXdTZWxlY3Rpb25TdGF0ZSA9IG5ld1NlbGVjdGlvblN0YXRlLm1lcmdlKHtcbiAgICAgIGZvY3VzT2Zmc2V0OiBfZW5kU2VsZWN0aW9uU3RhdGUuZ2V0RW5kT2Zmc2V0KCksXG4gICAgICBpc0JhY2t3YXJkOiBmYWxzZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBuZXdTZWxlY3Rpb25TdGF0ZTtcbn1cblxuZnVuY3Rpb24gZ2V0RW50aXR5UmVtb3ZhbFJhbmdlKGVudGl0eU1hcCwgYmxvY2ssIHNlbGVjdGlvblN0YXRlLCBkaXJlY3Rpb24sIGVudGl0eUtleSwgaXNFbnRpcmVTZWxlY3Rpb25XaXRoaW5FbnRpdHksIGlzRW50aXR5QXRTdGFydCkge1xuICB2YXIgc3RhcnQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgZW5kID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kT2Zmc2V0KCk7XG4gIHZhciBlbnRpdHkgPSBlbnRpdHlNYXAuX19nZXQoZW50aXR5S2V5KTtcbiAgdmFyIG11dGFiaWxpdHkgPSBlbnRpdHkuZ2V0TXV0YWJpbGl0eSgpO1xuICB2YXIgc2lkZVRvQ29uc2lkZXIgPSBpc0VudGl0eUF0U3RhcnQgPyBzdGFydCA6IGVuZDtcblxuICAvLyBgTVVUQUJMRWAgZW50aXRpZXMgY2FuIGp1c3QgaGF2ZSB0aGUgc3BlY2lmaWVkIHJhbmdlIG9mIHRleHQgcmVtb3ZlZFxuICAvLyBkaXJlY3RseS4gTm8gYWRqdXN0bWVudHMgYXJlIG5lZWRlZC5cbiAgaWYgKG11dGFiaWxpdHkgPT09ICdNVVRBQkxFJykge1xuICAgIHJldHVybiBzZWxlY3Rpb25TdGF0ZTtcbiAgfVxuXG4gIC8vIEZpbmQgdGhlIGVudGl0eSByYW5nZSB0aGF0IG92ZXJsYXBzIHdpdGggb3VyIHJlbW92YWwgcmFuZ2UuXG4gIHZhciBlbnRpdHlSYW5nZXMgPSBnZXRSYW5nZXNGb3JEcmFmdEVudGl0eShibG9jaywgZW50aXR5S2V5KS5maWx0ZXIoZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgcmV0dXJuIHNpZGVUb0NvbnNpZGVyIDw9IHJhbmdlLmVuZCAmJiBzaWRlVG9Db25zaWRlciA+PSByYW5nZS5zdGFydDtcbiAgfSk7XG5cbiAgIShlbnRpdHlSYW5nZXMubGVuZ3RoID09IDEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RoZXJlIHNob3VsZCBvbmx5IGJlIG9uZSBlbnRpdHkgcmFuZ2Ugd2l0aGluIHRoaXMgcmVtb3ZhbCByYW5nZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgdmFyIGVudGl0eVJhbmdlID0gZW50aXR5UmFuZ2VzWzBdO1xuXG4gIC8vIEZvciBgSU1NVVRBQkxFYCBlbnRpdHkgdHlwZXMsIHdlIHdpbGwgcmVtb3ZlIHRoZSBlbnRpcmUgZW50aXR5IHJhbmdlLlxuICBpZiAobXV0YWJpbGl0eSA9PT0gJ0lNTVVUQUJMRScpIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uU3RhdGUubWVyZ2Uoe1xuICAgICAgYW5jaG9yT2Zmc2V0OiBlbnRpdHlSYW5nZS5zdGFydCxcbiAgICAgIGZvY3VzT2Zmc2V0OiBlbnRpdHlSYW5nZS5lbmQsXG4gICAgICBpc0JhY2t3YXJkOiBmYWxzZVxuICAgIH0pO1xuICB9XG5cbiAgLy8gRm9yIGBTRUdNRU5URURgIGVudGl0eSB0eXBlcywgZGV0ZXJtaW5lIHRoZSBhcHByb3ByaWF0ZSBzZWdtZW50IHRvXG4gIC8vIHJlbW92ZS5cbiAgaWYgKCFpc0VudGlyZVNlbGVjdGlvbldpdGhpbkVudGl0eSkge1xuICAgIGlmIChpc0VudGl0eUF0U3RhcnQpIHtcbiAgICAgIGVuZCA9IGVudGl0eVJhbmdlLmVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnQgPSBlbnRpdHlSYW5nZS5zdGFydDtcbiAgICB9XG4gIH1cblxuICB2YXIgcmVtb3ZhbFJhbmdlID0gRHJhZnRFbnRpdHlTZWdtZW50cy5nZXRSZW1vdmFsUmFuZ2Uoc3RhcnQsIGVuZCwgYmxvY2suZ2V0VGV4dCgpLnNsaWNlKGVudGl0eVJhbmdlLnN0YXJ0LCBlbnRpdHlSYW5nZS5lbmQpLCBlbnRpdHlSYW5nZS5zdGFydCwgZGlyZWN0aW9uKTtcblxuICByZXR1cm4gc2VsZWN0aW9uU3RhdGUubWVyZ2Uoe1xuICAgIGFuY2hvck9mZnNldDogcmVtb3ZhbFJhbmdlLnN0YXJ0LFxuICAgIGZvY3VzT2Zmc2V0OiByZW1vdmFsUmFuZ2UuZW5kLFxuICAgIGlzQmFja3dhcmQ6IGZhbHNlXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldENoYXJhY3RlclJlbW92YWxSYW5nZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGFwcGx5RW50aXR5VG9Db250ZW50QmxvY2tcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENoYXJhY3Rlck1ldGFkYXRhID0gcmVxdWlyZSgnLi9DaGFyYWN0ZXJNZXRhZGF0YScpO1xuXG5mdW5jdGlvbiBhcHBseUVudGl0eVRvQ29udGVudEJsb2NrKGNvbnRlbnRCbG9jaywgc3RhcnQsIGVuZCwgZW50aXR5S2V5KSB7XG4gIHZhciBjaGFyYWN0ZXJMaXN0ID0gY29udGVudEJsb2NrLmdldENoYXJhY3Rlckxpc3QoKTtcbiAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgY2hhcmFjdGVyTGlzdCA9IGNoYXJhY3Rlckxpc3Quc2V0KHN0YXJ0LCBDaGFyYWN0ZXJNZXRhZGF0YS5hcHBseUVudGl0eShjaGFyYWN0ZXJMaXN0LmdldChzdGFydCksIGVudGl0eUtleSkpO1xuICAgIHN0YXJ0Kys7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnRCbG9jay5zZXQoJ2NoYXJhY3Rlckxpc3QnLCBjaGFyYWN0ZXJMaXN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcHBseUVudGl0eVRvQ29udGVudEJsb2NrOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgYXBwbHlFbnRpdHlUb0NvbnRlbnRTdGF0ZVxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbnZhciBhcHBseUVudGl0eVRvQ29udGVudEJsb2NrID0gcmVxdWlyZSgnLi9hcHBseUVudGl0eVRvQ29udGVudEJsb2NrJyk7XG5cbmZ1bmN0aW9uIGFwcGx5RW50aXR5VG9Db250ZW50U3RhdGUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgZW50aXR5S2V5KSB7XG4gIHZhciBibG9ja01hcCA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja01hcCgpO1xuICB2YXIgc3RhcnRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydEtleSgpO1xuICB2YXIgc3RhcnRPZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgZW5kS2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kS2V5KCk7XG4gIHZhciBlbmRPZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRFbmRPZmZzZXQoKTtcblxuICB2YXIgbmV3QmxvY2tzID0gYmxvY2tNYXAuc2tpcFVudGlsKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgcmV0dXJuIGsgPT09IHN0YXJ0S2V5O1xuICB9KS50YWtlVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gZW5kS2V5O1xuICB9KS50b09yZGVyZWRNYXAoKS5tZXJnZShJbW11dGFibGUuT3JkZXJlZE1hcChbW2VuZEtleSwgYmxvY2tNYXAuZ2V0KGVuZEtleSldXSkpLm1hcChmdW5jdGlvbiAoYmxvY2ssIGJsb2NrS2V5KSB7XG4gICAgdmFyIHNsaWNlU3RhcnQgPSBibG9ja0tleSA9PT0gc3RhcnRLZXkgPyBzdGFydE9mZnNldCA6IDA7XG4gICAgdmFyIHNsaWNlRW5kID0gYmxvY2tLZXkgPT09IGVuZEtleSA/IGVuZE9mZnNldCA6IGJsb2NrLmdldExlbmd0aCgpO1xuICAgIHJldHVybiBhcHBseUVudGl0eVRvQ29udGVudEJsb2NrKGJsb2NrLCBzbGljZVN0YXJ0LCBzbGljZUVuZCwgZW50aXR5S2V5KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbnRlbnRTdGF0ZS5tZXJnZSh7XG4gICAgYmxvY2tNYXA6IGJsb2NrTWFwLm1lcmdlKG5ld0Jsb2NrcyksXG4gICAgc2VsZWN0aW9uQmVmb3JlOiBzZWxlY3Rpb25TdGF0ZSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGVcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbHlFbnRpdHlUb0NvbnRlbnRTdGF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENvbnRlbnRTdGF0ZUlubGluZVN0eWxlXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyTWV0YWRhdGEnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyksXG4gICAgTWFwID0gX3JlcXVpcmUuTWFwO1xuXG52YXIgQ29udGVudFN0YXRlSW5saW5lU3R5bGUgPSB7XG4gIGFkZDogZnVuY3Rpb24gYWRkKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGlubGluZVN0eWxlKSB7XG4gICAgcmV0dXJuIG1vZGlmeUlubGluZVN0eWxlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGlubGluZVN0eWxlLCB0cnVlKTtcbiAgfSxcblxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBpbmxpbmVTdHlsZSkge1xuICAgIHJldHVybiBtb2RpZnlJbmxpbmVTdHlsZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBpbmxpbmVTdHlsZSwgZmFsc2UpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBtb2RpZnlJbmxpbmVTdHlsZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBpbmxpbmVTdHlsZSwgYWRkT3JSZW1vdmUpIHtcbiAgdmFyIGJsb2NrTWFwID0gY29udGVudFN0YXRlLmdldEJsb2NrTWFwKCk7XG4gIHZhciBzdGFydEtleSA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0S2V5KCk7XG4gIHZhciBzdGFydE9mZnNldCA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0T2Zmc2V0KCk7XG4gIHZhciBlbmRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRFbmRLZXkoKTtcbiAgdmFyIGVuZE9mZnNldCA9IHNlbGVjdGlvblN0YXRlLmdldEVuZE9mZnNldCgpO1xuXG4gIHZhciBuZXdCbG9ja3MgPSBibG9ja01hcC5za2lwVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gc3RhcnRLZXk7XG4gIH0pLnRha2VVbnRpbChmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBrID09PSBlbmRLZXk7XG4gIH0pLmNvbmNhdChNYXAoW1tlbmRLZXksIGJsb2NrTWFwLmdldChlbmRLZXkpXV0pKS5tYXAoZnVuY3Rpb24gKGJsb2NrLCBibG9ja0tleSkge1xuICAgIHZhciBzbGljZVN0YXJ0O1xuICAgIHZhciBzbGljZUVuZDtcblxuICAgIGlmIChzdGFydEtleSA9PT0gZW5kS2V5KSB7XG4gICAgICBzbGljZVN0YXJ0ID0gc3RhcnRPZmZzZXQ7XG4gICAgICBzbGljZUVuZCA9IGVuZE9mZnNldDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpY2VTdGFydCA9IGJsb2NrS2V5ID09PSBzdGFydEtleSA/IHN0YXJ0T2Zmc2V0IDogMDtcbiAgICAgIHNsaWNlRW5kID0gYmxvY2tLZXkgPT09IGVuZEtleSA/IGVuZE9mZnNldCA6IGJsb2NrLmdldExlbmd0aCgpO1xuICAgIH1cblxuICAgIHZhciBjaGFycyA9IGJsb2NrLmdldENoYXJhY3Rlckxpc3QoKTtcbiAgICB2YXIgY3VycmVudDtcbiAgICB3aGlsZSAoc2xpY2VTdGFydCA8IHNsaWNlRW5kKSB7XG4gICAgICBjdXJyZW50ID0gY2hhcnMuZ2V0KHNsaWNlU3RhcnQpO1xuICAgICAgY2hhcnMgPSBjaGFycy5zZXQoc2xpY2VTdGFydCwgYWRkT3JSZW1vdmUgPyBDaGFyYWN0ZXJNZXRhZGF0YS5hcHBseVN0eWxlKGN1cnJlbnQsIGlubGluZVN0eWxlKSA6IENoYXJhY3Rlck1ldGFkYXRhLnJlbW92ZVN0eWxlKGN1cnJlbnQsIGlubGluZVN0eWxlKSk7XG4gICAgICBzbGljZVN0YXJ0Kys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJsb2NrLnNldCgnY2hhcmFjdGVyTGlzdCcsIGNoYXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbnRlbnRTdGF0ZS5tZXJnZSh7XG4gICAgYmxvY2tNYXA6IGJsb2NrTWFwLm1lcmdlKG5ld0Jsb2NrcyksXG4gICAgc2VsZWN0aW9uQmVmb3JlOiBzZWxlY3Rpb25TdGF0ZSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGVcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udGVudFN0YXRlSW5saW5lU3R5bGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERyYWZ0RmVhdHVyZUZsYWdzLWNvcmVcbiAqIEBmb3JtYXRcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0RmVhdHVyZUZsYWdzID0ge1xuICBkcmFmdF9raWxsc3dpdGNoX2FsbG93X25vbnRleHRub2RlczogZmFsc2UsXG4gIGRyYWZ0X3NlZ21lbnRlZF9lbnRpdGllc19iZWhhdmlvcjogZmFsc2UsXG4gIGRyYWZ0X2hhbmRsZWJlZm9yZWlucHV0X2NvbXBvc2VkX3RleHQ6IGZhbHNlLFxuICBkcmFmdF90cmVlX2RhdGFfc3VwcG9ydDogZmFsc2Vcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRGZWF0dXJlRmxhZ3M7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBBdG9taWNCbG9ja1V0aWxzXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgX2V4dGVuZHMgPSBfYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgQmxvY2tNYXBCdWlsZGVyID0gcmVxdWlyZSgnLi9CbG9ja01hcEJ1aWxkZXInKTtcbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyTWV0YWRhdGEnKTtcbnZhciBDb250ZW50QmxvY2sgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9jaycpO1xudmFyIENvbnRlbnRCbG9ja05vZGUgPSByZXF1aXJlKCcuL0NvbnRlbnRCbG9ja05vZGUnKTtcbnZhciBEcmFmdEZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vRHJhZnRGZWF0dXJlRmxhZ3MnKTtcbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZSgnLi9EcmFmdE1vZGlmaWVyJyk7XG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKCcuL0VkaXRvclN0YXRlJyk7XG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG52YXIgU2VsZWN0aW9uU3RhdGUgPSByZXF1aXJlKCcuL1NlbGVjdGlvblN0YXRlJyk7XG5cbnZhciBnZW5lcmF0ZVJhbmRvbUtleSA9IHJlcXVpcmUoJy4vZ2VuZXJhdGVSYW5kb21LZXknKTtcbnZhciBtb3ZlQmxvY2tJbkNvbnRlbnRTdGF0ZSA9IHJlcXVpcmUoJy4vbW92ZUJsb2NrSW5Db250ZW50U3RhdGUnKTtcblxudmFyIGV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCA9IERyYWZ0RmVhdHVyZUZsYWdzLmRyYWZ0X3RyZWVfZGF0YV9zdXBwb3J0O1xudmFyIENvbnRlbnRCbG9ja1JlY29yZCA9IGV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCA/IENvbnRlbnRCbG9ja05vZGUgOiBDb250ZW50QmxvY2s7XG5cbnZhciBMaXN0ID0gSW1tdXRhYmxlLkxpc3QsXG4gICAgUmVwZWF0ID0gSW1tdXRhYmxlLlJlcGVhdDtcblxuXG52YXIgQXRvbWljQmxvY2tVdGlscyA9IHtcbiAgaW5zZXJ0QXRvbWljQmxvY2s6IGZ1bmN0aW9uIGluc2VydEF0b21pY0Jsb2NrKGVkaXRvclN0YXRlLCBlbnRpdHlLZXksIGNoYXJhY3Rlcikge1xuICAgIHZhciBjb250ZW50U3RhdGUgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciBzZWxlY3Rpb25TdGF0ZSA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuXG4gICAgdmFyIGFmdGVyUmVtb3ZhbCA9IERyYWZ0TW9kaWZpZXIucmVtb3ZlUmFuZ2UoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgJ2JhY2t3YXJkJyk7XG5cbiAgICB2YXIgdGFyZ2V0U2VsZWN0aW9uID0gYWZ0ZXJSZW1vdmFsLmdldFNlbGVjdGlvbkFmdGVyKCk7XG4gICAgdmFyIGFmdGVyU3BsaXQgPSBEcmFmdE1vZGlmaWVyLnNwbGl0QmxvY2soYWZ0ZXJSZW1vdmFsLCB0YXJnZXRTZWxlY3Rpb24pO1xuICAgIHZhciBpbnNlcnRpb25UYXJnZXQgPSBhZnRlclNwbGl0LmdldFNlbGVjdGlvbkFmdGVyKCk7XG5cbiAgICB2YXIgYXNBdG9taWNCbG9jayA9IERyYWZ0TW9kaWZpZXIuc2V0QmxvY2tUeXBlKGFmdGVyU3BsaXQsIGluc2VydGlvblRhcmdldCwgJ2F0b21pYycpO1xuXG4gICAgdmFyIGNoYXJEYXRhID0gQ2hhcmFjdGVyTWV0YWRhdGEuY3JlYXRlKHsgZW50aXR5OiBlbnRpdHlLZXkgfSk7XG5cbiAgICB2YXIgYXRvbWljQmxvY2tDb25maWcgPSB7XG4gICAgICBrZXk6IGdlbmVyYXRlUmFuZG9tS2V5KCksXG4gICAgICB0eXBlOiAnYXRvbWljJyxcbiAgICAgIHRleHQ6IGNoYXJhY3RlcixcbiAgICAgIGNoYXJhY3Rlckxpc3Q6IExpc3QoUmVwZWF0KGNoYXJEYXRhLCBjaGFyYWN0ZXIubGVuZ3RoKSlcbiAgICB9O1xuXG4gICAgdmFyIGF0b21pY0RpdmlkZXJCbG9ja0NvbmZpZyA9IHtcbiAgICAgIGtleTogZ2VuZXJhdGVSYW5kb21LZXkoKSxcbiAgICAgIHR5cGU6ICd1bnN0eWxlZCdcbiAgICB9O1xuXG4gICAgaWYgKGV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCkge1xuICAgICAgYXRvbWljQmxvY2tDb25maWcgPSBfZXh0ZW5kcyh7fSwgYXRvbWljQmxvY2tDb25maWcsIHtcbiAgICAgICAgbmV4dFNpYmxpbmc6IGF0b21pY0RpdmlkZXJCbG9ja0NvbmZpZy5rZXlcbiAgICAgIH0pO1xuICAgICAgYXRvbWljRGl2aWRlckJsb2NrQ29uZmlnID0gX2V4dGVuZHMoe30sIGF0b21pY0RpdmlkZXJCbG9ja0NvbmZpZywge1xuICAgICAgICBwcmV2U2libGluZzogYXRvbWljQmxvY2tDb25maWcua2V5XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgZnJhZ21lbnRBcnJheSA9IFtuZXcgQ29udGVudEJsb2NrUmVjb3JkKGF0b21pY0Jsb2NrQ29uZmlnKSwgbmV3IENvbnRlbnRCbG9ja1JlY29yZChhdG9taWNEaXZpZGVyQmxvY2tDb25maWcpXTtcblxuICAgIHZhciBmcmFnbWVudCA9IEJsb2NrTWFwQnVpbGRlci5jcmVhdGVGcm9tQXJyYXkoZnJhZ21lbnRBcnJheSk7XG5cbiAgICB2YXIgd2l0aEF0b21pY0Jsb2NrID0gRHJhZnRNb2RpZmllci5yZXBsYWNlV2l0aEZyYWdtZW50KGFzQXRvbWljQmxvY2ssIGluc2VydGlvblRhcmdldCwgZnJhZ21lbnQpO1xuXG4gICAgdmFyIG5ld0NvbnRlbnQgPSB3aXRoQXRvbWljQmxvY2subWVyZ2Uoe1xuICAgICAgc2VsZWN0aW9uQmVmb3JlOiBzZWxlY3Rpb25TdGF0ZSxcbiAgICAgIHNlbGVjdGlvbkFmdGVyOiB3aXRoQXRvbWljQmxvY2suZ2V0U2VsZWN0aW9uQWZ0ZXIoKS5zZXQoJ2hhc0ZvY3VzJywgdHJ1ZSlcbiAgICB9KTtcblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBuZXdDb250ZW50LCAnaW5zZXJ0LWZyYWdtZW50Jyk7XG4gIH0sXG5cbiAgbW92ZUF0b21pY0Jsb2NrOiBmdW5jdGlvbiBtb3ZlQXRvbWljQmxvY2soZWRpdG9yU3RhdGUsIGF0b21pY0Jsb2NrLCB0YXJnZXRSYW5nZSwgaW5zZXJ0aW9uTW9kZSkge1xuICAgIHZhciBjb250ZW50U3RhdGUgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciBzZWxlY3Rpb25TdGF0ZSA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuXG4gICAgdmFyIHdpdGhNb3ZlZEF0b21pY0Jsb2NrID0gdm9pZCAwO1xuXG4gICAgaWYgKGluc2VydGlvbk1vZGUgPT09ICdiZWZvcmUnIHx8IGluc2VydGlvbk1vZGUgPT09ICdhZnRlcicpIHtcbiAgICAgIHZhciB0YXJnZXRCbG9jayA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja0ZvcktleShpbnNlcnRpb25Nb2RlID09PSAnYmVmb3JlJyA/IHRhcmdldFJhbmdlLmdldFN0YXJ0S2V5KCkgOiB0YXJnZXRSYW5nZS5nZXRFbmRLZXkoKSk7XG5cbiAgICAgIHdpdGhNb3ZlZEF0b21pY0Jsb2NrID0gbW92ZUJsb2NrSW5Db250ZW50U3RhdGUoY29udGVudFN0YXRlLCBhdG9taWNCbG9jaywgdGFyZ2V0QmxvY2ssIGluc2VydGlvbk1vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWZ0ZXJSZW1vdmFsID0gRHJhZnRNb2RpZmllci5yZW1vdmVSYW5nZShjb250ZW50U3RhdGUsIHRhcmdldFJhbmdlLCAnYmFja3dhcmQnKTtcblxuICAgICAgdmFyIHNlbGVjdGlvbkFmdGVyUmVtb3ZhbCA9IGFmdGVyUmVtb3ZhbC5nZXRTZWxlY3Rpb25BZnRlcigpO1xuICAgICAgdmFyIF90YXJnZXRCbG9jayA9IGFmdGVyUmVtb3ZhbC5nZXRCbG9ja0ZvcktleShzZWxlY3Rpb25BZnRlclJlbW92YWwuZ2V0Rm9jdXNLZXkoKSk7XG5cbiAgICAgIGlmIChzZWxlY3Rpb25BZnRlclJlbW92YWwuZ2V0U3RhcnRPZmZzZXQoKSA9PT0gMCkge1xuICAgICAgICB3aXRoTW92ZWRBdG9taWNCbG9jayA9IG1vdmVCbG9ja0luQ29udGVudFN0YXRlKGFmdGVyUmVtb3ZhbCwgYXRvbWljQmxvY2ssIF90YXJnZXRCbG9jaywgJ2JlZm9yZScpO1xuICAgICAgfSBlbHNlIGlmIChzZWxlY3Rpb25BZnRlclJlbW92YWwuZ2V0RW5kT2Zmc2V0KCkgPT09IF90YXJnZXRCbG9jay5nZXRMZW5ndGgoKSkge1xuICAgICAgICB3aXRoTW92ZWRBdG9taWNCbG9jayA9IG1vdmVCbG9ja0luQ29udGVudFN0YXRlKGFmdGVyUmVtb3ZhbCwgYXRvbWljQmxvY2ssIF90YXJnZXRCbG9jaywgJ2FmdGVyJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYWZ0ZXJTcGxpdCA9IERyYWZ0TW9kaWZpZXIuc3BsaXRCbG9jayhhZnRlclJlbW92YWwsIHNlbGVjdGlvbkFmdGVyUmVtb3ZhbCk7XG5cbiAgICAgICAgdmFyIHNlbGVjdGlvbkFmdGVyU3BsaXQgPSBhZnRlclNwbGl0LmdldFNlbGVjdGlvbkFmdGVyKCk7XG4gICAgICAgIHZhciBfdGFyZ2V0QmxvY2syID0gYWZ0ZXJTcGxpdC5nZXRCbG9ja0ZvcktleShzZWxlY3Rpb25BZnRlclNwbGl0LmdldEZvY3VzS2V5KCkpO1xuXG4gICAgICAgIHdpdGhNb3ZlZEF0b21pY0Jsb2NrID0gbW92ZUJsb2NrSW5Db250ZW50U3RhdGUoYWZ0ZXJTcGxpdCwgYXRvbWljQmxvY2ssIF90YXJnZXRCbG9jazIsICdiZWZvcmUnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbmV3Q29udGVudCA9IHdpdGhNb3ZlZEF0b21pY0Jsb2NrLm1lcmdlKHtcbiAgICAgIHNlbGVjdGlvbkJlZm9yZTogc2VsZWN0aW9uU3RhdGUsXG4gICAgICBzZWxlY3Rpb25BZnRlcjogd2l0aE1vdmVkQXRvbWljQmxvY2suZ2V0U2VsZWN0aW9uQWZ0ZXIoKS5zZXQoJ2hhc0ZvY3VzJywgdHJ1ZSlcbiAgICB9KTtcblxuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBuZXdDb250ZW50LCAnbW92ZS1ibG9jaycpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF0b21pY0Jsb2NrVXRpbHM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEcmFmdFxuICogQGZvcm1hdFxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXRvbWljQmxvY2tVdGlscyA9IHJlcXVpcmUoJy4vQXRvbWljQmxvY2tVdGlscycpO1xudmFyIEJsb2NrTWFwQnVpbGRlciA9IHJlcXVpcmUoJy4vQmxvY2tNYXBCdWlsZGVyJyk7XG52YXIgQ2hhcmFjdGVyTWV0YWRhdGEgPSByZXF1aXJlKCcuL0NoYXJhY3Rlck1ldGFkYXRhJyk7XG52YXIgQ29tcG9zaXRlRHJhZnREZWNvcmF0b3IgPSByZXF1aXJlKCcuL0NvbXBvc2l0ZURyYWZ0RGVjb3JhdG9yJyk7XG52YXIgQ29udGVudEJsb2NrID0gcmVxdWlyZSgnLi9Db250ZW50QmxvY2snKTtcbnZhciBDb250ZW50U3RhdGUgPSByZXF1aXJlKCcuL0NvbnRlbnRTdGF0ZScpO1xudmFyIERlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwID0gcmVxdWlyZSgnLi9EZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcCcpO1xudmFyIERlZmF1bHREcmFmdElubGluZVN0eWxlID0gcmVxdWlyZSgnLi9EZWZhdWx0RHJhZnRJbmxpbmVTdHlsZScpO1xudmFyIERyYWZ0RWRpdG9yID0gcmVxdWlyZSgnLi9EcmFmdEVkaXRvci5yZWFjdCcpO1xudmFyIERyYWZ0RWRpdG9yQmxvY2sgPSByZXF1aXJlKCcuL0RyYWZ0RWRpdG9yQmxvY2sucmVhY3QnKTtcbnZhciBEcmFmdEVudGl0eSA9IHJlcXVpcmUoJy4vRHJhZnRFbnRpdHknKTtcbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZSgnLi9EcmFmdE1vZGlmaWVyJyk7XG52YXIgRHJhZnRFbnRpdHlJbnN0YW5jZSA9IHJlcXVpcmUoJy4vRHJhZnRFbnRpdHlJbnN0YW5jZScpO1xudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZSgnLi9FZGl0b3JTdGF0ZScpO1xudmFyIEtleUJpbmRpbmdVdGlsID0gcmVxdWlyZSgnLi9LZXlCaW5kaW5nVXRpbCcpO1xudmFyIFJpY2hUZXh0RWRpdG9yVXRpbCA9IHJlcXVpcmUoJy4vUmljaFRleHRFZGl0b3JVdGlsJyk7XG52YXIgU2VsZWN0aW9uU3RhdGUgPSByZXF1aXJlKCcuL1NlbGVjdGlvblN0YXRlJyk7XG5cbnZhciBjb252ZXJ0RnJvbURyYWZ0U3RhdGVUb1JhdyA9IHJlcXVpcmUoJy4vY29udmVydEZyb21EcmFmdFN0YXRlVG9SYXcnKTtcbnZhciBjb252ZXJ0RnJvbUhUTUxUb0NvbnRlbnRCbG9ja3MgPSByZXF1aXJlKCcuL2NvbnZlcnRGcm9tSFRNTFRvQ29udGVudEJsb2NrcycpO1xudmFyIGNvbnZlcnRGcm9tUmF3VG9EcmFmdFN0YXRlID0gcmVxdWlyZSgnLi9jb252ZXJ0RnJvbVJhd1RvRHJhZnRTdGF0ZScpO1xudmFyIGdlbmVyYXRlUmFuZG9tS2V5ID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVJhbmRvbUtleScpO1xudmFyIGdldERlZmF1bHRLZXlCaW5kaW5nID0gcmVxdWlyZSgnLi9nZXREZWZhdWx0S2V5QmluZGluZycpO1xudmFyIGdldFZpc2libGVTZWxlY3Rpb25SZWN0ID0gcmVxdWlyZSgnLi9nZXRWaXNpYmxlU2VsZWN0aW9uUmVjdCcpO1xuXG52YXIgRHJhZnRQdWJsaWMgPSB7XG4gIEVkaXRvcjogRHJhZnRFZGl0b3IsXG4gIEVkaXRvckJsb2NrOiBEcmFmdEVkaXRvckJsb2NrLFxuICBFZGl0b3JTdGF0ZTogRWRpdG9yU3RhdGUsXG5cbiAgQ29tcG9zaXRlRGVjb3JhdG9yOiBDb21wb3NpdGVEcmFmdERlY29yYXRvcixcbiAgRW50aXR5OiBEcmFmdEVudGl0eSxcbiAgRW50aXR5SW5zdGFuY2U6IERyYWZ0RW50aXR5SW5zdGFuY2UsXG5cbiAgQmxvY2tNYXBCdWlsZGVyOiBCbG9ja01hcEJ1aWxkZXIsXG4gIENoYXJhY3Rlck1ldGFkYXRhOiBDaGFyYWN0ZXJNZXRhZGF0YSxcbiAgQ29udGVudEJsb2NrOiBDb250ZW50QmxvY2ssXG4gIENvbnRlbnRTdGF0ZTogQ29udGVudFN0YXRlLFxuICBTZWxlY3Rpb25TdGF0ZTogU2VsZWN0aW9uU3RhdGUsXG5cbiAgQXRvbWljQmxvY2tVdGlsczogQXRvbWljQmxvY2tVdGlscyxcbiAgS2V5QmluZGluZ1V0aWw6IEtleUJpbmRpbmdVdGlsLFxuICBNb2RpZmllcjogRHJhZnRNb2RpZmllcixcbiAgUmljaFV0aWxzOiBSaWNoVGV4dEVkaXRvclV0aWwsXG5cbiAgRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXA6IERlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwLFxuICBEZWZhdWx0RHJhZnRJbmxpbmVTdHlsZTogRGVmYXVsdERyYWZ0SW5saW5lU3R5bGUsXG5cbiAgY29udmVydEZyb21IVE1MOiBjb252ZXJ0RnJvbUhUTUxUb0NvbnRlbnRCbG9ja3MsXG4gIGNvbnZlcnRGcm9tUmF3OiBjb252ZXJ0RnJvbVJhd1RvRHJhZnRTdGF0ZSxcbiAgY29udmVydFRvUmF3OiBjb252ZXJ0RnJvbURyYWZ0U3RhdGVUb1JhdyxcbiAgZ2VuS2V5OiBnZW5lcmF0ZVJhbmRvbUtleSxcbiAgZ2V0RGVmYXVsdEtleUJpbmRpbmc6IGdldERlZmF1bHRLZXlCaW5kaW5nLFxuICBnZXRWaXNpYmxlU2VsZWN0aW9uUmVjdDogZ2V0VmlzaWJsZVNlbGVjdGlvblJlY3Rcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRQdWJsaWM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgaWYgKHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAvLyBDYWxsIHRoaXMuY29uc3RydWN0b3IuZ0RTRlAgdG8gc3VwcG9ydCBzdWItY2xhc3Nlcy5cbiAgLy8gVXNlIHRoZSBzZXRTdGF0ZSgpIHVwZGF0ZXIgdG8gZW5zdXJlIHN0YXRlIGlzbid0IHN0YWxlIGluIGNlcnRhaW4gZWRnZSBjYXNlcy5cbiAgZnVuY3Rpb24gdXBkYXRlcihwcmV2U3RhdGUpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgcmV0dXJuIHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQgPyBzdGF0ZSA6IG51bGw7XG4gIH1cbiAgLy8gQmluZGluZyBcInRoaXNcIiBpcyBpbXBvcnRhbnQgZm9yIHNoYWxsb3cgcmVuZGVyZXIgc3VwcG9ydC5cbiAgdGhpcy5zZXRTdGF0ZSh1cGRhdGVyLmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gIHRyeSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHByZXZTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gbmV4dFN0YXRlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnID0gdHJ1ZTtcbiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90ID0gdGhpcy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZVxuICAgICk7XG4gIH0gZmluYWxseSB7XG4gICAgdGhpcy5wcm9wcyA9IHByZXZQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gcHJldlN0YXRlO1xuICB9XG59XG5cbi8vIFJlYWN0IG1heSB3YXJuIGFib3V0IGNXTS9jV1JQL2NXVSBtZXRob2RzIGJlaW5nIGRlcHJlY2F0ZWQuXG4vLyBBZGQgYSBmbGFnIHRvIHN1cHByZXNzIHRoZXNlIHdhcm5pbmdzIGZvciB0aGlzIHNwZWNpYWwgY2FzZS5cbmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuXG5mdW5jdGlvbiBwb2x5ZmlsbChDb21wb25lbnQpIHtcbiAgdmFyIHByb3RvdHlwZSA9IENvbXBvbmVudC5wcm90b3R5cGU7XG5cbiAgaWYgKCFwcm90b3R5cGUgfHwgIXByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gb25seSBwb2x5ZmlsbCBjbGFzcyBjb21wb25lbnRzJyk7XG4gIH1cblxuICBpZiAoXG4gICAgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgcHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybiBDb21wb25lbnQ7XG4gIH1cblxuICAvLyBJZiBuZXcgY29tcG9uZW50IEFQSXMgYXJlIGRlZmluZWQsIFwidW5zYWZlXCIgbGlmZWN5Y2xlcyB3b24ndCBiZSBjYWxsZWQuXG4gIC8vIEVycm9yIGlmIGFueSBvZiB0aGVzZSBsaWZlY3ljbGVzIGFyZSBwcmVzZW50LFxuICAvLyBCZWNhdXNlIHRoZXkgd291bGQgd29yayBkaWZmZXJlbnRseSBiZXR3ZWVuIG9sZGVyIGFuZCBuZXdlciAoMTYuMyspIHZlcnNpb25zIG9mIFJlYWN0LlxuICB2YXIgZm91bmRXaWxsTW91bnROYW1lID0gbnVsbDtcbiAgdmFyIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsVXBkYXRlTmFtZSA9IG51bGw7XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdjb21wb25lbnRXaWxsTW91bnQnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICB9XG4gIGlmIChcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsIHx8XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbFxuICApIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZTtcbiAgICB2YXIgbmV3QXBpTmFtZSA9XG4gICAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoKSdcbiAgICAgICAgOiAnZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSc7XG5cbiAgICB0aHJvdyBFcnJvcihcbiAgICAgICdVbnNhZmUgbGVnYWN5IGxpZmVjeWNsZXMgd2lsbCBub3QgYmUgY2FsbGVkIGZvciBjb21wb25lbnRzIHVzaW5nIG5ldyBjb21wb25lbnQgQVBJcy5cXG5cXG4nICtcbiAgICAgICAgY29tcG9uZW50TmFtZSArXG4gICAgICAgICcgdXNlcyAnICtcbiAgICAgICAgbmV3QXBpTmFtZSArXG4gICAgICAgICcgYnV0IGFsc28gY29udGFpbnMgdGhlIGZvbGxvd2luZyBsZWdhY3kgbGlmZWN5Y2xlczonICtcbiAgICAgICAgKGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxNb3VudE5hbWUgOiAnJykgK1xuICAgICAgICAoZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbFxuICAgICAgICAgID8gJ1xcbiAgJyArIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWVcbiAgICAgICAgICA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbFVwZGF0ZU5hbWUgOiAnJykgK1xuICAgICAgICAnXFxuXFxuVGhlIGFib3ZlIGxpZmVjeWNsZXMgc2hvdWxkIGJlIHJlbW92ZWQuIExlYXJuIG1vcmUgYWJvdXQgdGhpcyB3YXJuaW5nIGhlcmU6XFxuJyArXG4gICAgICAgICdodHRwczovL2ZiLm1lL3JlYWN0LWFzeW5jLWNvbXBvbmVudC1saWZlY3ljbGUtaG9va3MnXG4gICAgKTtcbiAgfVxuXG4gIC8vIFJlYWN0IDw9IDE2LjIgZG9lcyBub3Qgc3VwcG9ydCBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV00gYW5kIGNXUlAgdG8gaW52b2tlIHRoZSBuZXcgc3RhdGljIGxpZmVjeWNsZS5cbiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhlc2UgbGlmZWN5Y2xlcyBpZiBnRFNGUCBleGlzdHMuXG4gIGlmICh0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBjb21wb25lbnRXaWxsTW91bnQ7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IGdldFNuYXBzaG90QmVmb3JlVXBkYXRlLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV1UgdG8gaW52b2tlIHRoZSBuZXcgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGF0IGxpZmVjeWNsZSBpZiBnU0JVIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBwb2x5ZmlsbCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIGZvciBjb21wb25lbnRzIHRoYXQgZG8gbm90IGRlZmluZSBjb21wb25lbnREaWRVcGRhdGUoKSBvbiB0aGUgcHJvdG90eXBlJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGNvbXBvbmVudFdpbGxVcGRhdGU7XG5cbiAgICB2YXIgY29tcG9uZW50RGlkVXBkYXRlID0gcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZTtcblxuICAgIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGVQb2x5ZmlsbChcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZSxcbiAgICAgIG1heWJlU25hcHNob3RcbiAgICApIHtcbiAgICAgIC8vIDE2LjMrIHdpbGwgbm90IGV4ZWN1dGUgb3VyIHdpbGwtdXBkYXRlIG1ldGhvZDtcbiAgICAgIC8vIEl0IHdpbGwgcGFzcyBhIHNuYXBzaG90IHZhbHVlIHRvIGRpZC11cGRhdGUgdGhvdWdoLlxuICAgICAgLy8gT2xkZXIgdmVyc2lvbnMgd2lsbCByZXF1aXJlIG91ciBwb2x5ZmlsbGVkIHdpbGwtdXBkYXRlIHZhbHVlLlxuICAgICAgLy8gV2UgbmVlZCB0byBoYW5kbGUgYm90aCBjYXNlcywgYnV0IGNhbid0IGp1c3QgY2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiBcIm1heWJlU25hcHNob3RcIixcbiAgICAgIC8vIEJlY2F1c2UgZm9yIDw9IDE1LnggdmVyc2lvbnMgdGhpcyBtaWdodCBiZSBhIFwicHJldkNvbnRleHRcIiBvYmplY3QuXG4gICAgICAvLyBXZSBhbHNvIGNhbid0IGp1c3QgY2hlY2sgXCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBnZXQtc25hcHNob3QgbWlnaHQgcmV0dXJuIGEgZmFsc3kgdmFsdWUuXG4gICAgICAvLyBTbyBjaGVjayBmb3IgdGhlIGV4cGxpY2l0IF9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyBmbGFnIHRvIGRldGVybWluZSBiZWhhdmlvci5cbiAgICAgIHZhciBzbmFwc2hvdCA9IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnXG4gICAgICAgID8gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFxuICAgICAgICA6IG1heWJlU25hcHNob3Q7XG5cbiAgICAgIGNvbXBvbmVudERpZFVwZGF0ZS5jYWxsKHRoaXMsIHByZXZQcm9wcywgcHJldlN0YXRlLCBzbmFwc2hvdCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59XG5cbmV4cG9ydCB7IHBvbHlmaWxsIH07XG4iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE1IEplZCBXYXRzb24uXG4gIEJhc2VkIG9uIGNvZGUgdGhhdCBpcyBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBjYW5Vc2VET00gPSAhIShcblx0XHR0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuXHRcdHdpbmRvdy5kb2N1bWVudCAmJlxuXHRcdHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50XG5cdCk7XG5cblx0dmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG5cdFx0Y2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cblx0XHRjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuXHRcdGNhblVzZUV2ZW50TGlzdGVuZXJzOlxuXHRcdFx0Y2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cblx0XHRjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlblxuXG5cdH07XG5cblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuRXhlY3V0aW9uRW52aXJvbm1lbnQgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcblx0fVxuXG59KCkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmR1bXBDbGFzc0xpc3RzID0gZHVtcENsYXNzTGlzdHM7XG52YXIgaHRtbENsYXNzTGlzdCA9IHt9O1xudmFyIGRvY0JvZHlDbGFzc0xpc3QgPSB7fTtcblxuZnVuY3Rpb24gZHVtcENsYXNzTGlzdHMoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgY2xhc3NlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaHRtbFwiKVswXS5jbGFzc05hbWU7XG4gICAgdmFyIGJ1ZmZlciA9IFwiU2hvdyB0cmFja2VkIGNsYXNzZXM6XFxuXFxuXCI7XG5cbiAgICBidWZmZXIgKz0gXCI8aHRtbCAvPiAoXCIgKyBjbGFzc2VzICsgXCIpOlxcblwiO1xuICAgIGZvciAodmFyIHggaW4gaHRtbENsYXNzTGlzdCkge1xuICAgICAgYnVmZmVyICs9IFwiICBcIiArIHggKyBcIiBcIiArIGh0bWxDbGFzc0xpc3RbeF0gKyBcIlxcblwiO1xuICAgIH1cblxuICAgIGNsYXNzZXMgPSBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgYnVmZmVyICs9IFwiXFxuXFxuZG9jLmJvZHkgKFwiICsgY2xhc3NlcyArIFwiKTpcXG5cIjtcbiAgICBmb3IgKHZhciBfeCBpbiBkb2NCb2R5Q2xhc3NMaXN0KSB7XG4gICAgICBidWZmZXIgKz0gXCIgIFwiICsgX3ggKyBcIiBcIiArIGRvY0JvZHlDbGFzc0xpc3RbX3hdICsgXCJcXG5cIjtcbiAgICB9XG5cbiAgICBidWZmZXIgKz0gXCJcXG5cIjtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2coYnVmZmVyKTtcbiAgfVxufVxuXG4vKipcbiAqIFRyYWNrIHRoZSBudW1iZXIgb2YgcmVmZXJlbmNlIG9mIGEgY2xhc3MuXG4gKiBAcGFyYW0ge29iamVjdH0gcG9sbCBUaGUgcG9sbCB0byByZWNlaXZlIHRoZSByZWZlcmVuY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIFRoZSBjbGFzcyBuYW1lLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgaW5jcmVtZW50UmVmZXJlbmNlID0gZnVuY3Rpb24gaW5jcmVtZW50UmVmZXJlbmNlKHBvbGwsIGNsYXNzTmFtZSkge1xuICBpZiAoIXBvbGxbY2xhc3NOYW1lXSkge1xuICAgIHBvbGxbY2xhc3NOYW1lXSA9IDA7XG4gIH1cbiAgcG9sbFtjbGFzc05hbWVdICs9IDE7XG4gIHJldHVybiBjbGFzc05hbWU7XG59O1xuXG4vKipcbiAqIERyb3AgdGhlIHJlZmVyZW5jZSBvZiBhIGNsYXNzLlxuICogQHBhcmFtIHtvYmplY3R9IHBvbGwgVGhlIHBvbGwgdG8gcmVjZWl2ZSB0aGUgcmVmZXJlbmNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSBUaGUgY2xhc3MgbmFtZS5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xudmFyIGRlY3JlbWVudFJlZmVyZW5jZSA9IGZ1bmN0aW9uIGRlY3JlbWVudFJlZmVyZW5jZShwb2xsLCBjbGFzc05hbWUpIHtcbiAgaWYgKHBvbGxbY2xhc3NOYW1lXSkge1xuICAgIHBvbGxbY2xhc3NOYW1lXSAtPSAxO1xuICB9XG4gIHJldHVybiBjbGFzc05hbWU7XG59O1xuXG4vKipcbiAqIFRyYWNrIGEgY2xhc3MgYW5kIGFkZCB0byB0aGUgZ2l2ZW4gY2xhc3MgbGlzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjbGFzc0xpc3RSZWYgQSBjbGFzcyBsaXN0IG9mIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge09iamVjdH0gcG9sbCAgICAgICAgIFRoZSBwb2xsIHRvIGJlIHVzZWQuXG4gKiBAcGFyYW0ge0FycmF5fSAgY2xhc3NlcyAgICAgIFRoZSBsaXN0IG9mIGNsYXNzZXMgdG8gYmUgdHJhY2tlZC5cbiAqL1xudmFyIHRyYWNrQ2xhc3MgPSBmdW5jdGlvbiB0cmFja0NsYXNzKGNsYXNzTGlzdFJlZiwgcG9sbCwgY2xhc3Nlcykge1xuICBjbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIGluY3JlbWVudFJlZmVyZW5jZShwb2xsLCBjbGFzc05hbWUpO1xuICAgIGNsYXNzTGlzdFJlZi5hZGQoY2xhc3NOYW1lKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFVudHJhY2sgYSBjbGFzcyBhbmQgcmVtb3ZlIGZyb20gdGhlIGdpdmVuIGNsYXNzIGxpc3QgaWYgdGhlIHJlZmVyZW5jZVxuICogcmVhY2hlcyAwLlxuICogQHBhcmFtIHtPYmplY3R9IGNsYXNzTGlzdFJlZiBBIGNsYXNzIGxpc3Qgb2YgYW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBwb2xsICAgICAgICAgVGhlIHBvbGwgdG8gYmUgdXNlZC5cbiAqIEBwYXJhbSB7QXJyYXl9ICBjbGFzc2VzICAgICAgVGhlIGxpc3Qgb2YgY2xhc3NlcyB0byBiZSB1bnRyYWNrZWQuXG4gKi9cbnZhciB1bnRyYWNrQ2xhc3MgPSBmdW5jdGlvbiB1bnRyYWNrQ2xhc3MoY2xhc3NMaXN0UmVmLCBwb2xsLCBjbGFzc2VzKSB7XG4gIGNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgZGVjcmVtZW50UmVmZXJlbmNlKHBvbGwsIGNsYXNzTmFtZSk7XG4gICAgcG9sbFtjbGFzc05hbWVdID09PSAwICYmIGNsYXNzTGlzdFJlZi5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFB1YmxpYyBpbmZlcmZhY2UgdG8gYWRkIGNsYXNzZXMgdG8gdGhlIGRvY3VtZW50LmJvZHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gYm9keUNsYXNzIFRoZSBjbGFzcyBzdHJpbmcgdG8gYmUgYWRkZWQuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIEl0IG1heSBjb250YWluIG1vcmUgdGhlbiBvbmUgY2xhc3NcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCAnICcgYXMgc2VwYXJhdG9yLlxuICovXG52YXIgYWRkID0gZXhwb3J0cy5hZGQgPSBmdW5jdGlvbiBhZGQoZWxlbWVudCwgY2xhc3NTdHJpbmcpIHtcbiAgcmV0dXJuIHRyYWNrQ2xhc3MoZWxlbWVudC5jbGFzc0xpc3QsIGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PSBcImh0bWxcIiA/IGh0bWxDbGFzc0xpc3QgOiBkb2NCb2R5Q2xhc3NMaXN0LCBjbGFzc1N0cmluZy5zcGxpdChcIiBcIikpO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgaW5mZXJmYWNlIHRvIHJlbW92ZSBjbGFzc2VzIGZyb20gdGhlIGRvY3VtZW50LmJvZHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gYm9keUNsYXNzIFRoZSBjbGFzcyBzdHJpbmcgdG8gYmUgYWRkZWQuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIEl0IG1heSBjb250YWluIG1vcmUgdGhlbiBvbmUgY2xhc3NcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCAnICcgYXMgc2VwYXJhdG9yLlxuICovXG52YXIgcmVtb3ZlID0gZXhwb3J0cy5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoZWxlbWVudCwgY2xhc3NTdHJpbmcpIHtcbiAgcmV0dXJuIHVudHJhY2tDbGFzcyhlbGVtZW50LmNsYXNzTGlzdCwgZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09IFwiaHRtbFwiID8gaHRtbENsYXNzTGlzdCA6IGRvY0JvZHlDbGFzc0xpc3QsIGNsYXNzU3RyaW5nLnNwbGl0KFwiIFwiKSk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2NvcGVUYWI7XG5cbnZhciBfdGFiYmFibGUgPSByZXF1aXJlKFwiLi90YWJiYWJsZVwiKTtcblxudmFyIF90YWJiYWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90YWJiYWJsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHNjb3BlVGFiKG5vZGUsIGV2ZW50KSB7XG4gIHZhciB0YWJiYWJsZSA9ICgwLCBfdGFiYmFibGUyLmRlZmF1bHQpKG5vZGUpO1xuXG4gIGlmICghdGFiYmFibGUubGVuZ3RoKSB7XG4gICAgLy8gRG8gbm90aGluZywgc2luY2UgdGhlcmUgYXJlIG5vIGVsZW1lbnRzIHRoYXQgY2FuIHJlY2VpdmUgZm9jdXMuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2hpZnRLZXkgPSBldmVudC5zaGlmdEtleTtcbiAgdmFyIGhlYWQgPSB0YWJiYWJsZVswXTtcbiAgdmFyIHRhaWwgPSB0YWJiYWJsZVt0YWJiYWJsZS5sZW5ndGggLSAxXTtcblxuICAvLyBwcm9jZWVkIHdpdGggZGVmYXVsdCBicm93c2VyIGJlaGF2aW9yIG9uIHRhYi5cbiAgLy8gRm9jdXMgb24gbGFzdCBlbGVtZW50IG9uIHNoaWZ0ICsgdGFiLlxuICBpZiAobm9kZSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgIGlmICghc2hpZnRLZXkpIHJldHVybjtcbiAgICB0YXJnZXQgPSB0YWlsO1xuICB9XG5cbiAgdmFyIHRhcmdldDtcbiAgaWYgKHRhaWwgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgIXNoaWZ0S2V5KSB7XG4gICAgdGFyZ2V0ID0gaGVhZDtcbiAgfVxuXG4gIGlmIChoZWFkID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIHNoaWZ0S2V5KSB7XG4gICAgdGFyZ2V0ID0gdGFpbDtcbiAgfVxuXG4gIGlmICh0YXJnZXQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRhcmdldC5mb2N1cygpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFNhZmFyaSByYWRpbyBpc3N1ZS5cbiAgLy9cbiAgLy8gU2FmYXJpIGRvZXMgbm90IG1vdmUgdGhlIGZvY3VzIHRvIHRoZSByYWRpbyBidXR0b24sXG4gIC8vIHNvIHdlIG5lZWQgdG8gZm9yY2UgaXQgdG8gcmVhbGx5IHdhbGsgdGhyb3VnaCBhbGwgZWxlbWVudHMuXG4gIC8vXG4gIC8vIFRoaXMgaXMgdmVyeSBlcnJvciBwcnVuZSwgc2luY2Ugd2UgYXJlIHRyeWluZyB0byBndWVzc1xuICAvLyBpZiBpdCBpcyBhIHNhZmFyaSBicm93c2VyIGZyb20gdGhlIGZpcnN0IG9jY3VyZW5jZSBiZXR3ZWVuXG4gIC8vIGNocm9tZSBvciBzYWZhcmkuXG4gIC8vXG4gIC8vIFRoZSBjaHJvbWUgdXNlciBhZ2VudCBjb250YWlucyB0aGUgZmlyc3Qgb2N1cnJlbmNlXG4gIC8vIGFzIHRoZSAnY2hyb21lL3ZlcnNpb24nIGFuZCBsYXRlciB0aGUgJ3NhZmFyaS92ZXJzaW9uJy5cbiAgdmFyIGNoZWNrU2FmYXJpID0gLyhcXGJDaHJvbWVcXGJ8XFxiU2FmYXJpXFxiKVxcLy8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgdmFyIGlzU2FmYXJpRGVza3RvcCA9IGNoZWNrU2FmYXJpICE9IG51bGwgJiYgY2hlY2tTYWZhcmlbMV0gIT0gXCJDaHJvbWVcIiAmJiAvXFxiaVBvZFxcYnxcXGJpUGFkXFxiL2cuZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KSA9PSBudWxsO1xuXG4gIC8vIElmIHdlIGFyZSBub3QgaW4gc2FmYXJpIGRlc2t0b3AsIGxldCB0aGUgYnJvd3NlciBjb250cm9sXG4gIC8vIHRoZSBmb2N1c1xuICBpZiAoIWlzU2FmYXJpRGVza3RvcCkgcmV0dXJuO1xuXG4gIHZhciB4ID0gdGFiYmFibGUuaW5kZXhPZihkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcblxuICBpZiAoeCA+IC0xKSB7XG4gICAgeCArPSBzaGlmdEtleSA/IC0xIDogMTtcbiAgfVxuXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgdGFiYmFibGVbeF0uZm9jdXMoKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmhhbmRsZUJsdXIgPSBoYW5kbGVCbHVyO1xuZXhwb3J0cy5oYW5kbGVGb2N1cyA9IGhhbmRsZUZvY3VzO1xuZXhwb3J0cy5tYXJrRm9yRm9jdXNMYXRlciA9IG1hcmtGb3JGb2N1c0xhdGVyO1xuZXhwb3J0cy5yZXR1cm5Gb2N1cyA9IHJldHVybkZvY3VzO1xuZXhwb3J0cy5wb3BXaXRob3V0Rm9jdXMgPSBwb3BXaXRob3V0Rm9jdXM7XG5leHBvcnRzLnNldHVwU2NvcGVkRm9jdXMgPSBzZXR1cFNjb3BlZEZvY3VzO1xuZXhwb3J0cy50ZWFyZG93blNjb3BlZEZvY3VzID0gdGVhcmRvd25TY29wZWRGb2N1cztcblxudmFyIF90YWJiYWJsZSA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3RhYmJhYmxlXCIpO1xuXG52YXIgX3RhYmJhYmxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RhYmJhYmxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGZvY3VzTGF0ZXJFbGVtZW50cyA9IFtdO1xudmFyIG1vZGFsRWxlbWVudCA9IG51bGw7XG52YXIgbmVlZFRvRm9jdXMgPSBmYWxzZTtcblxuZnVuY3Rpb24gaGFuZGxlQmx1cigpIHtcbiAgbmVlZFRvRm9jdXMgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVGb2N1cygpIHtcbiAgaWYgKG5lZWRUb0ZvY3VzKSB7XG4gICAgbmVlZFRvRm9jdXMgPSBmYWxzZTtcbiAgICBpZiAoIW1vZGFsRWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBuZWVkIHRvIHNlZSBob3cgalF1ZXJ5IHNoaW1zIGRvY3VtZW50Lm9uKCdmb2N1c2luJykgc28gd2UgZG9uJ3QgbmVlZCB0aGVcbiAgICAvLyBzZXRUaW1lb3V0LCBmaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCBmb2N1c2luLCBpZiBpdCBkaWQsIHdlIGNvdWxkIGZvY3VzXG4gICAgLy8gdGhlIGVsZW1lbnQgb3V0c2lkZSBvZiBhIHNldFRpbWVvdXQuIFNpZGUtZWZmZWN0IG9mIHRoaXMgaW1wbGVtZW50YXRpb25cbiAgICAvLyBpcyB0aGF0IHRoZSBkb2N1bWVudC5ib2R5IGdldHMgZm9jdXMsIGFuZCB0aGVuIHdlIGZvY3VzIG91ciBlbGVtZW50IHJpZ2h0XG4gICAgLy8gYWZ0ZXIsIHNlZW1zIGZpbmUuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAobW9kYWxFbGVtZW50LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBlbCA9ICgwLCBfdGFiYmFibGUyLmRlZmF1bHQpKG1vZGFsRWxlbWVudClbMF0gfHwgbW9kYWxFbGVtZW50O1xuICAgICAgZWwuZm9jdXMoKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrRm9yRm9jdXNMYXRlcigpIHtcbiAgZm9jdXNMYXRlckVsZW1lbnRzLnB1c2goZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbmZ1bmN0aW9uIHJldHVybkZvY3VzKCkge1xuICB2YXIgdG9Gb2N1cyA9IG51bGw7XG4gIHRyeSB7XG4gICAgaWYgKGZvY3VzTGF0ZXJFbGVtZW50cy5sZW5ndGggIT09IDApIHtcbiAgICAgIHRvRm9jdXMgPSBmb2N1c0xhdGVyRWxlbWVudHMucG9wKCk7XG4gICAgICB0b0ZvY3VzLmZvY3VzKCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUud2FybihbXCJZb3UgdHJpZWQgdG8gcmV0dXJuIGZvY3VzIHRvXCIsIHRvRm9jdXMsIFwiYnV0IGl0IGlzIG5vdCBpbiB0aGUgRE9NIGFueW1vcmVcIl0uam9pbihcIiBcIikpO1xuICB9XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuZnVuY3Rpb24gcG9wV2l0aG91dEZvY3VzKCkge1xuICBmb2N1c0xhdGVyRWxlbWVudHMubGVuZ3RoID4gMCAmJiBmb2N1c0xhdGVyRWxlbWVudHMucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHNldHVwU2NvcGVkRm9jdXMoZWxlbWVudCkge1xuICBtb2RhbEVsZW1lbnQgPSBlbGVtZW50O1xuXG4gIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBoYW5kbGVCbHVyLCBmYWxzZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIGhhbmRsZUZvY3VzLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cuYXR0YWNoRXZlbnQoXCJvbkJsdXJcIiwgaGFuZGxlQmx1cik7XG4gICAgZG9jdW1lbnQuYXR0YWNoRXZlbnQoXCJvbkZvY3VzXCIsIGhhbmRsZUZvY3VzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0ZWFyZG93blNjb3BlZEZvY3VzKCkge1xuICBtb2RhbEVsZW1lbnQgPSBudWxsO1xuXG4gIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCBoYW5kbGVCbHVyKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgaGFuZGxlRm9jdXMpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5kZXRhY2hFdmVudChcIm9uQmx1clwiLCBoYW5kbGVCbHVyKTtcbiAgICBkb2N1bWVudC5kZXRhY2hFdmVudChcIm9uRm9jdXNcIiwgaGFuZGxlRm9jdXMpO1xuICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZShcInByb3AtdHlwZXNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfZm9jdXNNYW5hZ2VyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvZm9jdXNNYW5hZ2VyXCIpO1xuXG52YXIgZm9jdXNNYW5hZ2VyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2ZvY3VzTWFuYWdlcik7XG5cbnZhciBfc2NvcGVUYWIgPSByZXF1aXJlKFwiLi4vaGVscGVycy9zY29wZVRhYlwiKTtcblxudmFyIF9zY29wZVRhYjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zY29wZVRhYik7XG5cbnZhciBfYXJpYUFwcEhpZGVyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvYXJpYUFwcEhpZGVyXCIpO1xuXG52YXIgYXJpYUFwcEhpZGVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2FyaWFBcHBIaWRlcik7XG5cbnZhciBfY2xhc3NMaXN0ID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvY2xhc3NMaXN0XCIpO1xuXG52YXIgY2xhc3NMaXN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2NsYXNzTGlzdCk7XG5cbnZhciBfc2FmZUhUTUxFbGVtZW50ID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvc2FmZUhUTUxFbGVtZW50XCIpO1xuXG52YXIgX3NhZmVIVE1MRWxlbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zYWZlSFRNTEVsZW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8vIHNvIHRoYXQgb3VyIENTUyBpcyBzdGF0aWNhbGx5IGFuYWx5emFibGVcbnZhciBDTEFTU19OQU1FUyA9IHtcbiAgb3ZlcmxheTogXCJSZWFjdE1vZGFsX19PdmVybGF5XCIsXG4gIGNvbnRlbnQ6IFwiUmVhY3RNb2RhbF9fQ29udGVudFwiXG59O1xuXG52YXIgVEFCX0tFWSA9IDk7XG52YXIgRVNDX0tFWSA9IDI3O1xuXG52YXIgYXJpYUhpZGRlbkluc3RhbmNlcyA9IDA7XG5cbnZhciBNb2RhbFBvcnRhbCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNb2RhbFBvcnRhbCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWxQb3J0YWwocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWxQb3J0YWwpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE1vZGFsUG9ydGFsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTW9kYWxQb3J0YWwpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5zZXRPdmVybGF5UmVmID0gZnVuY3Rpb24gKG92ZXJsYXkpIHtcbiAgICAgIF90aGlzLm92ZXJsYXkgPSBvdmVybGF5O1xuICAgICAgX3RoaXMucHJvcHMub3ZlcmxheVJlZiAmJiBfdGhpcy5wcm9wcy5vdmVybGF5UmVmKG92ZXJsYXkpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRDb250ZW50UmVmID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgIF90aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICAgICAgX3RoaXMucHJvcHMuY29udGVudFJlZiAmJiBfdGhpcy5wcm9wcy5jb250ZW50UmVmKGNvbnRlbnQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5hZnRlckNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYXBwRWxlbWVudCA9IF90aGlzJHByb3BzLmFwcEVsZW1lbnQsXG4gICAgICAgICAgYXJpYUhpZGVBcHAgPSBfdGhpcyRwcm9wcy5hcmlhSGlkZUFwcCxcbiAgICAgICAgICBodG1sT3BlbkNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmh0bWxPcGVuQ2xhc3NOYW1lLFxuICAgICAgICAgIGJvZHlPcGVuQ2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuYm9keU9wZW5DbGFzc05hbWU7XG5cbiAgICAgIC8vIFJlbW92ZSBjbGFzc2VzLlxuXG4gICAgICBjbGFzc0xpc3QucmVtb3ZlKGRvY3VtZW50LmJvZHksIGJvZHlPcGVuQ2xhc3NOYW1lKTtcblxuICAgICAgaHRtbE9wZW5DbGFzc05hbWUgJiYgY2xhc3NMaXN0LnJlbW92ZShkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImh0bWxcIilbMF0sIGh0bWxPcGVuQ2xhc3NOYW1lKTtcblxuICAgICAgLy8gUmVzZXQgYXJpYS1oaWRkZW4gYXR0cmlidXRlIGlmIGFsbCBtb2RhbHMgaGF2ZSBiZWVuIHJlbW92ZWRcbiAgICAgIGlmIChhcmlhSGlkZUFwcCAmJiBhcmlhSGlkZGVuSW5zdGFuY2VzID4gMCkge1xuICAgICAgICBhcmlhSGlkZGVuSW5zdGFuY2VzIC09IDE7XG5cbiAgICAgICAgaWYgKGFyaWFIaWRkZW5JbnN0YW5jZXMgPT09IDApIHtcbiAgICAgICAgICBhcmlhQXBwSGlkZXIuc2hvdyhhcHBFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMuc2hvdWxkRm9jdXNBZnRlclJlbmRlcikge1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMuc2hvdWxkUmV0dXJuRm9jdXNBZnRlckNsb3NlKSB7XG4gICAgICAgICAgZm9jdXNNYW5hZ2VyLnJldHVybkZvY3VzKCk7XG4gICAgICAgICAgZm9jdXNNYW5hZ2VyLnRlYXJkb3duU2NvcGVkRm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb2N1c01hbmFnZXIucG9wV2l0aG91dEZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmJlZm9yZU9wZW4oKTtcbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5hZnRlck9wZW4gJiYgX3RoaXMuc3RhdGUuYmVmb3JlQ2xvc2UpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmNsb3NlVGltZXIpO1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGJlZm9yZUNsb3NlOiBmYWxzZSB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG91bGRGb2N1c0FmdGVyUmVuZGVyKSB7XG4gICAgICAgICAgZm9jdXNNYW5hZ2VyLnNldHVwU2NvcGVkRm9jdXMoX3RoaXMubm9kZSk7XG4gICAgICAgICAgZm9jdXNNYW5hZ2VyLm1hcmtGb3JGb2N1c0xhdGVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlzT3BlbjogdHJ1ZSB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBhZnRlck9wZW46IHRydWUgfSk7XG5cbiAgICAgICAgICBpZiAoX3RoaXMucHJvcHMuaXNPcGVuICYmIF90aGlzLnByb3BzLm9uQWZ0ZXJPcGVuKSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkFmdGVyT3BlbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmNsb3NlVGltZW91dE1TID4gMCkge1xuICAgICAgICBfdGhpcy5jbG9zZVdpdGhUaW1lb3V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5jbG9zZVdpdGhvdXRUaW1lb3V0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmZvY3VzQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5jb250ZW50ICYmICFfdGhpcy5jb250ZW50SGFzRm9jdXMoKSAmJiBfdGhpcy5jb250ZW50LmZvY3VzKCk7XG4gICAgfTtcblxuICAgIF90aGlzLmNsb3NlV2l0aFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2xvc2VzQXQgPSBEYXRlLm5vdygpICsgX3RoaXMucHJvcHMuY2xvc2VUaW1lb3V0TVM7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IGJlZm9yZUNsb3NlOiB0cnVlLCBjbG9zZXNBdDogY2xvc2VzQXQgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5jbG9zZVRpbWVyID0gc2V0VGltZW91dChfdGhpcy5jbG9zZVdpdGhvdXRUaW1lb3V0LCBfdGhpcy5zdGF0ZS5jbG9zZXNBdCAtIERhdGUubm93KCkpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmNsb3NlV2l0aG91dFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGJlZm9yZUNsb3NlOiBmYWxzZSxcbiAgICAgICAgaXNPcGVuOiBmYWxzZSxcbiAgICAgICAgYWZ0ZXJPcGVuOiBmYWxzZSxcbiAgICAgICAgY2xvc2VzQXQ6IG51bGxcbiAgICAgIH0sIF90aGlzLmFmdGVyQ2xvc2UpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gVEFCX0tFWSkge1xuICAgICAgICAoMCwgX3Njb3BlVGFiMi5kZWZhdWx0KShfdGhpcy5jb250ZW50LCBldmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5zaG91bGRDbG9zZU9uRXNjICYmIGV2ZW50LmtleUNvZGUgPT09IEVTQ19LRVkpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIF90aGlzLnJlcXVlc3RDbG9zZShldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU92ZXJsYXlPbkNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMuc2hvdWxkQ2xvc2UgPT09IG51bGwpIHtcbiAgICAgICAgX3RoaXMuc2hvdWxkQ2xvc2UgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMuc2hvdWxkQ2xvc2UgJiYgX3RoaXMucHJvcHMuc2hvdWxkQ2xvc2VPbk92ZXJsYXlDbGljaykge1xuICAgICAgICBpZiAoX3RoaXMub3duZXJIYW5kbGVzQ2xvc2UoKSkge1xuICAgICAgICAgIF90aGlzLnJlcXVlc3RDbG9zZShldmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuZm9jdXNDb250ZW50KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF90aGlzLnNob3VsZENsb3NlID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ29udGVudE9uTW91c2VVcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNob3VsZENsb3NlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU92ZXJsYXlPbk1vdXNlRG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5zaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrICYmIGV2ZW50LnRhcmdldCA9PSBfdGhpcy5vdmVybGF5KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNvbnRlbnRPbkNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2hvdWxkQ2xvc2UgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ29udGVudE9uTW91c2VEb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2hvdWxkQ2xvc2UgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVxdWVzdENsb3NlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gX3RoaXMub3duZXJIYW5kbGVzQ2xvc2UoKSAmJiBfdGhpcy5wcm9wcy5vblJlcXVlc3RDbG9zZShldmVudCk7XG4gICAgfTtcblxuICAgIF90aGlzLm93bmVySGFuZGxlc0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uUmVxdWVzdENsb3NlO1xuICAgIH07XG5cbiAgICBfdGhpcy5zaG91bGRCZUNsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhX3RoaXMuc3RhdGUuaXNPcGVuICYmICFfdGhpcy5zdGF0ZS5iZWZvcmVDbG9zZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuY29udGVudEhhc0ZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IF90aGlzLmNvbnRlbnQgfHwgX3RoaXMuY29udGVudC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuYnVpbGRDbGFzc05hbWUgPSBmdW5jdGlvbiAod2hpY2gsIGFkZGl0aW9uYWwpIHtcbiAgICAgIHZhciBjbGFzc05hbWVzID0gKHR5cGVvZiBhZGRpdGlvbmFsID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoYWRkaXRpb25hbCkpID09PSBcIm9iamVjdFwiID8gYWRkaXRpb25hbCA6IHtcbiAgICAgICAgYmFzZTogQ0xBU1NfTkFNRVNbd2hpY2hdLFxuICAgICAgICBhZnRlck9wZW46IENMQVNTX05BTUVTW3doaWNoXSArIFwiLS1hZnRlci1vcGVuXCIsXG4gICAgICAgIGJlZm9yZUNsb3NlOiBDTEFTU19OQU1FU1t3aGljaF0gKyBcIi0tYmVmb3JlLWNsb3NlXCJcbiAgICAgIH07XG4gICAgICB2YXIgY2xhc3NOYW1lID0gY2xhc3NOYW1lcy5iYXNlO1xuICAgICAgaWYgKF90aGlzLnN0YXRlLmFmdGVyT3Blbikge1xuICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgKyBcIiBcIiArIGNsYXNzTmFtZXMuYWZ0ZXJPcGVuO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnN0YXRlLmJlZm9yZUNsb3NlKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZSArIFwiIFwiICsgY2xhc3NOYW1lcy5iZWZvcmVDbG9zZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgYWRkaXRpb25hbCA9PT0gXCJzdHJpbmdcIiAmJiBhZGRpdGlvbmFsID8gY2xhc3NOYW1lICsgXCIgXCIgKyBhZGRpdGlvbmFsIDogY2xhc3NOYW1lO1xuICAgIH07XG5cbiAgICBfdGhpcy5hcmlhQXR0cmlidXRlcyA9IGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGl0ZW1zKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgbmFtZSkge1xuICAgICAgICBhY2NbXCJhcmlhLVwiICsgbmFtZV0gPSBpdGVtc1tuYW1lXTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBhZnRlck9wZW46IGZhbHNlLFxuICAgICAgYmVmb3JlQ2xvc2U6IGZhbHNlXG4gICAgfTtcblxuICAgIF90aGlzLnNob3VsZENsb3NlID0gbnVsbDtcbiAgICBfdGhpcy5tb3ZlRnJvbUNvbnRlbnRUb092ZXJsYXkgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNb2RhbFBvcnRhbCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5pc09wZW4pIHtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy5ib2R5T3BlbkNsYXNzTmFtZSAhPT0gdGhpcy5wcm9wcy5ib2R5T3BlbkNsYXNzTmFtZSkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS53YXJuKCdSZWFjdC1Nb2RhbDogXCJib2R5T3BlbkNsYXNzTmFtZVwiIHByb3AgaGFzIGJlZW4gbW9kaWZpZWQuICcgKyBcIlRoaXMgbWF5IGNhdXNlIHVuZXhwZWN0ZWQgYmVoYXZpb3Igd2hlbiBtdWx0aXBsZSBtb2RhbHMgYXJlIG9wZW4uXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2UHJvcHMuaHRtbE9wZW5DbGFzc05hbWUgIT09IHRoaXMucHJvcHMuaHRtbE9wZW5DbGFzc05hbWUpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybignUmVhY3QtTW9kYWw6IFwiaHRtbE9wZW5DbGFzc05hbWVcIiBwcm9wIGhhcyBiZWVuIG1vZGlmaWVkLiAnICsgXCJUaGlzIG1heSBjYXVzZSB1bmV4cGVjdGVkIGJlaGF2aW9yIHdoZW4gbXVsdGlwbGUgbW9kYWxzIGFyZSBvcGVuLlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pc09wZW4gJiYgIXByZXZQcm9wcy5pc09wZW4pIHtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLnByb3BzLmlzT3BlbiAmJiBwcmV2UHJvcHMuaXNPcGVuKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH1cblxuICAgICAgLy8gRm9jdXMgb25seSBuZWVkcyB0byBiZSBzZXQgb25jZSB3aGVuIHRoZSBtb2RhbCBpcyBiZWluZyBvcGVuZWRcbiAgICAgIGlmICh0aGlzLnByb3BzLnNob3VsZEZvY3VzQWZ0ZXJSZW5kZXIgJiYgdGhpcy5zdGF0ZS5pc09wZW4gJiYgIXByZXZTdGF0ZS5pc09wZW4pIHtcbiAgICAgICAgdGhpcy5mb2N1c0NvbnRlbnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmFmdGVyQ2xvc2UoKTtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNsb3NlVGltZXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJiZWZvcmVPcGVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJlZm9yZU9wZW4oKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhcHBFbGVtZW50ID0gX3Byb3BzLmFwcEVsZW1lbnQsXG4gICAgICAgICAgYXJpYUhpZGVBcHAgPSBfcHJvcHMuYXJpYUhpZGVBcHAsXG4gICAgICAgICAgaHRtbE9wZW5DbGFzc05hbWUgPSBfcHJvcHMuaHRtbE9wZW5DbGFzc05hbWUsXG4gICAgICAgICAgYm9keU9wZW5DbGFzc05hbWUgPSBfcHJvcHMuYm9keU9wZW5DbGFzc05hbWU7XG5cbiAgICAgIC8vIEFkZCBjbGFzc2VzLlxuXG4gICAgICBjbGFzc0xpc3QuYWRkKGRvY3VtZW50LmJvZHksIGJvZHlPcGVuQ2xhc3NOYW1lKTtcblxuICAgICAgaHRtbE9wZW5DbGFzc05hbWUgJiYgY2xhc3NMaXN0LmFkZChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImh0bWxcIilbMF0sIGh0bWxPcGVuQ2xhc3NOYW1lKTtcblxuICAgICAgaWYgKGFyaWFIaWRlQXBwKSB7XG4gICAgICAgIGFyaWFIaWRkZW5JbnN0YW5jZXMgKz0gMTtcbiAgICAgICAgYXJpYUFwcEhpZGVyLmhpZGUoYXBwRWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRG9uJ3Qgc3RlYWwgZm9jdXMgZnJvbSBpbm5lciBlbGVtZW50c1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgICBvdmVybGF5Q2xhc3NOYW1lID0gX3Byb3BzMi5vdmVybGF5Q2xhc3NOYW1lLFxuICAgICAgICAgIGRlZmF1bHRTdHlsZXMgPSBfcHJvcHMyLmRlZmF1bHRTdHlsZXM7XG5cbiAgICAgIHZhciBjb250ZW50U3R5bGVzID0gY2xhc3NOYW1lID8ge30gOiBkZWZhdWx0U3R5bGVzLmNvbnRlbnQ7XG4gICAgICB2YXIgb3ZlcmxheVN0eWxlcyA9IG92ZXJsYXlDbGFzc05hbWUgPyB7fSA6IGRlZmF1bHRTdHlsZXMub3ZlcmxheTtcblxuICAgICAgcmV0dXJuIHRoaXMuc2hvdWxkQmVDbG9zZWQoKSA/IG51bGwgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAge1xuICAgICAgICAgIHJlZjogdGhpcy5zZXRPdmVybGF5UmVmLFxuICAgICAgICAgIGNsYXNzTmFtZTogdGhpcy5idWlsZENsYXNzTmFtZShcIm92ZXJsYXlcIiwgb3ZlcmxheUNsYXNzTmFtZSksXG4gICAgICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBvdmVybGF5U3R5bGVzLCB0aGlzLnByb3BzLnN0eWxlLm92ZXJsYXkpLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlT3ZlcmxheU9uQ2xpY2ssXG4gICAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlT3ZlcmxheU9uTW91c2VEb3duLFxuICAgICAgICAgIFwiYXJpYS1tb2RhbFwiOiBcInRydWVcIlxuICAgICAgICB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICAgIHJlZjogdGhpcy5zZXRDb250ZW50UmVmLFxuICAgICAgICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBjb250ZW50U3R5bGVzLCB0aGlzLnByb3BzLnN0eWxlLmNvbnRlbnQpLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiB0aGlzLmJ1aWxkQ2xhc3NOYW1lKFwiY29udGVudFwiLCBjbGFzc05hbWUpLFxuICAgICAgICAgICAgdGFiSW5kZXg6IFwiLTFcIixcbiAgICAgICAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlEb3duLFxuICAgICAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlQ29udGVudE9uTW91c2VEb3duLFxuICAgICAgICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZUNvbnRlbnRPbk1vdXNlVXAsXG4gICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNvbnRlbnRPbkNsaWNrLFxuICAgICAgICAgICAgcm9sZTogdGhpcy5wcm9wcy5yb2xlLFxuICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHRoaXMucHJvcHMuY29udGVudExhYmVsXG4gICAgICAgICAgfSwgdGhpcy5hcmlhQXR0cmlidXRlcyh0aGlzLnByb3BzLmFyaWEgfHwge30pLCB7XG4gICAgICAgICAgICBcImRhdGEtdGVzdGlkXCI6IHRoaXMucHJvcHMudGVzdElkXG4gICAgICAgICAgfSksXG4gICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNb2RhbFBvcnRhbDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbk1vZGFsUG9ydGFsLmRlZmF1bHRQcm9wcyA9IHtcbiAgc3R5bGU6IHtcbiAgICBvdmVybGF5OiB7fSxcbiAgICBjb250ZW50OiB7fVxuICB9LFxuICBkZWZhdWx0U3R5bGVzOiB7fVxufTtcbk1vZGFsUG9ydGFsLnByb3BUeXBlcyA9IHtcbiAgaXNPcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCxcbiAgZGVmYXVsdFN0eWxlczogX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgY29udGVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gICAgb3ZlcmxheTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3RcbiAgfSksXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgICBjb250ZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgICBvdmVybGF5OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxuICB9KSxcbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XSksXG4gIG92ZXJsYXlDbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3RdKSxcbiAgYm9keU9wZW5DbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBodG1sT3BlbkNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGFyaWFIaWRlQXBwOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGFwcEVsZW1lbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuaW5zdGFuY2VPZihfc2FmZUhUTUxFbGVtZW50Mi5kZWZhdWx0KSxcbiAgb25BZnRlck9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb25SZXF1ZXN0Q2xvc2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgY2xvc2VUaW1lb3V0TVM6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBzaG91bGRGb2N1c0FmdGVyUmVuZGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHNob3VsZENsb3NlT25PdmVybGF5Q2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgc2hvdWxkUmV0dXJuRm9jdXNBZnRlckNsb3NlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHJvbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBjb250ZW50TGFiZWw6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBhcmlhOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgc2hvdWxkQ2xvc2VPbkVzYzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBvdmVybGF5UmVmOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGNvbnRlbnRSZWY6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgdGVzdElkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IE1vZGFsUG9ydGFsO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYm9keU9wZW5DbGFzc05hbWUgPSBleHBvcnRzLnBvcnRhbENsYXNzTmFtZSA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKFwicmVhY3QtZG9tXCIpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKFwicHJvcC10eXBlc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9Nb2RhbFBvcnRhbCA9IHJlcXVpcmUoXCIuL01vZGFsUG9ydGFsXCIpO1xuXG52YXIgX01vZGFsUG9ydGFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01vZGFsUG9ydGFsKTtcblxudmFyIF9hcmlhQXBwSGlkZXIgPSByZXF1aXJlKFwiLi4vaGVscGVycy9hcmlhQXBwSGlkZXJcIik7XG5cbnZhciBhcmlhQXBwSGlkZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfYXJpYUFwcEhpZGVyKTtcblxudmFyIF9zYWZlSFRNTEVsZW1lbnQgPSByZXF1aXJlKFwiLi4vaGVscGVycy9zYWZlSFRNTEVsZW1lbnRcIik7XG5cbnZhciBfc2FmZUhUTUxFbGVtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NhZmVIVE1MRWxlbWVudCk7XG5cbnZhciBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0ID0gcmVxdWlyZShcInJlYWN0LWxpZmVjeWNsZXMtY29tcGF0XCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBwb3J0YWxDbGFzc05hbWUgPSBleHBvcnRzLnBvcnRhbENsYXNzTmFtZSA9IFwiUmVhY3RNb2RhbFBvcnRhbFwiO1xudmFyIGJvZHlPcGVuQ2xhc3NOYW1lID0gZXhwb3J0cy5ib2R5T3BlbkNsYXNzTmFtZSA9IFwiUmVhY3RNb2RhbF9fQm9keS0tb3BlblwiO1xuXG52YXIgaXNSZWFjdDE2ID0gX3JlYWN0RG9tMi5kZWZhdWx0LmNyZWF0ZVBvcnRhbCAhPT0gdW5kZWZpbmVkO1xudmFyIGNyZWF0ZVBvcnRhbCA9IGlzUmVhY3QxNiA/IF9yZWFjdERvbTIuZGVmYXVsdC5jcmVhdGVQb3J0YWwgOiBfcmVhY3REb20yLmRlZmF1bHQudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI7XG5cbmZ1bmN0aW9uIGdldFBhcmVudEVsZW1lbnQocGFyZW50U2VsZWN0b3IpIHtcbiAgcmV0dXJuIHBhcmVudFNlbGVjdG9yKCk7XG59XG5cbnZhciBNb2RhbCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNb2RhbCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWwoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBNb2RhbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1vZGFsKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMucmVtb3ZlUG9ydGFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgIWlzUmVhY3QxNiAmJiBfcmVhY3REb20yLmRlZmF1bHQudW5tb3VudENvbXBvbmVudEF0Tm9kZShfdGhpcy5ub2RlKTtcbiAgICAgIHZhciBwYXJlbnQgPSBnZXRQYXJlbnRFbGVtZW50KF90aGlzLnByb3BzLnBhcmVudFNlbGVjdG9yKTtcbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChfdGhpcy5ub2RlKTtcbiAgICB9LCBfdGhpcy5wb3J0YWxSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5wb3J0YWwgPSByZWY7XG4gICAgfSwgX3RoaXMucmVuZGVyUG9ydGFsID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICB2YXIgcG9ydGFsID0gY3JlYXRlUG9ydGFsKF90aGlzLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTW9kYWxQb3J0YWwyLmRlZmF1bHQsIF9leHRlbmRzKHsgZGVmYXVsdFN0eWxlczogTW9kYWwuZGVmYXVsdFN0eWxlcyB9LCBwcm9wcykpLCBfdGhpcy5ub2RlKTtcbiAgICAgIF90aGlzLnBvcnRhbFJlZihwb3J0YWwpO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1vZGFsLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICghX3NhZmVIVE1MRWxlbWVudC5jYW5Vc2VET00pIHJldHVybjtcblxuICAgICAgaWYgKCFpc1JlYWN0MTYpIHtcbiAgICAgICAgdGhpcy5ub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubm9kZS5jbGFzc05hbWUgPSB0aGlzLnByb3BzLnBvcnRhbENsYXNzTmFtZTtcblxuICAgICAgdmFyIHBhcmVudCA9IGdldFBhcmVudEVsZW1lbnQodGhpcy5wcm9wcy5wYXJlbnRTZWxlY3Rvcik7XG4gICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5ub2RlKTtcblxuICAgICAgIWlzUmVhY3QxNiAmJiB0aGlzLnJlbmRlclBvcnRhbCh0aGlzLnByb3BzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB2YXIgcHJldlBhcmVudCA9IGdldFBhcmVudEVsZW1lbnQocHJldlByb3BzLnBhcmVudFNlbGVjdG9yKTtcbiAgICAgIHZhciBuZXh0UGFyZW50ID0gZ2V0UGFyZW50RWxlbWVudCh0aGlzLnByb3BzLnBhcmVudFNlbGVjdG9yKTtcbiAgICAgIHJldHVybiB7IHByZXZQYXJlbnQ6IHByZXZQYXJlbnQsIG5leHRQYXJlbnQ6IG5leHRQYXJlbnQgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIF8sIHNuYXBzaG90KSB7XG4gICAgICBpZiAoIV9zYWZlSFRNTEVsZW1lbnQuY2FuVXNlRE9NKSByZXR1cm47XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc09wZW4gPSBfcHJvcHMuaXNPcGVuLFxuICAgICAgICAgIHBvcnRhbENsYXNzTmFtZSA9IF9wcm9wcy5wb3J0YWxDbGFzc05hbWU7XG5cblxuICAgICAgaWYgKHByZXZQcm9wcy5wb3J0YWxDbGFzc05hbWUgIT09IHBvcnRhbENsYXNzTmFtZSkge1xuICAgICAgICB0aGlzLm5vZGUuY2xhc3NOYW1lID0gcG9ydGFsQ2xhc3NOYW1lO1xuICAgICAgfVxuXG4gICAgICAvLyBTdG9wIHVubmVjZXNzYXJ5IHJlbmRlcnMgaWYgbW9kYWwgaXMgcmVtYWluaW5nIGNsb3NlZFxuICAgICAgaWYgKCFwcmV2UHJvcHMuaXNPcGVuICYmICFpc09wZW4pIHJldHVybjtcblxuICAgICAgdmFyIHByZXZQYXJlbnQgPSBzbmFwc2hvdC5wcmV2UGFyZW50LFxuICAgICAgICAgIG5leHRQYXJlbnQgPSBzbmFwc2hvdC5uZXh0UGFyZW50O1xuXG4gICAgICBpZiAobmV4dFBhcmVudCAhPT0gcHJldlBhcmVudCkge1xuICAgICAgICBwcmV2UGFyZW50LnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7XG4gICAgICAgIG5leHRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5ub2RlKTtcbiAgICAgIH1cblxuICAgICAgIWlzUmVhY3QxNiAmJiB0aGlzLnJlbmRlclBvcnRhbCh0aGlzLnByb3BzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAoIV9zYWZlSFRNTEVsZW1lbnQuY2FuVXNlRE9NIHx8ICF0aGlzLm5vZGUgfHwgIXRoaXMucG9ydGFsKSByZXR1cm47XG5cbiAgICAgIHZhciBzdGF0ZSA9IHRoaXMucG9ydGFsLnN0YXRlO1xuICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICB2YXIgY2xvc2VzQXQgPSBzdGF0ZS5pc09wZW4gJiYgdGhpcy5wcm9wcy5jbG9zZVRpbWVvdXRNUyAmJiAoc3RhdGUuY2xvc2VzQXQgfHwgbm93ICsgdGhpcy5wcm9wcy5jbG9zZVRpbWVvdXRNUyk7XG5cbiAgICAgIGlmIChjbG9zZXNBdCkge1xuICAgICAgICBpZiAoIXN0YXRlLmJlZm9yZUNsb3NlKSB7XG4gICAgICAgICAgdGhpcy5wb3J0YWwuY2xvc2VXaXRoVGltZW91dCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0VGltZW91dCh0aGlzLnJlbW92ZVBvcnRhbCwgY2xvc2VzQXQgLSBub3cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW1vdmVQb3J0YWwoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIGlmICghX3NhZmVIVE1MRWxlbWVudC5jYW5Vc2VET00gfHwgIWlzUmVhY3QxNikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLm5vZGUgJiYgaXNSZWFjdDE2KSB7XG4gICAgICAgIHRoaXMubm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjcmVhdGVQb3J0YWwoX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX01vZGFsUG9ydGFsMi5kZWZhdWx0LCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogdGhpcy5wb3J0YWxSZWYsXG4gICAgICAgIGRlZmF1bHRTdHlsZXM6IE1vZGFsLmRlZmF1bHRTdHlsZXNcbiAgICAgIH0sIHRoaXMucHJvcHMpKSwgdGhpcy5ub2RlKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJzZXRBcHBFbGVtZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEFwcEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgYXJpYUFwcEhpZGVyLnNldEVsZW1lbnQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tdW51c2VkLXByb3AtdHlwZXMgKi9cblxuICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3Qvbm8tdW51c2VkLXByb3AtdHlwZXMgKi9cblxuICB9XSk7XG5cbiAgcmV0dXJuIE1vZGFsO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuTW9kYWwucHJvcFR5cGVzID0ge1xuICBpc09wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLFxuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgY29udGVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gICAgb3ZlcmxheTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3RcbiAgfSksXG4gIHBvcnRhbENsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGJvZHlPcGVuQ2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgaHRtbE9wZW5DbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgYmFzZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBhZnRlck9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgYmVmb3JlQ2xvc2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWRcbiAgfSldKSxcbiAgb3ZlcmxheUNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgICBiYXNlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGFmdGVyT3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBiZWZvcmVDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZFxuICB9KV0pLFxuICBhcHBFbGVtZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lmluc3RhbmNlT2YoX3NhZmVIVE1MRWxlbWVudDIuZGVmYXVsdCksXG4gIG9uQWZ0ZXJPcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9uUmVxdWVzdENsb3NlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGNsb3NlVGltZW91dE1TOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgYXJpYUhpZGVBcHA6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgc2hvdWxkRm9jdXNBZnRlclJlbmRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHNob3VsZFJldHVybkZvY3VzQWZ0ZXJDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBwYXJlbnRTZWxlY3RvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBhcmlhOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgcm9sZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGNvbnRlbnRMYWJlbDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIHNob3VsZENsb3NlT25Fc2M6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgb3ZlcmxheVJlZjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBjb250ZW50UmVmOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNcbn07XG5Nb2RhbC5kZWZhdWx0UHJvcHMgPSB7XG4gIGlzT3BlbjogZmFsc2UsXG4gIHBvcnRhbENsYXNzTmFtZTogcG9ydGFsQ2xhc3NOYW1lLFxuICBib2R5T3BlbkNsYXNzTmFtZTogYm9keU9wZW5DbGFzc05hbWUsXG4gIGFyaWFIaWRlQXBwOiB0cnVlLFxuICBjbG9zZVRpbWVvdXRNUzogMCxcbiAgc2hvdWxkRm9jdXNBZnRlclJlbmRlcjogdHJ1ZSxcbiAgc2hvdWxkQ2xvc2VPbkVzYzogdHJ1ZSxcbiAgc2hvdWxkQ2xvc2VPbk92ZXJsYXlDbGljazogdHJ1ZSxcbiAgc2hvdWxkUmV0dXJuRm9jdXNBZnRlckNsb3NlOiB0cnVlLFxuICBwYXJlbnRTZWxlY3RvcjogZnVuY3Rpb24gcGFyZW50U2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cbn07XG5Nb2RhbC5kZWZhdWx0U3R5bGVzID0ge1xuICBvdmVybGF5OiB7XG4gICAgcG9zaXRpb246IFwiZml4ZWRcIixcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSlcIlxuICB9LFxuICBjb250ZW50OiB7XG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICB0b3A6IFwiNDBweFwiLFxuICAgIGxlZnQ6IFwiNDBweFwiLFxuICAgIHJpZ2h0OiBcIjQwcHhcIixcbiAgICBib3R0b206IFwiNDBweFwiLFxuICAgIGJvcmRlcjogXCIxcHggc29saWQgI2NjY1wiLFxuICAgIGJhY2tncm91bmQ6IFwiI2ZmZlwiLFxuICAgIG92ZXJmbG93OiBcImF1dG9cIixcbiAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogXCJ0b3VjaFwiLFxuICAgIGJvcmRlclJhZGl1czogXCI0cHhcIixcbiAgICBvdXRsaW5lOiBcIm5vbmVcIixcbiAgICBwYWRkaW5nOiBcIjIwcHhcIlxuICB9XG59O1xuXG5cbigwLCBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0LnBvbHlmaWxsKShNb2RhbCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE1vZGFsOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAncmVhY3QtbW9kYWwnO1xuaW1wb3J0IHtFZGl0b3IsIEVkaXRvclN0YXRlfSBmcm9tICdkcmFmdC1qcyc7XG5cbk1vZGFsLnNldEFwcEVsZW1lbnQoJyNhcHAnKTtcblxuY2xhc3MgSm9iRWRpdE1vZGFsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgXG4gICAgcmV0dXJuIChcbiAgICAgIDxNb2RhbCBcbiAgICAgICAgaXNPcGVuPXt0aGlzLnByb3BzLmlzT3Blbn1cbiAgICAgICAgY29udGVudExhYmVsPVwibGVhcm4tcGF0aC1tb2RhbFwiXG4gICAgICAgIG9uUmVxdWVzdENsb3NlPXt0aGlzLnByb3BzLmNsb3NlSm9iTW9kYWx9XG4gICAgICA+XG5cbiAgICAgIFxuICAgICAgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLXRpbWVzLWNpcmNsZSBsZWFybi1wYXRoLWNsb3NlXCIgb25DbGljaz17dGhpcy5wcm9wcy5jbG9zZUpvYk1vZGFsfT48L2k+XG4gICAgICA8TXlFZGl0b3IvPlxuICAgICAgPC9Nb2RhbD5cbiAgICApfVxuICBcbn1cblxuY2xhc3MgTXlFZGl0b3IgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICBzdXBlcihwcm9wcyk7XG4gICAgICB0aGlzLnN0YXRlID0ge2VkaXRvclN0YXRlOiBFZGl0b3JTdGF0ZS5jcmVhdGVFbXB0eSgpfTtcbiAgICAgIHRoaXMub25DaGFuZ2UgPSAoZWRpdG9yU3RhdGUpID0+IHRoaXMuc2V0U3RhdGUoe2VkaXRvclN0YXRlfSk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgICAgPEVkaXRvciBlZGl0b3JTdGF0ZT17dGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZX0gb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9IGlkPVwiZW1wbG95ZXItZHJhZnRcIi8+XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG5leHBvcnQgZGVmYXVsdCBKb2JFZGl0TW9kYWw7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBKb2JFZGl0TW9kYWwgZnJvbSAnLi9Kb2JFZGl0TW9kYWwuanMnO1xuXG5jbGFzcyBTaW5nbGVEYXNoYm9hcmRKb2IgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLm9wZW5Kb2JNb2RhbCA9IHRoaXMub3BlbkpvYk1vZGFsLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuY2xvc2VKb2JNb2RhbCA9IHRoaXMuY2xvc2VKb2JNb2RhbC5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBpc09wZW46IGZhbHNlLFxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBvcGVuSm9iTW9kYWwoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaXNPcGVuOiB0cnVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgY2xvc2VKb2JNb2RhbCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpc09wZW46IGZhbHNlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8aDE+Sm9iIFRpdGxlIEhlcmU8L2gxPlxuICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5vcGVuSm9iTW9kYWx9PkVkaXQgSm9iPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPEpvYkVkaXRNb2RhbCBpc09wZW49e3RoaXMuc3RhdGUuaXNPcGVufSBjbG9zZUpvYk1vZGFsPXt0aGlzLmNsb3NlSm9iTW9kYWx9Lz5cblxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbmdsZURhc2hib2FyZEpvYjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFNpbmdsZURhc2hib2FyZEpvYiBmcm9tICcuLi9qb2JzL1NpbmdsZURhc2hib2FyZEpvYi5qcyc7XG5cbmNsYXNzIENvbXBhbnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICBcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpbmdsZS1jb21wYW55XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21wYW55LWhlYWRlclwiPjxoMj57dGhpcy5wcm9wcy50aXRsZX08L2gyPjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uLWNvbnRhaW5lclwiPjxidXR0b24gY2xhc3NOYW1lPVwiZGVsZXRlLWNvbXBhbnktYnV0dG9uXCI+RGVsZXRlPC9idXR0b24+PC9kaXY+XG4gICAgICAgICAgICAgICAgPHNlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgIDxoMT5Kb2IgUG9zdGluZ3MgZm9yIHRoaXMge3RoaXMucHJvcHMudGl0bGV9PC9oMT5cbiAgICAgICAgICAgICAgICAgICAgPFNpbmdsZURhc2hib2FyZEpvYi8+XG4gICAgICAgICAgICAgICAgICAgIDxTaW5nbGVEYXNoYm9hcmRKb2IvPlxuICAgICAgICAgICAgICAgIDwvc2VjdGlvbj4gICAgXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcGFueTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENvbXBhbnkgZnJvbSAnLi9Db21wYW55LmpzJztcbmltcG9ydCBOZXdDb21wYW55TW9kYWwgZnJvbSAnLi9OZXdDb21wYW55TW9kYWwuanMnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuY2xhc3MgQ29tcGFuaWVzU2VjdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jcmVhdGVOZXdDb21wYW55ID0gdGhpcy5jcmVhdGVOZXdDb21wYW55LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuY2xvc2VOZXdDb21wYW55TW9kYWwgPSB0aGlzLmNsb3NlTmV3Q29tcGFueU1vZGFsLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGNvbXBhbmllczogW10sXG4gICAgICAgICAgICBuZXdDb21wYW55TW9kYWxJc09wZW46IGZhbHNlLFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlTmV3Q29tcGFueSgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBuZXdDb21wYW55TW9kYWxJc09wZW46IHRydWVcbiAgICAgICAgfSlcbiAgICAgICAgY29uc29sZS5sb2coJ29wZW4gY29tcGFueSBtb2RhbCcpO1xuICAgIH1cblxuICAgIGNsb3NlTmV3Q29tcGFueU1vZGFsKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG5ld0NvbXBhbnlNb2RhbElzT3BlbjogZmFsc2VcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgIGNvbnN0IGFsbFVzZXJDb21wYW5pZXNFbmRQb2ludCA9ICdodHRwOi8vMTI3LjAuMC4xOjgwMDAvY29tcGFueS91c2VyX3ZpZXcnO1xuICAgICAgICBheGlvcyh7XG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICAgICAgdXJsOiBhbGxVc2VyQ29tcGFuaWVzRW5kUG9pbnQsIFxuICAgICAgICAgICAgZGF0YTogeyAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNwb25zZVR5cGU6ICdqc29uJ1xuICAgICAgICB9KVxuICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4geyBcbiAgIFxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFuaWVzOiByZXNwb25zZS5kYXRhXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiA8UmVkaXJlY3QgdG89Jy9lbXBsb3llcl9kYXNoYm9hcmQnLz5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBhbiBlcnJvciB5b1wiLCBlcnJvcik7XG4gICAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICAgICAgICA8aDE+Q29tcGFuaWVzPC9oMT5cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiY3JlYXRlLW5ldy1jb21wYW55LWNvbnRhaW5lclwiPjxidXR0b24gaWQ9XCJjcmVhdGUtbmV3LWNvbXBhbnktYnV0dG9uXCIgb25DbGljaz17dGhpcy5jcmVhdGVOZXdDb21wYW55fT5DcmVhdGUgbmV3IGNvbXBhbnk8L2J1dHRvbj48L2Rpdj5cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5jb21wYW5pZXMubWFwKChjb21wYW55KSA9PiA8Q29tcGFueSB0aXRsZT17Y29tcGFueS5uYW1lfS8+KX1cbiAgICAgICAgICAgICAgICA8TmV3Q29tcGFueU1vZGFsIG5ld0NvbXBhbnlNb2RhbElzT3Blbj17dGhpcy5zdGF0ZS5uZXdDb21wYW55TW9kYWxJc09wZW59IGNsb3NlTmV3Q29tcGFueU1vZGFsPXt0aGlzLmNsb3NlTmV3Q29tcGFueU1vZGFsfS8+XG4gICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBhbmllc1NlY3Rpb247IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuLi9nbG9iYWwvSGVhZGVyLmpzJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi4vZ2xvYmFsL0Zvb3Rlci5qcyc7XG5pbXBvcnQgQ29tcGFuaWVzU2VjdGlvbiBmcm9tICcuL2NvbXBhbmllcy9Db21wYW5pZXNTZWN0aW9uLmpzJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5jbGFzcyBFbXBsb3llckRhc2hib2FyZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7IFxuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlTG9nT3V0ID0gdGhpcy5oYW5kbGVMb2dPdXQuYmluZCh0aGlzKTtcblxuICAgICAgICBjb25zdCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdyZXNwb25zZVRva2VuJyk7XG4gICAgICAgIGNvbnN0IGVtYWlsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Jlc3BvbnNlRW1haWwnKTtcblxuICAgICAgICBjb25zdCBmaXJzdE5hbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncmVzcG9uc2VFbWFpbCcpO1xuICAgICAgICBjb25zdCBsYXN0TmFtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdyZXNwb25zZUVtYWlsJyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlZGlyZWN0VG9Ib21lOiBmYWxzZSxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogbnVsbCxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBudWxsLFxuICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxuICAgICAgICAgICAgdG9rZW46IHRva2VuLFxuICAgICAgICAgICAgcmV0dXJuZWRSZXNwb25zZTogbnVsbFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuXG4gICAgICAgIGNvbnN0IGdldFVzZXJEYXRhRW5kcG9pbnQgPSAnaHR0cDovLzEyNy4wLjAuMTo4MDAwL2F1dGhlbnRpY2F0ZS9jdXJyZW50X3VzZXIvJztcbiAgICAgICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9IHRoaXMuc3RhdGUudG9rZW5cbiAgICAgICAgYXhpb3Moe1xuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgICAgIHVybDogZ2V0VXNlckRhdGFFbmRwb2ludCAsIFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBlbWFpbDogdGhpcy5zdGF0ZS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW46IHRoaXMuc3RhdGUudG9rZW4sICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJytsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncmVzcG9uc2VUb2tlbicpXG4gICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICByZXNwb25zZVR5cGU6ICdqc29uJ1xuICAgICAgICB9KVxuICAgICAgICAudGhlbiggcmVzcG9uc2UgPT4geyBcbiAgIFxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybmVkUmVzcG9uc2U6IHJlc3BvbnNlLFxuICAgICAgICAgICAgICAgICAgICBmaXJzdE5hbWU6IHJlc3BvbnNlLmRhdGEuZmlyc3RfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6IHJlc3BvbnNlLmRhdGEubGFzdF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogcmVzcG9uc2UuZGF0YS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW46IHJlc3BvbnNlLmRhdGEudG9rZW5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBhbiBlcnJvciB5b1wiLCBlcnJvcik7XG4gICAgICAgICAgfSlcbiAgICB9XG5cbiAgICBoYW5kbGVMb2dPdXQoKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgICAgICBjb25zb2xlLmxvZygnbG9nZ2luZyBvdXQuLi4nKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICByZWRpcmVjdFRvSG9tZTogdHJ1ZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucmVkaXJlY3RUb0hvbWUpIHtcbiAgICAgICAgICAgIHJldHVybiA8UmVkaXJlY3QgdG89Jy8nLz5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8SGVhZGVyLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiZW1wbG95ZXItd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPGgxPkVtcGxveWVyIERhc2hib2FyZDwvaDE+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgb25DbGljaz17dGhpcy5oYW5kbGVMb2dPdXR9IGlkPVwibG9nb3V0XCI+PGJ1dHRvbiBpZD1cImxvZ291dC1idXR0b25cIj5Mb2dvdXQ8L2J1dHRvbj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDE+UHJvZmlsZTo8L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+Rmlyc3RuYW1lOiB7dGhpcy5zdGF0ZS5maXJzdE5hbWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+U3VybmFtZToge3RoaXMuc3RhdGUubGFzdE5hbWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+RW1haWw6IHt0aGlzLnN0YXRlLmVtYWlsfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlRva2VuOiB7dGhpcy5zdGF0ZS50b2tlbn0gPC9wPlxuICAgICAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgIDxDb21wYW5pZXNTZWN0aW9uLz4gXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPEZvb3Rlci8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgIH1cbn1cblxuXG5cbmV4cG9ydCBkZWZhdWx0IEVtcGxveWVyRGFzaGJvYXJkOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi4vZ2xvYmFsL0hlYWRlci5qcyc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4uL2dsb2JhbC9Gb290ZXIuanMnO1xuaW1wb3J0IEpvYnNQYWdlIGZyb20gJy4uL2pvYnMvSm9ic1BhZ2UuanMnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuXG5jbGFzcyBFbXBsb3llZURhc2hib2FyZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7IFxuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Jlc3BvbnNlVG9rZW4nKTtcbiAgICAgICAgY29uc3QgZW1haWwgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncmVzcG9uc2VFbWFpbCcpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmaXJzdE5hbWU6IHRoaXMucHJvcHMuZmlyc3RfbmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiB0aGlzLnByb3BzLmxhc3RfbmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgICAgICAgIHRva2VuOiB0b2tlbixcblxuICAgICAgICB9XG4gICAgfVxuXG4gXG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxIZWFkZXIvPlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJlbXBsb3llci13cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8aDE+RW1wbG95ZWUgRGFzaGJvYXJkPC9oMT5cbiAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDE+UHJvZmlsZTo8L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+Rmlyc3RuYW1lOiB7dGhpcy5zdGF0ZS5maXJzdE5hbWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+U3VybmFtZToge3RoaXMuc3RhdGUubGFzdE5hbWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+RW1haWw6IHt0aGlzLnN0YXRlLmVtYWlsfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlRva2VuOiB7dGhpcy5zdGF0ZS50b2tlbn0gPC9wPlxuXG4gICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxGb290ZXIvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVtcGxveWVlRGFzaGJvYXJkOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi4vZ2xvYmFsL0hlYWRlci5qcyc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4uL2dsb2JhbC9Gb290ZXIuanMnO1xuaW1wb3J0IEpvYnNQYWdlIGZyb20gJy4uL2pvYnMvSm9ic1BhZ2UuanMnO1xuaW1wb3J0IExvZ2luIGZyb20gJy4uL2dsb2JhbC9Mb2dpbi5qcyc7XG5pbXBvcnQgUmVnaXN0ZXIgZnJvbSAnLi4vZ2xvYmFsL1JlZ2lzdGVyLmpzJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmNsYXNzIE15QWNjb3VudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICBjb25zdCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdyZXNwb25zZVRva2VuJyk7XG4gICAgICAgIHRoaXMuc2hvd0xvZ2luID0gdGhpcy5zaG93TG9naW4uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zaG93UmVnaXN0ZXIgPSB0aGlzLnNob3dSZWdpc3Rlci5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB0b2tlbjogdG9rZW4sXG4gICAgICAgICAgICBzaG93VGFiOiBcImxvZ2luXCIsXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaG93TG9naW4oKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHNob3dUYWI6ICdsb2dpbicsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2hvd2xvZ2luJyk7XG5cbiAgICB9XG5cbiAgICBzaG93UmVnaXN0ZXIoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2hvd1RhYjogJ3JlZ2lzdGVyJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zb2xlLmxvZygnc2hvd1JlZ2lzdGVyJyk7XG5cbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnRva2VuKSB7XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPEhlYWRlci8+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImxvZ2luLXJlZ2lzdGVyLXRhYnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsgdGhpcy5zaG93TG9naW4gfSBjbGFzc05hbWU9XCJhY2NvdW50LXRhYlwiPjxoMj5Mb2dpbjwvaDI+PC9kaXY+PGRpdiBvbkNsaWNrPXsgdGhpcy5zaG93UmVnaXN0ZXIgfSBjbGFzc05hbWU9XCJhY2NvdW50LXRhYlwiPjxoMj5SZWdpc3RlcjwvaDI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNob3dUYWIgPT0gXCJsb2dpblwiID8gPExvZ2luLz4gOiA8UmVnaXN0ZXIvPn1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8Rm9vdGVyLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG5cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE15QWNjb3VudDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4vSGVhZGVyLmpzJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi9Gb290ZXIuanMnO1xuaW1wb3J0IEpvYnNQYWdlIGZyb20gJy4uL2pvYnMvSm9ic1BhZ2UuanMnO1xuXG5mdW5jdGlvbiBDb250YWN0KHByb3BzKSB7XG5cbiAgICBjb25zb2xlLmxvZyhwcm9wcyk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPEhlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgICAgIDwvSGVhZGVyPlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJjb250YWN0LW91dGVyLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImNvbnRhY3QtaW5uZXItd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImNvbnRhY3QtdGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+Q29udGFjdDwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPkFkZGluZyBhIGxpc3Rpbmc8L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlRvIGFkZCBhIGpvYiBwb3N0IHRvIHRoZSBzaXRlLCBwbGVhc2UgZW1haWwgbWFyaWx5bkB0aGVuZXh0c3RlcC5pbzwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Qb3N0cyBzaG91bGQgZm9sbG93IHRoZSBmb2xsb3dpbmcgZm9ybWF0OjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48cD5Sb2xlIGJlaW5nIGFkdmVydGlzZWQ8L3A+PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxwPlRhZ2xpbmUgKDEgc2hvcnQgc2VudGVuY2UgZGlzcGxheWVkIG9uIGpvYiBsaXN0aW5nIHBhZ2UpPC9wPjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48cD5Ib3VycyAtIGZ1bGwtdGltZSBvciBwYXJ0LXRpbWU8L3A+PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxwPkFyZWE6IEZyb250LWVuZCwgRnVsbC1zdGFjaywgRGVzaWduZXIgZXRjPC9wPjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48cD5Mb2NhdGlvbjwvcD48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHA+U2FsYXJ5IC0gcGxlYXNlIG5vdGUsIHdlIHdpbGwgbm90IHB1Ymxpc2ggcG9zdHMgdGhhdCBkbyBub3QgbGlzdCBhIHNhbGFyeSByYW5nZS48L3A+PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxwPkZ1bGwgam9iIGRlc2NyaXB0aW9uIC0gdGhpcyBjYW4gYmUgYXMgbG9uZyBhcyB5b3UgbGlrZTwvcD48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHA+UGxlYXNlIGFsc28gYXR0YWNoIGEgMzAweDMwMHB4IGxvZ28gZm9yIHlvdXIgY29tcGFueTwvcD48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPkFkZGl0aW9uYWwgbm90ZXM8L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPldlJ3JlIGhhcHB5IHRvIHBvc3QgaW50ZXJuc2hpcHMsIGJ1dCB0aGVzZSBtdXN0IGJlIHBhaWQgaW50ZXJuc2hpcHM8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+WW91J3JlIGFsc28gd2VsY29tZSB0byBwb3N0IGNvbnRyYWN0L2ZyZWVsYW5jZSBwcm9qZWN0czwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QbGVhc2UgZG9uJ3QgZm9yZ2V0IHRvIGluY2x1ZGUgZGV0YWlscyBvZiBob3cgdG8gYXBwbHkgZm9yIHRoZSBwb3N0PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPEZvb3Rlci8+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICBcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGFjdDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4vSGVhZGVyLmpzJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi9Gb290ZXIuanMnO1xuaW1wb3J0IEpvYnNQYWdlIGZyb20gJy4uL2pvYnMvSm9ic1BhZ2UuanMnO1xuXG5jbGFzcyBBYm91dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8SGVhZGVyPlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgICAgICA8L0hlYWRlcj5cbiAgICAgICAgICAgICAgICA8aDE+QWJvdXQ8L2gxPlxuXG4gICAgICAgICAgICAgICAgPEZvb3Rlci8+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH0gICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCBBYm91dDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4vSGVhZGVyLmpzJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi9Gb290ZXIuanMnO1xuaW1wb3J0IEpvYnNQYWdlIGZyb20gJy4uL2pvYnMvSm9ic1BhZ2UuanMnO1xuXG5jbGFzcyBIb21lIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxIZWFkZXI+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgICAgIDwvSGVhZGVyPlxuICAgICAgICAgICAgICAgIDxKb2JzUGFnZS8+XG5cbiAgICAgICAgICAgICAgICA8Rm9vdGVyLz5cblxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfSAgICAgXG59XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWU7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFNpbmdsZUpvYiBmcm9tICcuL1NpbmdsZUpvYi5qcyc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4uL2dsb2JhbC9IZWFkZXIuanMnO1xuaW1wb3J0IEZvb3RlciBmcm9tICcuLi9nbG9iYWwvRm9vdGVyLmpzJztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIsIFJvdXRlLCBTd2l0Y2gsIExpbmssIE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuZnVuY3Rpb24gSm9iUG9zdChwcm9wcykge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8SGVhZGVyLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiam9iLXdyYXBwZXItb3V0ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImpvYi13cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiam9iLXdyYXBwZXItdGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+Q29tcGFueSBYWVo8L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5DaGVlc3kgVGFnbGluZSBoZXJlPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+RWRpdCBqb2IgbnVtYmVye3Byb3BzLm1hdGNoLnBhcmFtcy5pZH08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LiBEdWlzIGF1dGUgaXJ1cmUgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbSBpZCBlc3QgbGFib3J1bS48L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlcmNpdGF0aW9uIHVsbGFtY28gbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25zZXF1YXQuIER1aXMgYXV0ZSBpcnVyZSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltIGlkIGVzdCBsYWJvcnVtLjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Mb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgYWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4gRHVpcyBhdXRlIGlydXJlIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW0gaWQgZXN0IGxhYm9ydW0uPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPEZvb3Rlci8+XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgSm9iUG9zdDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBidG9hIHBvbHlmaWxsIGZvciBJRTwxMCBjb3VydGVzeSBodHRwczovL2dpdGh1Yi5jb20vZGF2aWRjaGFtYmVycy9CYXNlNjQuanNcblxudmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcblxuZnVuY3Rpb24gRSgpIHtcbiAgdGhpcy5tZXNzYWdlID0gJ1N0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3Rlcic7XG59XG5FLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcbkUucHJvdG90eXBlLmNvZGUgPSA1O1xuRS5wcm90b3R5cGUubmFtZSA9ICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InO1xuXG5mdW5jdGlvbiBidG9hKGlucHV0KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpO1xuICB2YXIgb3V0cHV0ID0gJyc7XG4gIGZvciAoXG4gICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycztcbiAgICAvLyBpZiB0aGUgbmV4dCBzdHIgaW5kZXggZG9lcyBub3QgZXhpc3Q6XG4gICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG4gICAgc3RyLmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAvLyBcIjggLSBpZHggJSAxICogOFwiIGdlbmVyYXRlcyB0aGUgc2VxdWVuY2UgMiwgNCwgNiwgOFxuICAgIG91dHB1dCArPSBtYXAuY2hhckF0KDYzICYgYmxvY2sgPj4gOCAtIGlkeCAlIDEgKiA4KVxuICApIHtcbiAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCArPSAzIC8gNCk7XG4gICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgdGhyb3cgbmV3IEUoKTtcbiAgICB9XG4gICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidG9hO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgLy8gTm90ZTogc3RhdHVzIGlzIG5vdCBleHBvc2VkIGJ5IFhEb21haW5SZXF1ZXN0XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IHV0aWxzLm1lcmdlKHtcbiAgICAgIHVybDogYXJndW1lbnRzWzBdXG4gICAgfSwgYXJndW1lbnRzWzFdKTtcbiAgfVxuXG4gIGNvbmZpZyA9IHV0aWxzLm1lcmdlKGRlZmF1bHRzLCB7bWV0aG9kOiAnZ2V0J30sIHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQoZSl7cmV0dXJuIGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcImRlZmF1bHRcImluIGU/ZS5kZWZhdWx0OmV9T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIFJlYWN0PV9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLGNsYXNzQ2FsbENoZWNrPWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0saW5oZXJpdHM9ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0scG9zc2libGVDb25zdHJ1Y3RvclJldHVybj1mdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fSxBcHBDb250YWluZXI9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBjbGFzc0NhbGxDaGVjayh0aGlzLHQpLHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcyxlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGluaGVyaXRzKHQsZSksdC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7cmV0dXJuIFJlYWN0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbil9LHR9KFJlYWN0LkNvbXBvbmVudCksaG90X3Byb2Q9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGV9fSxhcmVDb21wb25lbnRzRXF1YWw9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT09PXR9LHNldENvbmZpZz1mdW5jdGlvbigpe307ZXhwb3J0cy5BcHBDb250YWluZXI9QXBwQ29udGFpbmVyLGV4cG9ydHMuaG90PWhvdF9wcm9kLGV4cG9ydHMuYXJlQ29tcG9uZW50c0VxdWFsPWFyZUNvbXBvbmVudHNFcXVhbCxleHBvcnRzLnNldENvbmZpZz1zZXRDb25maWc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuLi8uLi9jb21wb25lbnRzL2dsb2JhbC9IZWFkZXIuanMnO1xuaW1wb3J0IEZvb3RlciBmcm9tICcuLi8uLi9jb21wb25lbnRzL2dsb2JhbC9Gb290ZXIuanMnO1xuaW1wb3J0IEpvYnNQYWdlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvam9icy9Kb2JzUGFnZS5qcyc7XG5pbXBvcnQgSm9iUG9zdCBmcm9tICcuLi8uLi9jb21wb25lbnRzL2pvYnMvSm9iUG9zdC5qcyc7XG5pbXBvcnQgSG9tZSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2dsb2JhbC9Ib21lLmpzJztcbmltcG9ydCBBYm91dCBmcm9tICcuLi8uLi9jb21wb25lbnRzL2dsb2JhbC9BYm91dC5qcyc7XG5pbXBvcnQgQ29udGFjdCBmcm9tICcuLi8uLi9jb21wb25lbnRzL2dsb2JhbC9Db250YWN0LmpzJztcbmltcG9ydCBSZWdpc3RlciBmcm9tICcuLi8uLi9jb21wb25lbnRzL2dsb2JhbC9SZWdpc3Rlci5qcyc7XG5pbXBvcnQgTG9naW4gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9nbG9iYWwvTG9naW4uanMnO1xuaW1wb3J0IE15QWNjb3VudCBmcm9tICcuLi8uLi9jb21wb25lbnRzL2Rhc2hib2FyZHMvTXlBY2NvdW50LmpzJztcbmltcG9ydCBFbXBsb3llZURhc2hib2FyZCBmcm9tICcuLi8uLi9jb21wb25lbnRzL2Rhc2hib2FyZHMvRW1wbG95ZWVEYXNoYm9hcmQuanMnO1xuaW1wb3J0IEVtcGxveWVyRGFzaGJvYXJkIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZGFzaGJvYXJkcy9FbXBsb3llckRhc2hib2FyZC5qcyc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyLCBSb3V0ZSwgU3dpdGNoLCBMaW5rLCBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cblxuZnVuY3Rpb24gQXBwUm91dGVyKHByb3BzKSB7XG4gICAgcmV0dXJuIChcbiAgICA8QnJvd3NlclJvdXRlcj5cbiAgICAgICA8U3dpdGNoPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgY29tcG9uZW50PXtIb21lfSBleGFjdD17dHJ1ZX0gLz5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL215X2FjY291bnRcIiBjb21wb25lbnQ9e015QWNjb3VudH0vPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvZW1wbG95ZWVfZGFzaGJvYXJkXCIgY29tcG9uZW50PXtFbXBsb3llZURhc2hib2FyZH0vPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvZW1wbG95ZXJfZGFzaGJvYXJkXCIgY29tcG9uZW50PXtFbXBsb3llckRhc2hib2FyZH0vPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvcmVnaXN0ZXJcIiBjb21wb25lbnQ9e1JlZ2lzdGVyfS8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9sb2dpblwiIGNvbXBvbmVudD17TG9naW59Lz5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2Fib3V0XCIgY29tcG9uZW50PXtBYm91dH0vPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvY29udGFjdFwiIGNvbXBvbmVudD17Q29udGFjdH0vPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvam9iX3Bvc3QvOmlkXCIgY29tcG9uZW50PXtKb2JQb3N0fS8+XG4gICAgICAgICAgICA8Um91dGUgY29tcG9uZW50PXtOb3RGb3VuZFBhZ2V9Lz5cbiAgICAgICA8L1N3aXRjaD5cbiAgICA8L0Jyb3dzZXJSb3V0ZXI+XG4gICAgKVxufVxuXG5mdW5jdGlvbiBOb3RGb3VuZFBhZ2UocHJvcHMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGgxPjQwNCBwYWdlPC9oMT5cbiAgICAgICAgICAgIDxMaW5rIHRvPVwiL1wiPkdvdCB0byBob21lcGFnZTwvTGluaz5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwUm91dGVyOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICB2YXIgZG9jID0gb2JqZWN0ID8gb2JqZWN0Lm93bmVyRG9jdW1lbnQgfHwgb2JqZWN0IDogZG9jdW1lbnQ7XG4gIHZhciBkZWZhdWx0VmlldyA9IGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gIHJldHVybiAhIShvYmplY3QgJiYgKHR5cGVvZiBkZWZhdWx0Vmlldy5Ob2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgZGVmYXVsdFZpZXcuTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL2lzTm9kZScpO1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIHRleHQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Tm9kZShvYmplY3QpIHtcbiAgcmV0dXJuIGlzTm9kZShvYmplY3QpICYmIG9iamVjdC5ub2RlVHlwZSA9PSAzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogXG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgIC8vIEFkZGVkIHRoZSBub256ZXJvIHkgY2hlY2sgdG8gbWFrZSBGbG93IGhhcHB5LCBidXQgaXQgaXMgcmVkdW5kYW50XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOiBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50OyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMy4yXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYmE9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxlYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksQT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxDPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGZhPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpLGhhPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksamE9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxrYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHA6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsZD0wO2Q8YjtkKyspYys9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtiYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWVhP3ZvaWQgMDpEKFwiMjI3XCIpO1xuZnVuY3Rpb24gbWEoYSxiLGMsZCxlLGYsaCxnLGspe3RoaXMuX2hhc0NhdWdodEVycm9yPSExO3RoaXMuX2NhdWdodEVycm9yPW51bGw7dmFyIHY9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsdil9Y2F0Y2gobCl7dGhpcy5fY2F1Z2h0RXJyb3I9bCx0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMH19XG52YXIgRT17X2NhdWdodEVycm9yOm51bGwsX2hhc0NhdWdodEVycm9yOiExLF9yZXRocm93RXJyb3I6bnVsbCxfaGFzUmV0aHJvd0Vycm9yOiExLGludm9rZUd1YXJkZWRDYWxsYmFjazpmdW5jdGlvbihhLGIsYyxkLGUsZixoLGcsayl7bWEuYXBwbHkoRSxhcmd1bWVudHMpfSxpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3I6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsaCxnLGspe0UuaW52b2tlR3VhcmRlZENhbGxiYWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihFLmhhc0NhdWdodEVycm9yKCkpe3ZhciB2PUUuY2xlYXJDYXVnaHRFcnJvcigpO0UuX2hhc1JldGhyb3dFcnJvcnx8KEUuX2hhc1JldGhyb3dFcnJvcj0hMCxFLl9yZXRocm93RXJyb3I9dil9fSxyZXRocm93Q2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gbmEuYXBwbHkoRSxhcmd1bWVudHMpfSxoYXNDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBFLl9oYXNDYXVnaHRFcnJvcn0sY2xlYXJDYXVnaHRFcnJvcjpmdW5jdGlvbigpe2lmKEUuX2hhc0NhdWdodEVycm9yKXt2YXIgYT1cbkUuX2NhdWdodEVycm9yO0UuX2NhdWdodEVycm9yPW51bGw7RS5faGFzQ2F1Z2h0RXJyb3I9ITE7cmV0dXJuIGF9RChcIjE5OFwiKX19O2Z1bmN0aW9uIG5hKCl7aWYoRS5faGFzUmV0aHJvd0Vycm9yKXt2YXIgYT1FLl9yZXRocm93RXJyb3I7RS5fcmV0aHJvd0Vycm9yPW51bGw7RS5faGFzUmV0aHJvd0Vycm9yPSExO3Rocm93IGE7fX12YXIgb2E9bnVsbCxwYT17fTtcbmZ1bmN0aW9uIHFhKCl7aWYob2EpZm9yKHZhciBhIGluIHBhKXt2YXIgYj1wYVthXSxjPW9hLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6RChcIjk2XCIsYSk7aWYoIXJhW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOkQoXCI5N1wiLGEpO3JhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGg9YixnPWQ7c2EuaGFzT3duUHJvcGVydHkoZyk/RChcIjk5XCIsZyk6dm9pZCAwO3NhW2ddPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnRhKGtbZV0saCxnKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyh0YShmLnJlZ2lzdHJhdGlvbk5hbWUsaCxnKSxlPSEwKTplPSExO2U/dm9pZCAwOkQoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiB0YShhLGIsYyl7dWFbYV0/RChcIjEwMFwiLGEpOnZvaWQgMDt1YVthXT1iO3ZhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHJhPVtdLHNhPXt9LHVhPXt9LHZhPXt9O2Z1bmN0aW9uIHdhKGEpe29hP0QoXCIxMDFcIik6dm9pZCAwO29hPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO3FhKCl9ZnVuY3Rpb24geGEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107cGEuaGFzT3duUHJvcGVydHkoYykmJnBhW2NdPT09ZHx8KHBhW2NdP0QoXCIxMDJcIixjKTp2b2lkIDAscGFbY109ZCxiPSEwKX1iJiZxYSgpfVxudmFyIENhPU9iamVjdC5mcmVlemUoe3BsdWdpbnM6cmEsZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOnNhLHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOnVhLHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6dmEscG9zc2libGVSZWdpc3RyYXRpb25OYW1lczpudWxsLGluamVjdEV2ZW50UGx1Z2luT3JkZXI6d2EsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnhhfSksRGE9bnVsbCxFYT1udWxsLEZhPW51bGw7ZnVuY3Rpb24gR2EoYSxiLGMsZCl7Yj1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1GYShkKTtFLmludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcihiLGMsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gSGEoYSxiKXtudWxsPT1iP0QoXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIElhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBKYT1udWxsO1xuZnVuY3Rpb24gS2EoYSxiKXtpZihhKXt2YXIgYz1hLl9kaXNwYXRjaExpc3RlbmVycyxkPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYykpZm9yKHZhciBlPTA7ZTxjLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtlKyspR2EoYSxiLGNbZV0sZFtlXSk7ZWxzZSBjJiZHYShhLGIsYyxkKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBMYShhKXtyZXR1cm4gS2EoYSwhMCl9ZnVuY3Rpb24gTWEoYSl7cmV0dXJuIEthKGEsITEpfXZhciBOYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp3YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6eGF9O1xuZnVuY3Rpb24gT2EoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1EYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9EKFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gUGEoYSxiKXtudWxsIT09YSYmKEphPUhhKEphLGEpKTthPUphO0phPW51bGw7YSYmKGI/SWEoYSxMYSk6SWEoYSxNYSksSmE/RChcIjk1XCIpOnZvaWQgMCxFLnJldGhyb3dDYXVnaHRFcnJvcigpKX1mdW5jdGlvbiBRYShhLGIsYyxkKXtmb3IodmFyIGU9bnVsbCxmPTA7ZjxyYS5sZW5ndGg7ZisrKXt2YXIgaD1yYVtmXTtoJiYoaD1oLmV4dHJhY3RFdmVudHMoYSxiLGMsZCkpJiYoZT1IYShlLGgpKX1QYShlLCExKX12YXIgUmE9T2JqZWN0LmZyZWV6ZSh7aW5qZWN0aW9uOk5hLGdldExpc3RlbmVyOk9hLHJ1bkV2ZW50c0luQmF0Y2g6UGEscnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaDpRYX0pLFNhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEY9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitTYSxUYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK1NhO1xuZnVuY3Rpb24gVWEoYSl7aWYoYVtGXSlyZXR1cm4gYVtGXTtmb3IoOyFhW0ZdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbRl07cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBWYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7RChcIjMzXCIpfWZ1bmN0aW9uIFhhKGEpe3JldHVybiBhW1RhXXx8bnVsbH12YXIgYmI9T2JqZWN0LmZyZWV6ZSh7cHJlY2FjaGVGaWJlck5vZGU6ZnVuY3Rpb24oYSxiKXtiW0ZdPWF9LGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOlVhLGdldEluc3RhbmNlRnJvbU5vZGU6ZnVuY3Rpb24oYSl7YT1hW0ZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9LGdldE5vZGVGcm9tSW5zdGFuY2U6VmEsZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTpYYSx1cGRhdGVGaWJlclByb3BzOmZ1bmN0aW9uKGEsYil7YVtUYV09Yn19KTtcbmZ1bmN0aW9uIEwoYSl7ZG8gYT1hW1wicmV0dXJuXCJdO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIGNiKGEsYixjKXtmb3IodmFyIGQ9W107YTspZC5wdXNoKGEpLGE9TChhKTtmb3IoYT1kLmxlbmd0aDswPGEtLTspYihkW2FdLFwiY2FwdHVyZWRcIixjKTtmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWIoZFthXSxcImJ1YmJsZWRcIixjKX1mdW5jdGlvbiBkYihhLGIsYyl7aWYoYj1PYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPUhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIGViKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMmJmNiKGEuX3RhcmdldEluc3QsZGIsYSl9XG5mdW5jdGlvbiBmYihhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXt2YXIgYj1hLl90YXJnZXRJbnN0O2I9Yj9MKGIpOm51bGw7Y2IoYixkYixhKX19ZnVuY3Rpb24gZ2IoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9T2EoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPUhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBoYihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJmdiKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBpYihhKXtJYShhLGViKX1cbmZ1bmN0aW9uIGpiKGEsYixjLGQpe2lmKGMmJmQpYTp7dmFyIGU9Yztmb3IodmFyIGY9ZCxoPTAsZz1lO2c7Zz1MKGcpKWgrKztnPTA7Zm9yKHZhciBrPWY7aztrPUwoaykpZysrO2Zvcig7MDxoLWc7KWU9TChlKSxoLS07Zm9yKDswPGctaDspZj1MKGYpLGctLTtmb3IoO2gtLTspe2lmKGU9PT1mfHxlPT09Zi5hbHRlcm5hdGUpYnJlYWsgYTtlPUwoZSk7Zj1MKGYpfWU9bnVsbH1lbHNlIGU9bnVsbDtmPWU7Zm9yKGU9W107YyYmYyE9PWY7KXtoPWMuYWx0ZXJuYXRlO2lmKG51bGwhPT1oJiZoPT09ZilicmVhaztlLnB1c2goYyk7Yz1MKGMpfWZvcihjPVtdO2QmJmQhPT1mOyl7aD1kLmFsdGVybmF0ZTtpZihudWxsIT09aCYmaD09PWYpYnJlYWs7Yy5wdXNoKGQpO2Q9TChkKX1mb3IoZD0wO2Q8ZS5sZW5ndGg7ZCsrKWdiKGVbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGE9Yy5sZW5ndGg7MDxhLS07KWdiKGNbYV0sXCJjYXB0dXJlZFwiLGIpfVxudmFyIGtiPU9iamVjdC5mcmVlemUoe2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6aWIsYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6ZnVuY3Rpb24oYSl7SWEoYSxmYil9LGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczpqYixhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczpmdW5jdGlvbihhKXtJYShhLGhiKX19KSxsYj1udWxsO2Z1bmN0aW9uIG1iKCl7IWxiJiZtLmNhblVzZURPTSYmKGxiPVwidGV4dENvbnRlbnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudD9cInRleHRDb250ZW50XCI6XCJpbm5lclRleHRcIik7cmV0dXJuIGxifXZhciBNPXtfcm9vdDpudWxsLF9zdGFydFRleHQ6bnVsbCxfZmFsbGJhY2tUZXh0Om51bGx9O1xuZnVuY3Rpb24gbmIoKXtpZihNLl9mYWxsYmFja1RleHQpcmV0dXJuIE0uX2ZhbGxiYWNrVGV4dDt2YXIgYSxiPU0uX3N0YXJ0VGV4dCxjPWIubGVuZ3RoLGQsZT1vYigpLGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGg9Yy1hO2ZvcihkPTE7ZDw9aCYmYltjLWRdPT09ZVtmLWRdO2QrKyk7TS5fZmFsbGJhY2tUZXh0PWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCk7cmV0dXJuIE0uX2ZhbGxiYWNrVGV4dH1mdW5jdGlvbiBvYigpe3JldHVyblwidmFsdWVcImluIE0uX3Jvb3Q/TS5fcm9vdC52YWx1ZTpNLl9yb290W21iKCldfVxudmFyIHBiPVwiZGlzcGF0Y2hDb25maWcgX3RhcmdldEluc3QgbmF0aXZlRXZlbnQgaXNEZWZhdWx0UHJldmVudGVkIGlzUHJvcGFnYXRpb25TdG9wcGVkIF9kaXNwYXRjaExpc3RlbmVycyBfZGlzcGF0Y2hJbnN0YW5jZXNcIi5zcGxpdChcIiBcIikscWI9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OkMudGhhdFJldHVybnNOdWxsLGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5mdW5jdGlvbiBOKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9DLnRoYXRSZXR1cm5zVHJ1ZTpDLnRoYXRSZXR1cm5zRmFsc2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zRmFsc2U7cmV0dXJuIHRoaXN9XG5BKE4ucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Qy50aGF0UmV0dXJuc1RydWUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Qy50aGF0UmV0dXJuc1RydWUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9Qy50aGF0UmV0dXJuc1RydWV9LGlzUGVyc2lzdGVudDpDLnRoYXRSZXR1cm5zRmFsc2UsXG5kZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDtmb3IoYT0wO2E8cGIubGVuZ3RoO2ErKyl0aGlzW3BiW2FdXT1udWxsfX0pO04uSW50ZXJmYWNlPXFiO04uZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO0EoZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPUEoe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7cmIoYyk7cmV0dXJuIGN9O3JiKE4pO1xuZnVuY3Rpb24gc2IoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gdGIoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOkQoXCIyMjNcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIHJiKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPXNiO2EucmVsZWFzZT10Yn12YXIgdWI9Ti5leHRlbmQoe2RhdGE6bnVsbH0pLHZiPU4uZXh0ZW5kKHtkYXRhOm51bGx9KSx3Yj1bOSwxMywyNywzMl0seGI9bS5jYW5Vc2VET00mJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHliPW51bGw7bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHliPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgemI9bS5jYW5Vc2VET00mJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiF5YixBYj1tLmNhblVzZURPTSYmKCF4Ynx8eWImJjg8eWImJjExPj15YiksQmI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksS2I9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJ0b3BDb21wb3NpdGlvbkVuZFwiLFwidG9wS2V5UHJlc3NcIixcInRvcFRleHRJbnB1dFwiLFwidG9wUGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25FbmQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvblN0YXJ0IHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uVXBkYXRlIHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfX0sTGI9ITE7XG5mdW5jdGlvbiBNYihhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4tMSE9PXdiLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwidG9wS2V5RG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcInRvcEtleVByZXNzXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BCbHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gTmIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgT2I9ITE7ZnVuY3Rpb24gUGIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIE5iKGIpO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtMYj0hMDtyZXR1cm4gQmI7Y2FzZSBcInRvcFRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09QmImJkxiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIFFiKGEsYil7aWYoT2IpcmV0dXJuXCJ0b3BDb21wb3NpdGlvbkVuZFwiPT09YXx8IXhiJiZNYihhLGIpPyhhPW5iKCksTS5fcm9vdD1udWxsLE0uX3N0YXJ0VGV4dD1udWxsLE0uX2ZhbGxiYWNrVGV4dD1udWxsLE9iPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BQYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOnJldHVybiBBYj9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBSYj17ZXZlbnRUeXBlczpLYixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYoeGIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BDb21wb3NpdGlvblN0YXJ0XCI6ZT1LYi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6ZT1LYi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvblVwZGF0ZVwiOmU9S2IuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIE9iP01iKGEsYykmJihlPUtiLmNvbXBvc2l0aW9uRW5kKTpcInRvcEtleURvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9S2IuY29tcG9zaXRpb25TdGFydCk7ZT8oQWImJihPYnx8ZSE9PUtiLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PUtiLmNvbXBvc2l0aW9uRW5kJiZPYiYmKGY9bmIoKSk6KE0uX3Jvb3Q9ZCxNLl9zdGFydFRleHQ9b2IoKSxPYj0hMCkpLGU9dWIuZ2V0UG9vbGVkKGUsXG5iLGMsZCksZj9lLmRhdGE9ZjooZj1OYihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksaWIoZSksZj1lKTpmPW51bGw7KGE9emI/UGIoYSxjKTpRYihhLGMpKT8oYj12Yi5nZXRQb29sZWQoS2IuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLGliKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LFNiPW51bGwsVGI9e2luamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQ6ZnVuY3Rpb24oYSl7U2I9YX19LFViPW51bGwsVmI9bnVsbDtmdW5jdGlvbiBXYihhKXtpZihhPUVhKGEpKXtTYiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFNiLnJlc3RvcmVDb250cm9sbGVkU3RhdGU/dm9pZCAwOkQoXCIxOTRcIik7dmFyIGI9RGEoYS5zdGF0ZU5vZGUpO1NiLnJlc3RvcmVDb250cm9sbGVkU3RhdGUoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBYYihhKXtVYj9WYj9WYi5wdXNoKGEpOlZiPVthXTpVYj1hfVxuZnVuY3Rpb24gWWIoKXtyZXR1cm4gbnVsbCE9PVVifHxudWxsIT09VmJ9ZnVuY3Rpb24gWmIoKXtpZihVYil7dmFyIGE9VWIsYj1WYjtWYj1VYj1udWxsO1diKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylXYihiW2FdKX19dmFyICRiPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpUYixlbnF1ZXVlU3RhdGVSZXN0b3JlOlhiLG5lZWRzU3RhdGVSZXN0b3JlOlliLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOlpifSk7ZnVuY3Rpb24gYWMoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBiYyhhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBjYygpe312YXIgZGM9ITE7ZnVuY3Rpb24gZWMoYSxiKXtpZihkYylyZXR1cm4gYShiKTtkYz0hMDt0cnl7cmV0dXJuIGFjKGEsYil9ZmluYWxseXtkYz0hMSxZYigpJiYoY2MoKSxaYigpKX19XG52YXIgZmM9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gZ2MoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFmY1thLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gaGMoYSl7YT1hLnRhcmdldHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1cbmZ1bmN0aW9uIGljKGEsYil7aWYoIW0uY2FuVXNlRE9NfHxiJiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO2E9XCJvblwiK2E7Yj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gamMoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIGtjKGEpe3ZhciBiPWpjKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGMuZ2V0LmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtjLnNldC5jYWxsKHRoaXMsYSl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KSx7Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1udWxsO2RlbGV0ZSBhW2JdfX19XG5mdW5jdGlvbiBsYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9a2MoYSkpfWZ1bmN0aW9uIG1jKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1qYyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIG5jPWVhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLE89XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLG9jPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxwYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQscWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5yZXR1cm5cIik6NjAxMDUscmM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsc2M9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHVjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdmM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHdjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxcbnhjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseWM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIHpjKGEpe2lmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT15YyYmYVt5Y118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIEFjKGEpe2E9YS50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWU7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHNjOnJldHVyblwiUmVhY3RGcmFnbWVudFwiO2Nhc2UgcmM6cmV0dXJuXCJSZWFjdFBvcnRhbFwiO2Nhc2UgcGM6cmV0dXJuXCJSZWFjdENhbGxcIjtjYXNlIHFjOnJldHVyblwiUmVhY3RSZXR1cm5cIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHhjOnJldHVybiBhPWEucmVuZGVyLmRpc3BsYXlOYW1lfHxhLnJlbmRlci5uYW1lfHxcIlwiLFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwifXJldHVybiBudWxsfVxuZnVuY3Rpb24gQmMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6Y2FzZSA1OnZhciBjPWEuX2RlYnVnT3duZXIsZD1hLl9kZWJ1Z1NvdXJjZTt2YXIgZT1BYyhhKTt2YXIgZj1udWxsO2MmJihmPUFjKGMpKTtjPWQ7ZT1cIlxcbiAgICBpbiBcIisoZXx8XCJVbmtub3duXCIpKyhjP1wiIChhdCBcIitjLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIrYy5saW5lTnVtYmVyK1wiKVwiOmY/XCIgKGNyZWF0ZWQgYnkgXCIrZitcIilcIjpcIlwiKTticmVhayBhO2RlZmF1bHQ6ZT1cIlwifWIrPWU7YT1hW1wicmV0dXJuXCJdfXdoaWxlKGEpO3JldHVybiBifVxudmFyIENjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxEYz17fSxFYz17fTtmdW5jdGlvbiBGYyhhKXtpZihFYy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMDtpZihEYy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMTtpZihDYy50ZXN0KGEpKXJldHVybiBFY1thXT0hMDtEY1thXT0hMDtyZXR1cm4hMX1cbmZ1bmN0aW9uIEdjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIEhjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fEdjKGEsYixjLGQpKXJldHVybiEwO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfVxuZnVuY3Rpb24gVShhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIFY9e307XCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMCwhMSxhLG51bGwpfSk7XG5bW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07VltiXT1uZXcgVShiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDIsITEsYSxudWxsKX0pO1xuXCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDMsITAsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsNCwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsNiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciBTYz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFRjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFxuVGMpO1ZbYl09bmV3IFUoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFRjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFRjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7Vi50YWJJbmRleD1uZXcgVShcInRhYkluZGV4XCIsMSwhMSxcInRhYmluZGV4XCIsbnVsbCk7XG5mdW5jdGlvbiBVYyhhLGIsYyxkKXt2YXIgZT1WLmhhc093blByb3BlcnR5KGIpP1ZbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChIYyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/RmMoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIFZjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBXYyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1YYyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIFljKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmVWMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIFpjKGEsYil7WWMoYSxiKTt2YXIgYz1YYyhiLnZhbHVlKTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1iLnR5cGUpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpPyRjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJiRjKGEsYi50eXBlLFhjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gYWQoYSxiKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpXCJcIj09PWEudmFsdWUmJihhLnZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSksYS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2I9YS5uYW1lO1wiXCIhPT1iJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDtcIlwiIT09YiYmKGEubmFtZT1iKX1mdW5jdGlvbiAkYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9XG5mdW5jdGlvbiBYYyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19dmFyIGJkPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENoYW5nZSB0b3BDbGljayB0b3BGb2N1cyB0b3BJbnB1dCB0b3BLZXlEb3duIHRvcEtleVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIGNkKGEsYixjKXthPU4uZ2V0UG9vbGVkKGJkLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7WGIoYyk7aWIoYSk7cmV0dXJuIGF9dmFyIGRkPW51bGwsZWQ9bnVsbDtmdW5jdGlvbiBmZChhKXtQYShhLCExKX1cbmZ1bmN0aW9uIGdkKGEpe3ZhciBiPVZhKGEpO2lmKG1jKGIpKXJldHVybiBhfWZ1bmN0aW9uIGhkKGEsYil7aWYoXCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIGlkPSExO20uY2FuVXNlRE9NJiYoaWQ9aWMoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gamQoKXtkZCYmKGRkLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLGtkKSxlZD1kZD1udWxsKX1mdW5jdGlvbiBrZChhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmZ2QoZWQpJiYoYT1jZChlZCxhLGhjKGEpKSxlYyhmZCxhKSl9ZnVuY3Rpb24gbGQoYSxiLGMpe1widG9wRm9jdXNcIj09PWE/KGpkKCksZGQ9YixlZD1jLGRkLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLGtkKSk6XCJ0b3BCbHVyXCI9PT1hJiZqZCgpfVxuZnVuY3Rpb24gbWQoYSl7aWYoXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIj09PWF8fFwidG9wS2V5VXBcIj09PWF8fFwidG9wS2V5RG93blwiPT09YSlyZXR1cm4gZ2QoZWQpfWZ1bmN0aW9uIG5kKGEsYil7aWYoXCJ0b3BDbGlja1wiPT09YSlyZXR1cm4gZ2QoYil9ZnVuY3Rpb24gb2QoYSxiKXtpZihcInRvcElucHV0XCI9PT1hfHxcInRvcENoYW5nZVwiPT09YSlyZXR1cm4gZ2QoYil9XG52YXIgcGQ9e2V2ZW50VHlwZXM6YmQsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDppZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/VmEoYik6d2luZG93LGY9dm9pZCAwLGg9dm9pZCAwLGc9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1nfHxcImlucHV0XCI9PT1nJiZcImZpbGVcIj09PWUudHlwZT9mPWhkOmdjKGUpP2lkP2Y9b2Q6KGY9bWQsaD1sZCk6KGc9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWcudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9bmQpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIGNkKGYsYyxkKTtoJiZoKGEsZSxiKTtcInRvcEJsdXJcIj09PWEmJm51bGwhPWImJihhPWIuX3dyYXBwZXJTdGF0ZXx8ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiYkYyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxxZD1OLmV4dGVuZCh7dmlldzpudWxsLFxuZGV0YWlsOm51bGx9KSxyZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gc2QoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1yZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHRkKCl7cmV0dXJuIHNkfVxudmFyIHVkPXFkLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp0ZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX19KSx2ZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJ0b3BNb3VzZU91dFwiLFwidG9wTW91c2VPdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19fSx3ZD17ZXZlbnRUeXBlczp2ZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsXG5iLGMsZCl7aWYoXCJ0b3BNb3VzZU92ZXJcIj09PWEmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHxcInRvcE1vdXNlT3V0XCIhPT1hJiZcInRvcE1vdXNlT3ZlclwiIT09YSlyZXR1cm4gbnVsbDt2YXIgZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztcInRvcE1vdXNlT3V0XCI9PT1hPyhhPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9VYShiKTpudWxsKTphPW51bGw7aWYoYT09PWIpcmV0dXJuIG51bGw7dmFyIGY9bnVsbD09YT9lOlZhKGEpO2U9bnVsbD09Yj9lOlZhKGIpO3ZhciBoPXVkLmdldFBvb2xlZCh2ZC5tb3VzZUxlYXZlLGEsYyxkKTtoLnR5cGU9XCJtb3VzZWxlYXZlXCI7aC50YXJnZXQ9ZjtoLnJlbGF0ZWRUYXJnZXQ9ZTtjPXVkLmdldFBvb2xlZCh2ZC5tb3VzZUVudGVyLGIsYyxkKTtjLnR5cGU9XCJtb3VzZWVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9XG5mO2piKGgsYyxhLGIpO3JldHVybltoLGNdfX07ZnVuY3Rpb24geGQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2JbXCJyZXR1cm5cIl07KWI9YltcInJldHVyblwiXTtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiW1wicmV0dXJuXCJdOylpZihiPWJbXCJyZXR1cm5cIl0sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiB5ZChhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT14ZChhKTohMX1mdW5jdGlvbiB6ZChhKXsyIT09eGQoYSk/RChcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBBZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj14ZChhKSwzPT09Yj9EKFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWNbXCJyZXR1cm5cIl0sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpcmV0dXJuIHpkKGUpLGE7aWYoaD09PWQpcmV0dXJuIHpkKGUpLGI7aD1oLnNpYmxpbmd9RChcIjE4OFwiKX1pZihjW1wicmV0dXJuXCJdIT09ZFtcInJldHVyblwiXSljPWUsZD1mO2Vsc2V7aD0hMTtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpe2g9ITA7Yz1lO2Q9ZjticmVha31pZihnPT09ZCl7aD0hMDtkPWU7Yz1mO2JyZWFrfWc9Zy5zaWJsaW5nfWlmKCFoKXtmb3IoZz1mLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWY7ZD1lO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZjtjPWU7YnJlYWt9Zz1nLnNpYmxpbmd9aD9cbnZvaWQgMDpEKFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/RChcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP0QoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gQmQoYSl7YT1BZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIENkKGEpe2E9QWQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCYmNCE9PWIudGFnKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH12YXIgRGQ9Ti5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLEVkPU4uZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksRmQ9cWQuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtcbmZ1bmN0aW9uIEdkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIEhkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxJZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sSmQ9cWQuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPUhkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPUdkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9JZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6dGQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/R2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/R2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxLZD11ZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksTGQ9cWQuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6dGR9KSxNZD1OLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxOZD11ZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLE9kPXt9LFBkPXt9O2Z1bmN0aW9uIFFkKGEsYil7dmFyIGM9YVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSksZD1cIm9uXCIrYztjPVwidG9wXCIrYztiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTtPZFthXT1iO1BkW2NdPWJ9XG5cImJsdXIgY2FuY2VsIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRvdWJsZUNsaWNrIGRyYWdFbmQgZHJhZ1N0YXJ0IGRyb3AgZm9jdXMgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIG1vdXNlRG93biBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcmF0ZUNoYW5nZSByZXNldCBzZWVrZWQgc3VibWl0IHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7UWQoYSwhMCl9KTtcblwiYWJvcnQgYW5pbWF0aW9uRW5kIGFuaW1hdGlvbkl0ZXJhdGlvbiBhbmltYXRpb25TdGFydCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGRyYWcgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgcGxheWluZyBwcm9ncmVzcyBzY3JvbGwgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZVVwZGF0ZSB0b2dnbGUgdG91Y2hNb3ZlIHRyYW5zaXRpb25FbmQgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1FkKGEsITEpfSk7XG52YXIgUmQ9e2V2ZW50VHlwZXM6T2QsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9UGRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVBkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwidG9wS2V5UHJlc3NcIjppZigwPT09R2QoYykpcmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjphPUpkO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6Y2FzZSBcInRvcEZvY3VzXCI6YT1GZDticmVhaztjYXNlIFwidG9wQ2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcInRvcERvdWJsZUNsaWNrXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BNb3VzZU1vdmVcIjpjYXNlIFwidG9wTW91c2VVcFwiOmNhc2UgXCJ0b3BNb3VzZU91dFwiOmNhc2UgXCJ0b3BNb3VzZU92ZXJcIjpjYXNlIFwidG9wQ29udGV4dE1lbnVcIjphPVxudWQ7YnJlYWs7Y2FzZSBcInRvcERyYWdcIjpjYXNlIFwidG9wRHJhZ0VuZFwiOmNhc2UgXCJ0b3BEcmFnRW50ZXJcIjpjYXNlIFwidG9wRHJhZ0V4aXRcIjpjYXNlIFwidG9wRHJhZ0xlYXZlXCI6Y2FzZSBcInRvcERyYWdPdmVyXCI6Y2FzZSBcInRvcERyYWdTdGFydFwiOmNhc2UgXCJ0b3BEcm9wXCI6YT1LZDticmVhaztjYXNlIFwidG9wVG91Y2hDYW5jZWxcIjpjYXNlIFwidG9wVG91Y2hFbmRcIjpjYXNlIFwidG9wVG91Y2hNb3ZlXCI6Y2FzZSBcInRvcFRvdWNoU3RhcnRcIjphPUxkO2JyZWFrO2Nhc2UgXCJ0b3BBbmltYXRpb25FbmRcIjpjYXNlIFwidG9wQW5pbWF0aW9uSXRlcmF0aW9uXCI6Y2FzZSBcInRvcEFuaW1hdGlvblN0YXJ0XCI6YT1EZDticmVhaztjYXNlIFwidG9wVHJhbnNpdGlvbkVuZFwiOmE9TWQ7YnJlYWs7Y2FzZSBcInRvcFNjcm9sbFwiOmE9cWQ7YnJlYWs7Y2FzZSBcInRvcFdoZWVsXCI6YT1OZDticmVhaztjYXNlIFwidG9wQ29weVwiOmNhc2UgXCJ0b3BDdXRcIjpjYXNlIFwidG9wUGFzdGVcIjphPUVkO2JyZWFrO2RlZmF1bHQ6YT1cbk59Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtpYihiKTtyZXR1cm4gYn19LFNkPVJkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxUZD1bXTtmdW5jdGlvbiBVZChhKXt2YXIgYj1hLnRhcmdldEluc3Q7ZG97aWYoIWIpe2EuYW5jZXN0b3JzLnB1c2goYik7YnJlYWt9dmFyIGM7Zm9yKGM9YjtjW1wicmV0dXJuXCJdOyljPWNbXCJyZXR1cm5cIl07Yz0zIT09Yy50YWc/bnVsbDpjLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFjKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYik7Yj1VYShjKX13aGlsZShiKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyliPWEuYW5jZXN0b3JzW2NdLFFhKGEudG9wTGV2ZWxUeXBlLGIsYS5uYXRpdmVFdmVudCxoYyhhLm5hdGl2ZUV2ZW50KSl9dmFyIFZkPSEwO2Z1bmN0aW9uIFdkKGEpe1ZkPSEhYX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKCFjKXJldHVybiBudWxsO2E9KFNkKGEpP1hkOllkKS5iaW5kKG51bGwsYSk7Yy5hZGRFdmVudExpc3RlbmVyKGIsYSwhMSl9ZnVuY3Rpb24gWmQoYSxiLGMpe2lmKCFjKXJldHVybiBudWxsO2E9KFNkKGEpP1hkOllkKS5iaW5kKG51bGwsYSk7Yy5hZGRFdmVudExpc3RlbmVyKGIsYSwhMCl9ZnVuY3Rpb24gWGQoYSxiKXtiYyhZZCxhLGIpfVxuZnVuY3Rpb24gWWQoYSxiKXtpZihWZCl7dmFyIGM9aGMoYik7Yz1VYShjKTtudWxsIT09YyYmXCJudW1iZXJcIj09PXR5cGVvZiBjLnRhZyYmMiE9PXhkKGMpJiYoYz1udWxsKTtpZihUZC5sZW5ndGgpe3ZhciBkPVRkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e2VjKFVkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+VGQubGVuZ3RoJiZUZC5wdXNoKGEpfX19XG52YXIgJGQ9T2JqZWN0LmZyZWV6ZSh7Z2V0IF9lbmFibGVkKCl7cmV0dXJuIFZkfSxzZXRFbmFibGVkOldkLGlzRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBWZH0sdHJhcEJ1YmJsZWRFdmVudDpXLHRyYXBDYXB0dXJlZEV2ZW50OlpkLGRpc3BhdGNoRXZlbnQ6WWR9KTtmdW5jdGlvbiBhZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO2NbXCJtc1wiK2FdPVwiTVNcIitiO2NbXCJPXCIrYV09XCJvXCIrYi50b0xvd2VyQ2FzZSgpO3JldHVybiBjfVxudmFyIGJlPXthbmltYXRpb25lbmQ6YWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246YWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDphZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDphZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LGNlPXt9LGRlPXt9O20uY2FuVXNlRE9NJiYoZGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgYmUuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgYmUuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgYmUuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgYmUudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtcbmZ1bmN0aW9uIGVlKGEpe2lmKGNlW2FdKXJldHVybiBjZVthXTtpZighYmVbYV0pcmV0dXJuIGE7dmFyIGI9YmVbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gZGUpcmV0dXJuIGNlW2FdPWJbY107cmV0dXJuIGF9XG52YXIgZmU9e3RvcEFuaW1hdGlvbkVuZDplZShcImFuaW1hdGlvbmVuZFwiKSx0b3BBbmltYXRpb25JdGVyYXRpb246ZWUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksdG9wQW5pbWF0aW9uU3RhcnQ6ZWUoXCJhbmltYXRpb25zdGFydFwiKSx0b3BCbHVyOlwiYmx1clwiLHRvcENhbmNlbDpcImNhbmNlbFwiLHRvcENoYW5nZTpcImNoYW5nZVwiLHRvcENsaWNrOlwiY2xpY2tcIix0b3BDbG9zZTpcImNsb3NlXCIsdG9wQ29tcG9zaXRpb25FbmQ6XCJjb21wb3NpdGlvbmVuZFwiLHRvcENvbXBvc2l0aW9uU3RhcnQ6XCJjb21wb3NpdGlvbnN0YXJ0XCIsdG9wQ29tcG9zaXRpb25VcGRhdGU6XCJjb21wb3NpdGlvbnVwZGF0ZVwiLHRvcENvbnRleHRNZW51OlwiY29udGV4dG1lbnVcIix0b3BDb3B5OlwiY29weVwiLHRvcEN1dDpcImN1dFwiLHRvcERvdWJsZUNsaWNrOlwiZGJsY2xpY2tcIix0b3BEcmFnOlwiZHJhZ1wiLHRvcERyYWdFbmQ6XCJkcmFnZW5kXCIsdG9wRHJhZ0VudGVyOlwiZHJhZ2VudGVyXCIsdG9wRHJhZ0V4aXQ6XCJkcmFnZXhpdFwiLHRvcERyYWdMZWF2ZTpcImRyYWdsZWF2ZVwiLFxudG9wRHJhZ092ZXI6XCJkcmFnb3ZlclwiLHRvcERyYWdTdGFydDpcImRyYWdzdGFydFwiLHRvcERyb3A6XCJkcm9wXCIsdG9wRm9jdXM6XCJmb2N1c1wiLHRvcElucHV0OlwiaW5wdXRcIix0b3BLZXlEb3duOlwia2V5ZG93blwiLHRvcEtleVByZXNzOlwia2V5cHJlc3NcIix0b3BLZXlVcDpcImtleXVwXCIsdG9wTG9hZDpcImxvYWRcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BNb3VzZURvd246XCJtb3VzZWRvd25cIix0b3BNb3VzZU1vdmU6XCJtb3VzZW1vdmVcIix0b3BNb3VzZU91dDpcIm1vdXNlb3V0XCIsdG9wTW91c2VPdmVyOlwibW91c2VvdmVyXCIsdG9wTW91c2VVcDpcIm1vdXNldXBcIix0b3BQYXN0ZTpcInBhc3RlXCIsdG9wU2Nyb2xsOlwic2Nyb2xsXCIsdG9wU2VsZWN0aW9uQ2hhbmdlOlwic2VsZWN0aW9uY2hhbmdlXCIsdG9wVGV4dElucHV0OlwidGV4dElucHV0XCIsdG9wVG9nZ2xlOlwidG9nZ2xlXCIsdG9wVG91Y2hDYW5jZWw6XCJ0b3VjaGNhbmNlbFwiLHRvcFRvdWNoRW5kOlwidG91Y2hlbmRcIix0b3BUb3VjaE1vdmU6XCJ0b3VjaG1vdmVcIixcbnRvcFRvdWNoU3RhcnQ6XCJ0b3VjaHN0YXJ0XCIsdG9wVHJhbnNpdGlvbkVuZDplZShcInRyYW5zaXRpb25lbmRcIiksdG9wV2hlZWw6XCJ3aGVlbFwifSxnZT17dG9wQWJvcnQ6XCJhYm9ydFwiLHRvcENhblBsYXk6XCJjYW5wbGF5XCIsdG9wQ2FuUGxheVRocm91Z2g6XCJjYW5wbGF5dGhyb3VnaFwiLHRvcER1cmF0aW9uQ2hhbmdlOlwiZHVyYXRpb25jaGFuZ2VcIix0b3BFbXB0aWVkOlwiZW1wdGllZFwiLHRvcEVuY3J5cHRlZDpcImVuY3J5cHRlZFwiLHRvcEVuZGVkOlwiZW5kZWRcIix0b3BFcnJvcjpcImVycm9yXCIsdG9wTG9hZGVkRGF0YTpcImxvYWRlZGRhdGFcIix0b3BMb2FkZWRNZXRhZGF0YTpcImxvYWRlZG1ldGFkYXRhXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsdG9wUGF1c2U6XCJwYXVzZVwiLHRvcFBsYXk6XCJwbGF5XCIsdG9wUGxheWluZzpcInBsYXlpbmdcIix0b3BQcm9ncmVzczpcInByb2dyZXNzXCIsdG9wUmF0ZUNoYW5nZTpcInJhdGVjaGFuZ2VcIix0b3BTZWVrZWQ6XCJzZWVrZWRcIix0b3BTZWVraW5nOlwic2Vla2luZ1wiLFxudG9wU3RhbGxlZDpcInN0YWxsZWRcIix0b3BTdXNwZW5kOlwic3VzcGVuZFwiLHRvcFRpbWVVcGRhdGU6XCJ0aW1ldXBkYXRlXCIsdG9wVm9sdW1lQ2hhbmdlOlwidm9sdW1lY2hhbmdlXCIsdG9wV2FpdGluZzpcIndhaXRpbmdcIn0saGU9e30saWU9MCxqZT1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7ZnVuY3Rpb24ga2UoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsamUpfHwoYVtqZV09aWUrKyxoZVthW2plXV09e30pO3JldHVybiBoZVthW2plXV19ZnVuY3Rpb24gbGUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gbWUoYSxiKXt2YXIgYz1sZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1sZShjKX19ZnVuY3Rpb24gbmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmXCJ0ZXh0XCI9PT1hLnR5cGV8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIG9lPW0uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUscGU9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29udGV4dE1lbnUgdG9wRm9jdXMgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BNb3VzZURvd24gdG9wTW91c2VVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxxZT1udWxsLHJlPW51bGwsc2U9bnVsbCx0ZT0hMTtcbmZ1bmN0aW9uIHVlKGEsYil7aWYodGV8fG51bGw9PXFlfHxxZSE9PWZhKCkpcmV0dXJuIG51bGw7dmFyIGM9cWU7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmbmUoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OndpbmRvdy5nZXRTZWxlY3Rpb24/KGM9d2luZG93LmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pOmM9dm9pZCAwO3JldHVybiBzZSYmaGEoc2UsYyk/bnVsbDooc2U9YyxhPU4uZ2V0UG9vbGVkKHBlLnNlbGVjdCxyZSxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PXFlLGliKGEpLGEpfVxudmFyIHZlPXtldmVudFR5cGVzOnBlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPWtlKGUpO2Y9dmEub25TZWxlY3Q7Zm9yKHZhciBoPTA7aDxmLmxlbmd0aDtoKyspe3ZhciBnPWZbaF07aWYoIWUuaGFzT3duUHJvcGVydHkoZyl8fCFlW2ddKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9WYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BGb2N1c1wiOmlmKGdjKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKXFlPWUscmU9YixzZT1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6c2U9cmU9cWU9bnVsbDticmVhaztjYXNlIFwidG9wTW91c2VEb3duXCI6dGU9ITA7YnJlYWs7Y2FzZSBcInRvcENvbnRleHRNZW51XCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpyZXR1cm4gdGU9ITEsdWUoYyxkKTtjYXNlIFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI6aWYob2UpYnJlYWs7XG5jYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOnJldHVybiB1ZShjLGQpfXJldHVybiBudWxsfX07TmEuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIFRhcEV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTtEYT1iYi5nZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlO0VhPWJiLmdldEluc3RhbmNlRnJvbU5vZGU7RmE9YmIuZ2V0Tm9kZUZyb21JbnN0YW5jZTtOYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOlJkLEVudGVyTGVhdmVFdmVudFBsdWdpbjp3ZCxDaGFuZ2VFdmVudFBsdWdpbjpwZCxTZWxlY3RFdmVudFBsdWdpbjp2ZSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOlJifSk7XG5mdW5jdGlvbiB4ZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPW51bGw7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpc1tcInJldHVyblwiXT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1cbmZ1bmN0aW9uIHplKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtudWxsPT09ZD8oZD1uZXcgeGUoYS50YWcsYixhLmtleSxhLm1vZGUpLGQudHlwZT1hLnR5cGUsZC5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsZC5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1kKTooZC5wZW5kaW5nUHJvcHM9YixkLmVmZmVjdFRhZz0wLGQubmV4dEVmZmVjdD1udWxsLGQuZmlyc3RFZmZlY3Q9bnVsbCxkLmxhc3RFZmZlY3Q9bnVsbCk7ZC5leHBpcmF0aW9uVGltZT1jO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2Quc2libGluZz1hLnNpYmxpbmc7ZC5pbmRleD1hLmluZGV4O2QucmVmPWEucmVmO3JldHVybiBkfVxuZnVuY3Rpb24gQWUoYSxiLGMpe3ZhciBkPWEudHlwZSxlPWEua2V5O2E9YS5wcm9wczt2YXIgZj12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpZj1kLnByb3RvdHlwZSYmZC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD8yOjA7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGQpZj01O2Vsc2Ugc3dpdGNoKGQpe2Nhc2Ugc2M6cmV0dXJuIEJlKGEuY2hpbGRyZW4sYixjLGUpO2Nhc2Ugd2M6Zj0xMTtifD0zO2JyZWFrO2Nhc2UgdGM6Zj0xMTtifD0yO2JyZWFrO2Nhc2UgcGM6Zj03O2JyZWFrO2Nhc2UgcWM6Zj05O2JyZWFrO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZClzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB1YzpmPTEzO2JyZWFrO2Nhc2UgdmM6Zj0xMjticmVhaztjYXNlIHhjOmY9MTQ7YnJlYWs7ZGVmYXVsdDppZihcIm51bWJlclwiPT09dHlwZW9mIGQudGFnKXJldHVybiBiPWQsYi5wZW5kaW5nUHJvcHM9YSxiLmV4cGlyYXRpb25UaW1lPWMsXG5iO0QoXCIxMzBcIixudWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9ZWxzZSBEKFwiMTMwXCIsbnVsbD09ZD9kOnR5cGVvZiBkLFwiXCIpfWI9bmV3IHhlKGYsYSxlLGIpO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiBCZShhLGIsYyxkKXthPW5ldyB4ZSgxMCxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIENlKGEsYixjKXthPW5ldyB4ZSg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gRGUoYSxiLGMpe2I9bmV3IHhlKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifXZhciBFZT1udWxsLEZlPW51bGw7XG5mdW5jdGlvbiBHZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fWZ1bmN0aW9uIEhlKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO0VlPUdlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtGZT1HZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfWZ1bmN0aW9uIEllKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBFZSYmRWUoYSl9ZnVuY3Rpb24gSmUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEZlJiZGZShhKX1uZXcgU2V0O1xuZnVuY3Rpb24gS2UoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGV4cGlyYXRpb25UaW1lOjAsZmlyc3Q6bnVsbCxsYXN0Om51bGwsY2FsbGJhY2tMaXN0Om51bGwsaGFzRm9yY2VVcGRhdGU6ITEsaXNJbml0aWFsaXplZDohMSxjYXB0dXJlZFZhbHVlczpudWxsfX1mdW5jdGlvbiBMZShhLGIpe251bGw9PT1hLmxhc3Q/YS5maXJzdD1hLmxhc3Q9YjooYS5sYXN0Lm5leHQ9YixhLmxhc3Q9Yik7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+Yi5leHBpcmF0aW9uVGltZSlhLmV4cGlyYXRpb25UaW1lPWIuZXhwaXJhdGlvblRpbWV9dmFyIE1lPXZvaWQgMCxOZT12b2lkIDA7XG5mdW5jdGlvbiBPZShhKXtNZT1OZT1udWxsO3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS51cGRhdGVRdWV1ZTtudWxsPT09YyYmKGM9YS51cGRhdGVRdWV1ZT1LZShudWxsKSk7bnVsbCE9PWI/KGE9Yi51cGRhdGVRdWV1ZSxudWxsPT09YSYmKGE9Yi51cGRhdGVRdWV1ZT1LZShudWxsKSkpOmE9bnVsbDtNZT1jO05lPWEhPT1jP2E6bnVsbH1mdW5jdGlvbiBQZShhLGIpe09lKGEpO2E9TWU7dmFyIGM9TmU7bnVsbD09PWM/TGUoYSxiKTpudWxsPT09YS5sYXN0fHxudWxsPT09Yy5sYXN0PyhMZShhLGIpLExlKGMsYikpOihMZShhLGIpLGMubGFzdD1iKX1mdW5jdGlvbiBRZShhLGIsYyxkKXthPWEucGFydGlhbFN0YXRlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChiLGMsZCk6YX1cbmZ1bmN0aW9uIFJlKGEsYixjLGQsZSxmKXtudWxsIT09YSYmYS51cGRhdGVRdWV1ZT09PWMmJihjPWIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTpjLmJhc2VTdGF0ZSxleHBpcmF0aW9uVGltZTpjLmV4cGlyYXRpb25UaW1lLGZpcnN0OmMuZmlyc3QsbGFzdDpjLmxhc3QsaXNJbml0aWFsaXplZDpjLmlzSW5pdGlhbGl6ZWQsY2FwdHVyZWRWYWx1ZXM6Yy5jYXB0dXJlZFZhbHVlcyxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMX0pO2MuZXhwaXJhdGlvblRpbWU9MDtjLmlzSW5pdGlhbGl6ZWQ/YT1jLmJhc2VTdGF0ZTooYT1jLmJhc2VTdGF0ZT1iLm1lbW9pemVkU3RhdGUsYy5pc0luaXRpYWxpemVkPSEwKTtmb3IodmFyIGg9ITAsZz1jLmZpcnN0LGs9ITE7bnVsbCE9PWc7KXt2YXIgdj1nLmV4cGlyYXRpb25UaW1lO2lmKHY+Zil7dmFyIGw9Yy5leHBpcmF0aW9uVGltZTtpZigwPT09bHx8bD52KWMuZXhwaXJhdGlvblRpbWU9djtrfHwoaz0hMCxjLmJhc2VTdGF0ZT1hKX1lbHNle2t8fFxuKGMuZmlyc3Q9Zy5uZXh0LG51bGw9PT1jLmZpcnN0JiYoYy5sYXN0PW51bGwpKTtpZihnLmlzUmVwbGFjZSlhPVFlKGcsZCxhLGUpLGg9ITA7ZWxzZSBpZih2PVFlKGcsZCxhLGUpKWE9aD9BKHt9LGEsdik6QShhLHYpLGg9ITE7Zy5pc0ZvcmNlZCYmKGMuaGFzRm9yY2VVcGRhdGU9ITApO251bGwhPT1nLmNhbGxiYWNrJiYodj1jLmNhbGxiYWNrTGlzdCxudWxsPT09diYmKHY9Yy5jYWxsYmFja0xpc3Q9W10pLHYucHVzaChnKSk7bnVsbCE9PWcuY2FwdHVyZWRWYWx1ZSYmKHY9Yy5jYXB0dXJlZFZhbHVlcyxudWxsPT09dj9jLmNhcHR1cmVkVmFsdWVzPVtnLmNhcHR1cmVkVmFsdWVdOnYucHVzaChnLmNhcHR1cmVkVmFsdWUpKX1nPWcubmV4dH1udWxsIT09Yy5jYWxsYmFja0xpc3Q/Yi5lZmZlY3RUYWd8PTMyOm51bGwhPT1jLmZpcnN0fHxjLmhhc0ZvcmNlVXBkYXRlfHxudWxsIT09Yy5jYXB0dXJlZFZhbHVlc3x8KGIudXBkYXRlUXVldWU9bnVsbCk7a3x8KGMuYmFzZVN0YXRlPWEpO1xucmV0dXJuIGF9ZnVuY3Rpb24gU2UoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTGlzdDtpZihudWxsIT09Yylmb3IoYS5jYWxsYmFja0xpc3Q9bnVsbCxhPTA7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV0sZT1kLmNhbGxiYWNrO2QuY2FsbGJhY2s9bnVsbDtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZT9EKFwiMTkxXCIsZSk6dm9pZCAwO2UuY2FsbChiKX19XG5mdW5jdGlvbiBUZShhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1ifHxudWxsIT09YS51cGRhdGVRdWV1ZSYmYS51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSlyZXR1cm4hMDt2YXIgbj1hLnN0YXRlTm9kZTthPWEudHlwZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5zaG91bGRDb21wb25lbnRVcGRhdGU/bi5zaG91bGRDb21wb25lbnRVcGRhdGUoYyxlLGYpOmEucHJvdG90eXBlJiZhLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8haGEoYixjKXx8IWhhKGQsZSk6ITB9ZnVuY3Rpb24gaChhLGIpe2IudXBkYXRlcj1yO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWF9ZnVuY3Rpb24gZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZyLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfWZ1bmN0aW9uIGsoYSxiLGMsZCl7YT1hLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKXJldHVybiBhLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5jYWxsKG51bGwsYyxkKX12YXIgdj1hLmNhY2hlQ29udGV4dCxsPWEuZ2V0TWFza2VkQ29udGV4dCxwPWEuZ2V0VW5tYXNrZWRDb250ZXh0LHo9YS5pc0NvbnRleHRDb25zdW1lcixCPWEuaGFzQ29udGV4dENoYW5nZWQscj17aXNNb3VudGVkOnlkLGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGQsZSl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7ZT12b2lkIDA9PT1lP251bGw6ZTt2YXIgZj1jKGEpO1BlKGEse2V4cGlyYXRpb25UaW1lOmYscGFydGlhbFN0YXRlOmQsY2FsbGJhY2s6ZSxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsXG5jYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGYpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsZCxlKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBmPWMoYSk7UGUoYSx7ZXhwaXJhdGlvblRpbWU6ZixwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMCxpc0ZvcmNlZDohMSxjYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGYpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxkKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBlPWMoYSk7UGUoYSx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6bnVsbCxjYWxsYmFjazpkLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMCxjYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGUpfX07cmV0dXJue2Fkb3B0Q2xhc3NJbnN0YW5jZTpoLGNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6ayxcbmNvbnN0cnVjdENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsZD1wKGEpLGU9eihhKSxmPWU/bChhLGQpOmthO2M9bmV3IGMoYixmKTt2YXIgbj1udWxsIT09Yy5zdGF0ZSYmdm9pZCAwIT09Yy5zdGF0ZT9jLnN0YXRlOm51bGw7aChhLGMpO2EubWVtb2l6ZWRTdGF0ZT1uO2I9ayhhLGMsYixuKTtudWxsIT09YiYmdm9pZCAwIT09YiYmKGEubWVtb2l6ZWRTdGF0ZT1BKHt9LGEubWVtb2l6ZWRTdGF0ZSxiKSk7ZSYmdihhLGQsZik7cmV0dXJuIGN9LG1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPWEuYWx0ZXJuYXRlLGU9YS5zdGF0ZU5vZGUsZj1hLnBlbmRpbmdQcm9wcyxuPXAoYSk7ZS5wcm9wcz1mO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1rYTtlLmNvbnRleHQ9bChhLG4pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYz1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxjIT09ZS5zdGF0ZSYmci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihlLnN0YXRlPVJlKGQsYSxjLGUsZixiKSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfSxyZXN1bWVNb3VudENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsbj1hLnN0YXRlTm9kZTtuLnByb3BzPWEubWVtb2l6ZWRQcm9wcztuLnN0YXRlPVxuYS5tZW1vaXplZFN0YXRlO3ZhciBoPWEubWVtb2l6ZWRQcm9wcyxyPWEucGVuZGluZ1Byb3BzLHo9bi5jb250ZXh0LHE9cChhKTtxPWwoYSxxKTsoYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cnx8eiE9PXEpJiZnKGEsbixyLHEpO3o9YS5tZW1vaXplZFN0YXRlO2I9bnVsbCE9PWEudXBkYXRlUXVldWU/UmUobnVsbCxhLGEudXBkYXRlUXVldWUsbixyLGIpOno7dmFyIHU9dm9pZCAwO2ghPT1yJiYodT1rKGEsbixyLGIpKTtpZihudWxsIT09dSYmdm9pZCAwIT09dSl7Yj1udWxsPT09Ynx8dm9pZCAwPT09Yj91OkEoe30sYix1KTt2YXIgdD1hLnVwZGF0ZVF1ZXVlO1xubnVsbCE9PXQmJih0LmJhc2VTdGF0ZT1BKHt9LHQuYmFzZVN0YXRlLHUpKX1pZighKGghPT1yfHx6IT09Ynx8QigpfHxudWxsIT09YS51cGRhdGVRdWV1ZSYmYS51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCksITE7KGg9ZihhLGgscix6LGIscSkpPyhjfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsTW91bnQmJm4uY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PVxuNCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KSxkKGEsciksZShhLGIpKTtuLnByb3BzPXI7bi5zdGF0ZT1iO24uY29udGV4dD1xO3JldHVybiBofSx1cGRhdGVDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgbj1iLnR5cGUseD1iLnN0YXRlTm9kZTt4LnByb3BzPWIubWVtb2l6ZWRQcm9wczt4LnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTt2YXIgaD1iLm1lbW9pemVkUHJvcHMscj1iLnBlbmRpbmdQcm9wcyxxPXguY29udGV4dCx1PXAoYik7dT1sKGIsdSk7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09cnx8cSE9PXUpJiZnKGIseCxyLHUpO3E9Yi5tZW1vaXplZFN0YXRlO2M9bnVsbCE9PWIudXBkYXRlUXVldWU/UmUoYSxiLGIudXBkYXRlUXVldWUseCxyLGMpOnE7dmFyIHQ9dm9pZCAwO2ghPT1yJiYodD1rKGIseCxyLGMpKTtpZihudWxsIT09dCYmdm9pZCAwIT09dCl7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz90OkEoe30sYyx0KTt2YXIgeT1iLnVwZGF0ZVF1ZXVlO251bGwhPT15JiYoeS5iYXNlU3RhdGU9QSh7fSx5LmJhc2VTdGF0ZSx0KSl9aWYoIShoIT09cnx8cSE9PWN8fEIoKXx8bnVsbCE9PWIudXBkYXRlUXVldWUmJmIudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpKXJldHVyblwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmXG5xPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTIwNDgpLCExOyh0PWYoYixoLHIscSxjLHUpKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5jb21wb25lbnRXaWxsVXBkYXRlJiZ4LmNvbXBvbmVudFdpbGxVcGRhdGUocixjLHUpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZ4LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKHIsYyx1KSksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTIwNDgpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZcbnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjA0OCksZChiLHIpLGUoYixjKSk7eC5wcm9wcz1yO3guc3RhdGU9Yzt4LmNvbnRleHQ9dTtyZXR1cm4gdH19fXZhciBVZT1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gVmUoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMiE9PWMudGFnP0QoXCIxMTBcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOkQoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzPT09a2E/ZC5yZWZzPXt9OmQucmVmcztudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT9EKFwiMTQ4XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6RChcIjI1NFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gV2UoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJkQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIFhlKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9emUoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBoKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGcoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1DZShjLGEubW9kZSxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLnR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9VmUoYSxiLGMpLGRbXCJyZXR1cm5cIl09YSxkO2Q9QWUoYyxhLm1vZGUsZCk7ZC5yZWY9VmUoYSxiLGMpO2RbXCJyZXR1cm5cIl09YTtyZXR1cm4gZH1mdW5jdGlvbiB2KGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbkRlKGMsYS5tb2RlLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBsKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDEwIT09Yi50YWcpcmV0dXJuIGI9QmUoYyxhLm1vZGUsZCxmKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1DZShcIlwiK2IsYS5tb2RlLGMpLGJbXCJyZXR1cm5cIl09YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIG9jOnJldHVybiBjPUFlKGIsYS5tb2RlLGMpLGMucmVmPVZlKGEsbnVsbCxiKSxjW1wicmV0dXJuXCJdPWEsYztjYXNlIHJjOnJldHVybiBiPURlKGIsYS5tb2RlLGMpLGJbXCJyZXR1cm5cIl09YSxifWlmKFVlKGIpfHx6YyhiKSlyZXR1cm4gYj1CZShiLFxuYS5tb2RlLGMsbnVsbCksYltcInJldHVyblwiXT1hLGI7V2UoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6ZyhhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIG9jOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09c2M/bChhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHJjOnJldHVybiBjLmtleT09PWU/dihhLGIsYyxkKTpudWxsfWlmKFVlKGMpfHx6YyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpsKGEsYixjLGQsbnVsbCk7V2UoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBCKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxnKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugb2M6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXNjP2woYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHJjOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCx2KGIsYSxkLGUpfWlmKFVlKGQpfHx6YyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxsKGIsYSxkLGUsbnVsbCk7V2UoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiByKGUsbCxnLGgpe2Zvcih2YXIgcj1udWxsLGs9bnVsbCxxPWwsdT1sPTAsdD1udWxsO251bGwhPT1xJiZ1PGcubGVuZ3RoO3UrKyl7cS5pbmRleD51Pyh0PXEscT1udWxsKTp0PXEuc2libGluZzt2YXIgbj16KGUscSxnW3VdLGgpO2lmKG51bGw9PT1uKXtudWxsPT09cSYmKHE9dCk7YnJlYWt9YSYmcSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSxxKTtsPWYobixsLHUpO251bGw9PT1rP3I9bjprLnNpYmxpbmc9bjtrPW47cT10fWlmKHU9PT1nLmxlbmd0aClyZXR1cm4gYyhlLHEpLHI7aWYobnVsbD09PXEpe2Zvcig7dTxnLmxlbmd0aDt1KyspaWYocT1wKGUsZ1t1XSxoKSlsPWYocSxsLHUpLG51bGw9PT1rP3I9cTprLnNpYmxpbmc9cSxrPXE7cmV0dXJuIHJ9Zm9yKHE9ZChlLHEpO3U8Zy5sZW5ndGg7dSsrKWlmKHQ9QihxLGUsdSxnW3VdLGgpKXtpZihhJiZudWxsIT09dC5hbHRlcm5hdGUpcVtcImRlbGV0ZVwiXShudWxsPT09dC5rZXk/dTp0LmtleSk7bD1mKHQsbCx1KTtudWxsPT09az9yPXQ6ay5zaWJsaW5nPXQ7az10fWEmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHJ9ZnVuY3Rpb24gUShlLGwsZyxoKXt2YXIgcj16YyhnKTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygcj9EKFwiMTUwXCIpOnZvaWQgMDtnPXIuY2FsbChnKTtudWxsPT1nP0QoXCIxNTFcIik6dm9pZCAwO2Zvcih2YXIgaz1cbnI9bnVsbCxxPWwsdT1sPTAsdD1udWxsLG49Zy5uZXh0KCk7bnVsbCE9PXEmJiFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpe3EuaW5kZXg+dT8odD1xLHE9bnVsbCk6dD1xLnNpYmxpbmc7dmFyIEg9eihlLHEsbi52YWx1ZSxoKTtpZihudWxsPT09SCl7cXx8KHE9dCk7YnJlYWt9YSYmcSYmbnVsbD09PUguYWx0ZXJuYXRlJiZiKGUscSk7bD1mKEgsbCx1KTtudWxsPT09az9yPUg6ay5zaWJsaW5nPUg7az1IO3E9dH1pZihuLmRvbmUpcmV0dXJuIGMoZSxxKSxyO2lmKG51bGw9PT1xKXtmb3IoOyFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpbj1wKGUsbi52YWx1ZSxoKSxudWxsIT09biYmKGw9ZihuLGwsdSksbnVsbD09PWs/cj1uOmsuc2libGluZz1uLGs9bik7cmV0dXJuIHJ9Zm9yKHE9ZChlLHEpOyFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpaWYobj1CKHEsZSx1LG4udmFsdWUsaCksbnVsbCE9PW4pe2lmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSlxW1wiZGVsZXRlXCJdKG51bGw9PT1uLmtleT91Om4ua2V5KTtcbmw9ZihuLGwsdSk7bnVsbD09PWs/cj1uOmsuc2libGluZz1uO2s9bn1hJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiByfXJldHVybiBmdW5jdGlvbihhLGQsZixsKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1zYyYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgZz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGcpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugb2M6YTp7dmFyIGs9Zi5rZXk7Zm9yKGc9ZDtudWxsIT09Zzspe2lmKGcua2V5PT09aylpZigxMD09PWcudGFnP2YudHlwZT09PXNjOmcudHlwZT09PWYudHlwZSl7YyhhLGcuc2libGluZyk7ZD1lKGcsZi50eXBlPT09c2M/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGwpO2QucmVmPVZlKGEsZyxmKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZyk7YnJlYWt9ZWxzZSBiKGEsZyk7Zz1nLnNpYmxpbmd9Zi50eXBlPT09XG5zYz8oZD1CZShmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxsLGYua2V5KSxkW1wicmV0dXJuXCJdPWEsYT1kKToobD1BZShmLGEubW9kZSxsKSxsLnJlZj1WZShhLGQsZiksbFtcInJldHVyblwiXT1hLGE9bCl9cmV0dXJuIGgoYSk7Y2FzZSByYzphOntmb3IoZz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09ZylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10sbCk7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9RGUoZixhLm1vZGUsbCk7ZFtcInJldHVyblwiXT1hO2E9ZH1yZXR1cm4gaChhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJlxuNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGwpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihjKGEsZCksZD1DZShmLGEubW9kZSxsKSxkW1wicmV0dXJuXCJdPWEsYT1kKSxoKGEpO2lmKFVlKGYpKXJldHVybiByKGEsZCxmLGwpO2lmKHpjKGYpKXJldHVybiBRKGEsZCxmLGwpO2cmJldlKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmKXN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTpsPWEudHlwZSxEKFwiMTUyXCIsbC5kaXNwbGF5TmFtZXx8bC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgWWU9WGUoITApLFplPVhlKCExKTtcbmZ1bmN0aW9uICRlKGEsYixjLGQsZSxmLGgpe2Z1bmN0aW9uIGcoYSxiLGMpe2soYSxiLGMsYi5leHBpcmF0aW9uVGltZSl9ZnVuY3Rpb24gayhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1plKGIsbnVsbCxjLGQpOlllKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIHYoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBsKGEsYixjLGQsZSxmKXt2KGEsYik7aWYoIWMmJiFlKXJldHVybiBkJiZ5KGIsITEpLHIoYSxiKTtjPWIuc3RhdGVOb2RlO25jLmN1cnJlbnQ9Yjt2YXIgbD1lP251bGw6Yy5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtlJiYoayhhLGIsbnVsbCxmKSxiLmNoaWxkPW51bGwpO2soYSxiLGwsZik7Yi5tZW1vaXplZFN0YXRlPWMuc3RhdGU7Yi5tZW1vaXplZFByb3BzPWMucHJvcHM7ZCYmeShiLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBwKGEpe3ZhciBiPWEuc3RhdGVOb2RlO1xuYi5wZW5kaW5nQ29udGV4dD90KGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJnQoYSxiLmNvbnRleHQsITEpO1koYSxiLmNvbnRhaW5lckluZm8pfWZ1bmN0aW9uIHooYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDtmb3IobnVsbCE9PWUmJihlW1wicmV0dXJuXCJdPWEpO251bGwhPT1lOyl7c3dpdGNoKGUudGFnKXtjYXNlIDEyOnZhciBmPWUuc3RhdGVOb2RlfDA7aWYoZS50eXBlPT09YiYmMCE9PShmJmMpKXtmb3IoZj1lO251bGwhPT1mOyl7dmFyIGw9Zi5hbHRlcm5hdGU7aWYoMD09PWYuZXhwaXJhdGlvblRpbWV8fGYuZXhwaXJhdGlvblRpbWU+ZClmLmV4cGlyYXRpb25UaW1lPWQsbnVsbCE9PWwmJigwPT09bC5leHBpcmF0aW9uVGltZXx8bC5leHBpcmF0aW9uVGltZT5kKSYmKGwuZXhwaXJhdGlvblRpbWU9ZCk7ZWxzZSBpZihudWxsIT09bCYmKDA9PT1sLmV4cGlyYXRpb25UaW1lfHxsLmV4cGlyYXRpb25UaW1lPmQpKWwuZXhwaXJhdGlvblRpbWU9XG5kO2Vsc2UgYnJlYWs7Zj1mW1wicmV0dXJuXCJdfWY9bnVsbH1lbHNlIGY9ZS5jaGlsZDticmVhaztjYXNlIDEzOmY9ZS50eXBlPT09YS50eXBlP251bGw6ZS5jaGlsZDticmVhaztkZWZhdWx0OmY9ZS5jaGlsZH1pZihudWxsIT09ZilmW1wicmV0dXJuXCJdPWU7ZWxzZSBmb3IoZj1lO251bGwhPT1mOyl7aWYoZj09PWEpe2Y9bnVsbDticmVha31lPWYuc2libGluZztpZihudWxsIT09ZSl7Zj1lO2JyZWFrfWY9ZltcInJldHVyblwiXX1lPWZ9fWZ1bmN0aW9uIEIoYSxiLGMpe3ZhciBkPWIudHlwZS5fY29udGV4dCxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFByb3BzO2lmKCFxKCkmJmY9PT1lKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpO3ZhciBsPWUudmFsdWU7Yi5tZW1vaXplZFByb3BzPWU7aWYobnVsbD09PWYpbD0xMDczNzQxODIzO2Vsc2UgaWYoZi52YWx1ZT09PWUudmFsdWUpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYiksXG5yKGEsYik7bD0wfWVsc2V7dmFyIGg9Zi52YWx1ZTtpZihoPT09bCYmKDAhPT1ofHwxL2g9PT0xL2wpfHxoIT09aCYmbCE9PWwpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpO2w9MH1lbHNlIGlmKGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsbCk6MTA3Mzc0MTgyMyxsfD0wLDA9PT1sKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKX1lbHNlIHooYixkLGwsYyl9Yi5zdGF0ZU5vZGU9bDtHKGIpO2coYSxiLGUuY2hpbGRyZW4pO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHIoYSxiKXtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/RChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDt2YXIgYz16ZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO1xuYi5jaGlsZD1jO2ZvcihjW1wicmV0dXJuXCJdPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9emUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjW1wicmV0dXJuXCJdPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIFE9YS5zaG91bGRTZXRUZXh0Q29udGVudCxuPWEuc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSx4PWIucHVzaEhvc3RDb250ZXh0LFk9Yi5wdXNoSG9zdENvbnRhaW5lcixHPWQucHVzaFByb3ZpZGVyLFI9Yy5nZXRNYXNrZWRDb250ZXh0LFM9Yy5nZXRVbm1hc2tlZENvbnRleHQscT1jLmhhc0NvbnRleHRDaGFuZ2VkLHU9Yy5wdXNoQ29udGV4dFByb3ZpZGVyLHQ9Yy5wdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0LHk9Yy5pbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyLEg9ZS5lbnRlckh5ZHJhdGlvblN0YXRlLFdhPWUucmVzZXRIeWRyYXRpb25TdGF0ZSxDYj1lLnRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuYT1UZShjLGYsaCxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRQcm9wcz1ifSxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRTdGF0ZT1ifSk7dmFyIEpjPWEuYWRvcHRDbGFzc0luc3RhbmNlLEtjPWEuY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxMYz1hLmNvbnN0cnVjdENsYXNzSW5zdGFuY2UsRGI9YS5tb3VudENsYXNzSW5zdGFuY2UsTWM9YS5yZXN1bWVNb3VudENsYXNzSW5zdGFuY2UsRWI9YS51cGRhdGVDbGFzc0luc3RhbmNlO3JldHVybntiZWdpbldvcms6ZnVuY3Rpb24oYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOnAoYik7YnJlYWs7Y2FzZSAyOnUoYik7YnJlYWs7Y2FzZSA0OlkoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEzOkcoYil9cmV0dXJuIG51bGx9c3dpdGNoKGIudGFnKXtjYXNlIDA6bnVsbCE9PWE/RChcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLFxuZT1iLnBlbmRpbmdQcm9wcyxmPVMoYik7Zj1SKGIsZik7ZD1kKGUsZik7Yi5lZmZlY3RUYWd8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQucmVuZGVyJiZ2b2lkIDA9PT1kLiQkdHlwZW9mPyhmPWIudHlwZSxiLnRhZz0yLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZC5zdGF0ZSYmdm9pZCAwIT09ZC5zdGF0ZT9kLnN0YXRlOm51bGwsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYoZT1LYyhiLGQsZSxiLm1lbW9pemVkU3RhdGUpLG51bGwhPT1lJiZ2b2lkIDAhPT1lJiYoYi5tZW1vaXplZFN0YXRlPUEoe30sYi5tZW1vaXplZFN0YXRlLGUpKSksZT11KGIpLEpjKGIsZCksRGIoYixjKSxhPWwoYSxiLCEwLGUsITEsYykpOihiLnRhZz0xLGcoYSxiLGQpLGIubWVtb2l6ZWRQcm9wcz1lLGE9Yi5jaGlsZCk7cmV0dXJuIGE7Y2FzZSAxOnJldHVybiBlPWIudHlwZSxjPWIucGVuZGluZ1Byb3BzLHEoKXx8XG5iLm1lbW9pemVkUHJvcHMhPT1jPyhkPVMoYiksZD1SKGIsZCksZT1lKGMsZCksYi5lZmZlY3RUYWd8PTEsZyhhLGIsZSksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMjplPXUoYik7bnVsbD09PWE/bnVsbD09PWIuc3RhdGVOb2RlPyhMYyhiLGIucGVuZGluZ1Byb3BzKSxEYihiLGMpLGQ9ITApOmQ9TWMoYixjKTpkPUViKGEsYixjKTtmPSExO3ZhciBoPWIudXBkYXRlUXVldWU7bnVsbCE9PWgmJm51bGwhPT1oLmNhcHR1cmVkVmFsdWVzJiYoZj1kPSEwKTtyZXR1cm4gbChhLGIsZCxlLGYsYyk7Y2FzZSAzOmE6aWYocChiKSxkPWIudXBkYXRlUXVldWUsbnVsbCE9PWQpe2Y9Yi5tZW1vaXplZFN0YXRlO2U9UmUoYSxiLGQsbnVsbCxudWxsLGMpO2IubWVtb2l6ZWRTdGF0ZT1lO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09ZCYmbnVsbCE9PWQuY2FwdHVyZWRWYWx1ZXMpZD1udWxsO2Vsc2UgaWYoZj09PWUpe1dhKCk7YT1yKGEsYik7YnJlYWsgYX1lbHNlIGQ9XG5lLmVsZW1lbnQ7Zj1iLnN0YXRlTm9kZTsobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZi5oeWRyYXRlJiZIKGIpPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPVplKGIsbnVsbCxkLGMpKTooV2EoKSxnKGEsYixkKSk7Yi5tZW1vaXplZFN0YXRlPWU7YT1iLmNoaWxkfWVsc2UgV2EoKSxhPXIoYSxiKTtyZXR1cm4gYTtjYXNlIDU6YTp7eChiKTtudWxsPT09YSYmQ2IoYik7ZT1iLnR5cGU7aD1iLm1lbW9pemVkUHJvcHM7ZD1iLnBlbmRpbmdQcm9wcztmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsO2lmKCFxKCkmJmg9PT1kKXtpZihoPWIubW9kZSYxJiZuKGUsZCkpYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2lmKCFofHwxMDczNzQxODIzIT09Yyl7YT1yKGEsYik7YnJlYWsgYX19aD1kLmNoaWxkcmVuO1EoZSxkKT9oPW51bGw6ZiYmUShlLGYpJiYoYi5lZmZlY3RUYWd8PTE2KTt2KGEsYik7MTA3Mzc0MTgyMyE9PWMmJmIubW9kZSYxJiZuKGUsZCk/KGIuZXhwaXJhdGlvblRpbWU9XG4xMDczNzQxODIzLGIubWVtb2l6ZWRQcm9wcz1kLGE9bnVsbCk6KGcoYSxiLGgpLGIubWVtb2l6ZWRQcm9wcz1kLGE9Yi5jaGlsZCl9cmV0dXJuIGE7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQ2IoYiksYi5tZW1vaXplZFByb3BzPWIucGVuZGluZ1Byb3BzLG51bGw7Y2FzZSA4OmIudGFnPTc7Y2FzZSA3OnJldHVybiBlPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09ZXx8KGU9Yi5tZW1vaXplZFByb3BzKSxkPWUuY2hpbGRyZW4sYi5zdGF0ZU5vZGU9bnVsbD09PWE/WmUoYixiLnN0YXRlTm9kZSxkLGMpOlllKGIsYS5zdGF0ZU5vZGUsZCxjKSxiLm1lbW9pemVkUHJvcHM9ZSxiLnN0YXRlTm9kZTtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBZKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZT1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWU/KG51bGw9PT1hP2IuY2hpbGQ9WWUoYixudWxsLGUsYyk6ZyhhLGIsZSksYi5tZW1vaXplZFByb3BzPVxuZSxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxNDpyZXR1cm4gYz1iLnR5cGUucmVuZGVyLGM9YyhiLnBlbmRpbmdQcm9wcyxiLnJlZiksZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYi5jaGlsZDtjYXNlIDEwOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09Yz8oZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTE6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4scSgpfHxudWxsIT09YyYmYi5tZW1vaXplZFByb3BzIT09Yz8oZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTM6cmV0dXJuIEIoYSxiLGMpO2Nhc2UgMTI6YTp7ZD1iLnR5cGU7Zj1iLnBlbmRpbmdQcm9wcztoPWIubWVtb2l6ZWRQcm9wcztlPWQuX2N1cnJlbnRWYWx1ZTt2YXIgdD1kLl9jaGFuZ2VkQml0cztpZihxKCl8fDAhPT10fHxoIT09Zil7Yi5tZW1vaXplZFByb3BzPVxuZjt2YXIgaz1mLnVuc3RhYmxlX29ic2VydmVkQml0cztpZih2b2lkIDA9PT1rfHxudWxsPT09aylrPTEwNzM3NDE4MjM7Yi5zdGF0ZU5vZGU9aztpZigwIT09KHQmaykpeihiLGQsdCxjKTtlbHNlIGlmKGg9PT1mKXthPXIoYSxiKTticmVhayBhfWM9Zi5jaGlsZHJlbjtjPWMoZSk7ZyhhLGIsYyk7YT1iLmNoaWxkfWVsc2UgYT1yKGEsYil9cmV0dXJuIGE7ZGVmYXVsdDpEKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gYWYoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEpe2EuZWZmZWN0VGFnfD00fXZhciBoPWEuY3JlYXRlSW5zdGFuY2UsZz1hLmNyZWF0ZVRleHRJbnN0YW5jZSxrPWEuYXBwZW5kSW5pdGlhbENoaWxkLHY9YS5maW5hbGl6ZUluaXRpYWxDaGlsZHJlbixsPWEucHJlcGFyZVVwZGF0ZSxwPWEucGVyc2lzdGVuY2Usej1iLmdldFJvb3RIb3N0Q29udGFpbmVyLEI9Yi5wb3BIb3N0Q29udGV4dCxyPWIuZ2V0SG9zdENvbnRleHQsUT1iLnBvcEhvc3RDb250YWluZXIsbj1jLnBvcENvbnRleHRQcm92aWRlcix4PWMucG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0LFk9ZC5wb3BQcm92aWRlcixHPWUucHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSxSPWUucHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UsUz1lLnBvcEh5ZHJhdGlvblN0YXRlLHE9dm9pZCAwLHU9dm9pZCAwLHQ9dm9pZCAwO2EubXV0YXRpb24/KHE9ZnVuY3Rpb24oKXt9LHU9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPVxuYykmJmYoYil9LHQ9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJmYoYil9KTpwP0QoXCIyMzVcIik6RChcIjIzNlwiKTtyZXR1cm57Y29tcGxldGVXb3JrOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gbnVsbDtjYXNlIDI6cmV0dXJuIG4oYiksYT1iLnN0YXRlTm9kZSxkPWIudXBkYXRlUXVldWUsbnVsbCE9PWQmJm51bGwhPT1kLmNhcHR1cmVkVmFsdWVzJiYoYi5lZmZlY3RUYWcmPS02NSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnREaWRDYXRjaD9iLmVmZmVjdFRhZ3w9MjU2OmQuY2FwdHVyZWRWYWx1ZXM9bnVsbCksbnVsbDtjYXNlIDM6UShiKTt4KGIpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKVMoYiksYi5lZmZlY3RUYWcmPS0zO3EoYik7YT1iLnVwZGF0ZVF1ZXVlO1xubnVsbCE9PWEmJm51bGwhPT1hLmNhcHR1cmVkVmFsdWVzJiYoYi5lZmZlY3RUYWd8PTI1Nik7cmV0dXJuIG51bGw7Y2FzZSA1OkIoYik7Yz16KCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSl7dmFyIHA9YS5tZW1vaXplZFByb3BzLEg9Yi5zdGF0ZU5vZGUseT1yKCk7SD1sKEgsZSxwLGQsYyx5KTt1KGEsYixILGUscCxkLGMseSk7YS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2V7aWYoIWQpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9cigpO2lmKFMoYikpRyhiLGMsYSkmJmYoYik7ZWxzZXtwPWgoZSxkLGMsYSxiKTthOmZvcih5PWIuY2hpbGQ7bnVsbCE9PXk7KXtpZig1PT09eS50YWd8fDY9PT15LnRhZylrKHAseS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PXkudGFnJiZudWxsIT09eS5jaGlsZCl7eS5jaGlsZFtcInJldHVyblwiXT15O3k9eS5jaGlsZDtjb250aW51ZX1pZih5PT09YilicmVhaztcbmZvcig7bnVsbD09PXkuc2libGluZzspe2lmKG51bGw9PT15W1wicmV0dXJuXCJdfHx5W1wicmV0dXJuXCJdPT09YilicmVhayBhO3k9eVtcInJldHVyblwiXX15LnNpYmxpbmdbXCJyZXR1cm5cIl09eVtcInJldHVyblwiXTt5PXkuc2libGluZ312KHAsZSxkLGMsYSkmJmYoYik7Yi5zdGF0ZU5vZGU9cH1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpdChhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXooKTtjPXIoKTtTKGIpP1IoYikmJmYoYik6Yi5zdGF0ZU5vZGU9ZyhkLGEsYyxiKX1yZXR1cm4gbnVsbDtjYXNlIDc6KGQ9Yi5tZW1vaXplZFByb3BzKT92b2lkIDA6RChcIjE2NVwiKTtiLnRhZz04O2U9W107YTpmb3IoKHA9Yi5zdGF0ZU5vZGUpJiYocFtcInJldHVyblwiXT1iKTtudWxsIT09XG5wOyl7aWYoNT09PXAudGFnfHw2PT09cC50YWd8fDQ9PT1wLnRhZylEKFwiMjQ3XCIpO2Vsc2UgaWYoOT09PXAudGFnKWUucHVzaChwLnBlbmRpbmdQcm9wcy52YWx1ZSk7ZWxzZSBpZihudWxsIT09cC5jaGlsZCl7cC5jaGlsZFtcInJldHVyblwiXT1wO3A9cC5jaGlsZDtjb250aW51ZX1mb3IoO251bGw9PT1wLnNpYmxpbmc7KXtpZihudWxsPT09cFtcInJldHVyblwiXXx8cFtcInJldHVyblwiXT09PWIpYnJlYWsgYTtwPXBbXCJyZXR1cm5cIl19cC5zaWJsaW5nW1wicmV0dXJuXCJdPXBbXCJyZXR1cm5cIl07cD1wLnNpYmxpbmd9cD1kLmhhbmRsZXI7ZD1wKGQucHJvcHMsZSk7Yi5jaGlsZD1ZZShiLG51bGwhPT1hP2EuY2hpbGQ6bnVsbCxkLGMpO3JldHVybiBiLmNoaWxkO2Nhc2UgODpyZXR1cm4gYi50YWc9NyxudWxsO2Nhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTA6cmV0dXJuIG51bGw7Y2FzZSAxMTpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIFEoYikscShiKSxudWxsO1xuY2FzZSAxMzpyZXR1cm4gWShiKSxudWxsO2Nhc2UgMTI6cmV0dXJuIG51bGw7Y2FzZSAwOkQoXCIxNjdcIik7ZGVmYXVsdDpEKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gYmYoYSxiLGMsZCxlKXt2YXIgZj1hLnBvcEhvc3RDb250YWluZXIsaD1hLnBvcEhvc3RDb250ZXh0LGc9Yi5wb3BDb250ZXh0UHJvdmlkZXIsaz1iLnBvcFRvcExldmVsQ29udGV4dE9iamVjdCx2PWMucG9wUHJvdmlkZXI7cmV0dXJue3Rocm93RXhjZXB0aW9uOmZ1bmN0aW9uKGEsYixjKXtiLmVmZmVjdFRhZ3w9NTEyO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7Yj17dmFsdWU6Yyxzb3VyY2U6YixzdGFjazpCYyhiKX07ZG97c3dpdGNoKGEudGFnKXtjYXNlIDM6T2UoYSk7YS51cGRhdGVRdWV1ZS5jYXB0dXJlZFZhbHVlcz1bYl07YS5lZmZlY3RUYWd8PTEwMjQ7cmV0dXJuO2Nhc2UgMjppZihjPWEuc3RhdGVOb2RlLDA9PT0oYS5lZmZlY3RUYWcmNjQpJiZudWxsIT09YyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50RGlkQ2F0Y2gmJiFlKGMpKXtPZShhKTtjPWEudXBkYXRlUXVldWU7dmFyIGQ9Yy5jYXB0dXJlZFZhbHVlcztudWxsPT09ZD9cbmMuY2FwdHVyZWRWYWx1ZXM9W2JdOmQucHVzaChiKTthLmVmZmVjdFRhZ3w9MTAyNDtyZXR1cm59fWE9YVtcInJldHVyblwiXX13aGlsZShudWxsIT09YSl9LHVud2luZFdvcms6ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZyhhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSAzOnJldHVybiBmKGEpLGsoYSksYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDU6cmV0dXJuIGgoYSksbnVsbDtjYXNlIDQ6cmV0dXJuIGYoYSksbnVsbDtjYXNlIDEzOnJldHVybiB2KGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19LHVud2luZEludGVycnVwdGVkV29yazpmdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjpnKGEpO2JyZWFrO2Nhc2UgMzpmKGEpO2soYSk7YnJlYWs7Y2FzZSA1OmgoYSk7YnJlYWs7Y2FzZSA0OmYoYSk7YnJlYWs7Y2FzZSAxMzp2KGEpfX19fVxuZnVuY3Rpb24gY2YoYSxiKXt2YXIgYz1iLnNvdXJjZTtudWxsPT09Yi5zdGFjayYmQmMoYyk7bnVsbCE9PWMmJkFjKGMpO2I9Yi52YWx1ZTtudWxsIT09YSYmMj09PWEudGFnJiZBYyhhKTt0cnl7YiYmYi5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGIpfWNhdGNoKGQpe2QmJmQuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihkKX19XG5mdW5jdGlvbiBkZihhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSl7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2godCl7YihhLHQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gaChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgSmUmJkplKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAyOmYoYSk7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2MucHJvcHM9YS5tZW1vaXplZFByb3BzLGMuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGMuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtiKGEsdCl9YnJlYWs7Y2FzZSA1OmYoYSk7YnJlYWs7Y2FzZSA3OmcoYS5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgNDpwJiZ2KGEpfX1mdW5jdGlvbiBnKGEpe2Zvcih2YXIgYj1hOzspaWYoaChiKSxudWxsPT09Yi5jaGlsZHx8cCYmND09PWIudGFnKXtpZihiPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfWVsc2UgYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZH1mdW5jdGlvbiBrKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfWZ1bmN0aW9uIHYoYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iW1wicmV0dXJuXCJdO2E6Zm9yKDs7KXtudWxsPT09Yz9EKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yz0hMH1pZig1PT09XG5iLnRhZ3x8Nj09PWIudGFnKWcoYiksZT9TKGQsYi5zdGF0ZU5vZGUpOlIoZCxiLnN0YXRlTm9kZSk7ZWxzZSBpZig0PT09Yi50YWc/ZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOmgoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGRbXCJyZXR1cm5cIl09YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl07ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXZhciBsPWEuZ2V0UHVibGljSW5zdGFuY2UscD1hLm11dGF0aW9uO2E9YS5wZXJzaXN0ZW5jZTtwfHwoYT9EKFwiMjM1XCIpOkQoXCIyMzZcIikpO3ZhciB6PXAuY29tbWl0TW91bnQsQj1wLmNvbW1pdFVwZGF0ZSxyPXAucmVzZXRUZXh0Q29udGVudCxRPXAuY29tbWl0VGV4dFVwZGF0ZSxuPXAuYXBwZW5kQ2hpbGQsXG54PXAuYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcixZPXAuaW5zZXJ0QmVmb3JlLEc9cC5pbnNlcnRJbkNvbnRhaW5lckJlZm9yZSxSPXAucmVtb3ZlQ2hpbGQsUz1wLnJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjtyZXR1cm57Y29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6aWYoYi5lZmZlY3RUYWcmMjA0OCYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2EucHJvcHM9Yi5tZW1vaXplZFByb3BzO2Euc3RhdGU9Yi5tZW1vaXplZFN0YXRlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShjLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1icmVhaztjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0UmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXtyKGEuc3RhdGVOb2RlKX0sXG5jb21taXRQbGFjZW1lbnQ6ZnVuY3Rpb24oYSl7YTp7Zm9yKHZhciBiPWFbXCJyZXR1cm5cIl07bnVsbCE9PWI7KXtpZihrKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iW1wicmV0dXJuXCJdfUQoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgMzpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDpEKFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYocihiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Y1tcInJldHVyblwiXXx8ayhjW1wicmV0dXJuXCJdKSl7Yz1udWxsO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWMuc2libGluZ1tcInJldHVyblwiXT1jW1wicmV0dXJuXCJdO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1cbmMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO2lmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGRbXCJyZXR1cm5cIl09YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZyljP2Q/RyhiLGUuc3RhdGVOb2RlLGMpOlkoYixlLnN0YXRlTm9kZSxjKTpkP3goYixlLnN0YXRlTm9kZSk6bihiLGUuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGRbXCJyZXR1cm5cIl09ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWVbXCJyZXR1cm5cIl18fGVbXCJyZXR1cm5cIl09PT1hKXJldHVybjtlPWVbXCJyZXR1cm5cIl19ZS5zaWJsaW5nW1wicmV0dXJuXCJdPWVbXCJyZXR1cm5cIl07ZT1lLnNpYmxpbmd9fSxjb21taXREZWxldGlvbjpmdW5jdGlvbihhKXt2KGEpO1xuYVtcInJldHVyblwiXT1udWxsO2EuY2hpbGQ9bnVsbDthLmFsdGVybmF0ZSYmKGEuYWx0ZXJuYXRlLmNoaWxkPW51bGwsYS5hbHRlcm5hdGVbXCJyZXR1cm5cIl09bnVsbCl9LGNvbW1pdFdvcms6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2E9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7dmFyIGU9Yi50eXBlLGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7bnVsbCE9PWYmJkIoYyxmLGUsYSxkLGIpfWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2MlwiKTp2b2lkIDA7Yz1iLm1lbW9pemVkUHJvcHM7UShiLnN0YXRlTm9kZSxudWxsIT09YT9hLm1lbW9pemVkUHJvcHM6YyxjKTticmVhaztjYXNlIDM6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0TGlmZUN5Y2xlczpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDI6YT1cbmMuc3RhdGVOb2RlO2lmKGMuZWZmZWN0VGFnJjQpaWYobnVsbD09PWIpYS5wcm9wcz1jLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2I9Yi5tZW1vaXplZFN0YXRlO2EucHJvcHM9Yy5tZW1vaXplZFByb3BzO2Euc3RhdGU9Yy5tZW1vaXplZFN0YXRlO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYixhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1jPWMudXBkYXRlUXVldWU7bnVsbCE9PWMmJlNlKGMsYSk7YnJlYWs7Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9bChjLmNoaWxkLnN0YXRlTm9kZSk7YnJlYWs7Y2FzZSAyOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9U2UoYixhKX1icmVhaztjYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5lZmZlY3RUYWcmXG40JiZ6KGEsYy50eXBlLGMubWVtb2l6ZWRQcm9wcyxjKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdEVycm9yTG9nZ2luZzpmdW5jdGlvbihhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOnZhciBjPWEudHlwZTtiPWEuc3RhdGVOb2RlO3ZhciBkPWEudXBkYXRlUXVldWU7bnVsbD09PWR8fG51bGw9PT1kLmNhcHR1cmVkVmFsdWVzP0QoXCIyNjRcIik6dm9pZCAwO3ZhciBmPWQuY2FwdHVyZWRWYWx1ZXM7ZC5jYXB0dXJlZFZhbHVlcz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCYmZShiKTtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcztiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmb3IoYz0wO2M8Zi5sZW5ndGg7YysrKXtkPWZbY107dmFyIGw9ZC52YWx1ZSxnPWQuc3RhY2s7Y2YoYSxkKTtiLmNvbXBvbmVudERpZENhdGNoKGwse2NvbXBvbmVudFN0YWNrOm51bGwhPT1nP2c6XCJcIn0pfWJyZWFrO1xuY2FzZSAzOmM9YS51cGRhdGVRdWV1ZTtudWxsPT09Y3x8bnVsbD09PWMuY2FwdHVyZWRWYWx1ZXM/RChcIjI2NFwiKTp2b2lkIDA7Zj1jLmNhcHR1cmVkVmFsdWVzO2MuY2FwdHVyZWRWYWx1ZXM9bnVsbDtmb3IoYz0wO2M8Zi5sZW5ndGg7YysrKWQ9ZltjXSxjZihhLGQpLGIoZC52YWx1ZSk7YnJlYWs7ZGVmYXVsdDpEKFwiMjY1XCIpfX0sY29tbWl0QXR0YWNoUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWwoYyk7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19LGNvbW1pdERldGFjaFJlZjpmdW5jdGlvbihhKXthPWEucmVmO251bGwhPT1hJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YShudWxsKTphLmN1cnJlbnQ9bnVsbCl9fX12YXIgZWY9e307XG5mdW5jdGlvbiBmZihhLGIpe2Z1bmN0aW9uIGMoYSl7YT09PWVmP0QoXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfXZhciBkPWEuZ2V0Q2hpbGRIb3N0Q29udGV4dCxlPWEuZ2V0Um9vdEhvc3RDb250ZXh0O2E9Yi5jcmVhdGVDdXJzb3I7dmFyIGY9Yi5wdXNoLGg9Yi5wb3AsZz1hKGVmKSxrPWEoZWYpLHY9YShlZik7cmV0dXJue2dldEhvc3RDb250ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGMoZy5jdXJyZW50KX0sZ2V0Um9vdEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtyZXR1cm4gYyh2LmN1cnJlbnQpfSxwb3BIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEpe2goZyxhKTtoKGssYSk7aCh2LGEpfSxwb3BIb3N0Q29udGV4dDpmdW5jdGlvbihhKXtrLmN1cnJlbnQ9PT1hJiYoaChnLGEpLGgoayxhKSl9LHB1c2hIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEsYil7Zih2LGIsYSk7ZihrLGEsYSk7ZihnLGVmLGEpO2I9ZShiKTtoKGcsYSk7ZihnLGIsYSl9LHB1c2hIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1cbmModi5jdXJyZW50KSxlPWMoZy5jdXJyZW50KTtiPWQoZSxhLnR5cGUsYik7ZSE9PWImJihmKGssYSxhKSxmKGcsYixhKSl9fX1cbmZ1bmN0aW9uIGdmKGEpe2Z1bmN0aW9uIGIoYSxiKXt2YXIgYz1uZXcgeGUoNSxudWxsLG51bGwsMCk7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Y1tcInJldHVyblwiXT1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBjKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIGI9ZihiLGEudHlwZSxhLnBlbmRpbmdQcm9wcyksbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1oKGIsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBkKGEpe2ZvcihhPWFbXCJyZXR1cm5cIl07bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnOylhPWFbXCJyZXR1cm5cIl07cD1hfXZhciBlPWEuc2hvdWxkU2V0VGV4dENvbnRlbnQ7XG5hPWEuaHlkcmF0aW9uO2lmKCFhKXJldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9LHJlc2V0SHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXt9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NVwiKX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXtEKFwiMTc2XCIpfSxwb3BIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfX07dmFyIGY9YS5jYW5IeWRyYXRlSW5zdGFuY2UsaD1hLmNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UsZz1hLmdldE5leHRIeWRyYXRhYmxlU2libGluZyxrPWEuZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQsdj1hLmh5ZHJhdGVJbnN0YW5jZSxsPWEuaHlkcmF0ZVRleHRJbnN0YW5jZSxwPW51bGwsej1udWxsLEI9ITE7cmV0dXJue2VudGVySHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7ej1cbmsoYS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cD1hO3JldHVybiBCPSEwfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7ej1wPW51bGw7Qj0hMX0sdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oYSl7aWYoQil7dmFyIGQ9ejtpZihkKXtpZighYyhhLGQpKXtkPWcoZCk7aWYoIWR8fCFjKGEsZCkpe2EuZWZmZWN0VGFnfD0yO0I9ITE7cD1hO3JldHVybn1iKHAseil9cD1hO3o9ayhkKX1lbHNlIGEuZWZmZWN0VGFnfD0yLEI9ITEscD1hfX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7Yj12KGEuc3RhdGVOb2RlLGEudHlwZSxhLm1lbW9pemVkUHJvcHMsYixjLGEpO2EudXBkYXRlUXVldWU9YjtyZXR1cm4gbnVsbCE9PWI/ITA6ITF9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBsKGEuc3RhdGVOb2RlLGEubWVtb2l6ZWRQcm9wcyxhKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7aWYoYSE9PVxucClyZXR1cm4hMTtpZighQilyZXR1cm4gZChhKSxCPSEwLCExO3ZhciBjPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YyYmXCJib2R5XCIhPT1jJiYhZShjLGEubWVtb2l6ZWRQcm9wcykpZm9yKGM9ejtjOyliKGEsYyksYz1nKGMpO2QoYSk7ej1wP2coYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9fX1cbmZ1bmN0aW9uIGhmKGEpe2Z1bmN0aW9uIGIoYSxiLGMpe2E9YS5zdGF0ZU5vZGU7YS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWI7YS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1jfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzfWZ1bmN0aW9uIGQoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZSxkPWEudHlwZS5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGI7Yz1jLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBjKWUgaW4gZD92b2lkIDA6RChcIjEwOFwiLEFjKGEpfHxcIlVua25vd25cIixlKTtyZXR1cm4gQSh7fSxiLGMpfXZhciBlPWEuY3JlYXRlQ3Vyc29yLGY9YS5wdXNoLGg9YS5wb3AsZz1lKGthKSxrPWUoITEpLHY9a2E7cmV0dXJue2dldFVubWFza2VkQ29udGV4dDpmdW5jdGlvbihhKXtyZXR1cm4gYyhhKT9cbnY6Zy5jdXJyZW50fSxjYWNoZUNvbnRleHQ6YixnZXRNYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEsYyl7dmFyIGQ9YS50eXBlLmNvbnRleHRUeXBlcztpZighZClyZXR1cm4ga2E7dmFyIGU9YS5zdGF0ZU5vZGU7aWYoZSYmZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YylyZXR1cm4gZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZj17fSxnO2ZvcihnIGluIGQpZltnXT1jW2ddO2UmJmIoYSxjLGYpO3JldHVybiBmfSxoYXNDb250ZXh0Q2hhbmdlZDpmdW5jdGlvbigpe3JldHVybiBrLmN1cnJlbnR9LGlzQ29udGV4dENvbnN1bWVyOmZ1bmN0aW9uKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jb250ZXh0VHlwZXN9LGlzQ29udGV4dFByb3ZpZGVyOmMscG9wQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEpe2MoYSkmJihoKGssYSksaChnLGEpKX0scG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0OmZ1bmN0aW9uKGEpe2goayxcbmEpO2goZyxhKX0scHVzaFRvcExldmVsQ29udGV4dE9iamVjdDpmdW5jdGlvbihhLGIsYyl7bnVsbCE9Zy5jdXJzb3I/RChcIjE2OFwiKTp2b2lkIDA7ZihnLGIsYSk7ZihrLGMsYSl9LHByb2Nlc3NDaGlsZENvbnRleHQ6ZCxwdXNoQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEpe2lmKCFjKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8a2E7dj1nLmN1cnJlbnQ7ZihnLGIsYSk7ZihrLGsuY3VycmVudCxhKTtyZXR1cm4hMH0saW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOkQoXCIxNjlcIik7aWYoYil7dmFyIGU9ZChhLHYpO2MuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9ZTtoKGssYSk7aChnLGEpO2YoZyxlLGEpfWVsc2UgaChrLGEpO2YoayxiLGEpfSxmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dDpmdW5jdGlvbihhKXtmb3IoMiE9PVxueGQoYSl8fDIhPT1hLnRhZz9EKFwiMTcwXCIpOnZvaWQgMDszIT09YS50YWc7KXtpZihjKGEpKXJldHVybiBhLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDsoYT1hW1wicmV0dXJuXCJdKT92b2lkIDA6RChcIjE3MVwiKX1yZXR1cm4gYS5zdGF0ZU5vZGUuY29udGV4dH19fVxuZnVuY3Rpb24gamYoYSl7dmFyIGI9YS5jcmVhdGVDdXJzb3IsYz1hLnB1c2gsZD1hLnBvcCxlPWIobnVsbCksZj1iKG51bGwpLGg9YigwKTtyZXR1cm57cHVzaFByb3ZpZGVyOmZ1bmN0aW9uKGEpe3ZhciBiPWEudHlwZS5fY29udGV4dDtjKGgsYi5fY2hhbmdlZEJpdHMsYSk7YyhmLGIuX2N1cnJlbnRWYWx1ZSxhKTtjKGUsYSxhKTtiLl9jdXJyZW50VmFsdWU9YS5wZW5kaW5nUHJvcHMudmFsdWU7Yi5fY2hhbmdlZEJpdHM9YS5zdGF0ZU5vZGV9LHBvcFByb3ZpZGVyOmZ1bmN0aW9uKGEpe3ZhciBiPWguY3VycmVudCxjPWYuY3VycmVudDtkKGUsYSk7ZChmLGEpO2QoaCxhKTthPWEudHlwZS5fY29udGV4dDthLl9jdXJyZW50VmFsdWU9YzthLl9jaGFuZ2VkQml0cz1ifX19XG5mdW5jdGlvbiBrZigpe3ZhciBhPVtdLGI9LTE7cmV0dXJue2NyZWF0ZUN1cnNvcjpmdW5jdGlvbihhKXtyZXR1cm57Y3VycmVudDphfX0saXNFbXB0eTpmdW5jdGlvbigpe3JldHVybi0xPT09Yn0scG9wOmZ1bmN0aW9uKGMpezA+Ynx8KGMuY3VycmVudD1hW2JdLGFbYl09bnVsbCxiLS0pfSxwdXNoOmZ1bmN0aW9uKGMsZCl7YisrO2FbYl09Yy5jdXJyZW50O2MuY3VycmVudD1kfSxjaGVja1RoYXRTdGFja0lzRW1wdHk6ZnVuY3Rpb24oKXt9LHJlc2V0U3RhY2tBZnRlckZhdGFsRXJyb3JJbkRldjpmdW5jdGlvbigpe319fVxuZnVuY3Rpb24gbGYoYSl7ZnVuY3Rpb24gYigpe2lmKG51bGwhPT1JKWZvcih2YXIgYT1JW1wicmV0dXJuXCJdO251bGwhPT1hOylMYyhhKSxhPWFbXCJyZXR1cm5cIl07WWE9bnVsbDtaPTA7ST1udWxsO05jPSExfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIG51bGwhPT15YSYmeWEuaGFzKGEpfWZ1bmN0aW9uIGQoYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWFbXCJyZXR1cm5cIl0sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyY1MTIpKXtiPUNiKGIsYSxaKTt2YXIgZT1hO2lmKDEwNzM3NDE4MjM9PT1afHwxMDczNzQxODIzIT09ZS5leHBpcmF0aW9uVGltZSl7Yjpzd2l0Y2goZS50YWcpe2Nhc2UgMzpjYXNlIDI6dmFyIGY9ZS51cGRhdGVRdWV1ZTtmPW51bGw9PT1mPzA6Zi5leHBpcmF0aW9uVGltZTticmVhayBiO2RlZmF1bHQ6Zj0wfWZvcih2YXIgZz1lLmNoaWxkO251bGwhPT1nOykwIT09Zy5leHBpcmF0aW9uVGltZSYmKDA9PT1mfHxmPmcuZXhwaXJhdGlvblRpbWUpJiYoZj1cbmcuZXhwaXJhdGlvblRpbWUpLGc9Zy5zaWJsaW5nO2UuZXhwaXJhdGlvblRpbWU9Zn1pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyY1MTIpJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZXtOYz0hMDticmVha319ZWxzZXthPUtjKGEpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9MjU1OSxhO251bGwhPT1jJiYoYy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9XG5udWxsLGMuZWZmZWN0VGFnfD01MTIpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBlKGEpe3ZhciBiPVdhKGEuYWx0ZXJuYXRlLGEsWik7bnVsbD09PWImJihiPWQoYSkpO25jLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1mdW5jdGlvbiBmKGEsYyxmKXtjYT9EKFwiMjQzXCIpOnZvaWQgMDtjYT0hMDtpZihjIT09Wnx8YSE9PVlhfHxudWxsPT09SSliKCksWWE9YSxaPWMsST16ZShZYS5jdXJyZW50LG51bGwsWiksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZz0hMTtkb3t0cnl7aWYoZilmb3IoO251bGwhPT1JJiYhUygpOylJPWUoSSk7ZWxzZSBmb3IoO251bGwhPT1JOylJPWUoSSl9Y2F0Y2goT2Mpe2lmKG51bGw9PT1JKXtnPSEwO3EoT2MpO2JyZWFrfWY9STt2YXIgaD1mW1wicmV0dXJuXCJdO2lmKG51bGw9PT1oKXtnPSEwO3EoT2MpO2JyZWFrfUpjKGgsZixPYyk7ST1kKGYpfWJyZWFrfXdoaWxlKDEpO1xuY2E9ITE7aWYoZ3x8bnVsbCE9PUkpcmV0dXJuIG51bGw7aWYoTmMpcmV0dXJuIGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWMsYS5jdXJyZW50LmFsdGVybmF0ZTtEKFwiMjYyXCIpfWZ1bmN0aW9uIGgoYSxiLGMsZCl7YT17dmFsdWU6Yyxzb3VyY2U6YSxzdGFjazpCYyhhKX07UGUoYix7ZXhwaXJhdGlvblRpbWU6ZCxwYXJ0aWFsU3RhdGU6bnVsbCxjYWxsYmFjazpudWxsLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxjYXB0dXJlZFZhbHVlOmEsbmV4dDpudWxsfSk7dihiLGQpfWZ1bmN0aW9uIGcoYSxiKXthOntjYSYmIVphP0QoXCIyNjNcIik6dm9pZCAwO2Zvcih2YXIgZD1hW1wicmV0dXJuXCJdO251bGwhPT1kOyl7c3dpdGNoKGQudGFnKXtjYXNlIDI6dmFyIGU9ZC5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2h8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZENhdGNoJiYhYyhlKSl7aChhLGQsYixcbjEpO2E9dm9pZCAwO2JyZWFrIGF9YnJlYWs7Y2FzZSAzOmgoYSxkLGIsMSk7YT12b2lkIDA7YnJlYWsgYX1kPWRbXCJyZXR1cm5cIl19Mz09PWEudGFnJiZoKGEsYSxiLDEpO2E9dm9pZCAwfXJldHVybiBhfWZ1bmN0aW9uIGsoYSl7YT0wIT09aWE/aWE6Y2E/WmE/MTpaOmEubW9kZSYxP3phPzEwKigoKGwoKSsxNSkvMTB8MCkrMSk6MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk6MTt6YSYmKDA9PT1kYXx8YT5kYSkmJihkYT1hKTtyZXR1cm4gYX1mdW5jdGlvbiB2KGEsYyl7YTp7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmMpYS5leHBpcmF0aW9uVGltZT1jO251bGwhPT1hLmFsdGVybmF0ZSYmKDA9PT1hLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZXx8YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU+YykmJihhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT1jKTtpZihudWxsPT09YVtcInJldHVyblwiXSlpZigzPT09YS50YWcpe3ZhciBkPVxuYS5zdGF0ZU5vZGU7IWNhJiYwIT09WiYmYzxaJiZiKCk7Y2EmJiFaYSYmWWE9PT1kfHxCKGQsYyk7RmI+eGcmJkQoXCIxODVcIil9ZWxzZXtjPXZvaWQgMDticmVhayBhfWE9YVtcInJldHVyblwiXX1jPXZvaWQgMH1yZXR1cm4gY31mdW5jdGlvbiBsKCl7eWU9SWMoKS1QYztyZXR1cm4geWc9KHllLzEwfDApKzJ9ZnVuY3Rpb24gcChhLGIsYyxkLGUpe3ZhciBmPWlhO2lhPTE7dHJ5e3JldHVybiBhKGIsYyxkLGUpfWZpbmFsbHl7aWE9Zn19ZnVuY3Rpb24geihhKXtpZigwIT09R2Ipe2lmKGE+R2IpcmV0dXJuO21nKFFjKX12YXIgYj1JYygpLVBjO0diPWE7UWM9bGcoUSx7dGltZW91dDoxMCooYS0yKS1ifSl9ZnVuY3Rpb24gQihhLGIpe2lmKG51bGw9PT1hLm5leHRTY2hlZHVsZWRSb290KWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YixudWxsPT09Sz8obGE9Sz1hLGEubmV4dFNjaGVkdWxlZFJvb3Q9YSk6KEs9Sy5uZXh0U2NoZWR1bGVkUm9vdD1hLEsubmV4dFNjaGVkdWxlZFJvb3Q9bGEpO1xuZWxzZXt2YXIgYz1hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1jfHxiPGMpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifVR8fChKP0hiJiYoYWE9YSxQPTEsRyhhLDEsITEpKToxPT09Yj9uKCk6eihiKSl9ZnVuY3Rpb24gcigpe3ZhciBhPTAsYj1udWxsO2lmKG51bGwhPT1LKWZvcih2YXIgYz1LLGQ9bGE7bnVsbCE9PWQ7KXt2YXIgZT1kLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1lKXtudWxsPT09Y3x8bnVsbD09PUs/RChcIjI0NFwiKTp2b2lkIDA7aWYoZD09PWQubmV4dFNjaGVkdWxlZFJvb3Qpe2xhPUs9ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgaWYoZD09PWxhKWxhPWU9ZC5uZXh0U2NoZWR1bGVkUm9vdCxLLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PUspe0s9YztLLm5leHRTY2hlZHVsZWRSb290PWxhO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9XG5kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtpZigwPT09YXx8ZTxhKWE9ZSxiPWQ7aWYoZD09PUspYnJlYWs7Yz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19Yz1hYTtudWxsIT09YyYmYz09PWImJjE9PT1hP0ZiKys6RmI9MDthYT1iO1A9YX1mdW5jdGlvbiBRKGEpe3goMCwhMCxhKX1mdW5jdGlvbiBuKCl7eCgxLCExLG51bGwpfWZ1bmN0aW9uIHgoYSxiLGMpeyRhPWM7cigpO2lmKGIpZm9yKDtudWxsIT09YWEmJjAhPT1QJiYoMD09PWF8fGE+PVApJiYoIUlifHxsKCk+PVApOylHKGFhLFAsIUliKSxyKCk7ZWxzZSBmb3IoO251bGwhPT1hYSYmMCE9PVAmJigwPT09YXx8YT49UCk7KUcoYWEsUCwhMSkscigpO251bGwhPT0kYSYmKEdiPTAsUWM9LTEpOzAhPT1QJiZ6KFApOyRhPW51bGw7SWI9ITE7WSgpfWZ1bmN0aW9uIFkoKXtGYj0wO2lmKG51bGwhPT1BYSl7dmFyIGE9QWE7QWE9bnVsbDtmb3IodmFyIGI9XG4wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2god2cpe0JhfHwoQmE9ITAsSmI9d2cpfX19aWYoQmEpdGhyb3cgYT1KYixKYj1udWxsLEJhPSExLGE7fWZ1bmN0aW9uIEcoYSxiLGMpe1Q/RChcIjI0NVwiKTp2b2lkIDA7VD0hMDtjPyhjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1IoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9ZihhLGIsITApLG51bGwhPT1jJiYoUygpP2EuZmluaXNoZWRXb3JrPWM6UihhLGMsYikpKSk6KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/UihhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz1mKGEsYiwhMSksbnVsbCE9PWMmJlIoYSxjLGIpKSk7VD0hMX1mdW5jdGlvbiBSKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1jJiYobnVsbD09PUFhP0FhPVtkXTpBYS5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPVxuMDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDtaYT1jYT0hMDtjPWIuc3RhdGVOb2RlO2MuY3VycmVudD09PWI/RChcIjE3N1wiKTp2b2lkIDA7ZD1jLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09ZD9EKFwiMjYxXCIpOnZvaWQgMDtjLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBlPWwoKTtuYy5jdXJyZW50PW51bGw7aWYoMTxiLmVmZmVjdFRhZylpZihudWxsIT09Yi5sYXN0RWZmZWN0KXtiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iO3ZhciBmPWIuZmlyc3RFZmZlY3R9ZWxzZSBmPWI7ZWxzZSBmPWIuZmlyc3RFZmZlY3Q7emcoYy5jb250YWluZXJJbmZvKTtmb3Iodz1mO251bGwhPT13Oyl7dmFyIGg9ITEsaz12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXc7KXcuZWZmZWN0VGFnJjIwNDgmJkRiKHcuYWx0ZXJuYXRlLHcpLHc9dy5uZXh0RWZmZWN0fWNhdGNoKGFiKXtoPSEwLGs9YWJ9aCYmKG51bGw9PT13P0QoXCIxNzhcIik6dm9pZCAwLGcodyxrKSxudWxsIT09XG53JiYodz13Lm5leHRFZmZlY3QpKX1mb3Iodz1mO251bGwhPT13Oyl7aD0hMTtrPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dzspe3ZhciBwPXcuZWZmZWN0VGFnO3AmMTYmJk1jKHcpO2lmKHAmMTI4KXt2YXIgbj13LmFsdGVybmF0ZTtudWxsIT09biYma2cobil9c3dpdGNoKHAmMTQpe2Nhc2UgMjpFYih3KTt3LmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OkViKHcpO3cuZWZmZWN0VGFnJj0tMzt3ZSh3LmFsdGVybmF0ZSx3KTticmVhaztjYXNlIDQ6d2Uody5hbHRlcm5hdGUsdyk7YnJlYWs7Y2FzZSA4OmdnKHcpfXc9dy5uZXh0RWZmZWN0fX1jYXRjaChhYil7aD0hMCxrPWFifWgmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsayksbnVsbCE9PXcmJih3PXcubmV4dEVmZmVjdCkpfUFnKGMuY29udGFpbmVySW5mbyk7Yy5jdXJyZW50PWI7Zm9yKHc9ZjtudWxsIT09dzspe3A9ITE7bj12b2lkIDA7dHJ5e2ZvcihmPWMsaD1lLGs9ZDtudWxsIT09dzspe3ZhciByPXcuZWZmZWN0VGFnO1xuciYzNiYmaGcoZix3LmFsdGVybmF0ZSx3LGgsayk7ciYyNTYmJmlnKHcscSk7ciYxMjgmJmpnKHcpO3ZhciB0PXcubmV4dEVmZmVjdDt3Lm5leHRFZmZlY3Q9bnVsbDt3PXR9fWNhdGNoKGFiKXtwPSEwLG49YWJ9cCYmKG51bGw9PT13P0QoXCIxNzhcIik6dm9pZCAwLGcodyxuKSxudWxsIT09dyYmKHc9dy5uZXh0RWZmZWN0KSl9Y2E9WmE9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIEllJiZJZShiLnN0YXRlTm9kZSk7Yj1jLmN1cnJlbnQuZXhwaXJhdGlvblRpbWU7MD09PWImJih5YT1udWxsKTthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9ZnVuY3Rpb24gUygpe3JldHVybiBudWxsPT09JGF8fCRhLnRpbWVSZW1haW5pbmcoKT5CZz8hMTpJYj0hMH1mdW5jdGlvbiBxKGEpe251bGw9PT1hYT9EKFwiMjQ2XCIpOnZvaWQgMDthYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO0JhfHwoQmE9ITAsSmI9YSl9dmFyIHU9a2YoKSx0PWZmKGEsdSkseT1oZih1KTt1PWpmKHUpO3ZhciBIPWdmKGEpLFxuV2E9JGUoYSx0LHksdSxILHYsaykuYmVnaW5Xb3JrLENiPWFmKGEsdCx5LHUsSCkuY29tcGxldGVXb3JrO3Q9YmYodCx5LHUsdixjKTt2YXIgSmM9dC50aHJvd0V4Y2VwdGlvbixLYz10LnVud2luZFdvcmssTGM9dC51bndpbmRJbnRlcnJ1cHRlZFdvcms7dD1kZihhLGcsdixrLGZ1bmN0aW9uKGEpe251bGw9PT15YT95YT1uZXcgU2V0KFthXSk6eWEuYWRkKGEpfSxsKTt2YXIgRGI9dC5jb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXMsTWM9dC5jb21taXRSZXNldFRleHRDb250ZW50LEViPXQuY29tbWl0UGxhY2VtZW50LGdnPXQuY29tbWl0RGVsZXRpb24sd2U9dC5jb21taXRXb3JrLGhnPXQuY29tbWl0TGlmZUN5Y2xlcyxpZz10LmNvbW1pdEVycm9yTG9nZ2luZyxqZz10LmNvbW1pdEF0dGFjaFJlZixrZz10LmNvbW1pdERldGFjaFJlZixJYz1hLm5vdyxsZz1hLnNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayxtZz1hLmNhbmNlbERlZmVycmVkQ2FsbGJhY2ssemc9YS5wcmVwYXJlRm9yQ29tbWl0LFxuQWc9YS5yZXNldEFmdGVyQ29tbWl0LFBjPUljKCkseWc9Mix5ZT1QYyxSYz0wLGlhPTAsY2E9ITEsST1udWxsLFlhPW51bGwsWj0wLHc9bnVsbCxaYT0hMSxOYz0hMSx5YT1udWxsLGxhPW51bGwsSz1udWxsLEdiPTAsUWM9LTEsVD0hMSxhYT1udWxsLFA9MCxkYT0wLEliPSExLEJhPSExLEpiPW51bGwsJGE9bnVsbCxKPSExLEhiPSExLHphPSExLEFhPW51bGwseGc9MUUzLEZiPTAsQmc9MTtyZXR1cm57cmVjYWxjdWxhdGVDdXJyZW50VGltZTpsLGNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXI6ayxzY2hlZHVsZVdvcms6dixyZXF1ZXN0V29yazpCLGZsdXNoUm9vdDpmdW5jdGlvbihhLGIpe1Q/RChcIjI1M1wiKTp2b2lkIDA7YWE9YTtQPWI7RyhhLGIsITEpO24oKTtZKCl9LGJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEsYil7dmFyIGM9SjtKPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhKPWMpfHxUfHxuKCl9fSx1bmJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEsYil7aWYoSiYmIUhiKXtIYj1cbiEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0hiPSExfX1yZXR1cm4gYShiKX0sZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7VD9EKFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1KO0o9ITA7dHJ5e3JldHVybiBwKGEsYil9ZmluYWxseXtKPWMsbigpfX0sZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPUo7Sj0hMDt0cnl7cChhKX1maW5hbGx5eyhKPWIpfHxUfHx4KDEsITEsbnVsbCl9fSxkZWZlcnJlZFVwZGF0ZXM6ZnVuY3Rpb24oYSl7dmFyIGI9aWE7aWE9MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtpYT1ifX0sc3luY1VwZGF0ZXM6cCxpbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oYSxiLGMpe2lmKHphKXJldHVybiBhKGIsYyk7Snx8VHx8MD09PWRhfHwoeChkYSwhMSxudWxsKSxkYT0wKTt2YXIgZD16YSxlPUo7Sj16YT0hMDt0cnl7cmV0dXJuIGEoYixjKX1maW5hbGx5e3phPWQsKEo9ZSl8fFR8fG4oKX19LGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKCl7VHx8XG4wPT09ZGF8fCh4KGRhLCExLG51bGwpLGRhPTApfSxjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk7YTw9UmMmJihhPVJjKzEpO3JldHVybiBSYz1hfSxsZWdhY3lDb250ZXh0Onl9fVxuZnVuY3Rpb24gbWYoYSl7ZnVuY3Rpb24gYihhLGIsYyxkLGUsaCl7ZD1iLmN1cnJlbnQ7aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGw9ZyhjKTtjPWsoYyk/dihjLGwpOmx9ZWxzZSBjPWthO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9aDtQZShkLHtleHBpcmF0aW9uVGltZTplLHBhcnRpYWxTdGF0ZTp7ZWxlbWVudDphfSxjYWxsYmFjazp2b2lkIDA9PT1iP251bGw6Yixpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2YoZCxlKTtyZXR1cm4gZX12YXIgYz1hLmdldFB1YmxpY0luc3RhbmNlO2E9bGYoYSk7dmFyIGQ9YS5yZWNhbGN1bGF0ZUN1cnJlbnRUaW1lLGU9YS5jb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyLGY9YS5zY2hlZHVsZVdvcmssaD1hLmxlZ2FjeUNvbnRleHQsZz1oLmZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0LGs9aC5pc0NvbnRleHRQcm92aWRlcix2PVxuaC5wcm9jZXNzQ2hpbGRDb250ZXh0O3JldHVybntjcmVhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxiLGMpe2I9bmV3IHhlKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxyZW1haW5pbmdFeHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTtyZXR1cm4gYi5zdGF0ZU5vZGU9YX0sdXBkYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYyxmLGgpe3ZhciBnPWMuY3VycmVudCxrPWQoKTtnPWUoZyk7cmV0dXJuIGIoYSxjLGYsayxnLGgpfSx1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lOmZ1bmN0aW9uKGEsYyxlLGYsZyl7dmFyIGg9ZCgpO3JldHVybiBiKGEsYyxlLGgsZixnKX0sZmx1c2hSb290OmEuZmx1c2hSb290LFxucmVxdWVzdFdvcms6YS5yZXF1ZXN0V29yayxjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uOmEuY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbixiYXRjaGVkVXBkYXRlczphLmJhdGNoZWRVcGRhdGVzLHVuYmF0Y2hlZFVwZGF0ZXM6YS51bmJhdGNoZWRVcGRhdGVzLGRlZmVycmVkVXBkYXRlczphLmRlZmVycmVkVXBkYXRlcyxzeW5jVXBkYXRlczphLnN5bmNVcGRhdGVzLGludGVyYWN0aXZlVXBkYXRlczphLmludGVyYWN0aXZlVXBkYXRlcyxmbHVzaEludGVyYWN0aXZlVXBkYXRlczphLmZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzLGZsdXNoQ29udHJvbGxlZDphLmZsdXNoQ29udHJvbGxlZCxmbHVzaFN5bmM6YS5mbHVzaFN5bmMsZ2V0UHVibGljUm9vdEluc3RhbmNlOmZ1bmN0aW9uKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBjKGEuY2hpbGQuc3RhdGVOb2RlKTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19LFxuZmluZEhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj9EKFwiMTg4XCIpOkQoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9QmQoYik7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9Q2QoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGluamVjdEludG9EZXZUb29sczpmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBIZShBKHt9LGEse2ZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9QmQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9fX1cbnZhciBuZj1PYmplY3QuZnJlZXplKHtkZWZhdWx0Om1mfSksb2Y9bmYmJm1mfHxuZixwZj1vZltcImRlZmF1bHRcIl0/b2ZbXCJkZWZhdWx0XCJdOm9mO2Z1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6cmMsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319dmFyIHJmPVwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3csc2Y9dm9pZCAwO3NmPXJmP2Z1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTt2YXIgdGY9dm9pZCAwLHVmPXZvaWQgMDtcbmlmKG0uY2FuVXNlRE9NKWlmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgY2FuY2VsSWRsZUNhbGxiYWNrKXt2YXIgdmY9bnVsbCx3Zj0hMSx4Zj0tMSx5Zj0hMSx6Zj0wLEFmPTMzLEJmPTMzLENmPXZvaWQgMDtDZj1yZj97ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9emYtcGVyZm9ybWFuY2Uubm93KCk7cmV0dXJuIDA8YT9hOjB9fTp7ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9emYtRGF0ZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19O3ZhciBEZj1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT13aW5kb3cmJmEuZGF0YT09PURmKXt3Zj0hMTthPXNmKCk7aWYoMD49emYtYSlpZigtMSE9PVxueGYmJnhmPD1hKUNmLmRpZFRpbWVvdXQ9ITA7ZWxzZXt5Znx8KHlmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShFZikpO3JldHVybn1lbHNlIENmLmRpZFRpbWVvdXQ9ITE7eGY9LTE7YT12Zjt2Zj1udWxsO251bGwhPT1hJiZhKENmKX19LCExKTt2YXIgRWY9ZnVuY3Rpb24oYSl7eWY9ITE7dmFyIGI9YS16ZitCZjtiPEJmJiZBZjxCZj8oOD5iJiYoYj04KSxCZj1iPEFmP0FmOmIpOkFmPWI7emY9YStCZjt3Znx8KHdmPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShEZixcIipcIikpfTt0Zj1mdW5jdGlvbihhLGIpe3ZmPWE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJih4Zj1zZigpK2IudGltZW91dCk7eWZ8fCh5Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRWYpKTtyZXR1cm4gMH07dWY9ZnVuY3Rpb24oKXt2Zj1udWxsO3dmPSExO3hmPS0xfX1lbHNlIHRmPXdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrLHVmPXdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2s7ZWxzZSB0Zj1cbmZ1bmN0aW9uKGEpe3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX0sZGlkVGltZW91dDohMX0pfSl9LHVmPWZ1bmN0aW9uKGEpe2NsZWFyVGltZW91dChhKX07ZnVuY3Rpb24gRmYoYSl7dmFyIGI9XCJcIjtlYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEdmKGEsYil7YT1BKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RmYoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gSGYoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIElmKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiBKZihhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP0QoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDpEKFwiOTNcIiksYj1iWzBdKSxjPVwiXCIrYiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlwiXCIrY319XG5mdW5jdGlvbiBMZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWIuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBNZihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgTmY9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gT2YoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBQZihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/T2YoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUWY9dm9pZCAwLFJmPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU5mLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1FmPVFmfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1FmLmlubmVySFRNTD1cIlxceDNjc3ZnXFx4M2VcIitiK1wiXFx4M2Mvc3ZnXFx4M2VcIjtmb3IoYj1RZi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBTZihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIFRmPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsXG5zdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LFVmPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhUZikuZm9yRWFjaChmdW5jdGlvbihhKXtVZi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO1RmW2JdPVRmW2FdfSl9KTtcbmZ1bmN0aW9uIFZmKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fFRmLmhhc093blByb3BlcnR5KGUpJiZUZltlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBXZj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gWGYoYSxiLGMpe2ImJihXZlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0QoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6RChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/RChcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gWWYoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBaZj1DLnRoYXRSZXR1cm5zKFwiXCIpO1xuZnVuY3Rpb24gJGYoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9a2UoYSk7Yj12YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtjLmhhc093blByb3BlcnR5KGUpJiZjW2VdfHwoXCJ0b3BTY3JvbGxcIj09PWU/WmQoXCJ0b3BTY3JvbGxcIixcInNjcm9sbFwiLGEpOlwidG9wRm9jdXNcIj09PWV8fFwidG9wQmx1clwiPT09ZT8oWmQoXCJ0b3BGb2N1c1wiLFwiZm9jdXNcIixhKSxaZChcInRvcEJsdXJcIixcImJsdXJcIixhKSxjLnRvcEJsdXI9ITAsYy50b3BGb2N1cz0hMCk6XCJ0b3BDYW5jZWxcIj09PWU/KGljKFwiY2FuY2VsXCIsITApJiZaZChcInRvcENhbmNlbFwiLFwiY2FuY2VsXCIsYSksYy50b3BDYW5jZWw9ITApOlwidG9wQ2xvc2VcIj09PWU/KGljKFwiY2xvc2VcIiwhMCkmJlpkKFwidG9wQ2xvc2VcIixcImNsb3NlXCIsYSksYy50b3BDbG9zZT0hMCk6ZmUuaGFzT3duUHJvcGVydHkoZSkmJlcoZSxmZVtlXSxhKSxjW2VdPSEwKX19XG5mdW5jdGlvbiBhZyhhLGIsYyxkKXtjPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2Q9PT1OZi5odG1sJiYoZD1PZihhKSk7ZD09PU5mLmh0bWw/XCJzY3JpcHRcIj09PWE/KGE9Yy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiXFx4M2NzY3JpcHRcXHgzZVxceDNjL3NjcmlwdFxceDNlXCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOmE9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzP2MuY3JlYXRlRWxlbWVudChhLHtpczpiLmlzfSk6Yy5jcmVhdGVFbGVtZW50KGEpOmE9Yy5jcmVhdGVFbGVtZW50TlMoZCxhKTtyZXR1cm4gYX1mdW5jdGlvbiBiZyhhLGIpe3JldHVybig5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoYSl9XG5mdW5jdGlvbiBjZyhhLGIsYyxkKXt2YXIgZT1ZZihiLGMpO3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlcoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7dmFyIGY9YzticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZiBpbiBnZSlnZS5oYXNPd25Qcm9wZXJ0eShmKSYmVyhmLGdlW2ZdLGEpO2Y9YzticmVhaztjYXNlIFwic291cmNlXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7VyhcInRvcExvYWRcIixcImxvYWRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImZvcm1cIjpXKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VyhcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6VyhcInRvcFRvZ2dsZVwiLFwidG9nZ2xlXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOldjKGEsYyk7Zj1WYyhhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXG5cImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9R2YoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6SWYoYSxjKTtmPUEoe30sYyx7dmFsdWU6dm9pZCAwfSk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxjKTtmPUpmKGEsYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpmPWN9WGYoYixmLFpmKTt2YXIgaD1mLGc7Zm9yKGcgaW4gaClpZihoLmhhc093blByb3BlcnR5KGcpKXt2YXIgaz1oW2ddO1wic3R5bGVcIj09PWc/VmYoYSxrLFpmKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJlJmKGEsaykpOlwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1ifHxcIlwiIT09aykmJlNmKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZcblNmKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWcmJlwiYXV0b0ZvY3VzXCIhPT1nJiYodWEuaGFzT3duUHJvcGVydHkoZyk/bnVsbCE9ayYmJGYoZCxnKTpudWxsIT1rJiZVYyhhLGcsayxlKSl9c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmxjKGEpO2FkKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6bGMoYSk7TWYoYSxjKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9Yy52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLGMudmFsdWUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhYy5tdWx0aXBsZTtiPWMudmFsdWU7bnVsbCE9Yj9IZihhLCEhYy5tdWx0aXBsZSxiLCExKTpudWxsIT1jLmRlZmF1bHRWYWx1ZSYmSGYoYSwhIWMubXVsdGlwbGUsYy5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGEub25jbGljaz1DKX19XG5mdW5jdGlvbiBkZyhhLGIsYyxkLGUpe3ZhciBmPW51bGw7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmM9VmMoYSxjKTtkPVZjKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Yz1HZihhLGMpO2Q9R2YoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjPUEoe30sYyx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Yz1KZihhLGMpO2Q9SmYoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGMub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1DKX1YZihiLGQsWmYpO2I9YT12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYSBpbiBjKWlmKCFkLmhhc093blByb3BlcnR5KGEpJiZjLmhhc093blByb3BlcnR5KGEpJiZudWxsIT1jW2FdKWlmKFwic3R5bGVcIj09PWEpe3ZhciBnPWNbYV07Zm9yKGIgaW4gZylnLmhhc093blByb3BlcnR5KGIpJiYoaHx8XG4oaD17fSksaFtiXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YSYmXCJjaGlsZHJlblwiIT09YSYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiZcImF1dG9Gb2N1c1wiIT09YSYmKHVhLmhhc093blByb3BlcnR5KGEpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChhLG51bGwpKTtmb3IoYSBpbiBkKXt2YXIgaz1kW2FdO2c9bnVsbCE9Yz9jW2FdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGEpJiZrIT09ZyYmKG51bGwhPWt8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWEpaWYoZyl7Zm9yKGIgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShiKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShiKXx8KGh8fChoPXt9KSxoW2JdPVwiXCIpO2ZvcihiIGluIGspay5oYXNPd25Qcm9wZXJ0eShiKSYmZ1tiXSE9PWtbYl0mJihofHwoaD17fSksaFtiXT1rW2JdKX1lbHNlIGh8fChmfHwoZj1bXSksZi5wdXNoKGEsaCkpLFxuaD1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1hPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmZyE9PWsmJihmPWZ8fFtdKS5wdXNoKGEsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09YT9nPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJih1YS5oYXNPd25Qcm9wZXJ0eShhKT8obnVsbCE9ayYmJGYoZSxhKSxmfHxnPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChhLGspKX1oJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsaCk7cmV0dXJuIGZ9XG5mdW5jdGlvbiBlZyhhLGIsYyxkLGUpe1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZZYyhhLGUpO1lmKGMsZCk7ZD1ZZihjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGg9YltmXSxnPWJbZisxXTtcInN0eWxlXCI9PT1oP1ZmKGEsZyxaZik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD9SZihhLGcpOlwiY2hpbGRyZW5cIj09PWg/U2YoYSxnKTpVYyhhLGgsZyxkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6WmMoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpMZihhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlPXZvaWQgMCxiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP0hmKGEsISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9cbkhmKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLCEwKTpIZihhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19XG5mdW5jdGlvbiBmZyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlcoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKHZhciBmIGluIGdlKWdlLmhhc093blByb3BlcnR5KGYpJiZXKGYsZ2VbZl0sYSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7VyhcInRvcExvYWRcIixcImxvYWRcIixhKTticmVhaztjYXNlIFwiZm9ybVwiOlcoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtXKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOlcoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOldjKGEsYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOklmKGEsXG5jKTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpLZihhLGMpLFcoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSksJGYoZSxcIm9uQ2hhbmdlXCIpfVhmKGIsYyxaZik7ZD1udWxsO2Zvcih2YXIgaCBpbiBjKWMuaGFzT3duUHJvcGVydHkoaCkmJihmPWNbaF0sXCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIGY/YS50ZXh0Q29udGVudCE9PWYmJihkPVtcImNoaWxkcmVuXCIsZl0pOlwibnVtYmVyXCI9PT10eXBlb2YgZiYmYS50ZXh0Q29udGVudCE9PVwiXCIrZiYmKGQ9W1wiY2hpbGRyZW5cIixcIlwiK2ZdKTp1YS5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZiYmJGYoZSxoKSk7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmxjKGEpO2FkKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6bGMoYSk7TWYoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGMub25DbGljayYmXG4oYS5vbmNsaWNrPUMpfXJldHVybiBkfWZ1bmN0aW9uIG5nKGEsYil7cmV0dXJuIGEubm9kZVZhbHVlIT09Yn1cbnZhciBvZz1PYmplY3QuZnJlZXplKHtjcmVhdGVFbGVtZW50OmFnLGNyZWF0ZVRleHROb2RlOmJnLHNldEluaXRpYWxQcm9wZXJ0aWVzOmNnLGRpZmZQcm9wZXJ0aWVzOmRnLHVwZGF0ZVByb3BlcnRpZXM6ZWcsZGlmZkh5ZHJhdGVkUHJvcGVydGllczpmZyxkaWZmSHlkcmF0ZWRUZXh0Om5nLHdhcm5Gb3JVbm1hdGNoZWRUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dDpmdW5jdGlvbigpe30scmVzdG9yZUNvbnRyb2xsZWRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOlpjKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1cbmMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWVcXHgzZFwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZVxceDNkXCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9WGEoZCk7ZT92b2lkIDA6RChcIjkwXCIpO21jKGQpO1pjKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpMZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSGYoYSwhIWMubXVsdGlwbGUsYiwhMSl9fX0pO1RiLmluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQob2cpO3ZhciBwZz1udWxsLHFnPW51bGw7XG5mdW5jdGlvbiByZyhhKXt0aGlzLl9leHBpcmF0aW9uVGltZT1YLmNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24oKTt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfXJnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOkQoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBzZztYLnVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xucmcucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xucmcucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOkQoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/RChcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtYLmZsdXNoUm9vdChhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtyZy5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gc2coKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1zZy5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuc2cucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07ZnVuY3Rpb24gdGcoYSxiLGMpe3RoaXMuX2ludGVybmFsUm9vdD1YLmNyZWF0ZUNvbnRhaW5lcihhLGIsYyl9dGcucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBzZztiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7WC51cGRhdGVDb250YWluZXIoYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnRnLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBzZzthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7WC51cGRhdGVDb250YWluZXIobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTt0Zy5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgc2c7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO1gudXBkYXRlQ29udGFpbmVyKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG50Zy5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcmcodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiB1ZyhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiB2ZyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG52YXIgWD1wZih7Z2V0Um9vdEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZVR5cGU7c3dpdGNoKGIpe2Nhc2UgOTpjYXNlIDExOmE9KGE9YS5kb2N1bWVudEVsZW1lbnQpP2EubmFtZXNwYWNlVVJJOlBmKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpiPTg9PT1iP2EucGFyZW50Tm9kZTphLGE9Yi5uYW1lc3BhY2VVUkl8fG51bGwsYj1iLnRhZ05hbWUsYT1QZihhLGIpfXJldHVybiBhfSxnZXRDaGlsZEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFBmKGEsYil9LGdldFB1YmxpY0luc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBhfSxwcmVwYXJlRm9yQ29tbWl0OmZ1bmN0aW9uKCl7cGc9VmQ7dmFyIGE9ZmEoKTtpZihuZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYj17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7dmFyIGM9d2luZG93LmdldFNlbGVjdGlvbiYmd2luZG93LmdldFNlbGVjdGlvbigpO1xuaWYoYyYmMCE9PWMucmFuZ2VDb3VudCl7Yj1jLmFuY2hvck5vZGU7dmFyIGQ9Yy5hbmNob3JPZmZzZXQsZT1jLmZvY3VzTm9kZTtjPWMuZm9jdXNPZmZzZXQ7dHJ5e2Iubm9kZVR5cGUsZS5ub2RlVHlwZX1jYXRjaChCKXtiPW51bGw7YnJlYWsgYX12YXIgZj0wLGg9LTEsZz0tMSxrPTAsdj0wLGw9YSxwPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgejs7KXtsIT09Ynx8MCE9PWQmJjMhPT1sLm5vZGVUeXBlfHwoaD1mK2QpO2whPT1lfHwwIT09YyYmMyE9PWwubm9kZVR5cGV8fChnPWYrYyk7Mz09PWwubm9kZVR5cGUmJihmKz1sLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oej1sLmZpcnN0Q2hpbGQpKWJyZWFrO3A9bDtsPXp9Zm9yKDs7KXtpZihsPT09YSlicmVhayBiO3A9PT1iJiYrK2s9PT1kJiYoaD1mKTtwPT09ZSYmKyt2PT09YyYmKGc9Zik7aWYobnVsbCE9PSh6PWwubmV4dFNpYmxpbmcpKWJyZWFrO2w9cDtwPWwucGFyZW50Tm9kZX1sPXp9Yj0tMT09PWh8fC0xPT09Zz9udWxsOlxue3N0YXJ0OmgsZW5kOmd9fWVsc2UgYj1udWxsfWI9Ynx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYj1udWxsO3FnPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmJ9O1dkKCExKX0scmVzZXRBZnRlckNvbW1pdDpmdW5jdGlvbigpe3ZhciBhPXFnLGI9ZmEoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZqYShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYod2luZG93LmdldFNlbGVjdGlvbil7Yj13aW5kb3cuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Y1ttYigpXS5sZW5ndGg7YT1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/YTpNYXRoLm1pbihkLmVuZCxlKTshYi5leHRlbmQmJmE+XG5kJiYoZT1kLGQ9YSxhPWUpO2U9bWUoYyxhKTt2YXIgZj1tZShjLGQpO2lmKGUmJmYmJigxIT09Yi5yYW5nZUNvdW50fHxiLmFuY2hvck5vZGUhPT1lLm5vZGV8fGIuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGIuZm9jdXNOb2RlIT09Zi5ub2RlfHxiLmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpKXt2YXIgaD1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO2guc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KTtiLnJlbW92ZUFsbFJhbmdlcygpO2E+ZD8oYi5hZGRSYW5nZShoKSxiLmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKTooaC5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSxiLmFkZFJhbmdlKGgpKX19Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7Yy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxcbmEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9cWc9bnVsbDtXZChwZyk7cGc9bnVsbH0sY3JlYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlKXthPWFnKGEsYixjLGQpO2FbRl09ZTthW1RhXT1iO3JldHVybiBhfSxhcHBlbmRJbml0aWFsQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbjpmdW5jdGlvbihhLGIsYyxkKXtjZyhhLGIsYyxkKTtyZXR1cm4gdmcoYixjKX0scHJlcGFyZVVwZGF0ZTpmdW5jdGlvbihhLGIsYyxkLGUpe3JldHVybiBkZyhhLGIsYyxkLGUpfSxzaG91bGRTZXRUZXh0Q29udGVudDpmdW5jdGlvbihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcInN0cmluZ1wiPT09XG50eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9LHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4hIWIuaGlkZGVufSxjcmVhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCl7YT1iZyhhLGIpO2FbRl09ZDtyZXR1cm4gYX0sbm93OnNmLG11dGF0aW9uOntjb21taXRNb3VudDpmdW5jdGlvbihhLGIsYyl7dmcoYixjKSYmYS5mb2N1cygpfSxjb21taXRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXthW1RhXT1lO2VnKGEsYixjLGQsZSl9LHJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7U2YoYSxcIlwiKX0sY29tbWl0VGV4dFVwZGF0ZTpmdW5jdGlvbihhLGIsYyl7YS5ub2RlVmFsdWU9Y30sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxhcHBlbmRDaGlsZFRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGEpOmEuYXBwZW5kQ2hpbGQoYil9LFxuaW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGEsYixjKXthLmluc2VydEJlZm9yZShiLGMpfSxpbnNlcnRJbkNvbnRhaW5lckJlZm9yZTpmdW5jdGlvbihhLGIsYyl7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGMpOmEuaW5zZXJ0QmVmb3JlKGIsYyl9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKGEsYil7YS5yZW1vdmVDaGlsZChiKX0scmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpOmEucmVtb3ZlQ2hpbGQoYil9fSxoeWRyYXRpb246e2Nhbkh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3JldHVybiAxIT09YS5ub2RlVHlwZXx8Yi50b0xvd2VyQ2FzZSgpIT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YX0sY2FuSHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3JldHVyblwiXCI9PT1ifHwzIT09YS5ub2RlVHlwZT9udWxsOmF9LGdldE5leHRIeWRyYXRhYmxlU2libGluZzpmdW5jdGlvbihhKXtmb3IoYT1cbmEubmV4dFNpYmxpbmc7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkOmZ1bmN0aW9uKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0saHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXthW0ZdPWY7YVtUYV09YztyZXR1cm4gZmcoYSxiLGMsZSxkKX0saHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7YVtGXT1jO3JldHVybiBuZyhhLGIpfSxkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbigpe30sXG5kaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9fSxzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2s6dGYsY2FuY2VsRGVmZXJyZWRDYWxsYmFjazp1Zn0pLENnPVg7YWM9Q2cuYmF0Y2hlZFVwZGF0ZXM7YmM9Q2cuaW50ZXJhY3RpdmVVcGRhdGVzO2NjPUNnLmZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzO1xuZnVuY3Rpb24gRGcoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyB0ZyhhLCExLGIpfVxuZnVuY3Rpb24gRWcoYSxiLGMsZCxlKXt1ZyhjKT92b2lkIDA6RChcIjIwMFwiKTt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9RGcoYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9WC5nZXRQdWJsaWNSb290SW5zdGFuY2UoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fVgudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gWC5nZXRQdWJsaWNSb290SW5zdGFuY2UoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIEZnKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7dWcoYik/dm9pZCAwOkQoXCIyMDBcIik7cmV0dXJuIHFmKGEsYixudWxsLGMpfVxudmFyIEdnPXtjcmVhdGVQb3J0YWw6RmcsZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/bnVsbDoxPT09YS5ub2RlVHlwZT9hOlguZmluZEhvc3RJbnN0YW5jZShhKX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVnKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBFZyhudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP0QoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIEVnKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe3VnKGEpP3ZvaWQgMDpEKFwiNDBcIik7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWC51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7RWcobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9XG5udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBGZy5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6WC5iYXRjaGVkVXBkYXRlcyx1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXM6WC5kZWZlcnJlZFVwZGF0ZXMsZmx1c2hTeW5jOlguZmx1c2hTeW5jLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpYLmZsdXNoQ29udHJvbGxlZCxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRQbHVnaW5IdWI6UmEsRXZlbnRQbHVnaW5SZWdpc3RyeTpDYSxFdmVudFByb3BhZ2F0b3JzOmtiLFJlYWN0Q29udHJvbGxlZENvbXBvbmVudDokYixSZWFjdERPTUNvbXBvbmVudFRyZWU6YmIsUmVhY3RET01FdmVudExpc3RlbmVyOiRkfSx1bnN0YWJsZV9jcmVhdGVSb290OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyB0ZyhhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX19O1xuWC5pbmplY3RJbnRvRGV2VG9vbHMoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOlVhLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMy4yXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIEhnPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6R2d9KSxJZz1IZyYmR2d8fEhnO21vZHVsZS5leHBvcnRzPUlnW1wiZGVmYXVsdFwiXT9JZ1tcImRlZmF1bHRcIl06SWc7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjMuMlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLHA9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLHE9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIikscj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0sdD1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdT1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnBvcnRhbFwiKTo2MDEwNix2PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdz1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHg9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx5PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx6PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxBPXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6XG42MDExMixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cImh0dHA6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsYz0wO2M8YjtjKyspZSs9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtuKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZSl9dmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319O1xuZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxEfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0MoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RH12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RzttKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbH0sSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEwoYSxiLGUpe3ZhciBjPXZvaWQgMCxkPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGMpJiYhSy5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBrPUFycmF5KGYpLGw9MDtsPGY7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZC5jaGlsZHJlbj1rfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2NdJiYoZFtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6SS5jdXJyZW50fX1cbmZ1bmN0aW9uIE0oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXR9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIlxceDNkXCI6XCJcXHgzZDBcIixcIjpcIjpcIlxceDNkMlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTj0vXFwvKy9nLE89W107ZnVuY3Rpb24gUChhLGIsZSxjKXtpZihPLmxlbmd0aCl7dmFyIGQ9Ty5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWU7ZC5jb250ZXh0PWM7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmUsY29udGV4dDpjLGNvdW50OjB9fWZ1bmN0aW9uIFEoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5PLmxlbmd0aCYmTy5wdXNoKGEpfVxuZnVuY3Rpb24gUihhLGIsZSxjKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgdDpjYXNlIHU6Zz0hMH19aWYoZylyZXR1cm4gZShjLGEsXCJcIj09PWI/XCIuXCIrUyhhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtkPWFbaF07dmFyIGY9YitTKGQsaCk7Zys9UihkLGYsZSxjKX1lbHNlIGlmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksXG5oPTA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1MoZCxoKyspLGcrPVIoZCxmLGUsYyk7ZWxzZVwib2JqZWN0XCI9PT1kJiYoZT1cIlwiK2EsQyhcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gUyhhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVChhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBVKGEsYixlKXt2YXIgYz1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGUscS50aGF0UmV0dXJuc0FyZ3VtZW50KTpudWxsIT1hJiYoTShhKSYmKGI9ZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTixcIiRcXHgyNi9cIikrXCIvXCIpK2UsYT17JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9KSxjLnB1c2goYSkpfWZ1bmN0aW9uIFYoYSxiLGUsYyxkKXt2YXIgZz1cIlwiO251bGwhPWUmJihnPShcIlwiK2UpLnJlcGxhY2UoTixcIiRcXHgyNi9cIikrXCIvXCIpO2I9UChiLGcsYyxkKTtudWxsPT1hfHxSKGEsXCJcIixVLGIpO1EoYil9XG52YXIgVz17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtWKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1QKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFIoYSxcIlwiLFQsYik7UShiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpSKGEsXCJcIixxLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLHEudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TShhKT92b2lkIDA6QyhcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnksXG5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfZGVmYXVsdFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTphLF9jaGFuZ2VkQml0czowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6eCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLHJlbmRlcjphfX0sRnJhZ21lbnQ6dixTdHJpY3RNb2RlOncsdW5zdGFibGVfQXN5bmNNb2RlOnosY3JlYXRlRWxlbWVudDpMLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7bnVsbD09PWF8fHZvaWQgMD09PWE/QyhcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZD1tKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUkuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBrPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJlxuKGs9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilKLmNhbGwoYixjKSYmIUsuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWs/a1tjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YylkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGMpe2s9QXJyYXkoYyk7Zm9yKHZhciBsPTA7bDxjO2wrKylrW2xdPWFyZ3VtZW50c1tsKzJdO2QuY2hpbGRyZW49a31yZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1MLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6TSx2ZXJzaW9uOlwiMTYuMy4yXCIsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudE93bmVyOkksYXNzaWduOm19fSxYPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6V30pLFxuWT1YJiZXfHxYO21vZHVsZS5leHBvcnRzPVlbXCJkZWZhdWx0XCJdP1lbXCJkZWZhdWx0XCJdOlk7XG4iLCJpbXBvcnQgJy4vc3R5bGVzL3N0eWxlcy5zY3NzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgQXBwUm91dGVyIGZyb20gJy4vY29tcG9uZW50cy9yb3V0ZXJzL0FwcFJvdXRlci5qcyc7XG5cblxuUmVhY3RET00ucmVuZGVyKDxBcHBSb3V0ZXIvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcHBcIikpOyJdLCJzb3VyY2VSb290IjoiIn0=